
G05.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174ac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb8  08017640  08017640  00027640  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080182f8  080182f8  00030230  2**0
                  CONTENTS
  4 .ARM          00000008  080182f8  080182f8  000282f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018300  08018300  00030230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018300  08018300  00028300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018304  08018304  00028304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000230  20000000  08018308  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030230  2**0
                  CONTENTS
 10 .bss          00001370  20000230  20000230  00030230  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200015a0  200015a0  00030230  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030260  2**0
                  CONTENTS, READONLY
 14 .debug_info   00024157  00000000  00000000  000302a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005426  00000000  00000000  000543fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001fc8  00000000  00000000  00059820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000018ad  00000000  00000000  0005b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002aa0c  00000000  00000000  0005d095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c1e8  00000000  00000000  00087aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ecf84  00000000  00000000  000b3c89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009de4  00000000  00000000  001a0c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001aa9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000230 	.word	0x20000230
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08017624 	.word	0x08017624

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000234 	.word	0x20000234
 80001cc:	08017624 	.word	0x08017624

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9f1 	b.w	800108c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9a6 	b.w	800108c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9e08      	ldr	r6, [sp, #32]
 8000dca:	460d      	mov	r5, r1
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460f      	mov	r7, r1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14a      	bne.n	8000e6a <__udivmoddi4+0xa6>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	d965      	bls.n	8000ea6 <__udivmoddi4+0xe2>
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	b143      	cbz	r3, 8000df2 <__udivmoddi4+0x2e>
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	f1c3 0220 	rsb	r2, r3, #32
 8000de8:	409f      	lsls	r7, r3
 8000dea:	fa20 f202 	lsr.w	r2, r0, r2
 8000dee:	4317      	orrs	r7, r2
 8000df0:	409c      	lsls	r4, r3
 8000df2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000df6:	fa1f f58c 	uxth.w	r5, ip
 8000dfa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dfe:	0c22      	lsrs	r2, r4, #16
 8000e00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e08:	fb01 f005 	mul.w	r0, r1, r5
 8000e0c:	4290      	cmp	r0, r2
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x62>
 8000e10:	eb1c 0202 	adds.w	r2, ip, r2
 8000e14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e18:	f080 811c 	bcs.w	8001054 <__udivmoddi4+0x290>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f240 8119 	bls.w	8001054 <__udivmoddi4+0x290>
 8000e22:	3902      	subs	r1, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a12      	subs	r2, r2, r0
 8000e28:	b2a4      	uxth	r4, r4
 8000e2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e36:	fb00 f505 	mul.w	r5, r0, r5
 8000e3a:	42a5      	cmp	r5, r4
 8000e3c:	d90a      	bls.n	8000e54 <__udivmoddi4+0x90>
 8000e3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e46:	f080 8107 	bcs.w	8001058 <__udivmoddi4+0x294>
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	f240 8104 	bls.w	8001058 <__udivmoddi4+0x294>
 8000e50:	4464      	add	r4, ip
 8000e52:	3802      	subs	r0, #2
 8000e54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11e      	cbz	r6, 8000e66 <__udivmoddi4+0xa2>
 8000e5e:	40dc      	lsrs	r4, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	e9c6 4300 	strd	r4, r3, [r6]
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0xbc>
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	f000 80ed 	beq.w	800104e <__udivmoddi4+0x28a>
 8000e74:	2100      	movs	r1, #0
 8000e76:	e9c6 0500 	strd	r0, r5, [r6]
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	fab3 f183 	clz	r1, r3
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d149      	bne.n	8000f1c <__udivmoddi4+0x158>
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	d302      	bcc.n	8000e92 <__udivmoddi4+0xce>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	f200 80f8 	bhi.w	8001082 <__udivmoddi4+0x2be>
 8000e92:	1a84      	subs	r4, r0, r2
 8000e94:	eb65 0203 	sbc.w	r2, r5, r3
 8000e98:	2001      	movs	r0, #1
 8000e9a:	4617      	mov	r7, r2
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d0e2      	beq.n	8000e66 <__udivmoddi4+0xa2>
 8000ea0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ea4:	e7df      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000ea6:	b902      	cbnz	r2, 8000eaa <__udivmoddi4+0xe6>
 8000ea8:	deff      	udf	#255	; 0xff
 8000eaa:	fab2 f382 	clz	r3, r2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8090 	bne.w	8000fd4 <__udivmoddi4+0x210>
 8000eb4:	1a8a      	subs	r2, r1, r2
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f fe8c 	uxth.w	lr, ip
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ec4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec8:	0c22      	lsrs	r2, r4, #16
 8000eca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ece:	fb0e f005 	mul.w	r0, lr, r5
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x124>
 8000ed6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x122>
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	f200 80cb 	bhi.w	800107c <__udivmoddi4+0x2b8>
 8000ee6:	4645      	mov	r5, r8
 8000ee8:	1a12      	subs	r2, r2, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ef0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ef4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef8:	fb0e fe00 	mul.w	lr, lr, r0
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x14e>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x14c>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f200 80bb 	bhi.w	8001086 <__udivmoddi4+0x2c2>
 8000f10:	4610      	mov	r0, r2
 8000f12:	eba4 040e 	sub.w	r4, r4, lr
 8000f16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f1a:	e79f      	b.n	8000e5c <__udivmoddi4+0x98>
 8000f1c:	f1c1 0720 	rsb	r7, r1, #32
 8000f20:	408b      	lsls	r3, r1
 8000f22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f32:	40fd      	lsrs	r5, r7
 8000f34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f38:	4323      	orrs	r3, r4
 8000f3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f3e:	fa1f fe8c 	uxth.w	lr, ip
 8000f42:	fb09 5518 	mls	r5, r9, r8, r5
 8000f46:	0c1c      	lsrs	r4, r3, #16
 8000f48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f50:	42a5      	cmp	r5, r4
 8000f52:	fa02 f201 	lsl.w	r2, r2, r1
 8000f56:	fa00 f001 	lsl.w	r0, r0, r1
 8000f5a:	d90b      	bls.n	8000f74 <__udivmoddi4+0x1b0>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f64:	f080 8088 	bcs.w	8001078 <__udivmoddi4+0x2b4>
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	f240 8085 	bls.w	8001078 <__udivmoddi4+0x2b4>
 8000f6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f72:	4464      	add	r4, ip
 8000f74:	1b64      	subs	r4, r4, r5
 8000f76:	b29d      	uxth	r5, r3
 8000f78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f88:	45a6      	cmp	lr, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x1da>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f94:	d26c      	bcs.n	8001070 <__udivmoddi4+0x2ac>
 8000f96:	45a6      	cmp	lr, r4
 8000f98:	d96a      	bls.n	8001070 <__udivmoddi4+0x2ac>
 8000f9a:	3b02      	subs	r3, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fa6:	eba4 040e 	sub.w	r4, r4, lr
 8000faa:	42ac      	cmp	r4, r5
 8000fac:	46c8      	mov	r8, r9
 8000fae:	46ae      	mov	lr, r5
 8000fb0:	d356      	bcc.n	8001060 <__udivmoddi4+0x29c>
 8000fb2:	d053      	beq.n	800105c <__udivmoddi4+0x298>
 8000fb4:	b156      	cbz	r6, 8000fcc <__udivmoddi4+0x208>
 8000fb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fba:	eb64 040e 	sbc.w	r4, r4, lr
 8000fbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000fc2:	40ca      	lsrs	r2, r1
 8000fc4:	40cc      	lsrs	r4, r1
 8000fc6:	4317      	orrs	r7, r2
 8000fc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	f1c3 0120 	rsb	r1, r3, #32
 8000fd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000fe0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fe4:	409d      	lsls	r5, r3
 8000fe6:	432a      	orrs	r2, r5
 8000fe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ff8:	0c11      	lsrs	r1, r2, #16
 8000ffa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ffe:	fb00 f50e 	mul.w	r5, r0, lr
 8001002:	428d      	cmp	r5, r1
 8001004:	fa04 f403 	lsl.w	r4, r4, r3
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x258>
 800100a:	eb1c 0101 	adds.w	r1, ip, r1
 800100e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001012:	d22f      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001014:	428d      	cmp	r5, r1
 8001016:	d92d      	bls.n	8001074 <__udivmoddi4+0x2b0>
 8001018:	3802      	subs	r0, #2
 800101a:	4461      	add	r1, ip
 800101c:	1b49      	subs	r1, r1, r5
 800101e:	b292      	uxth	r2, r2
 8001020:	fbb1 f5f7 	udiv	r5, r1, r7
 8001024:	fb07 1115 	mls	r1, r7, r5, r1
 8001028:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800102c:	fb05 f10e 	mul.w	r1, r5, lr
 8001030:	4291      	cmp	r1, r2
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x282>
 8001034:	eb1c 0202 	adds.w	r2, ip, r2
 8001038:	f105 38ff 	add.w	r8, r5, #4294967295
 800103c:	d216      	bcs.n	800106c <__udivmoddi4+0x2a8>
 800103e:	4291      	cmp	r1, r2
 8001040:	d914      	bls.n	800106c <__udivmoddi4+0x2a8>
 8001042:	3d02      	subs	r5, #2
 8001044:	4462      	add	r2, ip
 8001046:	1a52      	subs	r2, r2, r1
 8001048:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800104c:	e738      	b.n	8000ec0 <__udivmoddi4+0xfc>
 800104e:	4631      	mov	r1, r6
 8001050:	4630      	mov	r0, r6
 8001052:	e708      	b.n	8000e66 <__udivmoddi4+0xa2>
 8001054:	4639      	mov	r1, r7
 8001056:	e6e6      	b.n	8000e26 <__udivmoddi4+0x62>
 8001058:	4610      	mov	r0, r2
 800105a:	e6fb      	b.n	8000e54 <__udivmoddi4+0x90>
 800105c:	4548      	cmp	r0, r9
 800105e:	d2a9      	bcs.n	8000fb4 <__udivmoddi4+0x1f0>
 8001060:	ebb9 0802 	subs.w	r8, r9, r2
 8001064:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001068:	3b01      	subs	r3, #1
 800106a:	e7a3      	b.n	8000fb4 <__udivmoddi4+0x1f0>
 800106c:	4645      	mov	r5, r8
 800106e:	e7ea      	b.n	8001046 <__udivmoddi4+0x282>
 8001070:	462b      	mov	r3, r5
 8001072:	e794      	b.n	8000f9e <__udivmoddi4+0x1da>
 8001074:	4640      	mov	r0, r8
 8001076:	e7d1      	b.n	800101c <__udivmoddi4+0x258>
 8001078:	46d0      	mov	r8, sl
 800107a:	e77b      	b.n	8000f74 <__udivmoddi4+0x1b0>
 800107c:	3d02      	subs	r5, #2
 800107e:	4462      	add	r2, ip
 8001080:	e732      	b.n	8000ee8 <__udivmoddi4+0x124>
 8001082:	4608      	mov	r0, r1
 8001084:	e70a      	b.n	8000e9c <__udivmoddi4+0xd8>
 8001086:	4464      	add	r4, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e742      	b.n	8000f12 <__udivmoddi4+0x14e>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <TrimRead>:
		 dig_H2,  dig_H4, dig_H5, dig_H6;


// Membaca trimming parameter yang disimpan pada NVM ROM BME
void TrimRead(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08c      	sub	sp, #48	; 0x30
 8001094:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Membaca NVM dari 0x88 ke 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2319      	movs	r3, #25
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	463b      	mov	r3, r7
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	2288      	movs	r2, #136	; 0x88
 80010a8:	21ec      	movs	r1, #236	; 0xec
 80010aa:	4857      	ldr	r0, [pc, #348]	; (8001208 <TrimRead+0x178>)
 80010ac:	f008 f930 	bl	8009310 <HAL_I2C_Mem_Read>

	// Membaca NVM dari 0xE1 ke 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010b0:	463b      	mov	r3, r7
 80010b2:	3319      	adds	r3, #25
 80010b4:	f04f 32ff 	mov.w	r2, #4294967295
 80010b8:	9202      	str	r2, [sp, #8]
 80010ba:	2207      	movs	r2, #7
 80010bc:	9201      	str	r2, [sp, #4]
 80010be:	9300      	str	r3, [sp, #0]
 80010c0:	2301      	movs	r3, #1
 80010c2:	22e1      	movs	r2, #225	; 0xe1
 80010c4:	21ec      	movs	r1, #236	; 0xec
 80010c6:	4850      	ldr	r0, [pc, #320]	; (8001208 <TrimRead+0x178>)
 80010c8:	f008 f922 	bl	8009310 <HAL_I2C_Mem_Read>

	// Mengatur data sesuai datasheet
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010cc:	787b      	ldrb	r3, [r7, #1]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	783b      	ldrb	r3, [r7, #0]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21b      	sxth	r3, r3
 80010da:	b29a      	uxth	r2, r3
 80010dc:	4b4b      	ldr	r3, [pc, #300]	; (800120c <TrimRead+0x17c>)
 80010de:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010e0:	78fb      	ldrb	r3, [r7, #3]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	78bb      	ldrb	r3, [r7, #2]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21a      	sxth	r2, r3
 80010ee:	4b48      	ldr	r3, [pc, #288]	; (8001210 <TrimRead+0x180>)
 80010f0:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80010f2:	797b      	ldrb	r3, [r7, #5]
 80010f4:	021b      	lsls	r3, r3, #8
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	793b      	ldrb	r3, [r7, #4]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b44      	ldr	r3, [pc, #272]	; (8001214 <TrimRead+0x184>)
 8001102:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001104:	79fb      	ldrb	r3, [r7, #7]
 8001106:	021b      	lsls	r3, r3, #8
 8001108:	b21a      	sxth	r2, r3
 800110a:	797b      	ldrb	r3, [r7, #5]
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	b29a      	uxth	r2, r3
 8001114:	4b40      	ldr	r3, [pc, #256]	; (8001218 <TrimRead+0x188>)
 8001116:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001118:	7a7b      	ldrb	r3, [r7, #9]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	79bb      	ldrb	r3, [r7, #6]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b3d      	ldr	r3, [pc, #244]	; (800121c <TrimRead+0x18c>)
 8001128:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800112a:	7afb      	ldrb	r3, [r7, #11]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	b21a      	sxth	r2, r3
 8001130:	7abb      	ldrb	r3, [r7, #10]
 8001132:	b21b      	sxth	r3, r3
 8001134:	4313      	orrs	r3, r2
 8001136:	b21a      	sxth	r2, r3
 8001138:	4b39      	ldr	r3, [pc, #228]	; (8001220 <TrimRead+0x190>)
 800113a:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 800113c:	7b7b      	ldrb	r3, [r7, #13]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	b21a      	sxth	r2, r3
 8001142:	7b3b      	ldrb	r3, [r7, #12]
 8001144:	b21b      	sxth	r3, r3
 8001146:	4313      	orrs	r3, r2
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <TrimRead+0x194>)
 800114c:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	021b      	lsls	r3, r3, #8
 8001152:	b21a      	sxth	r2, r3
 8001154:	7bbb      	ldrb	r3, [r7, #14]
 8001156:	b21b      	sxth	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b21a      	sxth	r2, r3
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <TrimRead+0x198>)
 800115e:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001160:	7c7b      	ldrb	r3, [r7, #17]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	7c3b      	ldrb	r3, [r7, #16]
 8001168:	b21b      	sxth	r3, r3
 800116a:	4313      	orrs	r3, r2
 800116c:	b21a      	sxth	r2, r3
 800116e:	4b2f      	ldr	r3, [pc, #188]	; (800122c <TrimRead+0x19c>)
 8001170:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001172:	7cfb      	ldrb	r3, [r7, #19]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	b21a      	sxth	r2, r3
 8001178:	7cbb      	ldrb	r3, [r7, #18]
 800117a:	b21b      	sxth	r3, r3
 800117c:	4313      	orrs	r3, r2
 800117e:	b21a      	sxth	r2, r3
 8001180:	4b2b      	ldr	r3, [pc, #172]	; (8001230 <TrimRead+0x1a0>)
 8001182:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001184:	7d7b      	ldrb	r3, [r7, #21]
 8001186:	021b      	lsls	r3, r3, #8
 8001188:	b21a      	sxth	r2, r3
 800118a:	7d3b      	ldrb	r3, [r7, #20]
 800118c:	b21b      	sxth	r3, r3
 800118e:	4313      	orrs	r3, r2
 8001190:	b21a      	sxth	r2, r3
 8001192:	4b28      	ldr	r3, [pc, #160]	; (8001234 <TrimRead+0x1a4>)
 8001194:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 8001196:	7dfb      	ldrb	r3, [r7, #23]
 8001198:	021b      	lsls	r3, r3, #8
 800119a:	b21a      	sxth	r2, r3
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	b21b      	sxth	r3, r3
 80011a0:	4313      	orrs	r3, r2
 80011a2:	b21a      	sxth	r2, r3
 80011a4:	4b24      	ldr	r3, [pc, #144]	; (8001238 <TrimRead+0x1a8>)
 80011a6:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011a8:	7e3b      	ldrb	r3, [r7, #24]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4b23      	ldr	r3, [pc, #140]	; (800123c <TrimRead+0x1ac>)
 80011ae:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011b0:	7ebb      	ldrb	r3, [r7, #26]
 80011b2:	021b      	lsls	r3, r3, #8
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	7e7b      	ldrb	r3, [r7, #25]
 80011b8:	b21b      	sxth	r3, r3
 80011ba:	4313      	orrs	r3, r2
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b20      	ldr	r3, [pc, #128]	; (8001240 <TrimRead+0x1b0>)
 80011c0:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011c2:	7efb      	ldrb	r3, [r7, #27]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b1f      	ldr	r3, [pc, #124]	; (8001244 <TrimRead+0x1b4>)
 80011c8:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011ca:	7f3b      	ldrb	r3, [r7, #28]
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7f7b      	ldrb	r3, [r7, #29]
 80011d2:	b21b      	sxth	r3, r3
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	b21b      	sxth	r3, r3
 80011da:	4313      	orrs	r3, r2
 80011dc:	b21a      	sxth	r2, r3
 80011de:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <TrimRead+0x1b8>)
 80011e0:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011e2:	7fbb      	ldrb	r3, [r7, #30]
 80011e4:	011b      	lsls	r3, r3, #4
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	7f7b      	ldrb	r3, [r7, #29]
 80011ea:	091b      	lsrs	r3, r3, #4
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	4b15      	ldr	r3, [pc, #84]	; (800124c <TrimRead+0x1bc>)
 80011f6:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80011f8:	7ffb      	ldrb	r3, [r7, #31]
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	4b14      	ldr	r3, [pc, #80]	; (8001250 <TrimRead+0x1c0>)
 80011fe:	801a      	strh	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000934 	.word	0x20000934
 800120c:	20000258 	.word	0x20000258
 8001210:	20000260 	.word	0x20000260
 8001214:	20000262 	.word	0x20000262
 8001218:	2000025a 	.word	0x2000025a
 800121c:	20000264 	.word	0x20000264
 8001220:	20000266 	.word	0x20000266
 8001224:	20000268 	.word	0x20000268
 8001228:	2000026a 	.word	0x2000026a
 800122c:	2000026c 	.word	0x2000026c
 8001230:	2000026e 	.word	0x2000026e
 8001234:	20000270 	.word	0x20000270
 8001238:	20000272 	.word	0x20000272
 800123c:	2000025c 	.word	0x2000025c
 8001240:	20000274 	.word	0x20000274
 8001244:	2000025e 	.word	0x2000025e
 8001248:	20000276 	.word	0x20000276
 800124c:	20000278 	.word	0x20000278
 8001250:	2000027a 	.word	0x2000027a

08001254 <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001254:	b590      	push	{r4, r7, lr}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af04      	add	r7, sp, #16
 800125a:	4604      	mov	r4, r0
 800125c:	4608      	mov	r0, r1
 800125e:	4611      	mov	r1, r2
 8001260:	461a      	mov	r2, r3
 8001262:	4623      	mov	r3, r4
 8001264:	71fb      	strb	r3, [r7, #7]
 8001266:	4603      	mov	r3, r0
 8001268:	71bb      	strb	r3, [r7, #6]
 800126a:	460b      	mov	r3, r1
 800126c:	717b      	strb	r3, [r7, #5]
 800126e:	4613      	mov	r3, r2
 8001270:	713b      	strb	r3, [r7, #4]
	// Membaca Trimming parameters
	TrimRead();
 8001272:	f7ff ff0d 	bl	8001090 <TrimRead>


	uint8_t datatowrite = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	73bb      	strb	r3, [r7, #14]

	// Reset BME
	datatowrite = 0xB6;  // Reset siklus pembacaan i2c
 800127e:	23b6      	movs	r3, #182	; 0xb6
 8001280:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	9302      	str	r3, [sp, #8]
 8001288:	2301      	movs	r3, #1
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	f107 030f 	add.w	r3, r7, #15
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2301      	movs	r3, #1
 8001294:	22e0      	movs	r2, #224	; 0xe0
 8001296:	21ec      	movs	r1, #236	; 0xec
 8001298:	4858      	ldr	r0, [pc, #352]	; (80013fc <BME280_Config+0x1a8>)
 800129a:	f007 ff3f 	bl	800911c <HAL_I2C_Mem_Write>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <BME280_Config+0x56>
	{
		return -1;
 80012a4:	f04f 33ff 	mov.w	r3, #4294967295
 80012a8:	e0a3      	b.n	80013f2 <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012aa:	2064      	movs	r0, #100	; 0x64
 80012ac:	f005 fe20 	bl	8006ef0 <HAL_Delay>

	// Memberikan oversampling humidity ke 0xF2
	datatowrite = osrs_h;
 80012b0:	797b      	ldrb	r3, [r7, #5]
 80012b2:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	2301      	movs	r3, #1
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	f107 030f 	add.w	r3, r7, #15
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	22f2      	movs	r2, #242	; 0xf2
 80012c8:	21ec      	movs	r1, #236	; 0xec
 80012ca:	484c      	ldr	r0, [pc, #304]	; (80013fc <BME280_Config+0x1a8>)
 80012cc:	f007 ff26 	bl	800911c <HAL_I2C_Mem_Write>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <BME280_Config+0x88>
	{
		return -1;
 80012d6:	f04f 33ff 	mov.w	r3, #4294967295
 80012da:	e08a      	b.n	80013f2 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012dc:	2064      	movs	r0, #100	; 0x64
 80012de:	f005 fe07 	bl	8006ef0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	f107 030e 	add.w	r3, r7, #14
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2301      	movs	r3, #1
 80012f4:	22f2      	movs	r2, #242	; 0xf2
 80012f6:	21ec      	movs	r1, #236	; 0xec
 80012f8:	4840      	ldr	r0, [pc, #256]	; (80013fc <BME280_Config+0x1a8>)
 80012fa:	f008 f809 	bl	8009310 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012fe:	7bba      	ldrb	r2, [r7, #14]
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	429a      	cmp	r2, r3
 8001304:	d002      	beq.n	800130c <BME280_Config+0xb8>
	{
		return -1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e072      	b.n	80013f2 <BME280_Config+0x19e>
	}

	// Memberikan standby time dan koofisien filter IIR di alamat 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 800130c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001310:	015b      	lsls	r3, r3, #5
 8001312:	b25a      	sxtb	r2, r3
 8001314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	b25b      	sxtb	r3, r3
 800131c:	4313      	orrs	r3, r2
 800131e:	b25b      	sxtb	r3, r3
 8001320:	b2db      	uxtb	r3, r3
 8001322:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001328:	9302      	str	r3, [sp, #8]
 800132a:	2301      	movs	r3, #1
 800132c:	9301      	str	r3, [sp, #4]
 800132e:	f107 030f 	add.w	r3, r7, #15
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2301      	movs	r3, #1
 8001336:	22f5      	movs	r2, #245	; 0xf5
 8001338:	21ec      	movs	r1, #236	; 0xec
 800133a:	4830      	ldr	r0, [pc, #192]	; (80013fc <BME280_Config+0x1a8>)
 800133c:	f007 feee 	bl	800911c <HAL_I2C_Mem_Write>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d002      	beq.n	800134c <BME280_Config+0xf8>
	{
		return -1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e052      	b.n	80013f2 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 800134c:	2064      	movs	r0, #100	; 0x64
 800134e:	f005 fdcf 	bl	8006ef0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	2301      	movs	r3, #1
 800135a:	9301      	str	r3, [sp, #4]
 800135c:	f107 030e 	add.w	r3, r7, #14
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	2301      	movs	r3, #1
 8001364:	22f5      	movs	r2, #245	; 0xf5
 8001366:	21ec      	movs	r1, #236	; 0xec
 8001368:	4824      	ldr	r0, [pc, #144]	; (80013fc <BME280_Config+0x1a8>)
 800136a:	f007 ffd1 	bl	8009310 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800136e:	7bba      	ldrb	r2, [r7, #14]
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	429a      	cmp	r2, r3
 8001374:	d002      	beq.n	800137c <BME280_Config+0x128>
	{
		return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	e03a      	b.n	80013f2 <BME280_Config+0x19e>
	}

	// Memberikan data oversampling tekanan udara dan temperature ke alamat 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	015b      	lsls	r3, r3, #5
 8001380:	b25a      	sxtb	r2, r3
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	b25b      	sxtb	r3, r3
 8001388:	4313      	orrs	r3, r2
 800138a:	b25a      	sxtb	r2, r3
 800138c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001390:	4313      	orrs	r3, r2
 8001392:	b25b      	sxtb	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	9302      	str	r3, [sp, #8]
 800139e:	2301      	movs	r3, #1
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	f107 030f 	add.w	r3, r7, #15
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2301      	movs	r3, #1
 80013aa:	22f4      	movs	r2, #244	; 0xf4
 80013ac:	21ec      	movs	r1, #236	; 0xec
 80013ae:	4813      	ldr	r0, [pc, #76]	; (80013fc <BME280_Config+0x1a8>)
 80013b0:	f007 feb4 	bl	800911c <HAL_I2C_Mem_Write>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <BME280_Config+0x16c>
	{
		return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295
 80013be:	e018      	b.n	80013f2 <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013c0:	2064      	movs	r0, #100	; 0x64
 80013c2:	f005 fd95 	bl	8006ef0 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	f107 030e 	add.w	r3, r7, #14
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2301      	movs	r3, #1
 80013d8:	22f4      	movs	r2, #244	; 0xf4
 80013da:	21ec      	movs	r1, #236	; 0xec
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <BME280_Config+0x1a8>)
 80013de:	f007 ff97 	bl	8009310 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013e2:	7bba      	ldrb	r2, [r7, #14]
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d002      	beq.n	80013f0 <BME280_Config+0x19c>
	{
		return -1;
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	e000      	b.n	80013f2 <BME280_Config+0x19e>
	}

	return 0;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd90      	pop	{r4, r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000934 	.word	0x20000934

08001400 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Sebelum membaca check sensor ID
	HAL_I2C_Mem_Read(&hi2c3, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 8001406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2301      	movs	r3, #1
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <BMEReadRaw+0x80>)
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	22d0      	movs	r2, #208	; 0xd0
 8001418:	21ec      	movs	r1, #236	; 0xec
 800141a:	481a      	ldr	r0, [pc, #104]	; (8001484 <BMEReadRaw+0x84>)
 800141c:	f007 ff78 	bl	8009310 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001420:	4b17      	ldr	r3, [pc, #92]	; (8001480 <BMEReadRaw+0x80>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b60      	cmp	r3, #96	; 0x60
 8001426:	d124      	bne.n	8001472 <BMEReadRaw+0x72>
	{
		// membaca register 0xF7 ke 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 8001428:	f04f 33ff 	mov.w	r3, #4294967295
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2306      	movs	r3, #6
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	463b      	mov	r3, r7
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	2301      	movs	r3, #1
 8001438:	22f7      	movs	r2, #247	; 0xf7
 800143a:	21ec      	movs	r1, #236	; 0xec
 800143c:	4811      	ldr	r0, [pc, #68]	; (8001484 <BMEReadRaw+0x84>)
 800143e:	f007 ff67 	bl	8009310 <HAL_I2C_Mem_Read>

		/* Kalkulasi data parameter mentah
		 * Data Pressure dan suhu adalah 20 bit sedangkan kelembapan adalah 16 bit
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001442:	783b      	ldrb	r3, [r7, #0]
 8001444:	031a      	lsls	r2, r3, #12
 8001446:	787b      	ldrb	r3, [r7, #1]
 8001448:	011b      	lsls	r3, r3, #4
 800144a:	4313      	orrs	r3, r2
 800144c:	78ba      	ldrb	r2, [r7, #2]
 800144e:	0912      	lsrs	r2, r2, #4
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	4313      	orrs	r3, r2
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <BMEReadRaw+0x88>)
 8001456:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	031a      	lsls	r2, r3, #12
 800145c:	793b      	ldrb	r3, [r7, #4]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4313      	orrs	r3, r2
 8001462:	797a      	ldrb	r2, [r7, #5]
 8001464:	0912      	lsrs	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	4313      	orrs	r3, r2
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <BMEReadRaw+0x8c>)
 800146c:	6013      	str	r3, [r2, #0]
//		hRaw = (RawData[6]<<8)|(RawData[7]);

		return 0;
 800146e:	2300      	movs	r3, #0
 8001470:	e001      	b.n	8001476 <BMEReadRaw+0x76>
	}

	else return -1;
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000024c 	.word	0x2000024c
 8001484:	20000934 	.word	0x20000934
 8001488:	20000254 	.word	0x20000254
 800148c:	20000250 	.word	0x20000250

08001490 <BME280_compensate_T_int32>:
/* Menghasilkan suhu dalam DegC, resolusi 0.01 DegC. Output “5123” sama dengan 51.23 DegC.
   t_fine membawa suhu pembacaan yang terkoneksi dengan global variabel.
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001490:	b480      	push	{r7}
 8001492:	b087      	sub	sp, #28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	10da      	asrs	r2, r3, #3
 800149c:	4b19      	ldr	r3, [pc, #100]	; (8001504 <BME280_compensate_T_int32+0x74>)
 800149e:	881b      	ldrh	r3, [r3, #0]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	4a18      	ldr	r2, [pc, #96]	; (8001508 <BME280_compensate_T_int32+0x78>)
 80014a6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014aa:	fb02 f303 	mul.w	r3, r2, r3
 80014ae:	12db      	asrs	r3, r3, #11
 80014b0:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	111b      	asrs	r3, r3, #4
 80014b6:	4a13      	ldr	r2, [pc, #76]	; (8001504 <BME280_compensate_T_int32+0x74>)
 80014b8:	8812      	ldrh	r2, [r2, #0]
 80014ba:	1a9b      	subs	r3, r3, r2
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	1112      	asrs	r2, r2, #4
 80014c0:	4910      	ldr	r1, [pc, #64]	; (8001504 <BME280_compensate_T_int32+0x74>)
 80014c2:	8809      	ldrh	r1, [r1, #0]
 80014c4:	1a52      	subs	r2, r2, r1
 80014c6:	fb02 f303 	mul.w	r3, r2, r3
 80014ca:	131b      	asrs	r3, r3, #12
 80014cc:	4a0f      	ldr	r2, [pc, #60]	; (800150c <BME280_compensate_T_int32+0x7c>)
 80014ce:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014d2:	fb02 f303 	mul.w	r3, r2, r3
 80014d6:	139b      	asrs	r3, r3, #14
 80014d8:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4413      	add	r3, r2
 80014e0:	4a0b      	ldr	r2, [pc, #44]	; (8001510 <BME280_compensate_T_int32+0x80>)
 80014e2:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <BME280_compensate_T_int32+0x80>)
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4613      	mov	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	4413      	add	r3, r2
 80014ee:	3380      	adds	r3, #128	; 0x80
 80014f0:	121b      	asrs	r3, r3, #8
 80014f2:	60fb      	str	r3, [r7, #12]
	return T;
 80014f4:	68fb      	ldr	r3, [r7, #12]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	371c      	adds	r7, #28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	20000258 	.word	0x20000258
 8001508:	20000260 	.word	0x20000260
 800150c:	20000262 	.word	0x20000262
 8001510:	2000027c 	.word	0x2000027c

08001514 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Mengembalikan tekanan dalam Pa sebagai bilangan bulat 32 bit tidak terkonversi dalam format Q24.8 (24 bit integer dan 8 bit fraksional).
   Nilai output "24674867" mewakili 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001518:	b0ca      	sub	sp, #296	; 0x128
 800151a:	af00      	add	r7, sp, #0
 800151c:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001520:	4baf      	ldr	r3, [pc, #700]	; (80017e0 <BME280_compensate_P_int64+0x2cc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	17da      	asrs	r2, r3, #31
 8001526:	461c      	mov	r4, r3
 8001528:	4615      	mov	r5, r2
 800152a:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 800152e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001532:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 8001536:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800153a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800153e:	fb03 f102 	mul.w	r1, r3, r2
 8001542:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001546:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	18ca      	adds	r2, r1, r3
 8001550:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001554:	fba3 8903 	umull	r8, r9, r3, r3
 8001558:	eb02 0309 	add.w	r3, r2, r9
 800155c:	4699      	mov	r9, r3
 800155e:	4ba1      	ldr	r3, [pc, #644]	; (80017e4 <BME280_compensate_P_int64+0x2d0>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	b21b      	sxth	r3, r3
 8001566:	17da      	asrs	r2, r3, #31
 8001568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800156c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001570:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001574:	4603      	mov	r3, r0
 8001576:	fb03 f209 	mul.w	r2, r3, r9
 800157a:	460b      	mov	r3, r1
 800157c:	fb08 f303 	mul.w	r3, r8, r3
 8001580:	4413      	add	r3, r2
 8001582:	4602      	mov	r2, r0
 8001584:	fba8 1202 	umull	r1, r2, r8, r2
 8001588:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800158c:	460a      	mov	r2, r1
 800158e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8001592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001596:	4413      	add	r3, r2
 8001598:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800159c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015a0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015a4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015a8:	4b8f      	ldr	r3, [pc, #572]	; (80017e8 <BME280_compensate_P_int64+0x2d4>)
 80015aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	17da      	asrs	r2, r3, #31
 80015b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015b6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015ba:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015be:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015c2:	462a      	mov	r2, r5
 80015c4:	fb02 f203 	mul.w	r2, r2, r3
 80015c8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015cc:	4621      	mov	r1, r4
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	441a      	add	r2, r3
 80015d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d8:	4621      	mov	r1, r4
 80015da:	fba3 1301 	umull	r1, r3, r3, r1
 80015de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015e2:	460b      	mov	r3, r1
 80015e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80015ec:	18d3      	adds	r3, r2, r3
 80015ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015f2:	f04f 0000 	mov.w	r0, #0
 80015f6:	f04f 0100 	mov.w	r1, #0
 80015fa:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 80015fe:	462b      	mov	r3, r5
 8001600:	0459      	lsls	r1, r3, #17
 8001602:	4623      	mov	r3, r4
 8001604:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001608:	4623      	mov	r3, r4
 800160a:	0458      	lsls	r0, r3, #17
 800160c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001610:	1814      	adds	r4, r2, r0
 8001612:	643c      	str	r4, [r7, #64]	; 0x40
 8001614:	414b      	adcs	r3, r1
 8001616:	647b      	str	r3, [r7, #68]	; 0x44
 8001618:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800161c:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001620:	4b72      	ldr	r3, [pc, #456]	; (80017ec <BME280_compensate_P_int64+0x2d8>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	b21b      	sxth	r3, r3
 8001628:	17da      	asrs	r2, r3, #31
 800162a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800162e:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001632:	f04f 0000 	mov.w	r0, #0
 8001636:	f04f 0100 	mov.w	r1, #0
 800163a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800163e:	00d9      	lsls	r1, r3, #3
 8001640:	2000      	movs	r0, #0
 8001642:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001646:	1814      	adds	r4, r2, r0
 8001648:	63bc      	str	r4, [r7, #56]	; 0x38
 800164a:	414b      	adcs	r3, r1
 800164c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800164e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001652:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8001656:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800165a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800165e:	fb03 f102 	mul.w	r1, r3, r2
 8001662:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001666:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	18ca      	adds	r2, r1, r3
 8001670:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001674:	fba3 1303 	umull	r1, r3, r3, r3
 8001678:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800167c:	460b      	mov	r3, r1
 800167e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001686:	18d3      	adds	r3, r2, r3
 8001688:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800168c:	4b58      	ldr	r3, [pc, #352]	; (80017f0 <BME280_compensate_P_int64+0x2dc>)
 800168e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001692:	b21b      	sxth	r3, r3
 8001694:	17da      	asrs	r2, r3, #31
 8001696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800169a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800169e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016a2:	462b      	mov	r3, r5
 80016a4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016a8:	4642      	mov	r2, r8
 80016aa:	fb02 f203 	mul.w	r2, r2, r3
 80016ae:	464b      	mov	r3, r9
 80016b0:	4621      	mov	r1, r4
 80016b2:	fb01 f303 	mul.w	r3, r1, r3
 80016b6:	4413      	add	r3, r2
 80016b8:	4622      	mov	r2, r4
 80016ba:	4641      	mov	r1, r8
 80016bc:	fba2 1201 	umull	r1, r2, r2, r1
 80016c0:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016c4:	460a      	mov	r2, r1
 80016c6:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016ca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016ce:	4413      	add	r3, r2
 80016d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016d4:	f04f 0000 	mov.w	r0, #0
 80016d8:	f04f 0100 	mov.w	r1, #0
 80016dc:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80016e0:	4623      	mov	r3, r4
 80016e2:	0a18      	lsrs	r0, r3, #8
 80016e4:	462b      	mov	r3, r5
 80016e6:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016ea:	462b      	mov	r3, r5
 80016ec:	1219      	asrs	r1, r3, #8
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <BME280_compensate_P_int64+0x2e0>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	b21b      	sxth	r3, r3
 80016f6:	17da      	asrs	r2, r3, #31
 80016f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80016fc:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001700:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001704:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 8001708:	464a      	mov	r2, r9
 800170a:	fb02 f203 	mul.w	r2, r2, r3
 800170e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001712:	4644      	mov	r4, r8
 8001714:	fb04 f303 	mul.w	r3, r4, r3
 8001718:	441a      	add	r2, r3
 800171a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800171e:	4644      	mov	r4, r8
 8001720:	fba3 4304 	umull	r4, r3, r3, r4
 8001724:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001728:	4623      	mov	r3, r4
 800172a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800172e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001732:	18d3      	adds	r3, r2, r3
 8001734:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001744:	464c      	mov	r4, r9
 8001746:	0323      	lsls	r3, r4, #12
 8001748:	4644      	mov	r4, r8
 800174a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800174e:	4644      	mov	r4, r8
 8001750:	0322      	lsls	r2, r4, #12
 8001752:	1884      	adds	r4, r0, r2
 8001754:	633c      	str	r4, [r7, #48]	; 0x30
 8001756:	eb41 0303 	adc.w	r3, r1, r3
 800175a:	637b      	str	r3, [r7, #52]	; 0x34
 800175c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001760:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001764:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001768:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 800176c:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001770:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001774:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <BME280_compensate_P_int64+0x2e4>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	2200      	movs	r2, #0
 800177c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001780:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001784:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001788:	462b      	mov	r3, r5
 800178a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800178e:	4642      	mov	r2, r8
 8001790:	fb02 f203 	mul.w	r2, r2, r3
 8001794:	464b      	mov	r3, r9
 8001796:	4621      	mov	r1, r4
 8001798:	fb01 f303 	mul.w	r3, r1, r3
 800179c:	4413      	add	r3, r2
 800179e:	4622      	mov	r2, r4
 80017a0:	4641      	mov	r1, r8
 80017a2:	fba2 1201 	umull	r1, r2, r2, r1
 80017a6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017aa:	460a      	mov	r2, r1
 80017ac:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017b0:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017b4:	4413      	add	r3, r2
 80017b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017c6:	4629      	mov	r1, r5
 80017c8:	104a      	asrs	r2, r1, #1
 80017ca:	4629      	mov	r1, r5
 80017cc:	17cb      	asrs	r3, r1, #31
 80017ce:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017d2:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017d6:	4313      	orrs	r3, r2
 80017d8:	d110      	bne.n	80017fc <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // menghindari exception yang disebabkan oleh pembagian dengan nol
 80017da:	2300      	movs	r3, #0
 80017dc:	e154      	b.n	8001a88 <BME280_compensate_P_int64+0x574>
 80017de:	bf00      	nop
 80017e0:	2000027c 	.word	0x2000027c
 80017e4:	2000026c 	.word	0x2000026c
 80017e8:	2000026a 	.word	0x2000026a
 80017ec:	20000268 	.word	0x20000268
 80017f0:	20000266 	.word	0x20000266
 80017f4:	20000264 	.word	0x20000264
 80017f8:	2000025a 	.word	0x2000025a
	}
	p = 1048576-adc_P;
 80017fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001800:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001804:	17da      	asrs	r2, r3, #31
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
 8001808:	62fa      	str	r2, [r7, #44]	; 0x2c
 800180a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800180e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001812:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001816:	105b      	asrs	r3, r3, #1
 8001818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800181c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001820:	07db      	lsls	r3, r3, #31
 8001822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001826:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800182a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 800182e:	4621      	mov	r1, r4
 8001830:	1a89      	subs	r1, r1, r2
 8001832:	67b9      	str	r1, [r7, #120]	; 0x78
 8001834:	4629      	mov	r1, r5
 8001836:	eb61 0303 	sbc.w	r3, r1, r3
 800183a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800183c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001840:	4622      	mov	r2, r4
 8001842:	462b      	mov	r3, r5
 8001844:	1891      	adds	r1, r2, r2
 8001846:	6239      	str	r1, [r7, #32]
 8001848:	415b      	adcs	r3, r3
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
 800184c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001850:	4621      	mov	r1, r4
 8001852:	1851      	adds	r1, r2, r1
 8001854:	61b9      	str	r1, [r7, #24]
 8001856:	4629      	mov	r1, r5
 8001858:	414b      	adcs	r3, r1
 800185a:	61fb      	str	r3, [r7, #28]
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001868:	4649      	mov	r1, r9
 800186a:	018b      	lsls	r3, r1, #6
 800186c:	4641      	mov	r1, r8
 800186e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001872:	4641      	mov	r1, r8
 8001874:	018a      	lsls	r2, r1, #6
 8001876:	4641      	mov	r1, r8
 8001878:	1889      	adds	r1, r1, r2
 800187a:	6139      	str	r1, [r7, #16]
 800187c:	4649      	mov	r1, r9
 800187e:	eb43 0101 	adc.w	r1, r3, r1
 8001882:	6179      	str	r1, [r7, #20]
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	f04f 0300 	mov.w	r3, #0
 800188c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001890:	4649      	mov	r1, r9
 8001892:	008b      	lsls	r3, r1, #2
 8001894:	4641      	mov	r1, r8
 8001896:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800189a:	4641      	mov	r1, r8
 800189c:	008a      	lsls	r2, r1, #2
 800189e:	4610      	mov	r0, r2
 80018a0:	4619      	mov	r1, r3
 80018a2:	4603      	mov	r3, r0
 80018a4:	4622      	mov	r2, r4
 80018a6:	189b      	adds	r3, r3, r2
 80018a8:	60bb      	str	r3, [r7, #8]
 80018aa:	460b      	mov	r3, r1
 80018ac:	462a      	mov	r2, r5
 80018ae:	eb42 0303 	adc.w	r3, r2, r3
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	f04f 0200 	mov.w	r2, #0
 80018b8:	f04f 0300 	mov.w	r3, #0
 80018bc:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018c0:	4649      	mov	r1, r9
 80018c2:	008b      	lsls	r3, r1, #2
 80018c4:	4641      	mov	r1, r8
 80018c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ca:	4641      	mov	r1, r8
 80018cc:	008a      	lsls	r2, r1, #2
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	4603      	mov	r3, r0
 80018d4:	4622      	mov	r2, r4
 80018d6:	189b      	adds	r3, r3, r2
 80018d8:	673b      	str	r3, [r7, #112]	; 0x70
 80018da:	462b      	mov	r3, r5
 80018dc:	460a      	mov	r2, r1
 80018de:	eb42 0303 	adc.w	r3, r2, r3
 80018e2:	677b      	str	r3, [r7, #116]	; 0x74
 80018e4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018e8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80018ec:	f7ff f9cc 	bl	8000c88 <__aeabi_ldivmod>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80018f8:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <BME280_compensate_P_int64+0x580>)
 80018fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fe:	b21b      	sxth	r3, r3
 8001900:	17da      	asrs	r2, r3, #31
 8001902:	66bb      	str	r3, [r7, #104]	; 0x68
 8001904:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001906:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800190a:	f04f 0000 	mov.w	r0, #0
 800190e:	f04f 0100 	mov.w	r1, #0
 8001912:	0b50      	lsrs	r0, r2, #13
 8001914:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001918:	1359      	asrs	r1, r3, #13
 800191a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 800191e:	462b      	mov	r3, r5
 8001920:	fb00 f203 	mul.w	r2, r0, r3
 8001924:	4623      	mov	r3, r4
 8001926:	fb03 f301 	mul.w	r3, r3, r1
 800192a:	4413      	add	r3, r2
 800192c:	4622      	mov	r2, r4
 800192e:	fba2 1200 	umull	r1, r2, r2, r0
 8001932:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001936:	460a      	mov	r2, r1
 8001938:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 800193c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001940:	4413      	add	r3, r2
 8001942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8001946:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800194a:	f04f 0000 	mov.w	r0, #0
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	0b50      	lsrs	r0, r2, #13
 8001954:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001958:	1359      	asrs	r1, r3, #13
 800195a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800195e:	462b      	mov	r3, r5
 8001960:	fb00 f203 	mul.w	r2, r0, r3
 8001964:	4623      	mov	r3, r4
 8001966:	fb03 f301 	mul.w	r3, r3, r1
 800196a:	4413      	add	r3, r2
 800196c:	4622      	mov	r2, r4
 800196e:	fba2 1200 	umull	r1, r2, r2, r0
 8001972:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001976:	460a      	mov	r2, r1
 8001978:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 800197c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001980:	4413      	add	r3, r2
 8001982:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	f04f 0300 	mov.w	r3, #0
 800198e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8001992:	4621      	mov	r1, r4
 8001994:	0e4a      	lsrs	r2, r1, #25
 8001996:	4629      	mov	r1, r5
 8001998:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800199c:	4629      	mov	r1, r5
 800199e:	164b      	asrs	r3, r1, #25
 80019a0:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019a4:	4b3c      	ldr	r3, [pc, #240]	; (8001a98 <BME280_compensate_P_int64+0x584>)
 80019a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019aa:	b21b      	sxth	r3, r3
 80019ac:	17da      	asrs	r2, r3, #31
 80019ae:	663b      	str	r3, [r7, #96]	; 0x60
 80019b0:	667a      	str	r2, [r7, #100]	; 0x64
 80019b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019b6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019ba:	462a      	mov	r2, r5
 80019bc:	fb02 f203 	mul.w	r2, r2, r3
 80019c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019c4:	4621      	mov	r1, r4
 80019c6:	fb01 f303 	mul.w	r3, r1, r3
 80019ca:	4413      	add	r3, r2
 80019cc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019d0:	4621      	mov	r1, r4
 80019d2:	fba2 1201 	umull	r1, r2, r2, r1
 80019d6:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80019da:	460a      	mov	r2, r1
 80019dc:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80019e0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019e4:	4413      	add	r3, r2
 80019e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 80019f6:	4621      	mov	r1, r4
 80019f8:	0cca      	lsrs	r2, r1, #19
 80019fa:	4629      	mov	r1, r5
 80019fc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a00:	4629      	mov	r1, r5
 8001a02:	14cb      	asrs	r3, r1, #19
 8001a04:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a08:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a0c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a10:	1884      	adds	r4, r0, r2
 8001a12:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a14:	eb41 0303 	adc.w	r3, r1, r3
 8001a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a1a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a1e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a22:	4621      	mov	r1, r4
 8001a24:	1889      	adds	r1, r1, r2
 8001a26:	6539      	str	r1, [r7, #80]	; 0x50
 8001a28:	4629      	mov	r1, r5
 8001a2a:	eb43 0101 	adc.w	r1, r3, r1
 8001a2e:	6579      	str	r1, [r7, #84]	; 0x54
 8001a30:	f04f 0000 	mov.w	r0, #0
 8001a34:	f04f 0100 	mov.w	r1, #0
 8001a38:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a3c:	4623      	mov	r3, r4
 8001a3e:	0a18      	lsrs	r0, r3, #8
 8001a40:	462b      	mov	r3, r5
 8001a42:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a46:	462b      	mov	r3, r5
 8001a48:	1219      	asrs	r1, r3, #8
 8001a4a:	4b14      	ldr	r3, [pc, #80]	; (8001a9c <BME280_compensate_P_int64+0x588>)
 8001a4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	17da      	asrs	r2, r3, #31
 8001a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a64:	464c      	mov	r4, r9
 8001a66:	0123      	lsls	r3, r4, #4
 8001a68:	4644      	mov	r4, r8
 8001a6a:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a6e:	4644      	mov	r4, r8
 8001a70:	0122      	lsls	r2, r4, #4
 8001a72:	1884      	adds	r4, r0, r2
 8001a74:	603c      	str	r4, [r7, #0]
 8001a76:	eb41 0303 	adc.w	r3, r1, r3
 8001a7a:	607b      	str	r3, [r7, #4]
 8001a7c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a80:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a84:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a94:	20000272 	.word	0x20000272
 8001a98:	20000270 	.word	0x20000270
 8001a9c:	2000026e 	.word	0x2000026e

08001aa0 <BME280_Measure>:

/* Mengukur suhu, tekanan, dan kelembaban
 * Nilai akan disimpan dalam parameter yang diteruskan ke fungsi
 */
void BME280_Measure (void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001aa4:	f7ff fcac 	bl	8001400 <BMEReadRaw>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d142      	bne.n	8001b34 <BME280_Measure+0x94>
	{
		  if (tRaw == 0x800000) Temperature = 0; // nilai dalam kasus pengukuran suhu dinonaktifkan
 8001aae:	4b28      	ldr	r3, [pc, #160]	; (8001b50 <BME280_Measure+0xb0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ab6:	d104      	bne.n	8001ac2 <BME280_Measure+0x22>
 8001ab8:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <BME280_Measure+0xb4>)
 8001aba:	f04f 0200 	mov.w	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e016      	b.n	8001af0 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // sesuai dengan datasheet, suhu adalah x100
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <BME280_Measure+0xb0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fce2 	bl	8001490 <BME280_compensate_T_int32>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7fe fd28 	bl	8000524 <__aeabi_i2d>
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b1f      	ldr	r3, [pc, #124]	; (8001b58 <BME280_Measure+0xb8>)
 8001ada:	f7fe feb7 	bl	800084c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f87f 	bl	8000be8 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a19      	ldr	r2, [pc, #100]	; (8001b54 <BME280_Measure+0xb4>)
 8001aee:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // nilai dalam kasus pengukuran tekanan dinonaktifkan
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <BME280_Measure+0xbc>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001af8:	d104      	bne.n	8001b04 <BME280_Measure+0x64>
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <BME280_Measure+0xc0>)
 8001afc:	f04f 0200 	mov.w	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
	// jika perangkat terlepas
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001b02:	e023      	b.n	8001b4c <BME280_Measure+0xac>
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // sesuai dengan datasheet, tekanan adalah x256
 8001b04:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <BME280_Measure+0xbc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff fd03 	bl	8001514 <BME280_compensate_P_int64>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fcf7 	bl	8000504 <__aeabi_ui2d>
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <BME280_Measure+0xc4>)
 8001b1c:	f7fe fe96 	bl	800084c <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f85e 	bl	8000be8 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	; (8001b60 <BME280_Measure+0xc0>)
 8001b30:	6013      	str	r3, [r2, #0]
}
 8001b32:	e00b      	b.n	8001b4c <BME280_Measure+0xac>
		Temperature = Pressure = Humidity = 0;
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <BME280_Measure+0xc8>)
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <BME280_Measure+0xc8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a07      	ldr	r2, [pc, #28]	; (8001b60 <BME280_Measure+0xc0>)
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <BME280_Measure+0xc0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a02      	ldr	r2, [pc, #8]	; (8001b54 <BME280_Measure+0xb4>)
 8001b4a:	6013      	str	r3, [r2, #0]
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	20000250 	.word	0x20000250
 8001b54:	20001078 	.word	0x20001078
 8001b58:	40590000 	.word	0x40590000
 8001b5c:	20000254 	.word	0x20000254
 8001b60:	2000107c 	.word	0x2000107c
 8001b64:	40700000 	.word	0x40700000
 8001b68:	20001080 	.word	0x20001080

08001b6c <Mount_SD>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void Mount_SD (const TCHAR* path)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4808      	ldr	r0, [pc, #32]	; (8001b9c <Mount_SD+0x30>)
 8001b7a:	f00f fe2b 	bl	80117d4 <f_mount>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	461a      	mov	r2, r3
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <Mount_SD+0x34>)
 8001b84:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <Mount_SD+0x34>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <Mount_SD+0x26>
	{
		Error_Handler();
 8001b8e:	f002 fcf5 	bl	800457c <Error_Handler>
	}
}
 8001b92:	bf00      	nop
 8001b94:	3708      	adds	r7, #8
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000280 	.word	0x20000280
 8001ba0:	200007fc 	.word	0x200007fc

08001ba4 <Create_File>:
		Error_Handler();
	}
}

FRESULT Create_File (char *name)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001bac:	4915      	ldr	r1, [pc, #84]	; (8001c04 <Create_File+0x60>)
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f010 fa31 	bl	8012016 <f_stat>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	4b13      	ldr	r3, [pc, #76]	; (8001c08 <Create_File+0x64>)
 8001bba:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <Create_File+0x64>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <Create_File+0x26>
	{
	    return fresult;
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <Create_File+0x64>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	e018      	b.n	8001bfc <Create_File+0x58>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 8001bca:	220b      	movs	r2, #11
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	480f      	ldr	r0, [pc, #60]	; (8001c0c <Create_File+0x68>)
 8001bd0:	f00f fe46 	bl	8011860 <f_open>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <Create_File+0x64>)
 8001bda:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <Create_File+0x64>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <Create_File+0x46>
		{
		    return fresult;
 8001be4:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <Create_File+0x64>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	e008      	b.n	8001bfc <Create_File+0x58>
		}

		fresult = f_close(&fil);
 8001bea:	4808      	ldr	r0, [pc, #32]	; (8001c0c <Create_File+0x68>)
 8001bec:	f010 f9e9 	bl	8011fc2 <f_close>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <Create_File+0x64>)
 8001bf6:	701a      	strb	r2, [r3, #0]
	}
    return fresult;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	; (8001c08 <Create_File+0x64>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	200006e4 	.word	0x200006e4
 8001c08:	200007fc 	.word	0x200007fc
 8001c0c:	200004b4 	.word	0x200004b4

08001c10 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
	 /* Create a file with read write access and open it */
	fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001c1a:	2232      	movs	r2, #50	; 0x32
 8001c1c:	6879      	ldr	r1, [r7, #4]
 8001c1e:	4810      	ldr	r0, [pc, #64]	; (8001c60 <Update_File+0x50>)
 8001c20:	f00f fe1e 	bl	8011860 <f_open>
 8001c24:	4603      	mov	r3, r0
 8001c26:	461a      	mov	r2, r3
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <Update_File+0x54>)
 8001c2a:	701a      	strb	r2, [r3, #0]

	/* Writing text */
	fresult = f_write(&fil, data, strlen(data), &bw);
 8001c2c:	6838      	ldr	r0, [r7, #0]
 8001c2e:	f7fe fb1f 	bl	8000270 <strlen>
 8001c32:	4602      	mov	r2, r0
 8001c34:	4b0c      	ldr	r3, [pc, #48]	; (8001c68 <Update_File+0x58>)
 8001c36:	6839      	ldr	r1, [r7, #0]
 8001c38:	4809      	ldr	r0, [pc, #36]	; (8001c60 <Update_File+0x50>)
 8001c3a:	f00f ffcf 	bl	8011bdc <f_write>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <Update_File+0x54>)
 8001c44:	701a      	strb	r2, [r3, #0]

	/* Close file */
	fresult = f_close(&fil);
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <Update_File+0x50>)
 8001c48:	f010 f9bb 	bl	8011fc2 <f_close>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	461a      	mov	r2, r3
 8001c50:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <Update_File+0x54>)
 8001c52:	701a      	strb	r2, [r3, #0]

    return fresult;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <Update_File+0x54>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200004b4 	.word	0x200004b4
 8001c64:	200007fc 	.word	0x200007fc
 8001c68:	20000800 	.word	0x20000800

08001c6c <prv_parse_number>:
 *                  Security attacks with invalid input data may trigger
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static int32_t
prv_parse_number(lwgps_t* ghandle, const char* text) {
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
    uint8_t minus = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	72fb      	strb	r3, [r7, #11]

    if (text == NULL) {
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d106      	bne.n	8001c92 <prv_parse_number+0x26>
        text = ghandle->p.term_str;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3371      	adds	r3, #113	; 0x71
 8001c88:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8001c8a:	e002      	b.n	8001c92 <prv_parse_number+0x26>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	603b      	str	r3, [r7, #0]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <prv_parse_number+0x34>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b20      	cmp	r3, #32
 8001c9e:	d0f5      	beq.n	8001c8c <prv_parse_number+0x20>

    minus = (*text == '-' ? (++text, 1) : 0);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b2d      	cmp	r3, #45	; 0x2d
 8001ca6:	d104      	bne.n	8001cb2 <prv_parse_number+0x46>
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	3301      	adds	r3, #1
 8001cac:	603b      	str	r3, [r7, #0]
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e000      	b.n	8001cb4 <prv_parse_number+0x48>
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	72fb      	strb	r3, [r7, #11]
    for (; text != NULL && CIN(*text); ++text) {
 8001cb6:	e00d      	b.n	8001cd4 <prv_parse_number+0x68>
        res = 10L * res + CTN(*text);
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	3b30      	subs	r3, #48	; 0x30
 8001cca:	4413      	add	r3, r2
 8001ccc:	60fb      	str	r3, [r7, #12]
    for (; text != NULL && CIN(*text); ++text) {
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <prv_parse_number+0x7e>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce0:	d903      	bls.n	8001cea <prv_parse_number+0x7e>
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b39      	cmp	r3, #57	; 0x39
 8001ce8:	d9e6      	bls.n	8001cb8 <prv_parse_number+0x4c>
    }
    return minus ? -res : res;
 8001cea:	7afb      	ldrb	r3, [r7, #11]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d002      	beq.n	8001cf6 <prv_parse_number+0x8a>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	425b      	negs	r3, r3
 8001cf4:	e000      	b.n	8001cf8 <prv_parse_number+0x8c>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <prv_parse_float_number>:
 *                  Security attacks with invalid input data may trigger
 *                  overflow in the number, which will later be used wrongly in the application,
 *                  but never inside the library itself.
 */
static lwgps_float_t
prv_parse_float_number(lwgps_t* ghandle, const char* text) {
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	b088      	sub	sp, #32
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
    lwgps_float_t value = (lwgps_float_t)0, power = (lwgps_float_t)1;
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	4b4d      	ldr	r3, [pc, #308]	; (8001e54 <prv_parse_float_number+0x150>)
 8001d20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    int sign = 1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]

    if (text == NULL) {
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d106      	bne.n	8001d3c <prv_parse_float_number+0x38>
        text = ghandle->p.term_str;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3371      	adds	r3, #113	; 0x71
 8001d32:	603b      	str	r3, [r7, #0]
    }
    for (; text != NULL && *text == ' '; ++text) {} /* Strip leading spaces */
 8001d34:	e002      	b.n	8001d3c <prv_parse_float_number+0x38>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <prv_parse_float_number+0x46>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b20      	cmp	r3, #32
 8001d48:	d0f5      	beq.n	8001d36 <prv_parse_float_number+0x32>

    if (*text == '-') { /* Check sign */
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	2b2d      	cmp	r3, #45	; 0x2d
 8001d50:	d124      	bne.n	8001d9c <prv_parse_float_number+0x98>
        sign = -1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	60fb      	str	r3, [r7, #12]
        ++text;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Convert main part */
 8001d5e:	e01d      	b.n	8001d9c <prv_parse_float_number+0x98>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <prv_parse_float_number+0x154>)
 8001d66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d6a:	f7fe fc45 	bl	80005f8 <__aeabi_dmul>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	4614      	mov	r4, r2
 8001d74:	461d      	mov	r5, r3
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3b30      	subs	r3, #48	; 0x30
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbd1 	bl	8000524 <__aeabi_i2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4620      	mov	r0, r4
 8001d88:	4629      	mov	r1, r5
 8001d8a:	f7fe fa7f 	bl	800028c <__adddf3>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	e9c7 2306 	strd	r2, r3, [r7, #24]
        ++text;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Convert main part */
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b2f      	cmp	r3, #47	; 0x2f
 8001da2:	d903      	bls.n	8001dac <prv_parse_float_number+0xa8>
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	2b39      	cmp	r3, #57	; 0x39
 8001daa:	d9d9      	bls.n	8001d60 <prv_parse_float_number+0x5c>
    }
    if (*text == '.') { /* Skip the dot character */
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b2e      	cmp	r3, #46	; 0x2e
 8001db2:	d12c      	bne.n	8001e0e <prv_parse_float_number+0x10a>
        ++text;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	3301      	adds	r3, #1
 8001db8:	603b      	str	r3, [r7, #0]
    }
    while (CIN(*text)) { /* Get the power */
 8001dba:	e028      	b.n	8001e0e <prv_parse_float_number+0x10a>
        value = value * (lwgps_float_t)10 + CTN(*text);
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <prv_parse_float_number+0x154>)
 8001dc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dc6:	f7fe fc17 	bl	80005f8 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4614      	mov	r4, r2
 8001dd0:	461d      	mov	r5, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	3b30      	subs	r3, #48	; 0x30
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fba3 	bl	8000524 <__aeabi_i2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4620      	mov	r0, r4
 8001de4:	4629      	mov	r1, r5
 8001de6:	f7fe fa51 	bl	800028c <__adddf3>
 8001dea:	4602      	mov	r2, r0
 8001dec:	460b      	mov	r3, r1
 8001dee:	e9c7 2306 	strd	r2, r3, [r7, #24]
        power *= (lwgps_float_t)10;
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <prv_parse_float_number+0x154>)
 8001df8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001dfc:	f7fe fbfc 	bl	80005f8 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	e9c7 2304 	strd	r2, r3, [r7, #16]
        ++text;
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	603b      	str	r3, [r7, #0]
    while (CIN(*text)) { /* Get the power */
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	2b2f      	cmp	r3, #47	; 0x2f
 8001e14:	d903      	bls.n	8001e1e <prv_parse_float_number+0x11a>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b39      	cmp	r3, #57	; 0x39
 8001e1c:	d9ce      	bls.n	8001dbc <prv_parse_float_number+0xb8>
    }
    return sign * value / power;
 8001e1e:	68f8      	ldr	r0, [r7, #12]
 8001e20:	f7fe fb80 	bl	8000524 <__aeabi_i2d>
 8001e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e28:	f7fe fbe6 	bl	80005f8 <__aeabi_dmul>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4610      	mov	r0, r2
 8001e32:	4619      	mov	r1, r3
 8001e34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e38:	f7fe fd08 	bl	800084c <__aeabi_ddiv>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	460b      	mov	r3, r1
 8001e40:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e44:	eeb0 0a47 	vmov.f32	s0, s14
 8001e48:	eef0 0a67 	vmov.f32	s1, s15
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bdb0      	pop	{r4, r5, r7, pc}
 8001e52:	bf00      	nop
 8001e54:	3ff00000 	.word	0x3ff00000
 8001e58:	40240000 	.word	0x40240000

08001e5c <prv_parse_lat_long>:
 *                  NMEA output for latitude is ddmm.sss and longitude is dddmm.sss
 * \param[in]       ghandle: GPS handle
 * \return          Latitude/Longitude value in degrees
 */
static lwgps_float_t
prv_parse_lat_long(lwgps_t* ghandle) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    lwgps_float_t llong, deg, min;

    llong = prv_parse_float_number(ghandle, NULL); /* Parse value as double */
 8001e64:	2100      	movs	r1, #0
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff ff4c 	bl	8001d04 <prv_parse_float_number>
 8001e6c:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)llong / 100));            /* Get absolute degrees value, interested in integer part only */
 8001e70:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e74:	f7fe fe70 	bl	8000b58 <__aeabi_d2iz>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <prv_parse_lat_long+0x94>)
 8001e7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e80:	1152      	asrs	r2, r2, #5
 8001e82:	17db      	asrs	r3, r3, #31
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fb4c 	bl	8000524 <__aeabi_i2d>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = llong - (deg * FLT(100));                /* Get remaining part from full number, minutes */
 8001e94:	f04f 0200 	mov.w	r2, #0
 8001e98:	4b16      	ldr	r3, [pc, #88]	; (8001ef4 <prv_parse_lat_long+0x98>)
 8001e9a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e9e:	f7fe fbab 	bl	80005f8 <__aeabi_dmul>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eaa:	f7fe f9ed 	bl	8000288 <__aeabi_dsub>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    llong = deg + (min / FLT(60));                 /* Calculate latitude/longitude */
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <prv_parse_lat_long+0x9c>)
 8001ebc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001ec0:	f7fe fcc4 	bl	800084c <__aeabi_ddiv>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ecc:	f7fe f9de 	bl	800028c <__adddf3>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return llong;
 8001ed8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001edc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ee0:	eeb0 0a47 	vmov.f32	s0, s14
 8001ee4:	eef0 0a67 	vmov.f32	s1, s15
 8001ee8:	3720      	adds	r7, #32
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	51eb851f 	.word	0x51eb851f
 8001ef4:	40590000 	.word	0x40590000
 8001ef8:	404e0000 	.word	0x404e0000

08001efc <prv_parse_term>:
 * \brief           Parse received term
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_parse_term(lwgps_t* ghandle) {
 8001efc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
    if (ghandle->p.term_num == 0) { /* Check string type */
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001f0c:	2900      	cmp	r1, #0
 8001f0e:	d169      	bne.n	8001fe4 <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(ghandle->p.term_str, "$GPGGA", 6) || !strncmp(ghandle->p.term_str, "$GNGGA", 6)) {
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3371      	adds	r3, #113	; 0x71
 8001f14:	2206      	movs	r2, #6
 8001f16:	49ba      	ldr	r1, [pc, #744]	; (8002200 <prv_parse_term+0x304>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f011 ff1b 	bl	8013d54 <strncmp>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d009      	beq.n	8001f38 <prv_parse_term+0x3c>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3371      	adds	r3, #113	; 0x71
 8001f28:	2206      	movs	r2, #6
 8001f2a:	49b6      	ldr	r1, [pc, #728]	; (8002204 <prv_parse_term+0x308>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f011 ff11 	bl	8013d54 <strncmp>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d104      	bne.n	8001f42 <prv_parse_term+0x46>
            ghandle->p.stat = STAT_GGA;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001f40:	e04e      	b.n	8001fe0 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(ghandle->p.term_str, "$GPGSA", 6) || !strncmp(ghandle->p.term_str, "$GNGSA", 6)) {
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	3371      	adds	r3, #113	; 0x71
 8001f46:	2206      	movs	r2, #6
 8001f48:	49af      	ldr	r1, [pc, #700]	; (8002208 <prv_parse_term+0x30c>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f011 ff02 	bl	8013d54 <strncmp>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d009      	beq.n	8001f6a <prv_parse_term+0x6e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	3371      	adds	r3, #113	; 0x71
 8001f5a:	2206      	movs	r2, #6
 8001f5c:	49ab      	ldr	r1, [pc, #684]	; (800220c <prv_parse_term+0x310>)
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f011 fef8 	bl	8013d54 <strncmp>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d104      	bne.n	8001f74 <prv_parse_term+0x78>
            ghandle->p.stat = STAT_GSA;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001f72:	e035      	b.n	8001fe0 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(ghandle->p.term_str, "$GPGSV", 6) || !strncmp(ghandle->p.term_str, "$GNGSV", 6)) {
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	3371      	adds	r3, #113	; 0x71
 8001f78:	2206      	movs	r2, #6
 8001f7a:	49a5      	ldr	r1, [pc, #660]	; (8002210 <prv_parse_term+0x314>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f011 fee9 	bl	8013d54 <strncmp>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d009      	beq.n	8001f9c <prv_parse_term+0xa0>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3371      	adds	r3, #113	; 0x71
 8001f8c:	2206      	movs	r2, #6
 8001f8e:	49a1      	ldr	r1, [pc, #644]	; (8002214 <prv_parse_term+0x318>)
 8001f90:	4618      	mov	r0, r3
 8001f92:	f011 fedf 	bl	8013d54 <strncmp>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d104      	bne.n	8001fa6 <prv_parse_term+0xaa>
            ghandle->p.stat = STAT_GSV;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001fa4:	e01c      	b.n	8001fe0 <prv_parse_term+0xe4>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(ghandle->p.term_str, "$GPRMC", 6) || !strncmp(ghandle->p.term_str, "$GNRMC", 6)) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	3371      	adds	r3, #113	; 0x71
 8001faa:	2206      	movs	r2, #6
 8001fac:	499a      	ldr	r1, [pc, #616]	; (8002218 <prv_parse_term+0x31c>)
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f011 fed0 	bl	8013d54 <strncmp>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d009      	beq.n	8001fce <prv_parse_term+0xd2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3371      	adds	r3, #113	; 0x71
 8001fbe:	2206      	movs	r2, #6
 8001fc0:	4996      	ldr	r1, [pc, #600]	; (800221c <prv_parse_term+0x320>)
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f011 fec6 	bl	8013d54 <strncmp>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d104      	bne.n	8001fd8 <prv_parse_term+0xdc>
            ghandle->p.stat = STAT_RMC;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2204      	movs	r2, #4
 8001fd2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001fd6:	e003      	b.n	8001fe0 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(ghandle->p.term_str, "$PUBX", 5)) {
            ghandle->p.stat = STAT_UBX;
#endif /* LWGPS_CFG_STATEMENT_PUBX */
        } else {
            ghandle->p.stat = STAT_UNKNOWN; /* Invalid statement for library */
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e231      	b.n	8002448 <prv_parse_term+0x54c>
    }

    /* Start parsing terms */
    if (ghandle->p.stat == STAT_UNKNOWN) {
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001fea:	2900      	cmp	r1, #0
 8001fec:	f000 822b 	beq.w	8002446 <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) { /* Process GPGGA statement */
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001ff6:	2901      	cmp	r1, #1
 8001ff8:	f040 80c9 	bne.w	800218e <prv_parse_term+0x292>
        switch (ghandle->p.term_num) {
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002002:	3b01      	subs	r3, #1
 8002004:	2b0a      	cmp	r3, #10
 8002006:	f200 8213 	bhi.w	8002430 <prv_parse_term+0x534>
 800200a:	a201      	add	r2, pc, #4	; (adr r2, 8002010 <prv_parse_term+0x114>)
 800200c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002010:	0800203d 	.word	0x0800203d
 8002014:	080020b7 	.word	0x080020b7
 8002018:	080020cd 	.word	0x080020cd
 800201c:	080020f7 	.word	0x080020f7
 8002020:	0800210d 	.word	0x0800210d
 8002024:	08002137 	.word	0x08002137
 8002028:	0800214b 	.word	0x0800214b
 800202c:	08002431 	.word	0x08002431
 8002030:	0800215f 	.word	0x0800215f
 8002034:	08002431 	.word	0x08002431
 8002038:	08002177 	.word	0x08002177
            case 1: /* Process UTC time */
                ghandle->p.data.gga.hours = 10 * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002042:	3b30      	subs	r3, #48	; 0x30
 8002044:	b2db      	uxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	4413      	add	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	b2da      	uxtb	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002056:	4413      	add	r3, r2
 8002058:	b2db      	uxtb	r3, r3
 800205a:	3b30      	subs	r3, #48	; 0x30
 800205c:	b2da      	uxtb	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                ghandle->p.data.gga.minutes = 10 * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 800206a:	3b30      	subs	r3, #48	; 0x30
 800206c:	b2db      	uxtb	r3, r3
 800206e:	461a      	mov	r2, r3
 8002070:	0092      	lsls	r2, r2, #2
 8002072:	4413      	add	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	b2da      	uxtb	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800207e:	4413      	add	r3, r2
 8002080:	b2db      	uxtb	r3, r3
 8002082:	3b30      	subs	r3, #48	; 0x30
 8002084:	b2da      	uxtb	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                ghandle->p.data.gga.seconds = 10 * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8002092:	3b30      	subs	r3, #48	; 0x30
 8002094:	b2db      	uxtb	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	0092      	lsls	r2, r2, #2
 800209a:	4413      	add	r3, r2
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80020a6:	4413      	add	r3, r2
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b30      	subs	r3, #48	; 0x30
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 80020b4:	e1c7      	b.n	8002446 <prv_parse_term+0x54a>
            case 2:                                                         /* Latitude */
                ghandle->p.data.gga.latitude = prv_parse_lat_long(ghandle); /* Parse latitude */
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7ff fed0 	bl	8001e5c <prv_parse_lat_long>
 80020bc:	eeb0 7a40 	vmov.f32	s14, s0
 80020c0:	eef0 7a60 	vmov.f32	s15, s1
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 80020ca:	e1bc      	b.n	8002446 <prv_parse_term+0x54a>
            case 3: /* Latitude north/south information */
                if (ghandle->p.term_str[0] == 'S' || ghandle->p.term_str[0] == 's') {
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80020d2:	2b53      	cmp	r3, #83	; 0x53
 80020d4:	d005      	beq.n	80020e2 <prv_parse_term+0x1e6>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80020dc:	2b73      	cmp	r3, #115	; 0x73
 80020de:	f040 81a9 	bne.w	8002434 <prv_parse_term+0x538>
                    ghandle->p.data.gga.latitude = -ghandle->p.data.gga.latitude;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80020e8:	4690      	mov	r8, r2
 80020ea:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 80020f4:	e19e      	b.n	8002434 <prv_parse_term+0x538>
            case 4:                                                          /* Longitude */
                ghandle->p.data.gga.longitude = prv_parse_lat_long(ghandle); /* Parse longitude */
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff feb0 	bl	8001e5c <prv_parse_lat_long>
 80020fc:	eeb0 7a40 	vmov.f32	s14, s0
 8002100:	eef0 7a60 	vmov.f32	s15, s1
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800210a:	e19c      	b.n	8002446 <prv_parse_term+0x54a>
            case 5: /* Longitude east/west information */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002112:	2b57      	cmp	r3, #87	; 0x57
 8002114:	d005      	beq.n	8002122 <prv_parse_term+0x226>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800211c:	2b77      	cmp	r3, #119	; 0x77
 800211e:	f040 818b 	bne.w	8002438 <prv_parse_term+0x53c>
                    ghandle->p.data.gga.longitude = -ghandle->p.data.gga.longitude;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002128:	4614      	mov	r4, r2
 800212a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8002134:	e180      	b.n	8002438 <prv_parse_term+0x53c>
            case 6: /* Fix status */ ghandle->p.data.gga.fix = (uint8_t)prv_parse_number(ghandle, NULL); break;
 8002136:	2100      	movs	r1, #0
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fd97 	bl	8001c6c <prv_parse_number>
 800213e:	4603      	mov	r3, r0
 8002140:	b2da      	uxtb	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
 8002148:	e17d      	b.n	8002446 <prv_parse_term+0x54a>
            case 7: /* Satellites in use */
                ghandle->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(ghandle, NULL);
 800214a:	2100      	movs	r1, #0
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff fd8d 	bl	8001c6c <prv_parse_number>
 8002152:	4603      	mov	r3, r0
 8002154:	b2da      	uxtb	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 800215c:	e173      	b.n	8002446 <prv_parse_term+0x54a>
            case 9: /* Altitude */ ghandle->p.data.gga.altitude = prv_parse_float_number(ghandle, NULL); break;
 800215e:	2100      	movs	r1, #0
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f7ff fdcf 	bl	8001d04 <prv_parse_float_number>
 8002166:	eeb0 7a40 	vmov.f32	s14, s0
 800216a:	eef0 7a60 	vmov.f32	s15, s1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
 8002174:	e167      	b.n	8002446 <prv_parse_term+0x54a>
            case 11: /* Altitude above ellipsoid */
                ghandle->p.data.gga.geo_sep = prv_parse_float_number(ghandle, NULL);
 8002176:	2100      	movs	r1, #0
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff fdc3 	bl	8001d04 <prv_parse_float_number>
 800217e:	eeb0 7a40 	vmov.f32	s14, s0
 8002182:	eef0 7a60 	vmov.f32	s15, s1
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 800218c:	e15b      	b.n	8002446 <prv_parse_term+0x54a>
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) { /* Process GPGSA statement */
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8002194:	2902      	cmp	r1, #2
 8002196:	f040 8083 	bne.w	80022a0 <prv_parse_term+0x3a4>
        switch (ghandle->p.term_num) {
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80021a0:	3b02      	subs	r3, #2
 80021a2:	2b0f      	cmp	r3, #15
 80021a4:	d860      	bhi.n	8002268 <prv_parse_term+0x36c>
 80021a6:	a201      	add	r2, pc, #4	; (adr r2, 80021ac <prv_parse_term+0x2b0>)
 80021a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ac:	080021ed 	.word	0x080021ed
 80021b0:	08002269 	.word	0x08002269
 80021b4:	08002269 	.word	0x08002269
 80021b8:	08002269 	.word	0x08002269
 80021bc:	08002269 	.word	0x08002269
 80021c0:	08002269 	.word	0x08002269
 80021c4:	08002269 	.word	0x08002269
 80021c8:	08002269 	.word	0x08002269
 80021cc:	08002269 	.word	0x08002269
 80021d0:	08002269 	.word	0x08002269
 80021d4:	08002269 	.word	0x08002269
 80021d8:	08002269 	.word	0x08002269
 80021dc:	08002269 	.word	0x08002269
 80021e0:	08002221 	.word	0x08002221
 80021e4:	08002239 	.word	0x08002239
 80021e8:	08002251 	.word	0x08002251
            case 2: ghandle->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(ghandle, NULL); break;
 80021ec:	2100      	movs	r1, #0
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f7ff fd3c 	bl	8001c6c <prv_parse_number>
 80021f4:	4603      	mov	r3, r0
 80021f6:	b2da      	uxtb	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
 80021fe:	e122      	b.n	8002446 <prv_parse_term+0x54a>
 8002200:	08017640 	.word	0x08017640
 8002204:	08017648 	.word	0x08017648
 8002208:	08017650 	.word	0x08017650
 800220c:	08017658 	.word	0x08017658
 8002210:	08017660 	.word	0x08017660
 8002214:	08017668 	.word	0x08017668
 8002218:	08017670 	.word	0x08017670
 800221c:	08017678 	.word	0x08017678
            case 15: ghandle->p.data.gsa.dop_p = prv_parse_float_number(ghandle, NULL); break;
 8002220:	2100      	movs	r1, #0
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7ff fd6e 	bl	8001d04 <prv_parse_float_number>
 8002228:	eeb0 7a40 	vmov.f32	s14, s0
 800222c:	eef0 7a60 	vmov.f32	s15, s1
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
 8002236:	e106      	b.n	8002446 <prv_parse_term+0x54a>
            case 16: ghandle->p.data.gsa.dop_h = prv_parse_float_number(ghandle, NULL); break;
 8002238:	2100      	movs	r1, #0
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fd62 	bl	8001d04 <prv_parse_float_number>
 8002240:	eeb0 7a40 	vmov.f32	s14, s0
 8002244:	eef0 7a60 	vmov.f32	s15, s1
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
 800224e:	e0fa      	b.n	8002446 <prv_parse_term+0x54a>
            case 17: ghandle->p.data.gsa.dop_v = prv_parse_float_number(ghandle, NULL); break;
 8002250:	2100      	movs	r1, #0
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f7ff fd56 	bl	8001d04 <prv_parse_float_number>
 8002258:	eeb0 7a40 	vmov.f32	s14, s0
 800225c:	eef0 7a60 	vmov.f32	s15, s1
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
 8002266:	e0ee      	b.n	8002446 <prv_parse_term+0x54a>
            default:
                /* Parse satellite IDs */
                if (ghandle->p.term_num >= 3 && ghandle->p.term_num <= 14) {
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800226e:	2b02      	cmp	r3, #2
 8002270:	f240 80e4 	bls.w	800243c <prv_parse_term+0x540>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800227a:	2b0e      	cmp	r3, #14
 800227c:	f200 80de 	bhi.w	800243c <prv_parse_term+0x540>
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8002280:	2100      	movs	r1, #0
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fcf2 	bl	8001c6c <prv_parse_number>
 8002288:	4602      	mov	r2, r0
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002290:	3b03      	subs	r3, #3
                        (uint8_t)prv_parse_number(ghandle, NULL);
 8002292:	b2d1      	uxtb	r1, r2
                    ghandle->p.data.gsa.satellites_ids[ghandle->p.term_num - 3] =
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	4413      	add	r3, r2
 8002298:	460a      	mov	r2, r1
 800229a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 800229e:	e0cd      	b.n	800243c <prv_parse_term+0x540>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) { /* Process GPGSV statement */
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80022a6:	2903      	cmp	r1, #3
 80022a8:	d11b      	bne.n	80022e2 <prv_parse_term+0x3e6>
        switch (ghandle->p.term_num) {
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d002      	beq.n	80022ba <prv_parse_term+0x3be>
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d00a      	beq.n	80022ce <prv_parse_term+0x3d2>
                            default: break;
                        }
                    }
                }
#endif /* LWGPS_CFG_STATEMENT_GPGSV_SAT_DET */
                break;
 80022b8:	e0c5      	b.n	8002446 <prv_parse_term+0x54a>
                ghandle->p.data.gsv.stat_num = (uint8_t)prv_parse_number(ghandle, NULL);
 80022ba:	2100      	movs	r1, #0
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff fcd5 	bl	8001c6c <prv_parse_number>
 80022c2:	4603      	mov	r3, r0
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80022cc:	e0bb      	b.n	8002446 <prv_parse_term+0x54a>
                ghandle->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(ghandle, NULL);
 80022ce:	2100      	movs	r1, #0
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fccb 	bl	8001c6c <prv_parse_number>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80022e0:	e0b1      	b.n	8002446 <prv_parse_term+0x54a>
        }
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) { /* Process GPRMC statement */
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80022e8:	2904      	cmp	r1, #4
 80022ea:	f040 80ac 	bne.w	8002446 <prv_parse_term+0x54a>
        switch (ghandle->p.term_num) {
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80022f4:	3902      	subs	r1, #2
 80022f6:	2909      	cmp	r1, #9
 80022f8:	f200 80a2 	bhi.w	8002440 <prv_parse_term+0x544>
 80022fc:	a001      	add	r0, pc, #4	; (adr r0, 8002304 <prv_parse_term+0x408>)
 80022fe:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8002302:	bf00      	nop
 8002304:	0800232d 	.word	0x0800232d
 8002308:	08002441 	.word	0x08002441
 800230c:	08002441 	.word	0x08002441
 8002310:	08002441 	.word	0x08002441
 8002314:	08002441 	.word	0x08002441
 8002318:	08002347 	.word	0x08002347
 800231c:	0800235f 	.word	0x0800235f
 8002320:	08002377 	.word	0x08002377
 8002324:	080023f1 	.word	0x080023f1
 8002328:	08002409 	.word	0x08002409
            case 2: /* Process valid status */ ghandle->p.data.rmc.is_valid = (ghandle->p.term_str[0] == 'A'); break;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002332:	2b41      	cmp	r3, #65	; 0x41
 8002334:	bf0c      	ite	eq
 8002336:	2301      	moveq	r3, #1
 8002338:	2300      	movne	r3, #0
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
 8002344:	e07f      	b.n	8002446 <prv_parse_term+0x54a>
            case 7: /* Process ground speed in knots */
                ghandle->p.data.rmc.speed = prv_parse_float_number(ghandle, NULL);
 8002346:	2100      	movs	r1, #0
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fcdb 	bl	8001d04 <prv_parse_float_number>
 800234e:	eeb0 7a40 	vmov.f32	s14, s0
 8002352:	eef0 7a60 	vmov.f32	s15, s1
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800235c:	e073      	b.n	8002446 <prv_parse_term+0x54a>
            case 8: /* Process true ground coarse */
                ghandle->p.data.rmc.course = prv_parse_float_number(ghandle, NULL);
 800235e:	2100      	movs	r1, #0
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff fccf 	bl	8001d04 <prv_parse_float_number>
 8002366:	eeb0 7a40 	vmov.f32	s14, s0
 800236a:	eef0 7a60 	vmov.f32	s15, s1
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8002374:	e067      	b.n	8002446 <prv_parse_term+0x54a>
            case 9: /* Process date */
                ghandle->p.data.rmc.date = (uint8_t)(10U * CTN(ghandle->p.term_str[0]) + CTN(ghandle->p.term_str[1]));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800237c:	3b30      	subs	r3, #48	; 0x30
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	0092      	lsls	r2, r2, #2
 8002384:	4413      	add	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	b2da      	uxtb	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002390:	4413      	add	r3, r2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	3b30      	subs	r3, #48	; 0x30
 8002396:	b2da      	uxtb	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                ghandle->p.data.rmc.month = (uint8_t)(10U * CTN(ghandle->p.term_str[2]) + CTN(ghandle->p.term_str[3]));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80023a4:	3b30      	subs	r3, #48	; 0x30
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	0092      	lsls	r2, r2, #2
 80023ac:	4413      	add	r3, r2
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80023b8:	4413      	add	r3, r2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	3b30      	subs	r3, #48	; 0x30
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                ghandle->p.data.rmc.year = (uint8_t)(10U * CTN(ghandle->p.term_str[4]) + CTN(ghandle->p.term_str[5]));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80023cc:	3b30      	subs	r3, #48	; 0x30
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	461a      	mov	r2, r3
 80023d2:	0092      	lsls	r2, r2, #2
 80023d4:	4413      	add	r3, r2
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80023e0:	4413      	add	r3, r2
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	3b30      	subs	r3, #48	; 0x30
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80023ee:	e02a      	b.n	8002446 <prv_parse_term+0x54a>
            case 10: /* Process magnetic variation */
                ghandle->p.data.rmc.variation = prv_parse_float_number(ghandle, NULL);
 80023f0:	2100      	movs	r1, #0
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff fc86 	bl	8001d04 <prv_parse_float_number>
 80023f8:	eeb0 7a40 	vmov.f32	s14, s0
 80023fc:	eef0 7a60 	vmov.f32	s15, s1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8002406:	e01e      	b.n	8002446 <prv_parse_term+0x54a>
            case 11: /* Process magnetic variation east/west */
                if (ghandle->p.term_str[0] == 'W' || ghandle->p.term_str[0] == 'w') {
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 800240e:	2957      	cmp	r1, #87	; 0x57
 8002410:	d004      	beq.n	800241c <prv_parse_term+0x520>
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002418:	2977      	cmp	r1, #119	; 0x77
 800241a:	d113      	bne.n	8002444 <prv_parse_term+0x548>
                    ghandle->p.data.rmc.variation = -ghandle->p.data.rmc.variation;
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 8002422:	4602      	mov	r2, r0
 8002424:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 800242e:	e009      	b.n	8002444 <prv_parse_term+0x548>
            default: break;
 8002430:	bf00      	nop
 8002432:	e008      	b.n	8002446 <prv_parse_term+0x54a>
                break;
 8002434:	bf00      	nop
 8002436:	e006      	b.n	8002446 <prv_parse_term+0x54a>
                break;
 8002438:	bf00      	nop
 800243a:	e004      	b.n	8002446 <prv_parse_term+0x54a>
                break;
 800243c:	bf00      	nop
 800243e:	e002      	b.n	8002446 <prv_parse_term+0x54a>
            default: break;
 8002440:	bf00      	nop
 8002442:	e000      	b.n	8002446 <prv_parse_term+0x54a>
                break;
 8002444:	bf00      	nop
            default: break;
        }
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
#endif /* LWGPS_CFG_STATEMENT_PUBX */
    }
    return 1;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002452:	bf00      	nop

08002454 <prv_check_crc>:
 * \brief           Compare calculated CRC with received CRC
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_check_crc(lwgps_t* ghandle) {
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8002462:	2b2f      	cmp	r3, #47	; 0x2f
 8002464:	d90a      	bls.n	800247c <prv_check_crc+0x28>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800246c:	2b39      	cmp	r3, #57	; 0x39
 800246e:	d805      	bhi.n	800247c <prv_check_crc+0x28>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	b2da      	uxtb	r2, r3
 800247a:	e024      	b.n	80024c6 <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 8002482:	2b60      	cmp	r3, #96	; 0x60
 8002484:	d90c      	bls.n	80024a0 <prv_check_crc+0x4c>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800248c:	2b7a      	cmp	r3, #122	; 0x7a
 800248e:	d807      	bhi.n	80024a0 <prv_check_crc+0x4c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002496:	3b57      	subs	r3, #87	; 0x57
 8002498:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	b2da      	uxtb	r2, r3
 800249e:	e012      	b.n	80024c6 <prv_check_crc+0x72>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 80024a6:	2b40      	cmp	r3, #64	; 0x40
 80024a8:	d90c      	bls.n	80024c4 <prv_check_crc+0x70>
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80024b0:	2b5a      	cmp	r3, #90	; 0x5a
 80024b2:	d807      	bhi.n	80024c4 <prv_check_crc+0x70>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80024ba:	3b37      	subs	r3, #55	; 0x37
 80024bc:	b2db      	uxtb	r3, r3
          | (CHTN(ghandle->p.term_str[1]) & 0x0FU); /* Convert received CRC from string (hex) to number */
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	e000      	b.n	80024c6 <prv_check_crc+0x72>
 80024c4:	2200      	movs	r2, #0
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80024cc:	2b2f      	cmp	r3, #47	; 0x2f
 80024ce:	d90b      	bls.n	80024e8 <prv_check_crc+0x94>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80024d6:	2b39      	cmp	r3, #57	; 0x39
 80024d8:	d806      	bhi.n	80024e8 <prv_check_crc+0x94>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	e026      	b.n	8002536 <prv_check_crc+0xe2>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80024ee:	2b60      	cmp	r3, #96	; 0x60
 80024f0:	d90d      	bls.n	800250e <prv_check_crc+0xba>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80024f8:	2b7a      	cmp	r3, #122	; 0x7a
 80024fa:	d808      	bhi.n	800250e <prv_check_crc+0xba>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002502:	3b57      	subs	r3, #87	; 0x57
 8002504:	b2db      	uxtb	r3, r3
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	b2db      	uxtb	r3, r3
 800250c:	e013      	b.n	8002536 <prv_check_crc+0xe2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d90d      	bls.n	8002534 <prv_check_crc+0xe0>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800251e:	2b5a      	cmp	r3, #90	; 0x5a
 8002520:	d808      	bhi.n	8002534 <prv_check_crc+0xe0>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002528:	3b37      	subs	r3, #55	; 0x37
 800252a:	b2db      	uxtb	r3, r3
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b2db      	uxtb	r3, r3
 8002532:	e000      	b.n	8002536 <prv_check_crc+0xe2>
 8002534:	2300      	movs	r3, #0
    crc = (uint8_t)((CHTN(ghandle->p.term_str[0]) & 0x0FU) << 0x04U)
 8002536:	4313      	orrs	r3, r2
 8002538:	73fb      	strb	r3, [r7, #15]
    return ghandle->p.crc_calc == crc;              /* They must match! */
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002540:	7bfa      	ldrb	r2, [r7, #15]
 8002542:	429a      	cmp	r2, r3
 8002544:	bf0c      	ite	eq
 8002546:	2301      	moveq	r3, #1
 8002548:	2300      	movne	r3, #0
 800254a:	b2db      	uxtb	r3, r3
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <prv_copy_from_tmp_memory>:
 * \brief           Copy temporary memory to user memory
 * \param[in]       ghandle: GPS handle
 * \return          `1` on success, `0` otherwise
 */
static uint8_t
prv_copy_from_tmp_memory(lwgps_t* ghandle) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (ghandle->p.stat == STAT_GGA) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002566:	2b01      	cmp	r3, #1
 8002568:	d171      	bne.n	800264e <prv_copy_from_tmp_memory+0xf6>
    	gpslat = ghandle->latitude = ghandle->p.data.gga.latitude;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	e9c1 2300 	strd	r2, r3, [r1]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fb32 	bl	8000be8 <__aeabi_d2f>
 8002584:	4603      	mov	r3, r0
 8002586:	4a65      	ldr	r2, [pc, #404]	; (800271c <prv_copy_from_tmp_memory+0x1c4>)
 8002588:	6013      	str	r3, [r2, #0]
    	gpslong = ghandle->longitude = ghandle->p.data.gga.longitude;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	f7fe fb22 	bl	8000be8 <__aeabi_d2f>
 80025a4:	4603      	mov	r3, r0
 80025a6:	4a5e      	ldr	r2, [pc, #376]	; (8002720 <prv_copy_from_tmp_memory+0x1c8>)
 80025a8:	6013      	str	r3, [r2, #0]
    	gpsalt = ghandle->altitude = ghandle->p.data.gga.altitude;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80025b0:	6879      	ldr	r1, [r7, #4]
 80025b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80025bc:	4610      	mov	r0, r2
 80025be:	4619      	mov	r1, r3
 80025c0:	f7fe fb12 	bl	8000be8 <__aeabi_d2f>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4a57      	ldr	r2, [pc, #348]	; (8002724 <prv_copy_from_tmp_memory+0x1cc>)
 80025c8:	6013      	str	r3, [r2, #0]
        ghandle->geo_sep = ghandle->p.data.gga.geo_sep;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gpssat = ghandle->sats_in_use = ghandle->p.data.gga.sats_in_use;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f883 2020 	strb.w	r2, [r3, #32]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 2020 	ldrb.w	r2, [r3, #32]
 80025e8:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <prv_copy_from_tmp_memory+0x1d0>)
 80025ea:	701a      	strb	r2, [r3, #0]
        ghandle->fix = ghandle->p.data.gga.fix;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        ghandle->hours = ghandle->p.data.gga.hours;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        sprintf(gpsjam, "%02d", ghandle->p.data.gga.hours);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800260a:	461a      	mov	r2, r3
 800260c:	4947      	ldr	r1, [pc, #284]	; (800272c <prv_copy_from_tmp_memory+0x1d4>)
 800260e:	4848      	ldr	r0, [pc, #288]	; (8002730 <prv_copy_from_tmp_memory+0x1d8>)
 8002610:	f011 faa0 	bl	8013b54 <siprintf>
        ghandle->minutes = ghandle->p.data.gga.minutes;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        sprintf(gpsmenit, "%02d", ghandle->p.data.gga.minutes);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8002626:	461a      	mov	r2, r3
 8002628:	4940      	ldr	r1, [pc, #256]	; (800272c <prv_copy_from_tmp_memory+0x1d4>)
 800262a:	4842      	ldr	r0, [pc, #264]	; (8002734 <prv_copy_from_tmp_memory+0x1dc>)
 800262c:	f011 fa92 	bl	8013b54 <siprintf>
        ghandle->seconds = ghandle->p.data.gga.seconds;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        sprintf(gpsdetik, "%02d", ghandle->p.data.gga.seconds);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002642:	461a      	mov	r2, r3
 8002644:	4939      	ldr	r1, [pc, #228]	; (800272c <prv_copy_from_tmp_memory+0x1d4>)
 8002646:	483c      	ldr	r0, [pc, #240]	; (8002738 <prv_copy_from_tmp_memory+0x1e0>)
 8002648:	f011 fa84 	bl	8013b54 <siprintf>
 800264c:	e061      	b.n	8002712 <prv_copy_from_tmp_memory+0x1ba>
#endif /* LWGPS_CFG_STATEMENT_GPGGA */
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (ghandle->p.stat == STAT_GSA) {
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002654:	2b02      	cmp	r3, #2
 8002656:	d121      	bne.n	800269c <prv_copy_from_tmp_memory+0x144>
        ghandle->dop_h = ghandle->p.data.gsa.dop_h;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        ghandle->dop_p = ghandle->p.data.gsa.dop_p;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        ghandle->dop_v = ghandle->p.data.gsa.dop_v;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        ghandle->fix_mode = ghandle->p.data.gsa.fix_mode;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        LWGPS_MEMCPY(ghandle->satellites_ids, ghandle->p.data.gsa.satellites_ids, sizeof(ghandle->satellites_ids));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f103 0041 	add.w	r0, r3, #65	; 0x41
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	33a1      	adds	r3, #161	; 0xa1
 8002692:	220c      	movs	r2, #12
 8002694:	4619      	mov	r1, r3
 8002696:	f011 fbf2 	bl	8013e7e <memcpy>
 800269a:	e03a      	b.n	8002712 <prv_copy_from_tmp_memory+0x1ba>
#endif /* LWGPS_CFG_STATEMENT_GPGSA */
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (ghandle->p.stat == STAT_GSV) {
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	d106      	bne.n	80026b4 <prv_copy_from_tmp_memory+0x15c>
        ghandle->sats_in_view = ghandle->p.data.gsv.sats_in_view;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80026b2:	e02e      	b.n	8002712 <prv_copy_from_tmp_memory+0x1ba>
#endif /* LWGPS_CFG_STATEMENT_GPGSV */
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (ghandle->p.stat == STAT_RMC) {
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d129      	bne.n	8002712 <prv_copy_from_tmp_memory+0x1ba>
        ghandle->course = ghandle->p.data.rmc.course;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        ghandle->is_valid = ghandle->p.data.rmc.is_valid;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        ghandle->speed = ghandle->p.data.rmc.speed;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        ghandle->variation = ghandle->p.data.rmc.variation;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80026e8:	6879      	ldr	r1, [r7, #4]
 80026ea:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        ghandle->date = ghandle->p.data.rmc.date;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        ghandle->month = ghandle->p.data.rmc.month;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        ghandle->year = ghandle->p.data.rmc.year;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        ghandle->clk_bias = ghandle->p.data.time.clk_bias;
        ghandle->clk_drift = ghandle->p.data.time.clk_drift;
        ghandle->tp_gran = ghandle->p.data.time.tp_gran;
#endif /* LWGPS_CFG_STATEMENT_PUBX_TIME */
    }
    return 1;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	200011c0 	.word	0x200011c0
 8002720:	200011c4 	.word	0x200011c4
 8002724:	200011c8 	.word	0x200011c8
 8002728:	200011cc 	.word	0x200011cc
 800272c:	08017680 	.word	0x08017680
 8002730:	200011d8 	.word	0x200011d8
 8002734:	200011d4 	.word	0x200011d4
 8002738:	200011d0 	.word	0x200011d0

0800273c <lwgps_init>:
 * \brief           Init GPS handle
 * \param[in]       ghandle: GPS handle structure
 * \return          `1` on success, `0` otherwise
 */
uint8_t
lwgps_init(lwgps_t* ghandle) {
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
    LWGPS_MEMSET(ghandle, 0x00, sizeof(*ghandle)); /* Reset structure */
 8002744:	22b0      	movs	r2, #176	; 0xb0
 8002746:	2100      	movs	r1, #0
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f011 fafb 	bl	8013d44 <memset>
    return 1;
 800274e:	2301      	movs	r3, #1
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <lwgps_process>:
 */
uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* ghandle, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else  /* LWGPS_CFG_STATUS */
lwgps_process(lwgps_t* ghandle, const void* data, size_t len) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
#endif /* !LWGPS_CFG_STATUS */
    const uint8_t* d = data;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 8002768:	e0ad      	b.n	80028c6 <lwgps_process+0x16e>
        if (*d == '$') {                                         /* Check for beginning of NMEA line */
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b24      	cmp	r3, #36	; 0x24
 8002770:	d128      	bne.n	80027c4 <lwgps_process+0x6c>
            LWGPS_MEMSET(&ghandle->p, 0x00, sizeof(ghandle->p)); /* Reset private memory */
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3370      	adds	r3, #112	; 0x70
 8002776:	2240      	movs	r2, #64	; 0x40
 8002778:	2100      	movs	r1, #0
 800277a:	4618      	mov	r0, r3
 800277c:	f011 fae2 	bl	8013d44 <memset>
            TERM_ADD(ghandle, *d);                               /* Add character to term */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002786:	2b0b      	cmp	r3, #11
 8002788:	f200 8097 	bhi.w	80028ba <lwgps_process+0x162>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002792:	4619      	mov	r1, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	440b      	add	r3, r1
 800279c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80027a6:	3301      	adds	r3, #1
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80027b6:	461a      	mov	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4413      	add	r3, r2
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80027c2:	e07a      	b.n	80028ba <lwgps_process+0x162>
        } else if (*d == ',') {                                  /* Term separator character */
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b2c      	cmp	r3, #44	; 0x2c
 80027ca:	d11d      	bne.n	8002808 <lwgps_process+0xb0>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f7ff fb95 	bl	8001efc <prv_parse_term>
            CRC_ADD(ghandle, *d);                                /* Add character to CRC computation */
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4053      	eors	r3, r2
 80027de:	b2da      	uxtb	r2, r3
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(ghandle);                                  /* Start with next term */
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80027fc:	3301      	adds	r3, #1
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002806:	e058      	b.n	80028ba <lwgps_process+0x162>
        } else if (*d == '*') {                                  /* Start indicates end of data for CRC computation */
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	781b      	ldrb	r3, [r3, #0]
 800280c:	2b2a      	cmp	r3, #42	; 0x2a
 800280e:	d117      	bne.n	8002840 <lwgps_process+0xe8>
            prv_parse_term(ghandle);                             /* Parse term we have currently in memory */
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fb73 	bl	8001efc <prv_parse_term>
            ghandle->p.star = 1;                                 /* STAR detected */
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(ghandle);                                  /* Start with next term */
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002834:	3301      	adds	r3, #1
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800283e:	e03c      	b.n	80028ba <lwgps_process+0x162>
        } else if (*d == '\r') {
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b0d      	cmp	r3, #13
 8002846:	d109      	bne.n	800285c <lwgps_process+0x104>
            if (prv_check_crc(ghandle)) { /* Check for CRC result */
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7ff fe03 	bl	8002454 <prv_check_crc>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d032      	beq.n	80028ba <lwgps_process+0x162>
                /* CRC is OK, in theory we can copy data from statements to user data */
                prv_copy_from_tmp_memory(ghandle); /* Copy memory from temporary to user memory */
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f7ff fe7f 	bl	8002558 <prv_copy_from_tmp_memory>
 800285a:	e02e      	b.n	80028ba <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif /* LWGPS_CFG_STATUS */
            }
        } else {
            if (!ghandle->p.star) {   /* Add to CRC only if star not yet detected */
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <lwgps_process+0x122>
                CRC_ADD(ghandle, *d); /* Add to CRC */
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4053      	eors	r3, r2
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(ghandle, *d); /* Add character to term */
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8002880:	2b0b      	cmp	r3, #11
 8002882:	d81a      	bhi.n	80028ba <lwgps_process+0x162>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800288a:	4619      	mov	r1, r3
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	781a      	ldrb	r2, [r3, #0]
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	440b      	add	r3, r1
 8002894:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800289e:	3301      	adds	r3, #1
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {                                /* Process all bytes */
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3301      	adds	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f47f af4e 	bne.w	800276a <lwgps_process+0x12>
        }
    }
    return 1;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <gpsinit>:
        default: return 0;
    }
}

void gpsinit()
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
	lwgps_init(&gps);
 80028dc:	4804      	ldr	r0, [pc, #16]	; (80028f0 <gpsinit+0x18>)
 80028de:	f7ff ff2d 	bl	800273c <lwgps_init>
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxgps, sizeof(rxgps));
 80028e2:	2280      	movs	r2, #128	; 0x80
 80028e4:	4903      	ldr	r1, [pc, #12]	; (80028f4 <gpsinit+0x1c>)
 80028e6:	4804      	ldr	r0, [pc, #16]	; (80028f8 <gpsinit+0x20>)
 80028e8:	f00a fdba 	bl	800d460 <HAL_UART_Receive_DMA>
}
 80028ec:	bf00      	nop
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20001090 	.word	0x20001090
 80028f4:	20001140 	.word	0x20001140
 80028f8:	20000c24 	.word	0x20000c24

080028fc <parsegpsdata>:

void parsegpsdata()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	if (lwgps_process(&gps, rxgps, strlen(rxgps)))
 8002900:	480b      	ldr	r0, [pc, #44]	; (8002930 <parsegpsdata+0x34>)
 8002902:	f7fd fcb5 	bl	8000270 <strlen>
 8002906:	4603      	mov	r3, r0
 8002908:	461a      	mov	r2, r3
 800290a:	4909      	ldr	r1, [pc, #36]	; (8002930 <parsegpsdata+0x34>)
 800290c:	4809      	ldr	r0, [pc, #36]	; (8002934 <parsegpsdata+0x38>)
 800290e:	f7ff ff23 	bl	8002758 <lwgps_process>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d004      	beq.n	8002922 <parsegpsdata+0x26>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002918:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800291c:	4806      	ldr	r0, [pc, #24]	; (8002938 <parsegpsdata+0x3c>)
 800291e:	f005 ff7a 	bl	8008816 <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxgps, sizeof(rxgps));
 8002922:	2280      	movs	r2, #128	; 0x80
 8002924:	4902      	ldr	r1, [pc, #8]	; (8002930 <parsegpsdata+0x34>)
 8002926:	4805      	ldr	r0, [pc, #20]	; (800293c <parsegpsdata+0x40>)
 8002928:	f00a fd9a 	bl	800d460 <HAL_UART_Receive_DMA>
}
 800292c:	bf00      	nop
 800292e:	bd80      	pop	{r7, pc}
 8002930:	20001140 	.word	0x20001140
 8002934:	20001090 	.word	0x20001090
 8002938:	40021000 	.word	0x40021000
 800293c:	20000c24 	.word	0x20000c24

08002940 <readReg2>:

int32_t _position = 0, _lastPosition = 0;
extern I2C_HandleTypeDef hi2c2;

int16_t readReg2(uint8_t reg)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b088      	sub	sp, #32
 8002944:	af04      	add	r7, sp, #16
 8002946:	4603      	mov	r3, r0
 8002948:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    HAL_I2C_Mem_Read(&hi2c2, AS5600_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	b29a      	uxth	r2, r3
 800294e:	f04f 33ff 	mov.w	r3, #4294967295
 8002952:	9302      	str	r3, [sp, #8]
 8002954:	2302      	movs	r3, #2
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	f107 030c 	add.w	r3, r7, #12
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	2301      	movs	r3, #1
 8002960:	216c      	movs	r1, #108	; 0x6c
 8002962:	4807      	ldr	r0, [pc, #28]	; (8002980 <readReg2+0x40>)
 8002964:	f006 fcd4 	bl	8009310 <HAL_I2C_Mem_Read>
    return (data[0] << 8) | data[1];
 8002968:	7b3b      	ldrb	r3, [r7, #12]
 800296a:	021b      	lsls	r3, r3, #8
 800296c:	b21a      	sxth	r2, r3
 800296e:	7b7b      	ldrb	r3, [r7, #13]
 8002970:	b21b      	sxth	r3, r3
 8002972:	4313      	orrs	r3, r2
 8002974:	b21b      	sxth	r3, r3
}
 8002976:	4618      	mov	r0, r3
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	200008e0 	.word	0x200008e0

08002984 <getCumulativePosition>:

int32_t getCumulativePosition(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
    int16_t value = readReg2(AS5600_ANGLE) & 0x0FFF;
 800298a:	200e      	movs	r0, #14
 800298c:	f7ff ffd8 	bl	8002940 <readReg2>
 8002990:	4603      	mov	r3, r0
 8002992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002996:	80fb      	strh	r3, [r7, #6]

    // Whole rotation CW?
    if ((_lastPosition > 2048) && (value < (_lastPosition - 2048)))
 8002998:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <getCumulativePosition+0xa4>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029a0:	dd14      	ble.n	80029cc <getCumulativePosition+0x48>
 80029a2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80029a6:	4b20      	ldr	r3, [pc, #128]	; (8002a28 <getCumulativePosition+0xa4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80029ae:	429a      	cmp	r2, r3
 80029b0:	da0c      	bge.n	80029cc <getCumulativePosition+0x48>
    {
        _position = _position + 4095 - _lastPosition + value;
 80029b2:	4b1e      	ldr	r3, [pc, #120]	; (8002a2c <getCumulativePosition+0xa8>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f603 72ff 	addw	r2, r3, #4095	; 0xfff
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <getCumulativePosition+0xa4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	1ad2      	subs	r2, r2, r3
 80029c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <getCumulativePosition+0xa8>)
 80029c8:	6013      	str	r3, [r2, #0]
 80029ca:	e023      	b.n	8002a14 <getCumulativePosition+0x90>
    }
    // Whole rotation CCW?
    else if ((value > 2048) && (_lastPosition < (value - 2048)))
 80029cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d4:	dd14      	ble.n	8002a00 <getCumulativePosition+0x7c>
 80029d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029da:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <getCumulativePosition+0xa4>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	dd0c      	ble.n	8002a00 <getCumulativePosition+0x7c>
    {
        _position = _position - 4095 - _lastPosition + value;
 80029e6:	4b11      	ldr	r3, [pc, #68]	; (8002a2c <getCumulativePosition+0xa8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f6a3 72ff 	subw	r2, r3, #4095	; 0xfff
 80029ee:	4b0e      	ldr	r3, [pc, #56]	; (8002a28 <getCumulativePosition+0xa4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	1ad2      	subs	r2, r2, r3
 80029f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029f8:	4413      	add	r3, r2
 80029fa:	4a0c      	ldr	r2, [pc, #48]	; (8002a2c <getCumulativePosition+0xa8>)
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	e009      	b.n	8002a14 <getCumulativePosition+0x90>
    }
    else
    {
        _position = _position - _lastPosition + value;
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <getCumulativePosition+0xa8>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <getCumulativePosition+0xa4>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	1ad2      	subs	r2, r2, r3
 8002a0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a06      	ldr	r2, [pc, #24]	; (8002a2c <getCumulativePosition+0xa8>)
 8002a12:	6013      	str	r3, [r2, #0]
    }
    _lastPosition = value;
 8002a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a18:	4a03      	ldr	r2, [pc, #12]	; (8002a28 <getCumulativePosition+0xa4>)
 8002a1a:	6013      	str	r3, [r2, #0]

    return _position;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <getCumulativePosition+0xa8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000808 	.word	0x20000808
 8002a2c:	20000804 	.word	0x20000804

08002a30 <resetPosition>:

int32_t resetPosition(int32_t position)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
    int32_t old = _position;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <resetPosition+0x24>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	60fb      	str	r3, [r7, #12]
    _position = position;
 8002a3e:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <resetPosition+0x24>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6013      	str	r3, [r2, #0]
    return old;
 8002a44:	68fb      	ldr	r3, [r7, #12]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	20000804 	.word	0x20000804

08002a58 <resetCumulativePosition>:

int32_t resetCumulativePosition(int32_t position)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    _lastPosition = readReg2(AS5600_RAW_ANGLE) & 0x0FFF;
 8002a60:	200c      	movs	r0, #12
 8002a62:	f7ff ff6d 	bl	8002940 <readReg2>
 8002a66:	4603      	mov	r3, r0
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a6e:	4a06      	ldr	r2, [pc, #24]	; (8002a88 <resetCumulativePosition+0x30>)
 8002a70:	6013      	str	r3, [r2, #0]
    int32_t old = _position;
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <resetCumulativePosition+0x34>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]
    _position = position;
 8002a78:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <resetCumulativePosition+0x34>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6013      	str	r3, [r2, #0]
    return old;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	20000808 	.word	0x20000808
 8002a8c:	20000804 	.word	0x20000804

08002a90 <bno055_assignI2C>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <bno055_assignI2C+0x1c>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	2000080c 	.word	0x2000080c

08002ab0 <bno055_delay>:

void bno055_delay(int time) {
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fa18 	bl	8006ef0 <HAL_Delay>
#endif
}
 8002ac0:	bf00      	nop
 8002ac2:	3708      	adds	r7, #8
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	4603      	mov	r3, r0
 8002ad0:	460a      	mov	r2, r1
 8002ad2:	71fb      	strb	r3, [r7, #7]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8002ad8:	79fb      	ldrb	r3, [r7, #7]
 8002ada:	733b      	strb	r3, [r7, #12]
 8002adc:	79bb      	ldrb	r3, [r7, #6]
 8002ade:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002ae0:	4b5a      	ldr	r3, [pc, #360]	; (8002c4c <bno055_writeData+0x184>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	f107 020c 	add.w	r2, r7, #12
 8002ae8:	230a      	movs	r3, #10
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2302      	movs	r3, #2
 8002aee:	2150      	movs	r1, #80	; 0x50
 8002af0:	f005 fff0 	bl	8008ad4 <HAL_I2C_Master_Transmit>
 8002af4:	4603      	mov	r3, r0
 8002af6:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8002af8:	7dfb      	ldrb	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80a0 	beq.w	8002c40 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8002b00:	7dfb      	ldrb	r3, [r7, #23]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d103      	bne.n	8002b0e <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8002b06:	4852      	ldr	r0, [pc, #328]	; (8002c50 <bno055_writeData+0x188>)
 8002b08:	f011 f81c 	bl	8013b44 <puts>
 8002b0c:	e012      	b.n	8002b34 <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d103      	bne.n	8002b1c <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8002b14:	484f      	ldr	r0, [pc, #316]	; (8002c54 <bno055_writeData+0x18c>)
 8002b16:	f011 f815 	bl	8013b44 <puts>
 8002b1a:	e00b      	b.n	8002b34 <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8002b1c:	7dfb      	ldrb	r3, [r7, #23]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d103      	bne.n	8002b2a <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8002b22:	484d      	ldr	r0, [pc, #308]	; (8002c58 <bno055_writeData+0x190>)
 8002b24:	f011 f80e 	bl	8013b44 <puts>
 8002b28:	e004      	b.n	8002b34 <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8002b2a:	7dfb      	ldrb	r3, [r7, #23]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	484b      	ldr	r0, [pc, #300]	; (8002c5c <bno055_writeData+0x194>)
 8002b30:	f010 ffa2 	bl	8013a78 <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8002b34:	4b45      	ldr	r3, [pc, #276]	; (8002c4c <bno055_writeData+0x184>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f006 fe1d 	bl	8009778 <HAL_I2C_GetError>
 8002b3e:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d07e      	beq.n	8002c44 <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d103      	bne.n	8002b54 <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8002b4c:	4844      	ldr	r0, [pc, #272]	; (8002c60 <bno055_writeData+0x198>)
 8002b4e:	f010 fff9 	bl	8013b44 <puts>
 8002b52:	e021      	b.n	8002b98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d103      	bne.n	8002b62 <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8002b5a:	4842      	ldr	r0, [pc, #264]	; (8002c64 <bno055_writeData+0x19c>)
 8002b5c:	f010 fff2 	bl	8013b44 <puts>
 8002b60:	e01a      	b.n	8002b98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d103      	bne.n	8002b70 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8002b68:	483f      	ldr	r0, [pc, #252]	; (8002c68 <bno055_writeData+0x1a0>)
 8002b6a:	f010 ffeb 	bl	8013b44 <puts>
 8002b6e:	e013      	b.n	8002b98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d103      	bne.n	8002b7e <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8002b76:	483d      	ldr	r0, [pc, #244]	; (8002c6c <bno055_writeData+0x1a4>)
 8002b78:	f010 ffe4 	bl	8013b44 <puts>
 8002b7c:	e00c      	b.n	8002b98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d103      	bne.n	8002b8c <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8002b84:	483a      	ldr	r0, [pc, #232]	; (8002c70 <bno055_writeData+0x1a8>)
 8002b86:	f010 ffdd 	bl	8013b44 <puts>
 8002b8a:	e005      	b.n	8002b98 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b20      	cmp	r3, #32
 8002b90:	d102      	bne.n	8002b98 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8002b92:	4838      	ldr	r0, [pc, #224]	; (8002c74 <bno055_writeData+0x1ac>)
 8002b94:	f010 ffd6 	bl	8013b44 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8002b98:	4b2c      	ldr	r3, [pc, #176]	; (8002c4c <bno055_writeData+0x184>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f006 fddd 	bl	800975c <HAL_I2C_GetState>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002bac:	4832      	ldr	r0, [pc, #200]	; (8002c78 <bno055_writeData+0x1b0>)
 8002bae:	f010 ffc9 	bl	8013b44 <puts>
 8002bb2:	e048      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8002bb4:	7bfb      	ldrb	r3, [r7, #15]
 8002bb6:	2b20      	cmp	r3, #32
 8002bb8:	d103      	bne.n	8002bc2 <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8002bba:	482f      	ldr	r0, [pc, #188]	; (8002c78 <bno055_writeData+0x1b0>)
 8002bbc:	f010 ffc2 	bl	8013b44 <puts>
 8002bc0:	e041      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	2b24      	cmp	r3, #36	; 0x24
 8002bc6:	d103      	bne.n	8002bd0 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8002bc8:	482c      	ldr	r0, [pc, #176]	; (8002c7c <bno055_writeData+0x1b4>)
 8002bca:	f010 ffbb 	bl	8013b44 <puts>
 8002bce:	e03a      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b21      	cmp	r3, #33	; 0x21
 8002bd4:	d103      	bne.n	8002bde <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8002bd6:	482a      	ldr	r0, [pc, #168]	; (8002c80 <bno055_writeData+0x1b8>)
 8002bd8:	f010 ffb4 	bl	8013b44 <puts>
 8002bdc:	e033      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	2b22      	cmp	r3, #34	; 0x22
 8002be2:	d103      	bne.n	8002bec <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8002be4:	4827      	ldr	r0, [pc, #156]	; (8002c84 <bno055_writeData+0x1bc>)
 8002be6:	f010 ffad 	bl	8013b44 <puts>
 8002bea:	e02c      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b28      	cmp	r3, #40	; 0x28
 8002bf0:	d103      	bne.n	8002bfa <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8002bf2:	4825      	ldr	r0, [pc, #148]	; (8002c88 <bno055_writeData+0x1c0>)
 8002bf4:	f010 ffa6 	bl	8013b44 <puts>
 8002bf8:	e025      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	2b29      	cmp	r3, #41	; 0x29
 8002bfe:	d103      	bne.n	8002c08 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8002c00:	4822      	ldr	r0, [pc, #136]	; (8002c8c <bno055_writeData+0x1c4>)
 8002c02:	f010 ff9f 	bl	8013b44 <puts>
 8002c06:	e01e      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c0c:	d103      	bne.n	8002c16 <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8002c0e:	4820      	ldr	r0, [pc, #128]	; (8002c90 <bno055_writeData+0x1c8>)
 8002c10:	f010 ff98 	bl	8013b44 <puts>
 8002c14:	e017      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	2b60      	cmp	r3, #96	; 0x60
 8002c1a:	d103      	bne.n	8002c24 <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8002c1c:	481d      	ldr	r0, [pc, #116]	; (8002c94 <bno055_writeData+0x1cc>)
 8002c1e:	f010 ff91 	bl	8013b44 <puts>
 8002c22:	e010      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2ba0      	cmp	r3, #160	; 0xa0
 8002c28:	d103      	bne.n	8002c32 <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8002c2a:	481b      	ldr	r0, [pc, #108]	; (8002c98 <bno055_writeData+0x1d0>)
 8002c2c:	f010 ff8a 	bl	8013b44 <puts>
 8002c30:	e009      	b.n	8002c46 <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
 8002c34:	2be0      	cmp	r3, #224	; 0xe0
 8002c36:	d106      	bne.n	8002c46 <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8002c38:	4818      	ldr	r0, [pc, #96]	; (8002c9c <bno055_writeData+0x1d4>)
 8002c3a:	f010 ff83 	bl	8013b44 <puts>
 8002c3e:	e002      	b.n	8002c46 <bno055_writeData+0x17e>
    return;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <bno055_writeData+0x17e>
    return;
 8002c44:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	2000080c 	.word	0x2000080c
 8002c50:	08017688 	.word	0x08017688
 8002c54:	080176ac 	.word	0x080176ac
 8002c58:	080176d4 	.word	0x080176d4
 8002c5c:	080176f8 	.word	0x080176f8
 8002c60:	08017710 	.word	0x08017710
 8002c64:	08017724 	.word	0x08017724
 8002c68:	08017738 	.word	0x08017738
 8002c6c:	0801774c 	.word	0x0801774c
 8002c70:	08017760 	.word	0x08017760
 8002c74:	08017774 	.word	0x08017774
 8002c78:	0801778c 	.word	0x0801778c
 8002c7c:	080177a4 	.word	0x080177a4
 8002c80:	080177b8 	.word	0x080177b8
 8002c84:	080177d0 	.word	0x080177d0
 8002c88:	080177e8 	.word	0x080177e8
 8002c8c:	08017800 	.word	0x08017800
 8002c90:	08017820 	.word	0x08017820
 8002c94:	08017840 	.word	0x08017840
 8002c98:	08017858 	.word	0x08017858
 8002c9c:	08017870 	.word	0x08017870

08002ca0 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af02      	add	r7, sp, #8
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	4613      	mov	r3, r2
 8002cae:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 8002cb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ce0 <bno055_readData+0x40>)
 8002cb2:	6818      	ldr	r0, [r3, #0]
 8002cb4:	1dfa      	adds	r2, r7, #7
 8002cb6:	2364      	movs	r3, #100	; 0x64
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	2301      	movs	r3, #1
 8002cbc:	2150      	movs	r1, #80	; 0x50
 8002cbe:	f005 ff09 	bl	8008ad4 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 8002cc2:	4b07      	ldr	r3, [pc, #28]	; (8002ce0 <bno055_readData+0x40>)
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	79bb      	ldrb	r3, [r7, #6]
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2264      	movs	r2, #100	; 0x64
 8002ccc:	9200      	str	r2, [sp, #0]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	2150      	movs	r1, #80	; 0x50
 8002cd2:	f005 fffd 	bl	8008cd0 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	2000080c 	.word	0x2000080c

08002ce4 <bno055_setPage>:

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	71fb      	strb	r3, [r7, #7]
 8002cee:	79fb      	ldrb	r3, [r7, #7]
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	2007      	movs	r0, #7
 8002cf4:	f7ff fee8 	bl	8002ac8 <bno055_writeData>
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8002d0a:	79fb      	ldrb	r3, [r7, #7]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	203d      	movs	r0, #61	; 0x3d
 8002d10:	f7ff feda 	bl	8002ac8 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d103      	bne.n	8002d22 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8002d1a:	2013      	movs	r0, #19
 8002d1c:	f7ff fec8 	bl	8002ab0 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8002d20:	e002      	b.n	8002d28 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8002d22:	2007      	movs	r0, #7
 8002d24:	f7ff fec4 	bl	8002ab0 <bno055_delay>
}
 8002d28:	bf00      	nop
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7ff ffe3 	bl	8002d00 <bno055_setOperationMode>
}
 8002d3a:	bf00      	nop
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8002d42:	200c      	movs	r0, #12
 8002d44:	f7ff ffdc 	bl	8002d00 <bno055_setOperationMode>
}
 8002d48:	bf00      	nop
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002d50:	2120      	movs	r1, #32
 8002d52:	203f      	movs	r0, #63	; 0x3f
 8002d54:	f7ff feb8 	bl	8002ac8 <bno055_writeData>
  bno055_delay(700);
 8002d58:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002d5c:	f7ff fea8 	bl	8002ab0 <bno055_delay>
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
  bno055_reset();
 8002d6a:	f7ff ffef 	bl	8002d4c <bno055_reset>

  uint8_t id = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8002d72:	1dfb      	adds	r3, r7, #7
 8002d74:	2201      	movs	r2, #1
 8002d76:	4619      	mov	r1, r3
 8002d78:	2000      	movs	r0, #0
 8002d7a:	f7ff ff91 	bl	8002ca0 <bno055_readData>
  if (id != BNO055_ID) {
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2ba0      	cmp	r3, #160	; 0xa0
 8002d82:	d001      	beq.n	8002d88 <bno055_setup+0x24>
    Error_Handler();
 8002d84:	f001 fbfa 	bl	800457c <Error_Handler>
  }
  bno055_writeData(BNO055_PWR_MODE, 0x0);
 8002d88:	2100      	movs	r1, #0
 8002d8a:	203e      	movs	r0, #62	; 0x3e
 8002d8c:	f7ff fe9c 	bl	8002ac8 <bno055_writeData>
  bno055_delay(10);
 8002d90:	200a      	movs	r0, #10
 8002d92:	f7ff fe8d 	bl	8002ab0 <bno055_delay>
  bno055_setPage(0);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f7ff ffa4 	bl	8002ce4 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	203f      	movs	r0, #63	; 0x3f
 8002da0:	f7ff fe92 	bl	8002ac8 <bno055_writeData>
  bno055_delay(10);
 8002da4:	200a      	movs	r0, #10
 8002da6:	f7ff fe83 	bl	8002ab0 <bno055_delay>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 8002daa:	f7ff ffc1 	bl	8002d30 <bno055_setOperationModeConfig>
  bno055_delay(10);
 8002dae:	200a      	movs	r0, #10
 8002db0:	f7ff fe7e 	bl	8002ab0 <bno055_delay>
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 8002dbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002dc0:	b09e      	sub	sp, #120	; 0x78
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7ff ff8a 	bl	8002ce4 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 8002dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002dd4:	2b20      	cmp	r3, #32
 8002dd6:	d108      	bne.n	8002dea <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 8002dd8:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002de0:	2208      	movs	r2, #8
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ff5c 	bl	8002ca0 <bno055_readData>
 8002de8:	e007      	b.n	8002dfa <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8002dea:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002dee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002df2:	2206      	movs	r2, #6
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff53 	bl	8002ca0 <bno055_readData>

  double scale = 1;
 8002dfa:	f04f 0200 	mov.w	r2, #0
 8002dfe:	4ba1      	ldr	r3, [pc, #644]	; (8003084 <bno055_getVector+0x2c8>)
 8002e00:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  switch (vec) {
 8002e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	2b1f      	cmp	r3, #31
 8002e0c:	d874      	bhi.n	8002ef8 <bno055_getVector+0x13c>
 8002e0e:	a201      	add	r2, pc, #4	; (adr r2, 8002e14 <bno055_getVector+0x58>)
 8002e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e14:	08002ea9 	.word	0x08002ea9
 8002e18:	08002ef9 	.word	0x08002ef9
 8002e1c:	08002ef9 	.word	0x08002ef9
 8002e20:	08002ef9 	.word	0x08002ef9
 8002e24:	08002ef9 	.word	0x08002ef9
 8002e28:	08002ef9 	.word	0x08002ef9
 8002e2c:	08002ef9 	.word	0x08002ef9
 8002e30:	08002ef9 	.word	0x08002ef9
 8002e34:	08002ef9 	.word	0x08002ef9
 8002e38:	08002ef9 	.word	0x08002ef9
 8002e3c:	08002ef9 	.word	0x08002ef9
 8002e40:	08002ef9 	.word	0x08002ef9
 8002e44:	08002ef9 	.word	0x08002ef9
 8002e48:	08002e95 	.word	0x08002e95
 8002e4c:	08002ef9 	.word	0x08002ef9
 8002e50:	08002ef9 	.word	0x08002ef9
 8002e54:	08002ef9 	.word	0x08002ef9
 8002e58:	08002ef9 	.word	0x08002ef9
 8002e5c:	08002ef9 	.word	0x08002ef9
 8002e60:	08002ebd 	.word	0x08002ebd
 8002e64:	08002ef9 	.word	0x08002ef9
 8002e68:	08002ef9 	.word	0x08002ef9
 8002e6c:	08002ef9 	.word	0x08002ef9
 8002e70:	08002ef9 	.word	0x08002ef9
 8002e74:	08002ef9 	.word	0x08002ef9
 8002e78:	08002ed1 	.word	0x08002ed1
 8002e7c:	08002ef9 	.word	0x08002ef9
 8002e80:	08002ef9 	.word	0x08002ef9
 8002e84:	08002ef9 	.word	0x08002ef9
 8002e88:	08002ef9 	.word	0x08002ef9
 8002e8c:	08002ef9 	.word	0x08002ef9
 8002e90:	08002ee5 	.word	0x08002ee5
	case BNO055_VECTOR_MAGNETOMETER:
		scale = magScale;
 8002e94:	4b7c      	ldr	r3, [pc, #496]	; (8003088 <bno055_getVector+0x2cc>)
 8002e96:	881b      	ldrh	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7fd fb33 	bl	8000504 <__aeabi_ui2d>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002ea6:	e027      	b.n	8002ef8 <bno055_getVector+0x13c>
	case BNO055_VECTOR_ACCELEROMETER || BNO055_VECTOR_LINEARACCEL || BNO055_VECTOR_GRAVITY:
		scale = accelScale;
 8002ea8:	4b78      	ldr	r3, [pc, #480]	; (800308c <bno055_getVector+0x2d0>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7fd fb29 	bl	8000504 <__aeabi_ui2d>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002eba:	e01d      	b.n	8002ef8 <bno055_getVector+0x13c>
	case BNO055_VECTOR_GYROSCOPE:
		scale = angularRateScale;
 8002ebc:	4b74      	ldr	r3, [pc, #464]	; (8003090 <bno055_getVector+0x2d4>)
 8002ebe:	881b      	ldrh	r3, [r3, #0]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7fd fb1f 	bl	8000504 <__aeabi_ui2d>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	460b      	mov	r3, r1
 8002eca:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002ece:	e013      	b.n	8002ef8 <bno055_getVector+0x13c>
	case BNO055_VECTOR_EULER:
		scale = eulerScale;
 8002ed0:	4b70      	ldr	r3, [pc, #448]	; (8003094 <bno055_getVector+0x2d8>)
 8002ed2:	881b      	ldrh	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd fb15 	bl	8000504 <__aeabi_ui2d>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002ee2:	e009      	b.n	8002ef8 <bno055_getVector+0x13c>
	case BNO055_VECTOR_QUATERNION:
		scale = quaScale;
 8002ee4:	4b6c      	ldr	r3, [pc, #432]	; (8003098 <bno055_getVector+0x2dc>)
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fd fb0b 	bl	8000504 <__aeabi_ui2d>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002ef6:	bf00      	nop
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002ef8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002efc:	2220      	movs	r2, #32
 8002efe:	2100      	movs	r1, #0
 8002f00:	4618      	mov	r0, r3
 8002f02:	f010 ff1f 	bl	8013d44 <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f0a:	2b20      	cmp	r3, #32
 8002f0c:	d150      	bne.n	8002fb0 <bno055_getVector+0x1f4>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002f0e:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002f12:	021b      	lsls	r3, r3, #8
 8002f14:	b21a      	sxth	r2, r3
 8002f16:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002f1a:	b21b      	sxth	r3, r3
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd faff 	bl	8000524 <__aeabi_i2d>
 8002f26:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f2a:	f7fd fc8f 	bl	800084c <__aeabi_ddiv>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002f36:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002f3a:	021b      	lsls	r3, r3, #8
 8002f3c:	b21a      	sxth	r2, r3
 8002f3e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002f42:	b21b      	sxth	r3, r3
 8002f44:	4313      	orrs	r3, r2
 8002f46:	b21b      	sxth	r3, r3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fd faeb 	bl	8000524 <__aeabi_i2d>
 8002f4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f52:	f7fd fc7b 	bl	800084c <__aeabi_ddiv>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002f5e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002f62:	021b      	lsls	r3, r3, #8
 8002f64:	b21a      	sxth	r2, r3
 8002f66:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b21b      	sxth	r3, r3
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fad7 	bl	8000524 <__aeabi_i2d>
 8002f76:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f7a:	f7fd fc67 	bl	800084c <__aeabi_ddiv>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	460b      	mov	r3, r1
 8002f82:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8002f86:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f8a:	021b      	lsls	r3, r3, #8
 8002f8c:	b21a      	sxth	r2, r3
 8002f8e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002f92:	b21b      	sxth	r3, r3
 8002f94:	4313      	orrs	r3, r2
 8002f96:	b21b      	sxth	r3, r3
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fac3 	bl	8000524 <__aeabi_i2d>
 8002f9e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fa2:	f7fd fc53 	bl	800084c <__aeabi_ddiv>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	460b      	mov	r3, r1
 8002faa:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002fae:	e03b      	b.n	8003028 <bno055_getVector+0x26c>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002fb0:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002fb4:	021b      	lsls	r3, r3, #8
 8002fb6:	b21a      	sxth	r2, r3
 8002fb8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002fbc:	b21b      	sxth	r3, r3
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	b21b      	sxth	r3, r3
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd faae 	bl	8000524 <__aeabi_i2d>
 8002fc8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002fcc:	f7fd fc3e 	bl	800084c <__aeabi_ddiv>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002fd8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	b21a      	sxth	r2, r3
 8002fe0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002fe4:	b21b      	sxth	r3, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	b21b      	sxth	r3, r3
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fa9a 	bl	8000524 <__aeabi_i2d>
 8002ff0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002ff4:	f7fd fc2a 	bl	800084c <__aeabi_ddiv>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8003000:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003004:	021b      	lsls	r3, r3, #8
 8003006:	b21a      	sxth	r2, r3
 8003008:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800300c:	b21b      	sxth	r3, r3
 800300e:	4313      	orrs	r3, r2
 8003010:	b21b      	sxth	r3, r3
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fa86 	bl	8000524 <__aeabi_i2d>
 8003018:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800301c:	f7fd fc16 	bl	800084c <__aeabi_ddiv>
 8003020:	4602      	mov	r2, r0
 8003022:	460b      	mov	r3, r1
 8003024:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8003028:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800302c:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8003030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003034:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003038:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800303c:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003040:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8003044:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003048:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800304c:	ec49 8b14 	vmov	d4, r8, r9
 8003050:	ec45 4b15 	vmov	d5, r4, r5
 8003054:	ec41 0b16 	vmov	d6, r0, r1
 8003058:	ec43 2b17 	vmov	d7, r2, r3
}
 800305c:	eeb0 0a44 	vmov.f32	s0, s8
 8003060:	eef0 0a64 	vmov.f32	s1, s9
 8003064:	eeb0 1a45 	vmov.f32	s2, s10
 8003068:	eef0 1a65 	vmov.f32	s3, s11
 800306c:	eeb0 2a46 	vmov.f32	s4, s12
 8003070:	eef0 2a66 	vmov.f32	s5, s13
 8003074:	eeb0 3a47 	vmov.f32	s6, s14
 8003078:	eef0 3a67 	vmov.f32	s7, s15
 800307c:	3778      	adds	r7, #120	; 0x78
 800307e:	46bd      	mov	sp, r7
 8003080:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003084:	3ff00000 	.word	0x3ff00000
 8003088:	20000006 	.word	0x20000006
 800308c:	20000000 	.word	0x20000000
 8003090:	20000002 	.word	0x20000002
 8003094:	20000004 	.word	0x20000004
 8003098:	20000008 	.word	0x20000008

0800309c <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 800309c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030a0:	b090      	sub	sp, #64	; 0x40
 80030a2:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 80030a4:	2014      	movs	r0, #20
 80030a6:	f7ff fe89 	bl	8002dbc <bno055_getVector>
 80030aa:	eeb0 4a40 	vmov.f32	s8, s0
 80030ae:	eef0 4a60 	vmov.f32	s9, s1
 80030b2:	eeb0 5a41 	vmov.f32	s10, s2
 80030b6:	eef0 5a61 	vmov.f32	s11, s3
 80030ba:	eeb0 6a42 	vmov.f32	s12, s4
 80030be:	eef0 6a62 	vmov.f32	s13, s5
 80030c2:	eeb0 7a43 	vmov.f32	s14, s6
 80030c6:	eef0 7a63 	vmov.f32	s15, s7
 80030ca:	ed87 4b08 	vstr	d4, [r7, #32]
 80030ce:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80030d2:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80030d6:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80030da:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030de:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80030e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80030e6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80030ea:	ec49 8b14 	vmov	d4, r8, r9
 80030ee:	ec45 4b15 	vmov	d5, r4, r5
 80030f2:	ec41 0b16 	vmov	d6, r0, r1
 80030f6:	ec43 2b17 	vmov	d7, r2, r3
}
 80030fa:	eeb0 0a44 	vmov.f32	s0, s8
 80030fe:	eef0 0a64 	vmov.f32	s1, s9
 8003102:	eeb0 1a45 	vmov.f32	s2, s10
 8003106:	eef0 1a65 	vmov.f32	s3, s11
 800310a:	eeb0 2a46 	vmov.f32	s4, s12
 800310e:	eef0 2a66 	vmov.f32	s5, s13
 8003112:	eeb0 3a47 	vmov.f32	s6, s14
 8003116:	eef0 3a67 	vmov.f32	s7, s15
 800311a:	3740      	adds	r7, #64	; 0x40
 800311c:	46bd      	mov	sp, r7
 800311e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08003122 <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8003122:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003126:	b090      	sub	sp, #64	; 0x40
 8003128:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 800312a:	201a      	movs	r0, #26
 800312c:	f7ff fe46 	bl	8002dbc <bno055_getVector>
 8003130:	eeb0 4a40 	vmov.f32	s8, s0
 8003134:	eef0 4a60 	vmov.f32	s9, s1
 8003138:	eeb0 5a41 	vmov.f32	s10, s2
 800313c:	eef0 5a61 	vmov.f32	s11, s3
 8003140:	eeb0 6a42 	vmov.f32	s12, s4
 8003144:	eef0 6a62 	vmov.f32	s13, s5
 8003148:	eeb0 7a43 	vmov.f32	s14, s6
 800314c:	eef0 7a63 	vmov.f32	s15, s7
 8003150:	ed87 4b08 	vstr	d4, [r7, #32]
 8003154:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8003158:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800315c:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8003160:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003164:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8003168:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800316c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003170:	ec49 8b14 	vmov	d4, r8, r9
 8003174:	ec45 4b15 	vmov	d5, r4, r5
 8003178:	ec41 0b16 	vmov	d6, r0, r1
 800317c:	ec43 2b17 	vmov	d7, r2, r3
}
 8003180:	eeb0 0a44 	vmov.f32	s0, s8
 8003184:	eef0 0a64 	vmov.f32	s1, s9
 8003188:	eeb0 1a45 	vmov.f32	s2, s10
 800318c:	eef0 1a65 	vmov.f32	s3, s11
 8003190:	eeb0 2a46 	vmov.f32	s4, s12
 8003194:	eef0 2a66 	vmov.f32	s5, s13
 8003198:	eeb0 3a47 	vmov.f32	s6, s14
 800319c:	eef0 3a67 	vmov.f32	s7, s15
 80031a0:	3740      	adds	r7, #64	; 0x40
 80031a2:	46bd      	mov	sp, r7
 80031a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080031a8 <isidata>:
char cx[]="CX",st[]="ST",sim[]="SIM",simp[]="SIMP",cal[]="CAL",bk[]="BK",tc[]="TC",cr[]="CR",tn[]="2032",bcn[]="BCN",gb[]="GB",hs[]="HS",cam[]="CAM";
uint8_t cmd,rxdata[2],datalkp[30],i;
extern UART_HandleTypeDef huart3;

void isidata(uint8_t urutan,char dat_[])
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
	for (int c = 0; c < 28; c++)
 80031b4:	2300      	movs	r3, #0
 80031b6:	60fb      	str	r3, [r7, #12]
 80031b8:	e007      	b.n	80031ca <isidata+0x22>
	{
		dat_[c]=0;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	4413      	add	r3, r2
 80031c0:	2200      	movs	r2, #0
 80031c2:	701a      	strb	r2, [r3, #0]
	for (int c = 0; c < 28; c++)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	3301      	adds	r3, #1
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2b1b      	cmp	r3, #27
 80031ce:	ddf4      	ble.n	80031ba <isidata+0x12>
	}
	uint8_t n=0,k=0,m=0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	72fb      	strb	r3, [r7, #11]
 80031d4:	2300      	movs	r3, #0
 80031d6:	72bb      	strb	r3, [r7, #10]
 80031d8:	2300      	movs	r3, #0
 80031da:	727b      	strb	r3, [r7, #9]
	while(n<urutan)
 80031dc:	e025      	b.n	800322a <isidata+0x82>
	{
		if(datalkp[m]=='\r') n=urutan;
 80031de:	7a7b      	ldrb	r3, [r7, #9]
 80031e0:	4a17      	ldr	r2, [pc, #92]	; (8003240 <isidata+0x98>)
 80031e2:	5cd3      	ldrb	r3, [r2, r3]
 80031e4:	2b0d      	cmp	r3, #13
 80031e6:	d101      	bne.n	80031ec <isidata+0x44>
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	72fb      	strb	r3, [r7, #11]
		if(datalkp[m]==',') n++;
 80031ec:	7a7b      	ldrb	r3, [r7, #9]
 80031ee:	4a14      	ldr	r2, [pc, #80]	; (8003240 <isidata+0x98>)
 80031f0:	5cd3      	ldrb	r3, [r2, r3]
 80031f2:	2b2c      	cmp	r3, #44	; 0x2c
 80031f4:	d102      	bne.n	80031fc <isidata+0x54>
 80031f6:	7afb      	ldrb	r3, [r7, #11]
 80031f8:	3301      	adds	r3, #1
 80031fa:	72fb      	strb	r3, [r7, #11]
		if(n == urutan-1 && datalkp[m] != ',')
 80031fc:	7afa      	ldrb	r2, [r7, #11]
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	3b01      	subs	r3, #1
 8003202:	429a      	cmp	r2, r3
 8003204:	d10e      	bne.n	8003224 <isidata+0x7c>
 8003206:	7a7b      	ldrb	r3, [r7, #9]
 8003208:	4a0d      	ldr	r2, [pc, #52]	; (8003240 <isidata+0x98>)
 800320a:	5cd3      	ldrb	r3, [r2, r3]
 800320c:	2b2c      	cmp	r3, #44	; 0x2c
 800320e:	d009      	beq.n	8003224 <isidata+0x7c>
		{
			dat_[k]=(char)datalkp[m];
 8003210:	7a7a      	ldrb	r2, [r7, #9]
 8003212:	7abb      	ldrb	r3, [r7, #10]
 8003214:	6839      	ldr	r1, [r7, #0]
 8003216:	440b      	add	r3, r1
 8003218:	4909      	ldr	r1, [pc, #36]	; (8003240 <isidata+0x98>)
 800321a:	5c8a      	ldrb	r2, [r1, r2]
 800321c:	701a      	strb	r2, [r3, #0]
			k++;
 800321e:	7abb      	ldrb	r3, [r7, #10]
 8003220:	3301      	adds	r3, #1
 8003222:	72bb      	strb	r3, [r7, #10]
		}
		m++;
 8003224:	7a7b      	ldrb	r3, [r7, #9]
 8003226:	3301      	adds	r3, #1
 8003228:	727b      	strb	r3, [r7, #9]
	while(n<urutan)
 800322a:	7afa      	ldrb	r2, [r7, #11]
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	429a      	cmp	r2, r3
 8003230:	d3d5      	bcc.n	80031de <isidata+0x36>
	}
}
 8003232:	bf00      	nop
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	20000818 	.word	0x20000818

08003244 <cocokan>:

uint8_t cocokan(uint8_t urutan,char dat[])
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b08a      	sub	sp, #40	; 0x28
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
	char buf[30];
	uint8_t hasil=0;
 8003250:	2300      	movs	r3, #0
 8003252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	isidata(urutan,buf);
 8003256:	f107 0208 	add.w	r2, r7, #8
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff ffa2 	bl	80031a8 <isidata>
	uint8_t k=0;
 8003264:	2300      	movs	r3, #0
 8003266:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	while(buf[k] != '\0')
 800326a:	e016      	b.n	800329a <cocokan+0x56>
	{
		k++;
 800326c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003270:	3301      	adds	r3, #1
 8003272:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if(buf[k]==dat[k])hasil++;
 8003276:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800327a:	3328      	adds	r3, #40	; 0x28
 800327c:	443b      	add	r3, r7
 800327e:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8003282:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003286:	6839      	ldr	r1, [r7, #0]
 8003288:	440b      	add	r3, r1
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d104      	bne.n	800329a <cocokan+0x56>
 8003290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003294:	3301      	adds	r3, #1
 8003296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(buf[k] != '\0')
 800329a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800329e:	3328      	adds	r3, #40	; 0x28
 80032a0:	443b      	add	r3, r7
 80032a2:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1e0      	bne.n	800326c <cocokan+0x28>
	}
	return hasil;
 80032aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3728      	adds	r7, #40	; 0x28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <checkdata_>:

void checkdata_(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
	if(rxdata[0]=='C')
 80032bc:	4b87      	ldr	r3, [pc, #540]	; (80034dc <checkdata_+0x224>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b43      	cmp	r3, #67	; 0x43
 80032c2:	d113      	bne.n	80032ec <checkdata_+0x34>
	{
		cmd++;
 80032c4:	4b86      	ldr	r3, [pc, #536]	; (80034e0 <checkdata_+0x228>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	3301      	adds	r3, #1
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b84      	ldr	r3, [pc, #528]	; (80034e0 <checkdata_+0x228>)
 80032ce:	701a      	strb	r2, [r3, #0]
		datalkp[i]=rxdata[0];
 80032d0:	4b84      	ldr	r3, [pc, #528]	; (80034e4 <checkdata_+0x22c>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	461a      	mov	r2, r3
 80032d6:	4b81      	ldr	r3, [pc, #516]	; (80034dc <checkdata_+0x224>)
 80032d8:	7819      	ldrb	r1, [r3, #0]
 80032da:	4b83      	ldr	r3, [pc, #524]	; (80034e8 <checkdata_+0x230>)
 80032dc:	5499      	strb	r1, [r3, r2]
		i++;
 80032de:	4b81      	ldr	r3, [pc, #516]	; (80034e4 <checkdata_+0x22c>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	3301      	adds	r3, #1
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4b7f      	ldr	r3, [pc, #508]	; (80034e4 <checkdata_+0x22c>)
 80032e8:	701a      	strb	r2, [r3, #0]
 80032ea:	e0ef      	b.n	80034cc <checkdata_+0x214>
	}
	else if(cmd>0)
 80032ec:	4b7c      	ldr	r3, [pc, #496]	; (80034e0 <checkdata_+0x228>)
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80eb 	beq.w	80034cc <checkdata_+0x214>
	{
		if(rxdata[0] == ',')
 80032f6:	4b79      	ldr	r3, [pc, #484]	; (80034dc <checkdata_+0x224>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b2c      	cmp	r3, #44	; 0x2c
 80032fc:	d112      	bne.n	8003324 <checkdata_+0x6c>
		{
			datalkp[i]=',';
 80032fe:	4b79      	ldr	r3, [pc, #484]	; (80034e4 <checkdata_+0x22c>)
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	461a      	mov	r2, r3
 8003304:	4b78      	ldr	r3, [pc, #480]	; (80034e8 <checkdata_+0x230>)
 8003306:	212c      	movs	r1, #44	; 0x2c
 8003308:	5499      	strb	r1, [r3, r2]
			i++;
 800330a:	4b76      	ldr	r3, [pc, #472]	; (80034e4 <checkdata_+0x22c>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	3301      	adds	r3, #1
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4b74      	ldr	r3, [pc, #464]	; (80034e4 <checkdata_+0x22c>)
 8003314:	701a      	strb	r2, [r3, #0]
			cmd++;
 8003316:	4b72      	ldr	r3, [pc, #456]	; (80034e0 <checkdata_+0x228>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	3301      	adds	r3, #1
 800331c:	b2da      	uxtb	r2, r3
 800331e:	4b70      	ldr	r3, [pc, #448]	; (80034e0 <checkdata_+0x228>)
 8003320:	701a      	strb	r2, [r3, #0]
 8003322:	e0d3      	b.n	80034cc <checkdata_+0x214>
		}
		else if(rxdata[0] == '\r')
 8003324:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <checkdata_+0x224>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b0d      	cmp	r3, #13
 800332a:	f040 80bc 	bne.w	80034a6 <checkdata_+0x1ee>
		{
			datalkp[i]='\r';
 800332e:	4b6d      	ldr	r3, [pc, #436]	; (80034e4 <checkdata_+0x22c>)
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	4b6c      	ldr	r3, [pc, #432]	; (80034e8 <checkdata_+0x230>)
 8003336:	210d      	movs	r1, #13
 8003338:	5499      	strb	r1, [r3, r2]
			i++;
 800333a:	4b6a      	ldr	r3, [pc, #424]	; (80034e4 <checkdata_+0x22c>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	3301      	adds	r3, #1
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b68      	ldr	r3, [pc, #416]	; (80034e4 <checkdata_+0x22c>)
 8003344:	701a      	strb	r2, [r3, #0]
			cmd = 0;
 8003346:	4b66      	ldr	r3, [pc, #408]	; (80034e0 <checkdata_+0x228>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]
			i=0;
 800334c:	4b65      	ldr	r3, [pc, #404]	; (80034e4 <checkdata_+0x22c>)
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]

			if ((cocokan(3,cx)==2)&&(cocokan(2,tn)==4)) CX();
 8003352:	4966      	ldr	r1, [pc, #408]	; (80034ec <checkdata_+0x234>)
 8003354:	2003      	movs	r0, #3
 8003356:	f7ff ff75 	bl	8003244 <cocokan>
 800335a:	4603      	mov	r3, r0
 800335c:	2b02      	cmp	r3, #2
 800335e:	d109      	bne.n	8003374 <checkdata_+0xbc>
 8003360:	4963      	ldr	r1, [pc, #396]	; (80034f0 <checkdata_+0x238>)
 8003362:	2002      	movs	r0, #2
 8003364:	f7ff ff6e 	bl	8003244 <cocokan>
 8003368:	4603      	mov	r3, r0
 800336a:	2b04      	cmp	r3, #4
 800336c:	d102      	bne.n	8003374 <checkdata_+0xbc>
 800336e:	f003 fa37 	bl	80067e0 <CX>
 8003372:	e0ab      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,sim)==3)&&(cocokan(2,tn)==4)) SIM();
 8003374:	495f      	ldr	r1, [pc, #380]	; (80034f4 <checkdata_+0x23c>)
 8003376:	2003      	movs	r0, #3
 8003378:	f7ff ff64 	bl	8003244 <cocokan>
 800337c:	4603      	mov	r3, r0
 800337e:	2b03      	cmp	r3, #3
 8003380:	d109      	bne.n	8003396 <checkdata_+0xde>
 8003382:	495b      	ldr	r1, [pc, #364]	; (80034f0 <checkdata_+0x238>)
 8003384:	2002      	movs	r0, #2
 8003386:	f7ff ff5d 	bl	8003244 <cocokan>
 800338a:	4603      	mov	r3, r0
 800338c:	2b04      	cmp	r3, #4
 800338e:	d102      	bne.n	8003396 <checkdata_+0xde>
 8003390:	f003 fb64 	bl	8006a5c <SIM>
 8003394:	e09a      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,simp)==4)&&(cocokan(2,tn)==4)) SIMP();
 8003396:	4958      	ldr	r1, [pc, #352]	; (80034f8 <checkdata_+0x240>)
 8003398:	2003      	movs	r0, #3
 800339a:	f7ff ff53 	bl	8003244 <cocokan>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d109      	bne.n	80033b8 <checkdata_+0x100>
 80033a4:	4952      	ldr	r1, [pc, #328]	; (80034f0 <checkdata_+0x238>)
 80033a6:	2002      	movs	r0, #2
 80033a8:	f7ff ff4c 	bl	8003244 <cocokan>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d102      	bne.n	80033b8 <checkdata_+0x100>
 80033b2:	f003 fbb5 	bl	8006b20 <SIMP>
 80033b6:	e089      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,cal)==3)&&(cocokan(2,tn)==4)) CAL();
 80033b8:	4950      	ldr	r1, [pc, #320]	; (80034fc <checkdata_+0x244>)
 80033ba:	2003      	movs	r0, #3
 80033bc:	f7ff ff42 	bl	8003244 <cocokan>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d109      	bne.n	80033da <checkdata_+0x122>
 80033c6:	494a      	ldr	r1, [pc, #296]	; (80034f0 <checkdata_+0x238>)
 80033c8:	2002      	movs	r0, #2
 80033ca:	f7ff ff3b 	bl	8003244 <cocokan>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b04      	cmp	r3, #4
 80033d2:	d102      	bne.n	80033da <checkdata_+0x122>
 80033d4:	f003 fbee 	bl	8006bb4 <CAL>
 80033d8:	e078      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,st)==2)&&(cocokan(2,tn)==4)) ST();
 80033da:	4949      	ldr	r1, [pc, #292]	; (8003500 <checkdata_+0x248>)
 80033dc:	2003      	movs	r0, #3
 80033de:	f7ff ff31 	bl	8003244 <cocokan>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d109      	bne.n	80033fc <checkdata_+0x144>
 80033e8:	4941      	ldr	r1, [pc, #260]	; (80034f0 <checkdata_+0x238>)
 80033ea:	2002      	movs	r0, #2
 80033ec:	f7ff ff2a 	bl	8003244 <cocokan>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b04      	cmp	r3, #4
 80033f4:	d102      	bne.n	80033fc <checkdata_+0x144>
 80033f6:	f003 fa67 	bl	80068c8 <ST>
 80033fa:	e067      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,cr)==2)&&(cocokan(2,tn)==4)) CR();
 80033fc:	4941      	ldr	r1, [pc, #260]	; (8003504 <checkdata_+0x24c>)
 80033fe:	2003      	movs	r0, #3
 8003400:	f7ff ff20 	bl	8003244 <cocokan>
 8003404:	4603      	mov	r3, r0
 8003406:	2b02      	cmp	r3, #2
 8003408:	d109      	bne.n	800341e <checkdata_+0x166>
 800340a:	4939      	ldr	r1, [pc, #228]	; (80034f0 <checkdata_+0x238>)
 800340c:	2002      	movs	r0, #2
 800340e:	f7ff ff19 	bl	8003244 <cocokan>
 8003412:	4603      	mov	r3, r0
 8003414:	2b04      	cmp	r3, #4
 8003416:	d102      	bne.n	800341e <checkdata_+0x166>
 8003418:	f003 fcaa 	bl	8006d70 <CR>
 800341c:	e056      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,bcn)==3)&&(cocokan(2,tn)==4)) BCN();
 800341e:	493a      	ldr	r1, [pc, #232]	; (8003508 <checkdata_+0x250>)
 8003420:	2003      	movs	r0, #3
 8003422:	f7ff ff0f 	bl	8003244 <cocokan>
 8003426:	4603      	mov	r3, r0
 8003428:	2b03      	cmp	r3, #3
 800342a:	d109      	bne.n	8003440 <checkdata_+0x188>
 800342c:	4930      	ldr	r1, [pc, #192]	; (80034f0 <checkdata_+0x238>)
 800342e:	2002      	movs	r0, #2
 8003430:	f7ff ff08 	bl	8003244 <cocokan>
 8003434:	4603      	mov	r3, r0
 8003436:	2b04      	cmp	r3, #4
 8003438:	d102      	bne.n	8003440 <checkdata_+0x188>
 800343a:	f003 fa05 	bl	8006848 <BCN>
 800343e:	e045      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,gb)==2)&&(cocokan(2,tn)==4)) GB();
 8003440:	4932      	ldr	r1, [pc, #200]	; (800350c <checkdata_+0x254>)
 8003442:	2003      	movs	r0, #3
 8003444:	f7ff fefe 	bl	8003244 <cocokan>
 8003448:	4603      	mov	r3, r0
 800344a:	2b02      	cmp	r3, #2
 800344c:	d109      	bne.n	8003462 <checkdata_+0x1aa>
 800344e:	4928      	ldr	r1, [pc, #160]	; (80034f0 <checkdata_+0x238>)
 8003450:	2002      	movs	r0, #2
 8003452:	f7ff fef7 	bl	8003244 <cocokan>
 8003456:	4603      	mov	r3, r0
 8003458:	2b04      	cmp	r3, #4
 800345a:	d102      	bne.n	8003462 <checkdata_+0x1aa>
 800345c:	f003 fc32 	bl	8006cc4 <GB>
 8003460:	e034      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,hs)==2)&&(cocokan(2,tn)==4)) HS();
 8003462:	492b      	ldr	r1, [pc, #172]	; (8003510 <checkdata_+0x258>)
 8003464:	2003      	movs	r0, #3
 8003466:	f7ff feed 	bl	8003244 <cocokan>
 800346a:	4603      	mov	r3, r0
 800346c:	2b02      	cmp	r3, #2
 800346e:	d109      	bne.n	8003484 <checkdata_+0x1cc>
 8003470:	491f      	ldr	r1, [pc, #124]	; (80034f0 <checkdata_+0x238>)
 8003472:	2002      	movs	r0, #2
 8003474:	f7ff fee6 	bl	8003244 <cocokan>
 8003478:	4603      	mov	r3, r0
 800347a:	2b04      	cmp	r3, #4
 800347c:	d102      	bne.n	8003484 <checkdata_+0x1cc>
 800347e:	f003 fc3b 	bl	8006cf8 <HS>
 8003482:	e023      	b.n	80034cc <checkdata_+0x214>
			else if ((cocokan(3,cam)==3)&&(cocokan(2,tn)==4)) CAM();
 8003484:	4923      	ldr	r1, [pc, #140]	; (8003514 <checkdata_+0x25c>)
 8003486:	2003      	movs	r0, #3
 8003488:	f7ff fedc 	bl	8003244 <cocokan>
 800348c:	4603      	mov	r3, r0
 800348e:	2b03      	cmp	r3, #3
 8003490:	d11c      	bne.n	80034cc <checkdata_+0x214>
 8003492:	4917      	ldr	r1, [pc, #92]	; (80034f0 <checkdata_+0x238>)
 8003494:	2002      	movs	r0, #2
 8003496:	f7ff fed5 	bl	8003244 <cocokan>
 800349a:	4603      	mov	r3, r0
 800349c:	2b04      	cmp	r3, #4
 800349e:	d115      	bne.n	80034cc <checkdata_+0x214>
 80034a0:	f003 fc36 	bl	8006d10 <CAM>
 80034a4:	e012      	b.n	80034cc <checkdata_+0x214>
		}
		else
		{
			datalkp[i]=rxdata[0];
 80034a6:	4b0f      	ldr	r3, [pc, #60]	; (80034e4 <checkdata_+0x22c>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	461a      	mov	r2, r3
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <checkdata_+0x224>)
 80034ae:	7819      	ldrb	r1, [r3, #0]
 80034b0:	4b0d      	ldr	r3, [pc, #52]	; (80034e8 <checkdata_+0x230>)
 80034b2:	5499      	strb	r1, [r3, r2]
			i++;
 80034b4:	4b0b      	ldr	r3, [pc, #44]	; (80034e4 <checkdata_+0x22c>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	4b09      	ldr	r3, [pc, #36]	; (80034e4 <checkdata_+0x22c>)
 80034be:	701a      	strb	r2, [r3, #0]
			cmd++;
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <checkdata_+0x228>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <checkdata_+0x228>)
 80034ca:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_DMA(&huart3, (uint8_t*)rxdata, 1);
 80034cc:	2201      	movs	r2, #1
 80034ce:	4903      	ldr	r1, [pc, #12]	; (80034dc <checkdata_+0x224>)
 80034d0:	4811      	ldr	r0, [pc, #68]	; (8003518 <checkdata_+0x260>)
 80034d2:	f009 ffc5 	bl	800d460 <HAL_UART_Receive_DMA>
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000814 	.word	0x20000814
 80034e0:	20000810 	.word	0x20000810
 80034e4:	20000836 	.word	0x20000836
 80034e8:	20000818 	.word	0x20000818
 80034ec:	2000000c 	.word	0x2000000c
 80034f0:	20000028 	.word	0x20000028
 80034f4:	20000014 	.word	0x20000014
 80034f8:	20000018 	.word	0x20000018
 80034fc:	20000020 	.word	0x20000020
 8003500:	20000010 	.word	0x20000010
 8003504:	20000024 	.word	0x20000024
 8003508:	20000030 	.word	0x20000030
 800350c:	20000034 	.word	0x20000034
 8003510:	20000038 	.word	0x20000038
 8003514:	2000003c 	.word	0x2000003c
 8003518:	20000c68 	.word	0x20000c68

0800351c <kominit>:

void kominit(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, (uint8_t*)rxdata, 1);
 8003520:	2201      	movs	r2, #1
 8003522:	4903      	ldr	r1, [pc, #12]	; (8003530 <kominit+0x14>)
 8003524:	4803      	ldr	r0, [pc, #12]	; (8003534 <kominit+0x18>)
 8003526:	f009 ff9b 	bl	800d460 <HAL_UART_Receive_DMA>
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000814 	.word	0x20000814
 8003534:	20000c68 	.word	0x20000c68

08003538 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b590      	push	{r4, r7, lr}
 800353a:	b085      	sub	sp, #20
 800353c:	af02      	add	r7, sp, #8
 800353e:	6078      	str	r0, [r7, #4]
    if (htim == &htim10)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a68      	ldr	r2, [pc, #416]	; (80036e4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d12a      	bne.n	800359e <HAL_TIM_PeriodElapsedCallback+0x66>
    {
		ambildata();
 8003548:	f002 fdfa 	bl	8006140 <ambildata>
		if (flagtel == 1)
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d11a      	bne.n	800358a <HAL_TIM_PeriodElapsedCallback+0x52>
		{
			counting++;
 8003554:	4b65      	ldr	r3, [pc, #404]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	3301      	adds	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	4b63      	ldr	r3, [pc, #396]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800355e:	801a      	strh	r2, [r3, #0]
			TM_BKPSRAM_Write16(PACKETCOUNT_ADR, counting);
 8003560:	4b63      	ldr	r3, [pc, #396]	; (80036f0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8003562:	4a62      	ldr	r2, [pc, #392]	; (80036ec <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8003564:	8812      	ldrh	r2, [r2, #0]
 8003566:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)datatelemetri.telemetritotal, strnlen(datatelemetri.telemetritotal, sizeof(datatelemetri.telemetritotal)));
 8003568:	21af      	movs	r1, #175	; 0xaf
 800356a:	4862      	ldr	r0, [pc, #392]	; (80036f4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800356c:	f010 fc04 	bl	8013d78 <strnlen>
 8003570:	4603      	mov	r3, r0
 8003572:	b29b      	uxth	r3, r3
 8003574:	461a      	mov	r2, r3
 8003576:	495f      	ldr	r1, [pc, #380]	; (80036f4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8003578:	485f      	ldr	r0, [pc, #380]	; (80036f8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800357a:	f009 fef3 	bl	800d364 <HAL_UART_Transmit_DMA>
			HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
 800357e:	2201      	movs	r2, #1
 8003580:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003584:	485d      	ldr	r0, [pc, #372]	; (80036fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8003586:	f005 f92d 	bl	80087e4 <HAL_GPIO_WritePin>
		}
		Update_File("2023.txt", datatelemetri.telemetritotal);
 800358a:	495a      	ldr	r1, [pc, #360]	; (80036f4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800358c:	485c      	ldr	r0, [pc, #368]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800358e:	f7fe fb3f 	bl	8001c10 <Update_File>
		HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 8003592:	2200      	movs	r2, #0
 8003594:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003598:	4858      	ldr	r0, [pc, #352]	; (80036fc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800359a:	f005 f923 	bl	80087e4 <HAL_GPIO_WritePin>
	}

	if (htim == &htim11)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a58      	ldr	r2, [pc, #352]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	f040 80d2 	bne.w	800374c <HAL_TIM_PeriodElapsedCallback+0x214>
	{
		BME280_Measure();
 80035a8:	f7fe fa7a 	bl	8001aa0 <BME280_Measure>

		if (flagkameraon)
 80035ac:	4b56      	ldr	r3, [pc, #344]	; (8003708 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d054      	beq.n	800365e <HAL_TIM_PeriodElapsedCallback+0x126>
		{
			switch (camera) {
 80035b4:	4b55      	ldr	r3, [pc, #340]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d002      	beq.n	80035c2 <HAL_TIM_PeriodElapsedCallback+0x8a>
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d004      	beq.n	80035ca <HAL_TIM_PeriodElapsedCallback+0x92>
 80035c0:	e007      	b.n	80035d2 <HAL_TIM_PeriodElapsedCallback+0x9a>
				case 1:
					cam_pin = CAM1_Pin;
 80035c2:	4b53      	ldr	r3, [pc, #332]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80035c4:	2220      	movs	r2, #32
 80035c6:	801a      	strh	r2, [r3, #0]
					break;
 80035c8:	e003      	b.n	80035d2 <HAL_TIM_PeriodElapsedCallback+0x9a>
				case 2:
					cam_pin = CAM2_Pin;
 80035ca:	4b51      	ldr	r3, [pc, #324]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80035cc:	2240      	movs	r2, #64	; 0x40
 80035ce:	801a      	strh	r2, [r3, #0]
					break;
 80035d0:	bf00      	nop
			}

			timerkamera1--;
 80035d2:	4b50      	ldr	r3, [pc, #320]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	3b01      	subs	r3, #1
 80035d8:	b2da      	uxtb	r2, r3
 80035da:	4b4e      	ldr	r3, [pc, #312]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80035dc:	701a      	strb	r2, [r3, #0]
			if(timerkamera1 < 29 && timerkamera1 > 27)
 80035de:	4b4d      	ldr	r3, [pc, #308]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b1c      	cmp	r3, #28
 80035e4:	d80b      	bhi.n	80035fe <HAL_TIM_PeriodElapsedCallback+0xc6>
 80035e6:	4b4b      	ldr	r3, [pc, #300]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b1b      	cmp	r3, #27
 80035ec:	d907      	bls.n	80035fe <HAL_TIM_PeriodElapsedCallback+0xc6>
			{
				//28
				HAL_GPIO_WritePin(GPIOB, cam_pin, SET);
 80035ee:	4b48      	ldr	r3, [pc, #288]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80035f0:	881b      	ldrh	r3, [r3, #0]
 80035f2:	2201      	movs	r2, #1
 80035f4:	4619      	mov	r1, r3
 80035f6:	4848      	ldr	r0, [pc, #288]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80035f8:	f005 f8f4 	bl	80087e4 <HAL_GPIO_WritePin>
 80035fc:	e01e      	b.n	800363c <HAL_TIM_PeriodElapsedCallback+0x104>
			}
			else if (timerkamera1 > 11 && timerkamera1 < 13)
 80035fe:	4b45      	ldr	r3, [pc, #276]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b0b      	cmp	r3, #11
 8003604:	d90b      	bls.n	800361e <HAL_TIM_PeriodElapsedCallback+0xe6>
 8003606:	4b43      	ldr	r3, [pc, #268]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2b0c      	cmp	r3, #12
 800360c:	d807      	bhi.n	800361e <HAL_TIM_PeriodElapsedCallback+0xe6>
			{
				//12
				HAL_GPIO_WritePin(GPIOB, cam_pin, RESET);
 800360e:	4b40      	ldr	r3, [pc, #256]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	2200      	movs	r2, #0
 8003614:	4619      	mov	r1, r3
 8003616:	4840      	ldr	r0, [pc, #256]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003618:	f005 f8e4 	bl	80087e4 <HAL_GPIO_WritePin>
 800361c:	e00e      	b.n	800363c <HAL_TIM_PeriodElapsedCallback+0x104>
			}
			else if (timerkamera1 > 3 && timerkamera1 < 5)
 800361e:	4b3d      	ldr	r3, [pc, #244]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b03      	cmp	r3, #3
 8003624:	d90a      	bls.n	800363c <HAL_TIM_PeriodElapsedCallback+0x104>
 8003626:	4b3b      	ldr	r3, [pc, #236]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b04      	cmp	r3, #4
 800362c:	d806      	bhi.n	800363c <HAL_TIM_PeriodElapsedCallback+0x104>
			{
				//4
				HAL_GPIO_WritePin(GPIOB, cam_pin, SET);
 800362e:	4b38      	ldr	r3, [pc, #224]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	2201      	movs	r2, #1
 8003634:	4619      	mov	r1, r3
 8003636:	4838      	ldr	r0, [pc, #224]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003638:	f005 f8d4 	bl	80087e4 <HAL_GPIO_WritePin>
			}
			if (timerkamera1 < 1)
 800363c:	4b35      	ldr	r3, [pc, #212]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10c      	bne.n	800365e <HAL_TIM_PeriodElapsedCallback+0x126>
			{
				flagkameraon = 0;
 8003644:	4b30      	ldr	r3, [pc, #192]	; (8003708 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8003646:	2200      	movs	r2, #0
 8003648:	701a      	strb	r2, [r3, #0]
				timerkamera1 = 29;
 800364a:	4b32      	ldr	r3, [pc, #200]	; (8003714 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 800364c:	221d      	movs	r2, #29
 800364e:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, cam_pin, RESET);
 8003650:	4b2f      	ldr	r3, [pc, #188]	; (8003710 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8003652:	881b      	ldrh	r3, [r3, #0]
 8003654:	2200      	movs	r2, #0
 8003656:	4619      	mov	r1, r3
 8003658:	482f      	ldr	r0, [pc, #188]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800365a:	f005 f8c3 	bl	80087e4 <HAL_GPIO_WritePin>
			}
		}

		if (flagkameraoff)
 800365e:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8003660:	781b      	ldrb	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d072      	beq.n	800374c <HAL_TIM_PeriodElapsedCallback+0x214>
		{
			timerkamera2--;
 8003666:	4b2e      	ldr	r3, [pc, #184]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	3b01      	subs	r3, #1
 800366c:	b2da      	uxtb	r2, r3
 800366e:	4b2c      	ldr	r3, [pc, #176]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003670:	701a      	strb	r2, [r3, #0]
			if (timerkamera2 < 26 && timerkamera2 > 24)
 8003672:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b19      	cmp	r3, #25
 8003678:	d80e      	bhi.n	8003698 <HAL_TIM_PeriodElapsedCallback+0x160>
 800367a:	4b29      	ldr	r3, [pc, #164]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b18      	cmp	r3, #24
 8003680:	d90a      	bls.n	8003698 <HAL_TIM_PeriodElapsedCallback+0x160>
			{
				//25
				HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin, SET);
 8003682:	2201      	movs	r2, #1
 8003684:	2120      	movs	r1, #32
 8003686:	4824      	ldr	r0, [pc, #144]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003688:	f005 f8ac 	bl	80087e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(CAM2_GPIO_Port, CAM2_Pin, SET);
 800368c:	2201      	movs	r2, #1
 800368e:	2140      	movs	r1, #64	; 0x40
 8003690:	4821      	ldr	r0, [pc, #132]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8003692:	f005 f8a7 	bl	80087e4 <HAL_GPIO_WritePin>
 8003696:	e059      	b.n	800374c <HAL_TIM_PeriodElapsedCallback+0x214>
			}
			else if (timerkamera2 < 22 && timerkamera2 > 20)
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b15      	cmp	r3, #21
 800369e:	d80e      	bhi.n	80036be <HAL_TIM_PeriodElapsedCallback+0x186>
 80036a0:	4b1f      	ldr	r3, [pc, #124]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b14      	cmp	r3, #20
 80036a6:	d90a      	bls.n	80036be <HAL_TIM_PeriodElapsedCallback+0x186>
			{
				//21
				HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin, RESET);
 80036a8:	2200      	movs	r2, #0
 80036aa:	2120      	movs	r1, #32
 80036ac:	481a      	ldr	r0, [pc, #104]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80036ae:	f005 f899 	bl	80087e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(CAM2_GPIO_Port, CAM2_Pin, RESET);
 80036b2:	2200      	movs	r2, #0
 80036b4:	2140      	movs	r1, #64	; 0x40
 80036b6:	4818      	ldr	r0, [pc, #96]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80036b8:	f005 f894 	bl	80087e4 <HAL_GPIO_WritePin>
 80036bc:	e046      	b.n	800374c <HAL_TIM_PeriodElapsedCallback+0x214>
			}
			else if (timerkamera2 < 19 && timerkamera2 > 17)
 80036be:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	2b12      	cmp	r3, #18
 80036c4:	d82e      	bhi.n	8003724 <HAL_TIM_PeriodElapsedCallback+0x1ec>
 80036c6:	4b16      	ldr	r3, [pc, #88]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b11      	cmp	r3, #17
 80036cc:	d92a      	bls.n	8003724 <HAL_TIM_PeriodElapsedCallback+0x1ec>
			{
				//18
				HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin, SET);
 80036ce:	2201      	movs	r2, #1
 80036d0:	2120      	movs	r1, #32
 80036d2:	4811      	ldr	r0, [pc, #68]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80036d4:	f005 f886 	bl	80087e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(CAM2_GPIO_Port, CAM2_Pin, SET);
 80036d8:	2201      	movs	r2, #1
 80036da:	2140      	movs	r1, #64	; 0x40
 80036dc:	480e      	ldr	r0, [pc, #56]	; (8003718 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80036de:	f005 f881 	bl	80087e4 <HAL_GPIO_WritePin>
 80036e2:	e033      	b.n	800374c <HAL_TIM_PeriodElapsedCallback+0x214>
 80036e4:	20000b4c 	.word	0x20000b4c
 80036e8:	20000ebf 	.word	0x20000ebf
 80036ec:	20000048 	.word	0x20000048
 80036f0:	40024000 	.word	0x40024000
 80036f4:	20000f6e 	.word	0x20000f6e
 80036f8:	20000c68 	.word	0x20000c68
 80036fc:	40021000 	.word	0x40021000
 8003700:	08017888 	.word	0x08017888
 8003704:	20000b94 	.word	0x20000b94
 8003708:	20000ebc 	.word	0x20000ebc
 800370c:	20000ebe 	.word	0x20000ebe
 8003710:	20000dcc 	.word	0x20000dcc
 8003714:	20000040 	.word	0x20000040
 8003718:	40020400 	.word	0x40020400
 800371c:	20000ebd 	.word	0x20000ebd
 8003720:	20000041 	.word	0x20000041
			}
			else if (timerkamera2 < 1)
 8003724:	4b7c      	ldr	r3, [pc, #496]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10f      	bne.n	800374c <HAL_TIM_PeriodElapsedCallback+0x214>
			{
				flagkameraoff = 0;
 800372c:	4b7b      	ldr	r3, [pc, #492]	; (800391c <HAL_TIM_PeriodElapsedCallback+0x3e4>)
 800372e:	2200      	movs	r2, #0
 8003730:	701a      	strb	r2, [r3, #0]
				timerkamera2 = 26;
 8003732:	4b79      	ldr	r3, [pc, #484]	; (8003918 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8003734:	221a      	movs	r2, #26
 8003736:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin, RESET);
 8003738:	2200      	movs	r2, #0
 800373a:	2120      	movs	r1, #32
 800373c:	4878      	ldr	r0, [pc, #480]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800373e:	f005 f851 	bl	80087e4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(CAM2_GPIO_Port, CAM2_Pin, RESET);
 8003742:	2200      	movs	r2, #0
 8003744:	2140      	movs	r1, #64	; 0x40
 8003746:	4876      	ldr	r0, [pc, #472]	; (8003920 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8003748:	f005 f84c 	bl	80087e4 <HAL_GPIO_WritePin>
			}
		}
	}

	if (htim == &htim13)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a75      	ldr	r2, [pc, #468]	; (8003924 <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8003750:	4293      	cmp	r3, r2
 8003752:	f040 80dd 	bne.w	8003910 <HAL_TIM_PeriodElapsedCallback+0x3d8>
	{
		bno055_gyro = bno055_getVectorGyroscope();
 8003756:	f7ff fca1 	bl	800309c <bno055_getVectorGyroscope>
 800375a:	eeb0 4a40 	vmov.f32	s8, s0
 800375e:	eef0 4a60 	vmov.f32	s9, s1
 8003762:	eeb0 5a41 	vmov.f32	s10, s2
 8003766:	eef0 5a61 	vmov.f32	s11, s3
 800376a:	eeb0 6a42 	vmov.f32	s12, s4
 800376e:	eef0 6a62 	vmov.f32	s13, s5
 8003772:	eeb0 7a43 	vmov.f32	s14, s6
 8003776:	eef0 7a63 	vmov.f32	s15, s7
 800377a:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 800377c:	ed83 4b00 	vstr	d4, [r3]
 8003780:	ed83 5b02 	vstr	d5, [r3, #8]
 8003784:	ed83 6b04 	vstr	d6, [r3, #16]
 8003788:	ed83 7b06 	vstr	d7, [r3, #24]
		bno055_euler = bno055_getVectorEuler();
 800378c:	f7ff fcc9 	bl	8003122 <bno055_getVectorEuler>
 8003790:	eeb0 4a40 	vmov.f32	s8, s0
 8003794:	eef0 4a60 	vmov.f32	s9, s1
 8003798:	eeb0 5a41 	vmov.f32	s10, s2
 800379c:	eef0 5a61 	vmov.f32	s11, s3
 80037a0:	eeb0 6a42 	vmov.f32	s12, s4
 80037a4:	eef0 6a62 	vmov.f32	s13, s5
 80037a8:	eeb0 7a43 	vmov.f32	s14, s6
 80037ac:	eef0 7a63 	vmov.f32	s15, s7
 80037b0:	4b5e      	ldr	r3, [pc, #376]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 80037b2:	ed83 4b00 	vstr	d4, [r3]
 80037b6:	ed83 5b02 	vstr	d5, [r3, #8]
 80037ba:	ed83 6b04 	vstr	d6, [r3, #16]
 80037be:	ed83 7b06 	vstr	d7, [r3, #24]

		if (flaggimbal)
 80037c2:	4b5b      	ldr	r3, [pc, #364]	; (8003930 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80a2 	beq.w	8003910 <HAL_TIM_PeriodElapsedCallback+0x3d8>
//			else if (bno055_euler.x >= 180 && bno055_euler.x <= 360)
//			{
//				servogerak(&htim3, TIM_CHANNEL_1, 180);
//				servogerak(&htim3, TIM_CHANNEL_3, bno055_euler.x - 180);
//			}
			CountENC = getCumulativePosition();
 80037cc:	f7ff f8da 	bl	8002984 <getCumulativePosition>
 80037d0:	4603      	mov	r3, r0
 80037d2:	4a58      	ldr	r2, [pc, #352]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80037d4:	6013      	str	r3, [r2, #0]
			Rev = CountENC % 4095;
 80037d6:	4b57      	ldr	r3, [pc, #348]	; (8003934 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b57      	ldr	r3, [pc, #348]	; (8003938 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80037dc:	fb83 1302 	smull	r1, r3, r3, r2
 80037e0:	4413      	add	r3, r2
 80037e2:	12d9      	asrs	r1, r3, #11
 80037e4:	17d3      	asrs	r3, r2, #31
 80037e6:	1ac9      	subs	r1, r1, r3
 80037e8:	460b      	mov	r3, r1
 80037ea:	031b      	lsls	r3, r3, #12
 80037ec:	1a5b      	subs	r3, r3, r1
 80037ee:	1ad1      	subs	r1, r2, r3
 80037f0:	4b52      	ldr	r3, [pc, #328]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x404>)
 80037f2:	6019      	str	r1, [r3, #0]
			Current_Angle = map(Rev, 0, 4095, 0, 359);
 80037f4:	4b51      	ldr	r3, [pc, #324]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x404>)
 80037f6:	6818      	ldr	r0, [r3, #0]
 80037f8:	f240 1367 	movw	r3, #359	; 0x167
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	2300      	movs	r3, #0
 8003800:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003804:	2100      	movs	r1, #0
 8003806:	f000 fe9d 	bl	8004544 <map>
 800380a:	4603      	mov	r3, r0
 800380c:	4a4c      	ldr	r2, [pc, #304]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x408>)
 800380e:	6013      	str	r3, [r2, #0]
			CW = ((int)bno055_euler.x - Current_Angle + 360) % 360;
 8003810:	4b46      	ldr	r3, [pc, #280]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8003812:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003816:	4610      	mov	r0, r2
 8003818:	4619      	mov	r1, r3
 800381a:	f7fd f99d 	bl	8000b58 <__aeabi_d2iz>
 800381e:	4602      	mov	r2, r0
 8003820:	4b47      	ldr	r3, [pc, #284]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800382a:	4a46      	ldr	r2, [pc, #280]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 800382c:	fb82 1203 	smull	r1, r2, r2, r3
 8003830:	441a      	add	r2, r3
 8003832:	1211      	asrs	r1, r2, #8
 8003834:	17da      	asrs	r2, r3, #31
 8003836:	1a8a      	subs	r2, r1, r2
 8003838:	f44f 71b4 	mov.w	r1, #360	; 0x168
 800383c:	fb01 f202 	mul.w	r2, r1, r2
 8003840:	1a9a      	subs	r2, r3, r2
 8003842:	4b41      	ldr	r3, [pc, #260]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8003844:	601a      	str	r2, [r3, #0]
			CCW = ((Current_Angle - (int)bno055_euler.x + 360) % 360);
 8003846:	4b3e      	ldr	r3, [pc, #248]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8003848:	681c      	ldr	r4, [r3, #0]
 800384a:	4b38      	ldr	r3, [pc, #224]	; (800392c <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 800384c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003850:	4610      	mov	r0, r2
 8003852:	4619      	mov	r1, r3
 8003854:	f7fd f980 	bl	8000b58 <__aeabi_d2iz>
 8003858:	4603      	mov	r3, r0
 800385a:	1ae3      	subs	r3, r4, r3
 800385c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003860:	4a38      	ldr	r2, [pc, #224]	; (8003944 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8003862:	fb82 1203 	smull	r1, r2, r2, r3
 8003866:	441a      	add	r2, r3
 8003868:	1211      	asrs	r1, r2, #8
 800386a:	17da      	asrs	r2, r3, #31
 800386c:	1a8a      	subs	r2, r1, r2
 800386e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003872:	fb01 f202 	mul.w	r2, r1, r2
 8003876:	1a9a      	subs	r2, r3, r2
 8003878:	4b34      	ldr	r3, [pc, #208]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x414>)
 800387a:	601a      	str	r2, [r3, #0]

			if (CW < CCW)
 800387c:	4b32      	ldr	r3, [pc, #200]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x410>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	4b32      	ldr	r3, [pc, #200]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x414>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	da0a      	bge.n	800389e <HAL_TIM_PeriodElapsedCallback+0x366>
			{
				jarak_min = CW;
 8003888:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <HAL_TIM_PeriodElapsedCallback+0x410>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4618      	mov	r0, r3
 800388e:	f7fc fe49 	bl	8000524 <__aeabi_i2d>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	492e      	ldr	r1, [pc, #184]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8003898:	e9c1 2300 	strd	r2, r3, [r1]
 800389c:	e00a      	b.n	80038b4 <HAL_TIM_PeriodElapsedCallback+0x37c>
			}
			else
			{
				jarak_min = -CCW;
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_TIM_PeriodElapsedCallback+0x414>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	425b      	negs	r3, r3
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fe3d 	bl	8000524 <__aeabi_i2d>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4928      	ldr	r1, [pc, #160]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80038b0:	e9c1 2300 	strd	r2, r3, [r1]
			}

			input = jarak_min;
 80038b4:	4b26      	ldr	r3, [pc, #152]	; (8003950 <HAL_TIM_PeriodElapsedCallback+0x418>)
 80038b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ba:	4926      	ldr	r1, [pc, #152]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 80038bc:	e9c1 2300 	strd	r2, r3, [r1]
			PID_Compute(&_PID);
 80038c0:	4825      	ldr	r0, [pc, #148]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0x420>)
 80038c2:	f000 fee9 	bl	8004698 <PID_Compute>

			if (output > 0)
 80038c6:	4b25      	ldr	r3, [pc, #148]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x424>)
 80038c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	f7fd f920 	bl	8000b18 <__aeabi_dcmpgt>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_TIM_PeriodElapsedCallback+0x3bc>
			{
				TIM1->CCR3 = (uint32_t)output;
 80038de:	4b1f      	ldr	r3, [pc, #124]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x424>)
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	4c1e      	ldr	r4, [pc, #120]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x428>)
 80038e6:	4610      	mov	r0, r2
 80038e8:	4619      	mov	r1, r3
 80038ea:	f7fd f95d 	bl	8000ba8 <__aeabi_d2uiz>
 80038ee:	4603      	mov	r3, r0
 80038f0:	63e3      	str	r3, [r4, #60]	; 0x3c
			{
				TIM1->CCR2 = (uint32_t)abs(output);
			}
		}
    }
}
 80038f2:	e00d      	b.n	8003910 <HAL_TIM_PeriodElapsedCallback+0x3d8>
				TIM1->CCR2 = (uint32_t)abs(output);
 80038f4:	4b19      	ldr	r3, [pc, #100]	; (800395c <HAL_TIM_PeriodElapsedCallback+0x424>)
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	f7fd f92b 	bl	8000b58 <__aeabi_d2iz>
 8003902:	4603      	mov	r3, r0
 8003904:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003908:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800390c:	4b14      	ldr	r3, [pc, #80]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0x428>)
 800390e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bd90      	pop	{r4, r7, pc}
 8003918:	20000041 	.word	0x20000041
 800391c:	20000ebd 	.word	0x20000ebd
 8003920:	40020400 	.word	0x40020400
 8003924:	20000bdc 	.word	0x20000bdc
 8003928:	20000df0 	.word	0x20000df0
 800392c:	20000dd0 	.word	0x20000dd0
 8003930:	20001077 	.word	0x20001077
 8003934:	20000e80 	.word	0x20000e80
 8003938:	80080081 	.word	0x80080081
 800393c:	20000e84 	.word	0x20000e84
 8003940:	20000e88 	.word	0x20000e88
 8003944:	b60b60b7 	.word	0xb60b60b7
 8003948:	20000e8c 	.word	0x20000e8c
 800394c:	20000e90 	.word	0x20000e90
 8003950:	20000ea8 	.word	0x20000ea8
 8003954:	20000eb0 	.word	0x20000eb0
 8003958:	20000e10 	.word	0x20000e10
 800395c:	20000e98 	.word	0x20000e98
 8003960:	40010000 	.word	0x40010000

08003964 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	ADC_measure();
 800396c:	f002 f988 	bl	8005c80 <ADC_measure>
}
 8003970:	bf00      	nop
 8003972:	3708      	adds	r7, #8
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
    if (huart == &huart2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <HAL_UART_RxCpltCallback+0x28>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <HAL_UART_RxCpltCallback+0x14>
    {
    	parsegpsdata();
 8003988:	f7fe ffb8 	bl	80028fc <parsegpsdata>
    }

    if (huart == &huart3)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a05      	ldr	r2, [pc, #20]	; (80039a4 <HAL_UART_RxCpltCallback+0x2c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d101      	bne.n	8003998 <HAL_UART_RxCpltCallback+0x20>
    {
    	checkdata_();
 8003994:	f7ff fc90 	bl	80032b8 <checkdata_>
    }
}
 8003998:	bf00      	nop
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	20000c24 	.word	0x20000c24
 80039a4:	20000c68 	.word	0x20000c68

080039a8 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	0000      	movs	r0, r0
	...

080039c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039c6:	f003 fa21 	bl	8006e0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039ca:	f000 f8c1 	bl	8003b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039ce:	f000 fd25 	bl	800441c <MX_GPIO_Init>
  MX_DMA_Init();
 80039d2:	f000 fcdd 	bl	8004390 <MX_DMA_Init>
  MX_USART3_UART_Init();
 80039d6:	f000 fcb1 	bl	800433c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80039da:	f000 fc19 	bl	8004210 <MX_TIM10_Init>
  MX_FATFS_Init();
 80039de:	f00b fb81 	bl	800f0e4 <MX_FATFS_Init>
  MX_I2C2_Init();
 80039e2:	f000 f973 	bl	8003ccc <MX_I2C2_Init>
  MX_I2C3_Init();
 80039e6:	f000 f99f 	bl	8003d28 <MX_I2C3_Init>
  MX_ADC1_Init();
 80039ea:	f000 f91d 	bl	8003c28 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80039ee:	f000 fc7b 	bl	80042e8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 80039f2:	f000 fb6f 	bl	80040d4 <MX_TIM4_Init>
  MX_SDIO_SD_Init();
 80039f6:	f000 fa1f 	bl	8003e38 <MX_SDIO_SD_Init>
  MX_TIM3_Init();
 80039fa:	f000 fae9 	bl	8003fd0 <MX_TIM3_Init>
  MX_TIM9_Init();
 80039fe:	f000 fbcd 	bl	800419c <MX_TIM9_Init>
  MX_TIM13_Init();
 8003a02:	f000 fc4d 	bl	80042a0 <MX_TIM13_Init>
  MX_TIM11_Init();
 8003a06:	f000 fc27 	bl	8004258 <MX_TIM11_Init>
  MX_RTC_Init();
 8003a0a:	f000 f9bb 	bl	8003d84 <MX_RTC_Init>
  MX_TIM1_Init();
 8003a0e:	f000 fa33 	bl	8003e78 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  TM_BKPSRAM_Init();
 8003a12:	f003 f9b1 	bl	8006d78 <TM_BKPSRAM_Init>
  init();
 8003a16:	f001 ff63 	bl	80058e0 <init>
  rtcbackup();
 8003a1a:	f002 fb7d 	bl	8006118 <rtcbackup>
  Mount_SD((const TCHAR *)"");
 8003a1e:	483e      	ldr	r0, [pc, #248]	; (8003b18 <main+0x158>)
 8003a20:	f7fe f8a4 	bl	8001b6c <Mount_SD>
  Create_File("2032.txt");
 8003a24:	483d      	ldr	r0, [pc, #244]	; (8003b1c <main+0x15c>)
 8003a26:	f7fe f8bd 	bl	8001ba4 <Create_File>
  bno055_init();
 8003a2a:	f002 f8f1 	bl	8005c10 <bno055_init>
  if (BME280_Config(OSRS_2, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_0p5, IIR_16) == 0)
 8003a2e:	2304      	movs	r3, #4
 8003a30:	9301      	str	r3, [sp, #4]
 8003a32:	2300      	movs	r3, #0
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	2303      	movs	r3, #3
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2105      	movs	r1, #5
 8003a3c:	2002      	movs	r0, #2
 8003a3e:	f7fd fc09 	bl	8001254 <BME280_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <main+0x96>
  {
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003a4e:	4834      	ldr	r0, [pc, #208]	; (8003b20 <main+0x160>)
 8003a50:	f004 fec8 	bl	80087e4 <HAL_GPIO_WritePin>
 8003a54:	e001      	b.n	8003a5a <main+0x9a>
  }
  else
  {
	  Error_Handler();
 8003a56:	f000 fd91 	bl	800457c <Error_Handler>
  }

  PID(&_PID, &input, &output, &Setpoint, 11, 0, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	2301      	movs	r3, #1
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8003af8 <main+0x138>
 8003a66:	ed9f 1b24 	vldr	d1, [pc, #144]	; 8003af8 <main+0x138>
 8003a6a:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8003b00 <main+0x140>
 8003a6e:	4b2d      	ldr	r3, [pc, #180]	; (8003b24 <main+0x164>)
 8003a70:	4a2d      	ldr	r2, [pc, #180]	; (8003b28 <main+0x168>)
 8003a72:	492e      	ldr	r1, [pc, #184]	; (8003b2c <main+0x16c>)
 8003a74:	482e      	ldr	r0, [pc, #184]	; (8003b30 <main+0x170>)
 8003a76:	f000 fdc3 	bl	8004600 <PID>
  PID_SetMode(&_PID, _PID_MODE_AUTOMATIC);
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	482c      	ldr	r0, [pc, #176]	; (8003b30 <main+0x170>)
 8003a7e:	f000 fef5 	bl	800486c <PID_SetMode>
  PID_SetSampleTime(&_PID, 1);
 8003a82:	2101      	movs	r1, #1
 8003a84:	482a      	ldr	r0, [pc, #168]	; (8003b30 <main+0x170>)
 8003a86:	f001 f865 	bl	8004b54 <PID_SetSampleTime>
  PID_SetOutputLimits(&_PID, -255, 255);
 8003a8a:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8003b08 <main+0x148>
 8003a8e:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8003b10 <main+0x150>
 8003a92:	4827      	ldr	r0, [pc, #156]	; (8003b30 <main+0x170>)
 8003a94:	f000 ff08 	bl	80048a8 <PID_SetOutputLimits>

  resetPosition(0);
 8003a98:	2000      	movs	r0, #0
 8003a9a:	f7fe ffc9 	bl	8002a30 <resetPosition>
  resetCumulativePosition(0);
 8003a9e:	2000      	movs	r0, #0
 8003aa0:	f7fe ffda 	bl	8002a58 <resetCumulativePosition>
  TIM1->CCR2 = 0;
 8003aa4:	4b23      	ldr	r3, [pc, #140]	; (8003b34 <main+0x174>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 0;
 8003aaa:	4b22      	ldr	r3, [pc, #136]	; (8003b34 <main+0x174>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003ab0:	2108      	movs	r1, #8
 8003ab2:	4821      	ldr	r0, [pc, #132]	; (8003b38 <main+0x178>)
 8003ab4:	f008 fc94 	bl	800c3e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003ab8:	2104      	movs	r1, #4
 8003aba:	481f      	ldr	r0, [pc, #124]	; (8003b38 <main+0x178>)
 8003abc:	f008 fc90 	bl	800c3e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	481e      	ldr	r0, [pc, #120]	; (8003b3c <main+0x17c>)
 8003ac4:	f008 fc8c 	bl	800c3e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003ac8:	2108      	movs	r1, #8
 8003aca:	481c      	ldr	r0, [pc, #112]	; (8003b3c <main+0x17c>)
 8003acc:	f008 fc88 	bl	800c3e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	481b      	ldr	r0, [pc, #108]	; (8003b40 <main+0x180>)
 8003ad4:	f008 fc84 	bl	800c3e0 <HAL_TIM_PWM_Start>

  kominit();
 8003ad8:	f7ff fd20 	bl	800351c <kominit>
  gpsinit();
 8003adc:	f7fe fefc 	bl	80028d8 <gpsinit>
  adcinit();
 8003ae0:	f002 f822 	bl	8005b28 <adcinit>

  HAL_TIM_Base_Start_IT(&htim10);
 8003ae4:	4817      	ldr	r0, [pc, #92]	; (8003b44 <main+0x184>)
 8003ae6:	f008 fbbb 	bl	800c260 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8003aea:	4817      	ldr	r0, [pc, #92]	; (8003b48 <main+0x188>)
 8003aec:	f008 fbb8 	bl	800c260 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8003af0:	4816      	ldr	r0, [pc, #88]	; (8003b4c <main+0x18c>)
 8003af2:	f008 fbb5 	bl	800c260 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003af6:	e7fe      	b.n	8003af6 <main+0x136>
	...
 8003b04:	40260000 	.word	0x40260000
 8003b08:	00000000 	.word	0x00000000
 8003b0c:	406fe000 	.word	0x406fe000
 8003b10:	00000000 	.word	0x00000000
 8003b14:	c06fe000 	.word	0xc06fe000
 8003b18:	08017894 	.word	0x08017894
 8003b1c:	08017898 	.word	0x08017898
 8003b20:	40021000 	.word	0x40021000
 8003b24:	20000ea0 	.word	0x20000ea0
 8003b28:	20000e98 	.word	0x20000e98
 8003b2c:	20000eb0 	.word	0x20000eb0
 8003b30:	20000e10 	.word	0x20000e10
 8003b34:	40010000 	.word	0x40010000
 8003b38:	20000a2c 	.word	0x20000a2c
 8003b3c:	20000a74 	.word	0x20000a74
 8003b40:	20000abc 	.word	0x20000abc
 8003b44:	20000b4c 	.word	0x20000b4c
 8003b48:	20000b94 	.word	0x20000b94
 8003b4c:	20000bdc 	.word	0x20000bdc

08003b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b094      	sub	sp, #80	; 0x50
 8003b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b56:	f107 0320 	add.w	r3, r7, #32
 8003b5a:	2230      	movs	r2, #48	; 0x30
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f010 f8f0 	bl	8013d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b64:	f107 030c 	add.w	r3, r7, #12
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b74:	2300      	movs	r3, #0
 8003b76:	60bb      	str	r3, [r7, #8]
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <SystemClock_Config+0xd0>)
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7c:	4a28      	ldr	r2, [pc, #160]	; (8003c20 <SystemClock_Config+0xd0>)
 8003b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b82:	6413      	str	r3, [r2, #64]	; 0x40
 8003b84:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <SystemClock_Config+0xd0>)
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b90:	2300      	movs	r3, #0
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <SystemClock_Config+0xd4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a22      	ldr	r2, [pc, #136]	; (8003c24 <SystemClock_Config+0xd4>)
 8003b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b9e:	6013      	str	r3, [r2, #0]
 8003ba0:	4b20      	ldr	r3, [pc, #128]	; (8003c24 <SystemClock_Config+0xd4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba8:	607b      	str	r3, [r7, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003bac:	2305      	movs	r3, #5
 8003bae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003bbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003bc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003bc8:	23a8      	movs	r3, #168	; 0xa8
 8003bca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003bcc:	2302      	movs	r3, #2
 8003bce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003bd0:	2307      	movs	r3, #7
 8003bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003bd4:	f107 0320 	add.w	r3, r7, #32
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f006 fabf 	bl	800a15c <HAL_RCC_OscConfig>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003be4:	f000 fcca 	bl	800457c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003be8:	230f      	movs	r3, #15
 8003bea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003bec:	2302      	movs	r3, #2
 8003bee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003bf4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003bf8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003bfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003c00:	f107 030c 	add.w	r3, r7, #12
 8003c04:	2105      	movs	r1, #5
 8003c06:	4618      	mov	r0, r3
 8003c08:	f006 fd20 	bl	800a64c <HAL_RCC_ClockConfig>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003c12:	f000 fcb3 	bl	800457c <Error_Handler>
  }
}
 8003c16:	bf00      	nop
 8003c18:	3750      	adds	r7, #80	; 0x50
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000

08003c28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b084      	sub	sp, #16
 8003c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003c2e:	463b      	mov	r3, r7
 8003c30:	2200      	movs	r2, #0
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	605a      	str	r2, [r3, #4]
 8003c36:	609a      	str	r2, [r3, #8]
 8003c38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003c3a:	4b21      	ldr	r3, [pc, #132]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c3c:	4a21      	ldr	r2, [pc, #132]	; (8003cc4 <MX_ADC1_Init+0x9c>)
 8003c3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c40:	4b1f      	ldr	r3, [pc, #124]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c48:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003c4e:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c56:	2201      	movs	r2, #1
 8003c58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c5a:	4b19      	ldr	r3, [pc, #100]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c62:	4b17      	ldr	r3, [pc, #92]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c68:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c6a:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <MX_ADC1_Init+0xa0>)
 8003c6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c6e:	4b14      	ldr	r3, [pc, #80]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003c74:	4b12      	ldr	r3, [pc, #72]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c76:	2201      	movs	r2, #1
 8003c78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c7a:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003c82:	4b0f      	ldr	r3, [pc, #60]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c84:	2201      	movs	r2, #1
 8003c86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003c88:	480d      	ldr	r0, [pc, #52]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003c8a:	f003 f955 	bl	8006f38 <HAL_ADC_Init>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8003c94:	f000 fc72 	bl	800457c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8003c98:	230a      	movs	r3, #10
 8003c9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8003ca0:	2307      	movs	r3, #7
 8003ca2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	4805      	ldr	r0, [pc, #20]	; (8003cc0 <MX_ADC1_Init+0x98>)
 8003caa:	f003 fc4b 	bl	8007544 <HAL_ADC_ConfigChannel>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8003cb4:	f000 fc62 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003cb8:	bf00      	nop
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	20000838 	.word	0x20000838
 8003cc4:	40012000 	.word	0x40012000
 8003cc8:	0f000001 	.word	0x0f000001

08003ccc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003cd0:	4b12      	ldr	r3, [pc, #72]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003cd2:	4a13      	ldr	r2, [pc, #76]	; (8003d20 <MX_I2C2_Init+0x54>)
 8003cd4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003cd8:	4a12      	ldr	r2, [pc, #72]	; (8003d24 <MX_I2C2_Init+0x58>)
 8003cda:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003ce2:	4b0e      	ldr	r3, [pc, #56]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ce8:	4b0c      	ldr	r3, [pc, #48]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003cea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003cf0:	4b0a      	ldr	r3, [pc, #40]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003cf6:	4b09      	ldr	r3, [pc, #36]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d02:	4b06      	ldr	r3, [pc, #24]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003d08:	4804      	ldr	r0, [pc, #16]	; (8003d1c <MX_I2C2_Init+0x50>)
 8003d0a:	f004 fd9f 	bl	800884c <HAL_I2C_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003d14:	f000 fc32 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	200008e0 	.word	0x200008e0
 8003d20:	40005800 	.word	0x40005800
 8003d24:	000186a0 	.word	0x000186a0

08003d28 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003d2c:	4b12      	ldr	r3, [pc, #72]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d2e:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <MX_I2C3_Init+0x54>)
 8003d30:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003d32:	4b11      	ldr	r3, [pc, #68]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d34:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <MX_I2C3_Init+0x58>)
 8003d36:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d4a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d4c:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003d52:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d54:	2200      	movs	r2, #0
 8003d56:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d58:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d5e:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003d64:	4804      	ldr	r0, [pc, #16]	; (8003d78 <MX_I2C3_Init+0x50>)
 8003d66:	f004 fd71 	bl	800884c <HAL_I2C_Init>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003d70:	f000 fc04 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003d74:	bf00      	nop
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	20000934 	.word	0x20000934
 8003d7c:	40005c00 	.word	0x40005c00
 8003d80:	00061a80 	.word	0x00061a80

08003d84 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003d8a:	1d3b      	adds	r3, r7, #4
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]
 8003d90:	605a      	str	r2, [r3, #4]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	60da      	str	r2, [r3, #12]
 8003d96:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003d98:	2300      	movs	r3, #0
 8003d9a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003d9c:	4b24      	ldr	r3, [pc, #144]	; (8003e30 <MX_RTC_Init+0xac>)
 8003d9e:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <MX_RTC_Init+0xb0>)
 8003da0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <MX_RTC_Init+0xac>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003da8:	4b21      	ldr	r3, [pc, #132]	; (8003e30 <MX_RTC_Init+0xac>)
 8003daa:	227f      	movs	r2, #127	; 0x7f
 8003dac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003dae:	4b20      	ldr	r3, [pc, #128]	; (8003e30 <MX_RTC_Init+0xac>)
 8003db0:	22ff      	movs	r2, #255	; 0xff
 8003db2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003db4:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <MX_RTC_Init+0xac>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003dba:	4b1d      	ldr	r3, [pc, #116]	; (8003e30 <MX_RTC_Init+0xac>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003dc0:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <MX_RTC_Init+0xac>)
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003dc6:	481a      	ldr	r0, [pc, #104]	; (8003e30 <MX_RTC_Init+0xac>)
 8003dc8:	f006 ff42 	bl	800ac50 <HAL_RTC_Init>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d001      	beq.n	8003dd6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003dd2:	f000 fbd3 	bl	800457c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003dde:	2300      	movs	r3, #0
 8003de0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003dea:	1d3b      	adds	r3, r7, #4
 8003dec:	2201      	movs	r2, #1
 8003dee:	4619      	mov	r1, r3
 8003df0:	480f      	ldr	r0, [pc, #60]	; (8003e30 <MX_RTC_Init+0xac>)
 8003df2:	f006 ffa3 	bl	800ad3c <HAL_RTC_SetTime>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8003dfc:	f000 fbbe 	bl	800457c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003e00:	2301      	movs	r3, #1
 8003e02:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8003e04:	2301      	movs	r3, #1
 8003e06:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003e10:	463b      	mov	r3, r7
 8003e12:	2201      	movs	r2, #1
 8003e14:	4619      	mov	r1, r3
 8003e16:	4806      	ldr	r0, [pc, #24]	; (8003e30 <MX_RTC_Init+0xac>)
 8003e18:	f007 f888 	bl	800af2c <HAL_RTC_SetDate>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003e22:	f000 fbab 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	20000988 	.word	0x20000988
 8003e34:	40002800 	.word	0x40002800

08003e38 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <MX_SDIO_SD_Init+0x38>)
 8003e3e:	4a0d      	ldr	r2, [pc, #52]	; (8003e74 <MX_SDIO_SD_Init+0x3c>)
 8003e40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003e42:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <MX_SDIO_SD_Init+0x38>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <MX_SDIO_SD_Init+0x38>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003e4e:	4b08      	ldr	r3, [pc, #32]	; (8003e70 <MX_SDIO_SD_Init+0x38>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <MX_SDIO_SD_Init+0x38>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003e5a:	4b05      	ldr	r3, [pc, #20]	; (8003e70 <MX_SDIO_SD_Init+0x38>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 8003e60:	4b03      	ldr	r3, [pc, #12]	; (8003e70 <MX_SDIO_SD_Init+0x38>)
 8003e62:	220c      	movs	r2, #12
 8003e64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003e66:	bf00      	nop
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	200009a8 	.word	0x200009a8
 8003e74:	40012c00 	.word	0x40012c00

08003e78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b096      	sub	sp, #88	; 0x58
 8003e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003e7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	605a      	str	r2, [r3, #4]
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]
 8003e94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	605a      	str	r2, [r3, #4]
 8003ea0:	609a      	str	r2, [r3, #8]
 8003ea2:	60da      	str	r2, [r3, #12]
 8003ea4:	611a      	str	r2, [r3, #16]
 8003ea6:	615a      	str	r2, [r3, #20]
 8003ea8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	2220      	movs	r2, #32
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f00f ff47 	bl	8013d44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003eb6:	4b44      	ldr	r3, [pc, #272]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003eb8:	4a44      	ldr	r2, [pc, #272]	; (8003fcc <MX_TIM1_Init+0x154>)
 8003eba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6588;
 8003ebc:	4b42      	ldr	r3, [pc, #264]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003ebe:	f641 12bc 	movw	r2, #6588	; 0x19bc
 8003ec2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ec4:	4b40      	ldr	r3, [pc, #256]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 8003eca:	4b3f      	ldr	r3, [pc, #252]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003ecc:	22ff      	movs	r2, #255	; 0xff
 8003ece:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ed0:	4b3d      	ldr	r3, [pc, #244]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ed6:	4b3c      	ldr	r3, [pc, #240]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003edc:	4b3a      	ldr	r3, [pc, #232]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003ee2:	4839      	ldr	r0, [pc, #228]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003ee4:	f008 f96c 	bl	800c1c0 <HAL_TIM_Base_Init>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003eee:	f000 fb45 	bl	800457c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003ef8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003efc:	4619      	mov	r1, r3
 8003efe:	4832      	ldr	r0, [pc, #200]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003f00:	f008 fd00 	bl	800c904 <HAL_TIM_ConfigClockSource>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8003f0a:	f000 fb37 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003f0e:	482e      	ldr	r0, [pc, #184]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003f10:	f008 fa16 	bl	800c340 <HAL_TIM_PWM_Init>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8003f1a:	f000 fb2f 	bl	800457c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f22:	2300      	movs	r3, #0
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003f26:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	4826      	ldr	r0, [pc, #152]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003f2e:	f009 f8e9 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 8003f32:	4603      	mov	r3, r0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8003f38:	f000 fb20 	bl	800457c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003f3c:	2360      	movs	r3, #96	; 0x60
 8003f3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8003f40:	2300      	movs	r3, #0
 8003f42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003f44:	2300      	movs	r3, #0
 8003f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003f50:	2300      	movs	r3, #0
 8003f52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003f54:	2300      	movs	r3, #0
 8003f56:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f5c:	2204      	movs	r2, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	4819      	ldr	r0, [pc, #100]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003f62:	f008 fc0d 	bl	800c780 <HAL_TIM_PWM_ConfigChannel>
 8003f66:	4603      	mov	r3, r0
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8003f6c:	f000 fb06 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f74:	2208      	movs	r2, #8
 8003f76:	4619      	mov	r1, r3
 8003f78:	4813      	ldr	r0, [pc, #76]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003f7a:	f008 fc01 	bl	800c780 <HAL_TIM_PWM_ConfigChannel>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d001      	beq.n	8003f88 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8003f84:	f000 fafa 	bl	800457c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003f94:	2300      	movs	r3, #0
 8003f96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003f9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003fa6:	1d3b      	adds	r3, r7, #4
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4807      	ldr	r0, [pc, #28]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003fac:	f009 f926 	bl	800d1fc <HAL_TIMEx_ConfigBreakDeadTime>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d001      	beq.n	8003fba <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8003fb6:	f000 fae1 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003fba:	4803      	ldr	r0, [pc, #12]	; (8003fc8 <MX_TIM1_Init+0x150>)
 8003fbc:	f001 f936 	bl	800522c <HAL_TIM_MspPostInit>

}
 8003fc0:	bf00      	nop
 8003fc2:	3758      	adds	r7, #88	; 0x58
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	20000a2c 	.word	0x20000a2c
 8003fcc:	40010000 	.word	0x40010000

08003fd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08e      	sub	sp, #56	; 0x38
 8003fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003fd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
 8003fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fe4:	f107 0320 	add.w	r3, r7, #32
 8003fe8:	2200      	movs	r2, #0
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fee:	1d3b      	adds	r3, r7, #4
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	611a      	str	r2, [r3, #16]
 8003ffc:	615a      	str	r2, [r3, #20]
 8003ffe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004000:	4b32      	ldr	r3, [pc, #200]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004002:	4a33      	ldr	r2, [pc, #204]	; (80040d0 <MX_TIM3_Init+0x100>)
 8004004:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8004006:	4b31      	ldr	r3, [pc, #196]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004008:	2253      	movs	r2, #83	; 0x53
 800400a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <MX_TIM3_Init+0xfc>)
 800400e:	2200      	movs	r2, #0
 8004010:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8004012:	4b2e      	ldr	r3, [pc, #184]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004014:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8004018:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800401a:	4b2c      	ldr	r3, [pc, #176]	; (80040cc <MX_TIM3_Init+0xfc>)
 800401c:	2200      	movs	r2, #0
 800401e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004020:	4b2a      	ldr	r3, [pc, #168]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004022:	2200      	movs	r2, #0
 8004024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004026:	4829      	ldr	r0, [pc, #164]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004028:	f008 f8ca 	bl	800c1c0 <HAL_TIM_Base_Init>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8004032:	f000 faa3 	bl	800457c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004036:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800403c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004040:	4619      	mov	r1, r3
 8004042:	4822      	ldr	r0, [pc, #136]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004044:	f008 fc5e 	bl	800c904 <HAL_TIM_ConfigClockSource>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800404e:	f000 fa95 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8004052:	481e      	ldr	r0, [pc, #120]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004054:	f008 f974 	bl	800c340 <HAL_TIM_PWM_Init>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800405e:	f000 fa8d 	bl	800457c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004062:	2300      	movs	r3, #0
 8004064:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004066:	2300      	movs	r3, #0
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800406a:	f107 0320 	add.w	r3, r7, #32
 800406e:	4619      	mov	r1, r3
 8004070:	4816      	ldr	r0, [pc, #88]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004072:	f009 f847 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800407c:	f000 fa7e 	bl	800457c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004080:	2360      	movs	r3, #96	; 0x60
 8004082:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004088:	2300      	movs	r3, #0
 800408a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800408c:	2300      	movs	r3, #0
 800408e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004090:	1d3b      	adds	r3, r7, #4
 8004092:	2200      	movs	r2, #0
 8004094:	4619      	mov	r1, r3
 8004096:	480d      	ldr	r0, [pc, #52]	; (80040cc <MX_TIM3_Init+0xfc>)
 8004098:	f008 fb72 	bl	800c780 <HAL_TIM_PWM_ConfigChannel>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80040a2:	f000 fa6b 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80040a6:	1d3b      	adds	r3, r7, #4
 80040a8:	2208      	movs	r2, #8
 80040aa:	4619      	mov	r1, r3
 80040ac:	4807      	ldr	r0, [pc, #28]	; (80040cc <MX_TIM3_Init+0xfc>)
 80040ae:	f008 fb67 	bl	800c780 <HAL_TIM_PWM_ConfigChannel>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80040b8:	f000 fa60 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80040bc:	4803      	ldr	r0, [pc, #12]	; (80040cc <MX_TIM3_Init+0xfc>)
 80040be:	f001 f8b5 	bl	800522c <HAL_TIM_MspPostInit>

}
 80040c2:	bf00      	nop
 80040c4:	3738      	adds	r7, #56	; 0x38
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	20000a74 	.word	0x20000a74
 80040d0:	40000400 	.word	0x40000400

080040d4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040da:	f107 0320 	add.w	r3, r7, #32
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80040e4:	1d3b      	adds	r3, r7, #4
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	611a      	str	r2, [r3, #16]
 80040f2:	615a      	str	r2, [r3, #20]
 80040f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80040f6:	4b27      	ldr	r3, [pc, #156]	; (8004194 <MX_TIM4_Init+0xc0>)
 80040f8:	4a27      	ldr	r2, [pc, #156]	; (8004198 <MX_TIM4_Init+0xc4>)
 80040fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <MX_TIM4_Init+0xc0>)
 80040fe:	2253      	movs	r2, #83	; 0x53
 8004100:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004102:	4b24      	ldr	r3, [pc, #144]	; (8004194 <MX_TIM4_Init+0xc0>)
 8004104:	2200      	movs	r2, #0
 8004106:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8004108:	4b22      	ldr	r3, [pc, #136]	; (8004194 <MX_TIM4_Init+0xc0>)
 800410a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800410e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <MX_TIM4_Init+0xc0>)
 8004112:	2200      	movs	r2, #0
 8004114:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <MX_TIM4_Init+0xc0>)
 8004118:	2200      	movs	r2, #0
 800411a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800411c:	481d      	ldr	r0, [pc, #116]	; (8004194 <MX_TIM4_Init+0xc0>)
 800411e:	f008 f90f 	bl	800c340 <HAL_TIM_PWM_Init>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8004128:	f000 fa28 	bl	800457c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800412c:	2300      	movs	r3, #0
 800412e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004130:	2300      	movs	r3, #0
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004134:	f107 0320 	add.w	r3, r7, #32
 8004138:	4619      	mov	r1, r3
 800413a:	4816      	ldr	r0, [pc, #88]	; (8004194 <MX_TIM4_Init+0xc0>)
 800413c:	f008 ffe2 	bl	800d104 <HAL_TIMEx_MasterConfigSynchronization>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8004146:	f000 fa19 	bl	800457c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800414a:	2360      	movs	r3, #96	; 0x60
 800414c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800414e:	2300      	movs	r3, #0
 8004150:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004152:	2300      	movs	r3, #0
 8004154:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800415a:	1d3b      	adds	r3, r7, #4
 800415c:	2200      	movs	r2, #0
 800415e:	4619      	mov	r1, r3
 8004160:	480c      	ldr	r0, [pc, #48]	; (8004194 <MX_TIM4_Init+0xc0>)
 8004162:	f008 fb0d 	bl	800c780 <HAL_TIM_PWM_ConfigChannel>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800416c:	f000 fa06 	bl	800457c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004170:	1d3b      	adds	r3, r7, #4
 8004172:	2208      	movs	r2, #8
 8004174:	4619      	mov	r1, r3
 8004176:	4807      	ldr	r0, [pc, #28]	; (8004194 <MX_TIM4_Init+0xc0>)
 8004178:	f008 fb02 	bl	800c780 <HAL_TIM_PWM_ConfigChannel>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8004182:	f000 f9fb 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8004186:	4803      	ldr	r0, [pc, #12]	; (8004194 <MX_TIM4_Init+0xc0>)
 8004188:	f001 f850 	bl	800522c <HAL_TIM_MspPostInit>

}
 800418c:	bf00      	nop
 800418e:	3728      	adds	r7, #40	; 0x28
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000abc 	.word	0x20000abc
 8004198:	40000800 	.word	0x40000800

0800419c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b084      	sub	sp, #16
 80041a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80041a2:	463b      	mov	r3, r7
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	605a      	str	r2, [r3, #4]
 80041aa:	609a      	str	r2, [r3, #8]
 80041ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80041ae:	4b16      	ldr	r3, [pc, #88]	; (8004208 <MX_TIM9_Init+0x6c>)
 80041b0:	4a16      	ldr	r2, [pc, #88]	; (800420c <MX_TIM9_Init+0x70>)
 80041b2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <MX_TIM9_Init+0x6c>)
 80041b6:	22a7      	movs	r2, #167	; 0xa7
 80041b8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80041ba:	4b13      	ldr	r3, [pc, #76]	; (8004208 <MX_TIM9_Init+0x6c>)
 80041bc:	2200      	movs	r2, #0
 80041be:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 80041c0:	4b11      	ldr	r3, [pc, #68]	; (8004208 <MX_TIM9_Init+0x6c>)
 80041c2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80041c6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80041c8:	4b0f      	ldr	r3, [pc, #60]	; (8004208 <MX_TIM9_Init+0x6c>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80041ce:	4b0e      	ldr	r3, [pc, #56]	; (8004208 <MX_TIM9_Init+0x6c>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80041d4:	480c      	ldr	r0, [pc, #48]	; (8004208 <MX_TIM9_Init+0x6c>)
 80041d6:	f007 fff3 	bl	800c1c0 <HAL_TIM_Base_Init>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80041e0:	f000 f9cc 	bl	800457c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80041e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80041e8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80041ea:	463b      	mov	r3, r7
 80041ec:	4619      	mov	r1, r3
 80041ee:	4806      	ldr	r0, [pc, #24]	; (8004208 <MX_TIM9_Init+0x6c>)
 80041f0:	f008 fb88 	bl	800c904 <HAL_TIM_ConfigClockSource>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80041fa:	f000 f9bf 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000b04 	.word	0x20000b04
 800420c:	40014000 	.word	0x40014000

08004210 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <MX_TIM10_Init+0x40>)
 8004216:	4a0f      	ldr	r2, [pc, #60]	; (8004254 <MX_TIM10_Init+0x44>)
 8004218:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16800-1;
 800421a:	4b0d      	ldr	r3, [pc, #52]	; (8004250 <MX_TIM10_Init+0x40>)
 800421c:	f244 129f 	movw	r2, #16799	; 0x419f
 8004220:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004222:	4b0b      	ldr	r3, [pc, #44]	; (8004250 <MX_TIM10_Init+0x40>)
 8004224:	2200      	movs	r2, #0
 8004226:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8004228:	4b09      	ldr	r3, [pc, #36]	; (8004250 <MX_TIM10_Init+0x40>)
 800422a:	f242 720f 	movw	r2, #9999	; 0x270f
 800422e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <MX_TIM10_Init+0x40>)
 8004232:	2200      	movs	r2, #0
 8004234:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004236:	4b06      	ldr	r3, [pc, #24]	; (8004250 <MX_TIM10_Init+0x40>)
 8004238:	2200      	movs	r2, #0
 800423a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800423c:	4804      	ldr	r0, [pc, #16]	; (8004250 <MX_TIM10_Init+0x40>)
 800423e:	f007 ffbf 	bl	800c1c0 <HAL_TIM_Base_Init>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8004248:	f000 f998 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800424c:	bf00      	nop
 800424e:	bd80      	pop	{r7, pc}
 8004250:	20000b4c 	.word	0x20000b4c
 8004254:	40014400 	.word	0x40014400

08004258 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800425c:	4b0e      	ldr	r3, [pc, #56]	; (8004298 <MX_TIM11_Init+0x40>)
 800425e:	4a0f      	ldr	r2, [pc, #60]	; (800429c <MX_TIM11_Init+0x44>)
 8004260:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 16800-1;
 8004262:	4b0d      	ldr	r3, [pc, #52]	; (8004298 <MX_TIM11_Init+0x40>)
 8004264:	f244 129f 	movw	r2, #16799	; 0x419f
 8004268:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800426a:	4b0b      	ldr	r3, [pc, #44]	; (8004298 <MX_TIM11_Init+0x40>)
 800426c:	2200      	movs	r2, #0
 800426e:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2500-1;
 8004270:	4b09      	ldr	r3, [pc, #36]	; (8004298 <MX_TIM11_Init+0x40>)
 8004272:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8004276:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004278:	4b07      	ldr	r3, [pc, #28]	; (8004298 <MX_TIM11_Init+0x40>)
 800427a:	2200      	movs	r2, #0
 800427c:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800427e:	4b06      	ldr	r3, [pc, #24]	; (8004298 <MX_TIM11_Init+0x40>)
 8004280:	2200      	movs	r2, #0
 8004282:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004284:	4804      	ldr	r0, [pc, #16]	; (8004298 <MX_TIM11_Init+0x40>)
 8004286:	f007 ff9b 	bl	800c1c0 <HAL_TIM_Base_Init>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d001      	beq.n	8004294 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8004290:	f000 f974 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8004294:	bf00      	nop
 8004296:	bd80      	pop	{r7, pc}
 8004298:	20000b94 	.word	0x20000b94
 800429c:	40014800 	.word	0x40014800

080042a0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <MX_TIM13_Init+0x40>)
 80042a6:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <MX_TIM13_Init+0x44>)
 80042a8:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 8400-1;
 80042aa:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <MX_TIM13_Init+0x40>)
 80042ac:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80042b0:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042b2:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <MX_TIM13_Init+0x40>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 30-1;
 80042b8:	4b09      	ldr	r3, [pc, #36]	; (80042e0 <MX_TIM13_Init+0x40>)
 80042ba:	221d      	movs	r2, #29
 80042bc:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <MX_TIM13_Init+0x40>)
 80042c0:	2200      	movs	r2, #0
 80042c2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80042c4:	4b06      	ldr	r3, [pc, #24]	; (80042e0 <MX_TIM13_Init+0x40>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80042ca:	4805      	ldr	r0, [pc, #20]	; (80042e0 <MX_TIM13_Init+0x40>)
 80042cc:	f007 ff78 	bl	800c1c0 <HAL_TIM_Base_Init>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80042d6:	f000 f951 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	20000bdc 	.word	0x20000bdc
 80042e4:	40001c00 	.word	0x40001c00

080042e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80042ec:	4b11      	ldr	r3, [pc, #68]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 80042ee:	4a12      	ldr	r2, [pc, #72]	; (8004338 <MX_USART2_UART_Init+0x50>)
 80042f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80042f2:	4b10      	ldr	r3, [pc, #64]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 80042f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80042f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80042fa:	4b0e      	ldr	r3, [pc, #56]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 8004302:	2200      	movs	r2, #0
 8004304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 800430e:	220c      	movs	r2, #12
 8004310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 8004314:	2200      	movs	r2, #0
 8004316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 800431a:	2200      	movs	r2, #0
 800431c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800431e:	4805      	ldr	r0, [pc, #20]	; (8004334 <MX_USART2_UART_Init+0x4c>)
 8004320:	f008 ffd2 	bl	800d2c8 <HAL_UART_Init>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800432a:	f000 f927 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20000c24 	.word	0x20000c24
 8004338:	40004400 	.word	0x40004400

0800433c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004340:	4b11      	ldr	r3, [pc, #68]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 8004342:	4a12      	ldr	r2, [pc, #72]	; (800438c <MX_USART3_UART_Init+0x50>)
 8004344:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 8004346:	4b10      	ldr	r3, [pc, #64]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 8004348:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800434c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800434e:	4b0e      	ldr	r3, [pc, #56]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 8004350:	2200      	movs	r2, #0
 8004352:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004354:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 8004356:	2200      	movs	r2, #0
 8004358:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 800435c:	2200      	movs	r2, #0
 800435e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004360:	4b09      	ldr	r3, [pc, #36]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 8004362:	220c      	movs	r2, #12
 8004364:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 8004368:	2200      	movs	r2, #0
 800436a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800436c:	4b06      	ldr	r3, [pc, #24]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 800436e:	2200      	movs	r2, #0
 8004370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004372:	4805      	ldr	r0, [pc, #20]	; (8004388 <MX_USART3_UART_Init+0x4c>)
 8004374:	f008 ffa8 	bl	800d2c8 <HAL_UART_Init>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800437e:	f000 f8fd 	bl	800457c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004382:	bf00      	nop
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	20000c68 	.word	0x20000c68
 800438c:	40004800 	.word	0x40004800

08004390 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004396:	2300      	movs	r3, #0
 8004398:	607b      	str	r3, [r7, #4]
 800439a:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <MX_DMA_Init+0x88>)
 800439c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439e:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <MX_DMA_Init+0x88>)
 80043a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80043a4:	6313      	str	r3, [r2, #48]	; 0x30
 80043a6:	4b1c      	ldr	r3, [pc, #112]	; (8004418 <MX_DMA_Init+0x88>)
 80043a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	603b      	str	r3, [r7, #0]
 80043b6:	4b18      	ldr	r3, [pc, #96]	; (8004418 <MX_DMA_Init+0x88>)
 80043b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <MX_DMA_Init+0x88>)
 80043bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043c0:	6313      	str	r3, [r2, #48]	; 0x30
 80043c2:	4b15      	ldr	r3, [pc, #84]	; (8004418 <MX_DMA_Init+0x88>)
 80043c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80043ce:	2200      	movs	r2, #0
 80043d0:	2100      	movs	r1, #0
 80043d2:	200c      	movs	r0, #12
 80043d4:	f003 fc31 	bl	8007c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80043d8:	200c      	movs	r0, #12
 80043da:	f003 fc4a 	bl	8007c72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 1, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2101      	movs	r1, #1
 80043e2:	200e      	movs	r0, #14
 80043e4:	f003 fc29 	bl	8007c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80043e8:	200e      	movs	r0, #14
 80043ea:	f003 fc42 	bl	8007c72 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 2, 0);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2102      	movs	r1, #2
 80043f2:	2010      	movs	r0, #16
 80043f4:	f003 fc21 	bl	8007c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80043f8:	2010      	movs	r0, #16
 80043fa:	f003 fc3a 	bl	8007c72 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80043fe:	2200      	movs	r2, #0
 8004400:	2105      	movs	r1, #5
 8004402:	2038      	movs	r0, #56	; 0x38
 8004404:	f003 fc19 	bl	8007c3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004408:	2038      	movs	r0, #56	; 0x38
 800440a:	f003 fc32 	bl	8007c72 <HAL_NVIC_EnableIRQ>

}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40023800 	.word	0x40023800

0800441c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08c      	sub	sp, #48	; 0x30
 8004420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004422:	f107 031c 	add.w	r3, r7, #28
 8004426:	2200      	movs	r2, #0
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	605a      	str	r2, [r3, #4]
 800442c:	609a      	str	r2, [r3, #8]
 800442e:	60da      	str	r2, [r3, #12]
 8004430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004432:	2300      	movs	r3, #0
 8004434:	61bb      	str	r3, [r7, #24]
 8004436:	4b40      	ldr	r3, [pc, #256]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <MX_GPIO_Init+0x11c>)
 800443c:	f043 0304 	orr.w	r3, r3, #4
 8004440:	6313      	str	r3, [r2, #48]	; 0x30
 8004442:	4b3d      	ldr	r3, [pc, #244]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	4b39      	ldr	r3, [pc, #228]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004456:	4a38      	ldr	r2, [pc, #224]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004458:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800445c:	6313      	str	r3, [r2, #48]	; 0x30
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004462:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800446a:	2300      	movs	r3, #0
 800446c:	613b      	str	r3, [r7, #16]
 800446e:	4b32      	ldr	r3, [pc, #200]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4a31      	ldr	r2, [pc, #196]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	6313      	str	r3, [r2, #48]	; 0x30
 800447a:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <MX_GPIO_Init+0x11c>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004486:	2300      	movs	r3, #0
 8004488:	60fb      	str	r3, [r7, #12]
 800448a:	4b2b      	ldr	r3, [pc, #172]	; (8004538 <MX_GPIO_Init+0x11c>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004490:	f043 0302 	orr.w	r3, r3, #2
 8004494:	6313      	str	r3, [r2, #48]	; 0x30
 8004496:	4b28      	ldr	r3, [pc, #160]	; (8004538 <MX_GPIO_Init+0x11c>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	4b24      	ldr	r3, [pc, #144]	; (8004538 <MX_GPIO_Init+0x11c>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	4a23      	ldr	r2, [pc, #140]	; (8004538 <MX_GPIO_Init+0x11c>)
 80044ac:	f043 0310 	orr.w	r3, r3, #16
 80044b0:	6313      	str	r3, [r2, #48]	; 0x30
 80044b2:	4b21      	ldr	r3, [pc, #132]	; (8004538 <MX_GPIO_Init+0x11c>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f003 0310 	and.w	r3, r3, #16
 80044ba:	60bb      	str	r3, [r7, #8]
 80044bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80044be:	2300      	movs	r3, #0
 80044c0:	607b      	str	r3, [r7, #4]
 80044c2:	4b1d      	ldr	r3, [pc, #116]	; (8004538 <MX_GPIO_Init+0x11c>)
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	4a1c      	ldr	r2, [pc, #112]	; (8004538 <MX_GPIO_Init+0x11c>)
 80044c8:	f043 0308 	orr.w	r3, r3, #8
 80044cc:	6313      	str	r3, [r2, #48]	; 0x30
 80044ce:	4b1a      	ldr	r3, [pc, #104]	; (8004538 <MX_GPIO_Init+0x11c>)
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80044da:	2200      	movs	r2, #0
 80044dc:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80044e0:	4816      	ldr	r0, [pc, #88]	; (800453c <MX_GPIO_Init+0x120>)
 80044e2:	f004 f97f 	bl	80087e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|CAM1_Pin|CAM2_Pin, GPIO_PIN_RESET);
 80044e6:	2200      	movs	r2, #0
 80044e8:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 80044ec:	4814      	ldr	r0, [pc, #80]	; (8004540 <MX_GPIO_Init+0x124>)
 80044ee:	f004 f979 	bl	80087e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80044f2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80044f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80044f8:	2301      	movs	r3, #1
 80044fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fc:	2300      	movs	r3, #0
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004500:	2300      	movs	r3, #0
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004504:	f107 031c 	add.w	r3, r7, #28
 8004508:	4619      	mov	r1, r3
 800450a:	480c      	ldr	r0, [pc, #48]	; (800453c <MX_GPIO_Init+0x120>)
 800450c:	f003 ffce 	bl	80084ac <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin CAM1_Pin CAM2_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|CAM1_Pin|CAM2_Pin;
 8004510:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 8004514:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004516:	2301      	movs	r3, #1
 8004518:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800451e:	2300      	movs	r3, #0
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004522:	f107 031c 	add.w	r3, r7, #28
 8004526:	4619      	mov	r1, r3
 8004528:	4805      	ldr	r0, [pc, #20]	; (8004540 <MX_GPIO_Init+0x124>)
 800452a:	f003 ffbf 	bl	80084ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800452e:	bf00      	nop
 8004530:	3730      	adds	r7, #48	; 0x30
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800
 800453c:	40021000 	.word	0x40021000
 8004540:	40020400 	.word	0x40020400

08004544 <map>:

/* USER CODE BEGIN 4 */
int map(int value, int from_low, int from_high, int to_low, int to_high)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
    return ((value - from_low) * (to_high - to_low)) / (from_high - from_low) + to_low;
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	1ad3      	subs	r3, r2, r3
 8004558:	69b9      	ldr	r1, [r7, #24]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	1a8a      	subs	r2, r1, r2
 800455e:	fb03 f202 	mul.w	r2, r3, r2
 8004562:	6879      	ldr	r1, [r7, #4]
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	1acb      	subs	r3, r1, r3
 8004568:	fb92 f2f3 	sdiv	r2, r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	4413      	add	r3, r2
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457a:	4770      	bx	lr

0800457c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800457c:	b480      	push	{r7}
 800457e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004580:	b672      	cpsid	i
}
 8004582:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004584:	e7fe      	b.n	8004584 <Error_Handler+0x8>

08004586 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80045b6:	f7fc faaf 	bl	8000b18 <__aeabi_dcmpgt>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d006      	beq.n	80045ce <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 80045cc:	e011      	b.n	80045f2 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80045da:	f7fc fa7f 	bl	8000adc <__aeabi_dcmplt>
 80045de:	4603      	mov	r3, r0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d100      	bne.n	80045e6 <PID_Init+0x60>
}
 80045e4:	e005      	b.n	80045f2 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80045f2:	bf00      	nop
 80045f4:	3708      	adds	r7, #8
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	0000      	movs	r0, r0
 80045fc:	0000      	movs	r0, r0
	...

08004600 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6278      	str	r0, [r7, #36]	; 0x24
 8004608:	6239      	str	r1, [r7, #32]
 800460a:	61fa      	str	r2, [r7, #28]
 800460c:	61bb      	str	r3, [r7, #24]
 800460e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004612:	ed87 1b02 	vstr	d1, [r7, #8]
 8004616:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8004620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004622:	6a3a      	ldr	r2, [r7, #32]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	69ba      	ldr	r2, [r7, #24]
 800462a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	2200      	movs	r2, #0
 8004630:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8004632:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8004688 <PID+0x88>
 8004636:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004690 <PID+0x90>
 800463a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800463c:	f000 f934 	bl	80048a8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	2264      	movs	r2, #100	; 0x64
 8004644:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8004646:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800464a:	4619      	mov	r1, r3
 800464c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800464e:	f000 fa41 	bl	8004ad4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8004652:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004656:	4619      	mov	r1, r3
 8004658:	ed97 2b00 	vldr	d2, [r7]
 800465c:	ed97 1b02 	vldr	d1, [r7, #8]
 8004660:	ed97 0b04 	vldr	d0, [r7, #16]
 8004664:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004666:	f000 f98d 	bl	8004984 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 800466a:	f002 fc35 	bl	8006ed8 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	1ad2      	subs	r2, r2, r3
 8004676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004678:	605a      	str	r2, [r3, #4]
	
}
 800467a:	bf00      	nop
 800467c:	3728      	adds	r7, #40	; 0x28
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	f3af 8000 	nop.w
 8004688:	00000000 	.word	0x00000000
 800468c:	406fe000 	.word	0x406fe000
	...

08004698 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8004698:	b5b0      	push	{r4, r5, r7, lr}
 800469a:	b08c      	sub	sp, #48	; 0x30
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	785b      	ldrb	r3, [r3, #1]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <PID_Compute+0x14>
	{
		return _FALSE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e0db      	b.n	8004864 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80046ac:	f002 fc14 	bl	8006ed8 <HAL_GetTick>
 80046b0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	6a3a      	ldr	r2, [r7, #32]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	f0c0 80cd 	bcc.w	8004862 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80046dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046e0:	f7fb fdd2 	bl	8000288 <__aeabi_dsub>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80046f2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80046f6:	f7fb fdc7 	bl	8000288 <__aeabi_dsub>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800470e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004712:	f7fb ff71 	bl	80005f8 <__aeabi_dmul>
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	4620      	mov	r0, r4
 800471c:	4629      	mov	r1, r5
 800471e:	f7fb fdb5 	bl	800028c <__adddf3>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d114      	bne.n	800475e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004740:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004744:	f7fb ff58 	bl	80005f8 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4620      	mov	r0, r4
 800474e:	4629      	mov	r1, r5
 8004750:	f7fb fd9a 	bl	8000288 <__aeabi_dsub>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800476a:	f7fc f9d5 	bl	8000b18 <__aeabi_dcmpgt>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d006      	beq.n	8004782 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004780:	e010      	b.n	80047a4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800478e:	f7fc f9a5 	bl	8000adc <__aeabi_dcmplt>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d005      	beq.n	80047a4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800479e:	6879      	ldr	r1, [r7, #4]
 80047a0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00b      	beq.n	80047c4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80047b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80047b6:	f7fb ff1f 	bl	80005f8 <__aeabi_dmul>
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80047c2:	e005      	b.n	80047d0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80047c4:	f04f 0200 	mov.w	r2, #0
 80047c8:	f04f 0300 	mov.w	r3, #0
 80047cc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80047dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e0:	f7fb ff0a 	bl	80005f8 <__aeabi_dmul>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4620      	mov	r0, r4
 80047ea:	4629      	mov	r1, r5
 80047ec:	f7fb fd4c 	bl	8000288 <__aeabi_dsub>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80047f8:	f7fb fd48 	bl	800028c <__adddf3>
 80047fc:	4602      	mov	r2, r0
 80047fe:	460b      	mov	r3, r1
 8004800:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800480a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800480e:	f7fc f983 	bl	8000b18 <__aeabi_dcmpgt>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800481e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004822:	e00e      	b.n	8004842 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800482a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800482e:	f7fc f955 	bl	8000adc <__aeabi_dcmplt>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d004      	beq.n	8004842 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800483e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004846:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800484a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004854:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8004862:	2300      	movs	r3, #0
	}
	
}
 8004864:	4618      	mov	r0, r3
 8004866:	3730      	adds	r7, #48	; 0x30
 8004868:	46bd      	mov	sp, r7
 800486a:	bdb0      	pop	{r4, r5, r7, pc}

0800486c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	2b01      	cmp	r3, #1
 800487c:	bf0c      	ite	eq
 800487e:	2301      	moveq	r3, #1
 8004880:	2300      	movne	r3, #0
 8004882:	b2db      	uxtb	r3, r3
 8004884:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004886:	7bfb      	ldrb	r3, [r7, #15]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d006      	beq.n	800489a <PID_SetMode+0x2e>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	785b      	ldrb	r3, [r3, #1]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d102      	bne.n	800489a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fe76 	bl	8004586 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	7bfa      	ldrb	r2, [r7, #15]
 800489e:	705a      	strb	r2, [r3, #1]
	
}
 80048a0:	bf00      	nop
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6178      	str	r0, [r7, #20]
 80048b0:	ed87 0b02 	vstr	d0, [r7, #8]
 80048b4:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80048b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80048c0:	f7fc f920 	bl	8000b04 <__aeabi_dcmpge>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d158      	bne.n	800497c <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 80048ca:	6979      	ldr	r1, [r7, #20]
 80048cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80048d4:	6979      	ldr	r1, [r7, #20]
 80048d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048da:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	785b      	ldrb	r3, [r3, #1]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d04b      	beq.n	800497e <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80048f4:	f7fc f910 	bl	8000b18 <__aeabi_dcmpgt>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d007      	beq.n	800490e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004908:	e9c1 2300 	strd	r2, r3, [r1]
 800490c:	e012      	b.n	8004934 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800491c:	f7fc f8de 	bl	8000adc <__aeabi_dcmplt>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d006      	beq.n	8004934 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004930:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004940:	f7fc f8ea 	bl	8000b18 <__aeabi_dcmpgt>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004950:	6979      	ldr	r1, [r7, #20]
 8004952:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004956:	e012      	b.n	800497e <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004964:	f7fc f8ba 	bl	8000adc <__aeabi_dcmplt>
 8004968:	4603      	mov	r3, r0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d007      	beq.n	800497e <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004974:	6979      	ldr	r1, [r7, #20]
 8004976:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800497a:	e000      	b.n	800497e <PID_SetOutputLimits+0xd6>
		return;
 800497c:	bf00      	nop
		}
		else { }
		
	}
	
}
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af00      	add	r7, sp, #0
 800498a:	61f8      	str	r0, [r7, #28]
 800498c:	ed87 0b04 	vstr	d0, [r7, #16]
 8004990:	ed87 1b02 	vstr	d1, [r7, #8]
 8004994:	ed87 2b00 	vstr	d2, [r7]
 8004998:	460b      	mov	r3, r1
 800499a:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049a8:	f7fc f898 	bl	8000adc <__aeabi_dcmplt>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8089 	bne.w	8004ac6 <PID_SetTunings2+0x142>
 80049b4:	f04f 0200 	mov.w	r2, #0
 80049b8:	f04f 0300 	mov.w	r3, #0
 80049bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049c0:	f7fc f88c 	bl	8000adc <__aeabi_dcmplt>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d17d      	bne.n	8004ac6 <PID_SetTunings2+0x142>
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80049d6:	f7fc f881 	bl	8000adc <__aeabi_dcmplt>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d172      	bne.n	8004ac6 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	7efa      	ldrb	r2, [r7, #27]
 80049e4:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80049e6:	7efb      	ldrb	r3, [r7, #27]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	bf0c      	ite	eq
 80049ec:	2301      	moveq	r3, #1
 80049ee:	2300      	movne	r3, #0
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80049f8:	69f9      	ldr	r1, [r7, #28]
 80049fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80049fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8004a02:	69f9      	ldr	r1, [r7, #28]
 8004a04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a08:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8004a0c:	69f9      	ldr	r1, [r7, #28]
 8004a0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004a12:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fb fd72 	bl	8000504 <__aeabi_ui2d>
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <PID_SetTunings2+0x14c>)
 8004a26:	f7fb ff11 	bl	800084c <__aeabi_ddiv>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8004a32:	69f9      	ldr	r1, [r7, #28]
 8004a34:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a38:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8004a3c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004a44:	f7fb fdd8 	bl	80005f8 <__aeabi_dmul>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	69f9      	ldr	r1, [r7, #28]
 8004a4e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8004a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a56:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a5a:	f7fb fef7 	bl	800084c <__aeabi_ddiv>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	69f9      	ldr	r1, [r7, #28]
 8004a64:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	78db      	ldrb	r3, [r3, #3]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d12b      	bne.n	8004ac8 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8004a70:	69fb      	ldr	r3, [r7, #28]
 8004a72:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004a76:	f04f 0000 	mov.w	r0, #0
 8004a7a:	f04f 0100 	mov.w	r1, #0
 8004a7e:	f7fb fc03 	bl	8000288 <__aeabi_dsub>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	69f9      	ldr	r1, [r7, #28]
 8004a88:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f04f 0100 	mov.w	r1, #0
 8004a9a:	f7fb fbf5 	bl	8000288 <__aeabi_dsub>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	69f9      	ldr	r1, [r7, #28]
 8004aa4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004aae:	f04f 0000 	mov.w	r0, #0
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	f7fb fbe7 	bl	8000288 <__aeabi_dsub>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	69f9      	ldr	r1, [r7, #28]
 8004ac0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004ac4:	e000      	b.n	8004ac8 <PID_SetTunings2+0x144>
		return;
 8004ac6:	bf00      	nop
		
	}
	
}
 8004ac8:	3728      	adds	r7, #40	; 0x28
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	408f4000 	.word	0x408f4000

08004ad4 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	785b      	ldrb	r3, [r3, #1]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d02e      	beq.n	8004b46 <PID_SetControllerDirection+0x72>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	78db      	ldrb	r3, [r3, #3]
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d029      	beq.n	8004b46 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004af8:	f04f 0000 	mov.w	r0, #0
 8004afc:	f04f 0100 	mov.w	r1, #0
 8004b00:	f7fb fbc2 	bl	8000288 <__aeabi_dsub>
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004b14:	f04f 0000 	mov.w	r0, #0
 8004b18:	f04f 0100 	mov.w	r1, #0
 8004b1c:	f7fb fbb4 	bl	8000288 <__aeabi_dsub>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004b30:	f04f 0000 	mov.w	r0, #0
 8004b34:	f04f 0100 	mov.w	r1, #0
 8004b38:	f7fb fba6 	bl	8000288 <__aeabi_dsub>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	78fa      	ldrb	r2, [r7, #3]
 8004b4a:	70da      	strb	r2, [r3, #3]
	
}
 8004b4c:	bf00      	nop
 8004b4e:	3708      	adds	r7, #8
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}

08004b54 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8004b54:	b5b0      	push	{r4, r5, r7, lr}
 8004b56:	b084      	sub	sp, #16
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	dd2e      	ble.n	8004bc2 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8004b64:	6838      	ldr	r0, [r7, #0]
 8004b66:	f7fb fcdd 	bl	8000524 <__aeabi_i2d>
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	460d      	mov	r5, r1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fb fcc6 	bl	8000504 <__aeabi_ui2d>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	4620      	mov	r0, r4
 8004b7e:	4629      	mov	r1, r5
 8004b80:	f7fb fe64 	bl	800084c <__aeabi_ddiv>
 8004b84:	4602      	mov	r2, r0
 8004b86:	460b      	mov	r3, r1
 8004b88:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004b92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b96:	f7fb fd2f 	bl	80005f8 <__aeabi_dmul>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004baa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bae:	f7fb fe4d 	bl	800084c <__aeabi_ddiv>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8004bca:	0000      	movs	r0, r0
 8004bcc:	0000      	movs	r0, r0
	...

08004bd0 <servogerak>:
 */
#include "servo.h"
#include "stm32f4xx_hal.h"

void servogerak(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t sudut)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	4613      	mov	r3, r2
 8004bdc:	80fb      	strh	r3, [r7, #6]
	uint16_t regisval;
	if (sudut == 0)
 8004bde:	88fb      	ldrh	r3, [r7, #6]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d103      	bne.n	8004bec <servogerak+0x1c>
	{
		regisval = 500;
 8004be4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004be8:	82fb      	strh	r3, [r7, #22]
 8004bea:	e019      	b.n	8004c20 <servogerak+0x50>
	}
	else
	{
		regisval = 11.17*sudut + 490.7;
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fb fc98 	bl	8000524 <__aeabi_i2d>
 8004bf4:	a326      	add	r3, pc, #152	; (adr r3, 8004c90 <servogerak+0xc0>)
 8004bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfa:	f7fb fcfd 	bl	80005f8 <__aeabi_dmul>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	460b      	mov	r3, r1
 8004c02:	4610      	mov	r0, r2
 8004c04:	4619      	mov	r1, r3
 8004c06:	a324      	add	r3, pc, #144	; (adr r3, 8004c98 <servogerak+0xc8>)
 8004c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0c:	f7fb fb3e 	bl	800028c <__adddf3>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4610      	mov	r0, r2
 8004c16:	4619      	mov	r1, r3
 8004c18:	f7fb ffc6 	bl	8000ba8 <__aeabi_d2uiz>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	82fb      	strh	r3, [r7, #22]
	}

	switch (channel)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b0c      	cmp	r3, #12
 8004c24:	d830      	bhi.n	8004c88 <servogerak+0xb8>
 8004c26:	a201      	add	r2, pc, #4	; (adr r2, 8004c2c <servogerak+0x5c>)
 8004c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c2c:	08004c61 	.word	0x08004c61
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c6b 	.word	0x08004c6b
 8004c40:	08004c89 	.word	0x08004c89
 8004c44:	08004c89 	.word	0x08004c89
 8004c48:	08004c89 	.word	0x08004c89
 8004c4c:	08004c75 	.word	0x08004c75
 8004c50:	08004c89 	.word	0x08004c89
 8004c54:	08004c89 	.word	0x08004c89
 8004c58:	08004c89 	.word	0x08004c89
 8004c5c:	08004c7f 	.word	0x08004c7f
	{
		case TIM_CHANNEL_1:
			htim->Instance->CCR1 = regisval;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	8afa      	ldrh	r2, [r7, #22]
 8004c66:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8004c68:	e00e      	b.n	8004c88 <servogerak+0xb8>
		case TIM_CHANNEL_2:
			htim->Instance->CCR2 = regisval;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	8afa      	ldrh	r2, [r7, #22]
 8004c70:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8004c72:	e009      	b.n	8004c88 <servogerak+0xb8>
		case TIM_CHANNEL_3:
			htim->Instance->CCR3 = regisval;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	8afa      	ldrh	r2, [r7, #22]
 8004c7a:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004c7c:	e004      	b.n	8004c88 <servogerak+0xb8>
		case TIM_CHANNEL_4:
			htim->Instance->CCR4 = regisval;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	8afa      	ldrh	r2, [r7, #22]
 8004c84:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8004c86:	bf00      	nop
	}
}
 8004c88:	bf00      	nop
 8004c8a:	3718      	adds	r7, #24
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	3d70a3d7 	.word	0x3d70a3d7
 8004c94:	4026570a 	.word	0x4026570a
 8004c98:	33333333 	.word	0x33333333
 8004c9c:	407eab33 	.word	0x407eab33

08004ca0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
 8004caa:	4b10      	ldr	r3, [pc, #64]	; (8004cec <HAL_MspInit+0x4c>)
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	4a0f      	ldr	r2, [pc, #60]	; (8004cec <HAL_MspInit+0x4c>)
 8004cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cb6:	4b0d      	ldr	r3, [pc, #52]	; (8004cec <HAL_MspInit+0x4c>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cbe:	607b      	str	r3, [r7, #4]
 8004cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	603b      	str	r3, [r7, #0]
 8004cc6:	4b09      	ldr	r3, [pc, #36]	; (8004cec <HAL_MspInit+0x4c>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	4a08      	ldr	r2, [pc, #32]	; (8004cec <HAL_MspInit+0x4c>)
 8004ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cd2:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_MspInit+0x4c>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004cde:	bf00      	nop
 8004ce0:	370c      	adds	r7, #12
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800

08004cf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf8:	f107 0314 	add.w	r3, r7, #20
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	60da      	str	r2, [r3, #12]
 8004d06:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a3c      	ldr	r2, [pc, #240]	; (8004e00 <HAL_ADC_MspInit+0x110>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d171      	bne.n	8004df6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d12:	2300      	movs	r3, #0
 8004d14:	613b      	str	r3, [r7, #16]
 8004d16:	4b3b      	ldr	r3, [pc, #236]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1a:	4a3a      	ldr	r2, [pc, #232]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d20:	6453      	str	r3, [r2, #68]	; 0x44
 8004d22:	4b38      	ldr	r3, [pc, #224]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	613b      	str	r3, [r7, #16]
 8004d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
 8004d32:	4b34      	ldr	r3, [pc, #208]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	4a33      	ldr	r2, [pc, #204]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d38:	f043 0304 	orr.w	r3, r3, #4
 8004d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004d3e:	4b31      	ldr	r3, [pc, #196]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	4b2d      	ldr	r3, [pc, #180]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d52:	4a2c      	ldr	r2, [pc, #176]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d54:	f043 0302 	orr.w	r3, r3, #2
 8004d58:	6313      	str	r3, [r2, #48]	; 0x30
 8004d5a:	4b2a      	ldr	r3, [pc, #168]	; (8004e04 <HAL_ADC_MspInit+0x114>)
 8004d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004d66:	2301      	movs	r3, #1
 8004d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d72:	f107 0314 	add.w	r3, r7, #20
 8004d76:	4619      	mov	r1, r3
 8004d78:	4823      	ldr	r0, [pc, #140]	; (8004e08 <HAL_ADC_MspInit+0x118>)
 8004d7a:	f003 fb97 	bl	80084ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004d7e:	2302      	movs	r3, #2
 8004d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d82:	2303      	movs	r3, #3
 8004d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d86:	2300      	movs	r3, #0
 8004d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d8a:	f107 0314 	add.w	r3, r7, #20
 8004d8e:	4619      	mov	r1, r3
 8004d90:	481e      	ldr	r0, [pc, #120]	; (8004e0c <HAL_ADC_MspInit+0x11c>)
 8004d92:	f003 fb8b 	bl	80084ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004d96:	4b1e      	ldr	r3, [pc, #120]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <HAL_ADC_MspInit+0x124>)
 8004d9a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004d9c:	4b1c      	ldr	r3, [pc, #112]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004d9e:	2200      	movs	r2, #0
 8004da0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004da2:	4b1b      	ldr	r3, [pc, #108]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004da8:	4b19      	ldr	r3, [pc, #100]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004dae:	4b18      	ldr	r3, [pc, #96]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004db0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004db4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004db6:	4b16      	ldr	r3, [pc, #88]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004db8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004dbc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004dbe:	4b14      	ldr	r3, [pc, #80]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004dc0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dc4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004dc6:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004dc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dcc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004dce:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004dd4:	4b0e      	ldr	r3, [pc, #56]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004dda:	480d      	ldr	r0, [pc, #52]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004ddc:	f002 ff64 	bl	8007ca8 <HAL_DMA_Init>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004de6:	f7ff fbc9 	bl	800457c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004dee:	639a      	str	r2, [r3, #56]	; 0x38
 8004df0:	4a07      	ldr	r2, [pc, #28]	; (8004e10 <HAL_ADC_MspInit+0x120>)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004df6:	bf00      	nop
 8004df8:	3728      	adds	r7, #40	; 0x28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40012000 	.word	0x40012000
 8004e04:	40023800 	.word	0x40023800
 8004e08:	40020800 	.word	0x40020800
 8004e0c:	40020400 	.word	0x40020400
 8004e10:	20000880 	.word	0x20000880
 8004e14:	40026410 	.word	0x40026410

08004e18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08c      	sub	sp, #48	; 0x30
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e20:	f107 031c 	add.w	r3, r7, #28
 8004e24:	2200      	movs	r2, #0
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	605a      	str	r2, [r3, #4]
 8004e2a:	609a      	str	r2, [r3, #8]
 8004e2c:	60da      	str	r2, [r3, #12]
 8004e2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a42      	ldr	r2, [pc, #264]	; (8004f40 <HAL_I2C_MspInit+0x128>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d12d      	bne.n	8004e96 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	4b41      	ldr	r3, [pc, #260]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	4a40      	ldr	r2, [pc, #256]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e44:	f043 0302 	orr.w	r3, r3, #2
 8004e48:	6313      	str	r3, [r2, #48]	; 0x30
 8004e4a:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	61bb      	str	r3, [r7, #24]
 8004e54:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e5c:	2312      	movs	r3, #18
 8004e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e60:	2300      	movs	r3, #0
 8004e62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e64:	2303      	movs	r3, #3
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004e68:	2304      	movs	r3, #4
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e6c:	f107 031c 	add.w	r3, r7, #28
 8004e70:	4619      	mov	r1, r3
 8004e72:	4835      	ldr	r0, [pc, #212]	; (8004f48 <HAL_I2C_MspInit+0x130>)
 8004e74:	f003 fb1a 	bl	80084ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	4a30      	ldr	r2, [pc, #192]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e86:	6413      	str	r3, [r2, #64]	; 0x40
 8004e88:	4b2e      	ldr	r3, [pc, #184]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e90:	617b      	str	r3, [r7, #20]
 8004e92:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004e94:	e050      	b.n	8004f38 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a2c      	ldr	r2, [pc, #176]	; (8004f4c <HAL_I2C_MspInit+0x134>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d14b      	bne.n	8004f38 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	613b      	str	r3, [r7, #16]
 8004ea4:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea8:	4a26      	ldr	r2, [pc, #152]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004eaa:	f043 0304 	orr.w	r3, r3, #4
 8004eae:	6313      	str	r3, [r2, #48]	; 0x30
 8004eb0:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	f003 0304 	and.w	r3, r3, #4
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec4:	4a1f      	ldr	r2, [pc, #124]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	6313      	str	r3, [r2, #48]	; 0x30
 8004ecc:	4b1d      	ldr	r3, [pc, #116]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ed8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ede:	2312      	movs	r3, #18
 8004ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004eea:	2304      	movs	r3, #4
 8004eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004eee:	f107 031c 	add.w	r3, r7, #28
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4816      	ldr	r0, [pc, #88]	; (8004f50 <HAL_I2C_MspInit+0x138>)
 8004ef6:	f003 fad9 	bl	80084ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004efa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f00:	2312      	movs	r3, #18
 8004f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f04:	2300      	movs	r3, #0
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f10:	f107 031c 	add.w	r3, r7, #28
 8004f14:	4619      	mov	r1, r3
 8004f16:	480f      	ldr	r0, [pc, #60]	; (8004f54 <HAL_I2C_MspInit+0x13c>)
 8004f18:	f003 fac8 	bl	80084ac <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	4b08      	ldr	r3, [pc, #32]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f24:	4a07      	ldr	r2, [pc, #28]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004f26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f2a:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2c:	4b05      	ldr	r3, [pc, #20]	; (8004f44 <HAL_I2C_MspInit+0x12c>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
}
 8004f38:	bf00      	nop
 8004f3a:	3730      	adds	r7, #48	; 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40005800 	.word	0x40005800
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40020400 	.word	0x40020400
 8004f4c:	40005c00 	.word	0x40005c00
 8004f50:	40020800 	.word	0x40020800
 8004f54:	40020000 	.word	0x40020000

08004f58 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b086      	sub	sp, #24
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f60:	f107 0308 	add.w	r3, r7, #8
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
 8004f68:	605a      	str	r2, [r3, #4]
 8004f6a:	609a      	str	r2, [r3, #8]
 8004f6c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a0c      	ldr	r2, [pc, #48]	; (8004fa4 <HAL_RTC_MspInit+0x4c>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d111      	bne.n	8004f9c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004f78:	2302      	movs	r3, #2
 8004f7a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f80:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f82:	f107 0308 	add.w	r3, r7, #8
 8004f86:	4618      	mov	r0, r3
 8004f88:	f005 fd80 	bl	800aa8c <HAL_RCCEx_PeriphCLKConfig>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004f92:	f7ff faf3 	bl	800457c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f96:	4b04      	ldr	r3, [pc, #16]	; (8004fa8 <HAL_RTC_MspInit+0x50>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004f9c:	bf00      	nop
 8004f9e:	3718      	adds	r7, #24
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40002800 	.word	0x40002800
 8004fa8:	42470e3c 	.word	0x42470e3c

08004fac <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b08a      	sub	sp, #40	; 0x28
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb4:	f107 0314 	add.w	r3, r7, #20
 8004fb8:	2200      	movs	r2, #0
 8004fba:	601a      	str	r2, [r3, #0]
 8004fbc:	605a      	str	r2, [r3, #4]
 8004fbe:	609a      	str	r2, [r3, #8]
 8004fc0:	60da      	str	r2, [r3, #12]
 8004fc2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a28      	ldr	r2, [pc, #160]	; (800506c <HAL_SD_MspInit+0xc0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d14a      	bne.n	8005064 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004fce:	2300      	movs	r3, #0
 8004fd0:	613b      	str	r3, [r7, #16]
 8004fd2:	4b27      	ldr	r3, [pc, #156]	; (8005070 <HAL_SD_MspInit+0xc4>)
 8004fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd6:	4a26      	ldr	r2, [pc, #152]	; (8005070 <HAL_SD_MspInit+0xc4>)
 8004fd8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8004fde:	4b24      	ldr	r3, [pc, #144]	; (8005070 <HAL_SD_MspInit+0xc4>)
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	4b20      	ldr	r3, [pc, #128]	; (8005070 <HAL_SD_MspInit+0xc4>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	4a1f      	ldr	r2, [pc, #124]	; (8005070 <HAL_SD_MspInit+0xc4>)
 8004ff4:	f043 0304 	orr.w	r3, r3, #4
 8004ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffa:	4b1d      	ldr	r3, [pc, #116]	; (8005070 <HAL_SD_MspInit+0xc4>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	60bb      	str	r3, [r7, #8]
 800500a:	4b19      	ldr	r3, [pc, #100]	; (8005070 <HAL_SD_MspInit+0xc4>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500e:	4a18      	ldr	r2, [pc, #96]	; (8005070 <HAL_SD_MspInit+0xc4>)
 8005010:	f043 0308 	orr.w	r3, r3, #8
 8005014:	6313      	str	r3, [r2, #48]	; 0x30
 8005016:	4b16      	ldr	r3, [pc, #88]	; (8005070 <HAL_SD_MspInit+0xc4>)
 8005018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	60bb      	str	r3, [r7, #8]
 8005020:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8005022:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8005026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005028:	2302      	movs	r3, #2
 800502a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005030:	2303      	movs	r3, #3
 8005032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005034:	230c      	movs	r3, #12
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4619      	mov	r1, r3
 800503e:	480d      	ldr	r0, [pc, #52]	; (8005074 <HAL_SD_MspInit+0xc8>)
 8005040:	f003 fa34 	bl	80084ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005044:	2304      	movs	r3, #4
 8005046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005048:	2302      	movs	r3, #2
 800504a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504c:	2300      	movs	r3, #0
 800504e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005050:	2303      	movs	r3, #3
 8005052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8005054:	230c      	movs	r3, #12
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005058:	f107 0314 	add.w	r3, r7, #20
 800505c:	4619      	mov	r1, r3
 800505e:	4806      	ldr	r0, [pc, #24]	; (8005078 <HAL_SD_MspInit+0xcc>)
 8005060:	f003 fa24 	bl	80084ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8005064:	bf00      	nop
 8005066:	3728      	adds	r7, #40	; 0x28
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40012c00 	.word	0x40012c00
 8005070:	40023800 	.word	0x40023800
 8005074:	40020800 	.word	0x40020800
 8005078:	40020c00 	.word	0x40020c00

0800507c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b088      	sub	sp, #32
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a50      	ldr	r2, [pc, #320]	; (80051cc <HAL_TIM_Base_MspInit+0x150>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d11e      	bne.n	80050cc <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	4b4f      	ldr	r3, [pc, #316]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005096:	4a4e      	ldr	r2, [pc, #312]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	6453      	str	r3, [r2, #68]	; 0x44
 800509e:	4b4c      	ldr	r3, [pc, #304]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 80050a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80050aa:	2200      	movs	r2, #0
 80050ac:	2100      	movs	r1, #0
 80050ae:	2019      	movs	r0, #25
 80050b0:	f002 fdc3 	bl	8007c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80050b4:	2019      	movs	r0, #25
 80050b6:	f002 fddc 	bl	8007c72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 80050ba:	2200      	movs	r2, #0
 80050bc:	2102      	movs	r1, #2
 80050be:	201a      	movs	r0, #26
 80050c0:	f002 fdbb 	bl	8007c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80050c4:	201a      	movs	r0, #26
 80050c6:	f002 fdd4 	bl	8007c72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80050ca:	e07a      	b.n	80051c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM3)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a40      	ldr	r2, [pc, #256]	; (80051d4 <HAL_TIM_Base_MspInit+0x158>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d10e      	bne.n	80050f4 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	4b3d      	ldr	r3, [pc, #244]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	4a3c      	ldr	r2, [pc, #240]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 80050e0:	f043 0302 	orr.w	r3, r3, #2
 80050e4:	6413      	str	r3, [r2, #64]	; 0x40
 80050e6:	4b3a      	ldr	r3, [pc, #232]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 80050e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	61bb      	str	r3, [r7, #24]
 80050f0:	69bb      	ldr	r3, [r7, #24]
}
 80050f2:	e066      	b.n	80051c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM9)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a37      	ldr	r2, [pc, #220]	; (80051d8 <HAL_TIM_Base_MspInit+0x15c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10e      	bne.n	800511c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	4b33      	ldr	r3, [pc, #204]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005106:	4a32      	ldr	r2, [pc, #200]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6453      	str	r3, [r2, #68]	; 0x44
 800510e:	4b30      	ldr	r3, [pc, #192]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	697b      	ldr	r3, [r7, #20]
}
 800511a:	e052      	b.n	80051c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM10)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a2e      	ldr	r2, [pc, #184]	; (80051dc <HAL_TIM_Base_MspInit+0x160>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d116      	bne.n	8005154 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005126:	2300      	movs	r3, #0
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	4b29      	ldr	r3, [pc, #164]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	4a28      	ldr	r2, [pc, #160]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005134:	6453      	str	r3, [r2, #68]	; 0x44
 8005136:	4b26      	ldr	r3, [pc, #152]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513e:	613b      	str	r3, [r7, #16]
 8005140:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8005142:	2200      	movs	r2, #0
 8005144:	2100      	movs	r1, #0
 8005146:	2019      	movs	r0, #25
 8005148:	f002 fd77 	bl	8007c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800514c:	2019      	movs	r0, #25
 800514e:	f002 fd90 	bl	8007c72 <HAL_NVIC_EnableIRQ>
}
 8005152:	e036      	b.n	80051c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM11)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <HAL_TIM_Base_MspInit+0x164>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d116      	bne.n	800518c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800515e:	2300      	movs	r3, #0
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	4b1b      	ldr	r3, [pc, #108]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005166:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800516c:	6453      	str	r3, [r2, #68]	; 0x44
 800516e:	4b18      	ldr	r3, [pc, #96]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 2, 0);
 800517a:	2200      	movs	r2, #0
 800517c:	2102      	movs	r1, #2
 800517e:	201a      	movs	r0, #26
 8005180:	f002 fd5b 	bl	8007c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8005184:	201a      	movs	r0, #26
 8005186:	f002 fd74 	bl	8007c72 <HAL_NVIC_EnableIRQ>
}
 800518a:	e01a      	b.n	80051c2 <HAL_TIM_Base_MspInit+0x146>
  else if(htim_base->Instance==TIM13)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <HAL_TIM_Base_MspInit+0x168>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d115      	bne.n	80051c2 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8005196:	2300      	movs	r3, #0
 8005198:	60bb      	str	r3, [r7, #8]
 800519a:	4b0d      	ldr	r3, [pc, #52]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	4a0c      	ldr	r2, [pc, #48]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 80051a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051a4:	6413      	str	r3, [r2, #64]	; 0x40
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <HAL_TIM_Base_MspInit+0x154>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 3, 0);
 80051b2:	2200      	movs	r2, #0
 80051b4:	2103      	movs	r1, #3
 80051b6:	202c      	movs	r0, #44	; 0x2c
 80051b8:	f002 fd3f 	bl	8007c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80051bc:	202c      	movs	r0, #44	; 0x2c
 80051be:	f002 fd58 	bl	8007c72 <HAL_NVIC_EnableIRQ>
}
 80051c2:	bf00      	nop
 80051c4:	3720      	adds	r7, #32
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40014000 	.word	0x40014000
 80051dc:	40014400 	.word	0x40014400
 80051e0:	40014800 	.word	0x40014800
 80051e4:	40001c00 	.word	0x40001c00

080051e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a0b      	ldr	r2, [pc, #44]	; (8005224 <HAL_TIM_PWM_MspInit+0x3c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d10d      	bne.n	8005216 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	4b0a      	ldr	r3, [pc, #40]	; (8005228 <HAL_TIM_PWM_MspInit+0x40>)
 8005200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005202:	4a09      	ldr	r2, [pc, #36]	; (8005228 <HAL_TIM_PWM_MspInit+0x40>)
 8005204:	f043 0304 	orr.w	r3, r3, #4
 8005208:	6413      	str	r3, [r2, #64]	; 0x40
 800520a:	4b07      	ldr	r3, [pc, #28]	; (8005228 <HAL_TIM_PWM_MspInit+0x40>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005216:	bf00      	nop
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40000800 	.word	0x40000800
 8005228:	40023800 	.word	0x40023800

0800522c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08c      	sub	sp, #48	; 0x30
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005234:	f107 031c 	add.w	r3, r7, #28
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
 800523c:	605a      	str	r2, [r3, #4]
 800523e:	609a      	str	r2, [r3, #8]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a55      	ldr	r2, [pc, #340]	; (80053a0 <HAL_TIM_MspPostInit+0x174>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d13e      	bne.n	80052cc <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800524e:	2300      	movs	r3, #0
 8005250:	61bb      	str	r3, [r7, #24]
 8005252:	4b54      	ldr	r3, [pc, #336]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 8005254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005256:	4a53      	ldr	r2, [pc, #332]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 8005258:	f043 0310 	orr.w	r3, r3, #16
 800525c:	6313      	str	r3, [r2, #48]	; 0x30
 800525e:	4b51      	ldr	r3, [pc, #324]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 8005260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005262:	f003 0310 	and.w	r3, r3, #16
 8005266:	61bb      	str	r3, [r7, #24]
 8005268:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800526a:	2300      	movs	r3, #0
 800526c:	617b      	str	r3, [r7, #20]
 800526e:	4b4d      	ldr	r3, [pc, #308]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	4a4c      	ldr	r2, [pc, #304]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6313      	str	r3, [r2, #48]	; 0x30
 800527a:	4b4a      	ldr	r3, [pc, #296]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005286:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800528a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528c:	2302      	movs	r3, #2
 800528e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005290:	2300      	movs	r3, #0
 8005292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005294:	2300      	movs	r3, #0
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005298:	2301      	movs	r3, #1
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800529c:	f107 031c 	add.w	r3, r7, #28
 80052a0:	4619      	mov	r1, r3
 80052a2:	4841      	ldr	r0, [pc, #260]	; (80053a8 <HAL_TIM_MspPostInit+0x17c>)
 80052a4:	f003 f902 	bl	80084ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ae:	2302      	movs	r3, #2
 80052b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052b6:	2300      	movs	r3, #0
 80052b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80052ba:	2301      	movs	r3, #1
 80052bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052be:	f107 031c 	add.w	r3, r7, #28
 80052c2:	4619      	mov	r1, r3
 80052c4:	4839      	ldr	r0, [pc, #228]	; (80053ac <HAL_TIM_MspPostInit+0x180>)
 80052c6:	f003 f8f1 	bl	80084ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80052ca:	e065      	b.n	8005398 <HAL_TIM_MspPostInit+0x16c>
  else if(htim->Instance==TIM3)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a37      	ldr	r2, [pc, #220]	; (80053b0 <HAL_TIM_MspPostInit+0x184>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d13c      	bne.n	8005350 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	4b32      	ldr	r3, [pc, #200]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 80052dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052de:	4a31      	ldr	r2, [pc, #196]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 80052e0:	f043 0301 	orr.w	r3, r3, #1
 80052e4:	6313      	str	r3, [r2, #48]	; 0x30
 80052e6:	4b2f      	ldr	r3, [pc, #188]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 80052e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ea:	f003 0301 	and.w	r3, r3, #1
 80052ee:	613b      	str	r3, [r7, #16]
 80052f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052f2:	2300      	movs	r3, #0
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	4b2b      	ldr	r3, [pc, #172]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	4a2a      	ldr	r2, [pc, #168]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 80052fc:	f043 0302 	orr.w	r3, r3, #2
 8005300:	6313      	str	r3, [r2, #48]	; 0x30
 8005302:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	60fb      	str	r3, [r7, #12]
 800530c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800530e:	2340      	movs	r3, #64	; 0x40
 8005310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005312:	2302      	movs	r3, #2
 8005314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005316:	2300      	movs	r3, #0
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800531a:	2300      	movs	r3, #0
 800531c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800531e:	2302      	movs	r3, #2
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005322:	f107 031c 	add.w	r3, r7, #28
 8005326:	4619      	mov	r1, r3
 8005328:	4820      	ldr	r0, [pc, #128]	; (80053ac <HAL_TIM_MspPostInit+0x180>)
 800532a:	f003 f8bf 	bl	80084ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800532e:	2301      	movs	r3, #1
 8005330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005332:	2302      	movs	r3, #2
 8005334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533a:	2300      	movs	r3, #0
 800533c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800533e:	2302      	movs	r3, #2
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005342:	f107 031c 	add.w	r3, r7, #28
 8005346:	4619      	mov	r1, r3
 8005348:	481a      	ldr	r0, [pc, #104]	; (80053b4 <HAL_TIM_MspPostInit+0x188>)
 800534a:	f003 f8af 	bl	80084ac <HAL_GPIO_Init>
}
 800534e:	e023      	b.n	8005398 <HAL_TIM_MspPostInit+0x16c>
  else if(htim->Instance==TIM4)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a18      	ldr	r2, [pc, #96]	; (80053b8 <HAL_TIM_MspPostInit+0x18c>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d11e      	bne.n	8005398 <HAL_TIM_MspPostInit+0x16c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800535a:	2300      	movs	r3, #0
 800535c:	60bb      	str	r3, [r7, #8]
 800535e:	4b11      	ldr	r3, [pc, #68]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	4a10      	ldr	r2, [pc, #64]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 8005364:	f043 0308 	orr.w	r3, r3, #8
 8005368:	6313      	str	r3, [r2, #48]	; 0x30
 800536a:	4b0e      	ldr	r3, [pc, #56]	; (80053a4 <HAL_TIM_MspPostInit+0x178>)
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	60bb      	str	r3, [r7, #8]
 8005374:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8005376:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800537a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537c:	2302      	movs	r3, #2
 800537e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005380:	2300      	movs	r3, #0
 8005382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005384:	2300      	movs	r3, #0
 8005386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005388:	2302      	movs	r3, #2
 800538a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800538c:	f107 031c 	add.w	r3, r7, #28
 8005390:	4619      	mov	r1, r3
 8005392:	480a      	ldr	r0, [pc, #40]	; (80053bc <HAL_TIM_MspPostInit+0x190>)
 8005394:	f003 f88a 	bl	80084ac <HAL_GPIO_Init>
}
 8005398:	bf00      	nop
 800539a:	3730      	adds	r7, #48	; 0x30
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40010000 	.word	0x40010000
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40020000 	.word	0x40020000
 80053b0:	40000400 	.word	0x40000400
 80053b4:	40020400 	.word	0x40020400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40020c00 	.word	0x40020c00

080053c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08c      	sub	sp, #48	; 0x30
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053c8:	f107 031c 	add.w	r3, r7, #28
 80053cc:	2200      	movs	r2, #0
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	605a      	str	r2, [r3, #4]
 80053d2:	609a      	str	r2, [r3, #8]
 80053d4:	60da      	str	r2, [r3, #12]
 80053d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a7d      	ldr	r2, [pc, #500]	; (80055d4 <HAL_UART_MspInit+0x214>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d15a      	bne.n	8005498 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	4b7c      	ldr	r3, [pc, #496]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	4a7b      	ldr	r2, [pc, #492]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80053ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053f0:	6413      	str	r3, [r2, #64]	; 0x40
 80053f2:	4b79      	ldr	r3, [pc, #484]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80053f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fa:	61bb      	str	r3, [r7, #24]
 80053fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80053fe:	2300      	movs	r3, #0
 8005400:	617b      	str	r3, [r7, #20]
 8005402:	4b75      	ldr	r3, [pc, #468]	; (80055d8 <HAL_UART_MspInit+0x218>)
 8005404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005406:	4a74      	ldr	r2, [pc, #464]	; (80055d8 <HAL_UART_MspInit+0x218>)
 8005408:	f043 0301 	orr.w	r3, r3, #1
 800540c:	6313      	str	r3, [r2, #48]	; 0x30
 800540e:	4b72      	ldr	r3, [pc, #456]	; (80055d8 <HAL_UART_MspInit+0x218>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800541a:	230c      	movs	r3, #12
 800541c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800541e:	2302      	movs	r3, #2
 8005420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005426:	2303      	movs	r3, #3
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800542a:	2307      	movs	r3, #7
 800542c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800542e:	f107 031c 	add.w	r3, r7, #28
 8005432:	4619      	mov	r1, r3
 8005434:	4869      	ldr	r0, [pc, #420]	; (80055dc <HAL_UART_MspInit+0x21c>)
 8005436:	f003 f839 	bl	80084ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800543a:	4b69      	ldr	r3, [pc, #420]	; (80055e0 <HAL_UART_MspInit+0x220>)
 800543c:	4a69      	ldr	r2, [pc, #420]	; (80055e4 <HAL_UART_MspInit+0x224>)
 800543e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005440:	4b67      	ldr	r3, [pc, #412]	; (80055e0 <HAL_UART_MspInit+0x220>)
 8005442:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005446:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005448:	4b65      	ldr	r3, [pc, #404]	; (80055e0 <HAL_UART_MspInit+0x220>)
 800544a:	2200      	movs	r2, #0
 800544c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800544e:	4b64      	ldr	r3, [pc, #400]	; (80055e0 <HAL_UART_MspInit+0x220>)
 8005450:	2200      	movs	r2, #0
 8005452:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005454:	4b62      	ldr	r3, [pc, #392]	; (80055e0 <HAL_UART_MspInit+0x220>)
 8005456:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800545a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800545c:	4b60      	ldr	r3, [pc, #384]	; (80055e0 <HAL_UART_MspInit+0x220>)
 800545e:	2200      	movs	r2, #0
 8005460:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005462:	4b5f      	ldr	r3, [pc, #380]	; (80055e0 <HAL_UART_MspInit+0x220>)
 8005464:	2200      	movs	r2, #0
 8005466:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005468:	4b5d      	ldr	r3, [pc, #372]	; (80055e0 <HAL_UART_MspInit+0x220>)
 800546a:	2200      	movs	r2, #0
 800546c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800546e:	4b5c      	ldr	r3, [pc, #368]	; (80055e0 <HAL_UART_MspInit+0x220>)
 8005470:	2200      	movs	r2, #0
 8005472:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005474:	4b5a      	ldr	r3, [pc, #360]	; (80055e0 <HAL_UART_MspInit+0x220>)
 8005476:	2200      	movs	r2, #0
 8005478:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800547a:	4859      	ldr	r0, [pc, #356]	; (80055e0 <HAL_UART_MspInit+0x220>)
 800547c:	f002 fc14 	bl	8007ca8 <HAL_DMA_Init>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8005486:	f7ff f879 	bl	800457c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a54      	ldr	r2, [pc, #336]	; (80055e0 <HAL_UART_MspInit+0x220>)
 800548e:	639a      	str	r2, [r3, #56]	; 0x38
 8005490:	4a53      	ldr	r2, [pc, #332]	; (80055e0 <HAL_UART_MspInit+0x220>)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005496:	e098      	b.n	80055ca <HAL_UART_MspInit+0x20a>
  else if(huart->Instance==USART3)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a52      	ldr	r2, [pc, #328]	; (80055e8 <HAL_UART_MspInit+0x228>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	f040 8093 	bne.w	80055ca <HAL_UART_MspInit+0x20a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	4b4b      	ldr	r3, [pc, #300]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	4a4a      	ldr	r2, [pc, #296]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80054ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054b2:	6413      	str	r3, [r2, #64]	; 0x40
 80054b4:	4b48      	ldr	r3, [pc, #288]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80054b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054bc:	613b      	str	r3, [r7, #16]
 80054be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80054c0:	2300      	movs	r3, #0
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	4b44      	ldr	r3, [pc, #272]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	4a43      	ldr	r2, [pc, #268]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80054ca:	f043 0308 	orr.w	r3, r3, #8
 80054ce:	6313      	str	r3, [r2, #48]	; 0x30
 80054d0:	4b41      	ldr	r3, [pc, #260]	; (80055d8 <HAL_UART_MspInit+0x218>)
 80054d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80054dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80054e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e2:	2302      	movs	r3, #2
 80054e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054ea:	2303      	movs	r3, #3
 80054ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80054ee:	2307      	movs	r3, #7
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80054f2:	f107 031c 	add.w	r3, r7, #28
 80054f6:	4619      	mov	r1, r3
 80054f8:	483c      	ldr	r0, [pc, #240]	; (80055ec <HAL_UART_MspInit+0x22c>)
 80054fa:	f002 ffd7 	bl	80084ac <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80054fe:	4b3c      	ldr	r3, [pc, #240]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005500:	4a3c      	ldr	r2, [pc, #240]	; (80055f4 <HAL_UART_MspInit+0x234>)
 8005502:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005504:	4b3a      	ldr	r3, [pc, #232]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800550a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800550c:	4b38      	ldr	r3, [pc, #224]	; (80055f0 <HAL_UART_MspInit+0x230>)
 800550e:	2200      	movs	r2, #0
 8005510:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005512:	4b37      	ldr	r3, [pc, #220]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005514:	2200      	movs	r2, #0
 8005516:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005518:	4b35      	ldr	r3, [pc, #212]	; (80055f0 <HAL_UART_MspInit+0x230>)
 800551a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800551e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005520:	4b33      	ldr	r3, [pc, #204]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005522:	2200      	movs	r2, #0
 8005524:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005526:	4b32      	ldr	r3, [pc, #200]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005528:	2200      	movs	r2, #0
 800552a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800552c:	4b30      	ldr	r3, [pc, #192]	; (80055f0 <HAL_UART_MspInit+0x230>)
 800552e:	2200      	movs	r2, #0
 8005530:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005532:	4b2f      	ldr	r3, [pc, #188]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005534:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005538:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800553a:	4b2d      	ldr	r3, [pc, #180]	; (80055f0 <HAL_UART_MspInit+0x230>)
 800553c:	2200      	movs	r2, #0
 800553e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005540:	482b      	ldr	r0, [pc, #172]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005542:	f002 fbb1 	bl	8007ca8 <HAL_DMA_Init>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <HAL_UART_MspInit+0x190>
      Error_Handler();
 800554c:	f7ff f816 	bl	800457c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a27      	ldr	r2, [pc, #156]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005554:	639a      	str	r2, [r3, #56]	; 0x38
 8005556:	4a26      	ldr	r2, [pc, #152]	; (80055f0 <HAL_UART_MspInit+0x230>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800555c:	4b26      	ldr	r3, [pc, #152]	; (80055f8 <HAL_UART_MspInit+0x238>)
 800555e:	4a27      	ldr	r2, [pc, #156]	; (80055fc <HAL_UART_MspInit+0x23c>)
 8005560:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005562:	4b25      	ldr	r3, [pc, #148]	; (80055f8 <HAL_UART_MspInit+0x238>)
 8005564:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005568:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800556a:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <HAL_UART_MspInit+0x238>)
 800556c:	2240      	movs	r2, #64	; 0x40
 800556e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005570:	4b21      	ldr	r3, [pc, #132]	; (80055f8 <HAL_UART_MspInit+0x238>)
 8005572:	2200      	movs	r2, #0
 8005574:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005576:	4b20      	ldr	r3, [pc, #128]	; (80055f8 <HAL_UART_MspInit+0x238>)
 8005578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800557c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800557e:	4b1e      	ldr	r3, [pc, #120]	; (80055f8 <HAL_UART_MspInit+0x238>)
 8005580:	2200      	movs	r2, #0
 8005582:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005584:	4b1c      	ldr	r3, [pc, #112]	; (80055f8 <HAL_UART_MspInit+0x238>)
 8005586:	2200      	movs	r2, #0
 8005588:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800558a:	4b1b      	ldr	r3, [pc, #108]	; (80055f8 <HAL_UART_MspInit+0x238>)
 800558c:	2200      	movs	r2, #0
 800558e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005590:	4b19      	ldr	r3, [pc, #100]	; (80055f8 <HAL_UART_MspInit+0x238>)
 8005592:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8005596:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005598:	4b17      	ldr	r3, [pc, #92]	; (80055f8 <HAL_UART_MspInit+0x238>)
 800559a:	2200      	movs	r2, #0
 800559c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800559e:	4816      	ldr	r0, [pc, #88]	; (80055f8 <HAL_UART_MspInit+0x238>)
 80055a0:	f002 fb82 	bl	8007ca8 <HAL_DMA_Init>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 80055aa:	f7fe ffe7 	bl	800457c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a11      	ldr	r2, [pc, #68]	; (80055f8 <HAL_UART_MspInit+0x238>)
 80055b2:	635a      	str	r2, [r3, #52]	; 0x34
 80055b4:	4a10      	ldr	r2, [pc, #64]	; (80055f8 <HAL_UART_MspInit+0x238>)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80055ba:	2200      	movs	r2, #0
 80055bc:	2100      	movs	r1, #0
 80055be:	2027      	movs	r0, #39	; 0x27
 80055c0:	f002 fb3b 	bl	8007c3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80055c4:	2027      	movs	r0, #39	; 0x27
 80055c6:	f002 fb54 	bl	8007c72 <HAL_NVIC_EnableIRQ>
}
 80055ca:	bf00      	nop
 80055cc:	3730      	adds	r7, #48	; 0x30
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40004400 	.word	0x40004400
 80055d8:	40023800 	.word	0x40023800
 80055dc:	40020000 	.word	0x40020000
 80055e0:	20000cac 	.word	0x20000cac
 80055e4:	40026088 	.word	0x40026088
 80055e8:	40004800 	.word	0x40004800
 80055ec:	40020c00 	.word	0x40020c00
 80055f0:	20000d0c 	.word	0x20000d0c
 80055f4:	40026028 	.word	0x40026028
 80055f8:	20000d6c 	.word	0x20000d6c
 80055fc:	40026058 	.word	0x40026058

08005600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005600:	b480      	push	{r7}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005604:	e7fe      	b.n	8005604 <NMI_Handler+0x4>

08005606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005606:	b480      	push	{r7}
 8005608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800560a:	e7fe      	b.n	800560a <HardFault_Handler+0x4>

0800560c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005610:	e7fe      	b.n	8005610 <MemManage_Handler+0x4>

08005612 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005612:	b480      	push	{r7}
 8005614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005616:	e7fe      	b.n	8005616 <BusFault_Handler+0x4>

08005618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005618:	b480      	push	{r7}
 800561a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800561c:	e7fe      	b.n	800561c <UsageFault_Handler+0x4>

0800561e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800561e:	b480      	push	{r7}
 8005620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005622:	bf00      	nop
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800563a:	b480      	push	{r7}
 800563c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800563e:	bf00      	nop
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800564c:	f001 fc30 	bl	8006eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005650:	bf00      	nop
 8005652:	bd80      	pop	{r7, pc}

08005654 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005658:	4802      	ldr	r0, [pc, #8]	; (8005664 <DMA1_Stream1_IRQHandler+0x10>)
 800565a:	f002 fcbd 	bl	8007fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	20000d0c 	.word	0x20000d0c

08005668 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800566c:	4802      	ldr	r0, [pc, #8]	; (8005678 <DMA1_Stream3_IRQHandler+0x10>)
 800566e:	f002 fcb3 	bl	8007fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000d6c 	.word	0x20000d6c

0800567c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005680:	4802      	ldr	r0, [pc, #8]	; (800568c <DMA1_Stream5_IRQHandler+0x10>)
 8005682:	f002 fca9 	bl	8007fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005686:	bf00      	nop
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000cac 	.word	0x20000cac

08005690 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005694:	4803      	ldr	r0, [pc, #12]	; (80056a4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005696:	f006 ff6b 	bl	800c570 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 800569a:	4803      	ldr	r0, [pc, #12]	; (80056a8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 800569c:	f006 ff68 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80056a0:	bf00      	nop
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	20000a2c 	.word	0x20000a2c
 80056a8:	20000b4c 	.word	0x20000b4c

080056ac <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056b0:	4803      	ldr	r0, [pc, #12]	; (80056c0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 80056b2:	f006 ff5d 	bl	800c570 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 80056b6:	4803      	ldr	r0, [pc, #12]	; (80056c4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 80056b8:	f006 ff5a 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80056bc:	bf00      	nop
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20000a2c 	.word	0x20000a2c
 80056c4:	20000b94 	.word	0x20000b94

080056c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80056cc:	4802      	ldr	r0, [pc, #8]	; (80056d8 <USART3_IRQHandler+0x10>)
 80056ce:	f007 fef7 	bl	800d4c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000c68 	.word	0x20000c68

080056dc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 80056e0:	4802      	ldr	r0, [pc, #8]	; (80056ec <TIM8_UP_TIM13_IRQHandler+0x10>)
 80056e2:	f006 ff45 	bl	800c570 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80056e6:	bf00      	nop
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	20000bdc 	.word	0x20000bdc

080056f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80056f4:	4802      	ldr	r0, [pc, #8]	; (8005700 <DMA2_Stream0_IRQHandler+0x10>)
 80056f6:	f002 fc6f 	bl	8007fd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80056fa:	bf00      	nop
 80056fc:	bd80      	pop	{r7, pc}
 80056fe:	bf00      	nop
 8005700:	20000880 	.word	0x20000880

08005704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005704:	b480      	push	{r7}
 8005706:	af00      	add	r7, sp, #0
  return 1;
 8005708:	2301      	movs	r3, #1
}
 800570a:	4618      	mov	r0, r3
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <_kill>:

int _kill(int pid, int sig)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b082      	sub	sp, #8
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800571e:	f00e fb81 	bl	8013e24 <__errno>
 8005722:	4603      	mov	r3, r0
 8005724:	2216      	movs	r2, #22
 8005726:	601a      	str	r2, [r3, #0]
  return -1;
 8005728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <_exit>:

void _exit (int status)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800573c:	f04f 31ff 	mov.w	r1, #4294967295
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ffe7 	bl	8005714 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005746:	e7fe      	b.n	8005746 <_exit+0x12>

08005748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005754:	2300      	movs	r3, #0
 8005756:	617b      	str	r3, [r7, #20]
 8005758:	e00a      	b.n	8005770 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800575a:	f3af 8000 	nop.w
 800575e:	4601      	mov	r1, r0
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	60ba      	str	r2, [r7, #8]
 8005766:	b2ca      	uxtb	r2, r1
 8005768:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	3301      	adds	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	dbf0      	blt.n	800575a <_read+0x12>
  }

  return len;
 8005778:	687b      	ldr	r3, [r7, #4]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
 8005792:	e009      	b.n	80057a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	60ba      	str	r2, [r7, #8]
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	3301      	adds	r3, #1
 80057a6:	617b      	str	r3, [r7, #20]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	dbf1      	blt.n	8005794 <_write+0x12>
  }
  return len;
 80057b0:	687b      	ldr	r3, [r7, #4]
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <_close>:

int _close(int file)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80057c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057e2:	605a      	str	r2, [r3, #4]
  return 0;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_isatty>:

int _isatty(int file)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80057fa:	2301      	movs	r3, #1
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005808:	b480      	push	{r7}
 800580a:	b085      	sub	sp, #20
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
	...

08005824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800582c:	4a14      	ldr	r2, [pc, #80]	; (8005880 <_sbrk+0x5c>)
 800582e:	4b15      	ldr	r3, [pc, #84]	; (8005884 <_sbrk+0x60>)
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005838:	4b13      	ldr	r3, [pc, #76]	; (8005888 <_sbrk+0x64>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d102      	bne.n	8005846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005840:	4b11      	ldr	r3, [pc, #68]	; (8005888 <_sbrk+0x64>)
 8005842:	4a12      	ldr	r2, [pc, #72]	; (800588c <_sbrk+0x68>)
 8005844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <_sbrk+0x64>)
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4413      	add	r3, r2
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	429a      	cmp	r2, r3
 8005852:	d207      	bcs.n	8005864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005854:	f00e fae6 	bl	8013e24 <__errno>
 8005858:	4603      	mov	r3, r0
 800585a:	220c      	movs	r2, #12
 800585c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800585e:	f04f 33ff 	mov.w	r3, #4294967295
 8005862:	e009      	b.n	8005878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005864:	4b08      	ldr	r3, [pc, #32]	; (8005888 <_sbrk+0x64>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800586a:	4b07      	ldr	r3, [pc, #28]	; (8005888 <_sbrk+0x64>)
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4413      	add	r3, r2
 8005872:	4a05      	ldr	r2, [pc, #20]	; (8005888 <_sbrk+0x64>)
 8005874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005876:	68fb      	ldr	r3, [r7, #12]
}
 8005878:	4618      	mov	r0, r3
 800587a:	3718      	adds	r7, #24
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20020000 	.word	0x20020000
 8005884:	00000400 	.word	0x00000400
 8005888:	20000eb8 	.word	0x20000eb8
 800588c:	200015a0 	.word	0x200015a0

08005890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005890:	b480      	push	{r7}
 8005892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005894:	4b06      	ldr	r3, [pc, #24]	; (80058b0 <SystemInit+0x20>)
 8005896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800589a:	4a05      	ldr	r2, [pc, #20]	; (80058b0 <SystemInit+0x20>)
 800589c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80058a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80058a4:	bf00      	nop
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	e000ed00 	.word	0xe000ed00

080058b4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80058b4:	b480      	push	{r7}
 80058b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80058b8:	f3bf 8f4f 	dsb	sy
}
 80058bc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80058be:	4b06      	ldr	r3, [pc, #24]	; (80058d8 <__NVIC_SystemReset+0x24>)
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80058c6:	4904      	ldr	r1, [pc, #16]	; (80058d8 <__NVIC_SystemReset+0x24>)
 80058c8:	4b04      	ldr	r3, [pc, #16]	; (80058dc <__NVIC_SystemReset+0x28>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80058ce:	f3bf 8f4f 	dsb	sy
}
 80058d2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80058d4:	bf00      	nop
 80058d6:	e7fd      	b.n	80058d4 <__NVIC_SystemReset+0x20>
 80058d8:	e000ed00 	.word	0xe000ed00
 80058dc:	05fa0004 	.word	0x05fa0004

080058e0 <init>:
int velocity_offset = 0;
float adc_avg;
uint32_t dataadc[2];

void init()
{
 80058e0:	b598      	push	{r3, r4, r7, lr}
 80058e2:	af00      	add	r7, sp, #0
    READRAM();
 80058e4:	f000 f868 	bl	80059b8 <READRAM>
    strcpy(datatelemetri.state, "LAUNCH_WAIT");
 80058e8:	4a24      	ldr	r2, [pc, #144]	; (800597c <init+0x9c>)
 80058ea:	4b25      	ldr	r3, [pc, #148]	; (8005980 <init+0xa0>)
 80058ec:	4614      	mov	r4, r2
 80058ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 80058f0:	6020      	str	r0, [r4, #0]
 80058f2:	6061      	str	r1, [r4, #4]
 80058f4:	60a2      	str	r2, [r4, #8]
    strcpy(datatelemetri.echocmd, "CXON");
 80058f6:	4b23      	ldr	r3, [pc, #140]	; (8005984 <init+0xa4>)
 80058f8:	4a23      	ldr	r2, [pc, #140]	; (8005988 <init+0xa8>)
 80058fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80058fe:	6018      	str	r0, [r3, #0]
 8005900:	3304      	adds	r3, #4
 8005902:	7019      	strb	r1, [r3, #0]
    strcpy(gpsjam, "00");
 8005904:	4b21      	ldr	r3, [pc, #132]	; (800598c <init+0xac>)
 8005906:	4a22      	ldr	r2, [pc, #136]	; (8005990 <init+0xb0>)
 8005908:	6812      	ldr	r2, [r2, #0]
 800590a:	4611      	mov	r1, r2
 800590c:	8019      	strh	r1, [r3, #0]
 800590e:	3302      	adds	r3, #2
 8005910:	0c12      	lsrs	r2, r2, #16
 8005912:	701a      	strb	r2, [r3, #0]
    strcpy(gpsmenit, "00");
 8005914:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <init+0xb4>)
 8005916:	4a1e      	ldr	r2, [pc, #120]	; (8005990 <init+0xb0>)
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	4611      	mov	r1, r2
 800591c:	8019      	strh	r1, [r3, #0]
 800591e:	3302      	adds	r3, #2
 8005920:	0c12      	lsrs	r2, r2, #16
 8005922:	701a      	strb	r2, [r3, #0]
    strcpy(gpsdetik, "00");
 8005924:	4b1c      	ldr	r3, [pc, #112]	; (8005998 <init+0xb8>)
 8005926:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <init+0xb0>)
 8005928:	6812      	ldr	r2, [r2, #0]
 800592a:	4611      	mov	r1, r2
 800592c:	8019      	strh	r1, [r3, #0]
 800592e:	3302      	adds	r3, #2
 8005930:	0c12      	lsrs	r2, r2, #16
 8005932:	701a      	strb	r2, [r3, #0]
    datatelemetri.fmode = 'F';
 8005934:	4b19      	ldr	r3, [pc, #100]	; (800599c <init+0xbc>)
 8005936:	2246      	movs	r2, #70	; 0x46
 8005938:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
    gpslat = 0.0000;
 800593c:	4b18      	ldr	r3, [pc, #96]	; (80059a0 <init+0xc0>)
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	601a      	str	r2, [r3, #0]
    gpslong = 0.0000;
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <init+0xc4>)
 8005946:	f04f 0200 	mov.w	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
    gpsalt = 0.0;
 800594c:	4b16      	ldr	r3, [pc, #88]	; (80059a8 <init+0xc8>)
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
    gpssat = 0;
 8005954:	4b15      	ldr	r3, [pc, #84]	; (80059ac <init+0xcc>)
 8005956:	2200      	movs	r2, #0
 8005958:	701a      	strb	r2, [r3, #0]
    servogerak(&htim3, TIM_CHANNEL_1, 0);
 800595a:	2200      	movs	r2, #0
 800595c:	2100      	movs	r1, #0
 800595e:	4814      	ldr	r0, [pc, #80]	; (80059b0 <init+0xd0>)
 8005960:	f7ff f936 	bl	8004bd0 <servogerak>
	servogerak(&htim3, TIM_CHANNEL_3, 0);
 8005964:	2200      	movs	r2, #0
 8005966:	2108      	movs	r1, #8
 8005968:	4811      	ldr	r0, [pc, #68]	; (80059b0 <init+0xd0>)
 800596a:	f7ff f931 	bl	8004bd0 <servogerak>
    servogerak(&htim4, TIM_CHANNEL_1, 0);
 800596e:	2200      	movs	r2, #0
 8005970:	2100      	movs	r1, #0
 8005972:	4810      	ldr	r0, [pc, #64]	; (80059b4 <init+0xd4>)
 8005974:	f7ff f92c 	bl	8004bd0 <servogerak>
}
 8005978:	bf00      	nop
 800597a:	bd98      	pop	{r3, r4, r7, pc}
 800597c:	20001027 	.word	0x20001027
 8005980:	080178a4 	.word	0x080178a4
 8005984:	20001064 	.word	0x20001064
 8005988:	080178b0 	.word	0x080178b0
 800598c:	200011d8 	.word	0x200011d8
 8005990:	080178b8 	.word	0x080178b8
 8005994:	200011d4 	.word	0x200011d4
 8005998:	200011d0 	.word	0x200011d0
 800599c:	20000ec4 	.word	0x20000ec4
 80059a0:	200011c0 	.word	0x200011c0
 80059a4:	200011c4 	.word	0x200011c4
 80059a8:	200011c8 	.word	0x200011c8
 80059ac:	200011cc 	.word	0x200011cc
 80059b0:	20000a74 	.word	0x20000a74
 80059b4:	20000abc 	.word	0x20000abc

080059b8 <READRAM>:

void READRAM()
{
 80059b8:	b4b0      	push	{r4, r5, r7}
 80059ba:	af00      	add	r7, sp, #0
    counting = TM_BKPSRAM_Read16(PACKETCOUNT_ADR);
 80059bc:	4b31      	ldr	r3, [pc, #196]	; (8005a84 <READRAM+0xcc>)
 80059be:	881b      	ldrh	r3, [r3, #0]
 80059c0:	b29a      	uxth	r2, r3
 80059c2:	4b31      	ldr	r3, [pc, #196]	; (8005a88 <READRAM+0xd0>)
 80059c4:	801a      	strh	r2, [r3, #0]
    switch(TM_BKPSRAM_Read8(STATEIND_ADR))
 80059c6:	4b31      	ldr	r3, [pc, #196]	; (8005a8c <READRAM+0xd4>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d83b      	bhi.n	8005a48 <READRAM+0x90>
 80059d0:	a201      	add	r2, pc, #4	; (adr r2, 80059d8 <READRAM+0x20>)
 80059d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d6:	bf00      	nop
 80059d8:	080059ed 	.word	0x080059ed
 80059dc:	080059ff 	.word	0x080059ff
 80059e0:	08005a17 	.word	0x08005a17
 80059e4:	08005a23 	.word	0x08005a23
 80059e8:	08005a37 	.word	0x08005a37
    {
		case 0:
			strcpy(datatelemetri.state, "ASCENT");
 80059ec:	4b28      	ldr	r3, [pc, #160]	; (8005a90 <READRAM+0xd8>)
 80059ee:	4a29      	ldr	r2, [pc, #164]	; (8005a94 <READRAM+0xdc>)
 80059f0:	6810      	ldr	r0, [r2, #0]
 80059f2:	6018      	str	r0, [r3, #0]
 80059f4:	8891      	ldrh	r1, [r2, #4]
 80059f6:	7992      	ldrb	r2, [r2, #6]
 80059f8:	8099      	strh	r1, [r3, #4]
 80059fa:	719a      	strb	r2, [r3, #6]
			break;
 80059fc:	e024      	b.n	8005a48 <READRAM+0x90>
		case 1:
			strcpy(datatelemetri.state, "ROCKET_SEPARATION");
 80059fe:	4a24      	ldr	r2, [pc, #144]	; (8005a90 <READRAM+0xd8>)
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <READRAM+0xe0>)
 8005a02:	4615      	mov	r5, r2
 8005a04:	461c      	mov	r4, r3
 8005a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005a08:	6028      	str	r0, [r5, #0]
 8005a0a:	6069      	str	r1, [r5, #4]
 8005a0c:	60aa      	str	r2, [r5, #8]
 8005a0e:	60eb      	str	r3, [r5, #12]
 8005a10:	8823      	ldrh	r3, [r4, #0]
 8005a12:	822b      	strh	r3, [r5, #16]
			break;
 8005a14:	e018      	b.n	8005a48 <READRAM+0x90>
		case 2:
			strcpy(datatelemetri.state, "DESCENT");
 8005a16:	4a1e      	ldr	r2, [pc, #120]	; (8005a90 <READRAM+0xd8>)
 8005a18:	4b20      	ldr	r3, [pc, #128]	; (8005a9c <READRAM+0xe4>)
 8005a1a:	cb03      	ldmia	r3!, {r0, r1}
 8005a1c:	6010      	str	r0, [r2, #0]
 8005a1e:	6051      	str	r1, [r2, #4]
			break;
 8005a20:	e012      	b.n	8005a48 <READRAM+0x90>
		case 3:
			strcpy(datatelemetri.state, "HS_RELEASE");
 8005a22:	4a1b      	ldr	r2, [pc, #108]	; (8005a90 <READRAM+0xd8>)
 8005a24:	4b1e      	ldr	r3, [pc, #120]	; (8005aa0 <READRAM+0xe8>)
 8005a26:	cb03      	ldmia	r3!, {r0, r1}
 8005a28:	6010      	str	r0, [r2, #0]
 8005a2a:	6051      	str	r1, [r2, #4]
 8005a2c:	8819      	ldrh	r1, [r3, #0]
 8005a2e:	789b      	ldrb	r3, [r3, #2]
 8005a30:	8111      	strh	r1, [r2, #8]
 8005a32:	7293      	strb	r3, [r2, #10]
			break;
 8005a34:	e008      	b.n	8005a48 <READRAM+0x90>
		case 4:
			strcpy(datatelemetri.state, "LANDED");
 8005a36:	4b16      	ldr	r3, [pc, #88]	; (8005a90 <READRAM+0xd8>)
 8005a38:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <READRAM+0xec>)
 8005a3a:	6810      	ldr	r0, [r2, #0]
 8005a3c:	6018      	str	r0, [r3, #0]
 8005a3e:	8891      	ldrh	r1, [r2, #4]
 8005a40:	7992      	ldrb	r2, [r2, #6]
 8005a42:	8099      	strh	r1, [r3, #4]
 8005a44:	719a      	strb	r2, [r3, #6]
			break;
 8005a46:	bf00      	nop
    }
    refalt = TM_BKPSRAM_ReadFloat(REFALT_ADR);
 8005a48:	4b17      	ldr	r3, [pc, #92]	; (8005aa8 <READRAM+0xf0>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a17      	ldr	r2, [pc, #92]	; (8005aac <READRAM+0xf4>)
 8005a4e:	6013      	str	r3, [r2, #0]
    flagstate = TM_BKPSRAM_Read8(STATEIND_ADR);
 8005a50:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <READRAM+0xd4>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	4b16      	ldr	r3, [pc, #88]	; (8005ab0 <READRAM+0xf8>)
 8005a58:	701a      	strb	r2, [r3, #0]
    flagtel = TM_BKPSRAM_Read8(FLAGTEL_ADR);
 8005a5a:	4b16      	ldr	r3, [pc, #88]	; (8005ab4 <READRAM+0xfc>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	4b15      	ldr	r3, [pc, #84]	; (8005ab8 <READRAM+0x100>)
 8005a62:	701a      	strb	r2, [r3, #0]
    datatelemetri.hsdeploy = TM_BKPSRAM_Read8(HSDEPLOY_ADR);
 8005a64:	4b15      	ldr	r3, [pc, #84]	; (8005abc <READRAM+0x104>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <READRAM+0x108>)
 8005a6c:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    datatelemetri.pcdeploy = TM_BKPSRAM_Read8(PCDEPLOY_ADR);
 8005a70:	4b14      	ldr	r3, [pc, #80]	; (8005ac4 <READRAM+0x10c>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4b12      	ldr	r3, [pc, #72]	; (8005ac0 <READRAM+0x108>)
 8005a78:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
}
 8005a7c:	bf00      	nop
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bcb0      	pop	{r4, r5, r7}
 8005a82:	4770      	bx	lr
 8005a84:	40024000 	.word	0x40024000
 8005a88:	20000048 	.word	0x20000048
 8005a8c:	40024096 	.word	0x40024096
 8005a90:	20001027 	.word	0x20001027
 8005a94:	080178bc 	.word	0x080178bc
 8005a98:	080178c4 	.word	0x080178c4
 8005a9c:	080178d8 	.word	0x080178d8
 8005aa0:	080178e0 	.word	0x080178e0
 8005aa4:	080178ec 	.word	0x080178ec
 8005aa8:	40024032 	.word	0x40024032
 8005aac:	20001084 	.word	0x20001084
 8005ab0:	20000ec1 	.word	0x20000ec1
 8005ab4:	400240c8 	.word	0x400240c8
 8005ab8:	20000ebf 	.word	0x20000ebf
 8005abc:	400240fa 	.word	0x400240fa
 8005ac0:	20000ec4 	.word	0x20000ec4
 8005ac4:	4002412c 	.word	0x4002412c

08005ac8 <RESETSRAM>:

void RESETSRAM()
{
 8005ac8:	b480      	push	{r7}
 8005aca:	af00      	add	r7, sp, #0
    TM_BKPSRAM_Write16(PACKETCOUNT_ADR, counting);
 8005acc:	4b0d      	ldr	r3, [pc, #52]	; (8005b04 <RESETSRAM+0x3c>)
 8005ace:	4a0e      	ldr	r2, [pc, #56]	; (8005b08 <RESETSRAM+0x40>)
 8005ad0:	8812      	ldrh	r2, [r2, #0]
 8005ad2:	801a      	strh	r2, [r3, #0]
    TM_BKPSRAM_WriteFloat(REFALT_ADR, refalt);
 8005ad4:	4a0d      	ldr	r2, [pc, #52]	; (8005b0c <RESETSRAM+0x44>)
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <RESETSRAM+0x48>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	6013      	str	r3, [r2, #0]
    TM_BKPSRAM_Write8(STATEIND_ADR, flagstate);
 8005adc:	4b0d      	ldr	r3, [pc, #52]	; (8005b14 <RESETSRAM+0x4c>)
 8005ade:	4a0e      	ldr	r2, [pc, #56]	; (8005b18 <RESETSRAM+0x50>)
 8005ae0:	7812      	ldrb	r2, [r2, #0]
 8005ae2:	701a      	strb	r2, [r3, #0]
    TM_BKPSRAM_Write8(HSDEPLOY_ADR, datatelemetri.hsdeploy);
 8005ae4:	4b0d      	ldr	r3, [pc, #52]	; (8005b1c <RESETSRAM+0x54>)
 8005ae6:	4a0e      	ldr	r2, [pc, #56]	; (8005b20 <RESETSRAM+0x58>)
 8005ae8:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 8005aec:	701a      	strb	r2, [r3, #0]
    TM_BKPSRAM_Write8(PCDEPLOY_ADR, datatelemetri.pcdeploy);
 8005aee:	4b0d      	ldr	r3, [pc, #52]	; (8005b24 <RESETSRAM+0x5c>)
 8005af0:	4a0b      	ldr	r2, [pc, #44]	; (8005b20 <RESETSRAM+0x58>)
 8005af2:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 8005af6:	701a      	strb	r2, [r3, #0]
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40024000 	.word	0x40024000
 8005b08:	20000048 	.word	0x20000048
 8005b0c:	40024032 	.word	0x40024032
 8005b10:	20001084 	.word	0x20001084
 8005b14:	40024096 	.word	0x40024096
 8005b18:	20000ec1 	.word	0x20000ec1
 8005b1c:	400240fa 	.word	0x400240fa
 8005b20:	20000ec4 	.word	0x20000ec4
 8005b24:	4002412c 	.word	0x4002412c

08005b28 <adcinit>:

void adcinit()
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
	// Air speed calibration
	uint32_t adc_data = 0;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
	HAL_ADC_Start(&hadc1);
 8005b32:	4833      	ldr	r0, [pc, #204]	; (8005c00 <adcinit+0xd8>)
 8005b34:	f001 fa44 	bl	8006fc0 <HAL_ADC_Start>
	for (int i = 0; i < VELOCITY_OFFSET_SIZE; ++i)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	e015      	b.n	8005b6a <adcinit+0x42>
	{
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8005b3e:	f04f 31ff 	mov.w	r1, #4294967295
 8005b42:	482f      	ldr	r0, [pc, #188]	; (8005c00 <adcinit+0xd8>)
 8005b44:	f001 fb41 	bl	80071ca <HAL_ADC_PollForConversion>
		adc_data = HAL_ADC_GetValue(&hadc1);
 8005b48:	482d      	ldr	r0, [pc, #180]	; (8005c00 <adcinit+0xd8>)
 8005b4a:	f001 fcd9 	bl	8007500 <HAL_ADC_GetValue>
 8005b4e:	6138      	str	r0, [r7, #16]
		velocity_offset += adc_data - 2048;
 8005b50:	4b2c      	ldr	r3, [pc, #176]	; (8005c04 <adcinit+0xdc>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	461a      	mov	r2, r3
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4413      	add	r3, r2
 8005b5a:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8005b5e:	461a      	mov	r2, r3
 8005b60:	4b28      	ldr	r3, [pc, #160]	; (8005c04 <adcinit+0xdc>)
 8005b62:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VELOCITY_OFFSET_SIZE; ++i)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	3301      	adds	r3, #1
 8005b68:	617b      	str	r3, [r7, #20]
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	2b13      	cmp	r3, #19
 8005b6e:	dde6      	ble.n	8005b3e <adcinit+0x16>
	}
	HAL_ADC_Stop(&hadc1);
 8005b70:	4823      	ldr	r0, [pc, #140]	; (8005c00 <adcinit+0xd8>)
 8005b72:	f001 faf7 	bl	8007164 <HAL_ADC_Stop>
	velocity_offset /= VELOCITY_OFFSET_SIZE;
 8005b76:	4b23      	ldr	r3, [pc, #140]	; (8005c04 <adcinit+0xdc>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a23      	ldr	r2, [pc, #140]	; (8005c08 <adcinit+0xe0>)
 8005b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8005b80:	10d2      	asrs	r2, r2, #3
 8005b82:	17db      	asrs	r3, r3, #31
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	4a1f      	ldr	r2, [pc, #124]	; (8005c04 <adcinit+0xdc>)
 8005b88:	6013      	str	r3, [r2, #0]

	// Reinitialize ADC for multiple channel reading
	ADC_ChannelConfTypeDef sConfig = {0};
 8005b8a:	463b      	mov	r3, r7
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	605a      	str	r2, [r3, #4]
 8005b92:	609a      	str	r2, [r3, #8]
 8005b94:	60da      	str	r2, [r3, #12]

	hadc1.Init.NbrOfConversion = 2;
 8005b96:	4b1a      	ldr	r3, [pc, #104]	; (8005c00 <adcinit+0xd8>)
 8005b98:	2202      	movs	r2, #2
 8005b9a:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005b9c:	4818      	ldr	r0, [pc, #96]	; (8005c00 <adcinit+0xd8>)
 8005b9e:	f001 f9cb 	bl	8006f38 <HAL_ADC_Init>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <adcinit+0x84>
	{
		Error_Handler();
 8005ba8:	f7fe fce8 	bl	800457c <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_9;
 8005bac:	2309      	movs	r3, #9
 8005bae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8005bb4:	2305      	movs	r3, #5
 8005bb6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bb8:	463b      	mov	r3, r7
 8005bba:	4619      	mov	r1, r3
 8005bbc:	4810      	ldr	r0, [pc, #64]	; (8005c00 <adcinit+0xd8>)
 8005bbe:	f001 fcc1 	bl	8007544 <HAL_ADC_ConfigChannel>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <adcinit+0xa4>
	{
		Error_Handler();
 8005bc8:	f7fe fcd8 	bl	800457c <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_10;
 8005bcc:	230a      	movs	r3, #10
 8005bce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8005bd4:	2307      	movs	r3, #7
 8005bd6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005bd8:	463b      	mov	r3, r7
 8005bda:	4619      	mov	r1, r3
 8005bdc:	4808      	ldr	r0, [pc, #32]	; (8005c00 <adcinit+0xd8>)
 8005bde:	f001 fcb1 	bl	8007544 <HAL_ADC_ConfigChannel>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <adcinit+0xc4>
	{
		Error_Handler();
 8005be8:	f7fe fcc8 	bl	800457c <Error_Handler>
	}

	// Start ADC DMA
	HAL_ADC_Start_DMA(&hadc1, dataadc, 2);
 8005bec:	2202      	movs	r2, #2
 8005bee:	4907      	ldr	r1, [pc, #28]	; (8005c0c <adcinit+0xe4>)
 8005bf0:	4803      	ldr	r0, [pc, #12]	; (8005c00 <adcinit+0xd8>)
 8005bf2:	f001 fb75 	bl	80072e0 <HAL_ADC_Start_DMA>
}
 8005bf6:	bf00      	nop
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	20000838 	.word	0x20000838
 8005c04:	20001204 	.word	0x20001204
 8005c08:	66666667 	.word	0x66666667
 8005c0c:	2000120c 	.word	0x2000120c

08005c10 <bno055_init>:

void bno055_init()
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	af00      	add	r7, sp, #0
    bno055_assignI2C(&hi2c2);
 8005c14:	4817      	ldr	r0, [pc, #92]	; (8005c74 <bno055_init+0x64>)
 8005c16:	f7fc ff3b 	bl	8002a90 <bno055_assignI2C>
    bno055_setup();
 8005c1a:	f7fd f8a3 	bl	8002d64 <bno055_setup>
    bno055_setOperationModeNDOF();
 8005c1e:	f7fd f88e 	bl	8002d3e <bno055_setOperationModeNDOF>
//			bno055_setCalibrationData(calData);
//			break;
//		}
//    }

    HAL_Delay(500);
 8005c22:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c26:	f001 f963 	bl	8006ef0 <HAL_Delay>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c30:	4811      	ldr	r0, [pc, #68]	; (8005c78 <bno055_init+0x68>)
 8005c32:	f002 fdd7 	bl	80087e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8005c36:	2200      	movs	r2, #0
 8005c38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c3c:	480e      	ldr	r0, [pc, #56]	; (8005c78 <bno055_init+0x68>)
 8005c3e:	f002 fdd1 	bl	80087e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8005c42:	2200      	movs	r2, #0
 8005c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005c48:	480b      	ldr	r0, [pc, #44]	; (8005c78 <bno055_init+0x68>)
 8005c4a:	f002 fdcb 	bl	80087e4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c54:	4808      	ldr	r0, [pc, #32]	; (8005c78 <bno055_init+0x68>)
 8005c56:	f002 fdc5 	bl	80087e4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 8005c5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c5e:	f001 f947 	bl	8006ef0 <HAL_Delay>

    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8005c62:	2201      	movs	r2, #1
 8005c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005c68:	4803      	ldr	r0, [pc, #12]	; (8005c78 <bno055_init+0x68>)
 8005c6a:	f002 fdbb 	bl	80087e4 <HAL_GPIO_WritePin>
}
 8005c6e:	bf00      	nop
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	200008e0 	.word	0x200008e0
 8005c78:	40021000 	.word	0x40021000
 8005c7c:	00000000 	.word	0x00000000

08005c80 <ADC_measure>:

void ADC_measure()
{
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
	adc_avg = 0;
 8005c86:	4b8c      	ldr	r3, [pc, #560]	; (8005eb8 <ADC_measure+0x238>)
 8005c88:	f04f 0200 	mov.w	r2, #0
 8005c8c:	601a      	str	r2, [r3, #0]
	 * 
	 * NOTE: R1 is 10k, R2 is 4k7 and the battery voltage is 8.4 V
	 * here we use 2.68 as ADC_Ref and 3333 as MAX_ADC since the highest possible output of
	 * voltage divider is ± 2.68 V while the actual ADC_Ref voltage is 3.3 V
	 */
	float sum = 0;
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	607b      	str	r3, [r7, #4]
	readings[ind_] = ((2.68 / 3333) * dataadc[0]) * (14.7 / 4.7);
 8005c94:	4b89      	ldr	r3, [pc, #548]	; (8005ebc <ADC_measure+0x23c>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f7fa fc33 	bl	8000504 <__aeabi_ui2d>
 8005c9e:	a37c      	add	r3, pc, #496	; (adr r3, 8005e90 <ADC_measure+0x210>)
 8005ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca4:	f7fa fca8 	bl	80005f8 <__aeabi_dmul>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4610      	mov	r0, r2
 8005cae:	4619      	mov	r1, r3
 8005cb0:	a379      	add	r3, pc, #484	; (adr r3, 8005e98 <ADC_measure+0x218>)
 8005cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb6:	f7fa fc9f 	bl	80005f8 <__aeabi_dmul>
 8005cba:	4602      	mov	r2, r0
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	4980      	ldr	r1, [pc, #512]	; (8005ec0 <ADC_measure+0x240>)
 8005cc0:	680c      	ldr	r4, [r1, #0]
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	f7fa ff8f 	bl	8000be8 <__aeabi_d2f>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	497d      	ldr	r1, [pc, #500]	; (8005ec4 <ADC_measure+0x244>)
 8005cce:	00a3      	lsls	r3, r4, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	601a      	str	r2, [r3, #0]
	ind_ = (ind_ + 1) % FILTER_SIZE;
 8005cd4:	4b7a      	ldr	r3, [pc, #488]	; (8005ec0 <ADC_measure+0x240>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	1c59      	adds	r1, r3, #1
 8005cda:	4b7b      	ldr	r3, [pc, #492]	; (8005ec8 <ADC_measure+0x248>)
 8005cdc:	fb83 2301 	smull	r2, r3, r3, r1
 8005ce0:	105a      	asrs	r2, r3, #1
 8005ce2:	17cb      	asrs	r3, r1, #31
 8005ce4:	1ad2      	subs	r2, r2, r3
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	1aca      	subs	r2, r1, r3
 8005cee:	4b74      	ldr	r3, [pc, #464]	; (8005ec0 <ADC_measure+0x240>)
 8005cf0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FILTER_SIZE; i++)
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	603b      	str	r3, [r7, #0]
 8005cf6:	e01f      	b.n	8005d38 <ADC_measure+0xb8>
	{
		sum += readings[i];
 8005cf8:	4a72      	ldr	r2, [pc, #456]	; (8005ec4 <ADC_measure+0x244>)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4413      	add	r3, r2
 8005d00:	edd3 7a00 	vldr	s15, [r3]
 8005d04:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d0c:	edc7 7a01 	vstr	s15, [r7, #4]
		adc_avg += dataadc[1] - velocity_offset;
 8005d10:	4b6a      	ldr	r3, [pc, #424]	; (8005ebc <ADC_measure+0x23c>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	4a6d      	ldr	r2, [pc, #436]	; (8005ecc <ADC_measure+0x24c>)
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	1a9b      	subs	r3, r3, r2
 8005d1a:	ee07 3a90 	vmov	s15, r3
 8005d1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005d22:	4b65      	ldr	r3, [pc, #404]	; (8005eb8 <ADC_measure+0x238>)
 8005d24:	edd3 7a00 	vldr	s15, [r3]
 8005d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d2c:	4b62      	ldr	r3, [pc, #392]	; (8005eb8 <ADC_measure+0x238>)
 8005d2e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FILTER_SIZE; i++)
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	3301      	adds	r3, #1
 8005d36:	603b      	str	r3, [r7, #0]
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	dddc      	ble.n	8005cf8 <ADC_measure+0x78>
	}
	datatelemetri.voltage = sum / FILTER_SIZE;
 8005d3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d42:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8005d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d4a:	4b61      	ldr	r3, [pc, #388]	; (8005ed0 <ADC_measure+0x250>)
 8005d4c:	edc3 7a62 	vstr	s15, [r3, #392]	; 0x188
	adc_avg /= FILTER_SIZE;
 8005d50:	4b59      	ldr	r3, [pc, #356]	; (8005eb8 <ADC_measure+0x238>)
 8005d52:	ed93 7a00 	vldr	s14, [r3]
 8005d56:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8005d5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d5e:	4b56      	ldr	r3, [pc, #344]	; (8005eb8 <ADC_measure+0x238>)
 8005d60:	edc3 7a00 	vstr	s15, [r3]
	 *
	 * Indicated Airspeed (IAS) in m/s, Air density (RHO) = 1.204
	 * v = sqrt(2 * P / RHO)
	 * v = sqrt(10000 * (Vout / Vs - 0.5) / RHO)
	 */
	if (adc_avg >= (2048 - ZERO_SPAN) && adc_avg <= (2048 + ZERO_SPAN))
 8005d64:	4b54      	ldr	r3, [pc, #336]	; (8005eb8 <ADC_measure+0x238>)
 8005d66:	edd3 7a00 	vldr	s15, [r3]
 8005d6a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8005ed4 <ADC_measure+0x254>
 8005d6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d76:	db0f      	blt.n	8005d98 <ADC_measure+0x118>
 8005d78:	4b4f      	ldr	r3, [pc, #316]	; (8005eb8 <ADC_measure+0x238>)
 8005d7a:	edd3 7a00 	vldr	s15, [r3]
 8005d7e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8005ed8 <ADC_measure+0x258>
 8005d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d8a:	d805      	bhi.n	8005d98 <ADC_measure+0x118>
	{
		datatelemetri.airspeed = 0;
 8005d8c:	4b50      	ldr	r3, [pc, #320]	; (8005ed0 <ADC_measure+0x250>)
 8005d8e:	f04f 0200 	mov.w	r2, #0
 8005d92:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		else
		{
			datatelemetri.airspeed = sqrtf((10000.0 * (adc_avg / 4096.0 - 0.5)) / RHO);
		}
	}
}
 8005d96:	e074      	b.n	8005e82 <ADC_measure+0x202>
		if (adc_avg < 2048 - ZERO_SPAN)
 8005d98:	4b47      	ldr	r3, [pc, #284]	; (8005eb8 <ADC_measure+0x238>)
 8005d9a:	edd3 7a00 	vldr	s15, [r3]
 8005d9e:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8005ed4 <ADC_measure+0x254>
 8005da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005daa:	d535      	bpl.n	8005e18 <ADC_measure+0x198>
			datatelemetri.airspeed = sqrtf((-10000.0 * (adc_avg / 4096.0 - 0.5)) / RHO);
 8005dac:	4b42      	ldr	r3, [pc, #264]	; (8005eb8 <ADC_measure+0x238>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fa fbc9 	bl	8000548 <__aeabi_f2d>
 8005db6:	f04f 0200 	mov.w	r2, #0
 8005dba:	4b48      	ldr	r3, [pc, #288]	; (8005edc <ADC_measure+0x25c>)
 8005dbc:	f7fa fd46 	bl	800084c <__aeabi_ddiv>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	f04f 0200 	mov.w	r2, #0
 8005dcc:	4b44      	ldr	r3, [pc, #272]	; (8005ee0 <ADC_measure+0x260>)
 8005dce:	f7fa fa5b 	bl	8000288 <__aeabi_dsub>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	a331      	add	r3, pc, #196	; (adr r3, 8005ea0 <ADC_measure+0x220>)
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fc0a 	bl	80005f8 <__aeabi_dmul>
 8005de4:	4602      	mov	r2, r0
 8005de6:	460b      	mov	r3, r1
 8005de8:	4610      	mov	r0, r2
 8005dea:	4619      	mov	r1, r3
 8005dec:	a32e      	add	r3, pc, #184	; (adr r3, 8005ea8 <ADC_measure+0x228>)
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f7fa fd2b 	bl	800084c <__aeabi_ddiv>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	f7fa fef3 	bl	8000be8 <__aeabi_d2f>
 8005e02:	4603      	mov	r3, r0
 8005e04:	ee00 3a10 	vmov	s0, r3
 8005e08:	f010 fd22 	bl	8016850 <sqrtf>
 8005e0c:	eef0 7a40 	vmov.f32	s15, s0
 8005e10:	4b2f      	ldr	r3, [pc, #188]	; (8005ed0 <ADC_measure+0x250>)
 8005e12:	edc3 7a63 	vstr	s15, [r3, #396]	; 0x18c
}
 8005e16:	e034      	b.n	8005e82 <ADC_measure+0x202>
			datatelemetri.airspeed = sqrtf((10000.0 * (adc_avg / 4096.0 - 0.5)) / RHO);
 8005e18:	4b27      	ldr	r3, [pc, #156]	; (8005eb8 <ADC_measure+0x238>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fa fb93 	bl	8000548 <__aeabi_f2d>
 8005e22:	f04f 0200 	mov.w	r2, #0
 8005e26:	4b2d      	ldr	r3, [pc, #180]	; (8005edc <ADC_measure+0x25c>)
 8005e28:	f7fa fd10 	bl	800084c <__aeabi_ddiv>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4610      	mov	r0, r2
 8005e32:	4619      	mov	r1, r3
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	4b29      	ldr	r3, [pc, #164]	; (8005ee0 <ADC_measure+0x260>)
 8005e3a:	f7fa fa25 	bl	8000288 <__aeabi_dsub>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	460b      	mov	r3, r1
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	a31a      	add	r3, pc, #104	; (adr r3, 8005eb0 <ADC_measure+0x230>)
 8005e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4c:	f7fa fbd4 	bl	80005f8 <__aeabi_dmul>
 8005e50:	4602      	mov	r2, r0
 8005e52:	460b      	mov	r3, r1
 8005e54:	4610      	mov	r0, r2
 8005e56:	4619      	mov	r1, r3
 8005e58:	a313      	add	r3, pc, #76	; (adr r3, 8005ea8 <ADC_measure+0x228>)
 8005e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5e:	f7fa fcf5 	bl	800084c <__aeabi_ddiv>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f7fa febd 	bl	8000be8 <__aeabi_d2f>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	ee00 3a10 	vmov	s0, r3
 8005e74:	f010 fcec 	bl	8016850 <sqrtf>
 8005e78:	eef0 7a40 	vmov.f32	s15, s0
 8005e7c:	4b14      	ldr	r3, [pc, #80]	; (8005ed0 <ADC_measure+0x250>)
 8005e7e:	edc3 7a63 	vstr	s15, [r3, #396]	; 0x18c
}
 8005e82:	bf00      	nop
 8005e84:	370c      	adds	r7, #12
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd90      	pop	{r4, r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	f3af 8000 	nop.w
 8005e90:	872763db 	.word	0x872763db
 8005e94:	3f4a591d 	.word	0x3f4a591d
 8005e98:	620ae4c3 	.word	0x620ae4c3
 8005e9c:	40090572 	.word	0x40090572
 8005ea0:	00000000 	.word	0x00000000
 8005ea4:	c0c38800 	.word	0xc0c38800
 8005ea8:	9999999a 	.word	0x9999999a
 8005eac:	3ff39999 	.word	0x3ff39999
 8005eb0:	00000000 	.word	0x00000000
 8005eb4:	40c38800 	.word	0x40c38800
 8005eb8:	20001208 	.word	0x20001208
 8005ebc:	2000120c 	.word	0x2000120c
 8005ec0:	20001200 	.word	0x20001200
 8005ec4:	200011ec 	.word	0x200011ec
 8005ec8:	66666667 	.word	0x66666667
 8005ecc:	20001204 	.word	0x20001204
 8005ed0:	20000ec4 	.word	0x20000ec4
 8005ed4:	44fe2000 	.word	0x44fe2000
 8005ed8:	4500f000 	.word	0x4500f000
 8005edc:	40b00000 	.word	0x40b00000
 8005ee0:	3fe00000 	.word	0x3fe00000

08005ee4 <buatcs>:

uint8_t buatcs(char dat_[])
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
    uint8_t hasil = 0, temp = 0;
 8005eec:	2300      	movs	r3, #0
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	73bb      	strb	r3, [r7, #14]
    uint16_t buffhasil = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < 175; i++)
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	e010      	b.n	8005f20 <buatcs+0x3c>
    {
        if (dat_[i]== '\0')
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00e      	beq.n	8005f28 <buatcs+0x44>
        {
            break;
        }
        else
        {
            buffhasil += dat_[i];
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	4413      	add	r3, r2
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	8afb      	ldrh	r3, [r7, #22]
 8005f16:	4413      	add	r3, r2
 8005f18:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < 175; i++)
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	613b      	str	r3, [r7, #16]
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2bae      	cmp	r3, #174	; 0xae
 8005f24:	ddeb      	ble.n	8005efe <buatcs+0x1a>
 8005f26:	e000      	b.n	8005f2a <buatcs+0x46>
            break;
 8005f28:	bf00      	nop
        }
    }
    hasil = buffhasil;
 8005f2a:	8afb      	ldrh	r3, [r7, #22]
 8005f2c:	73fb      	strb	r3, [r7, #15]
    temp = buffhasil >> 8;
 8005f2e:	8afb      	ldrh	r3, [r7, #22]
 8005f30:	0a1b      	lsrs	r3, r3, #8
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	73bb      	strb	r3, [r7, #14]
    hasil += temp;
 8005f36:	7bfa      	ldrb	r2, [r7, #15]
 8005f38:	7bbb      	ldrb	r3, [r7, #14]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	73fb      	strb	r3, [r7, #15]
    return hasil;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	0000      	movs	r0, r0
	...

08005f50 <pressuretoalt>:

float pressuretoalt(float press)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	ed87 0a01 	vstr	s0, [r7, #4]
    float hasil;
    if (press != 0)
 8005f5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f66:	d02c      	beq.n	8005fc2 <pressuretoalt+0x72>
    {
    	hasil = 44330.0 * (1.0 - pow((press/1013.25), 0.190295));
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7fa faed 	bl	8000548 <__aeabi_f2d>
 8005f6e:	a31f      	add	r3, pc, #124	; (adr r3, 8005fec <pressuretoalt+0x9c>)
 8005f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f74:	f7fa fc6a 	bl	800084c <__aeabi_ddiv>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	ec43 2b17 	vmov	d7, r2, r3
 8005f80:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8005fd8 <pressuretoalt+0x88>
 8005f84:	eeb0 0a47 	vmov.f32	s0, s14
 8005f88:	eef0 0a67 	vmov.f32	s1, s15
 8005f8c:	f010 fbf0 	bl	8016770 <pow>
 8005f90:	ec53 2b10 	vmov	r2, r3, d0
 8005f94:	f04f 0000 	mov.w	r0, #0
 8005f98:	4913      	ldr	r1, [pc, #76]	; (8005fe8 <pressuretoalt+0x98>)
 8005f9a:	f7fa f975 	bl	8000288 <__aeabi_dsub>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	a30e      	add	r3, pc, #56	; (adr r3, 8005fe0 <pressuretoalt+0x90>)
 8005fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fac:	f7fa fb24 	bl	80005f8 <__aeabi_dmul>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	460b      	mov	r3, r1
 8005fb4:	4610      	mov	r0, r2
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f7fa fe16 	bl	8000be8 <__aeabi_d2f>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	e002      	b.n	8005fc8 <pressuretoalt+0x78>
    }
    else
    {
    	hasil = 0;
 8005fc2:	f04f 0300 	mov.w	r3, #0
 8005fc6:	60fb      	str	r3, [r7, #12]
    }
    return hasil;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	ee07 3a90 	vmov	s15, r3
}
 8005fce:	eeb0 0a67 	vmov.f32	s0, s15
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	28cbd124 	.word	0x28cbd124
 8005fdc:	3fc85b96 	.word	0x3fc85b96
 8005fe0:	00000000 	.word	0x00000000
 8005fe4:	40e5a540 	.word	0x40e5a540
 8005fe8:	3ff00000 	.word	0x3ff00000
 8005fec:	00000000 	.word	0x00000000
 8005ff0:	408faa00 	.word	0x408faa00

08005ff4 <wakturtc>:

void wakturtc(uint8_t timebuff, char datat[])
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	6039      	str	r1, [r7, #0]
 8005ffe:	71fb      	strb	r3, [r7, #7]
    if (timebuff < 10)
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	2b09      	cmp	r3, #9
 8006004:	d806      	bhi.n	8006014 <wakturtc+0x20>
    {
    	sprintf(datat,"0%d",timebuff);
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	461a      	mov	r2, r3
 800600a:	4907      	ldr	r1, [pc, #28]	; (8006028 <wakturtc+0x34>)
 800600c:	6838      	ldr	r0, [r7, #0]
 800600e:	f00d fda1 	bl	8013b54 <siprintf>
    }
    else
    {
    	sprintf(datat,"%d",timebuff);
    }
}
 8006012:	e005      	b.n	8006020 <wakturtc+0x2c>
    	sprintf(datat,"%d",timebuff);
 8006014:	79fb      	ldrb	r3, [r7, #7]
 8006016:	461a      	mov	r2, r3
 8006018:	4904      	ldr	r1, [pc, #16]	; (800602c <wakturtc+0x38>)
 800601a:	6838      	ldr	r0, [r7, #0]
 800601c:	f00d fd9a 	bl	8013b54 <siprintf>
}
 8006020:	bf00      	nop
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	080178f4 	.word	0x080178f4
 800602c:	080178f8 	.word	0x080178f8

08006030 <get_time>:

void get_time()
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef gTime;
    RTC_DateTypeDef gDate;

    HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8006036:	1d3b      	adds	r3, r7, #4
 8006038:	2200      	movs	r2, #0
 800603a:	4619      	mov	r1, r3
 800603c:	480d      	ldr	r0, [pc, #52]	; (8006074 <get_time+0x44>)
 800603e:	f004 ff17 	bl	800ae70 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8006042:	463b      	mov	r3, r7
 8006044:	2200      	movs	r2, #0
 8006046:	4619      	mov	r1, r3
 8006048:	480a      	ldr	r0, [pc, #40]	; (8006074 <get_time+0x44>)
 800604a:	f004 fff3 	bl	800b034 <HAL_RTC_GetDate>

    wakturtc(gTime.Hours,datatelemetri.jam);
 800604e:	793b      	ldrb	r3, [r7, #4]
 8006050:	4909      	ldr	r1, [pc, #36]	; (8006078 <get_time+0x48>)
 8006052:	4618      	mov	r0, r3
 8006054:	f7ff ffce 	bl	8005ff4 <wakturtc>
    wakturtc(gTime.Minutes,datatelemetri.menit);
 8006058:	797b      	ldrb	r3, [r7, #5]
 800605a:	4908      	ldr	r1, [pc, #32]	; (800607c <get_time+0x4c>)
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ffc9 	bl	8005ff4 <wakturtc>
    wakturtc(gTime.Seconds,datatelemetri.detik);
 8006062:	79bb      	ldrb	r3, [r7, #6]
 8006064:	4906      	ldr	r1, [pc, #24]	; (8006080 <get_time+0x50>)
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ffc4 	bl	8005ff4 <wakturtc>
}
 800606c:	bf00      	nop
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000988 	.word	0x20000988
 8006078:	2000101d 	.word	0x2000101d
 800607c:	2000101f 	.word	0x2000101f
 8006080:	20001021 	.word	0x20001021

08006084 <Settime>:

void Settime(uint8_t jam_, uint8_t menit_, uint8_t detik_)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
 800608a:	4603      	mov	r3, r0
 800608c:	71fb      	strb	r3, [r7, #7]
 800608e:	460b      	mov	r3, r1
 8006090:	71bb      	strb	r3, [r7, #6]
 8006092:	4613      	mov	r3, r2
 8006094:	717b      	strb	r3, [r7, #5]
    RTC_TimeTypeDef sTime = {0};
 8006096:	f107 030c 	add.w	r3, r7, #12
 800609a:	2200      	movs	r2, #0
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	609a      	str	r2, [r3, #8]
 80060a2:	60da      	str	r2, [r3, #12]
 80060a4:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]

    sTime.Hours = jam_;
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = menit_;
 80060ae:	79bb      	ldrb	r3, [r7, #6]
 80060b0:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = detik_;
 80060b2:	797b      	ldrb	r3, [r7, #5]
 80060b4:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80060be:	f107 030c 	add.w	r3, r7, #12
 80060c2:	2200      	movs	r2, #0
 80060c4:	4619      	mov	r1, r3
 80060c6:	4813      	ldr	r0, [pc, #76]	; (8006114 <Settime+0x90>)
 80060c8:	f004 fe38 	bl	800ad3c <HAL_RTC_SetTime>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <Settime+0x52>
    {
    	Error_Handler();
 80060d2:	f7fe fa53 	bl	800457c <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80060d6:	2306      	movs	r3, #6
 80060d8:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_JUNE;
 80060da:	2306      	movs	r3, #6
 80060dc:	727b      	strb	r3, [r7, #9]
    sDate.Date = 0x8;
 80060de:	2308      	movs	r3, #8
 80060e0:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 0x24;
 80060e2:	2324      	movs	r3, #36	; 0x24
 80060e4:	72fb      	strb	r3, [r7, #11]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80060e6:	f107 0308 	add.w	r3, r7, #8
 80060ea:	2200      	movs	r2, #0
 80060ec:	4619      	mov	r1, r3
 80060ee:	4809      	ldr	r0, [pc, #36]	; (8006114 <Settime+0x90>)
 80060f0:	f004 ff1c 	bl	800af2c <HAL_RTC_SetDate>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <Settime+0x7a>
    {
    	Error_Handler();
 80060fa:	f7fe fa3f 	bl	800457c <Error_Handler>
    }
    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80060fe:	f243 22f2 	movw	r2, #13042	; 0x32f2
 8006102:	2101      	movs	r1, #1
 8006104:	4803      	ldr	r0, [pc, #12]	; (8006114 <Settime+0x90>)
 8006106:	f005 f8a1 	bl	800b24c <HAL_RTCEx_BKUPWrite>
}
 800610a:	bf00      	nop
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	20000988 	.word	0x20000988

08006118 <rtcbackup>:

void rtcbackup()
{
 8006118:	b580      	push	{r7, lr}
 800611a:	af00      	add	r7, sp, #0
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1)!= 0x32F2)
 800611c:	2101      	movs	r1, #1
 800611e:	4807      	ldr	r0, [pc, #28]	; (800613c <rtcbackup+0x24>)
 8006120:	f005 f8ae 	bl	800b280 <HAL_RTCEx_BKUPRead>
 8006124:	4603      	mov	r3, r0
 8006126:	f243 22f2 	movw	r2, #13042	; 0x32f2
 800612a:	4293      	cmp	r3, r2
 800612c:	d004      	beq.n	8006138 <rtcbackup+0x20>
    {
    	Settime(0,0,0);
 800612e:	2200      	movs	r2, #0
 8006130:	2100      	movs	r1, #0
 8006132:	2000      	movs	r0, #0
 8006134:	f7ff ffa6 	bl	8006084 <Settime>
    }
}
 8006138:	bf00      	nop
 800613a:	bd80      	pop	{r7, pc}
 800613c:	20000988 	.word	0x20000988

08006140 <ambildata>:

void ambildata()
{
 8006140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006144:	b0cd      	sub	sp, #308	; 0x134
 8006146:	af2c      	add	r7, sp, #176	; 0xb0
    get_time();
 8006148:	f7ff ff72 	bl	8006030 <get_time>
    datatelemetri.packetcount = counting;
 800614c:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <ambildata+0x88>)
 800614e:	881a      	ldrh	r2, [r3, #0]
 8006150:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <ambildata+0x8c>)
 8006152:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    datatelemetri.temp = Temperature;
 8006156:	4b1e      	ldr	r3, [pc, #120]	; (80061d0 <ambildata+0x90>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a1c      	ldr	r2, [pc, #112]	; (80061cc <ambildata+0x8c>)
 800615c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
    tempalt = datatelemetri.alt;
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <ambildata+0x8c>)
 8006162:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8006166:	4a1b      	ldr	r2, [pc, #108]	; (80061d4 <ambildata+0x94>)
 8006168:	6013      	str	r3, [r2, #0]
    if (flagsim == 0 || flagsim == 1)
 800616a:	4b1b      	ldr	r3, [pc, #108]	; (80061d8 <ambildata+0x98>)
 800616c:	781b      	ldrb	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d003      	beq.n	800617a <ambildata+0x3a>
 8006172:	4b19      	ldr	r3, [pc, #100]	; (80061d8 <ambildata+0x98>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d138      	bne.n	80061ec <ambildata+0xac>
    {
		datatelemetri.alt = pressuretoalt(Pressure / 100);
 800617a:	4b18      	ldr	r3, [pc, #96]	; (80061dc <ambildata+0x9c>)
 800617c:	edd3 7a00 	vldr	s15, [r3]
 8006180:	eddf 6a17 	vldr	s13, [pc, #92]	; 80061e0 <ambildata+0xa0>
 8006184:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006188:	eeb0 0a47 	vmov.f32	s0, s14
 800618c:	f7ff fee0 	bl	8005f50 <pressuretoalt>
 8006190:	eef0 7a40 	vmov.f32	s15, s0
 8006194:	4b0d      	ldr	r3, [pc, #52]	; (80061cc <ambildata+0x8c>)
 8006196:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		datatelemetri.barpress = Pressure / 1000;
 800619a:	4b10      	ldr	r3, [pc, #64]	; (80061dc <ambildata+0x9c>)
 800619c:	ed93 7a00 	vldr	s14, [r3]
 80061a0:	eddf 6a10 	vldr	s13, [pc, #64]	; 80061e4 <ambildata+0xa4>
 80061a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061a8:	4b08      	ldr	r3, [pc, #32]	; (80061cc <ambildata+0x8c>)
 80061aa:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		datatelemetri.alt -= refalt;
 80061ae:	4b07      	ldr	r3, [pc, #28]	; (80061cc <ambildata+0x8c>)
 80061b0:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 80061b4:	4b0c      	ldr	r3, [pc, #48]	; (80061e8 <ambildata+0xa8>)
 80061b6:	edd3 7a00 	vldr	s15, [r3]
 80061ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061be:	4b03      	ldr	r3, [pc, #12]	; (80061cc <ambildata+0x8c>)
 80061c0:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
 80061c4:	e03b      	b.n	800623e <ambildata+0xfe>
 80061c6:	bf00      	nop
 80061c8:	20000048 	.word	0x20000048
 80061cc:	20000ec4 	.word	0x20000ec4
 80061d0:	20001078 	.word	0x20001078
 80061d4:	20001088 	.word	0x20001088
 80061d8:	20000ec0 	.word	0x20000ec0
 80061dc:	2000107c 	.word	0x2000107c
 80061e0:	42c80000 	.word	0x42c80000
 80061e4:	447a0000 	.word	0x447a0000
 80061e8:	20001084 	.word	0x20001084
    }
    else if (flagsim == 2)
 80061ec:	4baa      	ldr	r3, [pc, #680]	; (8006498 <ambildata+0x358>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d124      	bne.n	800623e <ambildata+0xfe>
    {
		datatelemetri.alt = pressuretoalt(Spressure / 100);
 80061f4:	4ba9      	ldr	r3, [pc, #676]	; (800649c <ambildata+0x35c>)
 80061f6:	edd3 7a00 	vldr	s15, [r3]
 80061fa:	eddf 6aa9 	vldr	s13, [pc, #676]	; 80064a0 <ambildata+0x360>
 80061fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006202:	eeb0 0a47 	vmov.f32	s0, s14
 8006206:	f7ff fea3 	bl	8005f50 <pressuretoalt>
 800620a:	eef0 7a40 	vmov.f32	s15, s0
 800620e:	4ba5      	ldr	r3, [pc, #660]	; (80064a4 <ambildata+0x364>)
 8006210:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
		datatelemetri.barpress = Spressure / 1000;
 8006214:	4ba1      	ldr	r3, [pc, #644]	; (800649c <ambildata+0x35c>)
 8006216:	ed93 7a00 	vldr	s14, [r3]
 800621a:	eddf 6aa3 	vldr	s13, [pc, #652]	; 80064a8 <ambildata+0x368>
 800621e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006222:	4ba0      	ldr	r3, [pc, #640]	; (80064a4 <ambildata+0x364>)
 8006224:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
		datatelemetri.alt -= refalt;
 8006228:	4b9e      	ldr	r3, [pc, #632]	; (80064a4 <ambildata+0x364>)
 800622a:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 800622e:	4b9f      	ldr	r3, [pc, #636]	; (80064ac <ambildata+0x36c>)
 8006230:	edd3 7a00 	vldr	s15, [r3]
 8006234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006238:	4b9a      	ldr	r3, [pc, #616]	; (80064a4 <ambildata+0x364>)
 800623a:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
    }
    if (datatelemetri.alt < 0)
 800623e:	4b99      	ldr	r3, [pc, #612]	; (80064a4 <ambildata+0x364>)
 8006240:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8006244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624c:	d504      	bpl.n	8006258 <ambildata+0x118>
    {
    	datatelemetri.alt = 0;
 800624e:	4b95      	ldr	r3, [pc, #596]	; (80064a4 <ambildata+0x364>)
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
    }
    state();
 8006258:	f000 f958 	bl	800650c <state>
    datatelemetri.rot_z = bno055_gyro.z;
 800625c:	4b94      	ldr	r3, [pc, #592]	; (80064b0 <ambildata+0x370>)
 800625e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8006262:	4610      	mov	r0, r2
 8006264:	4619      	mov	r1, r3
 8006266:	f7fa fcbf 	bl	8000be8 <__aeabi_d2f>
 800626a:	4603      	mov	r3, r0
 800626c:	4a8d      	ldr	r2, [pc, #564]	; (80064a4 <ambildata+0x364>)
 800626e:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
    datatelemetri.heading = bno055_euler.x;
 8006272:	4b90      	ldr	r3, [pc, #576]	; (80064b4 <ambildata+0x374>)
 8006274:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8006278:	4610      	mov	r0, r2
 800627a:	4619      	mov	r1, r3
 800627c:	f7fa fcb4 	bl	8000be8 <__aeabi_d2f>
 8006280:	4603      	mov	r3, r0
 8006282:	4a88      	ldr	r2, [pc, #544]	; (80064a4 <ambildata+0x364>)
 8006284:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
    datatelemetri.tilt_x = bno055_euler.y;
 8006288:	4b8a      	ldr	r3, [pc, #552]	; (80064b4 <ambildata+0x374>)
 800628a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800628e:	4610      	mov	r0, r2
 8006290:	4619      	mov	r1, r3
 8006292:	f7fa fca9 	bl	8000be8 <__aeabi_d2f>
 8006296:	4603      	mov	r3, r0
 8006298:	4a82      	ldr	r2, [pc, #520]	; (80064a4 <ambildata+0x364>)
 800629a:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
    datatelemetri.tilt_y = bno055_euler.z;
 800629e:	4b85      	ldr	r3, [pc, #532]	; (80064b4 <ambildata+0x374>)
 80062a0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80062a4:	4610      	mov	r0, r2
 80062a6:	4619      	mov	r1, r3
 80062a8:	f7fa fc9e 	bl	8000be8 <__aeabi_d2f>
 80062ac:	4603      	mov	r3, r0
 80062ae:	4a7d      	ldr	r2, [pc, #500]	; (80064a4 <ambildata+0x364>)
 80062b0:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198

    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
        		datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80062b4:	4b7b      	ldr	r3, [pc, #492]	; (80064a4 <ambildata+0x364>)
 80062b6:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062ba:	67fb      	str	r3, [r7, #124]	; 0x7c
        		datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80062bc:	4b79      	ldr	r3, [pc, #484]	; (80064a4 <ambildata+0x364>)
 80062be:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062c2:	67bb      	str	r3, [r7, #120]	; 0x78
        		datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80062c4:	4b77      	ldr	r3, [pc, #476]	; (80064a4 <ambildata+0x364>)
 80062c6:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062ca:	677b      	str	r3, [r7, #116]	; 0x74
        		datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80062cc:	4b75      	ldr	r3, [pc, #468]	; (80064a4 <ambildata+0x364>)
 80062ce:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062d2:	673b      	str	r3, [r7, #112]	; 0x70
        		datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80062d4:	4b73      	ldr	r3, [pc, #460]	; (80064a4 <ambildata+0x364>)
 80062d6:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062da:	66fb      	str	r3, [r7, #108]	; 0x6c
        		datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80062dc:	4b71      	ldr	r3, [pc, #452]	; (80064a4 <ambildata+0x364>)
 80062de:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062e2:	66bb      	str	r3, [r7, #104]	; 0x68
    			datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 80062e4:	4b6f      	ldr	r3, [pc, #444]	; (80064a4 <ambildata+0x364>)
 80062e6:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062ea:	667b      	str	r3, [r7, #100]	; 0x64
    			datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 80062ec:	4b6d      	ldr	r3, [pc, #436]	; (80064a4 <ambildata+0x364>)
 80062ee:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062f2:	663b      	str	r3, [r7, #96]	; 0x60
    			datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 80062f4:	4b6b      	ldr	r3, [pc, #428]	; (80064a4 <ambildata+0x364>)
 80062f6:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fa f924 	bl	8000548 <__aeabi_f2d>
 8006300:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
    			datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 8006304:	4b67      	ldr	r3, [pc, #412]	; (80064a4 <ambildata+0x364>)
 8006306:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800630a:	4618      	mov	r0, r3
 800630c:	f7fa f91c 	bl	8000548 <__aeabi_f2d>
 8006310:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    			datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 8006314:	4b63      	ldr	r3, [pc, #396]	; (80064a4 <ambildata+0x364>)
 8006316:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800631a:	64fb      	str	r3, [r7, #76]	; 0x4c
    			datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 800631c:	4b61      	ldr	r3, [pc, #388]	; (80064a4 <ambildata+0x364>)
 800631e:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8006322:	64bb      	str	r3, [r7, #72]	; 0x48
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8006324:	4b5f      	ldr	r3, [pc, #380]	; (80064a4 <ambildata+0x364>)
 8006326:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800632a:	4618      	mov	r0, r3
 800632c:	f7fa f90c 	bl	8000548 <__aeabi_f2d>
 8006330:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8006334:	4b5b      	ldr	r3, [pc, #364]	; (80064a4 <ambildata+0x364>)
 8006336:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800633a:	4618      	mov	r0, r3
 800633c:	f7fa f904 	bl	8000548 <__aeabi_f2d>
 8006340:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8006344:	4b57      	ldr	r3, [pc, #348]	; (80064a4 <ambildata+0x364>)
 8006346:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800634a:	4618      	mov	r0, r3
 800634c:	f7fa f8fc 	bl	8000548 <__aeabi_f2d>
 8006350:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8006354:	4b58      	ldr	r3, [pc, #352]	; (80064b8 <ambildata+0x378>)
 8006356:	781b      	ldrb	r3, [r3, #0]
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 800635a:	4b57      	ldr	r3, [pc, #348]	; (80064b8 <ambildata+0x378>)
 800635c:	785b      	ldrb	r3, [r3, #1]
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8006360:	4b56      	ldr	r3, [pc, #344]	; (80064bc <ambildata+0x37c>)
 8006362:	781b      	ldrb	r3, [r3, #0]
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8006364:	627b      	str	r3, [r7, #36]	; 0x24
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8006366:	4b55      	ldr	r3, [pc, #340]	; (80064bc <ambildata+0x37c>)
 8006368:	785b      	ldrb	r3, [r3, #1]
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800636a:	623b      	str	r3, [r7, #32]
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 800636c:	4b54      	ldr	r3, [pc, #336]	; (80064c0 <ambildata+0x380>)
 800636e:	781b      	ldrb	r3, [r3, #0]
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8006370:	61fb      	str	r3, [r7, #28]
    			datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8006372:	4b53      	ldr	r3, [pc, #332]	; (80064c0 <ambildata+0x380>)
 8006374:	785b      	ldrb	r3, [r3, #1]
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8006376:	61bb      	str	r3, [r7, #24]
 8006378:	4b52      	ldr	r3, [pc, #328]	; (80064c4 <ambildata+0x384>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4618      	mov	r0, r3
 800637e:	f7fa f8e3 	bl	8000548 <__aeabi_f2d>
 8006382:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8006386:	4b50      	ldr	r3, [pc, #320]	; (80064c8 <ambildata+0x388>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fa f8dc 	bl	8000548 <__aeabi_f2d>
 8006390:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8006394:	4b4d      	ldr	r3, [pc, #308]	; (80064cc <ambildata+0x38c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f7fa f8d5 	bl	8000548 <__aeabi_f2d>
 800639e:	e9c7 0100 	strd	r0, r1, [r7]
 80063a2:	4b4b      	ldr	r3, [pc, #300]	; (80064d0 <ambildata+0x390>)
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	461e      	mov	r6, r3
    			gpsalt, gpslat, gpslong, gpssat, datatelemetri.tilt_x, datatelemetri.tilt_y, datatelemetri.rot_z, datatelemetri.echocmd, datatelemetri.heading);
 80063a8:	4b3e      	ldr	r3, [pc, #248]	; (80064a4 <ambildata+0x364>)
 80063aa:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fa f8ca 	bl	8000548 <__aeabi_f2d>
 80063b4:	4682      	mov	sl, r0
 80063b6:	468b      	mov	fp, r1
    			gpsalt, gpslat, gpslong, gpssat, datatelemetri.tilt_x, datatelemetri.tilt_y, datatelemetri.rot_z, datatelemetri.echocmd, datatelemetri.heading);
 80063b8:	4b3a      	ldr	r3, [pc, #232]	; (80064a4 <ambildata+0x364>)
 80063ba:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fa f8c2 	bl	8000548 <__aeabi_f2d>
 80063c4:	4680      	mov	r8, r0
 80063c6:	4689      	mov	r9, r1
    			gpsalt, gpslat, gpslong, gpssat, datatelemetri.tilt_x, datatelemetri.tilt_y, datatelemetri.rot_z, datatelemetri.echocmd, datatelemetri.heading);
 80063c8:	4b36      	ldr	r3, [pc, #216]	; (80064a4 <ambildata+0x364>)
 80063ca:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fa f8ba 	bl	8000548 <__aeabi_f2d>
 80063d4:	4604      	mov	r4, r0
 80063d6:	460d      	mov	r5, r1
    			gpsalt, gpslat, gpslong, gpssat, datatelemetri.tilt_x, datatelemetri.tilt_y, datatelemetri.rot_z, datatelemetri.echocmd, datatelemetri.heading);
 80063d8:	4b32      	ldr	r3, [pc, #200]	; (80064a4 <ambildata+0x364>)
 80063da:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
    sprintf(datatelemetri.telemetribuff,"2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80063de:	4618      	mov	r0, r3
 80063e0:	f7fa f8b2 	bl	8000548 <__aeabi_f2d>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 80063ec:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <ambildata+0x394>)
 80063ee:	9328      	str	r3, [sp, #160]	; 0xa0
 80063f0:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
 80063f4:	e9cd 8924 	strd	r8, r9, [sp, #144]	; 0x90
 80063f8:	e9cd ab22 	strd	sl, fp, [sp, #136]	; 0x88
 80063fc:	9620      	str	r6, [sp, #128]	; 0x80
 80063fe:	ed97 7b00 	vldr	d7, [r7]
 8006402:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8006406:	ed97 7b02 	vldr	d7, [r7, #8]
 800640a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800640e:	ed97 7b04 	vldr	d7, [r7, #16]
 8006412:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8006416:	69b9      	ldr	r1, [r7, #24]
 8006418:	9119      	str	r1, [sp, #100]	; 0x64
 800641a:	69f9      	ldr	r1, [r7, #28]
 800641c:	9118      	str	r1, [sp, #96]	; 0x60
 800641e:	6a39      	ldr	r1, [r7, #32]
 8006420:	9117      	str	r1, [sp, #92]	; 0x5c
 8006422:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006424:	9116      	str	r1, [sp, #88]	; 0x58
 8006426:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006428:	9115      	str	r1, [sp, #84]	; 0x54
 800642a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800642c:	9114      	str	r1, [sp, #80]	; 0x50
 800642e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8006432:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8006436:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800643a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800643e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8006442:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8006446:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006448:	910d      	str	r1, [sp, #52]	; 0x34
 800644a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800644c:	910c      	str	r1, [sp, #48]	; 0x30
 800644e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8006452:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8006456:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800645a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800645e:	4b1e      	ldr	r3, [pc, #120]	; (80064d8 <ambildata+0x398>)
 8006460:	9306      	str	r3, [sp, #24]
 8006462:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006464:	9105      	str	r1, [sp, #20]
 8006466:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006468:	9104      	str	r1, [sp, #16]
 800646a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800646c:	9103      	str	r1, [sp, #12]
 800646e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006470:	9102      	str	r1, [sp, #8]
 8006472:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8006474:	9101      	str	r1, [sp, #4]
 8006476:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8006478:	9100      	str	r1, [sp, #0]
 800647a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800647c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800647e:	4917      	ldr	r1, [pc, #92]	; (80064dc <ambildata+0x39c>)
 8006480:	4808      	ldr	r0, [pc, #32]	; (80064a4 <ambildata+0x364>)
 8006482:	f00d fb67 	bl	8013b54 <siprintf>
	csh = ~buatcs(datatelemetri.telemetribuff);
 8006486:	4807      	ldr	r0, [pc, #28]	; (80064a4 <ambildata+0x364>)
 8006488:	f7ff fd2c 	bl	8005ee4 <buatcs>
 800648c:	4603      	mov	r3, r0
 800648e:	43db      	mvns	r3, r3
 8006490:	b2da      	uxtb	r2, r3
 8006492:	4b13      	ldr	r3, [pc, #76]	; (80064e0 <ambildata+0x3a0>)
 8006494:	701a      	strb	r2, [r3, #0]
 8006496:	e025      	b.n	80064e4 <ambildata+0x3a4>
 8006498:	20000ec0 	.word	0x20000ec0
 800649c:	2000004c 	.word	0x2000004c
 80064a0:	42c80000 	.word	0x42c80000
 80064a4:	20000ec4 	.word	0x20000ec4
 80064a8:	447a0000 	.word	0x447a0000
 80064ac:	20001084 	.word	0x20001084
 80064b0:	20000df0 	.word	0x20000df0
 80064b4:	20000dd0 	.word	0x20000dd0
 80064b8:	200011d8 	.word	0x200011d8
 80064bc:	200011d4 	.word	0x200011d4
 80064c0:	200011d0 	.word	0x200011d0
 80064c4:	200011c8 	.word	0x200011c8
 80064c8:	200011c0 	.word	0x200011c0
 80064cc:	200011c4 	.word	0x200011c4
 80064d0:	200011cc 	.word	0x200011cc
 80064d4:	20001064 	.word	0x20001064
 80064d8:	20001027 	.word	0x20001027
 80064dc:	080178fc 	.word	0x080178fc
 80064e0:	20001074 	.word	0x20001074
	sprintf(datatelemetri.telemetritotal,"%s%d\r\n", datatelemetri.telemetribuff, csh);
 80064e4:	4b05      	ldr	r3, [pc, #20]	; (80064fc <ambildata+0x3bc>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	4a05      	ldr	r2, [pc, #20]	; (8006500 <ambildata+0x3c0>)
 80064ea:	4906      	ldr	r1, [pc, #24]	; (8006504 <ambildata+0x3c4>)
 80064ec:	4806      	ldr	r0, [pc, #24]	; (8006508 <ambildata+0x3c8>)
 80064ee:	f00d fb31 	bl	8013b54 <siprintf>
}
 80064f2:	bf00      	nop
 80064f4:	3784      	adds	r7, #132	; 0x84
 80064f6:	46bd      	mov	sp, r7
 80064f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fc:	20001074 	.word	0x20001074
 8006500:	20000ec4 	.word	0x20000ec4
 8006504:	08017974 	.word	0x08017974
 8006508:	20000f6e 	.word	0x20000f6e

0800650c <state>:
    HAL_UART_Transmit_DMA(&huart3, (uint8_t *)datatelemetri.telemetritotal, strnlen(datatelemetri.telemetritotal, sizeof(datatelemetri.telemetritotal)));
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, SET);
}

void state()
{
 800650c:	b5b0      	push	{r4, r5, r7, lr}
 800650e:	af00      	add	r7, sp, #0
    if ((tempalt-datatelemetri.alt) > 49)
 8006510:	4b9b      	ldr	r3, [pc, #620]	; (8006780 <state+0x274>)
 8006512:	ed93 7a00 	vldr	s14, [r3]
 8006516:	4b9b      	ldr	r3, [pc, #620]	; (8006784 <state+0x278>)
 8006518:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 800651c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006520:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8006788 <state+0x27c>
 8006524:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800652c:	dd03      	ble.n	8006536 <state+0x2a>
    	flaginvalid = 1;
 800652e:	4b97      	ldr	r3, [pc, #604]	; (800678c <state+0x280>)
 8006530:	2201      	movs	r2, #1
 8006532:	701a      	strb	r2, [r3, #0]
 8006534:	e002      	b.n	800653c <state+0x30>
    else
    	flaginvalid = 0;
 8006536:	4b95      	ldr	r3, [pc, #596]	; (800678c <state+0x280>)
 8006538:	2200      	movs	r2, #0
 800653a:	701a      	strb	r2, [r3, #0]

    if (datatelemetri.alt > 100 && flagstate == 0)
 800653c:	4b91      	ldr	r3, [pc, #580]	; (8006784 <state+0x278>)
 800653e:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8006542:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006790 <state+0x284>
 8006546:	eef4 7ac7 	vcmpe.f32	s15, s14
 800654a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800654e:	dd12      	ble.n	8006576 <state+0x6a>
 8006550:	4b90      	ldr	r3, [pc, #576]	; (8006794 <state+0x288>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d10e      	bne.n	8006576 <state+0x6a>
    {
		strcpy(datatelemetri.state, "ASCENT");
 8006558:	4b8f      	ldr	r3, [pc, #572]	; (8006798 <state+0x28c>)
 800655a:	4a90      	ldr	r2, [pc, #576]	; (800679c <state+0x290>)
 800655c:	6810      	ldr	r0, [r2, #0]
 800655e:	6018      	str	r0, [r3, #0]
 8006560:	8891      	ldrh	r1, [r2, #4]
 8006562:	7992      	ldrb	r2, [r2, #6]
 8006564:	8099      	strh	r1, [r3, #4]
 8006566:	719a      	strb	r2, [r3, #6]
		TM_BKPSRAM_Write8(STATEIND_ADR,0);
 8006568:	4b8d      	ldr	r3, [pc, #564]	; (80067a0 <state+0x294>)
 800656a:	2200      	movs	r2, #0
 800656c:	701a      	strb	r2, [r3, #0]
		flagstate = 1;
 800656e:	4b89      	ldr	r3, [pc, #548]	; (8006794 <state+0x288>)
 8006570:	2201      	movs	r2, #1
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	e101      	b.n	800677a <state+0x26e>
    }
    else if ((datatelemetri.alt - tempalt) < 0 && flagstate == 1)
 8006576:	4b83      	ldr	r3, [pc, #524]	; (8006784 <state+0x278>)
 8006578:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 800657c:	4b80      	ldr	r3, [pc, #512]	; (8006780 <state+0x274>)
 800657e:	edd3 7a00 	vldr	s15, [r3]
 8006582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006586:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800658a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658e:	d53e      	bpl.n	800660e <state+0x102>
 8006590:	4b80      	ldr	r3, [pc, #512]	; (8006794 <state+0x288>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d13a      	bne.n	800660e <state+0x102>
    {
    	valid++;
 8006598:	4b82      	ldr	r3, [pc, #520]	; (80067a4 <state+0x298>)
 800659a:	781b      	ldrb	r3, [r3, #0]
 800659c:	3301      	adds	r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	4b80      	ldr	r3, [pc, #512]	; (80067a4 <state+0x298>)
 80065a2:	701a      	strb	r2, [r3, #0]
		if (valid > 4)
 80065a4:	4b7f      	ldr	r3, [pc, #508]	; (80067a4 <state+0x298>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	f240 80e6 	bls.w	800677a <state+0x26e>
		{
			valid = 0;
 80065ae:	4b7d      	ldr	r3, [pc, #500]	; (80067a4 <state+0x298>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	701a      	strb	r2, [r3, #0]
			datatelemetri.hsdeploy = 'P';
 80065b4:	4b73      	ldr	r3, [pc, #460]	; (8006784 <state+0x278>)
 80065b6:	2250      	movs	r2, #80	; 0x50
 80065b8:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
			datatelemetri.pcdeploy 	= 'N';
 80065bc:	4b71      	ldr	r3, [pc, #452]	; (8006784 <state+0x278>)
 80065be:	224e      	movs	r2, #78	; 0x4e
 80065c0:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
			strcpy(datatelemetri.state, "ROCKET_SEPARATION");
 80065c4:	4a74      	ldr	r2, [pc, #464]	; (8006798 <state+0x28c>)
 80065c6:	4b78      	ldr	r3, [pc, #480]	; (80067a8 <state+0x29c>)
 80065c8:	4615      	mov	r5, r2
 80065ca:	461c      	mov	r4, r3
 80065cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ce:	6028      	str	r0, [r5, #0]
 80065d0:	6069      	str	r1, [r5, #4]
 80065d2:	60aa      	str	r2, [r5, #8]
 80065d4:	60eb      	str	r3, [r5, #12]
 80065d6:	8823      	ldrh	r3, [r4, #0]
 80065d8:	822b      	strh	r3, [r5, #16]
			TM_BKPSRAM_Write8(HSDEPLOY_ADR,datatelemetri.hsdeploy);
 80065da:	4b74      	ldr	r3, [pc, #464]	; (80067ac <state+0x2a0>)
 80065dc:	4a69      	ldr	r2, [pc, #420]	; (8006784 <state+0x278>)
 80065de:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 80065e2:	701a      	strb	r2, [r3, #0]
			TM_BKPSRAM_Write8(PCDEPLOY_ADR,datatelemetri.pcdeploy);
 80065e4:	4b72      	ldr	r3, [pc, #456]	; (80067b0 <state+0x2a4>)
 80065e6:	4a67      	ldr	r2, [pc, #412]	; (8006784 <state+0x278>)
 80065e8:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 80065ec:	701a      	strb	r2, [r3, #0]
			TM_BKPSRAM_Write8(STATEIND_ADR, 1);
 80065ee:	4b6c      	ldr	r3, [pc, #432]	; (80067a0 <state+0x294>)
 80065f0:	2201      	movs	r2, #1
 80065f2:	701a      	strb	r2, [r3, #0]
			camera = 2;
 80065f4:	4b6f      	ldr	r3, [pc, #444]	; (80067b4 <state+0x2a8>)
 80065f6:	2202      	movs	r2, #2
 80065f8:	701a      	strb	r2, [r3, #0]
			flagkameraon = 1;
 80065fa:	4b6f      	ldr	r3, [pc, #444]	; (80067b8 <state+0x2ac>)
 80065fc:	2201      	movs	r2, #1
 80065fe:	701a      	strb	r2, [r3, #0]
			flaggimbal = 1;
 8006600:	4b6e      	ldr	r3, [pc, #440]	; (80067bc <state+0x2b0>)
 8006602:	2201      	movs	r2, #1
 8006604:	701a      	strb	r2, [r3, #0]
			flagstate = 2;
 8006606:	4b63      	ldr	r3, [pc, #396]	; (8006794 <state+0x288>)
 8006608:	2202      	movs	r2, #2
 800660a:	701a      	strb	r2, [r3, #0]
		if (valid > 4)
 800660c:	e0b5      	b.n	800677a <state+0x26e>
		}
    }
    else if ((datatelemetri.alt - tempalt) < 0 && flagstate == 2)
 800660e:	4b5d      	ldr	r3, [pc, #372]	; (8006784 <state+0x278>)
 8006610:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 8006614:	4b5a      	ldr	r3, [pc, #360]	; (8006780 <state+0x274>)
 8006616:	edd3 7a00 	vldr	s15, [r3]
 800661a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800661e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006626:	d50f      	bpl.n	8006648 <state+0x13c>
 8006628:	4b5a      	ldr	r3, [pc, #360]	; (8006794 <state+0x288>)
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d10b      	bne.n	8006648 <state+0x13c>
    {
		strcpy(datatelemetri.state, "DESCENT");
 8006630:	4a59      	ldr	r2, [pc, #356]	; (8006798 <state+0x28c>)
 8006632:	4b63      	ldr	r3, [pc, #396]	; (80067c0 <state+0x2b4>)
 8006634:	cb03      	ldmia	r3!, {r0, r1}
 8006636:	6010      	str	r0, [r2, #0]
 8006638:	6051      	str	r1, [r2, #4]
		TM_BKPSRAM_Write8(STATEIND_ADR,2);
 800663a:	4b59      	ldr	r3, [pc, #356]	; (80067a0 <state+0x294>)
 800663c:	2202      	movs	r2, #2
 800663e:	701a      	strb	r2, [r3, #0]
		flagstate = 3;
 8006640:	4b54      	ldr	r3, [pc, #336]	; (8006794 <state+0x288>)
 8006642:	2203      	movs	r2, #3
 8006644:	701a      	strb	r2, [r3, #0]
 8006646:	e098      	b.n	800677a <state+0x26e>
    }
    else if (datatelemetri.alt <= 150 && flagstate == 3 && !flaginvalid)
 8006648:	4b4e      	ldr	r3, [pc, #312]	; (8006784 <state+0x278>)
 800664a:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 800664e:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 80067c4 <state+0x2b8>
 8006652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800665a:	d810      	bhi.n	800667e <state+0x172>
 800665c:	4b4d      	ldr	r3, [pc, #308]	; (8006794 <state+0x288>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b03      	cmp	r3, #3
 8006662:	d10c      	bne.n	800667e <state+0x172>
 8006664:	4b49      	ldr	r3, [pc, #292]	; (800678c <state+0x280>)
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d108      	bne.n	800667e <state+0x172>
    {
		servogerak(&htim4, TIM_CHANNEL_1, 135);
 800666c:	2287      	movs	r2, #135	; 0x87
 800666e:	2100      	movs	r1, #0
 8006670:	4855      	ldr	r0, [pc, #340]	; (80067c8 <state+0x2bc>)
 8006672:	f7fe faad 	bl	8004bd0 <servogerak>
		flagstate = 4;
 8006676:	4b47      	ldr	r3, [pc, #284]	; (8006794 <state+0x288>)
 8006678:	2204      	movs	r2, #4
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	e07d      	b.n	800677a <state+0x26e>
    }
    else if (datatelemetri.alt <= 100 && flagstate == 4 && !flaginvalid)
 800667e:	4b41      	ldr	r3, [pc, #260]	; (8006784 <state+0x278>)
 8006680:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8006684:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8006790 <state+0x284>
 8006688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800668c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006690:	d829      	bhi.n	80066e6 <state+0x1da>
 8006692:	4b40      	ldr	r3, [pc, #256]	; (8006794 <state+0x288>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	2b04      	cmp	r3, #4
 8006698:	d125      	bne.n	80066e6 <state+0x1da>
 800669a:	4b3c      	ldr	r3, [pc, #240]	; (800678c <state+0x280>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d121      	bne.n	80066e6 <state+0x1da>
    {
		strcpy(datatelemetri.state, "HS_RELEASE");
 80066a2:	4a3d      	ldr	r2, [pc, #244]	; (8006798 <state+0x28c>)
 80066a4:	4b49      	ldr	r3, [pc, #292]	; (80067cc <state+0x2c0>)
 80066a6:	cb03      	ldmia	r3!, {r0, r1}
 80066a8:	6010      	str	r0, [r2, #0]
 80066aa:	6051      	str	r1, [r2, #4]
 80066ac:	8819      	ldrh	r1, [r3, #0]
 80066ae:	789b      	ldrb	r3, [r3, #2]
 80066b0:	8111      	strh	r1, [r2, #8]
 80066b2:	7293      	strb	r3, [r2, #10]
    	datatelemetri.pcdeploy = 'C';
 80066b4:	4b33      	ldr	r3, [pc, #204]	; (8006784 <state+0x278>)
 80066b6:	2243      	movs	r2, #67	; 0x43
 80066b8:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
		datatelemetri.hsdeploy = 'P';
 80066bc:	4b31      	ldr	r3, [pc, #196]	; (8006784 <state+0x278>)
 80066be:	2250      	movs	r2, #80	; 0x50
 80066c0:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		TM_BKPSRAM_Write8(STATEIND_ADR,3);
 80066c4:	4b36      	ldr	r3, [pc, #216]	; (80067a0 <state+0x294>)
 80066c6:	2203      	movs	r2, #3
 80066c8:	701a      	strb	r2, [r3, #0]
		TM_BKPSRAM_Write8(HSDEPLOY_ADR,datatelemetri.hsdeploy);
 80066ca:	4b38      	ldr	r3, [pc, #224]	; (80067ac <state+0x2a0>)
 80066cc:	4a2d      	ldr	r2, [pc, #180]	; (8006784 <state+0x278>)
 80066ce:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 80066d2:	701a      	strb	r2, [r3, #0]
		TM_BKPSRAM_Write8(PCDEPLOY_ADR,datatelemetri.pcdeploy);
 80066d4:	4b36      	ldr	r3, [pc, #216]	; (80067b0 <state+0x2a4>)
 80066d6:	4a2b      	ldr	r2, [pc, #172]	; (8006784 <state+0x278>)
 80066d8:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 80066dc:	701a      	strb	r2, [r3, #0]
		flagstate = 5;
 80066de:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <state+0x288>)
 80066e0:	2205      	movs	r2, #5
 80066e2:	701a      	strb	r2, [r3, #0]
 80066e4:	e049      	b.n	800677a <state+0x26e>
    }
    else if (datatelemetri.alt < 13 && flagstate == 5 && !flaginvalid)
 80066e6:	4b27      	ldr	r3, [pc, #156]	; (8006784 <state+0x278>)
 80066e8:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 80066ec:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80066f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80066f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066f8:	d400      	bmi.n	80066fc <state+0x1f0>
			flagtel = 0;
			valid = 0;
		}
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
    }
}
 80066fa:	e03e      	b.n	800677a <state+0x26e>
    else if (datatelemetri.alt < 13 && flagstate == 5 && !flaginvalid)
 80066fc:	4b25      	ldr	r3, [pc, #148]	; (8006794 <state+0x288>)
 80066fe:	781b      	ldrb	r3, [r3, #0]
 8006700:	2b05      	cmp	r3, #5
 8006702:	d13a      	bne.n	800677a <state+0x26e>
 8006704:	4b21      	ldr	r3, [pc, #132]	; (800678c <state+0x280>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d136      	bne.n	800677a <state+0x26e>
		strcpy(datatelemetri.state, "LANDED");
 800670c:	4b22      	ldr	r3, [pc, #136]	; (8006798 <state+0x28c>)
 800670e:	4a30      	ldr	r2, [pc, #192]	; (80067d0 <state+0x2c4>)
 8006710:	6810      	ldr	r0, [r2, #0]
 8006712:	6018      	str	r0, [r3, #0]
 8006714:	8891      	ldrh	r1, [r2, #4]
 8006716:	7992      	ldrb	r2, [r2, #6]
 8006718:	8099      	strh	r1, [r3, #4]
 800671a:	719a      	strb	r2, [r3, #6]
		datatelemetri.pcdeploy = 'C';
 800671c:	4b19      	ldr	r3, [pc, #100]	; (8006784 <state+0x278>)
 800671e:	2243      	movs	r2, #67	; 0x43
 8006720:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
		datatelemetri.hsdeploy = 'P';
 8006724:	4b17      	ldr	r3, [pc, #92]	; (8006784 <state+0x278>)
 8006726:	2250      	movs	r2, #80	; 0x50
 8006728:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
		TM_BKPSRAM_Write8(STATEIND_ADR,4);
 800672c:	4b1c      	ldr	r3, [pc, #112]	; (80067a0 <state+0x294>)
 800672e:	2204      	movs	r2, #4
 8006730:	701a      	strb	r2, [r3, #0]
		TM_BKPSRAM_Write8(HSDEPLOY_ADR,datatelemetri.hsdeploy);
 8006732:	4b1e      	ldr	r3, [pc, #120]	; (80067ac <state+0x2a0>)
 8006734:	4a13      	ldr	r2, [pc, #76]	; (8006784 <state+0x278>)
 8006736:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 800673a:	701a      	strb	r2, [r3, #0]
		TM_BKPSRAM_Write8(PCDEPLOY_ADR,datatelemetri.pcdeploy);
 800673c:	4b1c      	ldr	r3, [pc, #112]	; (80067b0 <state+0x2a4>)
 800673e:	4a11      	ldr	r2, [pc, #68]	; (8006784 <state+0x278>)
 8006740:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 8006744:	701a      	strb	r2, [r3, #0]
		valid++;
 8006746:	4b17      	ldr	r3, [pc, #92]	; (80067a4 <state+0x298>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	3301      	adds	r3, #1
 800674c:	b2da      	uxtb	r2, r3
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <state+0x298>)
 8006750:	701a      	strb	r2, [r3, #0]
		if (valid > 4)
 8006752:	4b14      	ldr	r3, [pc, #80]	; (80067a4 <state+0x298>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b04      	cmp	r3, #4
 8006758:	d908      	bls.n	800676c <state+0x260>
			flagkameraoff = 1;
 800675a:	4b1e      	ldr	r3, [pc, #120]	; (80067d4 <state+0x2c8>)
 800675c:	2201      	movs	r2, #1
 800675e:	701a      	strb	r2, [r3, #0]
			flagtel = 0;
 8006760:	4b1d      	ldr	r3, [pc, #116]	; (80067d8 <state+0x2cc>)
 8006762:	2200      	movs	r2, #0
 8006764:	701a      	strb	r2, [r3, #0]
			valid = 0;
 8006766:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <state+0x298>)
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 800676c:	2201      	movs	r2, #1
 800676e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006772:	481a      	ldr	r0, [pc, #104]	; (80067dc <state+0x2d0>)
 8006774:	f002 f836 	bl	80087e4 <HAL_GPIO_WritePin>
}
 8006778:	e7ff      	b.n	800677a <state+0x26e>
 800677a:	bf00      	nop
 800677c:	bdb0      	pop	{r4, r5, r7, pc}
 800677e:	bf00      	nop
 8006780:	20001088 	.word	0x20001088
 8006784:	20000ec4 	.word	0x20000ec4
 8006788:	42440000 	.word	0x42440000
 800678c:	20001076 	.word	0x20001076
 8006790:	42c80000 	.word	0x42c80000
 8006794:	20000ec1 	.word	0x20000ec1
 8006798:	20001027 	.word	0x20001027
 800679c:	080178bc 	.word	0x080178bc
 80067a0:	40024096 	.word	0x40024096
 80067a4:	20000ec2 	.word	0x20000ec2
 80067a8:	080178c4 	.word	0x080178c4
 80067ac:	400240fa 	.word	0x400240fa
 80067b0:	4002412c 	.word	0x4002412c
 80067b4:	20000ebe 	.word	0x20000ebe
 80067b8:	20000ebc 	.word	0x20000ebc
 80067bc:	20001077 	.word	0x20001077
 80067c0:	080178d8 	.word	0x080178d8
 80067c4:	43160000 	.word	0x43160000
 80067c8:	20000abc 	.word	0x20000abc
 80067cc:	080178e0 	.word	0x080178e0
 80067d0:	080178ec 	.word	0x080178ec
 80067d4:	20000ebd 	.word	0x20000ebd
 80067d8:	20000ebf 	.word	0x20000ebf
 80067dc:	40020400 	.word	0x40020400

080067e0 <CX>:

void CX()
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
    isidata(4, commandbuff);
 80067e4:	4913      	ldr	r1, [pc, #76]	; (8006834 <CX+0x54>)
 80067e6:	2004      	movs	r0, #4
 80067e8:	f7fc fcde 	bl	80031a8 <isidata>
    if ((commandbuff[0] == 'O') && (commandbuff[1] == 'N'))
 80067ec:	4b11      	ldr	r3, [pc, #68]	; (8006834 <CX+0x54>)
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b4f      	cmp	r3, #79	; 0x4f
 80067f2:	d107      	bne.n	8006804 <CX+0x24>
 80067f4:	4b0f      	ldr	r3, [pc, #60]	; (8006834 <CX+0x54>)
 80067f6:	785b      	ldrb	r3, [r3, #1]
 80067f8:	2b4e      	cmp	r3, #78	; 0x4e
 80067fa:	d103      	bne.n	8006804 <CX+0x24>
    {
    	flagtel = 1;
 80067fc:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <CX+0x58>)
 80067fe:	2201      	movs	r2, #1
 8006800:	701a      	strb	r2, [r3, #0]
 8006802:	e00a      	b.n	800681a <CX+0x3a>
    }
    else if ((commandbuff[0] == 'O') && (commandbuff[1] == 'F'))
 8006804:	4b0b      	ldr	r3, [pc, #44]	; (8006834 <CX+0x54>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	2b4f      	cmp	r3, #79	; 0x4f
 800680a:	d106      	bne.n	800681a <CX+0x3a>
 800680c:	4b09      	ldr	r3, [pc, #36]	; (8006834 <CX+0x54>)
 800680e:	785b      	ldrb	r3, [r3, #1]
 8006810:	2b46      	cmp	r3, #70	; 0x46
 8006812:	d102      	bne.n	800681a <CX+0x3a>
    {
		flagtel = 0;
 8006814:	4b08      	ldr	r3, [pc, #32]	; (8006838 <CX+0x58>)
 8006816:	2200      	movs	r2, #0
 8006818:	701a      	strb	r2, [r3, #0]
    }
	TM_BKPSRAM_Write8(FLAGTEL_ADR, flagtel);
 800681a:	4b08      	ldr	r3, [pc, #32]	; (800683c <CX+0x5c>)
 800681c:	4a06      	ldr	r2, [pc, #24]	; (8006838 <CX+0x58>)
 800681e:	7812      	ldrb	r2, [r2, #0]
 8006820:	701a      	strb	r2, [r3, #0]
    strcpy(datatelemetri.echocmd, "CXON");
 8006822:	4b07      	ldr	r3, [pc, #28]	; (8006840 <CX+0x60>)
 8006824:	4a07      	ldr	r2, [pc, #28]	; (8006844 <CX+0x64>)
 8006826:	e892 0003 	ldmia.w	r2, {r0, r1}
 800682a:	6018      	str	r0, [r3, #0]
 800682c:	3304      	adds	r3, #4
 800682e:	7019      	strb	r1, [r3, #0]
}
 8006830:	bf00      	nop
 8006832:	bd80      	pop	{r7, pc}
 8006834:	200011dc 	.word	0x200011dc
 8006838:	20000ebf 	.word	0x20000ebf
 800683c:	400240c8 	.word	0x400240c8
 8006840:	20001064 	.word	0x20001064
 8006844:	080178b0 	.word	0x080178b0

08006848 <BCN>:

void BCN()
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
    isidata(4, commandbuff);
 800684c:	4919      	ldr	r1, [pc, #100]	; (80068b4 <BCN+0x6c>)
 800684e:	2004      	movs	r0, #4
 8006850:	f7fc fcaa 	bl	80031a8 <isidata>
    if ((commandbuff[0] == 'O')&&(commandbuff[1] == 'N'))
 8006854:	4b17      	ldr	r3, [pc, #92]	; (80068b4 <BCN+0x6c>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	2b4f      	cmp	r3, #79	; 0x4f
 800685a:	d111      	bne.n	8006880 <BCN+0x38>
 800685c:	4b15      	ldr	r3, [pc, #84]	; (80068b4 <BCN+0x6c>)
 800685e:	785b      	ldrb	r3, [r3, #1]
 8006860:	2b4e      	cmp	r3, #78	; 0x4e
 8006862:	d10d      	bne.n	8006880 <BCN+0x38>
    {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8006864:	2201      	movs	r2, #1
 8006866:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800686a:	4813      	ldr	r0, [pc, #76]	; (80068b8 <BCN+0x70>)
 800686c:	f001 ffba 	bl	80087e4 <HAL_GPIO_WritePin>
		strcpy(datatelemetri.echocmd, "BCNON");
 8006870:	4b12      	ldr	r3, [pc, #72]	; (80068bc <BCN+0x74>)
 8006872:	4a13      	ldr	r2, [pc, #76]	; (80068c0 <BCN+0x78>)
 8006874:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006878:	6018      	str	r0, [r3, #0]
 800687a:	3304      	adds	r3, #4
 800687c:	8019      	strh	r1, [r3, #0]
    else if ((commandbuff[0] == 'O')&&(commandbuff[1] == 'F'))
    {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
		strcpy(datatelemetri.echocmd, "BCNOFF");
    }
}
 800687e:	e017      	b.n	80068b0 <BCN+0x68>
    else if ((commandbuff[0] == 'O')&&(commandbuff[1] == 'F'))
 8006880:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <BCN+0x6c>)
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	2b4f      	cmp	r3, #79	; 0x4f
 8006886:	d113      	bne.n	80068b0 <BCN+0x68>
 8006888:	4b0a      	ldr	r3, [pc, #40]	; (80068b4 <BCN+0x6c>)
 800688a:	785b      	ldrb	r3, [r3, #1]
 800688c:	2b46      	cmp	r3, #70	; 0x46
 800688e:	d10f      	bne.n	80068b0 <BCN+0x68>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 8006890:	2200      	movs	r2, #0
 8006892:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006896:	4808      	ldr	r0, [pc, #32]	; (80068b8 <BCN+0x70>)
 8006898:	f001 ffa4 	bl	80087e4 <HAL_GPIO_WritePin>
		strcpy(datatelemetri.echocmd, "BCNOFF");
 800689c:	4b07      	ldr	r3, [pc, #28]	; (80068bc <BCN+0x74>)
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <BCN+0x7c>)
 80068a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80068a4:	6018      	str	r0, [r3, #0]
 80068a6:	3304      	adds	r3, #4
 80068a8:	8019      	strh	r1, [r3, #0]
 80068aa:	3302      	adds	r3, #2
 80068ac:	0c0a      	lsrs	r2, r1, #16
 80068ae:	701a      	strb	r2, [r3, #0]
}
 80068b0:	bf00      	nop
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	200011dc 	.word	0x200011dc
 80068b8:	40020400 	.word	0x40020400
 80068bc:	20001064 	.word	0x20001064
 80068c0:	0801797c 	.word	0x0801797c
 80068c4:	08017984 	.word	0x08017984

080068c8 <ST>:

void ST()
{
 80068c8:	b5b0      	push	{r4, r5, r7, lr}
 80068ca:	b088      	sub	sp, #32
 80068cc:	af04      	add	r7, sp, #16
    isidata(4, commandbuff);
 80068ce:	495b      	ldr	r1, [pc, #364]	; (8006a3c <ST+0x174>)
 80068d0:	2004      	movs	r0, #4
 80068d2:	f7fc fc69 	bl	80031a8 <isidata>
    uint8_t bufjam, bufmenit, bufdetik;
    char bufjam_[3], bufmenit_[3], bufdetik_[3];
    if (commandbuff[0] == 'G')
 80068d6:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <ST+0x174>)
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	2b47      	cmp	r3, #71	; 0x47
 80068dc:	d14f      	bne.n	800697e <ST+0xb6>
    {
		sprintf(bufjam_, "%c%c", gpsjam[0], gpsjam[1]);
 80068de:	4b58      	ldr	r3, [pc, #352]	; (8006a40 <ST+0x178>)
 80068e0:	781b      	ldrb	r3, [r3, #0]
 80068e2:	461a      	mov	r2, r3
 80068e4:	4b56      	ldr	r3, [pc, #344]	; (8006a40 <ST+0x178>)
 80068e6:	785b      	ldrb	r3, [r3, #1]
 80068e8:	f107 0008 	add.w	r0, r7, #8
 80068ec:	4955      	ldr	r1, [pc, #340]	; (8006a44 <ST+0x17c>)
 80068ee:	f00d f931 	bl	8013b54 <siprintf>
		sprintf(bufmenit_, "%c%c", gpsmenit[0], gpsmenit[1]);
 80068f2:	4b55      	ldr	r3, [pc, #340]	; (8006a48 <ST+0x180>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	461a      	mov	r2, r3
 80068f8:	4b53      	ldr	r3, [pc, #332]	; (8006a48 <ST+0x180>)
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	1d38      	adds	r0, r7, #4
 80068fe:	4951      	ldr	r1, [pc, #324]	; (8006a44 <ST+0x17c>)
 8006900:	f00d f928 	bl	8013b54 <siprintf>
		sprintf(bufdetik_, "%c%c", gpsdetik[0], gpsdetik[1]);
 8006904:	4b51      	ldr	r3, [pc, #324]	; (8006a4c <ST+0x184>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	4b50      	ldr	r3, [pc, #320]	; (8006a4c <ST+0x184>)
 800690c:	785b      	ldrb	r3, [r3, #1]
 800690e:	4638      	mov	r0, r7
 8006910:	494c      	ldr	r1, [pc, #304]	; (8006a44 <ST+0x17c>)
 8006912:	f00d f91f 	bl	8013b54 <siprintf>
		bufjam = (uint8_t)atoi(bufjam_);
 8006916:	f107 0308 	add.w	r3, r7, #8
 800691a:	4618      	mov	r0, r3
 800691c:	f00b fcd9 	bl	80122d2 <atoi>
 8006920:	4603      	mov	r3, r0
 8006922:	73fb      	strb	r3, [r7, #15]
		bufmenit = (uint8_t)atoi(bufmenit_);
 8006924:	1d3b      	adds	r3, r7, #4
 8006926:	4618      	mov	r0, r3
 8006928:	f00b fcd3 	bl	80122d2 <atoi>
 800692c:	4603      	mov	r3, r0
 800692e:	73bb      	strb	r3, [r7, #14]
		bufdetik = (uint8_t)atoi(bufdetik_);
 8006930:	463b      	mov	r3, r7
 8006932:	4618      	mov	r0, r3
 8006934:	f00b fccd 	bl	80122d2 <atoi>
 8006938:	4603      	mov	r3, r0
 800693a:	737b      	strb	r3, [r7, #13]
		Settime(bufjam, bufmenit, bufdetik);
 800693c:	7b7a      	ldrb	r2, [r7, #13]
 800693e:	7bb9      	ldrb	r1, [r7, #14]
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	4618      	mov	r0, r3
 8006944:	f7ff fb9e 	bl	8006084 <Settime>
		wakturtc(bufjam, bufjam_);
 8006948:	f107 0208 	add.w	r2, r7, #8
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	4611      	mov	r1, r2
 8006950:	4618      	mov	r0, r3
 8006952:	f7ff fb4f 	bl	8005ff4 <wakturtc>
		wakturtc(bufmenit, bufmenit_);
 8006956:	1d3a      	adds	r2, r7, #4
 8006958:	7bbb      	ldrb	r3, [r7, #14]
 800695a:	4611      	mov	r1, r2
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fb49 	bl	8005ff4 <wakturtc>
		wakturtc(bufdetik, bufdetik_);
 8006962:	463a      	mov	r2, r7
 8006964:	7b7b      	ldrb	r3, [r7, #13]
 8006966:	4611      	mov	r1, r2
 8006968:	4618      	mov	r0, r3
 800696a:	f7ff fb43 	bl	8005ff4 <wakturtc>
		strcpy(datatelemetri.echocmd, "STGPS");
 800696e:	4b38      	ldr	r3, [pc, #224]	; (8006a50 <ST+0x188>)
 8006970:	4a38      	ldr	r2, [pc, #224]	; (8006a54 <ST+0x18c>)
 8006972:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006976:	6018      	str	r0, [r3, #0]
 8006978:	3304      	adds	r3, #4
 800697a:	8019      	strh	r1, [r3, #0]
		wakturtc(bufjam, bufjam_);
		wakturtc(bufmenit, bufmenit_);
		wakturtc(bufdetik, bufdetik_);
		sprintf(datatelemetri.echocmd, "ST%c%c:%c%c:%c%c", bufjam_[0], bufjam_[1], bufmenit_[0], bufmenit_[1], bufdetik_[0], bufdetik_[1]);
    }
}
 800697c:	e059      	b.n	8006a32 <ST+0x16a>
		sprintf(bufjam_, "%c%c", commandbuff[0], commandbuff[1]);
 800697e:	4b2f      	ldr	r3, [pc, #188]	; (8006a3c <ST+0x174>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	461a      	mov	r2, r3
 8006984:	4b2d      	ldr	r3, [pc, #180]	; (8006a3c <ST+0x174>)
 8006986:	785b      	ldrb	r3, [r3, #1]
 8006988:	f107 0008 	add.w	r0, r7, #8
 800698c:	492d      	ldr	r1, [pc, #180]	; (8006a44 <ST+0x17c>)
 800698e:	f00d f8e1 	bl	8013b54 <siprintf>
		bufjam = (uint8_t)atoi(bufjam_);
 8006992:	f107 0308 	add.w	r3, r7, #8
 8006996:	4618      	mov	r0, r3
 8006998:	f00b fc9b 	bl	80122d2 <atoi>
 800699c:	4603      	mov	r3, r0
 800699e:	73fb      	strb	r3, [r7, #15]
		sprintf(bufmenit_, "%c%c", commandbuff[3], commandbuff[4]);
 80069a0:	4b26      	ldr	r3, [pc, #152]	; (8006a3c <ST+0x174>)
 80069a2:	78db      	ldrb	r3, [r3, #3]
 80069a4:	461a      	mov	r2, r3
 80069a6:	4b25      	ldr	r3, [pc, #148]	; (8006a3c <ST+0x174>)
 80069a8:	791b      	ldrb	r3, [r3, #4]
 80069aa:	1d38      	adds	r0, r7, #4
 80069ac:	4925      	ldr	r1, [pc, #148]	; (8006a44 <ST+0x17c>)
 80069ae:	f00d f8d1 	bl	8013b54 <siprintf>
		bufmenit = (uint8_t)atoi(bufmenit_);
 80069b2:	1d3b      	adds	r3, r7, #4
 80069b4:	4618      	mov	r0, r3
 80069b6:	f00b fc8c 	bl	80122d2 <atoi>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73bb      	strb	r3, [r7, #14]
		sprintf(bufdetik_, "%c%c", commandbuff[6], commandbuff[7]);
 80069be:	4b1f      	ldr	r3, [pc, #124]	; (8006a3c <ST+0x174>)
 80069c0:	799b      	ldrb	r3, [r3, #6]
 80069c2:	461a      	mov	r2, r3
 80069c4:	4b1d      	ldr	r3, [pc, #116]	; (8006a3c <ST+0x174>)
 80069c6:	79db      	ldrb	r3, [r3, #7]
 80069c8:	4638      	mov	r0, r7
 80069ca:	491e      	ldr	r1, [pc, #120]	; (8006a44 <ST+0x17c>)
 80069cc:	f00d f8c2 	bl	8013b54 <siprintf>
		bufdetik = (uint8_t)atoi(bufdetik_);
 80069d0:	463b      	mov	r3, r7
 80069d2:	4618      	mov	r0, r3
 80069d4:	f00b fc7d 	bl	80122d2 <atoi>
 80069d8:	4603      	mov	r3, r0
 80069da:	737b      	strb	r3, [r7, #13]
		Settime(bufjam, bufmenit, bufdetik);
 80069dc:	7b7a      	ldrb	r2, [r7, #13]
 80069de:	7bb9      	ldrb	r1, [r7, #14]
 80069e0:	7bfb      	ldrb	r3, [r7, #15]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff fb4e 	bl	8006084 <Settime>
		wakturtc(bufjam, bufjam_);
 80069e8:	f107 0208 	add.w	r2, r7, #8
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
 80069ee:	4611      	mov	r1, r2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff faff 	bl	8005ff4 <wakturtc>
		wakturtc(bufmenit, bufmenit_);
 80069f6:	1d3a      	adds	r2, r7, #4
 80069f8:	7bbb      	ldrb	r3, [r7, #14]
 80069fa:	4611      	mov	r1, r2
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7ff faf9 	bl	8005ff4 <wakturtc>
		wakturtc(bufdetik, bufdetik_);
 8006a02:	463a      	mov	r2, r7
 8006a04:	7b7b      	ldrb	r3, [r7, #13]
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff faf3 	bl	8005ff4 <wakturtc>
		sprintf(datatelemetri.echocmd, "ST%c%c:%c%c:%c%c", bufjam_[0], bufjam_[1], bufmenit_[0], bufmenit_[1], bufdetik_[0], bufdetik_[1]);
 8006a0e:	7a3b      	ldrb	r3, [r7, #8]
 8006a10:	461c      	mov	r4, r3
 8006a12:	7a7b      	ldrb	r3, [r7, #9]
 8006a14:	461d      	mov	r5, r3
 8006a16:	793b      	ldrb	r3, [r7, #4]
 8006a18:	797a      	ldrb	r2, [r7, #5]
 8006a1a:	7839      	ldrb	r1, [r7, #0]
 8006a1c:	7878      	ldrb	r0, [r7, #1]
 8006a1e:	9003      	str	r0, [sp, #12]
 8006a20:	9102      	str	r1, [sp, #8]
 8006a22:	9201      	str	r2, [sp, #4]
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	462b      	mov	r3, r5
 8006a28:	4622      	mov	r2, r4
 8006a2a:	490b      	ldr	r1, [pc, #44]	; (8006a58 <ST+0x190>)
 8006a2c:	4808      	ldr	r0, [pc, #32]	; (8006a50 <ST+0x188>)
 8006a2e:	f00d f891 	bl	8013b54 <siprintf>
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bdb0      	pop	{r4, r5, r7, pc}
 8006a3a:	bf00      	nop
 8006a3c:	200011dc 	.word	0x200011dc
 8006a40:	200011d8 	.word	0x200011d8
 8006a44:	0801798c 	.word	0x0801798c
 8006a48:	200011d4 	.word	0x200011d4
 8006a4c:	200011d0 	.word	0x200011d0
 8006a50:	20001064 	.word	0x20001064
 8006a54:	08017994 	.word	0x08017994
 8006a58:	0801799c 	.word	0x0801799c

08006a5c <SIM>:

void SIM()
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	af00      	add	r7, sp, #0
    isidata(4, commandbuff);
 8006a60:	4927      	ldr	r1, [pc, #156]	; (8006b00 <SIM+0xa4>)
 8006a62:	2004      	movs	r0, #4
 8006a64:	f7fc fba0 	bl	80031a8 <isidata>
    if (flagsim == 0 && commandbuff[0] == 'E' && commandbuff[1] == 'N')
 8006a68:	4b26      	ldr	r3, [pc, #152]	; (8006b04 <SIM+0xa8>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d110      	bne.n	8006a92 <SIM+0x36>
 8006a70:	4b23      	ldr	r3, [pc, #140]	; (8006b00 <SIM+0xa4>)
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	2b45      	cmp	r3, #69	; 0x45
 8006a76:	d10c      	bne.n	8006a92 <SIM+0x36>
 8006a78:	4b21      	ldr	r3, [pc, #132]	; (8006b00 <SIM+0xa4>)
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b4e      	cmp	r3, #78	; 0x4e
 8006a7e:	d108      	bne.n	8006a92 <SIM+0x36>
    {
		flagsim = 1;
 8006a80:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <SIM+0xa8>)
 8006a82:	2201      	movs	r2, #1
 8006a84:	701a      	strb	r2, [r3, #0]
		strcpy(datatelemetri.echocmd, "SIMENABLE");
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <SIM+0xac>)
 8006a88:	4a20      	ldr	r2, [pc, #128]	; (8006b0c <SIM+0xb0>)
 8006a8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006a8c:	c303      	stmia	r3!, {r0, r1}
 8006a8e:	801a      	strh	r2, [r3, #0]
 8006a90:	e033      	b.n	8006afa <SIM+0x9e>
    }
    else if (flagsim == 1 && commandbuff[0] == 'A' && commandbuff[1] == 'C')
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <SIM+0xa8>)
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d114      	bne.n	8006ac4 <SIM+0x68>
 8006a9a:	4b19      	ldr	r3, [pc, #100]	; (8006b00 <SIM+0xa4>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b41      	cmp	r3, #65	; 0x41
 8006aa0:	d110      	bne.n	8006ac4 <SIM+0x68>
 8006aa2:	4b17      	ldr	r3, [pc, #92]	; (8006b00 <SIM+0xa4>)
 8006aa4:	785b      	ldrb	r3, [r3, #1]
 8006aa6:	2b43      	cmp	r3, #67	; 0x43
 8006aa8:	d10c      	bne.n	8006ac4 <SIM+0x68>
    {
		flagsim = 2;
 8006aaa:	4b16      	ldr	r3, [pc, #88]	; (8006b04 <SIM+0xa8>)
 8006aac:	2202      	movs	r2, #2
 8006aae:	701a      	strb	r2, [r3, #0]
		datatelemetri.fmode = 'S';
 8006ab0:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <SIM+0xb4>)
 8006ab2:	2253      	movs	r2, #83	; 0x53
 8006ab4:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		strcpy(datatelemetri.echocmd, "SIMACTIVATE");
 8006ab8:	4b13      	ldr	r3, [pc, #76]	; (8006b08 <SIM+0xac>)
 8006aba:	4a16      	ldr	r2, [pc, #88]	; (8006b14 <SIM+0xb8>)
 8006abc:	ca07      	ldmia	r2, {r0, r1, r2}
 8006abe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ac2:	e01a      	b.n	8006afa <SIM+0x9e>
    }
    else if (commandbuff[0] == 'D' && commandbuff[1] == 'I')
 8006ac4:	4b0e      	ldr	r3, [pc, #56]	; (8006b00 <SIM+0xa4>)
 8006ac6:	781b      	ldrb	r3, [r3, #0]
 8006ac8:	2b44      	cmp	r3, #68	; 0x44
 8006aca:	d116      	bne.n	8006afa <SIM+0x9e>
 8006acc:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <SIM+0xa4>)
 8006ace:	785b      	ldrb	r3, [r3, #1]
 8006ad0:	2b49      	cmp	r3, #73	; 0x49
 8006ad2:	d112      	bne.n	8006afa <SIM+0x9e>
    {
		flagrefalt = 0;
 8006ad4:	4b10      	ldr	r3, [pc, #64]	; (8006b18 <SIM+0xbc>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	701a      	strb	r2, [r3, #0]
		flagsim = 0;
 8006ada:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <SIM+0xa8>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	701a      	strb	r2, [r3, #0]
		datatelemetri.fmode = 'F';
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	; (8006b10 <SIM+0xb4>)
 8006ae2:	2246      	movs	r2, #70	; 0x46
 8006ae4:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		strcpy(datatelemetri.echocmd, "SIMDISABLE");
 8006ae8:	4b07      	ldr	r3, [pc, #28]	; (8006b08 <SIM+0xac>)
 8006aea:	4a0c      	ldr	r2, [pc, #48]	; (8006b1c <SIM+0xc0>)
 8006aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8006aee:	c303      	stmia	r3!, {r0, r1}
 8006af0:	801a      	strh	r2, [r3, #0]
 8006af2:	3302      	adds	r3, #2
 8006af4:	0c12      	lsrs	r2, r2, #16
 8006af6:	701a      	strb	r2, [r3, #0]
    }
}
 8006af8:	e7ff      	b.n	8006afa <SIM+0x9e>
 8006afa:	bf00      	nop
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	200011dc 	.word	0x200011dc
 8006b04:	20000ec0 	.word	0x20000ec0
 8006b08:	20001064 	.word	0x20001064
 8006b0c:	080179b0 	.word	0x080179b0
 8006b10:	20000ec4 	.word	0x20000ec4
 8006b14:	080179bc 	.word	0x080179bc
 8006b18:	20001075 	.word	0x20001075
 8006b1c:	080179c8 	.word	0x080179c8

08006b20 <SIMP>:

void SIMP()
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
    if (flagsim == 2)
 8006b24:	4b1b      	ldr	r3, [pc, #108]	; (8006b94 <SIMP+0x74>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d131      	bne.n	8006b90 <SIMP+0x70>
    {
		isidata(4, commandbuff);
 8006b2c:	491a      	ldr	r1, [pc, #104]	; (8006b98 <SIMP+0x78>)
 8006b2e:	2004      	movs	r0, #4
 8006b30:	f7fc fb3a 	bl	80031a8 <isidata>
		Spressure = atof(commandbuff);
 8006b34:	4818      	ldr	r0, [pc, #96]	; (8006b98 <SIMP+0x78>)
 8006b36:	f00b fbc9 	bl	80122cc <atof>
 8006b3a:	ec53 2b10 	vmov	r2, r3, d0
 8006b3e:	4610      	mov	r0, r2
 8006b40:	4619      	mov	r1, r3
 8006b42:	f7fa f851 	bl	8000be8 <__aeabi_d2f>
 8006b46:	4603      	mov	r3, r0
 8006b48:	4a14      	ldr	r2, [pc, #80]	; (8006b9c <SIMP+0x7c>)
 8006b4a:	6013      	str	r3, [r2, #0]
		sprintf(datatelemetri.echocmd, "SIMP%.2f", Spressure);
 8006b4c:	4b13      	ldr	r3, [pc, #76]	; (8006b9c <SIMP+0x7c>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7f9 fcf9 	bl	8000548 <__aeabi_f2d>
 8006b56:	4602      	mov	r2, r0
 8006b58:	460b      	mov	r3, r1
 8006b5a:	4911      	ldr	r1, [pc, #68]	; (8006ba0 <SIMP+0x80>)
 8006b5c:	4811      	ldr	r0, [pc, #68]	; (8006ba4 <SIMP+0x84>)
 8006b5e:	f00c fff9 	bl	8013b54 <siprintf>
		if (!flagrefalt)
 8006b62:	4b11      	ldr	r3, [pc, #68]	; (8006ba8 <SIMP+0x88>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d112      	bne.n	8006b90 <SIMP+0x70>
		{
			refalt = pressuretoalt(Spressure / 100);
 8006b6a:	4b0c      	ldr	r3, [pc, #48]	; (8006b9c <SIMP+0x7c>)
 8006b6c:	edd3 7a00 	vldr	s15, [r3]
 8006b70:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006bac <SIMP+0x8c>
 8006b74:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006b78:	eeb0 0a47 	vmov.f32	s0, s14
 8006b7c:	f7ff f9e8 	bl	8005f50 <pressuretoalt>
 8006b80:	eef0 7a40 	vmov.f32	s15, s0
 8006b84:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <SIMP+0x90>)
 8006b86:	edc3 7a00 	vstr	s15, [r3]
			flagrefalt = 1;
 8006b8a:	4b07      	ldr	r3, [pc, #28]	; (8006ba8 <SIMP+0x88>)
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	701a      	strb	r2, [r3, #0]
		}
    }
}
 8006b90:	bf00      	nop
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000ec0 	.word	0x20000ec0
 8006b98:	200011dc 	.word	0x200011dc
 8006b9c:	2000004c 	.word	0x2000004c
 8006ba0:	080179d4 	.word	0x080179d4
 8006ba4:	20001064 	.word	0x20001064
 8006ba8:	20001075 	.word	0x20001075
 8006bac:	42c80000 	.word	0x42c80000
 8006bb0:	20001084 	.word	0x20001084

08006bb4 <CAL>:

void CAL()
{
 8006bb4:	b598      	push	{r3, r4, r7, lr}
 8006bb6:	af00      	add	r7, sp, #0
    if (flagsim == 0)
 8006bb8:	4b30      	ldr	r3, [pc, #192]	; (8006c7c <CAL+0xc8>)
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10f      	bne.n	8006be0 <CAL+0x2c>
    {
    	refalt = pressuretoalt(Pressure / 100);
 8006bc0:	4b2f      	ldr	r3, [pc, #188]	; (8006c80 <CAL+0xcc>)
 8006bc2:	edd3 7a00 	vldr	s15, [r3]
 8006bc6:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006c84 <CAL+0xd0>
 8006bca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006bce:	eeb0 0a47 	vmov.f32	s0, s14
 8006bd2:	f7ff f9bd 	bl	8005f50 <pressuretoalt>
 8006bd6:	eef0 7a40 	vmov.f32	s15, s0
 8006bda:	4b2b      	ldr	r3, [pc, #172]	; (8006c88 <CAL+0xd4>)
 8006bdc:	edc3 7a00 	vstr	s15, [r3]
    }
    flagsim = 0;
 8006be0:	4b26      	ldr	r3, [pc, #152]	; (8006c7c <CAL+0xc8>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	701a      	strb	r2, [r3, #0]
    flagstate = 0;
 8006be6:	4b29      	ldr	r3, [pc, #164]	; (8006c8c <CAL+0xd8>)
 8006be8:	2200      	movs	r2, #0
 8006bea:	701a      	strb	r2, [r3, #0]
    flagrefalt = 0;
 8006bec:	4b28      	ldr	r3, [pc, #160]	; (8006c90 <CAL+0xdc>)
 8006bee:	2200      	movs	r2, #0
 8006bf0:	701a      	strb	r2, [r3, #0]
    flaggimbal = 0;
 8006bf2:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <CAL+0xe0>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
    flaginvalid = 0;
 8006bf8:	4b27      	ldr	r3, [pc, #156]	; (8006c98 <CAL+0xe4>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
    counting  = 0;
 8006bfe:	4b27      	ldr	r3, [pc, #156]	; (8006c9c <CAL+0xe8>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	801a      	strh	r2, [r3, #0]
    datatelemetri.packetcount = counting;
 8006c04:	4b25      	ldr	r3, [pc, #148]	; (8006c9c <CAL+0xe8>)
 8006c06:	881a      	ldrh	r2, [r3, #0]
 8006c08:	4b25      	ldr	r3, [pc, #148]	; (8006ca0 <CAL+0xec>)
 8006c0a:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    datatelemetri.hsdeploy = 'N';
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <CAL+0xec>)
 8006c10:	224e      	movs	r2, #78	; 0x4e
 8006c12:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    datatelemetri.pcdeploy = 'N';
 8006c16:	4b22      	ldr	r3, [pc, #136]	; (8006ca0 <CAL+0xec>)
 8006c18:	224e      	movs	r2, #78	; 0x4e
 8006c1a:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    strcpy(datatelemetri.state, "LAUNCH_WAIT");
 8006c1e:	4a21      	ldr	r2, [pc, #132]	; (8006ca4 <CAL+0xf0>)
 8006c20:	4b21      	ldr	r3, [pc, #132]	; (8006ca8 <CAL+0xf4>)
 8006c22:	4614      	mov	r4, r2
 8006c24:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006c26:	6020      	str	r0, [r4, #0]
 8006c28:	6061      	str	r1, [r4, #4]
 8006c2a:	60a2      	str	r2, [r4, #8]
    strcpy(datatelemetri.echocmd, "CAL");
 8006c2c:	4b1f      	ldr	r3, [pc, #124]	; (8006cac <CAL+0xf8>)
 8006c2e:	4a20      	ldr	r2, [pc, #128]	; (8006cb0 <CAL+0xfc>)
 8006c30:	601a      	str	r2, [r3, #0]

    RESETSRAM();
 8006c32:	f7fe ff49 	bl	8005ac8 <RESETSRAM>

    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 8006c36:	2200      	movs	r2, #0
 8006c38:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c3c:	481d      	ldr	r0, [pc, #116]	; (8006cb4 <CAL+0x100>)
 8006c3e:	f001 fdd1 	bl	80087e4 <HAL_GPIO_WritePin>
    servogerak(&htim3, TIM_CHANNEL_1, 0);
 8006c42:	2200      	movs	r2, #0
 8006c44:	2100      	movs	r1, #0
 8006c46:	481c      	ldr	r0, [pc, #112]	; (8006cb8 <CAL+0x104>)
 8006c48:	f7fd ffc2 	bl	8004bd0 <servogerak>
	servogerak(&htim3, TIM_CHANNEL_3, 0);
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2108      	movs	r1, #8
 8006c50:	4819      	ldr	r0, [pc, #100]	; (8006cb8 <CAL+0x104>)
 8006c52:	f7fd ffbd 	bl	8004bd0 <servogerak>
    servogerak(&htim4, TIM_CHANNEL_1, 0);
 8006c56:	2200      	movs	r2, #0
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4818      	ldr	r0, [pc, #96]	; (8006cbc <CAL+0x108>)
 8006c5c:	f7fd ffb8 	bl	8004bd0 <servogerak>

    resetPosition(0);
 8006c60:	2000      	movs	r0, #0
 8006c62:	f7fb fee5 	bl	8002a30 <resetPosition>
    resetCumulativePosition(0);
 8006c66:	2000      	movs	r0, #0
 8006c68:	f7fb fef6 	bl	8002a58 <resetCumulativePosition>
    TIM1->CCR2 = 0;
 8006c6c:	4b14      	ldr	r3, [pc, #80]	; (8006cc0 <CAL+0x10c>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
    TIM1->CCR3 = 0;
 8006c72:	4b13      	ldr	r3, [pc, #76]	; (8006cc0 <CAL+0x10c>)
 8006c74:	2200      	movs	r2, #0
 8006c76:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006c78:	bf00      	nop
 8006c7a:	bd98      	pop	{r3, r4, r7, pc}
 8006c7c:	20000ec0 	.word	0x20000ec0
 8006c80:	2000107c 	.word	0x2000107c
 8006c84:	42c80000 	.word	0x42c80000
 8006c88:	20001084 	.word	0x20001084
 8006c8c:	20000ec1 	.word	0x20000ec1
 8006c90:	20001075 	.word	0x20001075
 8006c94:	20001077 	.word	0x20001077
 8006c98:	20001076 	.word	0x20001076
 8006c9c:	20000048 	.word	0x20000048
 8006ca0:	20000ec4 	.word	0x20000ec4
 8006ca4:	20001027 	.word	0x20001027
 8006ca8:	080178a4 	.word	0x080178a4
 8006cac:	20001064 	.word	0x20001064
 8006cb0:	004c4143 	.word	0x004c4143
 8006cb4:	40020400 	.word	0x40020400
 8006cb8:	20000a74 	.word	0x20000a74
 8006cbc:	20000abc 	.word	0x20000abc
 8006cc0:	40010000 	.word	0x40010000

08006cc4 <GB>:

void GB()
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	af00      	add	r7, sp, #0
	isidata(4, commandbuff);
 8006cc8:	4909      	ldr	r1, [pc, #36]	; (8006cf0 <GB+0x2c>)
 8006cca:	2004      	movs	r0, #4
 8006ccc:	f7fc fa6c 	bl	80031a8 <isidata>
	switch (commandbuff[1])
 8006cd0:	4b07      	ldr	r3, [pc, #28]	; (8006cf0 <GB+0x2c>)
 8006cd2:	785b      	ldrb	r3, [r3, #1]
 8006cd4:	2b46      	cmp	r3, #70	; 0x46
 8006cd6:	d005      	beq.n	8006ce4 <GB+0x20>
 8006cd8:	2b4e      	cmp	r3, #78	; 0x4e
 8006cda:	d107      	bne.n	8006cec <GB+0x28>
	{
		case 'N':
			flaggimbal = 1;
 8006cdc:	4b05      	ldr	r3, [pc, #20]	; (8006cf4 <GB+0x30>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
			break;
 8006ce2:	e003      	b.n	8006cec <GB+0x28>
		case 'F':
			flaggimbal = 0;
 8006ce4:	4b03      	ldr	r3, [pc, #12]	; (8006cf4 <GB+0x30>)
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	701a      	strb	r2, [r3, #0]
			break;
 8006cea:	bf00      	nop
	}
}
 8006cec:	bf00      	nop
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	200011dc 	.word	0x200011dc
 8006cf4:	20001077 	.word	0x20001077

08006cf8 <HS>:

void HS()
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	af00      	add	r7, sp, #0
	servogerak(&htim4, TIM_CHANNEL_1, 135);
 8006cfc:	2287      	movs	r2, #135	; 0x87
 8006cfe:	2100      	movs	r1, #0
 8006d00:	4802      	ldr	r0, [pc, #8]	; (8006d0c <HS+0x14>)
 8006d02:	f7fd ff65 	bl	8004bd0 <servogerak>
}
 8006d06:	bf00      	nop
 8006d08:	bd80      	pop	{r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	20000abc 	.word	0x20000abc

08006d10 <CAM>:

void CAM()
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	af00      	add	r7, sp, #0
	isidata(4, commandbuff);
 8006d14:	4912      	ldr	r1, [pc, #72]	; (8006d60 <CAM+0x50>)
 8006d16:	2004      	movs	r0, #4
 8006d18:	f7fc fa46 	bl	80031a8 <isidata>
	switch (commandbuff[0])
 8006d1c:	4b10      	ldr	r3, [pc, #64]	; (8006d60 <CAM+0x50>)
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	2b32      	cmp	r3, #50	; 0x32
 8006d22:	d00c      	beq.n	8006d3e <CAM+0x2e>
 8006d24:	2b32      	cmp	r3, #50	; 0x32
 8006d26:	dc18      	bgt.n	8006d5a <CAM+0x4a>
 8006d28:	2b30      	cmp	r3, #48	; 0x30
 8006d2a:	d00f      	beq.n	8006d4c <CAM+0x3c>
 8006d2c:	2b31      	cmp	r3, #49	; 0x31
 8006d2e:	d114      	bne.n	8006d5a <CAM+0x4a>
	{
		case '1':
			camera = 1;
 8006d30:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <CAM+0x54>)
 8006d32:	2201      	movs	r2, #1
 8006d34:	701a      	strb	r2, [r3, #0]
			flagkameraon = 1;
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <CAM+0x58>)
 8006d38:	2201      	movs	r2, #1
 8006d3a:	701a      	strb	r2, [r3, #0]
			break;
 8006d3c:	e00d      	b.n	8006d5a <CAM+0x4a>
		case '2':
			camera = 2;
 8006d3e:	4b09      	ldr	r3, [pc, #36]	; (8006d64 <CAM+0x54>)
 8006d40:	2202      	movs	r2, #2
 8006d42:	701a      	strb	r2, [r3, #0]
			flagkameraon = 2;
 8006d44:	4b08      	ldr	r3, [pc, #32]	; (8006d68 <CAM+0x58>)
 8006d46:	2202      	movs	r2, #2
 8006d48:	701a      	strb	r2, [r3, #0]
			break;
 8006d4a:	e006      	b.n	8006d5a <CAM+0x4a>
		case '0':
			camera = 0;
 8006d4c:	4b05      	ldr	r3, [pc, #20]	; (8006d64 <CAM+0x54>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
			flagkameraoff = 1;
 8006d52:	4b06      	ldr	r3, [pc, #24]	; (8006d6c <CAM+0x5c>)
 8006d54:	2201      	movs	r2, #1
 8006d56:	701a      	strb	r2, [r3, #0]
			break;
 8006d58:	bf00      	nop
	}
}
 8006d5a:	bf00      	nop
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	200011dc 	.word	0x200011dc
 8006d64:	20000ebe 	.word	0x20000ebe
 8006d68:	20000ebc 	.word	0x20000ebc
 8006d6c:	20000ebd 	.word	0x20000ebd

08006d70 <CR>:

void CR()
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 8006d74:	f7fe fd9e 	bl	80058b4 <__NVIC_SystemReset>

08006d78 <TM_BKPSRAM_Init>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_bkpsram.h"

void TM_BKPSRAM_Init(void) {
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	af00      	add	r7, sp, #0
	/* Enable PWR clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8006d7c:	4b0c      	ldr	r3, [pc, #48]	; (8006db0 <TM_BKPSRAM_Init+0x38>)
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	4a0b      	ldr	r2, [pc, #44]	; (8006db0 <TM_BKPSRAM_Init+0x38>)
 8006d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d86:	6413      	str	r3, [r2, #64]	; 0x40
	
	/* Enable backup SRAM Clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 8006d88:	4b09      	ldr	r3, [pc, #36]	; (8006db0 <TM_BKPSRAM_Init+0x38>)
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	4a08      	ldr	r2, [pc, #32]	; (8006db0 <TM_BKPSRAM_Init+0x38>)
 8006d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d92:	6313      	str	r3, [r2, #48]	; 0x30
	
	/* Allow access to backup domain */
	HAL_PWR_EnableBkUpAccess();
 8006d94:	f003 f9a8 	bl	800a0e8 <HAL_PWR_EnableBkUpAccess>
	
	/* Enable the Backup SRAM low power Regulator */
	/* This will allow data to stay when using VBat mode */
	HAL_PWREx_EnableBkUpReg();
 8006d98:	f003 f9ba 	bl	800a110 <HAL_PWREx_EnableBkUpReg>
	
	/* Wait for backup regulator to be ready  */
	while (!(PWR->CSR & (PWR_FLAG_BRR)));
 8006d9c:	bf00      	nop
 8006d9e:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <TM_BKPSRAM_Init+0x3c>)
 8006da0:	685b      	ldr	r3, [r3, #4]
 8006da2:	f003 0308 	and.w	r3, r3, #8
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0f9      	beq.n	8006d9e <TM_BKPSRAM_Init+0x26>
}
 8006daa:	bf00      	nop
 8006dac:	bf00      	nop
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40023800 	.word	0x40023800
 8006db4:	40007000 	.word	0x40007000

08006db8 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


  ldr   sp, =_estack     /* set stack pointer */
 8006db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006df0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006dbc:	480d      	ldr	r0, [pc, #52]	; (8006df4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006dbe:	490e      	ldr	r1, [pc, #56]	; (8006df8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006dc0:	4a0e      	ldr	r2, [pc, #56]	; (8006dfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006dc4:	e002      	b.n	8006dcc <LoopCopyDataInit>

08006dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006dca:	3304      	adds	r3, #4

08006dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006dd0:	d3f9      	bcc.n	8006dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006dd2:	4a0b      	ldr	r2, [pc, #44]	; (8006e00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006dd4:	4c0b      	ldr	r4, [pc, #44]	; (8006e04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006dd8:	e001      	b.n	8006dde <LoopFillZerobss>

08006dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006ddc:	3204      	adds	r2, #4

08006dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006de0:	d3fb      	bcc.n	8006dda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006de2:	f7fe fd55 	bl	8005890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006de6:	f00d f823 	bl	8013e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006dea:	f7fc fde9 	bl	80039c0 <main>
  bx  lr    
 8006dee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006df0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006df8:	20000230 	.word	0x20000230
  ldr r2, =_sidata
 8006dfc:	08018308 	.word	0x08018308
  ldr r2, =_sbss
 8006e00:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8006e04:	200015a0 	.word	0x200015a0

08006e08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006e08:	e7fe      	b.n	8006e08 <ADC_IRQHandler>
	...

08006e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <HAL_Init+0x40>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a0d      	ldr	r2, [pc, #52]	; (8006e4c <HAL_Init+0x40>)
 8006e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006e1c:	4b0b      	ldr	r3, [pc, #44]	; (8006e4c <HAL_Init+0x40>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a0a      	ldr	r2, [pc, #40]	; (8006e4c <HAL_Init+0x40>)
 8006e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006e28:	4b08      	ldr	r3, [pc, #32]	; (8006e4c <HAL_Init+0x40>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a07      	ldr	r2, [pc, #28]	; (8006e4c <HAL_Init+0x40>)
 8006e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006e34:	2003      	movs	r0, #3
 8006e36:	f000 fef5 	bl	8007c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006e3a:	200f      	movs	r0, #15
 8006e3c:	f000 f808 	bl	8006e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006e40:	f7fd ff2e 	bl	8004ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	40023c00 	.word	0x40023c00

08006e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006e58:	4b12      	ldr	r3, [pc, #72]	; (8006ea4 <HAL_InitTick+0x54>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	4b12      	ldr	r3, [pc, #72]	; (8006ea8 <HAL_InitTick+0x58>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	4619      	mov	r1, r3
 8006e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 ff0d 	bl	8007c8e <HAL_SYSTICK_Config>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d001      	beq.n	8006e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e00e      	b.n	8006e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b0f      	cmp	r3, #15
 8006e82:	d80a      	bhi.n	8006e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006e84:	2200      	movs	r2, #0
 8006e86:	6879      	ldr	r1, [r7, #4]
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295
 8006e8c:	f000 fed5 	bl	8007c3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006e90:	4a06      	ldr	r2, [pc, #24]	; (8006eac <HAL_InitTick+0x5c>)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	e000      	b.n	8006e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000044 	.word	0x20000044
 8006ea8:	20000054 	.word	0x20000054
 8006eac:	20000050 	.word	0x20000050

08006eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006eb4:	4b06      	ldr	r3, [pc, #24]	; (8006ed0 <HAL_IncTick+0x20>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	461a      	mov	r2, r3
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_IncTick+0x24>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	4a04      	ldr	r2, [pc, #16]	; (8006ed4 <HAL_IncTick+0x24>)
 8006ec2:	6013      	str	r3, [r2, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000054 	.word	0x20000054
 8006ed4:	20001214 	.word	0x20001214

08006ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	af00      	add	r7, sp, #0
  return uwTick;
 8006edc:	4b03      	ldr	r3, [pc, #12]	; (8006eec <HAL_GetTick+0x14>)
 8006ede:	681b      	ldr	r3, [r3, #0]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	20001214 	.word	0x20001214

08006ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ef8:	f7ff ffee 	bl	8006ed8 <HAL_GetTick>
 8006efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f08:	d005      	beq.n	8006f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <HAL_Delay+0x44>)
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	461a      	mov	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006f16:	bf00      	nop
 8006f18:	f7ff ffde 	bl	8006ed8 <HAL_GetTick>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	1ad3      	subs	r3, r2, r3
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d8f7      	bhi.n	8006f18 <HAL_Delay+0x28>
  {
  }
}
 8006f28:	bf00      	nop
 8006f2a:	bf00      	nop
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}
 8006f32:	bf00      	nop
 8006f34:	20000054 	.word	0x20000054

08006f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e033      	b.n	8006fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d109      	bne.n	8006f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f7fd feca 	bl	8004cf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	f003 0310 	and.w	r3, r3, #16
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d118      	bne.n	8006fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006f7e:	f023 0302 	bic.w	r3, r3, #2
 8006f82:	f043 0202 	orr.w	r2, r3, #2
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fbfc 	bl	8007788 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
 8006f9e:	f043 0201 	orr.w	r2, r3, #1
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8006fa6:	e001      	b.n	8006fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
	...

08006fc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b085      	sub	sp, #20
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_ADC_Start+0x1a>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e0b2      	b.n	8007140 <HAL_ADC_Start+0x180>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f003 0301 	and.w	r3, r3, #1
 8006fec:	2b01      	cmp	r3, #1
 8006fee:	d018      	beq.n	8007022 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f042 0201 	orr.w	r2, r2, #1
 8006ffe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007000:	4b52      	ldr	r3, [pc, #328]	; (800714c <HAL_ADC_Start+0x18c>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a52      	ldr	r2, [pc, #328]	; (8007150 <HAL_ADC_Start+0x190>)
 8007006:	fba2 2303 	umull	r2, r3, r2, r3
 800700a:	0c9a      	lsrs	r2, r3, #18
 800700c:	4613      	mov	r3, r2
 800700e:	005b      	lsls	r3, r3, #1
 8007010:	4413      	add	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8007014:	e002      	b.n	800701c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	3b01      	subs	r3, #1
 800701a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1f9      	bne.n	8007016 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f003 0301 	and.w	r3, r3, #1
 800702c:	2b01      	cmp	r3, #1
 800702e:	d17a      	bne.n	8007126 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007038:	f023 0301 	bic.w	r3, r3, #1
 800703c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800705a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800706a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800706e:	d106      	bne.n	800707e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007074:	f023 0206 	bic.w	r2, r3, #6
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	645a      	str	r2, [r3, #68]	; 0x44
 800707c:	e002      	b.n	8007084 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800708c:	4b31      	ldr	r3, [pc, #196]	; (8007154 <HAL_ADC_Start+0x194>)
 800708e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007098:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d12a      	bne.n	80070fc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a2b      	ldr	r2, [pc, #172]	; (8007158 <HAL_ADC_Start+0x198>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d015      	beq.n	80070dc <HAL_ADC_Start+0x11c>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a29      	ldr	r2, [pc, #164]	; (800715c <HAL_ADC_Start+0x19c>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d105      	bne.n	80070c6 <HAL_ADC_Start+0x106>
 80070ba:	4b26      	ldr	r3, [pc, #152]	; (8007154 <HAL_ADC_Start+0x194>)
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	f003 031f 	and.w	r3, r3, #31
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a25      	ldr	r2, [pc, #148]	; (8007160 <HAL_ADC_Start+0x1a0>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d136      	bne.n	800713e <HAL_ADC_Start+0x17e>
 80070d0:	4b20      	ldr	r3, [pc, #128]	; (8007154 <HAL_ADC_Start+0x194>)
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f003 0310 	and.w	r3, r3, #16
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d130      	bne.n	800713e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d129      	bne.n	800713e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	689a      	ldr	r2, [r3, #8]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80070f8:	609a      	str	r2, [r3, #8]
 80070fa:	e020      	b.n	800713e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a15      	ldr	r2, [pc, #84]	; (8007158 <HAL_ADC_Start+0x198>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d11b      	bne.n	800713e <HAL_ADC_Start+0x17e>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d114      	bne.n	800713e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	689a      	ldr	r2, [r3, #8]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007122:	609a      	str	r2, [r3, #8]
 8007124:	e00b      	b.n	800713e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800712a:	f043 0210 	orr.w	r2, r3, #16
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f043 0201 	orr.w	r2, r3, #1
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3714      	adds	r7, #20
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr
 800714c:	20000044 	.word	0x20000044
 8007150:	431bde83 	.word	0x431bde83
 8007154:	40012300 	.word	0x40012300
 8007158:	40012000 	.word	0x40012000
 800715c:	40012100 	.word	0x40012100
 8007160:	40012200 	.word	0x40012200

08007164 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_ADC_Stop+0x16>
 8007176:	2302      	movs	r3, #2
 8007178:	e021      	b.n	80071be <HAL_ADC_Stop+0x5a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	689a      	ldr	r2, [r3, #8]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f022 0201 	bic.w	r2, r2, #1
 8007190:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	f003 0301 	and.w	r3, r3, #1
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80071a8:	f023 0301 	bic.w	r3, r3, #1
 80071ac:	f043 0201 	orr.w	r2, r3, #1
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071e6:	d113      	bne.n	8007210 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80071f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f6:	d10b      	bne.n	8007210 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071fc:	f043 0220 	orr.w	r2, r3, #32
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e063      	b.n	80072d8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8007210:	f7ff fe62 	bl	8006ed8 <HAL_GetTick>
 8007214:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007216:	e021      	b.n	800725c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d01d      	beq.n	800725c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d007      	beq.n	8007236 <HAL_ADC_PollForConversion+0x6c>
 8007226:	f7ff fe57 	bl	8006ed8 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d212      	bcs.n	800725c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b02      	cmp	r3, #2
 8007242:	d00b      	beq.n	800725c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007248:	f043 0204 	orr.w	r2, r3, #4
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e03d      	b.n	80072d8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 0302 	and.w	r3, r3, #2
 8007266:	2b02      	cmp	r3, #2
 8007268:	d1d6      	bne.n	8007218 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f06f 0212 	mvn.w	r2, #18
 8007272:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d123      	bne.n	80072d6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007292:	2b00      	cmp	r3, #0
 8007294:	d11f      	bne.n	80072d6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d006      	beq.n	80072b2 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d111      	bne.n	80072d6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d105      	bne.n	80072d6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ce:	f043 0201 	orr.w	r2, r3, #1
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d101      	bne.n	80072fe <HAL_ADC_Start_DMA+0x1e>
 80072fa:	2302      	movs	r3, #2
 80072fc:	e0e9      	b.n	80074d2 <HAL_ADC_Start_DMA+0x1f2>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2201      	movs	r2, #1
 8007302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b01      	cmp	r3, #1
 8007312:	d018      	beq.n	8007346 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689a      	ldr	r2, [r3, #8]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f042 0201 	orr.w	r2, r2, #1
 8007322:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007324:	4b6d      	ldr	r3, [pc, #436]	; (80074dc <HAL_ADC_Start_DMA+0x1fc>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a6d      	ldr	r2, [pc, #436]	; (80074e0 <HAL_ADC_Start_DMA+0x200>)
 800732a:	fba2 2303 	umull	r2, r3, r2, r3
 800732e:	0c9a      	lsrs	r2, r3, #18
 8007330:	4613      	mov	r3, r2
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	4413      	add	r3, r2
 8007336:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007338:	e002      	b.n	8007340 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	3b01      	subs	r3, #1
 800733e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f9      	bne.n	800733a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007354:	d107      	bne.n	8007366 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007364:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b01      	cmp	r3, #1
 8007372:	f040 80a1 	bne.w	80074b8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800737a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800737e:	f023 0301 	bic.w	r3, r3, #1
 8007382:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007394:	2b00      	cmp	r3, #0
 8007396:	d007      	beq.n	80073a8 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80073a0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b4:	d106      	bne.n	80073c4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ba:	f023 0206 	bic.w	r2, r3, #6
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	645a      	str	r2, [r3, #68]	; 0x44
 80073c2:	e002      	b.n	80073ca <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	2200      	movs	r2, #0
 80073c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80073d2:	4b44      	ldr	r3, [pc, #272]	; (80074e4 <HAL_ADC_Start_DMA+0x204>)
 80073d4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	4a43      	ldr	r2, [pc, #268]	; (80074e8 <HAL_ADC_Start_DMA+0x208>)
 80073dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	4a42      	ldr	r2, [pc, #264]	; (80074ec <HAL_ADC_Start_DMA+0x20c>)
 80073e4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	4a41      	ldr	r2, [pc, #260]	; (80074f0 <HAL_ADC_Start_DMA+0x210>)
 80073ec:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80073f6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007406:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007416:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	334c      	adds	r3, #76	; 0x4c
 8007422:	4619      	mov	r1, r3
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f000 fcec 	bl	8007e04 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 031f 	and.w	r3, r3, #31
 8007434:	2b00      	cmp	r3, #0
 8007436:	d12a      	bne.n	800748e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a2d      	ldr	r2, [pc, #180]	; (80074f4 <HAL_ADC_Start_DMA+0x214>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d015      	beq.n	800746e <HAL_ADC_Start_DMA+0x18e>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a2c      	ldr	r2, [pc, #176]	; (80074f8 <HAL_ADC_Start_DMA+0x218>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d105      	bne.n	8007458 <HAL_ADC_Start_DMA+0x178>
 800744c:	4b25      	ldr	r3, [pc, #148]	; (80074e4 <HAL_ADC_Start_DMA+0x204>)
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f003 031f 	and.w	r3, r3, #31
 8007454:	2b00      	cmp	r3, #0
 8007456:	d00a      	beq.n	800746e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a27      	ldr	r2, [pc, #156]	; (80074fc <HAL_ADC_Start_DMA+0x21c>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d136      	bne.n	80074d0 <HAL_ADC_Start_DMA+0x1f0>
 8007462:	4b20      	ldr	r3, [pc, #128]	; (80074e4 <HAL_ADC_Start_DMA+0x204>)
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f003 0310 	and.w	r3, r3, #16
 800746a:	2b00      	cmp	r3, #0
 800746c:	d130      	bne.n	80074d0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d129      	bne.n	80074d0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	689a      	ldr	r2, [r3, #8]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800748a:	609a      	str	r2, [r3, #8]
 800748c:	e020      	b.n	80074d0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a18      	ldr	r2, [pc, #96]	; (80074f4 <HAL_ADC_Start_DMA+0x214>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d11b      	bne.n	80074d0 <HAL_ADC_Start_DMA+0x1f0>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d114      	bne.n	80074d0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80074b4:	609a      	str	r2, [r3, #8]
 80074b6:	e00b      	b.n	80074d0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074bc:	f043 0210 	orr.w	r2, r3, #16
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074c8:	f043 0201 	orr.w	r2, r3, #1
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3718      	adds	r7, #24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
 80074da:	bf00      	nop
 80074dc:	20000044 	.word	0x20000044
 80074e0:	431bde83 	.word	0x431bde83
 80074e4:	40012300 	.word	0x40012300
 80074e8:	08007981 	.word	0x08007981
 80074ec:	08007a3b 	.word	0x08007a3b
 80074f0:	08007a57 	.word	0x08007a57
 80074f4:	40012000 	.word	0x40012000
 80074f8:	40012100 	.word	0x40012100
 80074fc:	40012200 	.word	0x40012200

08007500 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800750e:	4618      	mov	r0, r3
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007522:	bf00      	nop
 8007524:	370c      	adds	r7, #12
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800752e:	b480      	push	{r7}
 8007530:	b083      	sub	sp, #12
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007536:	bf00      	nop
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
	...

08007544 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_ADC_ConfigChannel+0x1c>
 800755c:	2302      	movs	r3, #2
 800755e:	e105      	b.n	800776c <HAL_ADC_ConfigChannel+0x228>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	2b09      	cmp	r3, #9
 800756e:	d925      	bls.n	80075bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68d9      	ldr	r1, [r3, #12]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	b29b      	uxth	r3, r3
 800757c:	461a      	mov	r2, r3
 800757e:	4613      	mov	r3, r2
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	4413      	add	r3, r2
 8007584:	3b1e      	subs	r3, #30
 8007586:	2207      	movs	r2, #7
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	43da      	mvns	r2, r3
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	400a      	ands	r2, r1
 8007594:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68d9      	ldr	r1, [r3, #12]
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	689a      	ldr	r2, [r3, #8]
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	4618      	mov	r0, r3
 80075a8:	4603      	mov	r3, r0
 80075aa:	005b      	lsls	r3, r3, #1
 80075ac:	4403      	add	r3, r0
 80075ae:	3b1e      	subs	r3, #30
 80075b0:	409a      	lsls	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	60da      	str	r2, [r3, #12]
 80075ba:	e022      	b.n	8007602 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6919      	ldr	r1, [r3, #16]
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	461a      	mov	r2, r3
 80075ca:	4613      	mov	r3, r2
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	4413      	add	r3, r2
 80075d0:	2207      	movs	r2, #7
 80075d2:	fa02 f303 	lsl.w	r3, r2, r3
 80075d6:	43da      	mvns	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	400a      	ands	r2, r1
 80075de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6919      	ldr	r1, [r3, #16]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	689a      	ldr	r2, [r3, #8]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	4618      	mov	r0, r3
 80075f2:	4603      	mov	r3, r0
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	4403      	add	r3, r0
 80075f8:	409a      	lsls	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	2b06      	cmp	r3, #6
 8007608:	d824      	bhi.n	8007654 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	685a      	ldr	r2, [r3, #4]
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	3b05      	subs	r3, #5
 800761c:	221f      	movs	r2, #31
 800761e:	fa02 f303 	lsl.w	r3, r2, r3
 8007622:	43da      	mvns	r2, r3
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	400a      	ands	r2, r1
 800762a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	4618      	mov	r0, r3
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	4613      	mov	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4413      	add	r3, r2
 8007644:	3b05      	subs	r3, #5
 8007646:	fa00 f203 	lsl.w	r2, r0, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	430a      	orrs	r2, r1
 8007650:	635a      	str	r2, [r3, #52]	; 0x34
 8007652:	e04c      	b.n	80076ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	2b0c      	cmp	r3, #12
 800765a:	d824      	bhi.n	80076a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	685a      	ldr	r2, [r3, #4]
 8007666:	4613      	mov	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	3b23      	subs	r3, #35	; 0x23
 800766e:	221f      	movs	r2, #31
 8007670:	fa02 f303 	lsl.w	r3, r2, r3
 8007674:	43da      	mvns	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	400a      	ands	r2, r1
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	b29b      	uxth	r3, r3
 800768a:	4618      	mov	r0, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	685a      	ldr	r2, [r3, #4]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	3b23      	subs	r3, #35	; 0x23
 8007698:	fa00 f203 	lsl.w	r2, r0, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	430a      	orrs	r2, r1
 80076a2:	631a      	str	r2, [r3, #48]	; 0x30
 80076a4:	e023      	b.n	80076ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	4613      	mov	r3, r2
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	4413      	add	r3, r2
 80076b6:	3b41      	subs	r3, #65	; 0x41
 80076b8:	221f      	movs	r2, #31
 80076ba:	fa02 f303 	lsl.w	r3, r2, r3
 80076be:	43da      	mvns	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	400a      	ands	r2, r1
 80076c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	4618      	mov	r0, r3
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685a      	ldr	r2, [r3, #4]
 80076da:	4613      	mov	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4413      	add	r3, r2
 80076e0:	3b41      	subs	r3, #65	; 0x41
 80076e2:	fa00 f203 	lsl.w	r2, r0, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	430a      	orrs	r2, r1
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80076ee:	4b22      	ldr	r3, [pc, #136]	; (8007778 <HAL_ADC_ConfigChannel+0x234>)
 80076f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	4a21      	ldr	r2, [pc, #132]	; (800777c <HAL_ADC_ConfigChannel+0x238>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d109      	bne.n	8007710 <HAL_ADC_ConfigChannel+0x1cc>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	2b12      	cmp	r3, #18
 8007702:	d105      	bne.n	8007710 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a19      	ldr	r2, [pc, #100]	; (800777c <HAL_ADC_ConfigChannel+0x238>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d123      	bne.n	8007762 <HAL_ADC_ConfigChannel+0x21e>
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b10      	cmp	r3, #16
 8007720:	d003      	beq.n	800772a <HAL_ADC_ConfigChannel+0x1e6>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b11      	cmp	r3, #17
 8007728:	d11b      	bne.n	8007762 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	2b10      	cmp	r3, #16
 800773c:	d111      	bne.n	8007762 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800773e:	4b10      	ldr	r3, [pc, #64]	; (8007780 <HAL_ADC_ConfigChannel+0x23c>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a10      	ldr	r2, [pc, #64]	; (8007784 <HAL_ADC_ConfigChannel+0x240>)
 8007744:	fba2 2303 	umull	r2, r3, r2, r3
 8007748:	0c9a      	lsrs	r2, r3, #18
 800774a:	4613      	mov	r3, r2
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	005b      	lsls	r3, r3, #1
 8007752:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007754:	e002      	b.n	800775c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	3b01      	subs	r3, #1
 800775a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f9      	bne.n	8007756 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800776a:	2300      	movs	r3, #0
}
 800776c:	4618      	mov	r0, r3
 800776e:	3714      	adds	r7, #20
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	40012300 	.word	0x40012300
 800777c:	40012000 	.word	0x40012000
 8007780:	20000044 	.word	0x20000044
 8007784:	431bde83 	.word	0x431bde83

08007788 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007790:	4b79      	ldr	r3, [pc, #484]	; (8007978 <ADC_Init+0x1f0>)
 8007792:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	685b      	ldr	r3, [r3, #4]
 8007798:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	685a      	ldr	r2, [r3, #4]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	431a      	orrs	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685a      	ldr	r2, [r3, #4]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6859      	ldr	r1, [r3, #4]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	021a      	lsls	r2, r3, #8
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80077e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	6859      	ldr	r1, [r3, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	689a      	ldr	r2, [r3, #8]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6899      	ldr	r1, [r3, #8]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	68da      	ldr	r2, [r3, #12]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	4a58      	ldr	r2, [pc, #352]	; (800797c <ADC_Init+0x1f4>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d022      	beq.n	8007866 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	689a      	ldr	r2, [r3, #8]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800782e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	6899      	ldr	r1, [r3, #8]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	430a      	orrs	r2, r1
 8007840:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689a      	ldr	r2, [r3, #8]
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007850:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	6899      	ldr	r1, [r3, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	430a      	orrs	r2, r1
 8007862:	609a      	str	r2, [r3, #8]
 8007864:	e00f      	b.n	8007886 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	689a      	ldr	r2, [r3, #8]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689a      	ldr	r2, [r3, #8]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007884:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	689a      	ldr	r2, [r3, #8]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 0202 	bic.w	r2, r2, #2
 8007894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6899      	ldr	r1, [r3, #8]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	7e1b      	ldrb	r3, [r3, #24]
 80078a0:	005a      	lsls	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d01b      	beq.n	80078ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80078d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6859      	ldr	r1, [r3, #4]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078de:	3b01      	subs	r3, #1
 80078e0:	035a      	lsls	r2, r3, #13
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	e007      	b.n	80078fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	685a      	ldr	r2, [r3, #4]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800790a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	69db      	ldr	r3, [r3, #28]
 8007916:	3b01      	subs	r3, #1
 8007918:	051a      	lsls	r2, r3, #20
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	430a      	orrs	r2, r1
 8007920:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	689a      	ldr	r2, [r3, #8]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007930:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6899      	ldr	r1, [r3, #8]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800793e:	025a      	lsls	r2, r3, #9
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	430a      	orrs	r2, r1
 8007946:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689a      	ldr	r2, [r3, #8]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	6899      	ldr	r1, [r3, #8]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	695b      	ldr	r3, [r3, #20]
 8007962:	029a      	lsls	r2, r3, #10
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	609a      	str	r2, [r3, #8]
}
 800796c:	bf00      	nop
 800796e:	3714      	adds	r7, #20
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr
 8007978:	40012300 	.word	0x40012300
 800797c:	0f000001 	.word	0x0f000001

08007980 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800798c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007996:	2b00      	cmp	r3, #0
 8007998:	d13c      	bne.n	8007a14 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d12b      	bne.n	8007a0c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d127      	bne.n	8007a0c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d006      	beq.n	80079d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d119      	bne.n	8007a0c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0220 	bic.w	r2, r2, #32
 80079e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d105      	bne.n	8007a0c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	f043 0201 	orr.w	r2, r3, #1
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007a0c:	68f8      	ldr	r0, [r7, #12]
 8007a0e:	f7fb ffa9 	bl	8003964 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007a12:	e00e      	b.n	8007a32 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a18:	f003 0310 	and.w	r3, r3, #16
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d003      	beq.n	8007a28 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff fd84 	bl	800752e <HAL_ADC_ErrorCallback>
}
 8007a26:	e004      	b.n	8007a32 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	4798      	blx	r3
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b084      	sub	sp, #16
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f7ff fd66 	bl	800751a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a4e:	bf00      	nop
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a62:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2240      	movs	r2, #64	; 0x40
 8007a68:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	f043 0204 	orr.w	r2, r3, #4
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f7ff fd59 	bl	800752e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007a7c:	bf00      	nop
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <__NVIC_SetPriorityGrouping>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f003 0307 	and.w	r3, r3, #7
 8007a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a94:	4b0c      	ldr	r3, [pc, #48]	; (8007ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ab6:	4a04      	ldr	r2, [pc, #16]	; (8007ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	60d3      	str	r3, [r2, #12]
}
 8007abc:	bf00      	nop
 8007abe:	3714      	adds	r7, #20
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	e000ed00 	.word	0xe000ed00

08007acc <__NVIC_GetPriorityGrouping>:
{
 8007acc:	b480      	push	{r7}
 8007ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ad0:	4b04      	ldr	r3, [pc, #16]	; (8007ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	0a1b      	lsrs	r3, r3, #8
 8007ad6:	f003 0307 	and.w	r3, r3, #7
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	e000ed00 	.word	0xe000ed00

08007ae8 <__NVIC_EnableIRQ>:
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	4603      	mov	r3, r0
 8007af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	db0b      	blt.n	8007b12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	f003 021f 	and.w	r2, r3, #31
 8007b00:	4907      	ldr	r1, [pc, #28]	; (8007b20 <__NVIC_EnableIRQ+0x38>)
 8007b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	2001      	movs	r0, #1
 8007b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8007b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	e000e100 	.word	0xe000e100

08007b24 <__NVIC_SetPriority>:
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	6039      	str	r1, [r7, #0]
 8007b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	db0a      	blt.n	8007b4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	b2da      	uxtb	r2, r3
 8007b3c:	490c      	ldr	r1, [pc, #48]	; (8007b70 <__NVIC_SetPriority+0x4c>)
 8007b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007b42:	0112      	lsls	r2, r2, #4
 8007b44:	b2d2      	uxtb	r2, r2
 8007b46:	440b      	add	r3, r1
 8007b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b4c:	e00a      	b.n	8007b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	4908      	ldr	r1, [pc, #32]	; (8007b74 <__NVIC_SetPriority+0x50>)
 8007b54:	79fb      	ldrb	r3, [r7, #7]
 8007b56:	f003 030f 	and.w	r3, r3, #15
 8007b5a:	3b04      	subs	r3, #4
 8007b5c:	0112      	lsls	r2, r2, #4
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	440b      	add	r3, r1
 8007b62:	761a      	strb	r2, [r3, #24]
}
 8007b64:	bf00      	nop
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	e000e100 	.word	0xe000e100
 8007b74:	e000ed00 	.word	0xe000ed00

08007b78 <NVIC_EncodePriority>:
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b089      	sub	sp, #36	; 0x24
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f003 0307 	and.w	r3, r3, #7
 8007b8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b8c:	69fb      	ldr	r3, [r7, #28]
 8007b8e:	f1c3 0307 	rsb	r3, r3, #7
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	bf28      	it	cs
 8007b96:	2304      	movcs	r3, #4
 8007b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	2b06      	cmp	r3, #6
 8007ba0:	d902      	bls.n	8007ba8 <NVIC_EncodePriority+0x30>
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	3b03      	subs	r3, #3
 8007ba6:	e000      	b.n	8007baa <NVIC_EncodePriority+0x32>
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bac:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	43da      	mvns	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	401a      	ands	r2, r3
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bca:	43d9      	mvns	r1, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007bd0:	4313      	orrs	r3, r2
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3724      	adds	r7, #36	; 0x24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
	...

08007be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3b01      	subs	r3, #1
 8007bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bf0:	d301      	bcc.n	8007bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e00f      	b.n	8007c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bf6:	4a0a      	ldr	r2, [pc, #40]	; (8007c20 <SysTick_Config+0x40>)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3b01      	subs	r3, #1
 8007bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bfe:	210f      	movs	r1, #15
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	f7ff ff8e 	bl	8007b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007c08:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <SysTick_Config+0x40>)
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <SysTick_Config+0x40>)
 8007c10:	2207      	movs	r2, #7
 8007c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3708      	adds	r7, #8
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	e000e010 	.word	0xe000e010

08007c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff ff29 	bl	8007a84 <__NVIC_SetPriorityGrouping>
}
 8007c32:	bf00      	nop
 8007c34:	3708      	adds	r7, #8
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007c3a:	b580      	push	{r7, lr}
 8007c3c:	b086      	sub	sp, #24
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	4603      	mov	r3, r0
 8007c42:	60b9      	str	r1, [r7, #8]
 8007c44:	607a      	str	r2, [r7, #4]
 8007c46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007c4c:	f7ff ff3e 	bl	8007acc <__NVIC_GetPriorityGrouping>
 8007c50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c52:	687a      	ldr	r2, [r7, #4]
 8007c54:	68b9      	ldr	r1, [r7, #8]
 8007c56:	6978      	ldr	r0, [r7, #20]
 8007c58:	f7ff ff8e 	bl	8007b78 <NVIC_EncodePriority>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c62:	4611      	mov	r1, r2
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7ff ff5d 	bl	8007b24 <__NVIC_SetPriority>
}
 8007c6a:	bf00      	nop
 8007c6c:	3718      	adds	r7, #24
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}

08007c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b082      	sub	sp, #8
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	4603      	mov	r3, r0
 8007c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff ff31 	bl	8007ae8 <__NVIC_EnableIRQ>
}
 8007c86:	bf00      	nop
 8007c88:	3708      	adds	r7, #8
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b082      	sub	sp, #8
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7ff ffa2 	bl	8007be0 <SysTick_Config>
 8007c9c:	4603      	mov	r3, r0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007cb4:	f7ff f910 	bl	8006ed8 <HAL_GetTick>
 8007cb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d101      	bne.n	8007cc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e099      	b.n	8007df8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0201 	bic.w	r2, r2, #1
 8007ce2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ce4:	e00f      	b.n	8007d06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ce6:	f7ff f8f7 	bl	8006ed8 <HAL_GetTick>
 8007cea:	4602      	mov	r2, r0
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	2b05      	cmp	r3, #5
 8007cf2:	d908      	bls.n	8007d06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007d02:	2303      	movs	r3, #3
 8007d04:	e078      	b.n	8007df8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0301 	and.w	r3, r3, #1
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e8      	bne.n	8007ce6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	4b38      	ldr	r3, [pc, #224]	; (8007e00 <HAL_DMA_Init+0x158>)
 8007d20:	4013      	ands	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007d3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007d4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a1b      	ldr	r3, [r3, #32]
 8007d50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2b04      	cmp	r3, #4
 8007d5e:	d107      	bne.n	8007d70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	695b      	ldr	r3, [r3, #20]
 8007d7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	f023 0307 	bic.w	r3, r3, #7
 8007d86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	697a      	ldr	r2, [r7, #20]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d117      	bne.n	8007dca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d9e:	697a      	ldr	r2, [r7, #20]
 8007da0:	4313      	orrs	r3, r2
 8007da2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d00e      	beq.n	8007dca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fb01 	bl	80083b4 <DMA_CheckFifoParam>
 8007db2:	4603      	mov	r3, r0
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d008      	beq.n	8007dca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2240      	movs	r2, #64	; 0x40
 8007dbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e016      	b.n	8007df8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 fab8 	bl	8008348 <DMA_CalcBaseAndBitshift>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de0:	223f      	movs	r2, #63	; 0x3f
 8007de2:	409a      	lsls	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2201      	movs	r2, #1
 8007df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3718      	adds	r7, #24
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	f010803f 	.word	0xf010803f

08007e04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	607a      	str	r2, [r7, #4]
 8007e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e12:	2300      	movs	r3, #0
 8007e14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d101      	bne.n	8007e2a <HAL_DMA_Start_IT+0x26>
 8007e26:	2302      	movs	r3, #2
 8007e28:	e040      	b.n	8007eac <HAL_DMA_Start_IT+0xa8>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d12f      	bne.n	8007e9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	2202      	movs	r2, #2
 8007e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	68b9      	ldr	r1, [r7, #8]
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fa4a 	bl	80082ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5c:	223f      	movs	r2, #63	; 0x3f
 8007e5e:	409a      	lsls	r2, r3
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f042 0216 	orr.w	r2, r2, #22
 8007e72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d007      	beq.n	8007e8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f042 0208 	orr.w	r2, r2, #8
 8007e8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f042 0201 	orr.w	r2, r2, #1
 8007e9a:	601a      	str	r2, [r3, #0]
 8007e9c:	e005      	b.n	8007eaa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007ea6:	2302      	movs	r3, #2
 8007ea8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3718      	adds	r7, #24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007ec2:	f7ff f809 	bl	8006ed8 <HAL_GetTick>
 8007ec6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	2b02      	cmp	r3, #2
 8007ed2:	d008      	beq.n	8007ee6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2280      	movs	r2, #128	; 0x80
 8007ed8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e052      	b.n	8007f8c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 0216 	bic.w	r2, r2, #22
 8007ef4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	695a      	ldr	r2, [r3, #20]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f04:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d103      	bne.n	8007f16 <HAL_DMA_Abort+0x62>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d007      	beq.n	8007f26 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f022 0208 	bic.w	r2, r2, #8
 8007f24:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0201 	bic.w	r2, r2, #1
 8007f34:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f36:	e013      	b.n	8007f60 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007f38:	f7fe ffce 	bl	8006ed8 <HAL_GetTick>
 8007f3c:	4602      	mov	r2, r0
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	1ad3      	subs	r3, r2, r3
 8007f42:	2b05      	cmp	r3, #5
 8007f44:	d90c      	bls.n	8007f60 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2220      	movs	r2, #32
 8007f4a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2203      	movs	r2, #3
 8007f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007f5c:	2303      	movs	r3, #3
 8007f5e:	e015      	b.n	8007f8c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d1e4      	bne.n	8007f38 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f72:	223f      	movs	r2, #63	; 0x3f
 8007f74:	409a      	lsls	r2, r3
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d004      	beq.n	8007fb2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2280      	movs	r2, #128	; 0x80
 8007fac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e00c      	b.n	8007fcc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2205      	movs	r2, #5
 8007fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0201 	bic.w	r2, r2, #1
 8007fc8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fca:	2300      	movs	r3, #0
}
 8007fcc:	4618      	mov	r0, r3
 8007fce:	370c      	adds	r7, #12
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b086      	sub	sp, #24
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fe4:	4b8e      	ldr	r3, [pc, #568]	; (8008220 <HAL_DMA_IRQHandler+0x248>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a8e      	ldr	r2, [pc, #568]	; (8008224 <HAL_DMA_IRQHandler+0x24c>)
 8007fea:	fba2 2303 	umull	r2, r3, r2, r3
 8007fee:	0a9b      	lsrs	r3, r3, #10
 8007ff0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ff6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008002:	2208      	movs	r2, #8
 8008004:	409a      	lsls	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4013      	ands	r3, r2
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01a      	beq.n	8008044 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f003 0304 	and.w	r3, r3, #4
 8008018:	2b00      	cmp	r3, #0
 800801a:	d013      	beq.n	8008044 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681a      	ldr	r2, [r3, #0]
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f022 0204 	bic.w	r2, r2, #4
 800802a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008030:	2208      	movs	r2, #8
 8008032:	409a      	lsls	r2, r3
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800803c:	f043 0201 	orr.w	r2, r3, #1
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008048:	2201      	movs	r2, #1
 800804a:	409a      	lsls	r2, r3
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4013      	ands	r3, r2
 8008050:	2b00      	cmp	r3, #0
 8008052:	d012      	beq.n	800807a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	695b      	ldr	r3, [r3, #20]
 800805a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800805e:	2b00      	cmp	r3, #0
 8008060:	d00b      	beq.n	800807a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008066:	2201      	movs	r2, #1
 8008068:	409a      	lsls	r2, r3
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008072:	f043 0202 	orr.w	r2, r3, #2
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800807e:	2204      	movs	r2, #4
 8008080:	409a      	lsls	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4013      	ands	r3, r2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d012      	beq.n	80080b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f003 0302 	and.w	r3, r3, #2
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800809c:	2204      	movs	r2, #4
 800809e:	409a      	lsls	r2, r3
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a8:	f043 0204 	orr.w	r2, r3, #4
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b4:	2210      	movs	r2, #16
 80080b6:	409a      	lsls	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4013      	ands	r3, r2
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d043      	beq.n	8008148 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f003 0308 	and.w	r3, r3, #8
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d03c      	beq.n	8008148 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d2:	2210      	movs	r2, #16
 80080d4:	409a      	lsls	r2, r3
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d018      	beq.n	800811a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d108      	bne.n	8008108 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d024      	beq.n	8008148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	4798      	blx	r3
 8008106:	e01f      	b.n	8008148 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800810c:	2b00      	cmp	r3, #0
 800810e:	d01b      	beq.n	8008148 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
 8008118:	e016      	b.n	8008148 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008124:	2b00      	cmp	r3, #0
 8008126:	d107      	bne.n	8008138 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	681a      	ldr	r2, [r3, #0]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f022 0208 	bic.w	r2, r2, #8
 8008136:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d003      	beq.n	8008148 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800814c:	2220      	movs	r2, #32
 800814e:	409a      	lsls	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	4013      	ands	r3, r2
 8008154:	2b00      	cmp	r3, #0
 8008156:	f000 808f 	beq.w	8008278 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 8087 	beq.w	8008278 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800816e:	2220      	movs	r2, #32
 8008170:	409a      	lsls	r2, r3
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800817c:	b2db      	uxtb	r3, r3
 800817e:	2b05      	cmp	r3, #5
 8008180:	d136      	bne.n	80081f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f022 0216 	bic.w	r2, r2, #22
 8008190:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	695a      	ldr	r2, [r3, #20]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d103      	bne.n	80081b2 <HAL_DMA_IRQHandler+0x1da>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d007      	beq.n	80081c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f022 0208 	bic.w	r2, r2, #8
 80081c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081c6:	223f      	movs	r2, #63	; 0x3f
 80081c8:	409a      	lsls	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2201      	movs	r2, #1
 80081d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2200      	movs	r2, #0
 80081da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d07e      	beq.n	80082e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
        }
        return;
 80081ee:	e079      	b.n	80082e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d01d      	beq.n	800823a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008208:	2b00      	cmp	r3, #0
 800820a:	d10d      	bne.n	8008228 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008210:	2b00      	cmp	r3, #0
 8008212:	d031      	beq.n	8008278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008218:	6878      	ldr	r0, [r7, #4]
 800821a:	4798      	blx	r3
 800821c:	e02c      	b.n	8008278 <HAL_DMA_IRQHandler+0x2a0>
 800821e:	bf00      	nop
 8008220:	20000044 	.word	0x20000044
 8008224:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822c:	2b00      	cmp	r3, #0
 800822e:	d023      	beq.n	8008278 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	4798      	blx	r3
 8008238:	e01e      	b.n	8008278 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10f      	bne.n	8008268 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f022 0210 	bic.w	r2, r2, #16
 8008256:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800826c:	2b00      	cmp	r3, #0
 800826e:	d003      	beq.n	8008278 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800827c:	2b00      	cmp	r3, #0
 800827e:	d032      	beq.n	80082e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008284:	f003 0301 	and.w	r3, r3, #1
 8008288:	2b00      	cmp	r3, #0
 800828a:	d022      	beq.n	80082d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2205      	movs	r2, #5
 8008290:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681a      	ldr	r2, [r3, #0]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f022 0201 	bic.w	r2, r2, #1
 80082a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	3301      	adds	r3, #1
 80082a8:	60bb      	str	r3, [r7, #8]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d307      	bcc.n	80082c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0301 	and.w	r3, r3, #1
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d1f2      	bne.n	80082a4 <HAL_DMA_IRQHandler+0x2cc>
 80082be:	e000      	b.n	80082c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80082c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d005      	beq.n	80082e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	4798      	blx	r3
 80082e2:	e000      	b.n	80082e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80082e4:	bf00      	nop
    }
  }
}
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008308:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	683a      	ldr	r2, [r7, #0]
 8008310:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	2b40      	cmp	r3, #64	; 0x40
 8008318:	d108      	bne.n	800832c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	687a      	ldr	r2, [r7, #4]
 8008320:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	68ba      	ldr	r2, [r7, #8]
 8008328:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800832a:	e007      	b.n	800833c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	60da      	str	r2, [r3, #12]
}
 800833c:	bf00      	nop
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	b2db      	uxtb	r3, r3
 8008356:	3b10      	subs	r3, #16
 8008358:	4a14      	ldr	r2, [pc, #80]	; (80083ac <DMA_CalcBaseAndBitshift+0x64>)
 800835a:	fba2 2303 	umull	r2, r3, r2, r3
 800835e:	091b      	lsrs	r3, r3, #4
 8008360:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008362:	4a13      	ldr	r2, [pc, #76]	; (80083b0 <DMA_CalcBaseAndBitshift+0x68>)
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	4413      	add	r3, r2
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	461a      	mov	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	2b03      	cmp	r3, #3
 8008374:	d909      	bls.n	800838a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800837e:	f023 0303 	bic.w	r3, r3, #3
 8008382:	1d1a      	adds	r2, r3, #4
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	659a      	str	r2, [r3, #88]	; 0x58
 8008388:	e007      	b.n	800839a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008392:	f023 0303 	bic.w	r3, r3, #3
 8008396:	687a      	ldr	r2, [r7, #4]
 8008398:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	aaaaaaab 	.word	0xaaaaaaab
 80083b0:	08017a40 	.word	0x08017a40

080083b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083b4:	b480      	push	{r7}
 80083b6:	b085      	sub	sp, #20
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	699b      	ldr	r3, [r3, #24]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d11f      	bne.n	800840e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	2b03      	cmp	r3, #3
 80083d2:	d856      	bhi.n	8008482 <DMA_CheckFifoParam+0xce>
 80083d4:	a201      	add	r2, pc, #4	; (adr r2, 80083dc <DMA_CheckFifoParam+0x28>)
 80083d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083da:	bf00      	nop
 80083dc:	080083ed 	.word	0x080083ed
 80083e0:	080083ff 	.word	0x080083ff
 80083e4:	080083ed 	.word	0x080083ed
 80083e8:	08008483 	.word	0x08008483
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d046      	beq.n	8008486 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083fc:	e043      	b.n	8008486 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008402:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008406:	d140      	bne.n	800848a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800840c:	e03d      	b.n	800848a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008416:	d121      	bne.n	800845c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b03      	cmp	r3, #3
 800841c:	d837      	bhi.n	800848e <DMA_CheckFifoParam+0xda>
 800841e:	a201      	add	r2, pc, #4	; (adr r2, 8008424 <DMA_CheckFifoParam+0x70>)
 8008420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008424:	08008435 	.word	0x08008435
 8008428:	0800843b 	.word	0x0800843b
 800842c:	08008435 	.word	0x08008435
 8008430:	0800844d 	.word	0x0800844d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	73fb      	strb	r3, [r7, #15]
      break;
 8008438:	e030      	b.n	800849c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d025      	beq.n	8008492 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800844a:	e022      	b.n	8008492 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008454:	d11f      	bne.n	8008496 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800845a:	e01c      	b.n	8008496 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	2b02      	cmp	r3, #2
 8008460:	d903      	bls.n	800846a <DMA_CheckFifoParam+0xb6>
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	2b03      	cmp	r3, #3
 8008466:	d003      	beq.n	8008470 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008468:	e018      	b.n	800849c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	73fb      	strb	r3, [r7, #15]
      break;
 800846e:	e015      	b.n	800849c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00e      	beq.n	800849a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	73fb      	strb	r3, [r7, #15]
      break;
 8008480:	e00b      	b.n	800849a <DMA_CheckFifoParam+0xe6>
      break;
 8008482:	bf00      	nop
 8008484:	e00a      	b.n	800849c <DMA_CheckFifoParam+0xe8>
      break;
 8008486:	bf00      	nop
 8008488:	e008      	b.n	800849c <DMA_CheckFifoParam+0xe8>
      break;
 800848a:	bf00      	nop
 800848c:	e006      	b.n	800849c <DMA_CheckFifoParam+0xe8>
      break;
 800848e:	bf00      	nop
 8008490:	e004      	b.n	800849c <DMA_CheckFifoParam+0xe8>
      break;
 8008492:	bf00      	nop
 8008494:	e002      	b.n	800849c <DMA_CheckFifoParam+0xe8>
      break;   
 8008496:	bf00      	nop
 8008498:	e000      	b.n	800849c <DMA_CheckFifoParam+0xe8>
      break;
 800849a:	bf00      	nop
    }
  } 
  
  return status; 
 800849c:	7bfb      	ldrb	r3, [r7, #15]
}
 800849e:	4618      	mov	r0, r3
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop

080084ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b089      	sub	sp, #36	; 0x24
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084be:	2300      	movs	r3, #0
 80084c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084c2:	2300      	movs	r3, #0
 80084c4:	61fb      	str	r3, [r7, #28]
 80084c6:	e16b      	b.n	80087a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084c8:	2201      	movs	r2, #1
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	fa02 f303 	lsl.w	r3, r2, r3
 80084d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4013      	ands	r3, r2
 80084da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	f040 815a 	bne.w	800879a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d005      	beq.n	80084fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d130      	bne.n	8008560 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	689b      	ldr	r3, [r3, #8]
 8008502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	005b      	lsls	r3, r3, #1
 8008508:	2203      	movs	r2, #3
 800850a:	fa02 f303 	lsl.w	r3, r2, r3
 800850e:	43db      	mvns	r3, r3
 8008510:	69ba      	ldr	r2, [r7, #24]
 8008512:	4013      	ands	r3, r2
 8008514:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	005b      	lsls	r3, r3, #1
 800851e:	fa02 f303 	lsl.w	r3, r2, r3
 8008522:	69ba      	ldr	r2, [r7, #24]
 8008524:	4313      	orrs	r3, r2
 8008526:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008534:	2201      	movs	r2, #1
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	fa02 f303 	lsl.w	r3, r2, r3
 800853c:	43db      	mvns	r3, r3
 800853e:	69ba      	ldr	r2, [r7, #24]
 8008540:	4013      	ands	r3, r2
 8008542:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	091b      	lsrs	r3, r3, #4
 800854a:	f003 0201 	and.w	r2, r3, #1
 800854e:	69fb      	ldr	r3, [r7, #28]
 8008550:	fa02 f303 	lsl.w	r3, r2, r3
 8008554:	69ba      	ldr	r2, [r7, #24]
 8008556:	4313      	orrs	r3, r2
 8008558:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f003 0303 	and.w	r3, r3, #3
 8008568:	2b03      	cmp	r3, #3
 800856a:	d017      	beq.n	800859c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	2203      	movs	r2, #3
 8008578:	fa02 f303 	lsl.w	r3, r2, r3
 800857c:	43db      	mvns	r3, r3
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	4013      	ands	r3, r2
 8008582:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	69fb      	ldr	r3, [r7, #28]
 800858a:	005b      	lsls	r3, r3, #1
 800858c:	fa02 f303 	lsl.w	r3, r2, r3
 8008590:	69ba      	ldr	r2, [r7, #24]
 8008592:	4313      	orrs	r3, r2
 8008594:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f003 0303 	and.w	r3, r3, #3
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d123      	bne.n	80085f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085a8:	69fb      	ldr	r3, [r7, #28]
 80085aa:	08da      	lsrs	r2, r3, #3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	3208      	adds	r2, #8
 80085b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	f003 0307 	and.w	r3, r3, #7
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	220f      	movs	r2, #15
 80085c0:	fa02 f303 	lsl.w	r3, r2, r3
 80085c4:	43db      	mvns	r3, r3
 80085c6:	69ba      	ldr	r2, [r7, #24]
 80085c8:	4013      	ands	r3, r2
 80085ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	691a      	ldr	r2, [r3, #16]
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	f003 0307 	and.w	r3, r3, #7
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	fa02 f303 	lsl.w	r3, r2, r3
 80085dc:	69ba      	ldr	r2, [r7, #24]
 80085de:	4313      	orrs	r3, r2
 80085e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	08da      	lsrs	r2, r3, #3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	3208      	adds	r2, #8
 80085ea:	69b9      	ldr	r1, [r7, #24]
 80085ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	005b      	lsls	r3, r3, #1
 80085fa:	2203      	movs	r2, #3
 80085fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008600:	43db      	mvns	r3, r3
 8008602:	69ba      	ldr	r2, [r7, #24]
 8008604:	4013      	ands	r3, r2
 8008606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f003 0203 	and.w	r2, r3, #3
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	005b      	lsls	r3, r3, #1
 8008614:	fa02 f303 	lsl.w	r3, r2, r3
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	4313      	orrs	r3, r2
 800861c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	69ba      	ldr	r2, [r7, #24]
 8008622:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800862c:	2b00      	cmp	r3, #0
 800862e:	f000 80b4 	beq.w	800879a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008632:	2300      	movs	r3, #0
 8008634:	60fb      	str	r3, [r7, #12]
 8008636:	4b60      	ldr	r3, [pc, #384]	; (80087b8 <HAL_GPIO_Init+0x30c>)
 8008638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800863a:	4a5f      	ldr	r2, [pc, #380]	; (80087b8 <HAL_GPIO_Init+0x30c>)
 800863c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008640:	6453      	str	r3, [r2, #68]	; 0x44
 8008642:	4b5d      	ldr	r3, [pc, #372]	; (80087b8 <HAL_GPIO_Init+0x30c>)
 8008644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008646:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800864a:	60fb      	str	r3, [r7, #12]
 800864c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800864e:	4a5b      	ldr	r2, [pc, #364]	; (80087bc <HAL_GPIO_Init+0x310>)
 8008650:	69fb      	ldr	r3, [r7, #28]
 8008652:	089b      	lsrs	r3, r3, #2
 8008654:	3302      	adds	r3, #2
 8008656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800865a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f003 0303 	and.w	r3, r3, #3
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	220f      	movs	r2, #15
 8008666:	fa02 f303 	lsl.w	r3, r2, r3
 800866a:	43db      	mvns	r3, r3
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	4013      	ands	r3, r2
 8008670:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	4a52      	ldr	r2, [pc, #328]	; (80087c0 <HAL_GPIO_Init+0x314>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d02b      	beq.n	80086d2 <HAL_GPIO_Init+0x226>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	4a51      	ldr	r2, [pc, #324]	; (80087c4 <HAL_GPIO_Init+0x318>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d025      	beq.n	80086ce <HAL_GPIO_Init+0x222>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4a50      	ldr	r2, [pc, #320]	; (80087c8 <HAL_GPIO_Init+0x31c>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d01f      	beq.n	80086ca <HAL_GPIO_Init+0x21e>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a4f      	ldr	r2, [pc, #316]	; (80087cc <HAL_GPIO_Init+0x320>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d019      	beq.n	80086c6 <HAL_GPIO_Init+0x21a>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a4e      	ldr	r2, [pc, #312]	; (80087d0 <HAL_GPIO_Init+0x324>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d013      	beq.n	80086c2 <HAL_GPIO_Init+0x216>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a4d      	ldr	r2, [pc, #308]	; (80087d4 <HAL_GPIO_Init+0x328>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00d      	beq.n	80086be <HAL_GPIO_Init+0x212>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a4c      	ldr	r2, [pc, #304]	; (80087d8 <HAL_GPIO_Init+0x32c>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d007      	beq.n	80086ba <HAL_GPIO_Init+0x20e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a4b      	ldr	r2, [pc, #300]	; (80087dc <HAL_GPIO_Init+0x330>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d101      	bne.n	80086b6 <HAL_GPIO_Init+0x20a>
 80086b2:	2307      	movs	r3, #7
 80086b4:	e00e      	b.n	80086d4 <HAL_GPIO_Init+0x228>
 80086b6:	2308      	movs	r3, #8
 80086b8:	e00c      	b.n	80086d4 <HAL_GPIO_Init+0x228>
 80086ba:	2306      	movs	r3, #6
 80086bc:	e00a      	b.n	80086d4 <HAL_GPIO_Init+0x228>
 80086be:	2305      	movs	r3, #5
 80086c0:	e008      	b.n	80086d4 <HAL_GPIO_Init+0x228>
 80086c2:	2304      	movs	r3, #4
 80086c4:	e006      	b.n	80086d4 <HAL_GPIO_Init+0x228>
 80086c6:	2303      	movs	r3, #3
 80086c8:	e004      	b.n	80086d4 <HAL_GPIO_Init+0x228>
 80086ca:	2302      	movs	r3, #2
 80086cc:	e002      	b.n	80086d4 <HAL_GPIO_Init+0x228>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <HAL_GPIO_Init+0x228>
 80086d2:	2300      	movs	r3, #0
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	f002 0203 	and.w	r2, r2, #3
 80086da:	0092      	lsls	r2, r2, #2
 80086dc:	4093      	lsls	r3, r2
 80086de:	69ba      	ldr	r2, [r7, #24]
 80086e0:	4313      	orrs	r3, r2
 80086e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086e4:	4935      	ldr	r1, [pc, #212]	; (80087bc <HAL_GPIO_Init+0x310>)
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	089b      	lsrs	r3, r3, #2
 80086ea:	3302      	adds	r3, #2
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80086f2:	4b3b      	ldr	r3, [pc, #236]	; (80087e0 <HAL_GPIO_Init+0x334>)
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	43db      	mvns	r3, r3
 80086fc:	69ba      	ldr	r2, [r7, #24]
 80086fe:	4013      	ands	r3, r2
 8008700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d003      	beq.n	8008716 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800870e:	69ba      	ldr	r2, [r7, #24]
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	4313      	orrs	r3, r2
 8008714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008716:	4a32      	ldr	r2, [pc, #200]	; (80087e0 <HAL_GPIO_Init+0x334>)
 8008718:	69bb      	ldr	r3, [r7, #24]
 800871a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800871c:	4b30      	ldr	r3, [pc, #192]	; (80087e0 <HAL_GPIO_Init+0x334>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	43db      	mvns	r3, r3
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	4013      	ands	r3, r2
 800872a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d003      	beq.n	8008740 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008738:	69ba      	ldr	r2, [r7, #24]
 800873a:	693b      	ldr	r3, [r7, #16]
 800873c:	4313      	orrs	r3, r2
 800873e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008740:	4a27      	ldr	r2, [pc, #156]	; (80087e0 <HAL_GPIO_Init+0x334>)
 8008742:	69bb      	ldr	r3, [r7, #24]
 8008744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008746:	4b26      	ldr	r3, [pc, #152]	; (80087e0 <HAL_GPIO_Init+0x334>)
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	43db      	mvns	r3, r3
 8008750:	69ba      	ldr	r2, [r7, #24]
 8008752:	4013      	ands	r3, r2
 8008754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800876a:	4a1d      	ldr	r2, [pc, #116]	; (80087e0 <HAL_GPIO_Init+0x334>)
 800876c:	69bb      	ldr	r3, [r7, #24]
 800876e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008770:	4b1b      	ldr	r3, [pc, #108]	; (80087e0 <HAL_GPIO_Init+0x334>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	43db      	mvns	r3, r3
 800877a:	69ba      	ldr	r2, [r7, #24]
 800877c:	4013      	ands	r3, r2
 800877e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008788:	2b00      	cmp	r3, #0
 800878a:	d003      	beq.n	8008794 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4313      	orrs	r3, r2
 8008792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008794:	4a12      	ldr	r2, [pc, #72]	; (80087e0 <HAL_GPIO_Init+0x334>)
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800879a:	69fb      	ldr	r3, [r7, #28]
 800879c:	3301      	adds	r3, #1
 800879e:	61fb      	str	r3, [r7, #28]
 80087a0:	69fb      	ldr	r3, [r7, #28]
 80087a2:	2b0f      	cmp	r3, #15
 80087a4:	f67f ae90 	bls.w	80084c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80087a8:	bf00      	nop
 80087aa:	bf00      	nop
 80087ac:	3724      	adds	r7, #36	; 0x24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	40023800 	.word	0x40023800
 80087bc:	40013800 	.word	0x40013800
 80087c0:	40020000 	.word	0x40020000
 80087c4:	40020400 	.word	0x40020400
 80087c8:	40020800 	.word	0x40020800
 80087cc:	40020c00 	.word	0x40020c00
 80087d0:	40021000 	.word	0x40021000
 80087d4:	40021400 	.word	0x40021400
 80087d8:	40021800 	.word	0x40021800
 80087dc:	40021c00 	.word	0x40021c00
 80087e0:	40013c00 	.word	0x40013c00

080087e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	460b      	mov	r3, r1
 80087ee:	807b      	strh	r3, [r7, #2]
 80087f0:	4613      	mov	r3, r2
 80087f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80087f4:	787b      	ldrb	r3, [r7, #1]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80087fa:	887a      	ldrh	r2, [r7, #2]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008800:	e003      	b.n	800880a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008802:	887b      	ldrh	r3, [r7, #2]
 8008804:	041a      	lsls	r2, r3, #16
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	619a      	str	r2, [r3, #24]
}
 800880a:	bf00      	nop
 800880c:	370c      	adds	r7, #12
 800880e:	46bd      	mov	sp, r7
 8008810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008814:	4770      	bx	lr

08008816 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008816:	b480      	push	{r7}
 8008818:	b085      	sub	sp, #20
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	695b      	ldr	r3, [r3, #20]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008828:	887a      	ldrh	r2, [r7, #2]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	4013      	ands	r3, r2
 800882e:	041a      	lsls	r2, r3, #16
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	43d9      	mvns	r1, r3
 8008834:	887b      	ldrh	r3, [r7, #2]
 8008836:	400b      	ands	r3, r1
 8008838:	431a      	orrs	r2, r3
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	619a      	str	r2, [r3, #24]
}
 800883e:	bf00      	nop
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b084      	sub	sp, #16
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e12b      	b.n	8008ab6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008864:	b2db      	uxtb	r3, r3
 8008866:	2b00      	cmp	r3, #0
 8008868:	d106      	bne.n	8008878 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7fc fad0 	bl	8004e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2224      	movs	r2, #36	; 0x24
 800887c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0201 	bic.w	r2, r2, #1
 800888e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800889e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088b0:	f002 f8c4 	bl	800aa3c <HAL_RCC_GetPCLK1Freq>
 80088b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	4a81      	ldr	r2, [pc, #516]	; (8008ac0 <HAL_I2C_Init+0x274>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d807      	bhi.n	80088d0 <HAL_I2C_Init+0x84>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4a80      	ldr	r2, [pc, #512]	; (8008ac4 <HAL_I2C_Init+0x278>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	bf94      	ite	ls
 80088c8:	2301      	movls	r3, #1
 80088ca:	2300      	movhi	r3, #0
 80088cc:	b2db      	uxtb	r3, r3
 80088ce:	e006      	b.n	80088de <HAL_I2C_Init+0x92>
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4a7d      	ldr	r2, [pc, #500]	; (8008ac8 <HAL_I2C_Init+0x27c>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	bf94      	ite	ls
 80088d8:	2301      	movls	r3, #1
 80088da:	2300      	movhi	r3, #0
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d001      	beq.n	80088e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e0e7      	b.n	8008ab6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4a78      	ldr	r2, [pc, #480]	; (8008acc <HAL_I2C_Init+0x280>)
 80088ea:	fba2 2303 	umull	r2, r3, r2, r3
 80088ee:	0c9b      	lsrs	r3, r3, #18
 80088f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	68ba      	ldr	r2, [r7, #8]
 8008902:	430a      	orrs	r2, r1
 8008904:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	6a1b      	ldr	r3, [r3, #32]
 800890c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	685b      	ldr	r3, [r3, #4]
 8008914:	4a6a      	ldr	r2, [pc, #424]	; (8008ac0 <HAL_I2C_Init+0x274>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d802      	bhi.n	8008920 <HAL_I2C_Init+0xd4>
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	3301      	adds	r3, #1
 800891e:	e009      	b.n	8008934 <HAL_I2C_Init+0xe8>
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008926:	fb02 f303 	mul.w	r3, r2, r3
 800892a:	4a69      	ldr	r2, [pc, #420]	; (8008ad0 <HAL_I2C_Init+0x284>)
 800892c:	fba2 2303 	umull	r2, r3, r2, r3
 8008930:	099b      	lsrs	r3, r3, #6
 8008932:	3301      	adds	r3, #1
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	6812      	ldr	r2, [r2, #0]
 8008938:	430b      	orrs	r3, r1
 800893a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008946:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	495c      	ldr	r1, [pc, #368]	; (8008ac0 <HAL_I2C_Init+0x274>)
 8008950:	428b      	cmp	r3, r1
 8008952:	d819      	bhi.n	8008988 <HAL_I2C_Init+0x13c>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	1e59      	subs	r1, r3, #1
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	fbb1 f3f3 	udiv	r3, r1, r3
 8008962:	1c59      	adds	r1, r3, #1
 8008964:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008968:	400b      	ands	r3, r1
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00a      	beq.n	8008984 <HAL_I2C_Init+0x138>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	1e59      	subs	r1, r3, #1
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	685b      	ldr	r3, [r3, #4]
 8008976:	005b      	lsls	r3, r3, #1
 8008978:	fbb1 f3f3 	udiv	r3, r1, r3
 800897c:	3301      	adds	r3, #1
 800897e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008982:	e051      	b.n	8008a28 <HAL_I2C_Init+0x1dc>
 8008984:	2304      	movs	r3, #4
 8008986:	e04f      	b.n	8008a28 <HAL_I2C_Init+0x1dc>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	689b      	ldr	r3, [r3, #8]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d111      	bne.n	80089b4 <HAL_I2C_Init+0x168>
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	1e58      	subs	r0, r3, #1
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6859      	ldr	r1, [r3, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	440b      	add	r3, r1
 800899e:	fbb0 f3f3 	udiv	r3, r0, r3
 80089a2:	3301      	adds	r3, #1
 80089a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	bf0c      	ite	eq
 80089ac:	2301      	moveq	r3, #1
 80089ae:	2300      	movne	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	e012      	b.n	80089da <HAL_I2C_Init+0x18e>
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	1e58      	subs	r0, r3, #1
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6859      	ldr	r1, [r3, #4]
 80089bc:	460b      	mov	r3, r1
 80089be:	009b      	lsls	r3, r3, #2
 80089c0:	440b      	add	r3, r1
 80089c2:	0099      	lsls	r1, r3, #2
 80089c4:	440b      	add	r3, r1
 80089c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ca:	3301      	adds	r3, #1
 80089cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bf0c      	ite	eq
 80089d4:	2301      	moveq	r3, #1
 80089d6:	2300      	movne	r3, #0
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <HAL_I2C_Init+0x196>
 80089de:	2301      	movs	r3, #1
 80089e0:	e022      	b.n	8008a28 <HAL_I2C_Init+0x1dc>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10e      	bne.n	8008a08 <HAL_I2C_Init+0x1bc>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	1e58      	subs	r0, r3, #1
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6859      	ldr	r1, [r3, #4]
 80089f2:	460b      	mov	r3, r1
 80089f4:	005b      	lsls	r3, r3, #1
 80089f6:	440b      	add	r3, r1
 80089f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80089fc:	3301      	adds	r3, #1
 80089fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a06:	e00f      	b.n	8008a28 <HAL_I2C_Init+0x1dc>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	1e58      	subs	r0, r3, #1
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6859      	ldr	r1, [r3, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	440b      	add	r3, r1
 8008a16:	0099      	lsls	r1, r3, #2
 8008a18:	440b      	add	r3, r1
 8008a1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a1e:	3301      	adds	r3, #1
 8008a20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a28:	6879      	ldr	r1, [r7, #4]
 8008a2a:	6809      	ldr	r1, [r1, #0]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	69da      	ldr	r2, [r3, #28]
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6a1b      	ldr	r3, [r3, #32]
 8008a42:	431a      	orrs	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	430a      	orrs	r2, r1
 8008a4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	689b      	ldr	r3, [r3, #8]
 8008a52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008a56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6911      	ldr	r1, [r2, #16]
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	68d2      	ldr	r2, [r2, #12]
 8008a62:	4311      	orrs	r1, r2
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	6812      	ldr	r2, [r2, #0]
 8008a68:	430b      	orrs	r3, r1
 8008a6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	695a      	ldr	r2, [r3, #20]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	431a      	orrs	r2, r3
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	430a      	orrs	r2, r1
 8008a86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0201 	orr.w	r2, r2, #1
 8008a96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2220      	movs	r2, #32
 8008aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ab4:	2300      	movs	r3, #0
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	000186a0 	.word	0x000186a0
 8008ac4:	001e847f 	.word	0x001e847f
 8008ac8:	003d08ff 	.word	0x003d08ff
 8008acc:	431bde83 	.word	0x431bde83
 8008ad0:	10624dd3 	.word	0x10624dd3

08008ad4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b088      	sub	sp, #32
 8008ad8:	af02      	add	r7, sp, #8
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	607a      	str	r2, [r7, #4]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	460b      	mov	r3, r1
 8008ae2:	817b      	strh	r3, [r7, #10]
 8008ae4:	4613      	mov	r3, r2
 8008ae6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ae8:	f7fe f9f6 	bl	8006ed8 <HAL_GetTick>
 8008aec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008af4:	b2db      	uxtb	r3, r3
 8008af6:	2b20      	cmp	r3, #32
 8008af8:	f040 80e0 	bne.w	8008cbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	2319      	movs	r3, #25
 8008b02:	2201      	movs	r2, #1
 8008b04:	4970      	ldr	r1, [pc, #448]	; (8008cc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8008b06:	68f8      	ldr	r0, [r7, #12]
 8008b08:	f001 f910 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d001      	beq.n	8008b16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b12:	2302      	movs	r3, #2
 8008b14:	e0d3      	b.n	8008cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d101      	bne.n	8008b24 <HAL_I2C_Master_Transmit+0x50>
 8008b20:	2302      	movs	r3, #2
 8008b22:	e0cc      	b.n	8008cbe <HAL_I2C_Master_Transmit+0x1ea>
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d007      	beq.n	8008b4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	681a      	ldr	r2, [r3, #0]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f042 0201 	orr.w	r2, r2, #1
 8008b48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	681a      	ldr	r2, [r3, #0]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	2221      	movs	r2, #33	; 0x21
 8008b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2210      	movs	r2, #16
 8008b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	893a      	ldrh	r2, [r7, #8]
 8008b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b80:	b29a      	uxth	r2, r3
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	4a50      	ldr	r2, [pc, #320]	; (8008ccc <HAL_I2C_Master_Transmit+0x1f8>)
 8008b8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008b8c:	8979      	ldrh	r1, [r7, #10]
 8008b8e:	697b      	ldr	r3, [r7, #20]
 8008b90:	6a3a      	ldr	r2, [r7, #32]
 8008b92:	68f8      	ldr	r0, [r7, #12]
 8008b94:	f000 fdfc 	bl	8009790 <I2C_MasterRequestWrite>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d001      	beq.n	8008ba2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e08d      	b.n	8008cbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	613b      	str	r3, [r7, #16]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	613b      	str	r3, [r7, #16]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699b      	ldr	r3, [r3, #24]
 8008bb4:	613b      	str	r3, [r7, #16]
 8008bb6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008bb8:	e066      	b.n	8008c88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	6a39      	ldr	r1, [r7, #32]
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f001 f98a 	bl	8009ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d00d      	beq.n	8008be6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	2b04      	cmp	r3, #4
 8008bd0:	d107      	bne.n	8008be2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008be0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e06b      	b.n	8008cbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bea:	781a      	ldrb	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	1c5a      	adds	r2, r3, #1
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	3b01      	subs	r3, #1
 8008c04:	b29a      	uxth	r2, r3
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	b29a      	uxth	r2, r3
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	695b      	ldr	r3, [r3, #20]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b04      	cmp	r3, #4
 8008c22:	d11b      	bne.n	8008c5c <HAL_I2C_Master_Transmit+0x188>
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d017      	beq.n	8008c5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c30:	781a      	ldrb	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3c:	1c5a      	adds	r2, r3, #1
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	b29a      	uxth	r2, r3
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c54:	3b01      	subs	r3, #1
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c5c:	697a      	ldr	r2, [r7, #20]
 8008c5e:	6a39      	ldr	r1, [r7, #32]
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f001 f97a 	bl	8009f5a <I2C_WaitOnBTFFlagUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00d      	beq.n	8008c88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c70:	2b04      	cmp	r3, #4
 8008c72:	d107      	bne.n	8008c84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c84:	2301      	movs	r3, #1
 8008c86:	e01a      	b.n	8008cbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d194      	bne.n	8008bba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	e000      	b.n	8008cbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008cbc:	2302      	movs	r3, #2
  }
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3718      	adds	r7, #24
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}
 8008cc6:	bf00      	nop
 8008cc8:	00100002 	.word	0x00100002
 8008ccc:	ffff0000 	.word	0xffff0000

08008cd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b08c      	sub	sp, #48	; 0x30
 8008cd4:	af02      	add	r7, sp, #8
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	460b      	mov	r3, r1
 8008cde:	817b      	strh	r3, [r7, #10]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008ce4:	f7fe f8f8 	bl	8006ed8 <HAL_GetTick>
 8008ce8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	2b20      	cmp	r3, #32
 8008cf4:	f040 820b 	bne.w	800910e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	9300      	str	r3, [sp, #0]
 8008cfc:	2319      	movs	r3, #25
 8008cfe:	2201      	movs	r2, #1
 8008d00:	497c      	ldr	r1, [pc, #496]	; (8008ef4 <HAL_I2C_Master_Receive+0x224>)
 8008d02:	68f8      	ldr	r0, [r7, #12]
 8008d04:	f001 f812 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d001      	beq.n	8008d12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e1fe      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d101      	bne.n	8008d20 <HAL_I2C_Master_Receive+0x50>
 8008d1c:	2302      	movs	r3, #2
 8008d1e:	e1f7      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d007      	beq.n	8008d46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0201 	orr.w	r2, r2, #1
 8008d44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2222      	movs	r2, #34	; 0x22
 8008d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2210      	movs	r2, #16
 8008d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	893a      	ldrh	r2, [r7, #8]
 8008d76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d7c:	b29a      	uxth	r2, r3
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	4a5c      	ldr	r2, [pc, #368]	; (8008ef8 <HAL_I2C_Master_Receive+0x228>)
 8008d86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008d88:	8979      	ldrh	r1, [r7, #10]
 8008d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d8e:	68f8      	ldr	r0, [r7, #12]
 8008d90:	f000 fd80 	bl	8009894 <I2C_MasterRequestRead>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e1b8      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d113      	bne.n	8008dce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008da6:	2300      	movs	r3, #0
 8008da8:	623b      	str	r3, [r7, #32]
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	695b      	ldr	r3, [r3, #20]
 8008db0:	623b      	str	r3, [r7, #32]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	699b      	ldr	r3, [r3, #24]
 8008db8:	623b      	str	r3, [r7, #32]
 8008dba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	e18c      	b.n	80090e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d11b      	bne.n	8008e0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008de6:	2300      	movs	r3, #0
 8008de8:	61fb      	str	r3, [r7, #28]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	695b      	ldr	r3, [r3, #20]
 8008df0:	61fb      	str	r3, [r7, #28]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	699b      	ldr	r3, [r3, #24]
 8008df8:	61fb      	str	r3, [r7, #28]
 8008dfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681a      	ldr	r2, [r3, #0]
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	e16c      	b.n	80090e8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d11b      	bne.n	8008e4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e36:	2300      	movs	r3, #0
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	695b      	ldr	r3, [r3, #20]
 8008e40:	61bb      	str	r3, [r7, #24]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	61bb      	str	r3, [r7, #24]
 8008e4a:	69bb      	ldr	r3, [r7, #24]
 8008e4c:	e14c      	b.n	80090e8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	695b      	ldr	r3, [r3, #20]
 8008e68:	617b      	str	r3, [r7, #20]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	617b      	str	r3, [r7, #20]
 8008e72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008e74:	e138      	b.n	80090e8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	f200 80f1 	bhi.w	8009062 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d123      	bne.n	8008ed0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e8c:	68f8      	ldr	r0, [r7, #12]
 8008e8e:	f001 f8a5 	bl	8009fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d001      	beq.n	8008e9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	e139      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	691a      	ldr	r2, [r3, #16]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	b2d2      	uxtb	r2, r2
 8008ea8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eae:	1c5a      	adds	r2, r3, #1
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eb8:	3b01      	subs	r3, #1
 8008eba:	b29a      	uxth	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	b29a      	uxth	r2, r3
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008ece:	e10b      	b.n	80090e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d14e      	bne.n	8008f76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ede:	2200      	movs	r2, #0
 8008ee0:	4906      	ldr	r1, [pc, #24]	; (8008efc <HAL_I2C_Master_Receive+0x22c>)
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f000 ff22 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d008      	beq.n	8008f00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e10e      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
 8008ef2:	bf00      	nop
 8008ef4:	00100002 	.word	0x00100002
 8008ef8:	ffff0000 	.word	0xffff0000
 8008efc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	691a      	ldr	r2, [r3, #16]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	b2d2      	uxtb	r2, r2
 8008f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f22:	1c5a      	adds	r2, r3, #1
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f2c:	3b01      	subs	r3, #1
 8008f2e:	b29a      	uxth	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f38:	b29b      	uxth	r3, r3
 8008f3a:	3b01      	subs	r3, #1
 8008f3c:	b29a      	uxth	r2, r3
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	691a      	ldr	r2, [r3, #16]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f4c:	b2d2      	uxtb	r2, r2
 8008f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	b29a      	uxth	r2, r3
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29a      	uxth	r2, r3
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f74:	e0b8      	b.n	80090e8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	4966      	ldr	r1, [pc, #408]	; (8009118 <HAL_I2C_Master_Receive+0x448>)
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 fed3 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d001      	beq.n	8008f90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	e0bf      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	691a      	ldr	r2, [r3, #16]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	b2d2      	uxtb	r2, r2
 8008fac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fbc:	3b01      	subs	r3, #1
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	3b01      	subs	r3, #1
 8008fcc:	b29a      	uxth	r2, r3
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	2200      	movs	r2, #0
 8008fda:	494f      	ldr	r1, [pc, #316]	; (8009118 <HAL_I2C_Master_Receive+0x448>)
 8008fdc:	68f8      	ldr	r0, [r7, #12]
 8008fde:	f000 fea5 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e091      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	691a      	ldr	r2, [r3, #16]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009006:	b2d2      	uxtb	r2, r2
 8009008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800900e:	1c5a      	adds	r2, r3, #1
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009018:	3b01      	subs	r3, #1
 800901a:	b29a      	uxth	r2, r3
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	691a      	ldr	r2, [r3, #16]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	b2d2      	uxtb	r2, r2
 800903a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009040:	1c5a      	adds	r2, r3, #1
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009056:	b29b      	uxth	r3, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	b29a      	uxth	r2, r3
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009060:	e042      	b.n	80090e8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009064:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 ffb8 	bl	8009fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8009072:	2301      	movs	r3, #1
 8009074:	e04c      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	b2d2      	uxtb	r2, r2
 8009082:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009088:	1c5a      	adds	r2, r3, #1
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009092:	3b01      	subs	r3, #1
 8009094:	b29a      	uxth	r2, r3
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800909e:	b29b      	uxth	r3, r3
 80090a0:	3b01      	subs	r3, #1
 80090a2:	b29a      	uxth	r2, r3
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f003 0304 	and.w	r3, r3, #4
 80090b2:	2b04      	cmp	r3, #4
 80090b4:	d118      	bne.n	80090e8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	691a      	ldr	r2, [r3, #16]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	b2d2      	uxtb	r2, r2
 80090c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	1c5a      	adds	r2, r3, #1
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d2:	3b01      	subs	r3, #1
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090de:	b29b      	uxth	r3, r3
 80090e0:	3b01      	subs	r3, #1
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f47f aec2 	bne.w	8008e76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2220      	movs	r2, #32
 80090f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800910a:	2300      	movs	r3, #0
 800910c:	e000      	b.n	8009110 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800910e:	2302      	movs	r3, #2
  }
}
 8009110:	4618      	mov	r0, r3
 8009112:	3728      	adds	r7, #40	; 0x28
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	00010004 	.word	0x00010004

0800911c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b088      	sub	sp, #32
 8009120:	af02      	add	r7, sp, #8
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	4608      	mov	r0, r1
 8009126:	4611      	mov	r1, r2
 8009128:	461a      	mov	r2, r3
 800912a:	4603      	mov	r3, r0
 800912c:	817b      	strh	r3, [r7, #10]
 800912e:	460b      	mov	r3, r1
 8009130:	813b      	strh	r3, [r7, #8]
 8009132:	4613      	mov	r3, r2
 8009134:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009136:	f7fd fecf 	bl	8006ed8 <HAL_GetTick>
 800913a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b20      	cmp	r3, #32
 8009146:	f040 80d9 	bne.w	80092fc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	9300      	str	r3, [sp, #0]
 800914e:	2319      	movs	r3, #25
 8009150:	2201      	movs	r2, #1
 8009152:	496d      	ldr	r1, [pc, #436]	; (8009308 <HAL_I2C_Mem_Write+0x1ec>)
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f000 fde9 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009160:	2302      	movs	r3, #2
 8009162:	e0cc      	b.n	80092fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_I2C_Mem_Write+0x56>
 800916e:	2302      	movs	r3, #2
 8009170:	e0c5      	b.n	80092fe <HAL_I2C_Mem_Write+0x1e2>
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2201      	movs	r2, #1
 8009176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f003 0301 	and.w	r3, r3, #1
 8009184:	2b01      	cmp	r3, #1
 8009186:	d007      	beq.n	8009198 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f042 0201 	orr.w	r2, r2, #1
 8009196:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2221      	movs	r2, #33	; 0x21
 80091ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2240      	movs	r2, #64	; 0x40
 80091b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6a3a      	ldr	r2, [r7, #32]
 80091c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80091c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	4a4d      	ldr	r2, [pc, #308]	; (800930c <HAL_I2C_Mem_Write+0x1f0>)
 80091d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80091da:	88f8      	ldrh	r0, [r7, #6]
 80091dc:	893a      	ldrh	r2, [r7, #8]
 80091de:	8979      	ldrh	r1, [r7, #10]
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	9301      	str	r3, [sp, #4]
 80091e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e6:	9300      	str	r3, [sp, #0]
 80091e8:	4603      	mov	r3, r0
 80091ea:	68f8      	ldr	r0, [r7, #12]
 80091ec:	f000 fc20 	bl	8009a30 <I2C_RequestMemoryWrite>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d052      	beq.n	800929c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80091f6:	2301      	movs	r3, #1
 80091f8:	e081      	b.n	80092fe <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f000 fe6a 	bl	8009ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00d      	beq.n	8009226 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	2b04      	cmp	r3, #4
 8009210:	d107      	bne.n	8009222 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009220:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009222:	2301      	movs	r3, #1
 8009224:	e06b      	b.n	80092fe <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800922a:	781a      	ldrb	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009236:	1c5a      	adds	r2, r3, #1
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009240:	3b01      	subs	r3, #1
 8009242:	b29a      	uxth	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800924c:	b29b      	uxth	r3, r3
 800924e:	3b01      	subs	r3, #1
 8009250:	b29a      	uxth	r2, r3
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b04      	cmp	r3, #4
 8009262:	d11b      	bne.n	800929c <HAL_I2C_Mem_Write+0x180>
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009268:	2b00      	cmp	r3, #0
 800926a:	d017      	beq.n	800929c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	781a      	ldrb	r2, [r3, #0]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	1c5a      	adds	r2, r3, #1
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009286:	3b01      	subs	r3, #1
 8009288:	b29a      	uxth	r2, r3
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009292:	b29b      	uxth	r3, r3
 8009294:	3b01      	subs	r3, #1
 8009296:	b29a      	uxth	r2, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1aa      	bne.n	80091fa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092a4:	697a      	ldr	r2, [r7, #20]
 80092a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 fe56 	bl	8009f5a <I2C_WaitOnBTFFlagUntilTimeout>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d00d      	beq.n	80092d0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092b8:	2b04      	cmp	r3, #4
 80092ba:	d107      	bne.n	80092cc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	681a      	ldr	r2, [r3, #0]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092ca:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e016      	b.n	80092fe <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80092de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2220      	movs	r2, #32
 80092e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	2200      	movs	r2, #0
 80092ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	e000      	b.n	80092fe <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80092fc:	2302      	movs	r3, #2
  }
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
 8009306:	bf00      	nop
 8009308:	00100002 	.word	0x00100002
 800930c:	ffff0000 	.word	0xffff0000

08009310 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08c      	sub	sp, #48	; 0x30
 8009314:	af02      	add	r7, sp, #8
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	4608      	mov	r0, r1
 800931a:	4611      	mov	r1, r2
 800931c:	461a      	mov	r2, r3
 800931e:	4603      	mov	r3, r0
 8009320:	817b      	strh	r3, [r7, #10]
 8009322:	460b      	mov	r3, r1
 8009324:	813b      	strh	r3, [r7, #8]
 8009326:	4613      	mov	r3, r2
 8009328:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800932a:	f7fd fdd5 	bl	8006ed8 <HAL_GetTick>
 800932e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009336:	b2db      	uxtb	r3, r3
 8009338:	2b20      	cmp	r3, #32
 800933a:	f040 8208 	bne.w	800974e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	9300      	str	r3, [sp, #0]
 8009342:	2319      	movs	r3, #25
 8009344:	2201      	movs	r2, #1
 8009346:	497b      	ldr	r1, [pc, #492]	; (8009534 <HAL_I2C_Mem_Read+0x224>)
 8009348:	68f8      	ldr	r0, [r7, #12]
 800934a:	f000 fcef 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d001      	beq.n	8009358 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009354:	2302      	movs	r3, #2
 8009356:	e1fb      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800935e:	2b01      	cmp	r3, #1
 8009360:	d101      	bne.n	8009366 <HAL_I2C_Mem_Read+0x56>
 8009362:	2302      	movs	r3, #2
 8009364:	e1f4      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	f003 0301 	and.w	r3, r3, #1
 8009378:	2b01      	cmp	r3, #1
 800937a:	d007      	beq.n	800938c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f042 0201 	orr.w	r2, r2, #1
 800938a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800939a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2222      	movs	r2, #34	; 0x22
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2240      	movs	r2, #64	; 0x40
 80093a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80093bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c2:	b29a      	uxth	r2, r3
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4a5b      	ldr	r2, [pc, #364]	; (8009538 <HAL_I2C_Mem_Read+0x228>)
 80093cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80093ce:	88f8      	ldrh	r0, [r7, #6]
 80093d0:	893a      	ldrh	r2, [r7, #8]
 80093d2:	8979      	ldrh	r1, [r7, #10]
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	9301      	str	r3, [sp, #4]
 80093d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	4603      	mov	r3, r0
 80093de:	68f8      	ldr	r0, [r7, #12]
 80093e0:	f000 fbbc 	bl	8009b5c <I2C_RequestMemoryRead>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e1b0      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d113      	bne.n	800941e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80093f6:	2300      	movs	r3, #0
 80093f8:	623b      	str	r3, [r7, #32]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	695b      	ldr	r3, [r3, #20]
 8009400:	623b      	str	r3, [r7, #32]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	623b      	str	r3, [r7, #32]
 800940a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	e184      	b.n	8009728 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009422:	2b01      	cmp	r3, #1
 8009424:	d11b      	bne.n	800945e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681a      	ldr	r2, [r3, #0]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009434:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009436:	2300      	movs	r3, #0
 8009438:	61fb      	str	r3, [r7, #28]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	695b      	ldr	r3, [r3, #20]
 8009440:	61fb      	str	r3, [r7, #28]
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	61fb      	str	r3, [r7, #28]
 800944a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800945a:	601a      	str	r2, [r3, #0]
 800945c:	e164      	b.n	8009728 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009462:	2b02      	cmp	r3, #2
 8009464:	d11b      	bne.n	800949e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009474:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009484:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009486:	2300      	movs	r3, #0
 8009488:	61bb      	str	r3, [r7, #24]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	61bb      	str	r3, [r7, #24]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	61bb      	str	r3, [r7, #24]
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	e144      	b.n	8009728 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800949e:	2300      	movs	r3, #0
 80094a0:	617b      	str	r3, [r7, #20]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	617b      	str	r3, [r7, #20]
 80094b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80094b4:	e138      	b.n	8009728 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	f200 80f1 	bhi.w	80096a2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d123      	bne.n	8009510 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 fd85 	bl	8009fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80094d2:	4603      	mov	r3, r0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d001      	beq.n	80094dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80094d8:	2301      	movs	r3, #1
 80094da:	e139      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691a      	ldr	r2, [r3, #16]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f8:	3b01      	subs	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009504:	b29b      	uxth	r3, r3
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800950e:	e10b      	b.n	8009728 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009514:	2b02      	cmp	r3, #2
 8009516:	d14e      	bne.n	80095b6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800951a:	9300      	str	r3, [sp, #0]
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	2200      	movs	r2, #0
 8009520:	4906      	ldr	r1, [pc, #24]	; (800953c <HAL_I2C_Mem_Read+0x22c>)
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	f000 fc02 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8009528:	4603      	mov	r3, r0
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e10e      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
 8009532:	bf00      	nop
 8009534:	00100002 	.word	0x00100002
 8009538:	ffff0000 	.word	0xffff0000
 800953c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800954e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	691a      	ldr	r2, [r3, #16]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956c:	3b01      	subs	r3, #1
 800956e:	b29a      	uxth	r2, r3
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	691a      	ldr	r2, [r3, #16]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958c:	b2d2      	uxtb	r2, r2
 800958e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	3b01      	subs	r3, #1
 80095ae:	b29a      	uxth	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80095b4:	e0b8      	b.n	8009728 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095bc:	2200      	movs	r2, #0
 80095be:	4966      	ldr	r1, [pc, #408]	; (8009758 <HAL_I2C_Mem_Read+0x448>)
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 fbb3 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 80095c6:	4603      	mov	r3, r0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d001      	beq.n	80095d0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e0bf      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	691a      	ldr	r2, [r3, #16]
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ea:	b2d2      	uxtb	r2, r2
 80095ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f2:	1c5a      	adds	r2, r3, #1
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095fc:	3b01      	subs	r3, #1
 80095fe:	b29a      	uxth	r2, r3
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009608:	b29b      	uxth	r3, r3
 800960a:	3b01      	subs	r3, #1
 800960c:	b29a      	uxth	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009614:	9300      	str	r3, [sp, #0]
 8009616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009618:	2200      	movs	r2, #0
 800961a:	494f      	ldr	r1, [pc, #316]	; (8009758 <HAL_I2C_Mem_Read+0x448>)
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fb85 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e091      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800963a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	691a      	ldr	r2, [r3, #16]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	b2d2      	uxtb	r2, r2
 8009648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	1c5a      	adds	r2, r3, #1
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009658:	3b01      	subs	r3, #1
 800965a:	b29a      	uxth	r2, r3
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009664:	b29b      	uxth	r3, r3
 8009666:	3b01      	subs	r3, #1
 8009668:	b29a      	uxth	r2, r3
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	691a      	ldr	r2, [r3, #16]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009678:	b2d2      	uxtb	r2, r2
 800967a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800968a:	3b01      	subs	r3, #1
 800968c:	b29a      	uxth	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009696:	b29b      	uxth	r3, r3
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80096a0:	e042      	b.n	8009728 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80096a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	f000 fc98 	bl	8009fdc <I2C_WaitOnRXNEFlagUntilTimeout>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e04c      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	691a      	ldr	r2, [r3, #16]
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c0:	b2d2      	uxtb	r2, r2
 80096c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096c8:	1c5a      	adds	r2, r3, #1
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096d2:	3b01      	subs	r3, #1
 80096d4:	b29a      	uxth	r2, r3
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096de:	b29b      	uxth	r3, r3
 80096e0:	3b01      	subs	r3, #1
 80096e2:	b29a      	uxth	r2, r3
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	695b      	ldr	r3, [r3, #20]
 80096ee:	f003 0304 	and.w	r3, r3, #4
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d118      	bne.n	8009728 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	691a      	ldr	r2, [r3, #16]
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009700:	b2d2      	uxtb	r2, r2
 8009702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009708:	1c5a      	adds	r2, r3, #1
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800971e:	b29b      	uxth	r3, r3
 8009720:	3b01      	subs	r3, #1
 8009722:	b29a      	uxth	r2, r3
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800972c:	2b00      	cmp	r3, #0
 800972e:	f47f aec2 	bne.w	80094b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2220      	movs	r2, #32
 8009736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	e000      	b.n	8009750 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800974e:	2302      	movs	r3, #2
  }
}
 8009750:	4618      	mov	r0, r3
 8009752:	3728      	adds	r7, #40	; 0x28
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	00010004 	.word	0x00010004

0800975c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800976a:	b2db      	uxtb	r3, r3
}
 800976c:	4618      	mov	r0, r3
 800976e:	370c      	adds	r7, #12
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009778:	b480      	push	{r7}
 800977a:	b083      	sub	sp, #12
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8009784:	4618      	mov	r0, r3
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b088      	sub	sp, #32
 8009794:	af02      	add	r7, sp, #8
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	607a      	str	r2, [r7, #4]
 800979a:	603b      	str	r3, [r7, #0]
 800979c:	460b      	mov	r3, r1
 800979e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	2b08      	cmp	r3, #8
 80097aa:	d006      	beq.n	80097ba <I2C_MasterRequestWrite+0x2a>
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d003      	beq.n	80097ba <I2C_MasterRequestWrite+0x2a>
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80097b8:	d108      	bne.n	80097cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097c8:	601a      	str	r2, [r3, #0]
 80097ca:	e00b      	b.n	80097e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097d0:	2b12      	cmp	r3, #18
 80097d2:	d107      	bne.n	80097e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80097e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f000 fa9b 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d00d      	beq.n	8009818 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800980a:	d103      	bne.n	8009814 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e035      	b.n	8009884 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	691b      	ldr	r3, [r3, #16]
 800981c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009820:	d108      	bne.n	8009834 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009822:	897b      	ldrh	r3, [r7, #10]
 8009824:	b2db      	uxtb	r3, r3
 8009826:	461a      	mov	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009830:	611a      	str	r2, [r3, #16]
 8009832:	e01b      	b.n	800986c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009834:	897b      	ldrh	r3, [r7, #10]
 8009836:	11db      	asrs	r3, r3, #7
 8009838:	b2db      	uxtb	r3, r3
 800983a:	f003 0306 	and.w	r3, r3, #6
 800983e:	b2db      	uxtb	r3, r3
 8009840:	f063 030f 	orn	r3, r3, #15
 8009844:	b2da      	uxtb	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	490e      	ldr	r1, [pc, #56]	; (800988c <I2C_MasterRequestWrite+0xfc>)
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f000 fac1 	bl	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009858:	4603      	mov	r3, r0
 800985a:	2b00      	cmp	r3, #0
 800985c:	d001      	beq.n	8009862 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	e010      	b.n	8009884 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009862:	897b      	ldrh	r3, [r7, #10]
 8009864:	b2da      	uxtb	r2, r3
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	687a      	ldr	r2, [r7, #4]
 8009870:	4907      	ldr	r1, [pc, #28]	; (8009890 <I2C_MasterRequestWrite+0x100>)
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 fab1 	bl	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d001      	beq.n	8009882 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800987e:	2301      	movs	r3, #1
 8009880:	e000      	b.n	8009884 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3718      	adds	r7, #24
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	00010008 	.word	0x00010008
 8009890:	00010002 	.word	0x00010002

08009894 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b088      	sub	sp, #32
 8009898:	af02      	add	r7, sp, #8
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	607a      	str	r2, [r7, #4]
 800989e:	603b      	str	r3, [r7, #0]
 80098a0:	460b      	mov	r3, r1
 80098a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681a      	ldr	r2, [r3, #0]
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	2b08      	cmp	r3, #8
 80098be:	d006      	beq.n	80098ce <I2C_MasterRequestRead+0x3a>
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2b01      	cmp	r3, #1
 80098c4:	d003      	beq.n	80098ce <I2C_MasterRequestRead+0x3a>
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80098cc:	d108      	bne.n	80098e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	e00b      	b.n	80098f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e4:	2b11      	cmp	r3, #17
 80098e6:	d107      	bne.n	80098f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2200      	movs	r2, #0
 8009900:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 fa11 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d00d      	beq.n	800992c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800991a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800991e:	d103      	bne.n	8009928 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009926:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009928:	2303      	movs	r3, #3
 800992a:	e079      	b.n	8009a20 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	691b      	ldr	r3, [r3, #16]
 8009930:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009934:	d108      	bne.n	8009948 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009936:	897b      	ldrh	r3, [r7, #10]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f043 0301 	orr.w	r3, r3, #1
 800993e:	b2da      	uxtb	r2, r3
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	611a      	str	r2, [r3, #16]
 8009946:	e05f      	b.n	8009a08 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009948:	897b      	ldrh	r3, [r7, #10]
 800994a:	11db      	asrs	r3, r3, #7
 800994c:	b2db      	uxtb	r3, r3
 800994e:	f003 0306 	and.w	r3, r3, #6
 8009952:	b2db      	uxtb	r3, r3
 8009954:	f063 030f 	orn	r3, r3, #15
 8009958:	b2da      	uxtb	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	4930      	ldr	r1, [pc, #192]	; (8009a28 <I2C_MasterRequestRead+0x194>)
 8009966:	68f8      	ldr	r0, [r7, #12]
 8009968:	f000 fa37 	bl	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e054      	b.n	8009a20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009976:	897b      	ldrh	r3, [r7, #10]
 8009978:	b2da      	uxtb	r2, r3
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	687a      	ldr	r2, [r7, #4]
 8009984:	4929      	ldr	r1, [pc, #164]	; (8009a2c <I2C_MasterRequestRead+0x198>)
 8009986:	68f8      	ldr	r0, [r7, #12]
 8009988:	f000 fa27 	bl	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800998c:	4603      	mov	r3, r0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d001      	beq.n	8009996 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	e044      	b.n	8009a20 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009996:	2300      	movs	r3, #0
 8009998:	613b      	str	r3, [r7, #16]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	613b      	str	r3, [r7, #16]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	699b      	ldr	r3, [r3, #24]
 80099a8:	613b      	str	r3, [r7, #16]
 80099aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f9af 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d00d      	beq.n	80099f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099e2:	d103      	bne.n	80099ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e017      	b.n	8009a20 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80099f0:	897b      	ldrh	r3, [r7, #10]
 80099f2:	11db      	asrs	r3, r3, #7
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f003 0306 	and.w	r3, r3, #6
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	f063 030e 	orn	r3, r3, #14
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	4907      	ldr	r1, [pc, #28]	; (8009a2c <I2C_MasterRequestRead+0x198>)
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f9e3 	bl	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e000      	b.n	8009a20 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	00010008 	.word	0x00010008
 8009a2c:	00010002 	.word	0x00010002

08009a30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	4608      	mov	r0, r1
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	4603      	mov	r3, r0
 8009a40:	817b      	strh	r3, [r7, #10]
 8009a42:	460b      	mov	r3, r1
 8009a44:	813b      	strh	r3, [r7, #8]
 8009a46:	4613      	mov	r3, r2
 8009a48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	6a3b      	ldr	r3, [r7, #32]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a66:	68f8      	ldr	r0, [r7, #12]
 8009a68:	f000 f960 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d00d      	beq.n	8009a8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a80:	d103      	bne.n	8009a8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a88:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a8a:	2303      	movs	r3, #3
 8009a8c:	e05f      	b.n	8009b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a8e:	897b      	ldrh	r3, [r7, #10]
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	461a      	mov	r2, r3
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	6a3a      	ldr	r2, [r7, #32]
 8009aa2:	492d      	ldr	r1, [pc, #180]	; (8009b58 <I2C_RequestMemoryWrite+0x128>)
 8009aa4:	68f8      	ldr	r0, [r7, #12]
 8009aa6:	f000 f998 	bl	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d001      	beq.n	8009ab4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e04c      	b.n	8009b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	695b      	ldr	r3, [r3, #20]
 8009abe:	617b      	str	r3, [r7, #20]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699b      	ldr	r3, [r3, #24]
 8009ac6:	617b      	str	r3, [r7, #20]
 8009ac8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009aca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009acc:	6a39      	ldr	r1, [r7, #32]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f000 fa02 	bl	8009ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00d      	beq.n	8009af6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ade:	2b04      	cmp	r3, #4
 8009ae0:	d107      	bne.n	8009af2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009af0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009af2:	2301      	movs	r3, #1
 8009af4:	e02b      	b.n	8009b4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009af6:	88fb      	ldrh	r3, [r7, #6]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d105      	bne.n	8009b08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009afc:	893b      	ldrh	r3, [r7, #8]
 8009afe:	b2da      	uxtb	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	611a      	str	r2, [r3, #16]
 8009b06:	e021      	b.n	8009b4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009b08:	893b      	ldrh	r3, [r7, #8]
 8009b0a:	0a1b      	lsrs	r3, r3, #8
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b18:	6a39      	ldr	r1, [r7, #32]
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f000 f9dc 	bl	8009ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d00d      	beq.n	8009b42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	2b04      	cmp	r3, #4
 8009b2c:	d107      	bne.n	8009b3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	681a      	ldr	r2, [r3, #0]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e005      	b.n	8009b4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009b42:	893b      	ldrh	r3, [r7, #8]
 8009b44:	b2da      	uxtb	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3718      	adds	r7, #24
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}
 8009b56:	bf00      	nop
 8009b58:	00010002 	.word	0x00010002

08009b5c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	4608      	mov	r0, r1
 8009b66:	4611      	mov	r1, r2
 8009b68:	461a      	mov	r2, r3
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	817b      	strh	r3, [r7, #10]
 8009b6e:	460b      	mov	r3, r1
 8009b70:	813b      	strh	r3, [r7, #8]
 8009b72:	4613      	mov	r3, r2
 8009b74:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009b84:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	9300      	str	r3, [sp, #0]
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f8c2 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d00d      	beq.n	8009bca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bbc:	d103      	bne.n	8009bc6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e0aa      	b.n	8009d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009bca:	897b      	ldrh	r3, [r7, #10]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	461a      	mov	r2, r3
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009bd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bdc:	6a3a      	ldr	r2, [r7, #32]
 8009bde:	4952      	ldr	r1, [pc, #328]	; (8009d28 <I2C_RequestMemoryRead+0x1cc>)
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 f8fa 	bl	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d001      	beq.n	8009bf0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8009bec:	2301      	movs	r3, #1
 8009bee:	e097      	b.n	8009d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	617b      	str	r3, [r7, #20]
 8009c04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c08:	6a39      	ldr	r1, [r7, #32]
 8009c0a:	68f8      	ldr	r0, [r7, #12]
 8009c0c:	f000 f964 	bl	8009ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00d      	beq.n	8009c32 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c1a:	2b04      	cmp	r3, #4
 8009c1c:	d107      	bne.n	8009c2e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e076      	b.n	8009d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009c32:	88fb      	ldrh	r3, [r7, #6]
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d105      	bne.n	8009c44 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c38:	893b      	ldrh	r3, [r7, #8]
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	611a      	str	r2, [r3, #16]
 8009c42:	e021      	b.n	8009c88 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009c44:	893b      	ldrh	r3, [r7, #8]
 8009c46:	0a1b      	lsrs	r3, r3, #8
 8009c48:	b29b      	uxth	r3, r3
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c54:	6a39      	ldr	r1, [r7, #32]
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 f93e 	bl	8009ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00d      	beq.n	8009c7e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c66:	2b04      	cmp	r3, #4
 8009c68:	d107      	bne.n	8009c7a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e050      	b.n	8009d20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009c7e:	893b      	ldrh	r3, [r7, #8]
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c8a:	6a39      	ldr	r1, [r7, #32]
 8009c8c:	68f8      	ldr	r0, [r7, #12]
 8009c8e:	f000 f923 	bl	8009ed8 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00d      	beq.n	8009cb4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c9c:	2b04      	cmp	r3, #4
 8009c9e:	d107      	bne.n	8009cb0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009cae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e035      	b.n	8009d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009cc2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	9300      	str	r3, [sp, #0]
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009cd0:	68f8      	ldr	r0, [r7, #12]
 8009cd2:	f000 f82b 	bl	8009d2c <I2C_WaitOnFlagUntilTimeout>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d00d      	beq.n	8009cf8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cea:	d103      	bne.n	8009cf4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e013      	b.n	8009d20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009cf8:	897b      	ldrh	r3, [r7, #10]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	f043 0301 	orr.w	r3, r3, #1
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0a:	6a3a      	ldr	r2, [r7, #32]
 8009d0c:	4906      	ldr	r1, [pc, #24]	; (8009d28 <I2C_RequestMemoryRead+0x1cc>)
 8009d0e:	68f8      	ldr	r0, [r7, #12]
 8009d10:	f000 f863 	bl	8009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	e000      	b.n	8009d20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009d1e:	2300      	movs	r3, #0
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3718      	adds	r7, #24
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}
 8009d28:	00010002 	.word	0x00010002

08009d2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	603b      	str	r3, [r7, #0]
 8009d38:	4613      	mov	r3, r2
 8009d3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d3c:	e025      	b.n	8009d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d44:	d021      	beq.n	8009d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d46:	f7fd f8c7 	bl	8006ed8 <HAL_GetTick>
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	1ad3      	subs	r3, r2, r3
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	429a      	cmp	r2, r3
 8009d54:	d302      	bcc.n	8009d5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d116      	bne.n	8009d8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d76:	f043 0220 	orr.w	r2, r3, #32
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2200      	movs	r2, #0
 8009d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e023      	b.n	8009dd2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	0c1b      	lsrs	r3, r3, #16
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d10d      	bne.n	8009db0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	695b      	ldr	r3, [r3, #20]
 8009d9a:	43da      	mvns	r2, r3
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	4013      	ands	r3, r2
 8009da0:	b29b      	uxth	r3, r3
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bf0c      	ite	eq
 8009da6:	2301      	moveq	r3, #1
 8009da8:	2300      	movne	r3, #0
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	461a      	mov	r2, r3
 8009dae:	e00c      	b.n	8009dca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	699b      	ldr	r3, [r3, #24]
 8009db6:	43da      	mvns	r2, r3
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	4013      	ands	r3, r2
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	bf0c      	ite	eq
 8009dc2:	2301      	moveq	r3, #1
 8009dc4:	2300      	movne	r3, #0
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	461a      	mov	r2, r3
 8009dca:	79fb      	ldrb	r3, [r7, #7]
 8009dcc:	429a      	cmp	r2, r3
 8009dce:	d0b6      	beq.n	8009d3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	60f8      	str	r0, [r7, #12]
 8009de2:	60b9      	str	r1, [r7, #8]
 8009de4:	607a      	str	r2, [r7, #4]
 8009de6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009de8:	e051      	b.n	8009e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	695b      	ldr	r3, [r3, #20]
 8009df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009df4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009df8:	d123      	bne.n	8009e42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	2220      	movs	r2, #32
 8009e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	f043 0204 	orr.w	r2, r3, #4
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e046      	b.n	8009ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e48:	d021      	beq.n	8009e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e4a:	f7fd f845 	bl	8006ed8 <HAL_GetTick>
 8009e4e:	4602      	mov	r2, r0
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d302      	bcc.n	8009e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d116      	bne.n	8009e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	2200      	movs	r2, #0
 8009e64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2220      	movs	r2, #32
 8009e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	2200      	movs	r2, #0
 8009e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f043 0220 	orr.w	r2, r3, #32
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2200      	movs	r2, #0
 8009e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e020      	b.n	8009ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	0c1b      	lsrs	r3, r3, #16
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d10c      	bne.n	8009eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	695b      	ldr	r3, [r3, #20]
 8009e9e:	43da      	mvns	r2, r3
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	b29b      	uxth	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bf14      	ite	ne
 8009eaa:	2301      	movne	r3, #1
 8009eac:	2300      	moveq	r3, #0
 8009eae:	b2db      	uxtb	r3, r3
 8009eb0:	e00b      	b.n	8009eca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	43da      	mvns	r2, r3
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	bf14      	ite	ne
 8009ec4:	2301      	movne	r3, #1
 8009ec6:	2300      	moveq	r3, #0
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d18d      	bne.n	8009dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009ece:	2300      	movs	r3, #0
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ee4:	e02d      	b.n	8009f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 f8ce 	bl	800a088 <I2C_IsAcknowledgeFailed>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e02d      	b.n	8009f52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009efc:	d021      	beq.n	8009f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009efe:	f7fc ffeb 	bl	8006ed8 <HAL_GetTick>
 8009f02:	4602      	mov	r2, r0
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	1ad3      	subs	r3, r2, r3
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d302      	bcc.n	8009f14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009f0e:	68bb      	ldr	r3, [r7, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d116      	bne.n	8009f42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	2200      	movs	r2, #0
 8009f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2220      	movs	r2, #32
 8009f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	f043 0220 	orr.w	r2, r3, #32
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2200      	movs	r2, #0
 8009f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e007      	b.n	8009f52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f4c:	2b80      	cmp	r3, #128	; 0x80
 8009f4e:	d1ca      	bne.n	8009ee6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009f50:	2300      	movs	r3, #0
}
 8009f52:	4618      	mov	r0, r3
 8009f54:	3710      	adds	r7, #16
 8009f56:	46bd      	mov	sp, r7
 8009f58:	bd80      	pop	{r7, pc}

08009f5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009f5a:	b580      	push	{r7, lr}
 8009f5c:	b084      	sub	sp, #16
 8009f5e:	af00      	add	r7, sp, #0
 8009f60:	60f8      	str	r0, [r7, #12]
 8009f62:	60b9      	str	r1, [r7, #8]
 8009f64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009f66:	e02d      	b.n	8009fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 f88d 	bl	800a088 <I2C_IsAcknowledgeFailed>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d001      	beq.n	8009f78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	e02d      	b.n	8009fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f7e:	d021      	beq.n	8009fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f80:	f7fc ffaa 	bl	8006ed8 <HAL_GetTick>
 8009f84:	4602      	mov	r2, r0
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	1ad3      	subs	r3, r2, r3
 8009f8a:	68ba      	ldr	r2, [r7, #8]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d302      	bcc.n	8009f96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d116      	bne.n	8009fc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2200      	movs	r2, #0
 8009f9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2220      	movs	r2, #32
 8009fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb0:	f043 0220 	orr.w	r2, r3, #32
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	2200      	movs	r2, #0
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e007      	b.n	8009fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	695b      	ldr	r3, [r3, #20]
 8009fca:	f003 0304 	and.w	r3, r3, #4
 8009fce:	2b04      	cmp	r3, #4
 8009fd0:	d1ca      	bne.n	8009f68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009fe8:	e042      	b.n	800a070 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	f003 0310 	and.w	r3, r3, #16
 8009ff4:	2b10      	cmp	r3, #16
 8009ff6:	d119      	bne.n	800a02c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	f06f 0210 	mvn.w	r2, #16
 800a000:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2220      	movs	r2, #32
 800a00c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	2200      	movs	r2, #0
 800a024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a028:	2301      	movs	r3, #1
 800a02a:	e029      	b.n	800a080 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a02c:	f7fc ff54 	bl	8006ed8 <HAL_GetTick>
 800a030:	4602      	mov	r2, r0
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	1ad3      	subs	r3, r2, r3
 800a036:	68ba      	ldr	r2, [r7, #8]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d302      	bcc.n	800a042 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d116      	bne.n	800a070 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	2200      	movs	r2, #0
 800a046:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a05c:	f043 0220 	orr.w	r2, r3, #32
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	2200      	movs	r2, #0
 800a068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a06c:	2301      	movs	r3, #1
 800a06e:	e007      	b.n	800a080 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	695b      	ldr	r3, [r3, #20]
 800a076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07a:	2b40      	cmp	r3, #64	; 0x40
 800a07c:	d1b5      	bne.n	8009fea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	695b      	ldr	r3, [r3, #20]
 800a096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a09a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a09e:	d11b      	bne.n	800a0d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a0a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2220      	movs	r2, #32
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c4:	f043 0204 	orr.w	r2, r3, #4
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e000      	b.n	800a0da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	370c      	adds	r7, #12
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
	...

0800a0e8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800a0ee:	4b06      	ldr	r3, [pc, #24]	; (800a108 <HAL_PWR_EnableBkUpAccess+0x20>)
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800a0f4:	4b05      	ldr	r3, [pc, #20]	; (800a10c <HAL_PWR_EnableBkUpAccess+0x24>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800a0fa:	687b      	ldr	r3, [r7, #4]
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr
 800a108:	420e0020 	.word	0x420e0020
 800a10c:	40007000 	.word	0x40007000

0800a110 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 800a11a:	4b0e      	ldr	r3, [pc, #56]	; (800a154 <HAL_PWREx_EnableBkUpReg+0x44>)
 800a11c:	2201      	movs	r2, #1
 800a11e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a120:	f7fc feda 	bl	8006ed8 <HAL_GetTick>
 800a124:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800a126:	e009      	b.n	800a13c <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 800a128:	f7fc fed6 	bl	8006ed8 <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a136:	d901      	bls.n	800a13c <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e006      	b.n	800a14a <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 800a13c:	4b06      	ldr	r3, [pc, #24]	; (800a158 <HAL_PWREx_EnableBkUpReg+0x48>)
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	f003 0308 	and.w	r3, r3, #8
 800a144:	2b08      	cmp	r3, #8
 800a146:	d1ef      	bne.n	800a128 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	420e00a4 	.word	0x420e00a4
 800a158:	40007000 	.word	0x40007000

0800a15c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e267      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d075      	beq.n	800a266 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a17a:	4b88      	ldr	r3, [pc, #544]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a17c:	689b      	ldr	r3, [r3, #8]
 800a17e:	f003 030c 	and.w	r3, r3, #12
 800a182:	2b04      	cmp	r3, #4
 800a184:	d00c      	beq.n	800a1a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a186:	4b85      	ldr	r3, [pc, #532]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a18e:	2b08      	cmp	r3, #8
 800a190:	d112      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a192:	4b82      	ldr	r3, [pc, #520]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a19a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a19e:	d10b      	bne.n	800a1b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1a0:	4b7e      	ldr	r3, [pc, #504]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d05b      	beq.n	800a264 <HAL_RCC_OscConfig+0x108>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d157      	bne.n	800a264 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e242      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1c0:	d106      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x74>
 800a1c2:	4b76      	ldr	r3, [pc, #472]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a75      	ldr	r2, [pc, #468]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1cc:	6013      	str	r3, [r2, #0]
 800a1ce:	e01d      	b.n	800a20c <HAL_RCC_OscConfig+0xb0>
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a1d8:	d10c      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x98>
 800a1da:	4b70      	ldr	r3, [pc, #448]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	4a6f      	ldr	r2, [pc, #444]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1e4:	6013      	str	r3, [r2, #0]
 800a1e6:	4b6d      	ldr	r3, [pc, #436]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a6c      	ldr	r2, [pc, #432]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1f0:	6013      	str	r3, [r2, #0]
 800a1f2:	e00b      	b.n	800a20c <HAL_RCC_OscConfig+0xb0>
 800a1f4:	4b69      	ldr	r3, [pc, #420]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4a68      	ldr	r2, [pc, #416]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a1fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1fe:	6013      	str	r3, [r2, #0]
 800a200:	4b66      	ldr	r3, [pc, #408]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a65      	ldr	r2, [pc, #404]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a20a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d013      	beq.n	800a23c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a214:	f7fc fe60 	bl	8006ed8 <HAL_GetTick>
 800a218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a21a:	e008      	b.n	800a22e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a21c:	f7fc fe5c 	bl	8006ed8 <HAL_GetTick>
 800a220:	4602      	mov	r2, r0
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	1ad3      	subs	r3, r2, r3
 800a226:	2b64      	cmp	r3, #100	; 0x64
 800a228:	d901      	bls.n	800a22e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e207      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a22e:	4b5b      	ldr	r3, [pc, #364]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d0f0      	beq.n	800a21c <HAL_RCC_OscConfig+0xc0>
 800a23a:	e014      	b.n	800a266 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a23c:	f7fc fe4c 	bl	8006ed8 <HAL_GetTick>
 800a240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a242:	e008      	b.n	800a256 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a244:	f7fc fe48 	bl	8006ed8 <HAL_GetTick>
 800a248:	4602      	mov	r2, r0
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	2b64      	cmp	r3, #100	; 0x64
 800a250:	d901      	bls.n	800a256 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e1f3      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a256:	4b51      	ldr	r3, [pc, #324]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1f0      	bne.n	800a244 <HAL_RCC_OscConfig+0xe8>
 800a262:	e000      	b.n	800a266 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0302 	and.w	r3, r3, #2
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d063      	beq.n	800a33a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a272:	4b4a      	ldr	r3, [pc, #296]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f003 030c 	and.w	r3, r3, #12
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00b      	beq.n	800a296 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a27e:	4b47      	ldr	r3, [pc, #284]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a286:	2b08      	cmp	r3, #8
 800a288:	d11c      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a28a:	4b44      	ldr	r3, [pc, #272]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d116      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a296:	4b41      	ldr	r3, [pc, #260]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d005      	beq.n	800a2ae <HAL_RCC_OscConfig+0x152>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d001      	beq.n	800a2ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e1c7      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2ae:	4b3b      	ldr	r3, [pc, #236]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	00db      	lsls	r3, r3, #3
 800a2bc:	4937      	ldr	r1, [pc, #220]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a2be:	4313      	orrs	r3, r2
 800a2c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2c2:	e03a      	b.n	800a33a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	68db      	ldr	r3, [r3, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d020      	beq.n	800a30e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a2cc:	4b34      	ldr	r3, [pc, #208]	; (800a3a0 <HAL_RCC_OscConfig+0x244>)
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d2:	f7fc fe01 	bl	8006ed8 <HAL_GetTick>
 800a2d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2d8:	e008      	b.n	800a2ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a2da:	f7fc fdfd 	bl	8006ed8 <HAL_GetTick>
 800a2de:	4602      	mov	r2, r0
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	2b02      	cmp	r3, #2
 800a2e6:	d901      	bls.n	800a2ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	e1a8      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a2ec:	4b2b      	ldr	r3, [pc, #172]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0302 	and.w	r3, r3, #2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d0f0      	beq.n	800a2da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2f8:	4b28      	ldr	r3, [pc, #160]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	00db      	lsls	r3, r3, #3
 800a306:	4925      	ldr	r1, [pc, #148]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a308:	4313      	orrs	r3, r2
 800a30a:	600b      	str	r3, [r1, #0]
 800a30c:	e015      	b.n	800a33a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a30e:	4b24      	ldr	r3, [pc, #144]	; (800a3a0 <HAL_RCC_OscConfig+0x244>)
 800a310:	2200      	movs	r2, #0
 800a312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a314:	f7fc fde0 	bl	8006ed8 <HAL_GetTick>
 800a318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a31a:	e008      	b.n	800a32e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a31c:	f7fc fddc 	bl	8006ed8 <HAL_GetTick>
 800a320:	4602      	mov	r2, r0
 800a322:	693b      	ldr	r3, [r7, #16]
 800a324:	1ad3      	subs	r3, r2, r3
 800a326:	2b02      	cmp	r3, #2
 800a328:	d901      	bls.n	800a32e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a32a:	2303      	movs	r3, #3
 800a32c:	e187      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a32e:	4b1b      	ldr	r3, [pc, #108]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 0302 	and.w	r3, r3, #2
 800a336:	2b00      	cmp	r3, #0
 800a338:	d1f0      	bne.n	800a31c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f003 0308 	and.w	r3, r3, #8
 800a342:	2b00      	cmp	r3, #0
 800a344:	d036      	beq.n	800a3b4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	695b      	ldr	r3, [r3, #20]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d016      	beq.n	800a37c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a34e:	4b15      	ldr	r3, [pc, #84]	; (800a3a4 <HAL_RCC_OscConfig+0x248>)
 800a350:	2201      	movs	r2, #1
 800a352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a354:	f7fc fdc0 	bl	8006ed8 <HAL_GetTick>
 800a358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a35a:	e008      	b.n	800a36e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a35c:	f7fc fdbc 	bl	8006ed8 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b02      	cmp	r3, #2
 800a368:	d901      	bls.n	800a36e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e167      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a36e:	4b0b      	ldr	r3, [pc, #44]	; (800a39c <HAL_RCC_OscConfig+0x240>)
 800a370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d0f0      	beq.n	800a35c <HAL_RCC_OscConfig+0x200>
 800a37a:	e01b      	b.n	800a3b4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a37c:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <HAL_RCC_OscConfig+0x248>)
 800a37e:	2200      	movs	r2, #0
 800a380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a382:	f7fc fda9 	bl	8006ed8 <HAL_GetTick>
 800a386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a388:	e00e      	b.n	800a3a8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a38a:	f7fc fda5 	bl	8006ed8 <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	2b02      	cmp	r3, #2
 800a396:	d907      	bls.n	800a3a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e150      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
 800a39c:	40023800 	.word	0x40023800
 800a3a0:	42470000 	.word	0x42470000
 800a3a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3a8:	4b88      	ldr	r3, [pc, #544]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a3aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ac:	f003 0302 	and.w	r3, r3, #2
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1ea      	bne.n	800a38a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f003 0304 	and.w	r3, r3, #4
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	f000 8097 	beq.w	800a4f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a3c6:	4b81      	ldr	r3, [pc, #516]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d10f      	bne.n	800a3f2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	60bb      	str	r3, [r7, #8]
 800a3d6:	4b7d      	ldr	r3, [pc, #500]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3da:	4a7c      	ldr	r2, [pc, #496]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a3dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3e0:	6413      	str	r3, [r2, #64]	; 0x40
 800a3e2:	4b7a      	ldr	r3, [pc, #488]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3ea:	60bb      	str	r3, [r7, #8]
 800a3ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a3f2:	4b77      	ldr	r3, [pc, #476]	; (800a5d0 <HAL_RCC_OscConfig+0x474>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d118      	bne.n	800a430 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a3fe:	4b74      	ldr	r3, [pc, #464]	; (800a5d0 <HAL_RCC_OscConfig+0x474>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	4a73      	ldr	r2, [pc, #460]	; (800a5d0 <HAL_RCC_OscConfig+0x474>)
 800a404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a40a:	f7fc fd65 	bl	8006ed8 <HAL_GetTick>
 800a40e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a410:	e008      	b.n	800a424 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a412:	f7fc fd61 	bl	8006ed8 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d901      	bls.n	800a424 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a420:	2303      	movs	r3, #3
 800a422:	e10c      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a424:	4b6a      	ldr	r3, [pc, #424]	; (800a5d0 <HAL_RCC_OscConfig+0x474>)
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d0f0      	beq.n	800a412 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	2b01      	cmp	r3, #1
 800a436:	d106      	bne.n	800a446 <HAL_RCC_OscConfig+0x2ea>
 800a438:	4b64      	ldr	r3, [pc, #400]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a43a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a43c:	4a63      	ldr	r2, [pc, #396]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a43e:	f043 0301 	orr.w	r3, r3, #1
 800a442:	6713      	str	r3, [r2, #112]	; 0x70
 800a444:	e01c      	b.n	800a480 <HAL_RCC_OscConfig+0x324>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	2b05      	cmp	r3, #5
 800a44c:	d10c      	bne.n	800a468 <HAL_RCC_OscConfig+0x30c>
 800a44e:	4b5f      	ldr	r3, [pc, #380]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a452:	4a5e      	ldr	r2, [pc, #376]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a454:	f043 0304 	orr.w	r3, r3, #4
 800a458:	6713      	str	r3, [r2, #112]	; 0x70
 800a45a:	4b5c      	ldr	r3, [pc, #368]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a45e:	4a5b      	ldr	r2, [pc, #364]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a460:	f043 0301 	orr.w	r3, r3, #1
 800a464:	6713      	str	r3, [r2, #112]	; 0x70
 800a466:	e00b      	b.n	800a480 <HAL_RCC_OscConfig+0x324>
 800a468:	4b58      	ldr	r3, [pc, #352]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a46a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a46c:	4a57      	ldr	r2, [pc, #348]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a46e:	f023 0301 	bic.w	r3, r3, #1
 800a472:	6713      	str	r3, [r2, #112]	; 0x70
 800a474:	4b55      	ldr	r3, [pc, #340]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a478:	4a54      	ldr	r2, [pc, #336]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a47a:	f023 0304 	bic.w	r3, r3, #4
 800a47e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	689b      	ldr	r3, [r3, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d015      	beq.n	800a4b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a488:	f7fc fd26 	bl	8006ed8 <HAL_GetTick>
 800a48c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a48e:	e00a      	b.n	800a4a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a490:	f7fc fd22 	bl	8006ed8 <HAL_GetTick>
 800a494:	4602      	mov	r2, r0
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	1ad3      	subs	r3, r2, r3
 800a49a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d901      	bls.n	800a4a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e0cb      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4a6:	4b49      	ldr	r3, [pc, #292]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a4a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4aa:	f003 0302 	and.w	r3, r3, #2
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0ee      	beq.n	800a490 <HAL_RCC_OscConfig+0x334>
 800a4b2:	e014      	b.n	800a4de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a4b4:	f7fc fd10 	bl	8006ed8 <HAL_GetTick>
 800a4b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4ba:	e00a      	b.n	800a4d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4bc:	f7fc fd0c 	bl	8006ed8 <HAL_GetTick>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	1ad3      	subs	r3, r2, r3
 800a4c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d901      	bls.n	800a4d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e0b5      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a4d2:	4b3e      	ldr	r3, [pc, #248]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d6:	f003 0302 	and.w	r3, r3, #2
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1ee      	bne.n	800a4bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a4de:	7dfb      	ldrb	r3, [r7, #23]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d105      	bne.n	800a4f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4e4:	4b39      	ldr	r3, [pc, #228]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a4e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4e8:	4a38      	ldr	r2, [pc, #224]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a4ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	699b      	ldr	r3, [r3, #24]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	f000 80a1 	beq.w	800a63c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a4fa:	4b34      	ldr	r3, [pc, #208]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	f003 030c 	and.w	r3, r3, #12
 800a502:	2b08      	cmp	r3, #8
 800a504:	d05c      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	699b      	ldr	r3, [r3, #24]
 800a50a:	2b02      	cmp	r3, #2
 800a50c:	d141      	bne.n	800a592 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a50e:	4b31      	ldr	r3, [pc, #196]	; (800a5d4 <HAL_RCC_OscConfig+0x478>)
 800a510:	2200      	movs	r2, #0
 800a512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a514:	f7fc fce0 	bl	8006ed8 <HAL_GetTick>
 800a518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a51a:	e008      	b.n	800a52e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a51c:	f7fc fcdc 	bl	8006ed8 <HAL_GetTick>
 800a520:	4602      	mov	r2, r0
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b02      	cmp	r3, #2
 800a528:	d901      	bls.n	800a52e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a52a:	2303      	movs	r3, #3
 800a52c:	e087      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a52e:	4b27      	ldr	r3, [pc, #156]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1f0      	bne.n	800a51c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	69da      	ldr	r2, [r3, #28]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a1b      	ldr	r3, [r3, #32]
 800a542:	431a      	orrs	r2, r3
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a548:	019b      	lsls	r3, r3, #6
 800a54a:	431a      	orrs	r2, r3
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	085b      	lsrs	r3, r3, #1
 800a552:	3b01      	subs	r3, #1
 800a554:	041b      	lsls	r3, r3, #16
 800a556:	431a      	orrs	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a55c:	061b      	lsls	r3, r3, #24
 800a55e:	491b      	ldr	r1, [pc, #108]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a560:	4313      	orrs	r3, r2
 800a562:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a564:	4b1b      	ldr	r3, [pc, #108]	; (800a5d4 <HAL_RCC_OscConfig+0x478>)
 800a566:	2201      	movs	r2, #1
 800a568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a56a:	f7fc fcb5 	bl	8006ed8 <HAL_GetTick>
 800a56e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a570:	e008      	b.n	800a584 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a572:	f7fc fcb1 	bl	8006ed8 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d901      	bls.n	800a584 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a580:	2303      	movs	r3, #3
 800a582:	e05c      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a584:	4b11      	ldr	r3, [pc, #68]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d0f0      	beq.n	800a572 <HAL_RCC_OscConfig+0x416>
 800a590:	e054      	b.n	800a63c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a592:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <HAL_RCC_OscConfig+0x478>)
 800a594:	2200      	movs	r2, #0
 800a596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a598:	f7fc fc9e 	bl	8006ed8 <HAL_GetTick>
 800a59c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a59e:	e008      	b.n	800a5b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5a0:	f7fc fc9a 	bl	8006ed8 <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	2b02      	cmp	r3, #2
 800a5ac:	d901      	bls.n	800a5b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	e045      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a5b2:	4b06      	ldr	r3, [pc, #24]	; (800a5cc <HAL_RCC_OscConfig+0x470>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d1f0      	bne.n	800a5a0 <HAL_RCC_OscConfig+0x444>
 800a5be:	e03d      	b.n	800a63c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	2b01      	cmp	r3, #1
 800a5c6:	d107      	bne.n	800a5d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e038      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
 800a5cc:	40023800 	.word	0x40023800
 800a5d0:	40007000 	.word	0x40007000
 800a5d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a5d8:	4b1b      	ldr	r3, [pc, #108]	; (800a648 <HAL_RCC_OscConfig+0x4ec>)
 800a5da:	685b      	ldr	r3, [r3, #4]
 800a5dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	699b      	ldr	r3, [r3, #24]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d028      	beq.n	800a638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d121      	bne.n	800a638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d11a      	bne.n	800a638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a602:	68fa      	ldr	r2, [r7, #12]
 800a604:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a608:	4013      	ands	r3, r2
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a60e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a610:	4293      	cmp	r3, r2
 800a612:	d111      	bne.n	800a638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61e:	085b      	lsrs	r3, r3, #1
 800a620:	3b01      	subs	r3, #1
 800a622:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a624:	429a      	cmp	r2, r3
 800a626:	d107      	bne.n	800a638 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a632:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a634:	429a      	cmp	r2, r3
 800a636:	d001      	beq.n	800a63c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a638:	2301      	movs	r3, #1
 800a63a:	e000      	b.n	800a63e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3718      	adds	r7, #24
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	40023800 	.word	0x40023800

0800a64c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b084      	sub	sp, #16
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
 800a654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d101      	bne.n	800a660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e0cc      	b.n	800a7fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a660:	4b68      	ldr	r3, [pc, #416]	; (800a804 <HAL_RCC_ClockConfig+0x1b8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 0307 	and.w	r3, r3, #7
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d90c      	bls.n	800a688 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a66e:	4b65      	ldr	r3, [pc, #404]	; (800a804 <HAL_RCC_ClockConfig+0x1b8>)
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	b2d2      	uxtb	r2, r2
 800a674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a676:	4b63      	ldr	r3, [pc, #396]	; (800a804 <HAL_RCC_ClockConfig+0x1b8>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	f003 0307 	and.w	r3, r3, #7
 800a67e:	683a      	ldr	r2, [r7, #0]
 800a680:	429a      	cmp	r2, r3
 800a682:	d001      	beq.n	800a688 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	e0b8      	b.n	800a7fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0302 	and.w	r3, r3, #2
 800a690:	2b00      	cmp	r3, #0
 800a692:	d020      	beq.n	800a6d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d005      	beq.n	800a6ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a6a0:	4b59      	ldr	r3, [pc, #356]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a6a2:	689b      	ldr	r3, [r3, #8]
 800a6a4:	4a58      	ldr	r2, [pc, #352]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a6a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a6aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0308 	and.w	r3, r3, #8
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d005      	beq.n	800a6c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a6b8:	4b53      	ldr	r3, [pc, #332]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	4a52      	ldr	r2, [pc, #328]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a6be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a6c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6c4:	4b50      	ldr	r3, [pc, #320]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	494d      	ldr	r1, [pc, #308]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a6d2:	4313      	orrs	r3, r2
 800a6d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f003 0301 	and.w	r3, r3, #1
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d044      	beq.n	800a76c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d107      	bne.n	800a6fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a6ea:	4b47      	ldr	r3, [pc, #284]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d119      	bne.n	800a72a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e07f      	b.n	800a7fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d003      	beq.n	800a70a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a706:	2b03      	cmp	r3, #3
 800a708:	d107      	bne.n	800a71a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a70a:	4b3f      	ldr	r3, [pc, #252]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a712:	2b00      	cmp	r3, #0
 800a714:	d109      	bne.n	800a72a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a716:	2301      	movs	r3, #1
 800a718:	e06f      	b.n	800a7fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a71a:	4b3b      	ldr	r3, [pc, #236]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 0302 	and.w	r3, r3, #2
 800a722:	2b00      	cmp	r3, #0
 800a724:	d101      	bne.n	800a72a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a726:	2301      	movs	r3, #1
 800a728:	e067      	b.n	800a7fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a72a:	4b37      	ldr	r3, [pc, #220]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a72c:	689b      	ldr	r3, [r3, #8]
 800a72e:	f023 0203 	bic.w	r2, r3, #3
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	4934      	ldr	r1, [pc, #208]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a738:	4313      	orrs	r3, r2
 800a73a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a73c:	f7fc fbcc 	bl	8006ed8 <HAL_GetTick>
 800a740:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a742:	e00a      	b.n	800a75a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a744:	f7fc fbc8 	bl	8006ed8 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a752:	4293      	cmp	r3, r2
 800a754:	d901      	bls.n	800a75a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a756:	2303      	movs	r3, #3
 800a758:	e04f      	b.n	800a7fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a75a:	4b2b      	ldr	r3, [pc, #172]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a75c:	689b      	ldr	r3, [r3, #8]
 800a75e:	f003 020c 	and.w	r2, r3, #12
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	009b      	lsls	r3, r3, #2
 800a768:	429a      	cmp	r2, r3
 800a76a:	d1eb      	bne.n	800a744 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a76c:	4b25      	ldr	r3, [pc, #148]	; (800a804 <HAL_RCC_ClockConfig+0x1b8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	f003 0307 	and.w	r3, r3, #7
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d20c      	bcs.n	800a794 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a77a:	4b22      	ldr	r3, [pc, #136]	; (800a804 <HAL_RCC_ClockConfig+0x1b8>)
 800a77c:	683a      	ldr	r2, [r7, #0]
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a782:	4b20      	ldr	r3, [pc, #128]	; (800a804 <HAL_RCC_ClockConfig+0x1b8>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	683a      	ldr	r2, [r7, #0]
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d001      	beq.n	800a794 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	e032      	b.n	800a7fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0304 	and.w	r3, r3, #4
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d008      	beq.n	800a7b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a7a0:	4b19      	ldr	r3, [pc, #100]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	4916      	ldr	r1, [pc, #88]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ae:	4313      	orrs	r3, r2
 800a7b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 0308 	and.w	r3, r3, #8
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d009      	beq.n	800a7d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a7be:	4b12      	ldr	r3, [pc, #72]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a7c0:	689b      	ldr	r3, [r3, #8]
 800a7c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	691b      	ldr	r3, [r3, #16]
 800a7ca:	00db      	lsls	r3, r3, #3
 800a7cc:	490e      	ldr	r1, [pc, #56]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a7ce:	4313      	orrs	r3, r2
 800a7d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a7d2:	f000 f821 	bl	800a818 <HAL_RCC_GetSysClockFreq>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <HAL_RCC_ClockConfig+0x1bc>)
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	091b      	lsrs	r3, r3, #4
 800a7de:	f003 030f 	and.w	r3, r3, #15
 800a7e2:	490a      	ldr	r1, [pc, #40]	; (800a80c <HAL_RCC_ClockConfig+0x1c0>)
 800a7e4:	5ccb      	ldrb	r3, [r1, r3]
 800a7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800a7ea:	4a09      	ldr	r2, [pc, #36]	; (800a810 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a7ee:	4b09      	ldr	r3, [pc, #36]	; (800a814 <HAL_RCC_ClockConfig+0x1c8>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fc fb2c 	bl	8006e50 <HAL_InitTick>

  return HAL_OK;
 800a7f8:	2300      	movs	r3, #0
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}
 800a802:	bf00      	nop
 800a804:	40023c00 	.word	0x40023c00
 800a808:	40023800 	.word	0x40023800
 800a80c:	08017a28 	.word	0x08017a28
 800a810:	20000044 	.word	0x20000044
 800a814:	20000050 	.word	0x20000050

0800a818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a81c:	b094      	sub	sp, #80	; 0x50
 800a81e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	647b      	str	r3, [r7, #68]	; 0x44
 800a824:	2300      	movs	r3, #0
 800a826:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a828:	2300      	movs	r3, #0
 800a82a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a830:	4b79      	ldr	r3, [pc, #484]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x200>)
 800a832:	689b      	ldr	r3, [r3, #8]
 800a834:	f003 030c 	and.w	r3, r3, #12
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d00d      	beq.n	800a858 <HAL_RCC_GetSysClockFreq+0x40>
 800a83c:	2b08      	cmp	r3, #8
 800a83e:	f200 80e1 	bhi.w	800aa04 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <HAL_RCC_GetSysClockFreq+0x34>
 800a846:	2b04      	cmp	r3, #4
 800a848:	d003      	beq.n	800a852 <HAL_RCC_GetSysClockFreq+0x3a>
 800a84a:	e0db      	b.n	800aa04 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a84c:	4b73      	ldr	r3, [pc, #460]	; (800aa1c <HAL_RCC_GetSysClockFreq+0x204>)
 800a84e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a850:	e0db      	b.n	800aa0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a852:	4b73      	ldr	r3, [pc, #460]	; (800aa20 <HAL_RCC_GetSysClockFreq+0x208>)
 800a854:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a856:	e0d8      	b.n	800aa0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a858:	4b6f      	ldr	r3, [pc, #444]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x200>)
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a860:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a862:	4b6d      	ldr	r3, [pc, #436]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x200>)
 800a864:	685b      	ldr	r3, [r3, #4]
 800a866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d063      	beq.n	800a936 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a86e:	4b6a      	ldr	r3, [pc, #424]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x200>)
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	099b      	lsrs	r3, r3, #6
 800a874:	2200      	movs	r2, #0
 800a876:	63bb      	str	r3, [r7, #56]	; 0x38
 800a878:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a880:	633b      	str	r3, [r7, #48]	; 0x30
 800a882:	2300      	movs	r3, #0
 800a884:	637b      	str	r3, [r7, #52]	; 0x34
 800a886:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a88a:	4622      	mov	r2, r4
 800a88c:	462b      	mov	r3, r5
 800a88e:	f04f 0000 	mov.w	r0, #0
 800a892:	f04f 0100 	mov.w	r1, #0
 800a896:	0159      	lsls	r1, r3, #5
 800a898:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a89c:	0150      	lsls	r0, r2, #5
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4621      	mov	r1, r4
 800a8a4:	1a51      	subs	r1, r2, r1
 800a8a6:	6139      	str	r1, [r7, #16]
 800a8a8:	4629      	mov	r1, r5
 800a8aa:	eb63 0301 	sbc.w	r3, r3, r1
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	f04f 0200 	mov.w	r2, #0
 800a8b4:	f04f 0300 	mov.w	r3, #0
 800a8b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a8bc:	4659      	mov	r1, fp
 800a8be:	018b      	lsls	r3, r1, #6
 800a8c0:	4651      	mov	r1, sl
 800a8c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a8c6:	4651      	mov	r1, sl
 800a8c8:	018a      	lsls	r2, r1, #6
 800a8ca:	4651      	mov	r1, sl
 800a8cc:	ebb2 0801 	subs.w	r8, r2, r1
 800a8d0:	4659      	mov	r1, fp
 800a8d2:	eb63 0901 	sbc.w	r9, r3, r1
 800a8d6:	f04f 0200 	mov.w	r2, #0
 800a8da:	f04f 0300 	mov.w	r3, #0
 800a8de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a8e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a8e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a8ea:	4690      	mov	r8, r2
 800a8ec:	4699      	mov	r9, r3
 800a8ee:	4623      	mov	r3, r4
 800a8f0:	eb18 0303 	adds.w	r3, r8, r3
 800a8f4:	60bb      	str	r3, [r7, #8]
 800a8f6:	462b      	mov	r3, r5
 800a8f8:	eb49 0303 	adc.w	r3, r9, r3
 800a8fc:	60fb      	str	r3, [r7, #12]
 800a8fe:	f04f 0200 	mov.w	r2, #0
 800a902:	f04f 0300 	mov.w	r3, #0
 800a906:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a90a:	4629      	mov	r1, r5
 800a90c:	024b      	lsls	r3, r1, #9
 800a90e:	4621      	mov	r1, r4
 800a910:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a914:	4621      	mov	r1, r4
 800a916:	024a      	lsls	r2, r1, #9
 800a918:	4610      	mov	r0, r2
 800a91a:	4619      	mov	r1, r3
 800a91c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a91e:	2200      	movs	r2, #0
 800a920:	62bb      	str	r3, [r7, #40]	; 0x28
 800a922:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a924:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a928:	f7f6 f9fe 	bl	8000d28 <__aeabi_uldivmod>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4613      	mov	r3, r2
 800a932:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a934:	e058      	b.n	800a9e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a936:	4b38      	ldr	r3, [pc, #224]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x200>)
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	099b      	lsrs	r3, r3, #6
 800a93c:	2200      	movs	r2, #0
 800a93e:	4618      	mov	r0, r3
 800a940:	4611      	mov	r1, r2
 800a942:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a946:	623b      	str	r3, [r7, #32]
 800a948:	2300      	movs	r3, #0
 800a94a:	627b      	str	r3, [r7, #36]	; 0x24
 800a94c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a950:	4642      	mov	r2, r8
 800a952:	464b      	mov	r3, r9
 800a954:	f04f 0000 	mov.w	r0, #0
 800a958:	f04f 0100 	mov.w	r1, #0
 800a95c:	0159      	lsls	r1, r3, #5
 800a95e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a962:	0150      	lsls	r0, r2, #5
 800a964:	4602      	mov	r2, r0
 800a966:	460b      	mov	r3, r1
 800a968:	4641      	mov	r1, r8
 800a96a:	ebb2 0a01 	subs.w	sl, r2, r1
 800a96e:	4649      	mov	r1, r9
 800a970:	eb63 0b01 	sbc.w	fp, r3, r1
 800a974:	f04f 0200 	mov.w	r2, #0
 800a978:	f04f 0300 	mov.w	r3, #0
 800a97c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a980:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a984:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a988:	ebb2 040a 	subs.w	r4, r2, sl
 800a98c:	eb63 050b 	sbc.w	r5, r3, fp
 800a990:	f04f 0200 	mov.w	r2, #0
 800a994:	f04f 0300 	mov.w	r3, #0
 800a998:	00eb      	lsls	r3, r5, #3
 800a99a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a99e:	00e2      	lsls	r2, r4, #3
 800a9a0:	4614      	mov	r4, r2
 800a9a2:	461d      	mov	r5, r3
 800a9a4:	4643      	mov	r3, r8
 800a9a6:	18e3      	adds	r3, r4, r3
 800a9a8:	603b      	str	r3, [r7, #0]
 800a9aa:	464b      	mov	r3, r9
 800a9ac:	eb45 0303 	adc.w	r3, r5, r3
 800a9b0:	607b      	str	r3, [r7, #4]
 800a9b2:	f04f 0200 	mov.w	r2, #0
 800a9b6:	f04f 0300 	mov.w	r3, #0
 800a9ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a9be:	4629      	mov	r1, r5
 800a9c0:	028b      	lsls	r3, r1, #10
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	028a      	lsls	r2, r1, #10
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4619      	mov	r1, r3
 800a9d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	61bb      	str	r3, [r7, #24]
 800a9d6:	61fa      	str	r2, [r7, #28]
 800a9d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a9dc:	f7f6 f9a4 	bl	8000d28 <__aeabi_uldivmod>
 800a9e0:	4602      	mov	r2, r0
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a9e8:	4b0b      	ldr	r3, [pc, #44]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x200>)
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	0c1b      	lsrs	r3, r3, #16
 800a9ee:	f003 0303 	and.w	r3, r3, #3
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a9f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a9fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa00:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aa02:	e002      	b.n	800aa0a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <HAL_RCC_GetSysClockFreq+0x204>)
 800aa06:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800aa08:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3750      	adds	r7, #80	; 0x50
 800aa10:	46bd      	mov	sp, r7
 800aa12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aa16:	bf00      	nop
 800aa18:	40023800 	.word	0x40023800
 800aa1c:	00f42400 	.word	0x00f42400
 800aa20:	007a1200 	.word	0x007a1200

0800aa24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa24:	b480      	push	{r7}
 800aa26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa28:	4b03      	ldr	r3, [pc, #12]	; (800aa38 <HAL_RCC_GetHCLKFreq+0x14>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr
 800aa36:	bf00      	nop
 800aa38:	20000044 	.word	0x20000044

0800aa3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aa40:	f7ff fff0 	bl	800aa24 <HAL_RCC_GetHCLKFreq>
 800aa44:	4602      	mov	r2, r0
 800aa46:	4b05      	ldr	r3, [pc, #20]	; (800aa5c <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa48:	689b      	ldr	r3, [r3, #8]
 800aa4a:	0a9b      	lsrs	r3, r3, #10
 800aa4c:	f003 0307 	and.w	r3, r3, #7
 800aa50:	4903      	ldr	r1, [pc, #12]	; (800aa60 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa52:	5ccb      	ldrb	r3, [r1, r3]
 800aa54:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	bd80      	pop	{r7, pc}
 800aa5c:	40023800 	.word	0x40023800
 800aa60:	08017a38 	.word	0x08017a38

0800aa64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800aa68:	f7ff ffdc 	bl	800aa24 <HAL_RCC_GetHCLKFreq>
 800aa6c:	4602      	mov	r2, r0
 800aa6e:	4b05      	ldr	r3, [pc, #20]	; (800aa84 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa70:	689b      	ldr	r3, [r3, #8]
 800aa72:	0b5b      	lsrs	r3, r3, #13
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	4903      	ldr	r1, [pc, #12]	; (800aa88 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa7a:	5ccb      	ldrb	r3, [r1, r3]
 800aa7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	40023800 	.word	0x40023800
 800aa88:	08017a38 	.word	0x08017a38

0800aa8c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b086      	sub	sp, #24
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800aa94:	2300      	movs	r3, #0
 800aa96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	f003 0301 	and.w	r3, r3, #1
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d105      	bne.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d035      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800aab4:	4b62      	ldr	r3, [pc, #392]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800aab6:	2200      	movs	r2, #0
 800aab8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aaba:	f7fc fa0d 	bl	8006ed8 <HAL_GetTick>
 800aabe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aac0:	e008      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800aac2:	f7fc fa09 	bl	8006ed8 <HAL_GetTick>
 800aac6:	4602      	mov	r2, r0
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	1ad3      	subs	r3, r2, r3
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d901      	bls.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800aad0:	2303      	movs	r3, #3
 800aad2:	e0b0      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800aad4:	4b5b      	ldr	r3, [pc, #364]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d1f0      	bne.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	019a      	lsls	r2, r3, #6
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	689b      	ldr	r3, [r3, #8]
 800aaea:	071b      	lsls	r3, r3, #28
 800aaec:	4955      	ldr	r1, [pc, #340]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800aaf4:	4b52      	ldr	r3, [pc, #328]	; (800ac40 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800aafa:	f7fc f9ed 	bl	8006ed8 <HAL_GetTick>
 800aafe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab00:	e008      	b.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ab02:	f7fc f9e9 	bl	8006ed8 <HAL_GetTick>
 800ab06:	4602      	mov	r2, r0
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	1ad3      	subs	r3, r2, r3
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d901      	bls.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ab10:	2303      	movs	r3, #3
 800ab12:	e090      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ab14:	4b4b      	ldr	r3, [pc, #300]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0f0      	beq.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 8083 	beq.w	800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800ab2e:	2300      	movs	r3, #0
 800ab30:	60fb      	str	r3, [r7, #12]
 800ab32:	4b44      	ldr	r3, [pc, #272]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab36:	4a43      	ldr	r2, [pc, #268]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab3c:	6413      	str	r3, [r2, #64]	; 0x40
 800ab3e:	4b41      	ldr	r3, [pc, #260]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ab46:	60fb      	str	r3, [r7, #12]
 800ab48:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800ab4a:	4b3f      	ldr	r3, [pc, #252]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a3e      	ldr	r2, [pc, #248]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ab50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab54:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ab56:	f7fc f9bf 	bl	8006ed8 <HAL_GetTick>
 800ab5a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800ab5e:	f7fc f9bb 	bl	8006ed8 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b02      	cmp	r3, #2
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e062      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800ab70:	4b35      	ldr	r3, [pc, #212]	; (800ac48 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0f0      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ab7c:	4b31      	ldr	r3, [pc, #196]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab84:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d02f      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x160>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab94:	693a      	ldr	r2, [r7, #16]
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d028      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ab9a:	4b2a      	ldr	r3, [pc, #168]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ab9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aba2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aba4:	4b29      	ldr	r3, [pc, #164]	; (800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800aba6:	2201      	movs	r2, #1
 800aba8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800abaa:	4b28      	ldr	r3, [pc, #160]	; (800ac4c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800abac:	2200      	movs	r2, #0
 800abae:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800abb0:	4a24      	ldr	r2, [pc, #144]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800abb6:	4b23      	ldr	r3, [pc, #140]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abba:	f003 0301 	and.w	r3, r3, #1
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d114      	bne.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800abc2:	f7fc f989 	bl	8006ed8 <HAL_GetTick>
 800abc6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abc8:	e00a      	b.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800abca:	f7fc f985 	bl	8006ed8 <HAL_GetTick>
 800abce:	4602      	mov	r2, r0
 800abd0:	697b      	ldr	r3, [r7, #20]
 800abd2:	1ad3      	subs	r3, r2, r3
 800abd4:	f241 3288 	movw	r2, #5000	; 0x1388
 800abd8:	4293      	cmp	r3, r2
 800abda:	d901      	bls.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800abdc:	2303      	movs	r3, #3
 800abde:	e02a      	b.n	800ac36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800abe0:	4b18      	ldr	r3, [pc, #96]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abe4:	f003 0302 	and.w	r3, r3, #2
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d0ee      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	68db      	ldr	r3, [r3, #12]
 800abf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abf8:	d10d      	bne.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800abfa:	4b12      	ldr	r3, [pc, #72]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800abfc:	689b      	ldr	r3, [r3, #8]
 800abfe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68db      	ldr	r3, [r3, #12]
 800ac06:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ac0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0e:	490d      	ldr	r1, [pc, #52]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ac10:	4313      	orrs	r3, r2
 800ac12:	608b      	str	r3, [r1, #8]
 800ac14:	e005      	b.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800ac16:	4b0b      	ldr	r3, [pc, #44]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	4a0a      	ldr	r2, [pc, #40]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ac1c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ac20:	6093      	str	r3, [r2, #8]
 800ac22:	4b08      	ldr	r3, [pc, #32]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ac24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	68db      	ldr	r3, [r3, #12]
 800ac2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ac2e:	4905      	ldr	r1, [pc, #20]	; (800ac44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800ac30:	4313      	orrs	r3, r2
 800ac32:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800ac34:	2300      	movs	r3, #0
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3718      	adds	r7, #24
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
 800ac3e:	bf00      	nop
 800ac40:	42470068 	.word	0x42470068
 800ac44:	40023800 	.word	0x40023800
 800ac48:	40007000 	.word	0x40007000
 800ac4c:	42470e40 	.word	0x42470e40

0800ac50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b084      	sub	sp, #16
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ac58:	2301      	movs	r3, #1
 800ac5a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d101      	bne.n	800ac66 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	e066      	b.n	800ad34 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	7f5b      	ldrb	r3, [r3, #29]
 800ac6a:	b2db      	uxtb	r3, r3
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d105      	bne.n	800ac7c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f7fa f96e 	bl	8004f58 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2202      	movs	r2, #2
 800ac80:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	22ca      	movs	r2, #202	; 0xca
 800ac88:	625a      	str	r2, [r3, #36]	; 0x24
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2253      	movs	r2, #83	; 0x53
 800ac90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f000 fa45 	bl	800b122 <RTC_EnterInitMode>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800ac9c:	7bfb      	ldrb	r3, [r7, #15]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d12c      	bne.n	800acfc <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	689b      	ldr	r3, [r3, #8]
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	6812      	ldr	r2, [r2, #0]
 800acac:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800acb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800acb4:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6899      	ldr	r1, [r3, #8]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	685a      	ldr	r2, [r3, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	691b      	ldr	r3, [r3, #16]
 800acc4:	431a      	orrs	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	695b      	ldr	r3, [r3, #20]
 800acca:	431a      	orrs	r2, r3
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	430a      	orrs	r2, r1
 800acd2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	687a      	ldr	r2, [r7, #4]
 800acda:	68d2      	ldr	r2, [r2, #12]
 800acdc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	6919      	ldr	r1, [r3, #16]
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	041a      	lsls	r2, r3, #16
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	430a      	orrs	r2, r1
 800acf0:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fa4c 	bl	800b190 <RTC_ExitInitMode>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d113      	bne.n	800ad2a <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ad10:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	699a      	ldr	r2, [r3, #24]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	430a      	orrs	r2, r1
 800ad22:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2201      	movs	r2, #1
 800ad28:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	22ff      	movs	r2, #255	; 0xff
 800ad30:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800ad32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3710      	adds	r7, #16
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ad3c:	b590      	push	{r4, r7, lr}
 800ad3e:	b087      	sub	sp, #28
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	7f1b      	ldrb	r3, [r3, #28]
 800ad50:	2b01      	cmp	r3, #1
 800ad52:	d101      	bne.n	800ad58 <HAL_RTC_SetTime+0x1c>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e087      	b.n	800ae68 <HAL_RTC_SetTime+0x12c>
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	2202      	movs	r2, #2
 800ad62:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d126      	bne.n	800adb8 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d102      	bne.n	800ad7e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800ad78:	68bb      	ldr	r3, [r7, #8]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 fa29 	bl	800b1da <RTC_ByteToBcd2>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	785b      	ldrb	r3, [r3, #1]
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 fa22 	bl	800b1da <RTC_ByteToBcd2>
 800ad96:	4603      	mov	r3, r0
 800ad98:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ad9a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800ad9c:	68bb      	ldr	r3, [r7, #8]
 800ad9e:	789b      	ldrb	r3, [r3, #2]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fa1a 	bl	800b1da <RTC_ByteToBcd2>
 800ada6:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ada8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	78db      	ldrb	r3, [r3, #3]
 800adb0:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800adb2:	4313      	orrs	r3, r2
 800adb4:	617b      	str	r3, [r7, #20]
 800adb6:	e018      	b.n	800adea <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	689b      	ldr	r3, [r3, #8]
 800adbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d102      	bne.n	800adcc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2200      	movs	r2, #0
 800adca:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	785b      	ldrb	r3, [r3, #1]
 800add6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800add8:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800adde:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ade0:	68bb      	ldr	r3, [r7, #8]
 800ade2:	78db      	ldrb	r3, [r3, #3]
 800ade4:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ade6:	4313      	orrs	r3, r2
 800ade8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	22ca      	movs	r2, #202	; 0xca
 800adf0:	625a      	str	r2, [r3, #36]	; 0x24
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	2253      	movs	r2, #83	; 0x53
 800adf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f000 f991 	bl	800b122 <RTC_EnterInitMode>
 800ae00:	4603      	mov	r3, r0
 800ae02:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ae04:	7cfb      	ldrb	r3, [r7, #19]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d120      	bne.n	800ae4c <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ae14:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ae18:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	689a      	ldr	r2, [r3, #8]
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ae28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6899      	ldr	r1, [r3, #8]
 800ae30:	68bb      	ldr	r3, [r7, #8]
 800ae32:	68da      	ldr	r2, [r3, #12]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	431a      	orrs	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	430a      	orrs	r2, r1
 800ae40:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f000 f9a4 	bl	800b190 <RTC_ExitInitMode>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ae4c:	7cfb      	ldrb	r3, [r7, #19]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d102      	bne.n	800ae58 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	2201      	movs	r2, #1
 800ae56:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	22ff      	movs	r2, #255	; 0xff
 800ae5e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	2200      	movs	r2, #0
 800ae64:	771a      	strb	r2, [r3, #28]

  return status;
 800ae66:	7cfb      	ldrb	r3, [r7, #19]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	371c      	adds	r7, #28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd90      	pop	{r4, r7, pc}

0800ae70 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b086      	sub	sp, #24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	60f8      	str	r0, [r7, #12]
 800ae78:	60b9      	str	r1, [r7, #8]
 800ae7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800aea2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800aea6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	0c1b      	lsrs	r3, r3, #16
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aeb2:	b2da      	uxtb	r2, r3
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	0a1b      	lsrs	r3, r3, #8
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	0d9b      	lsrs	r3, r3, #22
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	b2da      	uxtb	r2, r3
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d11a      	bne.n	800af22 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f000 f98f 	bl	800b214 <RTC_Bcd2ToByte>
 800aef6:	4603      	mov	r3, r0
 800aef8:	461a      	mov	r2, r3
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800aefe:	68bb      	ldr	r3, [r7, #8]
 800af00:	785b      	ldrb	r3, [r3, #1]
 800af02:	4618      	mov	r0, r3
 800af04:	f000 f986 	bl	800b214 <RTC_Bcd2ToByte>
 800af08:	4603      	mov	r3, r0
 800af0a:	461a      	mov	r2, r3
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	789b      	ldrb	r3, [r3, #2]
 800af14:	4618      	mov	r0, r3
 800af16:	f000 f97d 	bl	800b214 <RTC_Bcd2ToByte>
 800af1a:	4603      	mov	r3, r0
 800af1c:	461a      	mov	r2, r3
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800af22:	2300      	movs	r3, #0
}
 800af24:	4618      	mov	r0, r3
 800af26:	3718      	adds	r7, #24
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}

0800af2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800af2c:	b590      	push	{r4, r7, lr}
 800af2e:	b087      	sub	sp, #28
 800af30:	af00      	add	r7, sp, #0
 800af32:	60f8      	str	r0, [r7, #12]
 800af34:	60b9      	str	r1, [r7, #8]
 800af36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800af38:	2300      	movs	r3, #0
 800af3a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	7f1b      	ldrb	r3, [r3, #28]
 800af40:	2b01      	cmp	r3, #1
 800af42:	d101      	bne.n	800af48 <HAL_RTC_SetDate+0x1c>
 800af44:	2302      	movs	r3, #2
 800af46:	e071      	b.n	800b02c <HAL_RTC_SetDate+0x100>
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	2201      	movs	r2, #1
 800af4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2202      	movs	r2, #2
 800af52:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d10e      	bne.n	800af78 <HAL_RTC_SetDate+0x4c>
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	785b      	ldrb	r3, [r3, #1]
 800af5e:	f003 0310 	and.w	r3, r3, #16
 800af62:	2b00      	cmp	r3, #0
 800af64:	d008      	beq.n	800af78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	785b      	ldrb	r3, [r3, #1]
 800af6a:	f023 0310 	bic.w	r3, r3, #16
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	330a      	adds	r3, #10
 800af72:	b2da      	uxtb	r2, r3
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d11c      	bne.n	800afb8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	78db      	ldrb	r3, [r3, #3]
 800af82:	4618      	mov	r0, r3
 800af84:	f000 f929 	bl	800b1da <RTC_ByteToBcd2>
 800af88:	4603      	mov	r3, r0
 800af8a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	785b      	ldrb	r3, [r3, #1]
 800af90:	4618      	mov	r0, r3
 800af92:	f000 f922 	bl	800b1da <RTC_ByteToBcd2>
 800af96:	4603      	mov	r3, r0
 800af98:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800af9a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	789b      	ldrb	r3, [r3, #2]
 800afa0:	4618      	mov	r0, r3
 800afa2:	f000 f91a 	bl	800b1da <RTC_ByteToBcd2>
 800afa6:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800afa8:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800afb2:	4313      	orrs	r3, r2
 800afb4:	617b      	str	r3, [r7, #20]
 800afb6:	e00e      	b.n	800afd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800afb8:	68bb      	ldr	r3, [r7, #8]
 800afba:	78db      	ldrb	r3, [r3, #3]
 800afbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	785b      	ldrb	r3, [r3, #1]
 800afc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800afc4:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800afca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800afd2:	4313      	orrs	r3, r2
 800afd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	22ca      	movs	r2, #202	; 0xca
 800afdc:	625a      	str	r2, [r3, #36]	; 0x24
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	2253      	movs	r2, #83	; 0x53
 800afe4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f000 f89b 	bl	800b122 <RTC_EnterInitMode>
 800afec:	4603      	mov	r3, r0
 800afee:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800aff0:	7cfb      	ldrb	r3, [r7, #19]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d10c      	bne.n	800b010 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681a      	ldr	r2, [r3, #0]
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b000:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b004:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 f8c2 	bl	800b190 <RTC_ExitInitMode>
 800b00c:	4603      	mov	r3, r0
 800b00e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800b010:	7cfb      	ldrb	r3, [r7, #19]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d102      	bne.n	800b01c <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2201      	movs	r2, #1
 800b01a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	22ff      	movs	r2, #255	; 0xff
 800b022:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2200      	movs	r2, #0
 800b028:	771a      	strb	r2, [r3, #28]

  return status;
 800b02a:	7cfb      	ldrb	r3, [r7, #19]
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	371c      	adds	r7, #28
 800b030:	46bd      	mov	sp, r7
 800b032:	bd90      	pop	{r4, r7, pc}

0800b034 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b086      	sub	sp, #24
 800b038:	af00      	add	r7, sp, #0
 800b03a:	60f8      	str	r0, [r7, #12]
 800b03c:	60b9      	str	r1, [r7, #8]
 800b03e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800b040:	2300      	movs	r3, #0
 800b042:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b04e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b052:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800b054:	697b      	ldr	r3, [r7, #20]
 800b056:	0c1b      	lsrs	r3, r3, #16
 800b058:	b2da      	uxtb	r2, r3
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	0a1b      	lsrs	r3, r3, #8
 800b062:	b2db      	uxtb	r3, r3
 800b064:	f003 031f 	and.w	r3, r3, #31
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	b2db      	uxtb	r3, r3
 800b072:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b076:	b2da      	uxtb	r2, r3
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	0b5b      	lsrs	r3, r3, #13
 800b080:	b2db      	uxtb	r3, r3
 800b082:	f003 0307 	and.w	r3, r3, #7
 800b086:	b2da      	uxtb	r2, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d11a      	bne.n	800b0c8 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	78db      	ldrb	r3, [r3, #3]
 800b096:	4618      	mov	r0, r3
 800b098:	f000 f8bc 	bl	800b214 <RTC_Bcd2ToByte>
 800b09c:	4603      	mov	r3, r0
 800b09e:	461a      	mov	r2, r3
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	785b      	ldrb	r3, [r3, #1]
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f000 f8b3 	bl	800b214 <RTC_Bcd2ToByte>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	789b      	ldrb	r3, [r3, #2]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	f000 f8aa 	bl	800b214 <RTC_Bcd2ToByte>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3718      	adds	r7, #24
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b084      	sub	sp, #16
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68da      	ldr	r2, [r3, #12]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b0ec:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b0ee:	f7fb fef3 	bl	8006ed8 <HAL_GetTick>
 800b0f2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b0f4:	e009      	b.n	800b10a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b0f6:	f7fb feef 	bl	8006ed8 <HAL_GetTick>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	1ad3      	subs	r3, r2, r3
 800b100:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b104:	d901      	bls.n	800b10a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e007      	b.n	800b11a <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	f003 0320 	and.w	r3, r3, #32
 800b114:	2b00      	cmp	r3, #0
 800b116:	d0ee      	beq.n	800b0f6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3710      	adds	r7, #16
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b084      	sub	sp, #16
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b12a:	2300      	movs	r3, #0
 800b12c:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800b12e:	2300      	movs	r3, #0
 800b130:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68db      	ldr	r3, [r3, #12]
 800b138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d122      	bne.n	800b186 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68da      	ldr	r2, [r3, #12]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b14e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b150:	f7fb fec2 	bl	8006ed8 <HAL_GetTick>
 800b154:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b156:	e00c      	b.n	800b172 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b158:	f7fb febe 	bl	8006ed8 <HAL_GetTick>
 800b15c:	4602      	mov	r2, r0
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	1ad3      	subs	r3, r2, r3
 800b162:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b166:	d904      	bls.n	800b172 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2204      	movs	r2, #4
 800b16c:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800b16e:	2301      	movs	r3, #1
 800b170:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d102      	bne.n	800b186 <RTC_EnterInitMode+0x64>
 800b180:	7bfb      	ldrb	r3, [r7, #15]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d1e8      	bne.n	800b158 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800b186:	7bfb      	ldrb	r3, [r7, #15]
}
 800b188:	4618      	mov	r0, r3
 800b18a:	3710      	adds	r7, #16
 800b18c:	46bd      	mov	sp, r7
 800b18e:	bd80      	pop	{r7, pc}

0800b190 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	68da      	ldr	r2, [r3, #12]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1aa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	f003 0320 	and.w	r3, r3, #32
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10a      	bne.n	800b1d0 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f7ff ff89 	bl	800b0d2 <HAL_RTC_WaitForSynchro>
 800b1c0:	4603      	mov	r3, r0
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d004      	beq.n	800b1d0 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	2204      	movs	r2, #4
 800b1ca:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}

0800b1da <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800b1da:	b480      	push	{r7}
 800b1dc:	b085      	sub	sp, #20
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800b1e8:	e005      	b.n	800b1f6 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800b1ea:	7bfb      	ldrb	r3, [r7, #15]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800b1f0:	79fb      	ldrb	r3, [r7, #7]
 800b1f2:	3b0a      	subs	r3, #10
 800b1f4:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800b1f6:	79fb      	ldrb	r3, [r7, #7]
 800b1f8:	2b09      	cmp	r3, #9
 800b1fa:	d8f6      	bhi.n	800b1ea <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800b1fc:	7bfb      	ldrb	r3, [r7, #15]
 800b1fe:	011b      	lsls	r3, r3, #4
 800b200:	b2da      	uxtb	r2, r3
 800b202:	79fb      	ldrb	r3, [r7, #7]
 800b204:	4313      	orrs	r3, r2
 800b206:	b2db      	uxtb	r3, r3
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3714      	adds	r7, #20
 800b20c:	46bd      	mov	sp, r7
 800b20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b212:	4770      	bx	lr

0800b214 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800b214:	b480      	push	{r7}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
 800b21a:	4603      	mov	r3, r0
 800b21c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800b21e:	2300      	movs	r3, #0
 800b220:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	091b      	lsrs	r3, r3, #4
 800b226:	b2db      	uxtb	r3, r3
 800b228:	461a      	mov	r2, r3
 800b22a:	0092      	lsls	r2, r2, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800b232:	79fb      	ldrb	r3, [r7, #7]
 800b234:	f003 030f 	and.w	r3, r3, #15
 800b238:	b2da      	uxtb	r2, r3
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	4413      	add	r3, r2
 800b23e:	b2db      	uxtb	r3, r3
}
 800b240:	4618      	mov	r0, r3
 800b242:	3714      	adds	r7, #20
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800b258:	2300      	movs	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	3350      	adds	r3, #80	; 0x50
 800b262:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	009b      	lsls	r3, r3, #2
 800b268:	697a      	ldr	r2, [r7, #20]
 800b26a:	4413      	add	r3, r2
 800b26c:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	601a      	str	r2, [r3, #0]
}
 800b274:	bf00      	nop
 800b276:	371c      	adds	r7, #28
 800b278:	46bd      	mov	sp, r7
 800b27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27e:	4770      	bx	lr

0800b280 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800b28a:	2300      	movs	r3, #0
 800b28c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3350      	adds	r3, #80	; 0x50
 800b294:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	009b      	lsls	r3, r3, #2
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	4413      	add	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3714      	adds	r7, #20
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d101      	bne.n	800b2c2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e022      	b.n	800b308 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d105      	bne.n	800b2da <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f7f9 fe69 	bl	8004fac <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	2203      	movs	r2, #3
 800b2de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f000 f814 	bl	800b310 <HAL_SD_InitCard>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e00a      	b.n	800b308 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2201      	movs	r2, #1
 800b302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b306:	2300      	movs	r3, #0
}
 800b308:	4618      	mov	r0, r3
 800b30a:	3708      	adds	r7, #8
 800b30c:	46bd      	mov	sp, r7
 800b30e:	bd80      	pop	{r7, pc}

0800b310 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b310:	b5b0      	push	{r4, r5, r7, lr}
 800b312:	b08e      	sub	sp, #56	; 0x38
 800b314:	af04      	add	r7, sp, #16
 800b316:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b318:	2300      	movs	r3, #0
 800b31a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b31c:	2300      	movs	r3, #0
 800b31e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b320:	2300      	movs	r3, #0
 800b322:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b324:	2300      	movs	r3, #0
 800b326:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b328:	2300      	movs	r3, #0
 800b32a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b32c:	2376      	movs	r3, #118	; 0x76
 800b32e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681d      	ldr	r5, [r3, #0]
 800b334:	466c      	mov	r4, sp
 800b336:	f107 0314 	add.w	r3, r7, #20
 800b33a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b33e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b342:	f107 0308 	add.w	r3, r7, #8
 800b346:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b348:	4628      	mov	r0, r5
 800b34a:	f003 f999 	bl	800e680 <SDIO_Init>
 800b34e:	4603      	mov	r3, r0
 800b350:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d001      	beq.n	800b360 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b35c:	2301      	movs	r3, #1
 800b35e:	e04f      	b.n	800b400 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b360:	4b29      	ldr	r3, [pc, #164]	; (800b408 <HAL_SD_InitCard+0xf8>)
 800b362:	2200      	movs	r2, #0
 800b364:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4618      	mov	r0, r3
 800b36c:	f003 f9d1 	bl	800e712 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b370:	4b25      	ldr	r3, [pc, #148]	; (800b408 <HAL_SD_InitCard+0xf8>)
 800b372:	2201      	movs	r2, #1
 800b374:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b376:	2002      	movs	r0, #2
 800b378:	f7fb fdba 	bl	8006ef0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fe69 	bl	800c054 <SD_PowerON>
 800b382:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d00b      	beq.n	800b3a2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2201      	movs	r2, #1
 800b38e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b396:	6a3b      	ldr	r3, [r7, #32]
 800b398:	431a      	orrs	r2, r3
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e02e      	b.n	800b400 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 fd88 	bl	800beb8 <SD_InitCard>
 800b3a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00b      	beq.n	800b3c8 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3bc:	6a3b      	ldr	r3, [r7, #32]
 800b3be:	431a      	orrs	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e01b      	b.n	800b400 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f003 fa30 	bl	800e836 <SDMMC_CmdBlockLength>
 800b3d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b3d8:	6a3b      	ldr	r3, [r7, #32]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00f      	beq.n	800b3fe <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <HAL_SD_InitCard+0xfc>)
 800b3e4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3ea:	6a3b      	ldr	r3, [r7, #32]
 800b3ec:	431a      	orrs	r2, r3
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	e000      	b.n	800b400 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3728      	adds	r7, #40	; 0x28
 800b404:	46bd      	mov	sp, r7
 800b406:	bdb0      	pop	{r4, r5, r7, pc}
 800b408:	422580a0 	.word	0x422580a0
 800b40c:	004005ff 	.word	0x004005ff

0800b410 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b092      	sub	sp, #72	; 0x48
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
 800b41c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b41e:	f7fb fd5b 	bl	8006ed8 <HAL_GetTick>
 800b422:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d107      	bne.n	800b442 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b436:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e1bd      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b448:	b2db      	uxtb	r3, r3
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	f040 81b0 	bne.w	800b7b0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b456:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b458:	683b      	ldr	r3, [r7, #0]
 800b45a:	441a      	add	r2, r3
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b460:	429a      	cmp	r2, r3
 800b462:	d907      	bls.n	800b474 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b468:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b470:	2301      	movs	r3, #1
 800b472:	e1a4      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2203      	movs	r2, #3
 800b478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	2200      	movs	r2, #0
 800b482:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d002      	beq.n	800b492 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800b48c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b48e:	025b      	lsls	r3, r3, #9
 800b490:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b492:	f04f 33ff 	mov.w	r3, #4294967295
 800b496:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	025b      	lsls	r3, r3, #9
 800b49c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b49e:	2390      	movs	r3, #144	; 0x90
 800b4a0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f107 0214 	add.w	r2, r7, #20
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f003 f990 	bl	800e7de <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d90a      	bls.n	800b4da <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	2202      	movs	r2, #2
 800b4c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f003 f9f4 	bl	800e8be <SDMMC_CmdReadMultiBlock>
 800b4d6:	6478      	str	r0, [r7, #68]	; 0x44
 800b4d8:	e009      	b.n	800b4ee <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2201      	movs	r2, #1
 800b4de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f003 f9c7 	bl	800e87a <SDMMC_CmdReadSingleBlock>
 800b4ec:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d012      	beq.n	800b51a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a7a      	ldr	r2, [pc, #488]	; (800b6e4 <HAL_SD_ReadBlocks+0x2d4>)
 800b4fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b502:	431a      	orrs	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e151      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800b51a:	69bb      	ldr	r3, [r7, #24]
 800b51c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b51e:	e061      	b.n	800b5e4 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d03c      	beq.n	800b5a8 <HAL_SD_ReadBlocks+0x198>
 800b52e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b530:	2b00      	cmp	r3, #0
 800b532:	d039      	beq.n	800b5a8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800b534:	2300      	movs	r3, #0
 800b536:	643b      	str	r3, [r7, #64]	; 0x40
 800b538:	e033      	b.n	800b5a2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	4618      	mov	r0, r3
 800b540:	f003 f8c9 	bl	800e6d6 <SDIO_ReadFIFO>
 800b544:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800b546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b548:	b2da      	uxtb	r2, r3
 800b54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b550:	3301      	adds	r3, #1
 800b552:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b556:	3b01      	subs	r3, #1
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b55a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55c:	0a1b      	lsrs	r3, r3, #8
 800b55e:	b2da      	uxtb	r2, r3
 800b560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b562:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b566:	3301      	adds	r3, #1
 800b568:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b56c:	3b01      	subs	r3, #1
 800b56e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b572:	0c1b      	lsrs	r3, r3, #16
 800b574:	b2da      	uxtb	r2, r3
 800b576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b578:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57c:	3301      	adds	r3, #1
 800b57e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b582:	3b01      	subs	r3, #1
 800b584:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b588:	0e1b      	lsrs	r3, r3, #24
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800b590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b592:	3301      	adds	r3, #1
 800b594:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b596:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b598:	3b01      	subs	r3, #1
 800b59a:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800b59c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b59e:	3301      	adds	r3, #1
 800b5a0:	643b      	str	r3, [r7, #64]	; 0x40
 800b5a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5a4:	2b07      	cmp	r3, #7
 800b5a6:	d9c8      	bls.n	800b53a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b5a8:	f7fb fc96 	bl	8006ed8 <HAL_GetTick>
 800b5ac:	4602      	mov	r2, r0
 800b5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5b0:	1ad3      	subs	r3, r2, r3
 800b5b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d902      	bls.n	800b5be <HAL_SD_ReadBlocks+0x1ae>
 800b5b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d112      	bne.n	800b5e4 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	4a48      	ldr	r2, [pc, #288]	; (800b6e4 <HAL_SD_ReadBlocks+0x2d4>)
 800b5c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ca:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2201      	movs	r2, #1
 800b5d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b5e0:	2303      	movs	r3, #3
 800b5e2:	e0ec      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5ea:	f240 332a 	movw	r3, #810	; 0x32a
 800b5ee:	4013      	ands	r3, r2
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d095      	beq.n	800b520 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d022      	beq.n	800b648 <HAL_SD_ReadBlocks+0x238>
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	2b01      	cmp	r3, #1
 800b606:	d91f      	bls.n	800b648 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d01b      	beq.n	800b648 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4618      	mov	r0, r3
 800b616:	f003 f9b9 	bl	800e98c <SDMMC_CmdStopTransfer>
 800b61a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b61c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d012      	beq.n	800b648 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	4a2f      	ldr	r2, [pc, #188]	; (800b6e4 <HAL_SD_ReadBlocks+0x2d4>)
 800b628:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b62e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b630:	431a      	orrs	r2, r3
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2201      	movs	r2, #1
 800b63a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800b644:	2301      	movs	r3, #1
 800b646:	e0ba      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b64e:	f003 0308 	and.w	r3, r3, #8
 800b652:	2b00      	cmp	r3, #0
 800b654:	d012      	beq.n	800b67c <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a22      	ldr	r2, [pc, #136]	; (800b6e4 <HAL_SD_ReadBlocks+0x2d4>)
 800b65c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b662:	f043 0208 	orr.w	r2, r3, #8
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2201      	movs	r2, #1
 800b66e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2200      	movs	r2, #0
 800b676:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	e0a0      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b682:	f003 0302 	and.w	r3, r3, #2
 800b686:	2b00      	cmp	r3, #0
 800b688:	d012      	beq.n	800b6b0 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a15      	ldr	r2, [pc, #84]	; (800b6e4 <HAL_SD_ReadBlocks+0x2d4>)
 800b690:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b696:	f043 0202 	orr.w	r2, r3, #2
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2201      	movs	r2, #1
 800b6a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	e086      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6b6:	f003 0320 	and.w	r3, r3, #32
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d063      	beq.n	800b786 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	4a08      	ldr	r2, [pc, #32]	; (800b6e4 <HAL_SD_ReadBlocks+0x2d4>)
 800b6c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ca:	f043 0220 	orr.w	r2, r3, #32
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2201      	movs	r2, #1
 800b6d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	e06c      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
 800b6e4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f002 fff2 	bl	800e6d6 <SDIO_ReadFIFO>
 800b6f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800b6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6f6:	b2da      	uxtb	r2, r3
 800b6f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fe:	3301      	adds	r3, #1
 800b700:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b704:	3b01      	subs	r3, #1
 800b706:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800b708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b70a:	0a1b      	lsrs	r3, r3, #8
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b710:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b714:	3301      	adds	r3, #1
 800b716:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b71a:	3b01      	subs	r3, #1
 800b71c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800b71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b720:	0c1b      	lsrs	r3, r3, #16
 800b722:	b2da      	uxtb	r2, r3
 800b724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b726:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72a:	3301      	adds	r3, #1
 800b72c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b72e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b730:	3b01      	subs	r3, #1
 800b732:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	0e1b      	lsrs	r3, r3, #24
 800b738:	b2da      	uxtb	r2, r3
 800b73a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b73c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800b73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b740:	3301      	adds	r3, #1
 800b742:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800b744:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b746:	3b01      	subs	r3, #1
 800b748:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b74a:	f7fb fbc5 	bl	8006ed8 <HAL_GetTick>
 800b74e:	4602      	mov	r2, r0
 800b750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b752:	1ad3      	subs	r3, r2, r3
 800b754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b756:	429a      	cmp	r2, r3
 800b758:	d902      	bls.n	800b760 <HAL_SD_ReadBlocks+0x350>
 800b75a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d112      	bne.n	800b786 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a18      	ldr	r2, [pc, #96]	; (800b7c8 <HAL_SD_ReadBlocks+0x3b8>)
 800b766:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2200      	movs	r2, #0
 800b780:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	e01b      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b78c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b790:	2b00      	cmp	r3, #0
 800b792:	d002      	beq.n	800b79a <HAL_SD_ReadBlocks+0x38a>
 800b794:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1a6      	bne.n	800b6e8 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	f240 523a 	movw	r2, #1338	; 0x53a
 800b7a2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800b7ac:	2300      	movs	r3, #0
 800b7ae:	e006      	b.n	800b7be <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b7bc:	2301      	movs	r3, #1
  }
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3748      	adds	r7, #72	; 0x48
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	004005ff 	.word	0x004005ff

0800b7cc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b092      	sub	sp, #72	; 0x48
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b7da:	f7fb fb7d 	bl	8006ed8 <HAL_GetTick>
 800b7de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d107      	bne.n	800b7fe <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	e166      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b804:	b2db      	uxtb	r3, r3
 800b806:	2b01      	cmp	r3, #1
 800b808:	f040 8159 	bne.w	800babe <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	2200      	movs	r2, #0
 800b810:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b814:	683b      	ldr	r3, [r7, #0]
 800b816:	441a      	add	r2, r3
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d907      	bls.n	800b830 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b824:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e14d      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2203      	movs	r2, #3
 800b834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	2200      	movs	r2, #0
 800b83e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b844:	2b01      	cmp	r3, #1
 800b846:	d002      	beq.n	800b84e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800b848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84a:	025b      	lsls	r3, r3, #9
 800b84c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b84e:	f04f 33ff 	mov.w	r3, #4294967295
 800b852:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	025b      	lsls	r3, r3, #9
 800b858:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b85a:	2390      	movs	r3, #144	; 0x90
 800b85c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b85e:	2300      	movs	r3, #0
 800b860:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b862:	2300      	movs	r3, #0
 800b864:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800b866:	2301      	movs	r3, #1
 800b868:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f107 0218 	add.w	r2, r7, #24
 800b872:	4611      	mov	r1, r2
 800b874:	4618      	mov	r0, r3
 800b876:	f002 ffb2 	bl	800e7de <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d90a      	bls.n	800b896 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2220      	movs	r2, #32
 800b884:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b88c:	4618      	mov	r0, r3
 800b88e:	f003 f85a 	bl	800e946 <SDMMC_CmdWriteMultiBlock>
 800b892:	6478      	str	r0, [r7, #68]	; 0x44
 800b894:	e009      	b.n	800b8aa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	2210      	movs	r2, #16
 800b89a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	f003 f82d 	bl	800e902 <SDMMC_CmdWriteSingleBlock>
 800b8a8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b8aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d012      	beq.n	800b8d6 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	4a87      	ldr	r2, [pc, #540]	; (800bad4 <HAL_SD_WriteBlocks+0x308>)
 800b8b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b8be:	431a      	orrs	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e0fa      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b8da:	e065      	b.n	800b9a8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d040      	beq.n	800b96c <HAL_SD_WriteBlocks+0x1a0>
 800b8ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d03d      	beq.n	800b96c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	643b      	str	r3, [r7, #64]	; 0x40
 800b8f4:	e037      	b.n	800b966 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800b8f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8f8:	781b      	ldrb	r3, [r3, #0]
 800b8fa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b8fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8fe:	3301      	adds	r3, #1
 800b900:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b904:	3b01      	subs	r3, #1
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800b908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90a:	781b      	ldrb	r3, [r3, #0]
 800b90c:	021a      	lsls	r2, r3, #8
 800b90e:	697b      	ldr	r3, [r7, #20]
 800b910:	4313      	orrs	r3, r2
 800b912:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b916:	3301      	adds	r3, #1
 800b918:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b91a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b91c:	3b01      	subs	r3, #1
 800b91e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800b920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	041a      	lsls	r2, r3, #16
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	4313      	orrs	r3, r2
 800b92a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b92e:	3301      	adds	r3, #1
 800b930:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b934:	3b01      	subs	r3, #1
 800b936:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800b938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b93a:	781b      	ldrb	r3, [r3, #0]
 800b93c:	061a      	lsls	r2, r3, #24
 800b93e:	697b      	ldr	r3, [r7, #20]
 800b940:	4313      	orrs	r3, r2
 800b942:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800b944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b946:	3301      	adds	r3, #1
 800b948:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800b94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b94c:	3b01      	subs	r3, #1
 800b94e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f107 0214 	add.w	r2, r7, #20
 800b958:	4611      	mov	r1, r2
 800b95a:	4618      	mov	r0, r3
 800b95c:	f002 fec8 	bl	800e6f0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800b960:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b962:	3301      	adds	r3, #1
 800b964:	643b      	str	r3, [r7, #64]	; 0x40
 800b966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b968:	2b07      	cmp	r3, #7
 800b96a:	d9c4      	bls.n	800b8f6 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800b96c:	f7fb fab4 	bl	8006ed8 <HAL_GetTick>
 800b970:	4602      	mov	r2, r0
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b978:	429a      	cmp	r2, r3
 800b97a:	d902      	bls.n	800b982 <HAL_SD_WriteBlocks+0x1b6>
 800b97c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d112      	bne.n	800b9a8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a53      	ldr	r2, [pc, #332]	; (800bad4 <HAL_SD_WriteBlocks+0x308>)
 800b988:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b98e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b990:	431a      	orrs	r2, r3
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	2201      	movs	r2, #1
 800b99a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	e091      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9ae:	f240 331a 	movw	r3, #794	; 0x31a
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d091      	beq.n	800b8dc <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d022      	beq.n	800ba0c <HAL_SD_WriteBlocks+0x240>
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	2b01      	cmp	r3, #1
 800b9ca:	d91f      	bls.n	800ba0c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9d0:	2b03      	cmp	r3, #3
 800b9d2:	d01b      	beq.n	800ba0c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f002 ffd7 	bl	800e98c <SDMMC_CmdStopTransfer>
 800b9de:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800b9e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d012      	beq.n	800ba0c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a3a      	ldr	r2, [pc, #232]	; (800bad4 <HAL_SD_WriteBlocks+0x308>)
 800b9ec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	2200      	movs	r2, #0
 800ba06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	e05f      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba12:	f003 0308 	and.w	r3, r3, #8
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d012      	beq.n	800ba40 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a2d      	ldr	r2, [pc, #180]	; (800bad4 <HAL_SD_WriteBlocks+0x308>)
 800ba20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba26:	f043 0208 	orr.w	r2, r3, #8
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba3c:	2301      	movs	r3, #1
 800ba3e:	e045      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba46:	f003 0302 	and.w	r3, r3, #2
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d012      	beq.n	800ba74 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	4a20      	ldr	r2, [pc, #128]	; (800bad4 <HAL_SD_WriteBlocks+0x308>)
 800ba54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba5a:	f043 0202 	orr.w	r2, r3, #2
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	2201      	movs	r2, #1
 800ba66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2200      	movs	r2, #0
 800ba6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ba70:	2301      	movs	r3, #1
 800ba72:	e02b      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7a:	f003 0310 	and.w	r3, r3, #16
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d012      	beq.n	800baa8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	4a13      	ldr	r2, [pc, #76]	; (800bad4 <HAL_SD_WriteBlocks+0x308>)
 800ba88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8e:	f043 0210 	orr.w	r2, r3, #16
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2201      	movs	r2, #1
 800ba9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800baa4:	2301      	movs	r3, #1
 800baa6:	e011      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f240 523a 	movw	r2, #1338	; 0x53a
 800bab0:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2201      	movs	r2, #1
 800bab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800baba:	2300      	movs	r3, #0
 800babc:	e006      	b.n	800bacc <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800baca:	2301      	movs	r3, #1
  }
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3748      	adds	r7, #72	; 0x48
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	004005ff 	.word	0x004005ff

0800bad8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bae6:	0f9b      	lsrs	r3, r3, #30
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baf2:	0e9b      	lsrs	r3, r3, #26
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	f003 030f 	and.w	r3, r3, #15
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb04:	0e1b      	lsrs	r3, r3, #24
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	f003 0303 	and.w	r3, r3, #3
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb16:	0c1b      	lsrs	r3, r3, #16
 800bb18:	b2da      	uxtb	r2, r3
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb22:	0a1b      	lsrs	r3, r3, #8
 800bb24:	b2da      	uxtb	r2, r3
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb38:	0d1b      	lsrs	r3, r3, #20
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb44:	0c1b      	lsrs	r3, r3, #16
 800bb46:	b2db      	uxtb	r3, r3
 800bb48:	f003 030f 	and.w	r3, r3, #15
 800bb4c:	b2da      	uxtb	r2, r3
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb56:	0bdb      	lsrs	r3, r3, #15
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb68:	0b9b      	lsrs	r3, r3, #14
 800bb6a:	b2db      	uxtb	r3, r3
 800bb6c:	f003 0301 	and.w	r3, r3, #1
 800bb70:	b2da      	uxtb	r2, r3
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb7a:	0b5b      	lsrs	r3, r3, #13
 800bb7c:	b2db      	uxtb	r3, r3
 800bb7e:	f003 0301 	and.w	r3, r3, #1
 800bb82:	b2da      	uxtb	r2, r3
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb8c:	0b1b      	lsrs	r3, r3, #12
 800bb8e:	b2db      	uxtb	r3, r3
 800bb90:	f003 0301 	and.w	r3, r3, #1
 800bb94:	b2da      	uxtb	r2, r3
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bb9a:	683b      	ldr	r3, [r7, #0]
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d163      	bne.n	800bc70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbac:	009a      	lsls	r2, r3, #2
 800bbae:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bbb2:	4013      	ands	r3, r2
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bbb8:	0f92      	lsrs	r2, r2, #30
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbc4:	0edb      	lsrs	r3, r3, #27
 800bbc6:	b2db      	uxtb	r3, r3
 800bbc8:	f003 0307 	and.w	r3, r3, #7
 800bbcc:	b2da      	uxtb	r2, r3
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd6:	0e1b      	lsrs	r3, r3, #24
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	f003 0307 	and.w	r3, r3, #7
 800bbde:	b2da      	uxtb	r2, r3
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbe8:	0d5b      	lsrs	r3, r3, #21
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	f003 0307 	and.w	r3, r3, #7
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbfa:	0c9b      	lsrs	r3, r3, #18
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	f003 0307 	and.w	r3, r3, #7
 800bc02:	b2da      	uxtb	r2, r3
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc0c:	0bdb      	lsrs	r3, r3, #15
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	f003 0307 	and.w	r3, r3, #7
 800bc14:	b2da      	uxtb	r2, r3
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	691b      	ldr	r3, [r3, #16]
 800bc1e:	1c5a      	adds	r2, r3, #1
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	7e1b      	ldrb	r3, [r3, #24]
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	f003 0307 	and.w	r3, r3, #7
 800bc2e:	3302      	adds	r3, #2
 800bc30:	2201      	movs	r2, #1
 800bc32:	fa02 f303 	lsl.w	r3, r2, r3
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bc3a:	fb03 f202 	mul.w	r2, r3, r2
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	7a1b      	ldrb	r3, [r3, #8]
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	f003 030f 	and.w	r3, r3, #15
 800bc4c:	2201      	movs	r2, #1
 800bc4e:	409a      	lsls	r2, r3
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc58:	687a      	ldr	r2, [r7, #4]
 800bc5a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bc5c:	0a52      	lsrs	r2, r2, #9
 800bc5e:	fb03 f202 	mul.w	r2, r3, r2
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc6c:	661a      	str	r2, [r3, #96]	; 0x60
 800bc6e:	e031      	b.n	800bcd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc74:	2b01      	cmp	r3, #1
 800bc76:	d11d      	bne.n	800bcb4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc7c:	041b      	lsls	r3, r3, #16
 800bc7e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc86:	0c1b      	lsrs	r3, r3, #16
 800bc88:	431a      	orrs	r2, r3
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	691b      	ldr	r3, [r3, #16]
 800bc92:	3301      	adds	r3, #1
 800bc94:	029a      	lsls	r2, r3, #10
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bca8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	661a      	str	r2, [r3, #96]	; 0x60
 800bcb2:	e00f      	b.n	800bcd4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4a58      	ldr	r2, [pc, #352]	; (800be1c <HAL_SD_GetCardCSD+0x344>)
 800bcba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e09d      	b.n	800be10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcd8:	0b9b      	lsrs	r3, r3, #14
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	f003 0301 	and.w	r3, r3, #1
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcea:	09db      	lsrs	r3, r3, #7
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0c:	0fdb      	lsrs	r3, r3, #31
 800bd0e:	b2da      	uxtb	r2, r3
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd18:	0f5b      	lsrs	r3, r3, #29
 800bd1a:	b2db      	uxtb	r3, r3
 800bd1c:	f003 0303 	and.w	r3, r3, #3
 800bd20:	b2da      	uxtb	r2, r3
 800bd22:	683b      	ldr	r3, [r7, #0]
 800bd24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd2a:	0e9b      	lsrs	r3, r3, #26
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	f003 0307 	and.w	r3, r3, #7
 800bd32:	b2da      	uxtb	r2, r3
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3c:	0d9b      	lsrs	r3, r3, #22
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	f003 030f 	and.w	r3, r3, #15
 800bd44:	b2da      	uxtb	r2, r3
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd4e:	0d5b      	lsrs	r3, r3, #21
 800bd50:	b2db      	uxtb	r3, r3
 800bd52:	f003 0301 	and.w	r3, r3, #1
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	2200      	movs	r2, #0
 800bd62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6a:	0c1b      	lsrs	r3, r3, #16
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	f003 0301 	and.w	r3, r3, #1
 800bd72:	b2da      	uxtb	r2, r3
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd7e:	0bdb      	lsrs	r3, r3, #15
 800bd80:	b2db      	uxtb	r3, r3
 800bd82:	f003 0301 	and.w	r3, r3, #1
 800bd86:	b2da      	uxtb	r2, r3
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd92:	0b9b      	lsrs	r3, r3, #14
 800bd94:	b2db      	uxtb	r3, r3
 800bd96:	f003 0301 	and.w	r3, r3, #1
 800bd9a:	b2da      	uxtb	r2, r3
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda6:	0b5b      	lsrs	r3, r3, #13
 800bda8:	b2db      	uxtb	r3, r3
 800bdaa:	f003 0301 	and.w	r3, r3, #1
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdba:	0b1b      	lsrs	r3, r3, #12
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	f003 0301 	and.w	r3, r3, #1
 800bdc2:	b2da      	uxtb	r2, r3
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdce:	0a9b      	lsrs	r3, r3, #10
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	f003 0303 	and.w	r3, r3, #3
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bde2:	0a1b      	lsrs	r3, r3, #8
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	f003 0303 	and.w	r3, r3, #3
 800bdea:	b2da      	uxtb	r2, r3
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf6:	085b      	lsrs	r3, r3, #1
 800bdf8:	b2db      	uxtb	r3, r3
 800bdfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdfe:	b2da      	uxtb	r2, r3
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	2201      	movs	r2, #1
 800be0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	004005ff 	.word	0x004005ff

0800be20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800be20:	b480      	push	{r7}
 800be22:	b083      	sub	sp, #12
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
 800be28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800be36:	683b      	ldr	r3, [r7, #0]
 800be38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800be46:	683b      	ldr	r3, [r7, #0]
 800be48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b086      	sub	sp, #24
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800be84:	f107 030c 	add.w	r3, r7, #12
 800be88:	4619      	mov	r1, r3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 f970 	bl	800c170 <SD_SendStatus>
 800be90:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d005      	beq.n	800bea4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be9c:	697b      	ldr	r3, [r7, #20]
 800be9e:	431a      	orrs	r2, r3
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	0a5b      	lsrs	r3, r3, #9
 800bea8:	f003 030f 	and.w	r3, r3, #15
 800beac:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800beae:	693b      	ldr	r3, [r7, #16]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3718      	adds	r7, #24
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800beb8:	b5b0      	push	{r4, r5, r7, lr}
 800beba:	b094      	sub	sp, #80	; 0x50
 800bebc:	af04      	add	r7, sp, #16
 800bebe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bec0:	2301      	movs	r3, #1
 800bec2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4618      	mov	r0, r3
 800beca:	f002 fc30 	bl	800e72e <SDIO_GetPowerState>
 800bece:	4603      	mov	r3, r0
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d102      	bne.n	800beda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bed4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bed8:	e0b8      	b.n	800c04c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bede:	2b03      	cmp	r3, #3
 800bee0:	d02f      	beq.n	800bf42 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	4618      	mov	r0, r3
 800bee8:	f002 fe17 	bl	800eb1a <SDMMC_CmdSendCID>
 800beec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800beee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d001      	beq.n	800bef8 <SD_InitCard+0x40>
    {
      return errorstate;
 800bef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bef6:	e0a9      	b.n	800c04c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	2100      	movs	r1, #0
 800befe:	4618      	mov	r0, r3
 800bf00:	f002 fc5a 	bl	800e7b8 <SDIO_GetResponse>
 800bf04:	4602      	mov	r2, r0
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	2104      	movs	r1, #4
 800bf10:	4618      	mov	r0, r3
 800bf12:	f002 fc51 	bl	800e7b8 <SDIO_GetResponse>
 800bf16:	4602      	mov	r2, r0
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2108      	movs	r1, #8
 800bf22:	4618      	mov	r0, r3
 800bf24:	f002 fc48 	bl	800e7b8 <SDIO_GetResponse>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	210c      	movs	r1, #12
 800bf34:	4618      	mov	r0, r3
 800bf36:	f002 fc3f 	bl	800e7b8 <SDIO_GetResponse>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf46:	2b03      	cmp	r3, #3
 800bf48:	d00d      	beq.n	800bf66 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f107 020e 	add.w	r2, r7, #14
 800bf52:	4611      	mov	r1, r2
 800bf54:	4618      	mov	r0, r3
 800bf56:	f002 fe1d 	bl	800eb94 <SDMMC_CmdSetRelAdd>
 800bf5a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d001      	beq.n	800bf66 <SD_InitCard+0xae>
    {
      return errorstate;
 800bf62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf64:	e072      	b.n	800c04c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf6a:	2b03      	cmp	r3, #3
 800bf6c:	d036      	beq.n	800bfdc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bf6e:	89fb      	ldrh	r3, [r7, #14]
 800bf70:	461a      	mov	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf7e:	041b      	lsls	r3, r3, #16
 800bf80:	4619      	mov	r1, r3
 800bf82:	4610      	mov	r0, r2
 800bf84:	f002 fde7 	bl	800eb56 <SDMMC_CmdSendCSD>
 800bf88:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf92:	e05b      	b.n	800c04c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	2100      	movs	r1, #0
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f002 fc0c 	bl	800e7b8 <SDIO_GetResponse>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	2104      	movs	r1, #4
 800bfac:	4618      	mov	r0, r3
 800bfae:	f002 fc03 	bl	800e7b8 <SDIO_GetResponse>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2108      	movs	r1, #8
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f002 fbfa 	bl	800e7b8 <SDIO_GetResponse>
 800bfc4:	4602      	mov	r2, r0
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	210c      	movs	r1, #12
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	f002 fbf1 	bl	800e7b8 <SDIO_GetResponse>
 800bfd6:	4602      	mov	r2, r0
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2104      	movs	r1, #4
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f002 fbe8 	bl	800e7b8 <SDIO_GetResponse>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	0d1a      	lsrs	r2, r3, #20
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bff0:	f107 0310 	add.w	r3, r7, #16
 800bff4:	4619      	mov	r1, r3
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7ff fd6e 	bl	800bad8 <HAL_SD_GetCardCSD>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d002      	beq.n	800c008 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c002:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c006:	e021      	b.n	800c04c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	6819      	ldr	r1, [r3, #0]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c010:	041b      	lsls	r3, r3, #16
 800c012:	2200      	movs	r2, #0
 800c014:	461c      	mov	r4, r3
 800c016:	4615      	mov	r5, r2
 800c018:	4622      	mov	r2, r4
 800c01a:	462b      	mov	r3, r5
 800c01c:	4608      	mov	r0, r1
 800c01e:	f002 fcd7 	bl	800e9d0 <SDMMC_CmdSelDesel>
 800c022:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <SD_InitCard+0x176>
  {
    return errorstate;
 800c02a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c02c:	e00e      	b.n	800c04c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681d      	ldr	r5, [r3, #0]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	466c      	mov	r4, sp
 800c036:	f103 0210 	add.w	r2, r3, #16
 800c03a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c03c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c040:	3304      	adds	r3, #4
 800c042:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c044:	4628      	mov	r0, r5
 800c046:	f002 fb1b 	bl	800e680 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c04a:	2300      	movs	r3, #0
}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3740      	adds	r7, #64	; 0x40
 800c050:	46bd      	mov	sp, r7
 800c052:	bdb0      	pop	{r4, r5, r7, pc}

0800c054 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c054:	b580      	push	{r7, lr}
 800c056:	b086      	sub	sp, #24
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c05c:	2300      	movs	r3, #0
 800c05e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c060:	2300      	movs	r3, #0
 800c062:	617b      	str	r3, [r7, #20]
 800c064:	2300      	movs	r3, #0
 800c066:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	4618      	mov	r0, r3
 800c06e:	f002 fcd2 	bl	800ea16 <SDMMC_CmdGoIdleState>
 800c072:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d001      	beq.n	800c07e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	e072      	b.n	800c164 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4618      	mov	r0, r3
 800c084:	f002 fce5 	bl	800ea52 <SDMMC_CmdOperCond>
 800c088:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00d      	beq.n	800c0ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2200      	movs	r2, #0
 800c094:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	4618      	mov	r0, r3
 800c09c:	f002 fcbb 	bl	800ea16 <SDMMC_CmdGoIdleState>
 800c0a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d004      	beq.n	800c0b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	e05b      	b.n	800c164 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d137      	bne.n	800c12a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2100      	movs	r1, #0
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f002 fce5 	bl	800ea90 <SDMMC_CmdAppCommand>
 800c0c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d02d      	beq.n	800c12a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c0ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c0d2:	e047      	b.n	800c164 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2100      	movs	r1, #0
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f002 fcd8 	bl	800ea90 <SDMMC_CmdAppCommand>
 800c0e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <SD_PowerON+0x98>
    {
      return errorstate;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	e03b      	b.n	800c164 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	491e      	ldr	r1, [pc, #120]	; (800c16c <SD_PowerON+0x118>)
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	f002 fcee 	bl	800ead4 <SDMMC_CmdAppOperCommand>
 800c0f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d002      	beq.n	800c106 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c104:	e02e      	b.n	800c164 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	2100      	movs	r1, #0
 800c10c:	4618      	mov	r0, r3
 800c10e:	f002 fb53 	bl	800e7b8 <SDIO_GetResponse>
 800c112:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c114:	697b      	ldr	r3, [r7, #20]
 800c116:	0fdb      	lsrs	r3, r3, #31
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d101      	bne.n	800c120 <SD_PowerON+0xcc>
 800c11c:	2301      	movs	r3, #1
 800c11e:	e000      	b.n	800c122 <SD_PowerON+0xce>
 800c120:	2300      	movs	r3, #0
 800c122:	613b      	str	r3, [r7, #16]

    count++;
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	3301      	adds	r3, #1
 800c128:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c130:	4293      	cmp	r3, r2
 800c132:	d802      	bhi.n	800c13a <SD_PowerON+0xe6>
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d0cc      	beq.n	800c0d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c140:	4293      	cmp	r3, r2
 800c142:	d902      	bls.n	800c14a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c144:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c148:	e00c      	b.n	800c164 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c14a:	697b      	ldr	r3, [r7, #20]
 800c14c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d003      	beq.n	800c15c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2201      	movs	r2, #1
 800c158:	645a      	str	r2, [r3, #68]	; 0x44
 800c15a:	e002      	b.n	800c162 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3718      	adds	r7, #24
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}
 800c16c:	c1100000 	.word	0xc1100000

0800c170 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d102      	bne.n	800c186 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c180:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c184:	e018      	b.n	800c1b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681a      	ldr	r2, [r3, #0]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c18e:	041b      	lsls	r3, r3, #16
 800c190:	4619      	mov	r1, r3
 800c192:	4610      	mov	r0, r2
 800c194:	f002 fd1f 	bl	800ebd6 <SDMMC_CmdSendStatus>
 800c198:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d001      	beq.n	800c1a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	e009      	b.n	800c1b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2100      	movs	r1, #0
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f002 fb04 	bl	800e7b8 <SDIO_GetResponse>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	683b      	ldr	r3, [r7, #0]
 800c1b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c1b6:	2300      	movs	r3, #0
}
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	3710      	adds	r7, #16
 800c1bc:	46bd      	mov	sp, r7
 800c1be:	bd80      	pop	{r7, pc}

0800c1c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e041      	b.n	800c256 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7f8 ff48 	bl	800507c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2202      	movs	r2, #2
 800c1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681a      	ldr	r2, [r3, #0]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3304      	adds	r3, #4
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	f000 fc70 	bl	800cae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	2201      	movs	r2, #1
 800c208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2201      	movs	r2, #1
 800c218:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2201      	movs	r2, #1
 800c220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	2201      	movs	r2, #1
 800c230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2201      	movs	r2, #1
 800c238:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2201      	movs	r2, #1
 800c240:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	2201      	movs	r2, #1
 800c250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c254:	2300      	movs	r3, #0
}
 800c256:	4618      	mov	r0, r3
 800c258:	3708      	adds	r7, #8
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
	...

0800c260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	2b01      	cmp	r3, #1
 800c272:	d001      	beq.n	800c278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c274:	2301      	movs	r3, #1
 800c276:	e04e      	b.n	800c316 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2202      	movs	r2, #2
 800c27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	68da      	ldr	r2, [r3, #12]
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f042 0201 	orr.w	r2, r2, #1
 800c28e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a23      	ldr	r2, [pc, #140]	; (800c324 <HAL_TIM_Base_Start_IT+0xc4>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d022      	beq.n	800c2e0 <HAL_TIM_Base_Start_IT+0x80>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a2:	d01d      	beq.n	800c2e0 <HAL_TIM_Base_Start_IT+0x80>
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a1f      	ldr	r2, [pc, #124]	; (800c328 <HAL_TIM_Base_Start_IT+0xc8>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d018      	beq.n	800c2e0 <HAL_TIM_Base_Start_IT+0x80>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a1e      	ldr	r2, [pc, #120]	; (800c32c <HAL_TIM_Base_Start_IT+0xcc>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d013      	beq.n	800c2e0 <HAL_TIM_Base_Start_IT+0x80>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a1c      	ldr	r2, [pc, #112]	; (800c330 <HAL_TIM_Base_Start_IT+0xd0>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d00e      	beq.n	800c2e0 <HAL_TIM_Base_Start_IT+0x80>
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a1b      	ldr	r2, [pc, #108]	; (800c334 <HAL_TIM_Base_Start_IT+0xd4>)
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d009      	beq.n	800c2e0 <HAL_TIM_Base_Start_IT+0x80>
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	4a19      	ldr	r2, [pc, #100]	; (800c338 <HAL_TIM_Base_Start_IT+0xd8>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d004      	beq.n	800c2e0 <HAL_TIM_Base_Start_IT+0x80>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	4a18      	ldr	r2, [pc, #96]	; (800c33c <HAL_TIM_Base_Start_IT+0xdc>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d111      	bne.n	800c304 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	689b      	ldr	r3, [r3, #8]
 800c2e6:	f003 0307 	and.w	r3, r3, #7
 800c2ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2b06      	cmp	r3, #6
 800c2f0:	d010      	beq.n	800c314 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	f042 0201 	orr.w	r2, r2, #1
 800c300:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c302:	e007      	b.n	800c314 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f042 0201 	orr.w	r2, r2, #1
 800c312:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3714      	adds	r7, #20
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	40010000 	.word	0x40010000
 800c328:	40000400 	.word	0x40000400
 800c32c:	40000800 	.word	0x40000800
 800c330:	40000c00 	.word	0x40000c00
 800c334:	40010400 	.word	0x40010400
 800c338:	40014000 	.word	0x40014000
 800c33c:	40001800 	.word	0x40001800

0800c340 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c34e:	2301      	movs	r3, #1
 800c350:	e041      	b.n	800c3d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d106      	bne.n	800c36c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7f8 ff3e 	bl	80051e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	2202      	movs	r2, #2
 800c370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3304      	adds	r3, #4
 800c37c:	4619      	mov	r1, r3
 800c37e:	4610      	mov	r0, r2
 800c380:	f000 fbb0 	bl	800cae4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2201      	movs	r2, #1
 800c388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2201      	movs	r2, #1
 800c390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	2201      	movs	r2, #1
 800c398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	2201      	movs	r2, #1
 800c3a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2201      	movs	r2, #1
 800c3b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2201      	movs	r2, #1
 800c3c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c3d4:	2300      	movs	r3, #0
}
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	3708      	adds	r7, #8
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	bd80      	pop	{r7, pc}
	...

0800c3e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d109      	bne.n	800c404 <HAL_TIM_PWM_Start+0x24>
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	bf14      	ite	ne
 800c3fc:	2301      	movne	r3, #1
 800c3fe:	2300      	moveq	r3, #0
 800c400:	b2db      	uxtb	r3, r3
 800c402:	e022      	b.n	800c44a <HAL_TIM_PWM_Start+0x6a>
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	2b04      	cmp	r3, #4
 800c408:	d109      	bne.n	800c41e <HAL_TIM_PWM_Start+0x3e>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b01      	cmp	r3, #1
 800c414:	bf14      	ite	ne
 800c416:	2301      	movne	r3, #1
 800c418:	2300      	moveq	r3, #0
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	e015      	b.n	800c44a <HAL_TIM_PWM_Start+0x6a>
 800c41e:	683b      	ldr	r3, [r7, #0]
 800c420:	2b08      	cmp	r3, #8
 800c422:	d109      	bne.n	800c438 <HAL_TIM_PWM_Start+0x58>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	2b01      	cmp	r3, #1
 800c42e:	bf14      	ite	ne
 800c430:	2301      	movne	r3, #1
 800c432:	2300      	moveq	r3, #0
 800c434:	b2db      	uxtb	r3, r3
 800c436:	e008      	b.n	800c44a <HAL_TIM_PWM_Start+0x6a>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	2b01      	cmp	r3, #1
 800c442:	bf14      	ite	ne
 800c444:	2301      	movne	r3, #1
 800c446:	2300      	moveq	r3, #0
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d001      	beq.n	800c452 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c44e:	2301      	movs	r3, #1
 800c450:	e07c      	b.n	800c54c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d104      	bne.n	800c462 <HAL_TIM_PWM_Start+0x82>
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	2202      	movs	r2, #2
 800c45c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c460:	e013      	b.n	800c48a <HAL_TIM_PWM_Start+0xaa>
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2b04      	cmp	r3, #4
 800c466:	d104      	bne.n	800c472 <HAL_TIM_PWM_Start+0x92>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2202      	movs	r2, #2
 800c46c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c470:	e00b      	b.n	800c48a <HAL_TIM_PWM_Start+0xaa>
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	2b08      	cmp	r3, #8
 800c476:	d104      	bne.n	800c482 <HAL_TIM_PWM_Start+0xa2>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2202      	movs	r2, #2
 800c47c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c480:	e003      	b.n	800c48a <HAL_TIM_PWM_Start+0xaa>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2202      	movs	r2, #2
 800c486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2201      	movs	r2, #1
 800c490:	6839      	ldr	r1, [r7, #0]
 800c492:	4618      	mov	r0, r3
 800c494:	f000 fe10 	bl	800d0b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a2d      	ldr	r2, [pc, #180]	; (800c554 <HAL_TIM_PWM_Start+0x174>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d004      	beq.n	800c4ac <HAL_TIM_PWM_Start+0xcc>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	4a2c      	ldr	r2, [pc, #176]	; (800c558 <HAL_TIM_PWM_Start+0x178>)
 800c4a8:	4293      	cmp	r3, r2
 800c4aa:	d101      	bne.n	800c4b0 <HAL_TIM_PWM_Start+0xd0>
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e000      	b.n	800c4b2 <HAL_TIM_PWM_Start+0xd2>
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d007      	beq.n	800c4c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c4c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	4a22      	ldr	r2, [pc, #136]	; (800c554 <HAL_TIM_PWM_Start+0x174>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d022      	beq.n	800c516 <HAL_TIM_PWM_Start+0x136>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4d8:	d01d      	beq.n	800c516 <HAL_TIM_PWM_Start+0x136>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	4a1f      	ldr	r2, [pc, #124]	; (800c55c <HAL_TIM_PWM_Start+0x17c>)
 800c4e0:	4293      	cmp	r3, r2
 800c4e2:	d018      	beq.n	800c516 <HAL_TIM_PWM_Start+0x136>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	4a1d      	ldr	r2, [pc, #116]	; (800c560 <HAL_TIM_PWM_Start+0x180>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d013      	beq.n	800c516 <HAL_TIM_PWM_Start+0x136>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	4a1c      	ldr	r2, [pc, #112]	; (800c564 <HAL_TIM_PWM_Start+0x184>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d00e      	beq.n	800c516 <HAL_TIM_PWM_Start+0x136>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	4a16      	ldr	r2, [pc, #88]	; (800c558 <HAL_TIM_PWM_Start+0x178>)
 800c4fe:	4293      	cmp	r3, r2
 800c500:	d009      	beq.n	800c516 <HAL_TIM_PWM_Start+0x136>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a18      	ldr	r2, [pc, #96]	; (800c568 <HAL_TIM_PWM_Start+0x188>)
 800c508:	4293      	cmp	r3, r2
 800c50a:	d004      	beq.n	800c516 <HAL_TIM_PWM_Start+0x136>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	4a16      	ldr	r2, [pc, #88]	; (800c56c <HAL_TIM_PWM_Start+0x18c>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d111      	bne.n	800c53a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	f003 0307 	and.w	r3, r3, #7
 800c520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	2b06      	cmp	r3, #6
 800c526:	d010      	beq.n	800c54a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	f042 0201 	orr.w	r2, r2, #1
 800c536:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c538:	e007      	b.n	800c54a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681a      	ldr	r2, [r3, #0]
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	f042 0201 	orr.w	r2, r2, #1
 800c548:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3710      	adds	r7, #16
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}
 800c554:	40010000 	.word	0x40010000
 800c558:	40010400 	.word	0x40010400
 800c55c:	40000400 	.word	0x40000400
 800c560:	40000800 	.word	0x40000800
 800c564:	40000c00 	.word	0x40000c00
 800c568:	40014000 	.word	0x40014000
 800c56c:	40001800 	.word	0x40001800

0800c570 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	691b      	ldr	r3, [r3, #16]
 800c57e:	f003 0302 	and.w	r3, r3, #2
 800c582:	2b02      	cmp	r3, #2
 800c584:	d122      	bne.n	800c5cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68db      	ldr	r3, [r3, #12]
 800c58c:	f003 0302 	and.w	r3, r3, #2
 800c590:	2b02      	cmp	r3, #2
 800c592:	d11b      	bne.n	800c5cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	f06f 0202 	mvn.w	r2, #2
 800c59c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2201      	movs	r2, #1
 800c5a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	699b      	ldr	r3, [r3, #24]
 800c5aa:	f003 0303 	and.w	r3, r3, #3
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d003      	beq.n	800c5ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5b2:	6878      	ldr	r0, [r7, #4]
 800c5b4:	f000 fa77 	bl	800caa6 <HAL_TIM_IC_CaptureCallback>
 800c5b8:	e005      	b.n	800c5c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 fa69 	bl	800ca92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c5c0:	6878      	ldr	r0, [r7, #4]
 800c5c2:	f000 fa7a 	bl	800caba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	691b      	ldr	r3, [r3, #16]
 800c5d2:	f003 0304 	and.w	r3, r3, #4
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	d122      	bne.n	800c620 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68db      	ldr	r3, [r3, #12]
 800c5e0:	f003 0304 	and.w	r3, r3, #4
 800c5e4:	2b04      	cmp	r3, #4
 800c5e6:	d11b      	bne.n	800c620 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f06f 0204 	mvn.w	r2, #4
 800c5f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2202      	movs	r2, #2
 800c5f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	699b      	ldr	r3, [r3, #24]
 800c5fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 fa4d 	bl	800caa6 <HAL_TIM_IC_CaptureCallback>
 800c60c:	e005      	b.n	800c61a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fa3f 	bl	800ca92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f000 fa50 	bl	800caba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	2200      	movs	r2, #0
 800c61e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	691b      	ldr	r3, [r3, #16]
 800c626:	f003 0308 	and.w	r3, r3, #8
 800c62a:	2b08      	cmp	r3, #8
 800c62c:	d122      	bne.n	800c674 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	68db      	ldr	r3, [r3, #12]
 800c634:	f003 0308 	and.w	r3, r3, #8
 800c638:	2b08      	cmp	r3, #8
 800c63a:	d11b      	bne.n	800c674 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f06f 0208 	mvn.w	r2, #8
 800c644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2204      	movs	r2, #4
 800c64a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	69db      	ldr	r3, [r3, #28]
 800c652:	f003 0303 	and.w	r3, r3, #3
 800c656:	2b00      	cmp	r3, #0
 800c658:	d003      	beq.n	800c662 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c65a:	6878      	ldr	r0, [r7, #4]
 800c65c:	f000 fa23 	bl	800caa6 <HAL_TIM_IC_CaptureCallback>
 800c660:	e005      	b.n	800c66e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 fa15 	bl	800ca92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c668:	6878      	ldr	r0, [r7, #4]
 800c66a:	f000 fa26 	bl	800caba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	691b      	ldr	r3, [r3, #16]
 800c67a:	f003 0310 	and.w	r3, r3, #16
 800c67e:	2b10      	cmp	r3, #16
 800c680:	d122      	bne.n	800c6c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	f003 0310 	and.w	r3, r3, #16
 800c68c:	2b10      	cmp	r3, #16
 800c68e:	d11b      	bne.n	800c6c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f06f 0210 	mvn.w	r2, #16
 800c698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	2208      	movs	r2, #8
 800c69e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	69db      	ldr	r3, [r3, #28]
 800c6a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f9f9 	bl	800caa6 <HAL_TIM_IC_CaptureCallback>
 800c6b4:	e005      	b.n	800c6c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f000 f9eb 	bl	800ca92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f9fc 	bl	800caba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	691b      	ldr	r3, [r3, #16]
 800c6ce:	f003 0301 	and.w	r3, r3, #1
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d10e      	bne.n	800c6f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	68db      	ldr	r3, [r3, #12]
 800c6dc:	f003 0301 	and.w	r3, r3, #1
 800c6e0:	2b01      	cmp	r3, #1
 800c6e2:	d107      	bne.n	800c6f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f06f 0201 	mvn.w	r2, #1
 800c6ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c6ee:	6878      	ldr	r0, [r7, #4]
 800c6f0:	f7f6 ff22 	bl	8003538 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6fe:	2b80      	cmp	r3, #128	; 0x80
 800c700:	d10e      	bne.n	800c720 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c70c:	2b80      	cmp	r3, #128	; 0x80
 800c70e:	d107      	bne.n	800c720 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fdca 	bl	800d2b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c72a:	2b40      	cmp	r3, #64	; 0x40
 800c72c:	d10e      	bne.n	800c74c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	68db      	ldr	r3, [r3, #12]
 800c734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c738:	2b40      	cmp	r3, #64	; 0x40
 800c73a:	d107      	bne.n	800c74c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 f9c1 	bl	800cace <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	691b      	ldr	r3, [r3, #16]
 800c752:	f003 0320 	and.w	r3, r3, #32
 800c756:	2b20      	cmp	r3, #32
 800c758:	d10e      	bne.n	800c778 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	f003 0320 	and.w	r3, r3, #32
 800c764:	2b20      	cmp	r3, #32
 800c766:	d107      	bne.n	800c778 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f06f 0220 	mvn.w	r2, #32
 800c770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fd94 	bl	800d2a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b086      	sub	sp, #24
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c78c:	2300      	movs	r3, #0
 800c78e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c796:	2b01      	cmp	r3, #1
 800c798:	d101      	bne.n	800c79e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c79a:	2302      	movs	r3, #2
 800c79c:	e0ae      	b.n	800c8fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b0c      	cmp	r3, #12
 800c7aa:	f200 809f 	bhi.w	800c8ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c7ae:	a201      	add	r2, pc, #4	; (adr r2, 800c7b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7b4:	0800c7e9 	.word	0x0800c7e9
 800c7b8:	0800c8ed 	.word	0x0800c8ed
 800c7bc:	0800c8ed 	.word	0x0800c8ed
 800c7c0:	0800c8ed 	.word	0x0800c8ed
 800c7c4:	0800c829 	.word	0x0800c829
 800c7c8:	0800c8ed 	.word	0x0800c8ed
 800c7cc:	0800c8ed 	.word	0x0800c8ed
 800c7d0:	0800c8ed 	.word	0x0800c8ed
 800c7d4:	0800c86b 	.word	0x0800c86b
 800c7d8:	0800c8ed 	.word	0x0800c8ed
 800c7dc:	0800c8ed 	.word	0x0800c8ed
 800c7e0:	0800c8ed 	.word	0x0800c8ed
 800c7e4:	0800c8ab 	.word	0x0800c8ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	68b9      	ldr	r1, [r7, #8]
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f000 fa18 	bl	800cc24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	699a      	ldr	r2, [r3, #24]
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f042 0208 	orr.w	r2, r2, #8
 800c802:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	699a      	ldr	r2, [r3, #24]
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	681b      	ldr	r3, [r3, #0]
 800c80e:	f022 0204 	bic.w	r2, r2, #4
 800c812:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	6999      	ldr	r1, [r3, #24]
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	691a      	ldr	r2, [r3, #16]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	430a      	orrs	r2, r1
 800c824:	619a      	str	r2, [r3, #24]
      break;
 800c826:	e064      	b.n	800c8f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	68b9      	ldr	r1, [r7, #8]
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fa68 	bl	800cd04 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	699a      	ldr	r2, [r3, #24]
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c842:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	699a      	ldr	r2, [r3, #24]
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c852:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	6999      	ldr	r1, [r3, #24]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	691b      	ldr	r3, [r3, #16]
 800c85e:	021a      	lsls	r2, r3, #8
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	430a      	orrs	r2, r1
 800c866:	619a      	str	r2, [r3, #24]
      break;
 800c868:	e043      	b.n	800c8f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	68b9      	ldr	r1, [r7, #8]
 800c870:	4618      	mov	r0, r3
 800c872:	f000 fabd 	bl	800cdf0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	69da      	ldr	r2, [r3, #28]
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	f042 0208 	orr.w	r2, r2, #8
 800c884:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	69da      	ldr	r2, [r3, #28]
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f022 0204 	bic.w	r2, r2, #4
 800c894:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	69d9      	ldr	r1, [r3, #28]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	691a      	ldr	r2, [r3, #16]
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	430a      	orrs	r2, r1
 800c8a6:	61da      	str	r2, [r3, #28]
      break;
 800c8a8:	e023      	b.n	800c8f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	68b9      	ldr	r1, [r7, #8]
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	f000 fb11 	bl	800ced8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	69da      	ldr	r2, [r3, #28]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c8c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	69da      	ldr	r2, [r3, #28]
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c8d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	69d9      	ldr	r1, [r3, #28]
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	691b      	ldr	r3, [r3, #16]
 800c8e0:	021a      	lsls	r2, r3, #8
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	430a      	orrs	r2, r1
 800c8e8:	61da      	str	r2, [r3, #28]
      break;
 800c8ea:	e002      	b.n	800c8f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c8f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	3718      	adds	r7, #24
 800c900:	46bd      	mov	sp, r7
 800c902:	bd80      	pop	{r7, pc}

0800c904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
 800c90c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c90e:	2300      	movs	r3, #0
 800c910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d101      	bne.n	800c920 <HAL_TIM_ConfigClockSource+0x1c>
 800c91c:	2302      	movs	r3, #2
 800c91e:	e0b4      	b.n	800ca8a <HAL_TIM_ConfigClockSource+0x186>
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2201      	movs	r2, #1
 800c924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2202      	movs	r2, #2
 800c92c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c938:	68bb      	ldr	r3, [r7, #8]
 800c93a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c93e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c946:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c958:	d03e      	beq.n	800c9d8 <HAL_TIM_ConfigClockSource+0xd4>
 800c95a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c95e:	f200 8087 	bhi.w	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
 800c962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c966:	f000 8086 	beq.w	800ca76 <HAL_TIM_ConfigClockSource+0x172>
 800c96a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c96e:	d87f      	bhi.n	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
 800c970:	2b70      	cmp	r3, #112	; 0x70
 800c972:	d01a      	beq.n	800c9aa <HAL_TIM_ConfigClockSource+0xa6>
 800c974:	2b70      	cmp	r3, #112	; 0x70
 800c976:	d87b      	bhi.n	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
 800c978:	2b60      	cmp	r3, #96	; 0x60
 800c97a:	d050      	beq.n	800ca1e <HAL_TIM_ConfigClockSource+0x11a>
 800c97c:	2b60      	cmp	r3, #96	; 0x60
 800c97e:	d877      	bhi.n	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
 800c980:	2b50      	cmp	r3, #80	; 0x50
 800c982:	d03c      	beq.n	800c9fe <HAL_TIM_ConfigClockSource+0xfa>
 800c984:	2b50      	cmp	r3, #80	; 0x50
 800c986:	d873      	bhi.n	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
 800c988:	2b40      	cmp	r3, #64	; 0x40
 800c98a:	d058      	beq.n	800ca3e <HAL_TIM_ConfigClockSource+0x13a>
 800c98c:	2b40      	cmp	r3, #64	; 0x40
 800c98e:	d86f      	bhi.n	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
 800c990:	2b30      	cmp	r3, #48	; 0x30
 800c992:	d064      	beq.n	800ca5e <HAL_TIM_ConfigClockSource+0x15a>
 800c994:	2b30      	cmp	r3, #48	; 0x30
 800c996:	d86b      	bhi.n	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
 800c998:	2b20      	cmp	r3, #32
 800c99a:	d060      	beq.n	800ca5e <HAL_TIM_ConfigClockSource+0x15a>
 800c99c:	2b20      	cmp	r3, #32
 800c99e:	d867      	bhi.n	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d05c      	beq.n	800ca5e <HAL_TIM_ConfigClockSource+0x15a>
 800c9a4:	2b10      	cmp	r3, #16
 800c9a6:	d05a      	beq.n	800ca5e <HAL_TIM_ConfigClockSource+0x15a>
 800c9a8:	e062      	b.n	800ca70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6818      	ldr	r0, [r3, #0]
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	6899      	ldr	r1, [r3, #8]
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	685a      	ldr	r2, [r3, #4]
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	f000 fb5d 	bl	800d078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	689b      	ldr	r3, [r3, #8]
 800c9c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9c6:	68bb      	ldr	r3, [r7, #8]
 800c9c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c9cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68ba      	ldr	r2, [r7, #8]
 800c9d4:	609a      	str	r2, [r3, #8]
      break;
 800c9d6:	e04f      	b.n	800ca78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6818      	ldr	r0, [r3, #0]
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	6899      	ldr	r1, [r3, #8]
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	685a      	ldr	r2, [r3, #4]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	f000 fb46 	bl	800d078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	689a      	ldr	r2, [r3, #8]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c9fa:	609a      	str	r2, [r3, #8]
      break;
 800c9fc:	e03c      	b.n	800ca78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	6818      	ldr	r0, [r3, #0]
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	6859      	ldr	r1, [r3, #4]
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	461a      	mov	r2, r3
 800ca0c:	f000 faba 	bl	800cf84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	2150      	movs	r1, #80	; 0x50
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 fb13 	bl	800d042 <TIM_ITRx_SetConfig>
      break;
 800ca1c:	e02c      	b.n	800ca78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6818      	ldr	r0, [r3, #0]
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	6859      	ldr	r1, [r3, #4]
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	68db      	ldr	r3, [r3, #12]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	f000 fad9 	bl	800cfe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2160      	movs	r1, #96	; 0x60
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 fb03 	bl	800d042 <TIM_ITRx_SetConfig>
      break;
 800ca3c:	e01c      	b.n	800ca78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6818      	ldr	r0, [r3, #0]
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	6859      	ldr	r1, [r3, #4]
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f000 fa9a 	bl	800cf84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	2140      	movs	r1, #64	; 0x40
 800ca56:	4618      	mov	r0, r3
 800ca58:	f000 faf3 	bl	800d042 <TIM_ITRx_SetConfig>
      break;
 800ca5c:	e00c      	b.n	800ca78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681a      	ldr	r2, [r3, #0]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	4619      	mov	r1, r3
 800ca68:	4610      	mov	r0, r2
 800ca6a:	f000 faea 	bl	800d042 <TIM_ITRx_SetConfig>
      break;
 800ca6e:	e003      	b.n	800ca78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ca70:	2301      	movs	r3, #1
 800ca72:	73fb      	strb	r3, [r7, #15]
      break;
 800ca74:	e000      	b.n	800ca78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ca76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	2201      	movs	r2, #1
 800ca7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2200      	movs	r2, #0
 800ca84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ca88:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}

0800ca92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ca92:	b480      	push	{r7}
 800ca94:	b083      	sub	sp, #12
 800ca96:	af00      	add	r7, sp, #0
 800ca98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ca9a:	bf00      	nop
 800ca9c:	370c      	adds	r7, #12
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa4:	4770      	bx	lr

0800caa6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800caa6:	b480      	push	{r7}
 800caa8:	b083      	sub	sp, #12
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800caae:	bf00      	nop
 800cab0:	370c      	adds	r7, #12
 800cab2:	46bd      	mov	sp, r7
 800cab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab8:	4770      	bx	lr

0800caba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800caba:	b480      	push	{r7}
 800cabc:	b083      	sub	sp, #12
 800cabe:	af00      	add	r7, sp, #0
 800cac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cac2:	bf00      	nop
 800cac4:	370c      	adds	r7, #12
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr

0800cace <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cad6:	bf00      	nop
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr
	...

0800cae4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cae4:	b480      	push	{r7}
 800cae6:	b085      	sub	sp, #20
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
 800caec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	4a40      	ldr	r2, [pc, #256]	; (800cbf8 <TIM_Base_SetConfig+0x114>)
 800caf8:	4293      	cmp	r3, r2
 800cafa:	d013      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb02:	d00f      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	4a3d      	ldr	r2, [pc, #244]	; (800cbfc <TIM_Base_SetConfig+0x118>)
 800cb08:	4293      	cmp	r3, r2
 800cb0a:	d00b      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	4a3c      	ldr	r2, [pc, #240]	; (800cc00 <TIM_Base_SetConfig+0x11c>)
 800cb10:	4293      	cmp	r3, r2
 800cb12:	d007      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a3b      	ldr	r2, [pc, #236]	; (800cc04 <TIM_Base_SetConfig+0x120>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d003      	beq.n	800cb24 <TIM_Base_SetConfig+0x40>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a3a      	ldr	r2, [pc, #232]	; (800cc08 <TIM_Base_SetConfig+0x124>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d108      	bne.n	800cb36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	685b      	ldr	r3, [r3, #4]
 800cb30:	68fa      	ldr	r2, [r7, #12]
 800cb32:	4313      	orrs	r3, r2
 800cb34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	4a2f      	ldr	r2, [pc, #188]	; (800cbf8 <TIM_Base_SetConfig+0x114>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d02b      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb44:	d027      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	4a2c      	ldr	r2, [pc, #176]	; (800cbfc <TIM_Base_SetConfig+0x118>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	d023      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	4a2b      	ldr	r2, [pc, #172]	; (800cc00 <TIM_Base_SetConfig+0x11c>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d01f      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	4a2a      	ldr	r2, [pc, #168]	; (800cc04 <TIM_Base_SetConfig+0x120>)
 800cb5a:	4293      	cmp	r3, r2
 800cb5c:	d01b      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	4a29      	ldr	r2, [pc, #164]	; (800cc08 <TIM_Base_SetConfig+0x124>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	d017      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a28      	ldr	r2, [pc, #160]	; (800cc0c <TIM_Base_SetConfig+0x128>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d013      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	4a27      	ldr	r2, [pc, #156]	; (800cc10 <TIM_Base_SetConfig+0x12c>)
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d00f      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a26      	ldr	r2, [pc, #152]	; (800cc14 <TIM_Base_SetConfig+0x130>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d00b      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a25      	ldr	r2, [pc, #148]	; (800cc18 <TIM_Base_SetConfig+0x134>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d007      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a24      	ldr	r2, [pc, #144]	; (800cc1c <TIM_Base_SetConfig+0x138>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d003      	beq.n	800cb96 <TIM_Base_SetConfig+0xb2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a23      	ldr	r2, [pc, #140]	; (800cc20 <TIM_Base_SetConfig+0x13c>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d108      	bne.n	800cba8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	4313      	orrs	r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	695b      	ldr	r3, [r3, #20]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	689a      	ldr	r2, [r3, #8]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4a0a      	ldr	r2, [pc, #40]	; (800cbf8 <TIM_Base_SetConfig+0x114>)
 800cbd0:	4293      	cmp	r3, r2
 800cbd2:	d003      	beq.n	800cbdc <TIM_Base_SetConfig+0xf8>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	4a0c      	ldr	r2, [pc, #48]	; (800cc08 <TIM_Base_SetConfig+0x124>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d103      	bne.n	800cbe4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	691a      	ldr	r2, [r3, #16]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	615a      	str	r2, [r3, #20]
}
 800cbea:	bf00      	nop
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	40010000 	.word	0x40010000
 800cbfc:	40000400 	.word	0x40000400
 800cc00:	40000800 	.word	0x40000800
 800cc04:	40000c00 	.word	0x40000c00
 800cc08:	40010400 	.word	0x40010400
 800cc0c:	40014000 	.word	0x40014000
 800cc10:	40014400 	.word	0x40014400
 800cc14:	40014800 	.word	0x40014800
 800cc18:	40001800 	.word	0x40001800
 800cc1c:	40001c00 	.word	0x40001c00
 800cc20:	40002000 	.word	0x40002000

0800cc24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc24:	b480      	push	{r7}
 800cc26:	b087      	sub	sp, #28
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
 800cc2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a1b      	ldr	r3, [r3, #32]
 800cc32:	f023 0201 	bic.w	r2, r3, #1
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	699b      	ldr	r3, [r3, #24]
 800cc4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f023 0303 	bic.w	r3, r3, #3
 800cc5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68fa      	ldr	r2, [r7, #12]
 800cc62:	4313      	orrs	r3, r2
 800cc64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f023 0302 	bic.w	r3, r3, #2
 800cc6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	689b      	ldr	r3, [r3, #8]
 800cc72:	697a      	ldr	r2, [r7, #20]
 800cc74:	4313      	orrs	r3, r2
 800cc76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a20      	ldr	r2, [pc, #128]	; (800ccfc <TIM_OC1_SetConfig+0xd8>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d003      	beq.n	800cc88 <TIM_OC1_SetConfig+0x64>
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4a1f      	ldr	r2, [pc, #124]	; (800cd00 <TIM_OC1_SetConfig+0xdc>)
 800cc84:	4293      	cmp	r3, r2
 800cc86:	d10c      	bne.n	800cca2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	f023 0308 	bic.w	r3, r3, #8
 800cc8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	f023 0304 	bic.w	r3, r3, #4
 800cca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a15      	ldr	r2, [pc, #84]	; (800ccfc <TIM_OC1_SetConfig+0xd8>)
 800cca6:	4293      	cmp	r3, r2
 800cca8:	d003      	beq.n	800ccb2 <TIM_OC1_SetConfig+0x8e>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	4a14      	ldr	r2, [pc, #80]	; (800cd00 <TIM_OC1_SetConfig+0xdc>)
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	d111      	bne.n	800ccd6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ccb2:	693b      	ldr	r3, [r7, #16]
 800ccb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ccb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ccba:	693b      	ldr	r3, [r7, #16]
 800ccbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ccc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	695b      	ldr	r3, [r3, #20]
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	699b      	ldr	r3, [r3, #24]
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	693a      	ldr	r2, [r7, #16]
 800ccda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	685a      	ldr	r2, [r3, #4]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	697a      	ldr	r2, [r7, #20]
 800ccee:	621a      	str	r2, [r3, #32]
}
 800ccf0:	bf00      	nop
 800ccf2:	371c      	adds	r7, #28
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccfa:	4770      	bx	lr
 800ccfc:	40010000 	.word	0x40010000
 800cd00:	40010400 	.word	0x40010400

0800cd04 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd04:	b480      	push	{r7}
 800cd06:	b087      	sub	sp, #28
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6a1b      	ldr	r3, [r3, #32]
 800cd12:	f023 0210 	bic.w	r2, r3, #16
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	6a1b      	ldr	r3, [r3, #32]
 800cd1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	685b      	ldr	r3, [r3, #4]
 800cd24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	699b      	ldr	r3, [r3, #24]
 800cd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	021b      	lsls	r3, r3, #8
 800cd42:	68fa      	ldr	r2, [r7, #12]
 800cd44:	4313      	orrs	r3, r2
 800cd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd48:	697b      	ldr	r3, [r7, #20]
 800cd4a:	f023 0320 	bic.w	r3, r3, #32
 800cd4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	689b      	ldr	r3, [r3, #8]
 800cd54:	011b      	lsls	r3, r3, #4
 800cd56:	697a      	ldr	r2, [r7, #20]
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	4a22      	ldr	r2, [pc, #136]	; (800cde8 <TIM_OC2_SetConfig+0xe4>)
 800cd60:	4293      	cmp	r3, r2
 800cd62:	d003      	beq.n	800cd6c <TIM_OC2_SetConfig+0x68>
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	4a21      	ldr	r2, [pc, #132]	; (800cdec <TIM_OC2_SetConfig+0xe8>)
 800cd68:	4293      	cmp	r3, r2
 800cd6a:	d10d      	bne.n	800cd88 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cd72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	68db      	ldr	r3, [r3, #12]
 800cd78:	011b      	lsls	r3, r3, #4
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	4313      	orrs	r3, r2
 800cd7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a17      	ldr	r2, [pc, #92]	; (800cde8 <TIM_OC2_SetConfig+0xe4>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d003      	beq.n	800cd98 <TIM_OC2_SetConfig+0x94>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a16      	ldr	r2, [pc, #88]	; (800cdec <TIM_OC2_SetConfig+0xe8>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d113      	bne.n	800cdc0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cd98:	693b      	ldr	r3, [r7, #16]
 800cd9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cd9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cda0:	693b      	ldr	r3, [r7, #16]
 800cda2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cda6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	695b      	ldr	r3, [r3, #20]
 800cdac:	009b      	lsls	r3, r3, #2
 800cdae:	693a      	ldr	r2, [r7, #16]
 800cdb0:	4313      	orrs	r3, r2
 800cdb2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	699b      	ldr	r3, [r3, #24]
 800cdb8:	009b      	lsls	r3, r3, #2
 800cdba:	693a      	ldr	r2, [r7, #16]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	693a      	ldr	r2, [r7, #16]
 800cdc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68fa      	ldr	r2, [r7, #12]
 800cdca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	685a      	ldr	r2, [r3, #4]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	621a      	str	r2, [r3, #32]
}
 800cdda:	bf00      	nop
 800cddc:	371c      	adds	r7, #28
 800cdde:	46bd      	mov	sp, r7
 800cde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde4:	4770      	bx	lr
 800cde6:	bf00      	nop
 800cde8:	40010000 	.word	0x40010000
 800cdec:	40010400 	.word	0x40010400

0800cdf0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
 800cdf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	6a1b      	ldr	r3, [r3, #32]
 800cdfe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6a1b      	ldr	r3, [r3, #32]
 800ce0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	69db      	ldr	r3, [r3, #28]
 800ce16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	f023 0303 	bic.w	r3, r3, #3
 800ce26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	68fa      	ldr	r2, [r7, #12]
 800ce2e:	4313      	orrs	r3, r2
 800ce30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce3a:	683b      	ldr	r3, [r7, #0]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	021b      	lsls	r3, r3, #8
 800ce40:	697a      	ldr	r2, [r7, #20]
 800ce42:	4313      	orrs	r3, r2
 800ce44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	4a21      	ldr	r2, [pc, #132]	; (800ced0 <TIM_OC3_SetConfig+0xe0>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d003      	beq.n	800ce56 <TIM_OC3_SetConfig+0x66>
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4a20      	ldr	r2, [pc, #128]	; (800ced4 <TIM_OC3_SetConfig+0xe4>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d10d      	bne.n	800ce72 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	021b      	lsls	r3, r3, #8
 800ce64:	697a      	ldr	r2, [r7, #20]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ce70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	4a16      	ldr	r2, [pc, #88]	; (800ced0 <TIM_OC3_SetConfig+0xe0>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d003      	beq.n	800ce82 <TIM_OC3_SetConfig+0x92>
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	4a15      	ldr	r2, [pc, #84]	; (800ced4 <TIM_OC3_SetConfig+0xe4>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d113      	bne.n	800ceaa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ce8a:	693b      	ldr	r3, [r7, #16]
 800ce8c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ce90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	695b      	ldr	r3, [r3, #20]
 800ce96:	011b      	lsls	r3, r3, #4
 800ce98:	693a      	ldr	r2, [r7, #16]
 800ce9a:	4313      	orrs	r3, r2
 800ce9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	699b      	ldr	r3, [r3, #24]
 800cea2:	011b      	lsls	r3, r3, #4
 800cea4:	693a      	ldr	r2, [r7, #16]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	68fa      	ldr	r2, [r7, #12]
 800ceb4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	685a      	ldr	r2, [r3, #4]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	697a      	ldr	r2, [r7, #20]
 800cec2:	621a      	str	r2, [r3, #32]
}
 800cec4:	bf00      	nop
 800cec6:	371c      	adds	r7, #28
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr
 800ced0:	40010000 	.word	0x40010000
 800ced4:	40010400 	.word	0x40010400

0800ced8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b087      	sub	sp, #28
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
 800cee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6a1b      	ldr	r3, [r3, #32]
 800cee6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6a1b      	ldr	r3, [r3, #32]
 800cef2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	685b      	ldr	r3, [r3, #4]
 800cef8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	69db      	ldr	r3, [r3, #28]
 800cefe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	021b      	lsls	r3, r3, #8
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf1c:	693b      	ldr	r3, [r7, #16]
 800cf1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf24:	683b      	ldr	r3, [r7, #0]
 800cf26:	689b      	ldr	r3, [r3, #8]
 800cf28:	031b      	lsls	r3, r3, #12
 800cf2a:	693a      	ldr	r2, [r7, #16]
 800cf2c:	4313      	orrs	r3, r2
 800cf2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	4a12      	ldr	r2, [pc, #72]	; (800cf7c <TIM_OC4_SetConfig+0xa4>)
 800cf34:	4293      	cmp	r3, r2
 800cf36:	d003      	beq.n	800cf40 <TIM_OC4_SetConfig+0x68>
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	4a11      	ldr	r2, [pc, #68]	; (800cf80 <TIM_OC4_SetConfig+0xa8>)
 800cf3c:	4293      	cmp	r3, r2
 800cf3e:	d109      	bne.n	800cf54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	695b      	ldr	r3, [r3, #20]
 800cf4c:	019b      	lsls	r3, r3, #6
 800cf4e:	697a      	ldr	r2, [r7, #20]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	697a      	ldr	r2, [r7, #20]
 800cf58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685a      	ldr	r2, [r3, #4]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	693a      	ldr	r2, [r7, #16]
 800cf6c:	621a      	str	r2, [r3, #32]
}
 800cf6e:	bf00      	nop
 800cf70:	371c      	adds	r7, #28
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	40010000 	.word	0x40010000
 800cf80:	40010400 	.word	0x40010400

0800cf84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b087      	sub	sp, #28
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	6a1b      	ldr	r3, [r3, #32]
 800cf94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	6a1b      	ldr	r3, [r3, #32]
 800cf9a:	f023 0201 	bic.w	r2, r3, #1
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	699b      	ldr	r3, [r3, #24]
 800cfa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	011b      	lsls	r3, r3, #4
 800cfb4:	693a      	ldr	r2, [r7, #16]
 800cfb6:	4313      	orrs	r3, r2
 800cfb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfba:	697b      	ldr	r3, [r7, #20]
 800cfbc:	f023 030a 	bic.w	r3, r3, #10
 800cfc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	68bb      	ldr	r3, [r7, #8]
 800cfc6:	4313      	orrs	r3, r2
 800cfc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	693a      	ldr	r2, [r7, #16]
 800cfce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	697a      	ldr	r2, [r7, #20]
 800cfd4:	621a      	str	r2, [r3, #32]
}
 800cfd6:	bf00      	nop
 800cfd8:	371c      	adds	r7, #28
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfe2:	b480      	push	{r7}
 800cfe4:	b087      	sub	sp, #28
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	60f8      	str	r0, [r7, #12]
 800cfea:	60b9      	str	r1, [r7, #8]
 800cfec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6a1b      	ldr	r3, [r3, #32]
 800cff2:	f023 0210 	bic.w	r2, r3, #16
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	699b      	ldr	r3, [r3, #24]
 800cffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	6a1b      	ldr	r3, [r3, #32]
 800d004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d00c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	031b      	lsls	r3, r3, #12
 800d012:	697a      	ldr	r2, [r7, #20]
 800d014:	4313      	orrs	r3, r2
 800d016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d01e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d020:	68bb      	ldr	r3, [r7, #8]
 800d022:	011b      	lsls	r3, r3, #4
 800d024:	693a      	ldr	r2, [r7, #16]
 800d026:	4313      	orrs	r3, r2
 800d028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	697a      	ldr	r2, [r7, #20]
 800d02e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	693a      	ldr	r2, [r7, #16]
 800d034:	621a      	str	r2, [r3, #32]
}
 800d036:	bf00      	nop
 800d038:	371c      	adds	r7, #28
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d042:	b480      	push	{r7}
 800d044:	b085      	sub	sp, #20
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
 800d04a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	689b      	ldr	r3, [r3, #8]
 800d050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	4313      	orrs	r3, r2
 800d060:	f043 0307 	orr.w	r3, r3, #7
 800d064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	68fa      	ldr	r2, [r7, #12]
 800d06a:	609a      	str	r2, [r3, #8]
}
 800d06c:	bf00      	nop
 800d06e:	3714      	adds	r7, #20
 800d070:	46bd      	mov	sp, r7
 800d072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d076:	4770      	bx	lr

0800d078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d078:	b480      	push	{r7}
 800d07a:	b087      	sub	sp, #28
 800d07c:	af00      	add	r7, sp, #0
 800d07e:	60f8      	str	r0, [r7, #12]
 800d080:	60b9      	str	r1, [r7, #8]
 800d082:	607a      	str	r2, [r7, #4]
 800d084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	689b      	ldr	r3, [r3, #8]
 800d08a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d094:	683b      	ldr	r3, [r7, #0]
 800d096:	021a      	lsls	r2, r3, #8
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	431a      	orrs	r2, r3
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	4313      	orrs	r3, r2
 800d0a0:	697a      	ldr	r2, [r7, #20]
 800d0a2:	4313      	orrs	r3, r2
 800d0a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	697a      	ldr	r2, [r7, #20]
 800d0aa:	609a      	str	r2, [r3, #8]
}
 800d0ac:	bf00      	nop
 800d0ae:	371c      	adds	r7, #28
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b6:	4770      	bx	lr

0800d0b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d0b8:	b480      	push	{r7}
 800d0ba:	b087      	sub	sp, #28
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	60f8      	str	r0, [r7, #12]
 800d0c0:	60b9      	str	r1, [r7, #8]
 800d0c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	f003 031f 	and.w	r3, r3, #31
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	fa02 f303 	lsl.w	r3, r2, r3
 800d0d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6a1a      	ldr	r2, [r3, #32]
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	43db      	mvns	r3, r3
 800d0da:	401a      	ands	r2, r3
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	6a1a      	ldr	r2, [r3, #32]
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	f003 031f 	and.w	r3, r3, #31
 800d0ea:	6879      	ldr	r1, [r7, #4]
 800d0ec:	fa01 f303 	lsl.w	r3, r1, r3
 800d0f0:	431a      	orrs	r2, r3
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	621a      	str	r2, [r3, #32]
}
 800d0f6:	bf00      	nop
 800d0f8:	371c      	adds	r7, #28
 800d0fa:	46bd      	mov	sp, r7
 800d0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d100:	4770      	bx	lr
	...

0800d104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d104:	b480      	push	{r7}
 800d106:	b085      	sub	sp, #20
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
 800d10c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d114:	2b01      	cmp	r3, #1
 800d116:	d101      	bne.n	800d11c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d118:	2302      	movs	r3, #2
 800d11a:	e05a      	b.n	800d1d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	2201      	movs	r2, #1
 800d120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2202      	movs	r2, #2
 800d128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68fa      	ldr	r2, [r7, #12]
 800d14a:	4313      	orrs	r3, r2
 800d14c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	68fa      	ldr	r2, [r7, #12]
 800d154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	4a21      	ldr	r2, [pc, #132]	; (800d1e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d15c:	4293      	cmp	r3, r2
 800d15e:	d022      	beq.n	800d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d168:	d01d      	beq.n	800d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a1d      	ldr	r2, [pc, #116]	; (800d1e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d018      	beq.n	800d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a1b      	ldr	r2, [pc, #108]	; (800d1e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d013      	beq.n	800d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a1a      	ldr	r2, [pc, #104]	; (800d1ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d00e      	beq.n	800d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	4a18      	ldr	r2, [pc, #96]	; (800d1f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d18e:	4293      	cmp	r3, r2
 800d190:	d009      	beq.n	800d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4a17      	ldr	r2, [pc, #92]	; (800d1f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d198:	4293      	cmp	r3, r2
 800d19a:	d004      	beq.n	800d1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	4a15      	ldr	r2, [pc, #84]	; (800d1f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d1a2:	4293      	cmp	r3, r2
 800d1a4:	d10c      	bne.n	800d1c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d1a6:	68bb      	ldr	r3, [r7, #8]
 800d1a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	685b      	ldr	r3, [r3, #4]
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	68ba      	ldr	r2, [r7, #8]
 800d1be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2201      	movs	r2, #1
 800d1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	40010000 	.word	0x40010000
 800d1e4:	40000400 	.word	0x40000400
 800d1e8:	40000800 	.word	0x40000800
 800d1ec:	40000c00 	.word	0x40000c00
 800d1f0:	40010400 	.word	0x40010400
 800d1f4:	40014000 	.word	0x40014000
 800d1f8:	40001800 	.word	0x40001800

0800d1fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	b085      	sub	sp, #20
 800d200:	af00      	add	r7, sp, #0
 800d202:	6078      	str	r0, [r7, #4]
 800d204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d206:	2300      	movs	r3, #0
 800d208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d210:	2b01      	cmp	r3, #1
 800d212:	d101      	bne.n	800d218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d214:	2302      	movs	r3, #2
 800d216:	e03d      	b.n	800d294 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	2201      	movs	r2, #1
 800d21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	4313      	orrs	r3, r2
 800d22c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	4313      	orrs	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	4313      	orrs	r3, r2
 800d248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d250:	683b      	ldr	r3, [r7, #0]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	4313      	orrs	r3, r2
 800d256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d25e:	683b      	ldr	r3, [r7, #0]
 800d260:	691b      	ldr	r3, [r3, #16]
 800d262:	4313      	orrs	r3, r2
 800d264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	695b      	ldr	r3, [r3, #20]
 800d270:	4313      	orrs	r3, r2
 800d272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	69db      	ldr	r3, [r3, #28]
 800d27e:	4313      	orrs	r3, r2
 800d280:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	68fa      	ldr	r2, [r7, #12]
 800d288:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d292:	2300      	movs	r3, #0
}
 800d294:	4618      	mov	r0, r3
 800d296:	3714      	adds	r7, #20
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d2a8:	bf00      	nop
 800d2aa:	370c      	adds	r7, #12
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b2:	4770      	bx	lr

0800d2b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b083      	sub	sp, #12
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d2bc:	bf00      	nop
 800d2be:	370c      	adds	r7, #12
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr

0800d2c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d101      	bne.n	800d2da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d2d6:	2301      	movs	r3, #1
 800d2d8:	e03f      	b.n	800d35a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d106      	bne.n	800d2f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7f8 f866 	bl	80053c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2224      	movs	r2, #36	; 0x24
 800d2f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	68da      	ldr	r2, [r3, #12]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d30a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d30c:	6878      	ldr	r0, [r7, #4]
 800d30e:	f000 ff43 	bl	800e198 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	681b      	ldr	r3, [r3, #0]
 800d316:	691a      	ldr	r2, [r3, #16]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	695a      	ldr	r2, [r3, #20]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	68da      	ldr	r2, [r3, #12]
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	2200      	movs	r2, #0
 800d346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2220      	movs	r2, #32
 800d34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2220      	movs	r2, #32
 800d354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800d358:	2300      	movs	r3, #0
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3708      	adds	r7, #8
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
	...

0800d364 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	b08c      	sub	sp, #48	; 0x30
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	4613      	mov	r3, r2
 800d370:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	2b20      	cmp	r3, #32
 800d37c:	d165      	bne.n	800d44a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d002      	beq.n	800d38a <HAL_UART_Transmit_DMA+0x26>
 800d384:	88fb      	ldrh	r3, [r7, #6]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e05e      	b.n	800d44c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d394:	2b01      	cmp	r3, #1
 800d396:	d101      	bne.n	800d39c <HAL_UART_Transmit_DMA+0x38>
 800d398:	2302      	movs	r3, #2
 800d39a:	e057      	b.n	800d44c <HAL_UART_Transmit_DMA+0xe8>
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2201      	movs	r2, #1
 800d3a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800d3a4:	68ba      	ldr	r2, [r7, #8]
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	88fa      	ldrh	r2, [r7, #6]
 800d3ae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	88fa      	ldrh	r2, [r7, #6]
 800d3b4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2221      	movs	r2, #33	; 0x21
 800d3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c8:	4a22      	ldr	r2, [pc, #136]	; (800d454 <HAL_UART_Transmit_DMA+0xf0>)
 800d3ca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d0:	4a21      	ldr	r2, [pc, #132]	; (800d458 <HAL_UART_Transmit_DMA+0xf4>)
 800d3d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3d8:	4a20      	ldr	r2, [pc, #128]	; (800d45c <HAL_UART_Transmit_DMA+0xf8>)
 800d3da:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800d3e4:	f107 0308 	add.w	r3, r7, #8
 800d3e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	6819      	ldr	r1, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	3304      	adds	r3, #4
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	88fb      	ldrh	r3, [r7, #6]
 800d3fc:	f7fa fd02 	bl	8007e04 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d408:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2200      	movs	r2, #0
 800d40e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	3314      	adds	r3, #20
 800d418:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d41a:	69bb      	ldr	r3, [r7, #24]
 800d41c:	e853 3f00 	ldrex	r3, [r3]
 800d420:	617b      	str	r3, [r7, #20]
   return(result);
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d428:	62bb      	str	r3, [r7, #40]	; 0x28
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	3314      	adds	r3, #20
 800d430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d432:	627a      	str	r2, [r7, #36]	; 0x24
 800d434:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d436:	6a39      	ldr	r1, [r7, #32]
 800d438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d43a:	e841 2300 	strex	r3, r2, [r1]
 800d43e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d1e5      	bne.n	800d412 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	e000      	b.n	800d44c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800d44a:	2302      	movs	r3, #2
  }
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3730      	adds	r7, #48	; 0x30
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}
 800d454:	0800da31 	.word	0x0800da31
 800d458:	0800dacb 	.word	0x0800dacb
 800d45c:	0800dc43 	.word	0x0800dc43

0800d460 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d460:	b580      	push	{r7, lr}
 800d462:	b084      	sub	sp, #16
 800d464:	af00      	add	r7, sp, #0
 800d466:	60f8      	str	r0, [r7, #12]
 800d468:	60b9      	str	r1, [r7, #8]
 800d46a:	4613      	mov	r3, r2
 800d46c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b20      	cmp	r3, #32
 800d478:	d11d      	bne.n	800d4b6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d002      	beq.n	800d486 <HAL_UART_Receive_DMA+0x26>
 800d480:	88fb      	ldrh	r3, [r7, #6]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e016      	b.n	800d4b8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d490:	2b01      	cmp	r3, #1
 800d492:	d101      	bne.n	800d498 <HAL_UART_Receive_DMA+0x38>
 800d494:	2302      	movs	r3, #2
 800d496:	e00f      	b.n	800d4b8 <HAL_UART_Receive_DMA+0x58>
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	2201      	movs	r2, #1
 800d49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d4a6:	88fb      	ldrh	r3, [r7, #6]
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	68b9      	ldr	r1, [r7, #8]
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f000 fc13 	bl	800dcd8 <UART_Start_Receive_DMA>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	e000      	b.n	800d4b8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800d4b6:	2302      	movs	r3, #2
  }
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3710      	adds	r7, #16
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b0ba      	sub	sp, #232	; 0xe8
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	695b      	ldr	r3, [r3, #20]
 800d4e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d4ec:	2300      	movs	r3, #0
 800d4ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d4f6:	f003 030f 	and.w	r3, r3, #15
 800d4fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d4fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d502:	2b00      	cmp	r3, #0
 800d504:	d10f      	bne.n	800d526 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d50a:	f003 0320 	and.w	r3, r3, #32
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d009      	beq.n	800d526 <HAL_UART_IRQHandler+0x66>
 800d512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d516:	f003 0320 	and.w	r3, r3, #32
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d003      	beq.n	800d526 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 fd7f 	bl	800e022 <UART_Receive_IT>
      return;
 800d524:	e256      	b.n	800d9d4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f000 80de 	beq.w	800d6ec <HAL_UART_IRQHandler+0x22c>
 800d530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d534:	f003 0301 	and.w	r3, r3, #1
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d106      	bne.n	800d54a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d53c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d540:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d544:	2b00      	cmp	r3, #0
 800d546:	f000 80d1 	beq.w	800d6ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d54a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d54e:	f003 0301 	and.w	r3, r3, #1
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00b      	beq.n	800d56e <HAL_UART_IRQHandler+0xae>
 800d556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d55a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d005      	beq.n	800d56e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d566:	f043 0201 	orr.w	r2, r3, #1
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d56e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d572:	f003 0304 	and.w	r3, r3, #4
 800d576:	2b00      	cmp	r3, #0
 800d578:	d00b      	beq.n	800d592 <HAL_UART_IRQHandler+0xd2>
 800d57a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d57e:	f003 0301 	and.w	r3, r3, #1
 800d582:	2b00      	cmp	r3, #0
 800d584:	d005      	beq.n	800d592 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58a:	f043 0202 	orr.w	r2, r3, #2
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d596:	f003 0302 	and.w	r3, r3, #2
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d00b      	beq.n	800d5b6 <HAL_UART_IRQHandler+0xf6>
 800d59e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5a2:	f003 0301 	and.w	r3, r3, #1
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d005      	beq.n	800d5b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ae:	f043 0204 	orr.w	r2, r3, #4
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d5b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ba:	f003 0308 	and.w	r3, r3, #8
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d011      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x126>
 800d5c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5c6:	f003 0320 	and.w	r3, r3, #32
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d105      	bne.n	800d5da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d5ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5d2:	f003 0301 	and.w	r3, r3, #1
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d005      	beq.n	800d5e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5de:	f043 0208 	orr.w	r2, r3, #8
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	f000 81ed 	beq.w	800d9ca <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d5f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5f4:	f003 0320 	and.w	r3, r3, #32
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d008      	beq.n	800d60e <HAL_UART_IRQHandler+0x14e>
 800d5fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d600:	f003 0320 	and.w	r3, r3, #32
 800d604:	2b00      	cmp	r3, #0
 800d606:	d002      	beq.n	800d60e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fd0a 	bl	800e022 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	695b      	ldr	r3, [r3, #20]
 800d614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d618:	2b40      	cmp	r3, #64	; 0x40
 800d61a:	bf0c      	ite	eq
 800d61c:	2301      	moveq	r3, #1
 800d61e:	2300      	movne	r3, #0
 800d620:	b2db      	uxtb	r3, r3
 800d622:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d62a:	f003 0308 	and.w	r3, r3, #8
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d103      	bne.n	800d63a <HAL_UART_IRQHandler+0x17a>
 800d632:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d636:	2b00      	cmp	r3, #0
 800d638:	d04f      	beq.n	800d6da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f000 fc12 	bl	800de64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	695b      	ldr	r3, [r3, #20]
 800d646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d64a:	2b40      	cmp	r3, #64	; 0x40
 800d64c:	d141      	bne.n	800d6d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	3314      	adds	r3, #20
 800d654:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d658:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d65c:	e853 3f00 	ldrex	r3, [r3]
 800d660:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d664:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d66c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	3314      	adds	r3, #20
 800d676:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d67a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d67e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d682:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d686:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d692:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d1d9      	bne.n	800d64e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d013      	beq.n	800d6ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6a6:	4a7d      	ldr	r2, [pc, #500]	; (800d89c <HAL_UART_IRQHandler+0x3dc>)
 800d6a8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7fa fc70 	bl	8007f94 <HAL_DMA_Abort_IT>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d016      	beq.n	800d6e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6c0:	687a      	ldr	r2, [r7, #4]
 800d6c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800d6c4:	4610      	mov	r0, r2
 800d6c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6c8:	e00e      	b.n	800d6e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 f99a 	bl	800da04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6d0:	e00a      	b.n	800d6e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f996 	bl	800da04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6d8:	e006      	b.n	800d6e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f000 f992 	bl	800da04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800d6e6:	e170      	b.n	800d9ca <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6e8:	bf00      	nop
    return;
 800d6ea:	e16e      	b.n	800d9ca <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f0:	2b01      	cmp	r3, #1
 800d6f2:	f040 814a 	bne.w	800d98a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d6f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d6fa:	f003 0310 	and.w	r3, r3, #16
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	f000 8143 	beq.w	800d98a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d708:	f003 0310 	and.w	r3, r3, #16
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	f000 813c 	beq.w	800d98a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d712:	2300      	movs	r3, #0
 800d714:	60bb      	str	r3, [r7, #8]
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	60bb      	str	r3, [r7, #8]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	681b      	ldr	r3, [r3, #0]
 800d722:	685b      	ldr	r3, [r3, #4]
 800d724:	60bb      	str	r3, [r7, #8]
 800d726:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	695b      	ldr	r3, [r3, #20]
 800d72e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d732:	2b40      	cmp	r3, #64	; 0x40
 800d734:	f040 80b4 	bne.w	800d8a0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d744:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d748:	2b00      	cmp	r3, #0
 800d74a:	f000 8140 	beq.w	800d9ce <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d752:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d756:	429a      	cmp	r2, r3
 800d758:	f080 8139 	bcs.w	800d9ce <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d762:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d768:	69db      	ldr	r3, [r3, #28]
 800d76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d76e:	f000 8088 	beq.w	800d882 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	330c      	adds	r3, #12
 800d778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d780:	e853 3f00 	ldrex	r3, [r3]
 800d784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d78c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d790:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	330c      	adds	r3, #12
 800d79a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d79e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d7a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7a6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d7aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d7ae:	e841 2300 	strex	r3, r2, [r1]
 800d7b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d7b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1d9      	bne.n	800d772 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3314      	adds	r3, #20
 800d7c4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7c8:	e853 3f00 	ldrex	r3, [r3]
 800d7cc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d7ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d7d0:	f023 0301 	bic.w	r3, r3, #1
 800d7d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	3314      	adds	r3, #20
 800d7de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d7e2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d7e6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d7ea:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d7ee:	e841 2300 	strex	r3, r2, [r1]
 800d7f2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d7f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d1e1      	bne.n	800d7be <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	3314      	adds	r3, #20
 800d800:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d804:	e853 3f00 	ldrex	r3, [r3]
 800d808:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d80a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d80c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	3314      	adds	r3, #20
 800d81a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d81e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d820:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d822:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d824:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d826:	e841 2300 	strex	r3, r2, [r1]
 800d82a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d82c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d1e3      	bne.n	800d7fa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	2220      	movs	r2, #32
 800d836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2200      	movs	r2, #0
 800d83e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	330c      	adds	r3, #12
 800d846:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d84a:	e853 3f00 	ldrex	r3, [r3]
 800d84e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d850:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d852:	f023 0310 	bic.w	r3, r3, #16
 800d856:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	330c      	adds	r3, #12
 800d860:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d864:	65ba      	str	r2, [r7, #88]	; 0x58
 800d866:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d86a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d86c:	e841 2300 	strex	r3, r2, [r1]
 800d870:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1e3      	bne.n	800d840 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87c:	4618      	mov	r0, r3
 800d87e:	f7fa fb19 	bl	8007eb4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d88a:	b29b      	uxth	r3, r3
 800d88c:	1ad3      	subs	r3, r2, r3
 800d88e:	b29b      	uxth	r3, r3
 800d890:	4619      	mov	r1, r3
 800d892:	6878      	ldr	r0, [r7, #4]
 800d894:	f000 f8c0 	bl	800da18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d898:	e099      	b.n	800d9ce <HAL_UART_IRQHandler+0x50e>
 800d89a:	bf00      	nop
 800d89c:	0800df2b 	.word	0x0800df2b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d8a8:	b29b      	uxth	r3, r3
 800d8aa:	1ad3      	subs	r3, r2, r3
 800d8ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f000 808b 	beq.w	800d9d2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800d8bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 8086 	beq.w	800d9d2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	330c      	adds	r3, #12
 800d8cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d8d0:	e853 3f00 	ldrex	r3, [r3]
 800d8d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d8d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d8dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	330c      	adds	r3, #12
 800d8e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d8ea:	647a      	str	r2, [r7, #68]	; 0x44
 800d8ec:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d8f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d8f2:	e841 2300 	strex	r3, r2, [r1]
 800d8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d8f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d1e3      	bne.n	800d8c6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	3314      	adds	r3, #20
 800d904:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d908:	e853 3f00 	ldrex	r3, [r3]
 800d90c:	623b      	str	r3, [r7, #32]
   return(result);
 800d90e:	6a3b      	ldr	r3, [r7, #32]
 800d910:	f023 0301 	bic.w	r3, r3, #1
 800d914:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	3314      	adds	r3, #20
 800d91e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d922:	633a      	str	r2, [r7, #48]	; 0x30
 800d924:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d926:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d92a:	e841 2300 	strex	r3, r2, [r1]
 800d92e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1e3      	bne.n	800d8fe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2220      	movs	r2, #32
 800d93a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2200      	movs	r2, #0
 800d942:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	330c      	adds	r3, #12
 800d94a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d94c:	693b      	ldr	r3, [r7, #16]
 800d94e:	e853 3f00 	ldrex	r3, [r3]
 800d952:	60fb      	str	r3, [r7, #12]
   return(result);
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	f023 0310 	bic.w	r3, r3, #16
 800d95a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	330c      	adds	r3, #12
 800d964:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d968:	61fa      	str	r2, [r7, #28]
 800d96a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d96c:	69b9      	ldr	r1, [r7, #24]
 800d96e:	69fa      	ldr	r2, [r7, #28]
 800d970:	e841 2300 	strex	r3, r2, [r1]
 800d974:	617b      	str	r3, [r7, #20]
   return(result);
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1e3      	bne.n	800d944 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d97c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d980:	4619      	mov	r1, r3
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 f848 	bl	800da18 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d988:	e023      	b.n	800d9d2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d992:	2b00      	cmp	r3, #0
 800d994:	d009      	beq.n	800d9aa <HAL_UART_IRQHandler+0x4ea>
 800d996:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d99a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d003      	beq.n	800d9aa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fad5 	bl	800df52 <UART_Transmit_IT>
    return;
 800d9a8:	e014      	b.n	800d9d4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d9aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00e      	beq.n	800d9d4 <HAL_UART_IRQHandler+0x514>
 800d9b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d008      	beq.n	800d9d4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 fb15 	bl	800dff2 <UART_EndTransmit_IT>
    return;
 800d9c8:	e004      	b.n	800d9d4 <HAL_UART_IRQHandler+0x514>
    return;
 800d9ca:	bf00      	nop
 800d9cc:	e002      	b.n	800d9d4 <HAL_UART_IRQHandler+0x514>
      return;
 800d9ce:	bf00      	nop
 800d9d0:	e000      	b.n	800d9d4 <HAL_UART_IRQHandler+0x514>
      return;
 800d9d2:	bf00      	nop
  }
}
 800d9d4:	37e8      	adds	r7, #232	; 0xe8
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd80      	pop	{r7, pc}
 800d9da:	bf00      	nop

0800d9dc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b083      	sub	sp, #12
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800d9e4:	bf00      	nop
 800d9e6:	370c      	adds	r7, #12
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr

0800d9f0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800d9f8:	bf00      	nop
 800d9fa:	370c      	adds	r7, #12
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	460b      	mov	r3, r1
 800da22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da24:	bf00      	nop
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b090      	sub	sp, #64	; 0x40
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d137      	bne.n	800dabc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800da4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da4e:	2200      	movs	r2, #0
 800da50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3314      	adds	r3, #20
 800da58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da5c:	e853 3f00 	ldrex	r3, [r3]
 800da60:	623b      	str	r3, [r7, #32]
   return(result);
 800da62:	6a3b      	ldr	r3, [r7, #32]
 800da64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da68:	63bb      	str	r3, [r7, #56]	; 0x38
 800da6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3314      	adds	r3, #20
 800da70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800da72:	633a      	str	r2, [r7, #48]	; 0x30
 800da74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da7a:	e841 2300 	strex	r3, r2, [r1]
 800da7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e5      	bne.n	800da52 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	330c      	adds	r3, #12
 800da8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	e853 3f00 	ldrex	r3, [r3]
 800da94:	60fb      	str	r3, [r7, #12]
   return(result);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da9c:	637b      	str	r3, [r7, #52]	; 0x34
 800da9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	330c      	adds	r3, #12
 800daa4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800daa6:	61fa      	str	r2, [r7, #28]
 800daa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daaa:	69b9      	ldr	r1, [r7, #24]
 800daac:	69fa      	ldr	r2, [r7, #28]
 800daae:	e841 2300 	strex	r3, r2, [r1]
 800dab2:	617b      	str	r3, [r7, #20]
   return(result);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1e5      	bne.n	800da86 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daba:	e002      	b.n	800dac2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800dabc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dabe:	f7f5 ff73 	bl	80039a8 <HAL_UART_TxCpltCallback>
}
 800dac2:	bf00      	nop
 800dac4:	3740      	adds	r7, #64	; 0x40
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b084      	sub	sp, #16
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dad8:	68f8      	ldr	r0, [r7, #12]
 800dada:	f7ff ff7f 	bl	800d9dc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dade:	bf00      	nop
 800dae0:	3710      	adds	r7, #16
 800dae2:	46bd      	mov	sp, r7
 800dae4:	bd80      	pop	{r7, pc}

0800dae6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b09c      	sub	sp, #112	; 0x70
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daf2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d172      	bne.n	800dbe8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800db02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db04:	2200      	movs	r2, #0
 800db06:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	330c      	adds	r3, #12
 800db0e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db12:	e853 3f00 	ldrex	r3, [r3]
 800db16:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800db20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	330c      	adds	r3, #12
 800db26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db28:	65ba      	str	r2, [r7, #88]	; 0x58
 800db2a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db30:	e841 2300 	strex	r3, r2, [r1]
 800db34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d1e5      	bne.n	800db08 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	3314      	adds	r3, #20
 800db42:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db46:	e853 3f00 	ldrex	r3, [r3]
 800db4a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db4e:	f023 0301 	bic.w	r3, r3, #1
 800db52:	667b      	str	r3, [r7, #100]	; 0x64
 800db54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db56:	681b      	ldr	r3, [r3, #0]
 800db58:	3314      	adds	r3, #20
 800db5a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db5c:	647a      	str	r2, [r7, #68]	; 0x44
 800db5e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db60:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800db64:	e841 2300 	strex	r3, r2, [r1]
 800db68:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800db6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d1e5      	bne.n	800db3c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800db70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	3314      	adds	r3, #20
 800db76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	e853 3f00 	ldrex	r3, [r3]
 800db7e:	623b      	str	r3, [r7, #32]
   return(result);
 800db80:	6a3b      	ldr	r3, [r7, #32]
 800db82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db86:	663b      	str	r3, [r7, #96]	; 0x60
 800db88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	3314      	adds	r3, #20
 800db8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db90:	633a      	str	r2, [r7, #48]	; 0x30
 800db92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db98:	e841 2300 	strex	r3, r2, [r1]
 800db9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1e5      	bne.n	800db70 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dba6:	2220      	movs	r2, #32
 800dba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d119      	bne.n	800dbe8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	330c      	adds	r3, #12
 800dbba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbbc:	693b      	ldr	r3, [r7, #16]
 800dbbe:	e853 3f00 	ldrex	r3, [r3]
 800dbc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	f023 0310 	bic.w	r3, r3, #16
 800dbca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	330c      	adds	r3, #12
 800dbd2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dbd4:	61fa      	str	r2, [r7, #28]
 800dbd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd8:	69b9      	ldr	r1, [r7, #24]
 800dbda:	69fa      	ldr	r2, [r7, #28]
 800dbdc:	e841 2300 	strex	r3, r2, [r1]
 800dbe0:	617b      	str	r3, [r7, #20]
   return(result);
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d1e5      	bne.n	800dbb4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d106      	bne.n	800dbfe <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbf2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dbf8:	f7ff ff0e 	bl	800da18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbfc:	e002      	b.n	800dc04 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800dbfe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dc00:	f7f5 feba 	bl	8003978 <HAL_UART_RxCpltCallback>
}
 800dc04:	bf00      	nop
 800dc06:	3770      	adds	r7, #112	; 0x70
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bd80      	pop	{r7, pc}

0800dc0c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b084      	sub	sp, #16
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc18:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc1a:	68fb      	ldr	r3, [r7, #12]
 800dc1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc1e:	2b01      	cmp	r3, #1
 800dc20:	d108      	bne.n	800dc34 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dc26:	085b      	lsrs	r3, r3, #1
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	4619      	mov	r1, r3
 800dc2c:	68f8      	ldr	r0, [r7, #12]
 800dc2e:	f7ff fef3 	bl	800da18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc32:	e002      	b.n	800dc3a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800dc34:	68f8      	ldr	r0, [r7, #12]
 800dc36:	f7ff fedb 	bl	800d9f0 <HAL_UART_RxHalfCpltCallback>
}
 800dc3a:	bf00      	nop
 800dc3c:	3710      	adds	r7, #16
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	bd80      	pop	{r7, pc}

0800dc42 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc42:	b580      	push	{r7, lr}
 800dc44:	b084      	sub	sp, #16
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc52:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	695b      	ldr	r3, [r3, #20]
 800dc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc5e:	2b80      	cmp	r3, #128	; 0x80
 800dc60:	bf0c      	ite	eq
 800dc62:	2301      	moveq	r3, #1
 800dc64:	2300      	movne	r3, #0
 800dc66:	b2db      	uxtb	r3, r3
 800dc68:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	2b21      	cmp	r3, #33	; 0x21
 800dc74:	d108      	bne.n	800dc88 <UART_DMAError+0x46>
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d005      	beq.n	800dc88 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	2200      	movs	r2, #0
 800dc80:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800dc82:	68b8      	ldr	r0, [r7, #8]
 800dc84:	f000 f8c6 	bl	800de14 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	695b      	ldr	r3, [r3, #20]
 800dc8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc92:	2b40      	cmp	r3, #64	; 0x40
 800dc94:	bf0c      	ite	eq
 800dc96:	2301      	moveq	r3, #1
 800dc98:	2300      	movne	r3, #0
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800dc9e:	68bb      	ldr	r3, [r7, #8]
 800dca0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	2b22      	cmp	r3, #34	; 0x22
 800dca8:	d108      	bne.n	800dcbc <UART_DMAError+0x7a>
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d005      	beq.n	800dcbc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800dcb0:	68bb      	ldr	r3, [r7, #8]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800dcb6:	68b8      	ldr	r0, [r7, #8]
 800dcb8:	f000 f8d4 	bl	800de64 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc0:	f043 0210 	orr.w	r2, r3, #16
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dcc8:	68b8      	ldr	r0, [r7, #8]
 800dcca:	f7ff fe9b 	bl	800da04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dcce:	bf00      	nop
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}
	...

0800dcd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b098      	sub	sp, #96	; 0x60
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	60f8      	str	r0, [r7, #12]
 800dce0:	60b9      	str	r1, [r7, #8]
 800dce2:	4613      	mov	r3, r2
 800dce4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800dce6:	68ba      	ldr	r2, [r7, #8]
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	88fa      	ldrh	r2, [r7, #6]
 800dcf0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2222      	movs	r2, #34	; 0x22
 800dcfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd04:	4a40      	ldr	r2, [pc, #256]	; (800de08 <UART_Start_Receive_DMA+0x130>)
 800dd06:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd0c:	4a3f      	ldr	r2, [pc, #252]	; (800de0c <UART_Start_Receive_DMA+0x134>)
 800dd0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd14:	4a3e      	ldr	r2, [pc, #248]	; (800de10 <UART_Start_Receive_DMA+0x138>)
 800dd16:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800dd20:	f107 0308 	add.w	r3, r7, #8
 800dd24:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	4619      	mov	r1, r3
 800dd32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd34:	681a      	ldr	r2, [r3, #0]
 800dd36:	88fb      	ldrh	r3, [r7, #6]
 800dd38:	f7fa f864 	bl	8007e04 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	613b      	str	r3, [r7, #16]
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	613b      	str	r3, [r7, #16]
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	685b      	ldr	r3, [r3, #4]
 800dd4e:	613b      	str	r3, [r7, #16]
 800dd50:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d019      	beq.n	800dd96 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	330c      	adds	r3, #12
 800dd68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd6c:	e853 3f00 	ldrex	r3, [r3]
 800dd70:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dd72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dd74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dd78:	65bb      	str	r3, [r7, #88]	; 0x58
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	330c      	adds	r3, #12
 800dd80:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd82:	64fa      	str	r2, [r7, #76]	; 0x4c
 800dd84:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dd86:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800dd88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800dd8a:	e841 2300 	strex	r3, r2, [r1]
 800dd8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dd90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d1e5      	bne.n	800dd62 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	3314      	adds	r3, #20
 800dd9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dd9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda0:	e853 3f00 	ldrex	r3, [r3]
 800dda4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dda6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dda8:	f043 0301 	orr.w	r3, r3, #1
 800ddac:	657b      	str	r3, [r7, #84]	; 0x54
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	3314      	adds	r3, #20
 800ddb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddb6:	63ba      	str	r2, [r7, #56]	; 0x38
 800ddb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ddbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddbe:	e841 2300 	strex	r3, r2, [r1]
 800ddc2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ddc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d1e5      	bne.n	800dd96 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	3314      	adds	r3, #20
 800ddd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	e853 3f00 	ldrex	r3, [r3]
 800ddd8:	617b      	str	r3, [r7, #20]
   return(result);
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dde0:	653b      	str	r3, [r7, #80]	; 0x50
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3314      	adds	r3, #20
 800dde8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ddea:	627a      	str	r2, [r7, #36]	; 0x24
 800ddec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddee:	6a39      	ldr	r1, [r7, #32]
 800ddf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ddf2:	e841 2300 	strex	r3, r2, [r1]
 800ddf6:	61fb      	str	r3, [r7, #28]
   return(result);
 800ddf8:	69fb      	ldr	r3, [r7, #28]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1e5      	bne.n	800ddca <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3760      	adds	r7, #96	; 0x60
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}
 800de08:	0800dae7 	.word	0x0800dae7
 800de0c:	0800dc0d 	.word	0x0800dc0d
 800de10:	0800dc43 	.word	0x0800dc43

0800de14 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de14:	b480      	push	{r7}
 800de16:	b089      	sub	sp, #36	; 0x24
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	330c      	adds	r3, #12
 800de22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	e853 3f00 	ldrex	r3, [r3]
 800de2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800de32:	61fb      	str	r3, [r7, #28]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	330c      	adds	r3, #12
 800de3a:	69fa      	ldr	r2, [r7, #28]
 800de3c:	61ba      	str	r2, [r7, #24]
 800de3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de40:	6979      	ldr	r1, [r7, #20]
 800de42:	69ba      	ldr	r2, [r7, #24]
 800de44:	e841 2300 	strex	r3, r2, [r1]
 800de48:	613b      	str	r3, [r7, #16]
   return(result);
 800de4a:	693b      	ldr	r3, [r7, #16]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d1e5      	bne.n	800de1c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2220      	movs	r2, #32
 800de54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800de58:	bf00      	nop
 800de5a:	3724      	adds	r7, #36	; 0x24
 800de5c:	46bd      	mov	sp, r7
 800de5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de62:	4770      	bx	lr

0800de64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800de64:	b480      	push	{r7}
 800de66:	b095      	sub	sp, #84	; 0x54
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	330c      	adds	r3, #12
 800de72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de76:	e853 3f00 	ldrex	r3, [r3]
 800de7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800de7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800de82:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	330c      	adds	r3, #12
 800de8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800de8c:	643a      	str	r2, [r7, #64]	; 0x40
 800de8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de90:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800de92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800de94:	e841 2300 	strex	r3, r2, [r1]
 800de98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800de9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d1e5      	bne.n	800de6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	3314      	adds	r3, #20
 800dea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dea8:	6a3b      	ldr	r3, [r7, #32]
 800deaa:	e853 3f00 	ldrex	r3, [r3]
 800deae:	61fb      	str	r3, [r7, #28]
   return(result);
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	f023 0301 	bic.w	r3, r3, #1
 800deb6:	64bb      	str	r3, [r7, #72]	; 0x48
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	3314      	adds	r3, #20
 800debe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dec0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dec2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dec6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dec8:	e841 2300 	strex	r3, r2, [r1]
 800decc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800dece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e5      	bne.n	800dea0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d119      	bne.n	800df10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	330c      	adds	r3, #12
 800dee2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	e853 3f00 	ldrex	r3, [r3]
 800deea:	60bb      	str	r3, [r7, #8]
   return(result);
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	f023 0310 	bic.w	r3, r3, #16
 800def2:	647b      	str	r3, [r7, #68]	; 0x44
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	330c      	adds	r3, #12
 800defa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800defc:	61ba      	str	r2, [r7, #24]
 800defe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df00:	6979      	ldr	r1, [r7, #20]
 800df02:	69ba      	ldr	r2, [r7, #24]
 800df04:	e841 2300 	strex	r3, r2, [r1]
 800df08:	613b      	str	r3, [r7, #16]
   return(result);
 800df0a:	693b      	ldr	r3, [r7, #16]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d1e5      	bne.n	800dedc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2220      	movs	r2, #32
 800df14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800df1e:	bf00      	nop
 800df20:	3754      	adds	r7, #84	; 0x54
 800df22:	46bd      	mov	sp, r7
 800df24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df28:	4770      	bx	lr

0800df2a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b084      	sub	sp, #16
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	2200      	movs	r2, #0
 800df3c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	2200      	movs	r2, #0
 800df42:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7ff fd5d 	bl	800da04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df4a:	bf00      	nop
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800df52:	b480      	push	{r7}
 800df54:	b085      	sub	sp, #20
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800df60:	b2db      	uxtb	r3, r3
 800df62:	2b21      	cmp	r3, #33	; 0x21
 800df64:	d13e      	bne.n	800dfe4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	689b      	ldr	r3, [r3, #8]
 800df6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df6e:	d114      	bne.n	800df9a <UART_Transmit_IT+0x48>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	691b      	ldr	r3, [r3, #16]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d110      	bne.n	800df9a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6a1b      	ldr	r3, [r3, #32]
 800df7c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	881b      	ldrh	r3, [r3, #0]
 800df82:	461a      	mov	r2, r3
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df8c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	1c9a      	adds	r2, r3, #2
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	621a      	str	r2, [r3, #32]
 800df98:	e008      	b.n	800dfac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6a1b      	ldr	r3, [r3, #32]
 800df9e:	1c59      	adds	r1, r3, #1
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	6211      	str	r1, [r2, #32]
 800dfa4:	781a      	ldrb	r2, [r3, #0]
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dfb0:	b29b      	uxth	r3, r3
 800dfb2:	3b01      	subs	r3, #1
 800dfb4:	b29b      	uxth	r3, r3
 800dfb6:	687a      	ldr	r2, [r7, #4]
 800dfb8:	4619      	mov	r1, r3
 800dfba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d10f      	bne.n	800dfe0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68da      	ldr	r2, [r3, #12]
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dfce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	68da      	ldr	r2, [r3, #12]
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dfde:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	e000      	b.n	800dfe6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800dfe4:	2302      	movs	r3, #2
  }
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3714      	adds	r7, #20
 800dfea:	46bd      	mov	sp, r7
 800dfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff0:	4770      	bx	lr

0800dff2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dff2:	b580      	push	{r7, lr}
 800dff4:	b082      	sub	sp, #8
 800dff6:	af00      	add	r7, sp, #0
 800dff8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	68da      	ldr	r2, [r3, #12]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e008:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	2220      	movs	r2, #32
 800e00e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7f5 fcc8 	bl	80039a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3708      	adds	r7, #8
 800e01e:	46bd      	mov	sp, r7
 800e020:	bd80      	pop	{r7, pc}

0800e022 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e022:	b580      	push	{r7, lr}
 800e024:	b08c      	sub	sp, #48	; 0x30
 800e026:	af00      	add	r7, sp, #0
 800e028:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e030:	b2db      	uxtb	r3, r3
 800e032:	2b22      	cmp	r3, #34	; 0x22
 800e034:	f040 80ab 	bne.w	800e18e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e040:	d117      	bne.n	800e072 <UART_Receive_IT+0x50>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d113      	bne.n	800e072 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e04a:	2300      	movs	r3, #0
 800e04c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e052:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	b29b      	uxth	r3, r3
 800e05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e060:	b29a      	uxth	r2, r3
 800e062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e064:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e06a:	1c9a      	adds	r2, r3, #2
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	629a      	str	r2, [r3, #40]	; 0x28
 800e070:	e026      	b.n	800e0c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e076:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800e078:	2300      	movs	r3, #0
 800e07a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e084:	d007      	beq.n	800e096 <UART_Receive_IT+0x74>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d10a      	bne.n	800e0a4 <UART_Receive_IT+0x82>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	691b      	ldr	r3, [r3, #16]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d106      	bne.n	800e0a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	685b      	ldr	r3, [r3, #4]
 800e09c:	b2da      	uxtb	r2, r3
 800e09e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0a0:	701a      	strb	r2, [r3, #0]
 800e0a2:	e008      	b.n	800e0b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	685b      	ldr	r3, [r3, #4]
 800e0aa:	b2db      	uxtb	r3, r3
 800e0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b0:	b2da      	uxtb	r2, r3
 800e0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ba:	1c5a      	adds	r2, r3, #1
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	3b01      	subs	r3, #1
 800e0c8:	b29b      	uxth	r3, r3
 800e0ca:	687a      	ldr	r2, [r7, #4]
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d15a      	bne.n	800e18a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	68da      	ldr	r2, [r3, #12]
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	f022 0220 	bic.w	r2, r2, #32
 800e0e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	68da      	ldr	r2, [r3, #12]
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e0f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	695a      	ldr	r2, [r3, #20]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	f022 0201 	bic.w	r2, r2, #1
 800e102:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2220      	movs	r2, #32
 800e108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e110:	2b01      	cmp	r3, #1
 800e112:	d135      	bne.n	800e180 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	2200      	movs	r2, #0
 800e118:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	330c      	adds	r3, #12
 800e120:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e122:	697b      	ldr	r3, [r7, #20]
 800e124:	e853 3f00 	ldrex	r3, [r3]
 800e128:	613b      	str	r3, [r7, #16]
   return(result);
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	f023 0310 	bic.w	r3, r3, #16
 800e130:	627b      	str	r3, [r7, #36]	; 0x24
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	330c      	adds	r3, #12
 800e138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e13a:	623a      	str	r2, [r7, #32]
 800e13c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e13e:	69f9      	ldr	r1, [r7, #28]
 800e140:	6a3a      	ldr	r2, [r7, #32]
 800e142:	e841 2300 	strex	r3, r2, [r1]
 800e146:	61bb      	str	r3, [r7, #24]
   return(result);
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d1e5      	bne.n	800e11a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f003 0310 	and.w	r3, r3, #16
 800e158:	2b10      	cmp	r3, #16
 800e15a:	d10a      	bne.n	800e172 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e15c:	2300      	movs	r3, #0
 800e15e:	60fb      	str	r3, [r7, #12]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	60fb      	str	r3, [r7, #12]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	60fb      	str	r3, [r7, #12]
 800e170:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e176:	4619      	mov	r1, r3
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7ff fc4d 	bl	800da18 <HAL_UARTEx_RxEventCallback>
 800e17e:	e002      	b.n	800e186 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f7f5 fbf9 	bl	8003978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e186:	2300      	movs	r3, #0
 800e188:	e002      	b.n	800e190 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800e18a:	2300      	movs	r3, #0
 800e18c:	e000      	b.n	800e190 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800e18e:	2302      	movs	r3, #2
  }
}
 800e190:	4618      	mov	r0, r3
 800e192:	3730      	adds	r7, #48	; 0x30
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e19c:	b0c0      	sub	sp, #256	; 0x100
 800e19e:	af00      	add	r7, sp, #0
 800e1a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	691b      	ldr	r3, [r3, #16]
 800e1ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e1b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1b4:	68d9      	ldr	r1, [r3, #12]
 800e1b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	ea40 0301 	orr.w	r3, r0, r1
 800e1c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e1c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1c6:	689a      	ldr	r2, [r3, #8]
 800e1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1cc:	691b      	ldr	r3, [r3, #16]
 800e1ce:	431a      	orrs	r2, r3
 800e1d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1d4:	695b      	ldr	r3, [r3, #20]
 800e1d6:	431a      	orrs	r2, r3
 800e1d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1dc:	69db      	ldr	r3, [r3, #28]
 800e1de:	4313      	orrs	r3, r2
 800e1e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e1e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	68db      	ldr	r3, [r3, #12]
 800e1ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e1f0:	f021 010c 	bic.w	r1, r1, #12
 800e1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e1fe:	430b      	orrs	r3, r1
 800e200:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	695b      	ldr	r3, [r3, #20]
 800e20a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e20e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e212:	6999      	ldr	r1, [r3, #24]
 800e214:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	ea40 0301 	orr.w	r3, r0, r1
 800e21e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e224:	681a      	ldr	r2, [r3, #0]
 800e226:	4b8f      	ldr	r3, [pc, #572]	; (800e464 <UART_SetConfig+0x2cc>)
 800e228:	429a      	cmp	r2, r3
 800e22a:	d005      	beq.n	800e238 <UART_SetConfig+0xa0>
 800e22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e230:	681a      	ldr	r2, [r3, #0]
 800e232:	4b8d      	ldr	r3, [pc, #564]	; (800e468 <UART_SetConfig+0x2d0>)
 800e234:	429a      	cmp	r2, r3
 800e236:	d104      	bne.n	800e242 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e238:	f7fc fc14 	bl	800aa64 <HAL_RCC_GetPCLK2Freq>
 800e23c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e240:	e003      	b.n	800e24a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e242:	f7fc fbfb 	bl	800aa3c <HAL_RCC_GetPCLK1Freq>
 800e246:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e24e:	69db      	ldr	r3, [r3, #28]
 800e250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e254:	f040 810c 	bne.w	800e470 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e25c:	2200      	movs	r2, #0
 800e25e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e262:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e266:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e26a:	4622      	mov	r2, r4
 800e26c:	462b      	mov	r3, r5
 800e26e:	1891      	adds	r1, r2, r2
 800e270:	65b9      	str	r1, [r7, #88]	; 0x58
 800e272:	415b      	adcs	r3, r3
 800e274:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e276:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e27a:	4621      	mov	r1, r4
 800e27c:	eb12 0801 	adds.w	r8, r2, r1
 800e280:	4629      	mov	r1, r5
 800e282:	eb43 0901 	adc.w	r9, r3, r1
 800e286:	f04f 0200 	mov.w	r2, #0
 800e28a:	f04f 0300 	mov.w	r3, #0
 800e28e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e29a:	4690      	mov	r8, r2
 800e29c:	4699      	mov	r9, r3
 800e29e:	4623      	mov	r3, r4
 800e2a0:	eb18 0303 	adds.w	r3, r8, r3
 800e2a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e2a8:	462b      	mov	r3, r5
 800e2aa:	eb49 0303 	adc.w	r3, r9, r3
 800e2ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e2b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2b6:	685b      	ldr	r3, [r3, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e2be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e2c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e2c6:	460b      	mov	r3, r1
 800e2c8:	18db      	adds	r3, r3, r3
 800e2ca:	653b      	str	r3, [r7, #80]	; 0x50
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	eb42 0303 	adc.w	r3, r2, r3
 800e2d2:	657b      	str	r3, [r7, #84]	; 0x54
 800e2d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e2d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e2dc:	f7f2 fd24 	bl	8000d28 <__aeabi_uldivmod>
 800e2e0:	4602      	mov	r2, r0
 800e2e2:	460b      	mov	r3, r1
 800e2e4:	4b61      	ldr	r3, [pc, #388]	; (800e46c <UART_SetConfig+0x2d4>)
 800e2e6:	fba3 2302 	umull	r2, r3, r3, r2
 800e2ea:	095b      	lsrs	r3, r3, #5
 800e2ec:	011c      	lsls	r4, r3, #4
 800e2ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e2f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e2fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e300:	4642      	mov	r2, r8
 800e302:	464b      	mov	r3, r9
 800e304:	1891      	adds	r1, r2, r2
 800e306:	64b9      	str	r1, [r7, #72]	; 0x48
 800e308:	415b      	adcs	r3, r3
 800e30a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e30c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e310:	4641      	mov	r1, r8
 800e312:	eb12 0a01 	adds.w	sl, r2, r1
 800e316:	4649      	mov	r1, r9
 800e318:	eb43 0b01 	adc.w	fp, r3, r1
 800e31c:	f04f 0200 	mov.w	r2, #0
 800e320:	f04f 0300 	mov.w	r3, #0
 800e324:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e328:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e32c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e330:	4692      	mov	sl, r2
 800e332:	469b      	mov	fp, r3
 800e334:	4643      	mov	r3, r8
 800e336:	eb1a 0303 	adds.w	r3, sl, r3
 800e33a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e33e:	464b      	mov	r3, r9
 800e340:	eb4b 0303 	adc.w	r3, fp, r3
 800e344:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e34c:	685b      	ldr	r3, [r3, #4]
 800e34e:	2200      	movs	r2, #0
 800e350:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e354:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e358:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e35c:	460b      	mov	r3, r1
 800e35e:	18db      	adds	r3, r3, r3
 800e360:	643b      	str	r3, [r7, #64]	; 0x40
 800e362:	4613      	mov	r3, r2
 800e364:	eb42 0303 	adc.w	r3, r2, r3
 800e368:	647b      	str	r3, [r7, #68]	; 0x44
 800e36a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e36e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e372:	f7f2 fcd9 	bl	8000d28 <__aeabi_uldivmod>
 800e376:	4602      	mov	r2, r0
 800e378:	460b      	mov	r3, r1
 800e37a:	4611      	mov	r1, r2
 800e37c:	4b3b      	ldr	r3, [pc, #236]	; (800e46c <UART_SetConfig+0x2d4>)
 800e37e:	fba3 2301 	umull	r2, r3, r3, r1
 800e382:	095b      	lsrs	r3, r3, #5
 800e384:	2264      	movs	r2, #100	; 0x64
 800e386:	fb02 f303 	mul.w	r3, r2, r3
 800e38a:	1acb      	subs	r3, r1, r3
 800e38c:	00db      	lsls	r3, r3, #3
 800e38e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e392:	4b36      	ldr	r3, [pc, #216]	; (800e46c <UART_SetConfig+0x2d4>)
 800e394:	fba3 2302 	umull	r2, r3, r3, r2
 800e398:	095b      	lsrs	r3, r3, #5
 800e39a:	005b      	lsls	r3, r3, #1
 800e39c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e3a0:	441c      	add	r4, r3
 800e3a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e3ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e3b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e3b4:	4642      	mov	r2, r8
 800e3b6:	464b      	mov	r3, r9
 800e3b8:	1891      	adds	r1, r2, r2
 800e3ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800e3bc:	415b      	adcs	r3, r3
 800e3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e3c4:	4641      	mov	r1, r8
 800e3c6:	1851      	adds	r1, r2, r1
 800e3c8:	6339      	str	r1, [r7, #48]	; 0x30
 800e3ca:	4649      	mov	r1, r9
 800e3cc:	414b      	adcs	r3, r1
 800e3ce:	637b      	str	r3, [r7, #52]	; 0x34
 800e3d0:	f04f 0200 	mov.w	r2, #0
 800e3d4:	f04f 0300 	mov.w	r3, #0
 800e3d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e3dc:	4659      	mov	r1, fp
 800e3de:	00cb      	lsls	r3, r1, #3
 800e3e0:	4651      	mov	r1, sl
 800e3e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e3e6:	4651      	mov	r1, sl
 800e3e8:	00ca      	lsls	r2, r1, #3
 800e3ea:	4610      	mov	r0, r2
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	4642      	mov	r2, r8
 800e3f2:	189b      	adds	r3, r3, r2
 800e3f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e3f8:	464b      	mov	r3, r9
 800e3fa:	460a      	mov	r2, r1
 800e3fc:	eb42 0303 	adc.w	r3, r2, r3
 800e400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e408:	685b      	ldr	r3, [r3, #4]
 800e40a:	2200      	movs	r2, #0
 800e40c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e410:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e418:	460b      	mov	r3, r1
 800e41a:	18db      	adds	r3, r3, r3
 800e41c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e41e:	4613      	mov	r3, r2
 800e420:	eb42 0303 	adc.w	r3, r2, r3
 800e424:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e426:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e42a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e42e:	f7f2 fc7b 	bl	8000d28 <__aeabi_uldivmod>
 800e432:	4602      	mov	r2, r0
 800e434:	460b      	mov	r3, r1
 800e436:	4b0d      	ldr	r3, [pc, #52]	; (800e46c <UART_SetConfig+0x2d4>)
 800e438:	fba3 1302 	umull	r1, r3, r3, r2
 800e43c:	095b      	lsrs	r3, r3, #5
 800e43e:	2164      	movs	r1, #100	; 0x64
 800e440:	fb01 f303 	mul.w	r3, r1, r3
 800e444:	1ad3      	subs	r3, r2, r3
 800e446:	00db      	lsls	r3, r3, #3
 800e448:	3332      	adds	r3, #50	; 0x32
 800e44a:	4a08      	ldr	r2, [pc, #32]	; (800e46c <UART_SetConfig+0x2d4>)
 800e44c:	fba2 2303 	umull	r2, r3, r2, r3
 800e450:	095b      	lsrs	r3, r3, #5
 800e452:	f003 0207 	and.w	r2, r3, #7
 800e456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	4422      	add	r2, r4
 800e45e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e460:	e106      	b.n	800e670 <UART_SetConfig+0x4d8>
 800e462:	bf00      	nop
 800e464:	40011000 	.word	0x40011000
 800e468:	40011400 	.word	0x40011400
 800e46c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e474:	2200      	movs	r2, #0
 800e476:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e47a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e47e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e482:	4642      	mov	r2, r8
 800e484:	464b      	mov	r3, r9
 800e486:	1891      	adds	r1, r2, r2
 800e488:	6239      	str	r1, [r7, #32]
 800e48a:	415b      	adcs	r3, r3
 800e48c:	627b      	str	r3, [r7, #36]	; 0x24
 800e48e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e492:	4641      	mov	r1, r8
 800e494:	1854      	adds	r4, r2, r1
 800e496:	4649      	mov	r1, r9
 800e498:	eb43 0501 	adc.w	r5, r3, r1
 800e49c:	f04f 0200 	mov.w	r2, #0
 800e4a0:	f04f 0300 	mov.w	r3, #0
 800e4a4:	00eb      	lsls	r3, r5, #3
 800e4a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e4aa:	00e2      	lsls	r2, r4, #3
 800e4ac:	4614      	mov	r4, r2
 800e4ae:	461d      	mov	r5, r3
 800e4b0:	4643      	mov	r3, r8
 800e4b2:	18e3      	adds	r3, r4, r3
 800e4b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e4b8:	464b      	mov	r3, r9
 800e4ba:	eb45 0303 	adc.w	r3, r5, r3
 800e4be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e4c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4c6:	685b      	ldr	r3, [r3, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e4ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e4d2:	f04f 0200 	mov.w	r2, #0
 800e4d6:	f04f 0300 	mov.w	r3, #0
 800e4da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e4de:	4629      	mov	r1, r5
 800e4e0:	008b      	lsls	r3, r1, #2
 800e4e2:	4621      	mov	r1, r4
 800e4e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e4e8:	4621      	mov	r1, r4
 800e4ea:	008a      	lsls	r2, r1, #2
 800e4ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e4f0:	f7f2 fc1a 	bl	8000d28 <__aeabi_uldivmod>
 800e4f4:	4602      	mov	r2, r0
 800e4f6:	460b      	mov	r3, r1
 800e4f8:	4b60      	ldr	r3, [pc, #384]	; (800e67c <UART_SetConfig+0x4e4>)
 800e4fa:	fba3 2302 	umull	r2, r3, r3, r2
 800e4fe:	095b      	lsrs	r3, r3, #5
 800e500:	011c      	lsls	r4, r3, #4
 800e502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e506:	2200      	movs	r2, #0
 800e508:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e50c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e510:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e514:	4642      	mov	r2, r8
 800e516:	464b      	mov	r3, r9
 800e518:	1891      	adds	r1, r2, r2
 800e51a:	61b9      	str	r1, [r7, #24]
 800e51c:	415b      	adcs	r3, r3
 800e51e:	61fb      	str	r3, [r7, #28]
 800e520:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e524:	4641      	mov	r1, r8
 800e526:	1851      	adds	r1, r2, r1
 800e528:	6139      	str	r1, [r7, #16]
 800e52a:	4649      	mov	r1, r9
 800e52c:	414b      	adcs	r3, r1
 800e52e:	617b      	str	r3, [r7, #20]
 800e530:	f04f 0200 	mov.w	r2, #0
 800e534:	f04f 0300 	mov.w	r3, #0
 800e538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e53c:	4659      	mov	r1, fp
 800e53e:	00cb      	lsls	r3, r1, #3
 800e540:	4651      	mov	r1, sl
 800e542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e546:	4651      	mov	r1, sl
 800e548:	00ca      	lsls	r2, r1, #3
 800e54a:	4610      	mov	r0, r2
 800e54c:	4619      	mov	r1, r3
 800e54e:	4603      	mov	r3, r0
 800e550:	4642      	mov	r2, r8
 800e552:	189b      	adds	r3, r3, r2
 800e554:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e558:	464b      	mov	r3, r9
 800e55a:	460a      	mov	r2, r1
 800e55c:	eb42 0303 	adc.w	r3, r2, r3
 800e560:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e56e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e570:	f04f 0200 	mov.w	r2, #0
 800e574:	f04f 0300 	mov.w	r3, #0
 800e578:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e57c:	4649      	mov	r1, r9
 800e57e:	008b      	lsls	r3, r1, #2
 800e580:	4641      	mov	r1, r8
 800e582:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e586:	4641      	mov	r1, r8
 800e588:	008a      	lsls	r2, r1, #2
 800e58a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e58e:	f7f2 fbcb 	bl	8000d28 <__aeabi_uldivmod>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	4611      	mov	r1, r2
 800e598:	4b38      	ldr	r3, [pc, #224]	; (800e67c <UART_SetConfig+0x4e4>)
 800e59a:	fba3 2301 	umull	r2, r3, r3, r1
 800e59e:	095b      	lsrs	r3, r3, #5
 800e5a0:	2264      	movs	r2, #100	; 0x64
 800e5a2:	fb02 f303 	mul.w	r3, r2, r3
 800e5a6:	1acb      	subs	r3, r1, r3
 800e5a8:	011b      	lsls	r3, r3, #4
 800e5aa:	3332      	adds	r3, #50	; 0x32
 800e5ac:	4a33      	ldr	r2, [pc, #204]	; (800e67c <UART_SetConfig+0x4e4>)
 800e5ae:	fba2 2303 	umull	r2, r3, r2, r3
 800e5b2:	095b      	lsrs	r3, r3, #5
 800e5b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5b8:	441c      	add	r4, r3
 800e5ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e5be:	2200      	movs	r2, #0
 800e5c0:	673b      	str	r3, [r7, #112]	; 0x70
 800e5c2:	677a      	str	r2, [r7, #116]	; 0x74
 800e5c4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e5c8:	4642      	mov	r2, r8
 800e5ca:	464b      	mov	r3, r9
 800e5cc:	1891      	adds	r1, r2, r2
 800e5ce:	60b9      	str	r1, [r7, #8]
 800e5d0:	415b      	adcs	r3, r3
 800e5d2:	60fb      	str	r3, [r7, #12]
 800e5d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e5d8:	4641      	mov	r1, r8
 800e5da:	1851      	adds	r1, r2, r1
 800e5dc:	6039      	str	r1, [r7, #0]
 800e5de:	4649      	mov	r1, r9
 800e5e0:	414b      	adcs	r3, r1
 800e5e2:	607b      	str	r3, [r7, #4]
 800e5e4:	f04f 0200 	mov.w	r2, #0
 800e5e8:	f04f 0300 	mov.w	r3, #0
 800e5ec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e5f0:	4659      	mov	r1, fp
 800e5f2:	00cb      	lsls	r3, r1, #3
 800e5f4:	4651      	mov	r1, sl
 800e5f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e5fa:	4651      	mov	r1, sl
 800e5fc:	00ca      	lsls	r2, r1, #3
 800e5fe:	4610      	mov	r0, r2
 800e600:	4619      	mov	r1, r3
 800e602:	4603      	mov	r3, r0
 800e604:	4642      	mov	r2, r8
 800e606:	189b      	adds	r3, r3, r2
 800e608:	66bb      	str	r3, [r7, #104]	; 0x68
 800e60a:	464b      	mov	r3, r9
 800e60c:	460a      	mov	r2, r1
 800e60e:	eb42 0303 	adc.w	r3, r2, r3
 800e612:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e618:	685b      	ldr	r3, [r3, #4]
 800e61a:	2200      	movs	r2, #0
 800e61c:	663b      	str	r3, [r7, #96]	; 0x60
 800e61e:	667a      	str	r2, [r7, #100]	; 0x64
 800e620:	f04f 0200 	mov.w	r2, #0
 800e624:	f04f 0300 	mov.w	r3, #0
 800e628:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e62c:	4649      	mov	r1, r9
 800e62e:	008b      	lsls	r3, r1, #2
 800e630:	4641      	mov	r1, r8
 800e632:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e636:	4641      	mov	r1, r8
 800e638:	008a      	lsls	r2, r1, #2
 800e63a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e63e:	f7f2 fb73 	bl	8000d28 <__aeabi_uldivmod>
 800e642:	4602      	mov	r2, r0
 800e644:	460b      	mov	r3, r1
 800e646:	4b0d      	ldr	r3, [pc, #52]	; (800e67c <UART_SetConfig+0x4e4>)
 800e648:	fba3 1302 	umull	r1, r3, r3, r2
 800e64c:	095b      	lsrs	r3, r3, #5
 800e64e:	2164      	movs	r1, #100	; 0x64
 800e650:	fb01 f303 	mul.w	r3, r1, r3
 800e654:	1ad3      	subs	r3, r2, r3
 800e656:	011b      	lsls	r3, r3, #4
 800e658:	3332      	adds	r3, #50	; 0x32
 800e65a:	4a08      	ldr	r2, [pc, #32]	; (800e67c <UART_SetConfig+0x4e4>)
 800e65c:	fba2 2303 	umull	r2, r3, r2, r3
 800e660:	095b      	lsrs	r3, r3, #5
 800e662:	f003 020f 	and.w	r2, r3, #15
 800e666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4422      	add	r2, r4
 800e66e:	609a      	str	r2, [r3, #8]
}
 800e670:	bf00      	nop
 800e672:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e676:	46bd      	mov	sp, r7
 800e678:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e67c:	51eb851f 	.word	0x51eb851f

0800e680 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e680:	b084      	sub	sp, #16
 800e682:	b480      	push	{r7}
 800e684:	b085      	sub	sp, #20
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
 800e68a:	f107 001c 	add.w	r0, r7, #28
 800e68e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e692:	2300      	movs	r3, #0
 800e694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e696:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e698:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e69a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e69e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e6a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e6a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e6a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e6aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e6ac:	68fa      	ldr	r2, [r7, #12]
 800e6ae:	4313      	orrs	r3, r2
 800e6b0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e6ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e6be:	68fa      	ldr	r2, [r7, #12]
 800e6c0:	431a      	orrs	r2, r3
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e6c6:	2300      	movs	r3, #0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3714      	adds	r7, #20
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	b004      	add	sp, #16
 800e6d4:	4770      	bx	lr

0800e6d6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e6d6:	b480      	push	{r7}
 800e6d8:	b083      	sub	sp, #12
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	370c      	adds	r7, #12
 800e6e8:	46bd      	mov	sp, r7
 800e6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ee:	4770      	bx	lr

0800e6f0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e6f0:	b480      	push	{r7}
 800e6f2:	b083      	sub	sp, #12
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e6fa:	683b      	ldr	r3, [r7, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e704:	2300      	movs	r3, #0
}
 800e706:	4618      	mov	r0, r3
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e712:	b480      	push	{r7}
 800e714:	b083      	sub	sp, #12
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2203      	movs	r2, #3
 800e71e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e720:	2300      	movs	r3, #0
}
 800e722:	4618      	mov	r0, r3
 800e724:	370c      	adds	r7, #12
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e72e:	b480      	push	{r7}
 800e730:	b083      	sub	sp, #12
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	f003 0303 	and.w	r3, r3, #3
}
 800e73e:	4618      	mov	r0, r3
 800e740:	370c      	adds	r7, #12
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr

0800e74a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e74a:	b480      	push	{r7}
 800e74c:	b085      	sub	sp, #20
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
 800e752:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e754:	2300      	movs	r3, #0
 800e756:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e758:	683b      	ldr	r3, [r7, #0]
 800e75a:	681a      	ldr	r2, [r3, #0]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e768:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e76e:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e774:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e776:	68fa      	ldr	r2, [r7, #12]
 800e778:	4313      	orrs	r3, r2
 800e77a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e784:	f023 030f 	bic.w	r3, r3, #15
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	431a      	orrs	r2, r3
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3714      	adds	r7, #20
 800e796:	46bd      	mov	sp, r7
 800e798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79c:	4770      	bx	lr

0800e79e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e79e:	b480      	push	{r7}
 800e7a0:	b083      	sub	sp, #12
 800e7a2:	af00      	add	r7, sp, #0
 800e7a4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	691b      	ldr	r3, [r3, #16]
 800e7aa:	b2db      	uxtb	r3, r3
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	370c      	adds	r7, #12
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e7b8:	b480      	push	{r7}
 800e7ba:	b085      	sub	sp, #20
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
 800e7c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	3314      	adds	r3, #20
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	4413      	add	r3, r2
 800e7cc:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
}  
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3714      	adds	r7, #20
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7dc:	4770      	bx	lr

0800e7de <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e7de:	b480      	push	{r7}
 800e7e0:	b085      	sub	sp, #20
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	6078      	str	r0, [r7, #4]
 800e7e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	681a      	ldr	r2, [r3, #0]
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e7f4:	683b      	ldr	r3, [r7, #0]
 800e7f6:	685a      	ldr	r2, [r3, #4]
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e7fc:	683b      	ldr	r3, [r7, #0]
 800e7fe:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e804:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e806:	683b      	ldr	r3, [r7, #0]
 800e808:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e80a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e80c:	683b      	ldr	r3, [r7, #0]
 800e80e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e810:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e812:	68fa      	ldr	r2, [r7, #12]
 800e814:	4313      	orrs	r3, r2
 800e816:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e81c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	431a      	orrs	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e828:	2300      	movs	r3, #0

}
 800e82a:	4618      	mov	r0, r3
 800e82c:	3714      	adds	r7, #20
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e836:	b580      	push	{r7, lr}
 800e838:	b088      	sub	sp, #32
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
 800e83e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e840:	683b      	ldr	r3, [r7, #0]
 800e842:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e844:	2310      	movs	r3, #16
 800e846:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e848:	2340      	movs	r3, #64	; 0x40
 800e84a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e84c:	2300      	movs	r3, #0
 800e84e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e850:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e854:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e856:	f107 0308 	add.w	r3, r7, #8
 800e85a:	4619      	mov	r1, r3
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f7ff ff74 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e862:	f241 3288 	movw	r2, #5000	; 0x1388
 800e866:	2110      	movs	r1, #16
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 f9d7 	bl	800ec1c <SDMMC_GetCmdResp1>
 800e86e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e870:	69fb      	ldr	r3, [r7, #28]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3720      	adds	r7, #32
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}

0800e87a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e87a:	b580      	push	{r7, lr}
 800e87c:	b088      	sub	sp, #32
 800e87e:	af00      	add	r7, sp, #0
 800e880:	6078      	str	r0, [r7, #4]
 800e882:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e888:	2311      	movs	r3, #17
 800e88a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e88c:	2340      	movs	r3, #64	; 0x40
 800e88e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e890:	2300      	movs	r3, #0
 800e892:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e894:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e898:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e89a:	f107 0308 	add.w	r3, r7, #8
 800e89e:	4619      	mov	r1, r3
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f7ff ff52 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e8a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8aa:	2111      	movs	r1, #17
 800e8ac:	6878      	ldr	r0, [r7, #4]
 800e8ae:	f000 f9b5 	bl	800ec1c <SDMMC_GetCmdResp1>
 800e8b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8b4:	69fb      	ldr	r3, [r7, #28]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3720      	adds	r7, #32
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}

0800e8be <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e8be:	b580      	push	{r7, lr}
 800e8c0:	b088      	sub	sp, #32
 800e8c2:	af00      	add	r7, sp, #0
 800e8c4:	6078      	str	r0, [r7, #4]
 800e8c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e8cc:	2312      	movs	r3, #18
 800e8ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e8d0:	2340      	movs	r3, #64	; 0x40
 800e8d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e8de:	f107 0308 	add.w	r3, r7, #8
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	6878      	ldr	r0, [r7, #4]
 800e8e6:	f7ff ff30 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e8ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8ee:	2112      	movs	r1, #18
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 f993 	bl	800ec1c <SDMMC_GetCmdResp1>
 800e8f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8f8:	69fb      	ldr	r3, [r7, #28]
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	3720      	adds	r7, #32
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}

0800e902 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e902:	b580      	push	{r7, lr}
 800e904:	b088      	sub	sp, #32
 800e906:	af00      	add	r7, sp, #0
 800e908:	6078      	str	r0, [r7, #4]
 800e90a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e90c:	683b      	ldr	r3, [r7, #0]
 800e90e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e910:	2318      	movs	r3, #24
 800e912:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e914:	2340      	movs	r3, #64	; 0x40
 800e916:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e918:	2300      	movs	r3, #0
 800e91a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e91c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e920:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e922:	f107 0308 	add.w	r3, r7, #8
 800e926:	4619      	mov	r1, r3
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f7ff ff0e 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e92e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e932:	2118      	movs	r1, #24
 800e934:	6878      	ldr	r0, [r7, #4]
 800e936:	f000 f971 	bl	800ec1c <SDMMC_GetCmdResp1>
 800e93a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e93c:	69fb      	ldr	r3, [r7, #28]
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3720      	adds	r7, #32
 800e942:	46bd      	mov	sp, r7
 800e944:	bd80      	pop	{r7, pc}

0800e946 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e946:	b580      	push	{r7, lr}
 800e948:	b088      	sub	sp, #32
 800e94a:	af00      	add	r7, sp, #0
 800e94c:	6078      	str	r0, [r7, #4]
 800e94e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e954:	2319      	movs	r3, #25
 800e956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e958:	2340      	movs	r3, #64	; 0x40
 800e95a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e95c:	2300      	movs	r3, #0
 800e95e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e964:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e966:	f107 0308 	add.w	r3, r7, #8
 800e96a:	4619      	mov	r1, r3
 800e96c:	6878      	ldr	r0, [r7, #4]
 800e96e:	f7ff feec 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e972:	f241 3288 	movw	r2, #5000	; 0x1388
 800e976:	2119      	movs	r1, #25
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 f94f 	bl	800ec1c <SDMMC_GetCmdResp1>
 800e97e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e980:	69fb      	ldr	r3, [r7, #28]
}
 800e982:	4618      	mov	r0, r3
 800e984:	3720      	adds	r7, #32
 800e986:	46bd      	mov	sp, r7
 800e988:	bd80      	pop	{r7, pc}
	...

0800e98c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b088      	sub	sp, #32
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e994:	2300      	movs	r3, #0
 800e996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e998:	230c      	movs	r3, #12
 800e99a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e99c:	2340      	movs	r3, #64	; 0x40
 800e99e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9aa:	f107 0308 	add.w	r3, r7, #8
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f7ff feca 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e9b6:	4a05      	ldr	r2, [pc, #20]	; (800e9cc <SDMMC_CmdStopTransfer+0x40>)
 800e9b8:	210c      	movs	r1, #12
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f000 f92e 	bl	800ec1c <SDMMC_GetCmdResp1>
 800e9c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9c2:	69fb      	ldr	r3, [r7, #28]
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3720      	adds	r7, #32
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}
 800e9cc:	05f5e100 	.word	0x05f5e100

0800e9d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e9d0:	b580      	push	{r7, lr}
 800e9d2:	b08a      	sub	sp, #40	; 0x28
 800e9d4:	af00      	add	r7, sp, #0
 800e9d6:	60f8      	str	r0, [r7, #12]
 800e9d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e9dc:	683b      	ldr	r3, [r7, #0]
 800e9de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e9e0:	2307      	movs	r3, #7
 800e9e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9e4:	2340      	movs	r3, #64	; 0x40
 800e9e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9f2:	f107 0310 	add.w	r3, r7, #16
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	68f8      	ldr	r0, [r7, #12]
 800e9fa:	f7ff fea6 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e9fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea02:	2107      	movs	r1, #7
 800ea04:	68f8      	ldr	r0, [r7, #12]
 800ea06:	f000 f909 	bl	800ec1c <SDMMC_GetCmdResp1>
 800ea0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea0e:	4618      	mov	r0, r3
 800ea10:	3728      	adds	r7, #40	; 0x28
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}

0800ea16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ea16:	b580      	push	{r7, lr}
 800ea18:	b088      	sub	sp, #32
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ea22:	2300      	movs	r3, #0
 800ea24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ea26:	2300      	movs	r3, #0
 800ea28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea34:	f107 0308 	add.w	r3, r7, #8
 800ea38:	4619      	mov	r1, r3
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f7ff fe85 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ea40:	6878      	ldr	r0, [r7, #4]
 800ea42:	f000 fb23 	bl	800f08c <SDMMC_GetCmdError>
 800ea46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea48:	69fb      	ldr	r3, [r7, #28]
}
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	3720      	adds	r7, #32
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b088      	sub	sp, #32
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ea5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ea5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ea60:	2308      	movs	r3, #8
 800ea62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea64:	2340      	movs	r3, #64	; 0x40
 800ea66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea70:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea72:	f107 0308 	add.w	r3, r7, #8
 800ea76:	4619      	mov	r1, r3
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f7ff fe66 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ea7e:	6878      	ldr	r0, [r7, #4]
 800ea80:	f000 fab6 	bl	800eff0 <SDMMC_GetCmdResp7>
 800ea84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea86:	69fb      	ldr	r3, [r7, #28]
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3720      	adds	r7, #32
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}

0800ea90 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b088      	sub	sp, #32
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ea9a:	683b      	ldr	r3, [r7, #0]
 800ea9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ea9e:	2337      	movs	r3, #55	; 0x37
 800eaa0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eaa2:	2340      	movs	r3, #64	; 0x40
 800eaa4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eaaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eab0:	f107 0308 	add.w	r3, r7, #8
 800eab4:	4619      	mov	r1, r3
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f7ff fe47 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800eabc:	f241 3288 	movw	r2, #5000	; 0x1388
 800eac0:	2137      	movs	r1, #55	; 0x37
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f000 f8aa 	bl	800ec1c <SDMMC_GetCmdResp1>
 800eac8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eaca:	69fb      	ldr	r3, [r7, #28]
}
 800eacc:	4618      	mov	r0, r3
 800eace:	3720      	adds	r7, #32
 800ead0:	46bd      	mov	sp, r7
 800ead2:	bd80      	pop	{r7, pc}

0800ead4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b088      	sub	sp, #32
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
 800eadc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eae4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eae8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800eaea:	2329      	movs	r3, #41	; 0x29
 800eaec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eaee:	2340      	movs	r3, #64	; 0x40
 800eaf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eaf2:	2300      	movs	r3, #0
 800eaf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eaf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eafa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eafc:	f107 0308 	add.w	r3, r7, #8
 800eb00:	4619      	mov	r1, r3
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f7ff fe21 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 f9bd 	bl	800ee88 <SDMMC_GetCmdResp3>
 800eb0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb10:	69fb      	ldr	r3, [r7, #28]
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3720      	adds	r7, #32
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}

0800eb1a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800eb1a:	b580      	push	{r7, lr}
 800eb1c:	b088      	sub	sp, #32
 800eb1e:	af00      	add	r7, sp, #0
 800eb20:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eb22:	2300      	movs	r3, #0
 800eb24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eb26:	2302      	movs	r3, #2
 800eb28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800eb2a:	23c0      	movs	r3, #192	; 0xc0
 800eb2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb38:	f107 0308 	add.w	r3, r7, #8
 800eb3c:	4619      	mov	r1, r3
 800eb3e:	6878      	ldr	r0, [r7, #4]
 800eb40:	f7ff fe03 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800eb44:	6878      	ldr	r0, [r7, #4]
 800eb46:	f000 f957 	bl	800edf8 <SDMMC_GetCmdResp2>
 800eb4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb4c:	69fb      	ldr	r3, [r7, #28]
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	3720      	adds	r7, #32
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b088      	sub	sp, #32
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
 800eb5e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800eb60:	683b      	ldr	r3, [r7, #0]
 800eb62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800eb64:	2309      	movs	r3, #9
 800eb66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800eb68:	23c0      	movs	r3, #192	; 0xc0
 800eb6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb74:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb76:	f107 0308 	add.w	r3, r7, #8
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7ff fde4 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f938 	bl	800edf8 <SDMMC_GetCmdResp2>
 800eb88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb8a:	69fb      	ldr	r3, [r7, #28]
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b088      	sub	sp, #32
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800eba2:	2303      	movs	r3, #3
 800eba4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eba6:	2340      	movs	r3, #64	; 0x40
 800eba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebaa:	2300      	movs	r3, #0
 800ebac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebb4:	f107 0308 	add.w	r3, r7, #8
 800ebb8:	4619      	mov	r1, r3
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7ff fdc5 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ebc0:	683a      	ldr	r2, [r7, #0]
 800ebc2:	2103      	movs	r1, #3
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 f99d 	bl	800ef04 <SDMMC_GetCmdResp6>
 800ebca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebcc:	69fb      	ldr	r3, [r7, #28]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3720      	adds	r7, #32
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b088      	sub	sp, #32
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
 800ebde:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ebe4:	230d      	movs	r3, #13
 800ebe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebe8:	2340      	movs	r3, #64	; 0x40
 800ebea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebec:	2300      	movs	r3, #0
 800ebee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebf4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebf6:	f107 0308 	add.w	r3, r7, #8
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7ff fda4 	bl	800e74a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ec02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec06:	210d      	movs	r1, #13
 800ec08:	6878      	ldr	r0, [r7, #4]
 800ec0a:	f000 f807 	bl	800ec1c <SDMMC_GetCmdResp1>
 800ec0e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec10:	69fb      	ldr	r3, [r7, #28]
}
 800ec12:	4618      	mov	r0, r3
 800ec14:	3720      	adds	r7, #32
 800ec16:	46bd      	mov	sp, r7
 800ec18:	bd80      	pop	{r7, pc}
	...

0800ec1c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b088      	sub	sp, #32
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	60f8      	str	r0, [r7, #12]
 800ec24:	460b      	mov	r3, r1
 800ec26:	607a      	str	r2, [r7, #4]
 800ec28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ec2a:	4b70      	ldr	r3, [pc, #448]	; (800edec <SDMMC_GetCmdResp1+0x1d0>)
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	4a70      	ldr	r2, [pc, #448]	; (800edf0 <SDMMC_GetCmdResp1+0x1d4>)
 800ec30:	fba2 2303 	umull	r2, r3, r2, r3
 800ec34:	0a5a      	lsrs	r2, r3, #9
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	fb02 f303 	mul.w	r3, r2, r3
 800ec3c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	1e5a      	subs	r2, r3, #1
 800ec42:	61fa      	str	r2, [r7, #28]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d102      	bne.n	800ec4e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec4c:	e0c9      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec52:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec54:	69bb      	ldr	r3, [r7, #24]
 800ec56:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d0ef      	beq.n	800ec3e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1ea      	bne.n	800ec3e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec6c:	f003 0304 	and.w	r3, r3, #4
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d004      	beq.n	800ec7e <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2204      	movs	r2, #4
 800ec78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ec7a:	2304      	movs	r3, #4
 800ec7c:	e0b1      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec82:	f003 0301 	and.w	r3, r3, #1
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d004      	beq.n	800ec94 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ec90:	2301      	movs	r3, #1
 800ec92:	e0a6      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	22c5      	movs	r2, #197	; 0xc5
 800ec98:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ec9a:	68f8      	ldr	r0, [r7, #12]
 800ec9c:	f7ff fd7f 	bl	800e79e <SDIO_GetCommandResponse>
 800eca0:	4603      	mov	r3, r0
 800eca2:	461a      	mov	r2, r3
 800eca4:	7afb      	ldrb	r3, [r7, #11]
 800eca6:	4293      	cmp	r3, r2
 800eca8:	d001      	beq.n	800ecae <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecaa:	2301      	movs	r3, #1
 800ecac:	e099      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ecae:	2100      	movs	r1, #0
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	f7ff fd81 	bl	800e7b8 <SDIO_GetResponse>
 800ecb6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ecb8:	697a      	ldr	r2, [r7, #20]
 800ecba:	4b4e      	ldr	r3, [pc, #312]	; (800edf4 <SDMMC_GetCmdResp1+0x1d8>)
 800ecbc:	4013      	ands	r3, r2
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d101      	bne.n	800ecc6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e08d      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	da02      	bge.n	800ecd2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800eccc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ecd0:	e087      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d001      	beq.n	800ece0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ecdc:	2340      	movs	r3, #64	; 0x40
 800ecde:	e080      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d001      	beq.n	800ecee <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ecea:	2380      	movs	r3, #128	; 0x80
 800ecec:	e079      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d002      	beq.n	800ecfe <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ecf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ecfc:	e071      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d002      	beq.n	800ed0e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ed08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed0c:	e069      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d002      	beq.n	800ed1e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ed18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed1c:	e061      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d002      	beq.n	800ed2e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ed28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed2c:	e059      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d002      	beq.n	800ed3e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed3c:	e051      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ed48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed4c:	e049      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d002      	beq.n	800ed5e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ed58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ed5c:	e041      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ed5e:	697b      	ldr	r3, [r7, #20]
 800ed60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d002      	beq.n	800ed6e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ed68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ed6c:	e039      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d002      	beq.n	800ed7e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ed78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ed7c:	e031      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d002      	beq.n	800ed8e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ed88:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed8c:	e029      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d002      	beq.n	800ed9e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ed98:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ed9c:	e021      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ed9e:	697b      	ldr	r3, [r7, #20]
 800eda0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d002      	beq.n	800edae <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800eda8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800edac:	e019      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800edae:	697b      	ldr	r3, [r7, #20]
 800edb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d002      	beq.n	800edbe <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800edb8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800edbc:	e011      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d002      	beq.n	800edce <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800edc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800edcc:	e009      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	f003 0308 	and.w	r3, r3, #8
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d002      	beq.n	800edde <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800edd8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800eddc:	e001      	b.n	800ede2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800edde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3720      	adds	r7, #32
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	20000044 	.word	0x20000044
 800edf0:	10624dd3 	.word	0x10624dd3
 800edf4:	fdffe008 	.word	0xfdffe008

0800edf8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800edf8:	b480      	push	{r7}
 800edfa:	b085      	sub	sp, #20
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee00:	4b1f      	ldr	r3, [pc, #124]	; (800ee80 <SDMMC_GetCmdResp2+0x88>)
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	4a1f      	ldr	r2, [pc, #124]	; (800ee84 <SDMMC_GetCmdResp2+0x8c>)
 800ee06:	fba2 2303 	umull	r2, r3, r2, r3
 800ee0a:	0a5b      	lsrs	r3, r3, #9
 800ee0c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee10:	fb02 f303 	mul.w	r3, r2, r3
 800ee14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	1e5a      	subs	r2, r3, #1
 800ee1a:	60fa      	str	r2, [r7, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d102      	bne.n	800ee26 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee24:	e026      	b.n	800ee74 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d0ef      	beq.n	800ee16 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ee36:	68bb      	ldr	r3, [r7, #8]
 800ee38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1ea      	bne.n	800ee16 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee44:	f003 0304 	and.w	r3, r3, #4
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d004      	beq.n	800ee56 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2204      	movs	r2, #4
 800ee50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee52:	2304      	movs	r3, #4
 800ee54:	e00e      	b.n	800ee74 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee5a:	f003 0301 	and.w	r3, r3, #1
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d004      	beq.n	800ee6c <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2201      	movs	r2, #1
 800ee66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ee68:	2301      	movs	r3, #1
 800ee6a:	e003      	b.n	800ee74 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	22c5      	movs	r2, #197	; 0xc5
 800ee70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800ee72:	2300      	movs	r3, #0
}
 800ee74:	4618      	mov	r0, r3
 800ee76:	3714      	adds	r7, #20
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7e:	4770      	bx	lr
 800ee80:	20000044 	.word	0x20000044
 800ee84:	10624dd3 	.word	0x10624dd3

0800ee88 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee90:	4b1a      	ldr	r3, [pc, #104]	; (800eefc <SDMMC_GetCmdResp3+0x74>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	4a1a      	ldr	r2, [pc, #104]	; (800ef00 <SDMMC_GetCmdResp3+0x78>)
 800ee96:	fba2 2303 	umull	r2, r3, r2, r3
 800ee9a:	0a5b      	lsrs	r3, r3, #9
 800ee9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800eea0:	fb02 f303 	mul.w	r3, r2, r3
 800eea4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	1e5a      	subs	r2, r3, #1
 800eeaa:	60fa      	str	r2, [r7, #12]
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d102      	bne.n	800eeb6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eeb0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eeb4:	e01b      	b.n	800eeee <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eeba:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d0ef      	beq.n	800eea6 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eec6:	68bb      	ldr	r3, [r7, #8]
 800eec8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d1ea      	bne.n	800eea6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eed4:	f003 0304 	and.w	r3, r3, #4
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d004      	beq.n	800eee6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2204      	movs	r2, #4
 800eee0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800eee2:	2304      	movs	r3, #4
 800eee4:	e003      	b.n	800eeee <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	22c5      	movs	r2, #197	; 0xc5
 800eeea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800eeec:	2300      	movs	r3, #0
}
 800eeee:	4618      	mov	r0, r3
 800eef0:	3714      	adds	r7, #20
 800eef2:	46bd      	mov	sp, r7
 800eef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef8:	4770      	bx	lr
 800eefa:	bf00      	nop
 800eefc:	20000044 	.word	0x20000044
 800ef00:	10624dd3 	.word	0x10624dd3

0800ef04 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b088      	sub	sp, #32
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	607a      	str	r2, [r7, #4]
 800ef10:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef12:	4b35      	ldr	r3, [pc, #212]	; (800efe8 <SDMMC_GetCmdResp6+0xe4>)
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	4a35      	ldr	r2, [pc, #212]	; (800efec <SDMMC_GetCmdResp6+0xe8>)
 800ef18:	fba2 2303 	umull	r2, r3, r2, r3
 800ef1c:	0a5b      	lsrs	r3, r3, #9
 800ef1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef22:	fb02 f303 	mul.w	r3, r2, r3
 800ef26:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ef28:	69fb      	ldr	r3, [r7, #28]
 800ef2a:	1e5a      	subs	r2, r3, #1
 800ef2c:	61fa      	str	r2, [r7, #28]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d102      	bne.n	800ef38 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef32:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef36:	e052      	b.n	800efde <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef3c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef3e:	69bb      	ldr	r3, [r7, #24]
 800ef40:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d0ef      	beq.n	800ef28 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d1ea      	bne.n	800ef28 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef56:	f003 0304 	and.w	r3, r3, #4
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d004      	beq.n	800ef68 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2204      	movs	r2, #4
 800ef62:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef64:	2304      	movs	r3, #4
 800ef66:	e03a      	b.n	800efde <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef6c:	f003 0301 	and.w	r3, r3, #1
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d004      	beq.n	800ef7e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2201      	movs	r2, #1
 800ef78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef7a:	2301      	movs	r3, #1
 800ef7c:	e02f      	b.n	800efde <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ef7e:	68f8      	ldr	r0, [r7, #12]
 800ef80:	f7ff fc0d 	bl	800e79e <SDIO_GetCommandResponse>
 800ef84:	4603      	mov	r3, r0
 800ef86:	461a      	mov	r2, r3
 800ef88:	7afb      	ldrb	r3, [r7, #11]
 800ef8a:	4293      	cmp	r3, r2
 800ef8c:	d001      	beq.n	800ef92 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e025      	b.n	800efde <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	22c5      	movs	r2, #197	; 0xc5
 800ef96:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ef98:	2100      	movs	r1, #0
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f7ff fc0c 	bl	800e7b8 <SDIO_GetResponse>
 800efa0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800efa2:	697b      	ldr	r3, [r7, #20]
 800efa4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d106      	bne.n	800efba <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	0c1b      	lsrs	r3, r3, #16
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800efb6:	2300      	movs	r3, #0
 800efb8:	e011      	b.n	800efde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800efba:	697b      	ldr	r3, [r7, #20]
 800efbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d002      	beq.n	800efca <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800efc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800efc8:	e009      	b.n	800efde <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800efca:	697b      	ldr	r3, [r7, #20]
 800efcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d002      	beq.n	800efda <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800efd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efd8:	e001      	b.n	800efde <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800efda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3720      	adds	r7, #32
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	20000044 	.word	0x20000044
 800efec:	10624dd3 	.word	0x10624dd3

0800eff0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800eff0:	b480      	push	{r7}
 800eff2:	b085      	sub	sp, #20
 800eff4:	af00      	add	r7, sp, #0
 800eff6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eff8:	4b22      	ldr	r3, [pc, #136]	; (800f084 <SDMMC_GetCmdResp7+0x94>)
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	4a22      	ldr	r2, [pc, #136]	; (800f088 <SDMMC_GetCmdResp7+0x98>)
 800effe:	fba2 2303 	umull	r2, r3, r2, r3
 800f002:	0a5b      	lsrs	r3, r3, #9
 800f004:	f241 3288 	movw	r2, #5000	; 0x1388
 800f008:	fb02 f303 	mul.w	r3, r2, r3
 800f00c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	1e5a      	subs	r2, r3, #1
 800f012:	60fa      	str	r2, [r7, #12]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d102      	bne.n	800f01e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f018:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f01c:	e02c      	b.n	800f078 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f022:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d0ef      	beq.n	800f00e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f034:	2b00      	cmp	r3, #0
 800f036:	d1ea      	bne.n	800f00e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f03c:	f003 0304 	and.w	r3, r3, #4
 800f040:	2b00      	cmp	r3, #0
 800f042:	d004      	beq.n	800f04e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2204      	movs	r2, #4
 800f048:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f04a:	2304      	movs	r3, #4
 800f04c:	e014      	b.n	800f078 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f052:	f003 0301 	and.w	r3, r3, #1
 800f056:	2b00      	cmp	r3, #0
 800f058:	d004      	beq.n	800f064 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2201      	movs	r2, #1
 800f05e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f060:	2301      	movs	r3, #1
 800f062:	e009      	b.n	800f078 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d002      	beq.n	800f076 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	2240      	movs	r2, #64	; 0x40
 800f074:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f076:	2300      	movs	r3, #0
  
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3714      	adds	r7, #20
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr
 800f084:	20000044 	.word	0x20000044
 800f088:	10624dd3 	.word	0x10624dd3

0800f08c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f08c:	b480      	push	{r7}
 800f08e:	b085      	sub	sp, #20
 800f090:	af00      	add	r7, sp, #0
 800f092:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f094:	4b11      	ldr	r3, [pc, #68]	; (800f0dc <SDMMC_GetCmdError+0x50>)
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4a11      	ldr	r2, [pc, #68]	; (800f0e0 <SDMMC_GetCmdError+0x54>)
 800f09a:	fba2 2303 	umull	r2, r3, r2, r3
 800f09e:	0a5b      	lsrs	r3, r3, #9
 800f0a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0a4:	fb02 f303 	mul.w	r3, r2, r3
 800f0a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	1e5a      	subs	r2, r3, #1
 800f0ae:	60fa      	str	r2, [r7, #12]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d102      	bne.n	800f0ba <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f0b8:	e009      	b.n	800f0ce <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d0f1      	beq.n	800f0aa <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	22c5      	movs	r2, #197	; 0xc5
 800f0ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f0cc:	2300      	movs	r3, #0
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3714      	adds	r7, #20
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	20000044 	.word	0x20000044
 800f0e0:	10624dd3 	.word	0x10624dd3

0800f0e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f0e8:	4904      	ldr	r1, [pc, #16]	; (800f0fc <MX_FATFS_Init+0x18>)
 800f0ea:	4805      	ldr	r0, [pc, #20]	; (800f100 <MX_FATFS_Init+0x1c>)
 800f0ec:	f003 f818 	bl	8012120 <FATFS_LinkDriver>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	461a      	mov	r2, r3
 800f0f4:	4b03      	ldr	r3, [pc, #12]	; (800f104 <MX_FATFS_Init+0x20>)
 800f0f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f0f8:	bf00      	nop
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	2000121c 	.word	0x2000121c
 800f100:	08017a48 	.word	0x08017a48
 800f104:	20001218 	.word	0x20001218

0800f108 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f108:	b480      	push	{r7}
 800f10a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f10c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f10e:	4618      	mov	r0, r3
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f11e:	2300      	movs	r3, #0
 800f120:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f122:	f000 f86b 	bl	800f1fc <BSP_SD_IsDetected>
 800f126:	4603      	mov	r3, r0
 800f128:	2b01      	cmp	r3, #1
 800f12a:	d001      	beq.n	800f130 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f12c:	2301      	movs	r3, #1
 800f12e:	e005      	b.n	800f13c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f130:	4804      	ldr	r0, [pc, #16]	; (800f144 <BSP_SD_Init+0x2c>)
 800f132:	f7fc f8bd 	bl	800b2b0 <HAL_SD_Init>
 800f136:	4603      	mov	r3, r0
 800f138:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800f13a:	79fb      	ldrb	r3, [r7, #7]
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3708      	adds	r7, #8
 800f140:	46bd      	mov	sp, r7
 800f142:	bd80      	pop	{r7, pc}
 800f144:	200009a8 	.word	0x200009a8

0800f148 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b088      	sub	sp, #32
 800f14c:	af02      	add	r7, sp, #8
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
 800f154:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f156:	2300      	movs	r3, #0
 800f158:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	9300      	str	r3, [sp, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	68ba      	ldr	r2, [r7, #8]
 800f162:	68f9      	ldr	r1, [r7, #12]
 800f164:	4806      	ldr	r0, [pc, #24]	; (800f180 <BSP_SD_ReadBlocks+0x38>)
 800f166:	f7fc f953 	bl	800b410 <HAL_SD_ReadBlocks>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d001      	beq.n	800f174 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f170:	2301      	movs	r3, #1
 800f172:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f174:	7dfb      	ldrb	r3, [r7, #23]
}
 800f176:	4618      	mov	r0, r3
 800f178:	3718      	adds	r7, #24
 800f17a:	46bd      	mov	sp, r7
 800f17c:	bd80      	pop	{r7, pc}
 800f17e:	bf00      	nop
 800f180:	200009a8 	.word	0x200009a8

0800f184 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b088      	sub	sp, #32
 800f188:	af02      	add	r7, sp, #8
 800f18a:	60f8      	str	r0, [r7, #12]
 800f18c:	60b9      	str	r1, [r7, #8]
 800f18e:	607a      	str	r2, [r7, #4]
 800f190:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800f192:	2300      	movs	r3, #0
 800f194:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	68ba      	ldr	r2, [r7, #8]
 800f19e:	68f9      	ldr	r1, [r7, #12]
 800f1a0:	4806      	ldr	r0, [pc, #24]	; (800f1bc <BSP_SD_WriteBlocks+0x38>)
 800f1a2:	f7fc fb13 	bl	800b7cc <HAL_SD_WriteBlocks>
 800f1a6:	4603      	mov	r3, r0
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	d001      	beq.n	800f1b0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800f1ac:	2301      	movs	r3, #1
 800f1ae:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f1b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3718      	adds	r7, #24
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	bd80      	pop	{r7, pc}
 800f1ba:	bf00      	nop
 800f1bc:	200009a8 	.word	0x200009a8

0800f1c0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f1c4:	4805      	ldr	r0, [pc, #20]	; (800f1dc <BSP_SD_GetCardState+0x1c>)
 800f1c6:	f7fc fe57 	bl	800be78 <HAL_SD_GetCardState>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	2b04      	cmp	r3, #4
 800f1ce:	bf14      	ite	ne
 800f1d0:	2301      	movne	r3, #1
 800f1d2:	2300      	moveq	r3, #0
 800f1d4:	b2db      	uxtb	r3, r3
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	bd80      	pop	{r7, pc}
 800f1da:	bf00      	nop
 800f1dc:	200009a8 	.word	0x200009a8

0800f1e0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b082      	sub	sp, #8
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f1e8:	6879      	ldr	r1, [r7, #4]
 800f1ea:	4803      	ldr	r0, [pc, #12]	; (800f1f8 <BSP_SD_GetCardInfo+0x18>)
 800f1ec:	f7fc fe18 	bl	800be20 <HAL_SD_GetCardInfo>
}
 800f1f0:	bf00      	nop
 800f1f2:	3708      	adds	r7, #8
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	200009a8 	.word	0x200009a8

0800f1fc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f202:	2301      	movs	r3, #1
 800f204:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800f206:	79fb      	ldrb	r3, [r7, #7]
 800f208:	b2db      	uxtb	r3, r3
}
 800f20a:	4618      	mov	r0, r3
 800f20c:	370c      	adds	r7, #12
 800f20e:	46bd      	mov	sp, r7
 800f210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f214:	4770      	bx	lr
	...

0800f218 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	4603      	mov	r3, r0
 800f220:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f222:	4b0b      	ldr	r3, [pc, #44]	; (800f250 <SD_CheckStatus+0x38>)
 800f224:	2201      	movs	r2, #1
 800f226:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f228:	f7ff ffca 	bl	800f1c0 <BSP_SD_GetCardState>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d107      	bne.n	800f242 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f232:	4b07      	ldr	r3, [pc, #28]	; (800f250 <SD_CheckStatus+0x38>)
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	b2db      	uxtb	r3, r3
 800f238:	f023 0301 	bic.w	r3, r3, #1
 800f23c:	b2da      	uxtb	r2, r3
 800f23e:	4b04      	ldr	r3, [pc, #16]	; (800f250 <SD_CheckStatus+0x38>)
 800f240:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f242:	4b03      	ldr	r3, [pc, #12]	; (800f250 <SD_CheckStatus+0x38>)
 800f244:	781b      	ldrb	r3, [r3, #0]
 800f246:	b2db      	uxtb	r3, r3
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}
 800f250:	20000055 	.word	0x20000055

0800f254 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b082      	sub	sp, #8
 800f258:	af00      	add	r7, sp, #0
 800f25a:	4603      	mov	r3, r0
 800f25c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f25e:	4b0b      	ldr	r3, [pc, #44]	; (800f28c <SD_initialize+0x38>)
 800f260:	2201      	movs	r2, #1
 800f262:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f264:	f7ff ff58 	bl	800f118 <BSP_SD_Init>
 800f268:	4603      	mov	r3, r0
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d107      	bne.n	800f27e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800f26e:	79fb      	ldrb	r3, [r7, #7]
 800f270:	4618      	mov	r0, r3
 800f272:	f7ff ffd1 	bl	800f218 <SD_CheckStatus>
 800f276:	4603      	mov	r3, r0
 800f278:	461a      	mov	r2, r3
 800f27a:	4b04      	ldr	r3, [pc, #16]	; (800f28c <SD_initialize+0x38>)
 800f27c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f27e:	4b03      	ldr	r3, [pc, #12]	; (800f28c <SD_initialize+0x38>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	b2db      	uxtb	r3, r3
}
 800f284:	4618      	mov	r0, r3
 800f286:	3708      	adds	r7, #8
 800f288:	46bd      	mov	sp, r7
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	20000055 	.word	0x20000055

0800f290 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f290:	b580      	push	{r7, lr}
 800f292:	b082      	sub	sp, #8
 800f294:	af00      	add	r7, sp, #0
 800f296:	4603      	mov	r3, r0
 800f298:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f29a:	79fb      	ldrb	r3, [r7, #7]
 800f29c:	4618      	mov	r0, r3
 800f29e:	f7ff ffbb 	bl	800f218 <SD_CheckStatus>
 800f2a2:	4603      	mov	r3, r0
}
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	3708      	adds	r7, #8
 800f2a8:	46bd      	mov	sp, r7
 800f2aa:	bd80      	pop	{r7, pc}

0800f2ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b086      	sub	sp, #24
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	60b9      	str	r1, [r7, #8]
 800f2b4:	607a      	str	r2, [r7, #4]
 800f2b6:	603b      	str	r3, [r7, #0]
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f2bc:	2301      	movs	r3, #1
 800f2be:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800f2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	6879      	ldr	r1, [r7, #4]
 800f2c8:	68b8      	ldr	r0, [r7, #8]
 800f2ca:	f7ff ff3d 	bl	800f148 <BSP_SD_ReadBlocks>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d107      	bne.n	800f2e4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800f2d4:	bf00      	nop
 800f2d6:	f7ff ff73 	bl	800f1c0 <BSP_SD_GetCardState>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d1fa      	bne.n	800f2d6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f2e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3718      	adds	r7, #24
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}

0800f2ee <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f2ee:	b580      	push	{r7, lr}
 800f2f0:	b086      	sub	sp, #24
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	60b9      	str	r1, [r7, #8]
 800f2f6:	607a      	str	r2, [r7, #4]
 800f2f8:	603b      	str	r3, [r7, #0]
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f2fe:	2301      	movs	r3, #1
 800f300:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800f302:	f04f 33ff 	mov.w	r3, #4294967295
 800f306:	683a      	ldr	r2, [r7, #0]
 800f308:	6879      	ldr	r1, [r7, #4]
 800f30a:	68b8      	ldr	r0, [r7, #8]
 800f30c:	f7ff ff3a 	bl	800f184 <BSP_SD_WriteBlocks>
 800f310:	4603      	mov	r3, r0
 800f312:	2b00      	cmp	r3, #0
 800f314:	d107      	bne.n	800f326 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800f316:	bf00      	nop
 800f318:	f7ff ff52 	bl	800f1c0 <BSP_SD_GetCardState>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d1fa      	bne.n	800f318 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800f322:	2300      	movs	r3, #0
 800f324:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800f326:	7dfb      	ldrb	r3, [r7, #23]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3718      	adds	r7, #24
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}

0800f330 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b08c      	sub	sp, #48	; 0x30
 800f334:	af00      	add	r7, sp, #0
 800f336:	4603      	mov	r3, r0
 800f338:	603a      	str	r2, [r7, #0]
 800f33a:	71fb      	strb	r3, [r7, #7]
 800f33c:	460b      	mov	r3, r1
 800f33e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f340:	2301      	movs	r3, #1
 800f342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f346:	4b25      	ldr	r3, [pc, #148]	; (800f3dc <SD_ioctl+0xac>)
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	b2db      	uxtb	r3, r3
 800f34c:	f003 0301 	and.w	r3, r3, #1
 800f350:	2b00      	cmp	r3, #0
 800f352:	d001      	beq.n	800f358 <SD_ioctl+0x28>
 800f354:	2303      	movs	r3, #3
 800f356:	e03c      	b.n	800f3d2 <SD_ioctl+0xa2>

  switch (cmd)
 800f358:	79bb      	ldrb	r3, [r7, #6]
 800f35a:	2b03      	cmp	r3, #3
 800f35c:	d834      	bhi.n	800f3c8 <SD_ioctl+0x98>
 800f35e:	a201      	add	r2, pc, #4	; (adr r2, 800f364 <SD_ioctl+0x34>)
 800f360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f364:	0800f375 	.word	0x0800f375
 800f368:	0800f37d 	.word	0x0800f37d
 800f36c:	0800f395 	.word	0x0800f395
 800f370:	0800f3af 	.word	0x0800f3af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f374:	2300      	movs	r3, #0
 800f376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f37a:	e028      	b.n	800f3ce <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f37c:	f107 030c 	add.w	r3, r7, #12
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff ff2d 	bl	800f1e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f388:	683b      	ldr	r3, [r7, #0]
 800f38a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f38c:	2300      	movs	r3, #0
 800f38e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f392:	e01c      	b.n	800f3ce <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f394:	f107 030c 	add.w	r3, r7, #12
 800f398:	4618      	mov	r0, r3
 800f39a:	f7ff ff21 	bl	800f1e0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	b29a      	uxth	r2, r3
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f3ac:	e00f      	b.n	800f3ce <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f3ae:	f107 030c 	add.w	r3, r7, #12
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	f7ff ff14 	bl	800f1e0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f3b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ba:	0a5a      	lsrs	r2, r3, #9
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f3c6:	e002      	b.n	800f3ce <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f3c8:	2304      	movs	r3, #4
 800f3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f3ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3730      	adds	r7, #48	; 0x30
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}
 800f3da:	bf00      	nop
 800f3dc:	20000055 	.word	0x20000055

0800f3e0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b084      	sub	sp, #16
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f3ea:	79fb      	ldrb	r3, [r7, #7]
 800f3ec:	4a08      	ldr	r2, [pc, #32]	; (800f410 <disk_status+0x30>)
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	4413      	add	r3, r2
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	79fa      	ldrb	r2, [r7, #7]
 800f3f8:	4905      	ldr	r1, [pc, #20]	; (800f410 <disk_status+0x30>)
 800f3fa:	440a      	add	r2, r1
 800f3fc:	7a12      	ldrb	r2, [r2, #8]
 800f3fe:	4610      	mov	r0, r2
 800f400:	4798      	blx	r3
 800f402:	4603      	mov	r3, r0
 800f404:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f406:	7bfb      	ldrb	r3, [r7, #15]
}
 800f408:	4618      	mov	r0, r3
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	20001448 	.word	0x20001448

0800f414 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f414:	b580      	push	{r7, lr}
 800f416:	b084      	sub	sp, #16
 800f418:	af00      	add	r7, sp, #0
 800f41a:	4603      	mov	r3, r0
 800f41c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f41e:	2300      	movs	r3, #0
 800f420:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f422:	79fb      	ldrb	r3, [r7, #7]
 800f424:	4a0d      	ldr	r2, [pc, #52]	; (800f45c <disk_initialize+0x48>)
 800f426:	5cd3      	ldrb	r3, [r2, r3]
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d111      	bne.n	800f450 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	4a0b      	ldr	r2, [pc, #44]	; (800f45c <disk_initialize+0x48>)
 800f430:	2101      	movs	r1, #1
 800f432:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f434:	79fb      	ldrb	r3, [r7, #7]
 800f436:	4a09      	ldr	r2, [pc, #36]	; (800f45c <disk_initialize+0x48>)
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	4413      	add	r3, r2
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	79fa      	ldrb	r2, [r7, #7]
 800f442:	4906      	ldr	r1, [pc, #24]	; (800f45c <disk_initialize+0x48>)
 800f444:	440a      	add	r2, r1
 800f446:	7a12      	ldrb	r2, [r2, #8]
 800f448:	4610      	mov	r0, r2
 800f44a:	4798      	blx	r3
 800f44c:	4603      	mov	r3, r0
 800f44e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f450:	7bfb      	ldrb	r3, [r7, #15]
}
 800f452:	4618      	mov	r0, r3
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}
 800f45a:	bf00      	nop
 800f45c:	20001448 	.word	0x20001448

0800f460 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f460:	b590      	push	{r4, r7, lr}
 800f462:	b087      	sub	sp, #28
 800f464:	af00      	add	r7, sp, #0
 800f466:	60b9      	str	r1, [r7, #8]
 800f468:	607a      	str	r2, [r7, #4]
 800f46a:	603b      	str	r3, [r7, #0]
 800f46c:	4603      	mov	r3, r0
 800f46e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f470:	7bfb      	ldrb	r3, [r7, #15]
 800f472:	4a0a      	ldr	r2, [pc, #40]	; (800f49c <disk_read+0x3c>)
 800f474:	009b      	lsls	r3, r3, #2
 800f476:	4413      	add	r3, r2
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	689c      	ldr	r4, [r3, #8]
 800f47c:	7bfb      	ldrb	r3, [r7, #15]
 800f47e:	4a07      	ldr	r2, [pc, #28]	; (800f49c <disk_read+0x3c>)
 800f480:	4413      	add	r3, r2
 800f482:	7a18      	ldrb	r0, [r3, #8]
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	68b9      	ldr	r1, [r7, #8]
 800f48a:	47a0      	blx	r4
 800f48c:	4603      	mov	r3, r0
 800f48e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f490:	7dfb      	ldrb	r3, [r7, #23]
}
 800f492:	4618      	mov	r0, r3
 800f494:	371c      	adds	r7, #28
 800f496:	46bd      	mov	sp, r7
 800f498:	bd90      	pop	{r4, r7, pc}
 800f49a:	bf00      	nop
 800f49c:	20001448 	.word	0x20001448

0800f4a0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f4a0:	b590      	push	{r4, r7, lr}
 800f4a2:	b087      	sub	sp, #28
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	60b9      	str	r1, [r7, #8]
 800f4a8:	607a      	str	r2, [r7, #4]
 800f4aa:	603b      	str	r3, [r7, #0]
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f4b0:	7bfb      	ldrb	r3, [r7, #15]
 800f4b2:	4a0a      	ldr	r2, [pc, #40]	; (800f4dc <disk_write+0x3c>)
 800f4b4:	009b      	lsls	r3, r3, #2
 800f4b6:	4413      	add	r3, r2
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	68dc      	ldr	r4, [r3, #12]
 800f4bc:	7bfb      	ldrb	r3, [r7, #15]
 800f4be:	4a07      	ldr	r2, [pc, #28]	; (800f4dc <disk_write+0x3c>)
 800f4c0:	4413      	add	r3, r2
 800f4c2:	7a18      	ldrb	r0, [r3, #8]
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	687a      	ldr	r2, [r7, #4]
 800f4c8:	68b9      	ldr	r1, [r7, #8]
 800f4ca:	47a0      	blx	r4
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	75fb      	strb	r3, [r7, #23]
  return res;
 800f4d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	371c      	adds	r7, #28
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd90      	pop	{r4, r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	20001448 	.word	0x20001448

0800f4e0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	4603      	mov	r3, r0
 800f4e8:	603a      	str	r2, [r7, #0]
 800f4ea:	71fb      	strb	r3, [r7, #7]
 800f4ec:	460b      	mov	r3, r1
 800f4ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f4f0:	79fb      	ldrb	r3, [r7, #7]
 800f4f2:	4a09      	ldr	r2, [pc, #36]	; (800f518 <disk_ioctl+0x38>)
 800f4f4:	009b      	lsls	r3, r3, #2
 800f4f6:	4413      	add	r3, r2
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	691b      	ldr	r3, [r3, #16]
 800f4fc:	79fa      	ldrb	r2, [r7, #7]
 800f4fe:	4906      	ldr	r1, [pc, #24]	; (800f518 <disk_ioctl+0x38>)
 800f500:	440a      	add	r2, r1
 800f502:	7a10      	ldrb	r0, [r2, #8]
 800f504:	79b9      	ldrb	r1, [r7, #6]
 800f506:	683a      	ldr	r2, [r7, #0]
 800f508:	4798      	blx	r3
 800f50a:	4603      	mov	r3, r0
 800f50c:	73fb      	strb	r3, [r7, #15]
  return res;
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f510:	4618      	mov	r0, r3
 800f512:	3710      	adds	r7, #16
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}
 800f518:	20001448 	.word	0x20001448

0800f51c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f51c:	b480      	push	{r7}
 800f51e:	b085      	sub	sp, #20
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	3301      	adds	r3, #1
 800f528:	781b      	ldrb	r3, [r3, #0]
 800f52a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f52c:	89fb      	ldrh	r3, [r7, #14]
 800f52e:	021b      	lsls	r3, r3, #8
 800f530:	b21a      	sxth	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	781b      	ldrb	r3, [r3, #0]
 800f536:	b21b      	sxth	r3, r3
 800f538:	4313      	orrs	r3, r2
 800f53a:	b21b      	sxth	r3, r3
 800f53c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f53e:	89fb      	ldrh	r3, [r7, #14]
}
 800f540:	4618      	mov	r0, r3
 800f542:	3714      	adds	r7, #20
 800f544:	46bd      	mov	sp, r7
 800f546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54a:	4770      	bx	lr

0800f54c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f54c:	b480      	push	{r7}
 800f54e:	b085      	sub	sp, #20
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3303      	adds	r3, #3
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	021b      	lsls	r3, r3, #8
 800f560:	687a      	ldr	r2, [r7, #4]
 800f562:	3202      	adds	r2, #2
 800f564:	7812      	ldrb	r2, [r2, #0]
 800f566:	4313      	orrs	r3, r2
 800f568:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	021b      	lsls	r3, r3, #8
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	3201      	adds	r2, #1
 800f572:	7812      	ldrb	r2, [r2, #0]
 800f574:	4313      	orrs	r3, r2
 800f576:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	021b      	lsls	r3, r3, #8
 800f57c:	687a      	ldr	r2, [r7, #4]
 800f57e:	7812      	ldrb	r2, [r2, #0]
 800f580:	4313      	orrs	r3, r2
 800f582:	60fb      	str	r3, [r7, #12]
	return rv;
 800f584:	68fb      	ldr	r3, [r7, #12]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3714      	adds	r7, #20
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr

0800f592 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f592:	b480      	push	{r7}
 800f594:	b083      	sub	sp, #12
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
 800f59a:	460b      	mov	r3, r1
 800f59c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	1c5a      	adds	r2, r3, #1
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	887a      	ldrh	r2, [r7, #2]
 800f5a6:	b2d2      	uxtb	r2, r2
 800f5a8:	701a      	strb	r2, [r3, #0]
 800f5aa:	887b      	ldrh	r3, [r7, #2]
 800f5ac:	0a1b      	lsrs	r3, r3, #8
 800f5ae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	1c5a      	adds	r2, r3, #1
 800f5b4:	607a      	str	r2, [r7, #4]
 800f5b6:	887a      	ldrh	r2, [r7, #2]
 800f5b8:	b2d2      	uxtb	r2, r2
 800f5ba:	701a      	strb	r2, [r3, #0]
}
 800f5bc:	bf00      	nop
 800f5be:	370c      	adds	r7, #12
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr

0800f5c8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f5c8:	b480      	push	{r7}
 800f5ca:	b083      	sub	sp, #12
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	6078      	str	r0, [r7, #4]
 800f5d0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	1c5a      	adds	r2, r3, #1
 800f5d6:	607a      	str	r2, [r7, #4]
 800f5d8:	683a      	ldr	r2, [r7, #0]
 800f5da:	b2d2      	uxtb	r2, r2
 800f5dc:	701a      	strb	r2, [r3, #0]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	0a1b      	lsrs	r3, r3, #8
 800f5e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	607a      	str	r2, [r7, #4]
 800f5ea:	683a      	ldr	r2, [r7, #0]
 800f5ec:	b2d2      	uxtb	r2, r2
 800f5ee:	701a      	strb	r2, [r3, #0]
 800f5f0:	683b      	ldr	r3, [r7, #0]
 800f5f2:	0a1b      	lsrs	r3, r3, #8
 800f5f4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	1c5a      	adds	r2, r3, #1
 800f5fa:	607a      	str	r2, [r7, #4]
 800f5fc:	683a      	ldr	r2, [r7, #0]
 800f5fe:	b2d2      	uxtb	r2, r2
 800f600:	701a      	strb	r2, [r3, #0]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	0a1b      	lsrs	r3, r3, #8
 800f606:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	607a      	str	r2, [r7, #4]
 800f60e:	683a      	ldr	r2, [r7, #0]
 800f610:	b2d2      	uxtb	r2, r2
 800f612:	701a      	strb	r2, [r3, #0]
}
 800f614:	bf00      	nop
 800f616:	370c      	adds	r7, #12
 800f618:	46bd      	mov	sp, r7
 800f61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61e:	4770      	bx	lr

0800f620 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f620:	b480      	push	{r7}
 800f622:	b087      	sub	sp, #28
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	60b9      	str	r1, [r7, #8]
 800f62a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f630:	68bb      	ldr	r3, [r7, #8]
 800f632:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d00d      	beq.n	800f656 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f63a:	693a      	ldr	r2, [r7, #16]
 800f63c:	1c53      	adds	r3, r2, #1
 800f63e:	613b      	str	r3, [r7, #16]
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	1c59      	adds	r1, r3, #1
 800f644:	6179      	str	r1, [r7, #20]
 800f646:	7812      	ldrb	r2, [r2, #0]
 800f648:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	3b01      	subs	r3, #1
 800f64e:	607b      	str	r3, [r7, #4]
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d1f1      	bne.n	800f63a <mem_cpy+0x1a>
	}
}
 800f656:	bf00      	nop
 800f658:	371c      	adds	r7, #28
 800f65a:	46bd      	mov	sp, r7
 800f65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f660:	4770      	bx	lr

0800f662 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f662:	b480      	push	{r7}
 800f664:	b087      	sub	sp, #28
 800f666:	af00      	add	r7, sp, #0
 800f668:	60f8      	str	r0, [r7, #12]
 800f66a:	60b9      	str	r1, [r7, #8]
 800f66c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	1c5a      	adds	r2, r3, #1
 800f676:	617a      	str	r2, [r7, #20]
 800f678:	68ba      	ldr	r2, [r7, #8]
 800f67a:	b2d2      	uxtb	r2, r2
 800f67c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	3b01      	subs	r3, #1
 800f682:	607b      	str	r3, [r7, #4]
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d1f3      	bne.n	800f672 <mem_set+0x10>
}
 800f68a:	bf00      	nop
 800f68c:	bf00      	nop
 800f68e:	371c      	adds	r7, #28
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f698:	b480      	push	{r7}
 800f69a:	b089      	sub	sp, #36	; 0x24
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	61fb      	str	r3, [r7, #28]
 800f6a8:	68bb      	ldr	r3, [r7, #8]
 800f6aa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	1c5a      	adds	r2, r3, #1
 800f6b4:	61fa      	str	r2, [r7, #28]
 800f6b6:	781b      	ldrb	r3, [r3, #0]
 800f6b8:	4619      	mov	r1, r3
 800f6ba:	69bb      	ldr	r3, [r7, #24]
 800f6bc:	1c5a      	adds	r2, r3, #1
 800f6be:	61ba      	str	r2, [r7, #24]
 800f6c0:	781b      	ldrb	r3, [r3, #0]
 800f6c2:	1acb      	subs	r3, r1, r3
 800f6c4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	3b01      	subs	r3, #1
 800f6ca:	607b      	str	r3, [r7, #4]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d002      	beq.n	800f6d8 <mem_cmp+0x40>
 800f6d2:	697b      	ldr	r3, [r7, #20]
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d0eb      	beq.n	800f6b0 <mem_cmp+0x18>

	return r;
 800f6d8:	697b      	ldr	r3, [r7, #20]
}
 800f6da:	4618      	mov	r0, r3
 800f6dc:	3724      	adds	r7, #36	; 0x24
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
 800f6ee:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f6f0:	e002      	b.n	800f6f8 <chk_chr+0x12>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	607b      	str	r3, [r7, #4]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	781b      	ldrb	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d005      	beq.n	800f70c <chk_chr+0x26>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	781b      	ldrb	r3, [r3, #0]
 800f704:	461a      	mov	r2, r3
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	4293      	cmp	r3, r2
 800f70a:	d1f2      	bne.n	800f6f2 <chk_chr+0xc>
	return *str;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	781b      	ldrb	r3, [r3, #0]
}
 800f710:	4618      	mov	r0, r3
 800f712:	370c      	adds	r7, #12
 800f714:	46bd      	mov	sp, r7
 800f716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71a:	4770      	bx	lr

0800f71c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f71c:	b480      	push	{r7}
 800f71e:	b085      	sub	sp, #20
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
 800f724:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f726:	2300      	movs	r3, #0
 800f728:	60bb      	str	r3, [r7, #8]
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	60fb      	str	r3, [r7, #12]
 800f72e:	e029      	b.n	800f784 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f730:	4a27      	ldr	r2, [pc, #156]	; (800f7d0 <chk_lock+0xb4>)
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	011b      	lsls	r3, r3, #4
 800f736:	4413      	add	r3, r2
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d01d      	beq.n	800f77a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f73e:	4a24      	ldr	r2, [pc, #144]	; (800f7d0 <chk_lock+0xb4>)
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	011b      	lsls	r3, r3, #4
 800f744:	4413      	add	r3, r2
 800f746:	681a      	ldr	r2, [r3, #0]
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	681b      	ldr	r3, [r3, #0]
 800f74c:	429a      	cmp	r2, r3
 800f74e:	d116      	bne.n	800f77e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f750:	4a1f      	ldr	r2, [pc, #124]	; (800f7d0 <chk_lock+0xb4>)
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	011b      	lsls	r3, r3, #4
 800f756:	4413      	add	r3, r2
 800f758:	3304      	adds	r3, #4
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f760:	429a      	cmp	r2, r3
 800f762:	d10c      	bne.n	800f77e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f764:	4a1a      	ldr	r2, [pc, #104]	; (800f7d0 <chk_lock+0xb4>)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	011b      	lsls	r3, r3, #4
 800f76a:	4413      	add	r3, r2
 800f76c:	3308      	adds	r3, #8
 800f76e:	681a      	ldr	r2, [r3, #0]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f774:	429a      	cmp	r2, r3
 800f776:	d102      	bne.n	800f77e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f778:	e007      	b.n	800f78a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f77a:	2301      	movs	r3, #1
 800f77c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	3301      	adds	r3, #1
 800f782:	60fb      	str	r3, [r7, #12]
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	2b01      	cmp	r3, #1
 800f788:	d9d2      	bls.n	800f730 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	2b02      	cmp	r3, #2
 800f78e:	d109      	bne.n	800f7a4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f790:	68bb      	ldr	r3, [r7, #8]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d102      	bne.n	800f79c <chk_lock+0x80>
 800f796:	683b      	ldr	r3, [r7, #0]
 800f798:	2b02      	cmp	r3, #2
 800f79a:	d101      	bne.n	800f7a0 <chk_lock+0x84>
 800f79c:	2300      	movs	r3, #0
 800f79e:	e010      	b.n	800f7c2 <chk_lock+0xa6>
 800f7a0:	2312      	movs	r3, #18
 800f7a2:	e00e      	b.n	800f7c2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d108      	bne.n	800f7bc <chk_lock+0xa0>
 800f7aa:	4a09      	ldr	r2, [pc, #36]	; (800f7d0 <chk_lock+0xb4>)
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	011b      	lsls	r3, r3, #4
 800f7b0:	4413      	add	r3, r2
 800f7b2:	330c      	adds	r3, #12
 800f7b4:	881b      	ldrh	r3, [r3, #0]
 800f7b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f7ba:	d101      	bne.n	800f7c0 <chk_lock+0xa4>
 800f7bc:	2310      	movs	r3, #16
 800f7be:	e000      	b.n	800f7c2 <chk_lock+0xa6>
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3714      	adds	r7, #20
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	20001228 	.word	0x20001228

0800f7d4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b083      	sub	sp, #12
 800f7d8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f7da:	2300      	movs	r3, #0
 800f7dc:	607b      	str	r3, [r7, #4]
 800f7de:	e002      	b.n	800f7e6 <enq_lock+0x12>
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	3301      	adds	r3, #1
 800f7e4:	607b      	str	r3, [r7, #4]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d806      	bhi.n	800f7fa <enq_lock+0x26>
 800f7ec:	4a09      	ldr	r2, [pc, #36]	; (800f814 <enq_lock+0x40>)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	011b      	lsls	r3, r3, #4
 800f7f2:	4413      	add	r3, r2
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d1f2      	bne.n	800f7e0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2b02      	cmp	r3, #2
 800f7fe:	bf14      	ite	ne
 800f800:	2301      	movne	r3, #1
 800f802:	2300      	moveq	r3, #0
 800f804:	b2db      	uxtb	r3, r3
}
 800f806:	4618      	mov	r0, r3
 800f808:	370c      	adds	r7, #12
 800f80a:	46bd      	mov	sp, r7
 800f80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f810:	4770      	bx	lr
 800f812:	bf00      	nop
 800f814:	20001228 	.word	0x20001228

0800f818 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f822:	2300      	movs	r3, #0
 800f824:	60fb      	str	r3, [r7, #12]
 800f826:	e01f      	b.n	800f868 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f828:	4a41      	ldr	r2, [pc, #260]	; (800f930 <inc_lock+0x118>)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	011b      	lsls	r3, r3, #4
 800f82e:	4413      	add	r3, r2
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	429a      	cmp	r2, r3
 800f838:	d113      	bne.n	800f862 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f83a:	4a3d      	ldr	r2, [pc, #244]	; (800f930 <inc_lock+0x118>)
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	4413      	add	r3, r2
 800f842:	3304      	adds	r3, #4
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f84a:	429a      	cmp	r2, r3
 800f84c:	d109      	bne.n	800f862 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f84e:	4a38      	ldr	r2, [pc, #224]	; (800f930 <inc_lock+0x118>)
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	011b      	lsls	r3, r3, #4
 800f854:	4413      	add	r3, r2
 800f856:	3308      	adds	r3, #8
 800f858:	681a      	ldr	r2, [r3, #0]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f85e:	429a      	cmp	r2, r3
 800f860:	d006      	beq.n	800f870 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	3301      	adds	r3, #1
 800f866:	60fb      	str	r3, [r7, #12]
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2b01      	cmp	r3, #1
 800f86c:	d9dc      	bls.n	800f828 <inc_lock+0x10>
 800f86e:	e000      	b.n	800f872 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f870:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	2b02      	cmp	r3, #2
 800f876:	d132      	bne.n	800f8de <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f878:	2300      	movs	r3, #0
 800f87a:	60fb      	str	r3, [r7, #12]
 800f87c:	e002      	b.n	800f884 <inc_lock+0x6c>
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	3301      	adds	r3, #1
 800f882:	60fb      	str	r3, [r7, #12]
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2b01      	cmp	r3, #1
 800f888:	d806      	bhi.n	800f898 <inc_lock+0x80>
 800f88a:	4a29      	ldr	r2, [pc, #164]	; (800f930 <inc_lock+0x118>)
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	011b      	lsls	r3, r3, #4
 800f890:	4413      	add	r3, r2
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	2b00      	cmp	r3, #0
 800f896:	d1f2      	bne.n	800f87e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2b02      	cmp	r3, #2
 800f89c:	d101      	bne.n	800f8a2 <inc_lock+0x8a>
 800f89e:	2300      	movs	r3, #0
 800f8a0:	e040      	b.n	800f924 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	681a      	ldr	r2, [r3, #0]
 800f8a6:	4922      	ldr	r1, [pc, #136]	; (800f930 <inc_lock+0x118>)
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	011b      	lsls	r3, r3, #4
 800f8ac:	440b      	add	r3, r1
 800f8ae:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	689a      	ldr	r2, [r3, #8]
 800f8b4:	491e      	ldr	r1, [pc, #120]	; (800f930 <inc_lock+0x118>)
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	011b      	lsls	r3, r3, #4
 800f8ba:	440b      	add	r3, r1
 800f8bc:	3304      	adds	r3, #4
 800f8be:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	695a      	ldr	r2, [r3, #20]
 800f8c4:	491a      	ldr	r1, [pc, #104]	; (800f930 <inc_lock+0x118>)
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	011b      	lsls	r3, r3, #4
 800f8ca:	440b      	add	r3, r1
 800f8cc:	3308      	adds	r3, #8
 800f8ce:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f8d0:	4a17      	ldr	r2, [pc, #92]	; (800f930 <inc_lock+0x118>)
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	011b      	lsls	r3, r3, #4
 800f8d6:	4413      	add	r3, r2
 800f8d8:	330c      	adds	r3, #12
 800f8da:	2200      	movs	r2, #0
 800f8dc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d009      	beq.n	800f8f8 <inc_lock+0xe0>
 800f8e4:	4a12      	ldr	r2, [pc, #72]	; (800f930 <inc_lock+0x118>)
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	011b      	lsls	r3, r3, #4
 800f8ea:	4413      	add	r3, r2
 800f8ec:	330c      	adds	r3, #12
 800f8ee:	881b      	ldrh	r3, [r3, #0]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d001      	beq.n	800f8f8 <inc_lock+0xe0>
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	e015      	b.n	800f924 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d108      	bne.n	800f910 <inc_lock+0xf8>
 800f8fe:	4a0c      	ldr	r2, [pc, #48]	; (800f930 <inc_lock+0x118>)
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	011b      	lsls	r3, r3, #4
 800f904:	4413      	add	r3, r2
 800f906:	330c      	adds	r3, #12
 800f908:	881b      	ldrh	r3, [r3, #0]
 800f90a:	3301      	adds	r3, #1
 800f90c:	b29a      	uxth	r2, r3
 800f90e:	e001      	b.n	800f914 <inc_lock+0xfc>
 800f910:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f914:	4906      	ldr	r1, [pc, #24]	; (800f930 <inc_lock+0x118>)
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	011b      	lsls	r3, r3, #4
 800f91a:	440b      	add	r3, r1
 800f91c:	330c      	adds	r3, #12
 800f91e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	3301      	adds	r3, #1
}
 800f924:	4618      	mov	r0, r3
 800f926:	3714      	adds	r7, #20
 800f928:	46bd      	mov	sp, r7
 800f92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92e:	4770      	bx	lr
 800f930:	20001228 	.word	0x20001228

0800f934 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f934:	b480      	push	{r7}
 800f936:	b085      	sub	sp, #20
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	3b01      	subs	r3, #1
 800f940:	607b      	str	r3, [r7, #4]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2b01      	cmp	r3, #1
 800f946:	d825      	bhi.n	800f994 <dec_lock+0x60>
		n = Files[i].ctr;
 800f948:	4a17      	ldr	r2, [pc, #92]	; (800f9a8 <dec_lock+0x74>)
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	011b      	lsls	r3, r3, #4
 800f94e:	4413      	add	r3, r2
 800f950:	330c      	adds	r3, #12
 800f952:	881b      	ldrh	r3, [r3, #0]
 800f954:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f956:	89fb      	ldrh	r3, [r7, #14]
 800f958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f95c:	d101      	bne.n	800f962 <dec_lock+0x2e>
 800f95e:	2300      	movs	r3, #0
 800f960:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f962:	89fb      	ldrh	r3, [r7, #14]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d002      	beq.n	800f96e <dec_lock+0x3a>
 800f968:	89fb      	ldrh	r3, [r7, #14]
 800f96a:	3b01      	subs	r3, #1
 800f96c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f96e:	4a0e      	ldr	r2, [pc, #56]	; (800f9a8 <dec_lock+0x74>)
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	011b      	lsls	r3, r3, #4
 800f974:	4413      	add	r3, r2
 800f976:	330c      	adds	r3, #12
 800f978:	89fa      	ldrh	r2, [r7, #14]
 800f97a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f97c:	89fb      	ldrh	r3, [r7, #14]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d105      	bne.n	800f98e <dec_lock+0x5a>
 800f982:	4a09      	ldr	r2, [pc, #36]	; (800f9a8 <dec_lock+0x74>)
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	011b      	lsls	r3, r3, #4
 800f988:	4413      	add	r3, r2
 800f98a:	2200      	movs	r2, #0
 800f98c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f98e:	2300      	movs	r3, #0
 800f990:	737b      	strb	r3, [r7, #13]
 800f992:	e001      	b.n	800f998 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f994:	2302      	movs	r3, #2
 800f996:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f998:	7b7b      	ldrb	r3, [r7, #13]
}
 800f99a:	4618      	mov	r0, r3
 800f99c:	3714      	adds	r7, #20
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a4:	4770      	bx	lr
 800f9a6:	bf00      	nop
 800f9a8:	20001228 	.word	0x20001228

0800f9ac <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b085      	sub	sp, #20
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	60fb      	str	r3, [r7, #12]
 800f9b8:	e010      	b.n	800f9dc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f9ba:	4a0d      	ldr	r2, [pc, #52]	; (800f9f0 <clear_lock+0x44>)
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	011b      	lsls	r3, r3, #4
 800f9c0:	4413      	add	r3, r2
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d105      	bne.n	800f9d6 <clear_lock+0x2a>
 800f9ca:	4a09      	ldr	r2, [pc, #36]	; (800f9f0 <clear_lock+0x44>)
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	011b      	lsls	r3, r3, #4
 800f9d0:	4413      	add	r3, r2
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	60fb      	str	r3, [r7, #12]
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2b01      	cmp	r3, #1
 800f9e0:	d9eb      	bls.n	800f9ba <clear_lock+0xe>
	}
}
 800f9e2:	bf00      	nop
 800f9e4:	bf00      	nop
 800f9e6:	3714      	adds	r7, #20
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr
 800f9f0:	20001228 	.word	0x20001228

0800f9f4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b086      	sub	sp, #24
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	78db      	ldrb	r3, [r3, #3]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d034      	beq.n	800fa72 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa0c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	7858      	ldrb	r0, [r3, #1]
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fa18:	2301      	movs	r3, #1
 800fa1a:	697a      	ldr	r2, [r7, #20]
 800fa1c:	f7ff fd40 	bl	800f4a0 <disk_write>
 800fa20:	4603      	mov	r3, r0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d002      	beq.n	800fa2c <sync_window+0x38>
			res = FR_DISK_ERR;
 800fa26:	2301      	movs	r3, #1
 800fa28:	73fb      	strb	r3, [r7, #15]
 800fa2a:	e022      	b.n	800fa72 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	2200      	movs	r2, #0
 800fa30:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa36:	697a      	ldr	r2, [r7, #20]
 800fa38:	1ad2      	subs	r2, r2, r3
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	69db      	ldr	r3, [r3, #28]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	d217      	bcs.n	800fa72 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	789b      	ldrb	r3, [r3, #2]
 800fa46:	613b      	str	r3, [r7, #16]
 800fa48:	e010      	b.n	800fa6c <sync_window+0x78>
					wsect += fs->fsize;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	69db      	ldr	r3, [r3, #28]
 800fa4e:	697a      	ldr	r2, [r7, #20]
 800fa50:	4413      	add	r3, r2
 800fa52:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	7858      	ldrb	r0, [r3, #1]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fa5e:	2301      	movs	r3, #1
 800fa60:	697a      	ldr	r2, [r7, #20]
 800fa62:	f7ff fd1d 	bl	800f4a0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fa66:	693b      	ldr	r3, [r7, #16]
 800fa68:	3b01      	subs	r3, #1
 800fa6a:	613b      	str	r3, [r7, #16]
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	2b01      	cmp	r3, #1
 800fa70:	d8eb      	bhi.n	800fa4a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fa72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa74:	4618      	mov	r0, r3
 800fa76:	3718      	adds	r7, #24
 800fa78:	46bd      	mov	sp, r7
 800fa7a:	bd80      	pop	{r7, pc}

0800fa7c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b084      	sub	sp, #16
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fa86:	2300      	movs	r3, #0
 800fa88:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa8e:	683a      	ldr	r2, [r7, #0]
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d01b      	beq.n	800facc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fa94:	6878      	ldr	r0, [r7, #4]
 800fa96:	f7ff ffad 	bl	800f9f4 <sync_window>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fa9e:	7bfb      	ldrb	r3, [r7, #15]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d113      	bne.n	800facc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	7858      	ldrb	r0, [r3, #1]
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800faae:	2301      	movs	r3, #1
 800fab0:	683a      	ldr	r2, [r7, #0]
 800fab2:	f7ff fcd5 	bl	800f460 <disk_read>
 800fab6:	4603      	mov	r3, r0
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d004      	beq.n	800fac6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fabc:	f04f 33ff 	mov.w	r3, #4294967295
 800fac0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fac2:	2301      	movs	r3, #1
 800fac4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	683a      	ldr	r2, [r7, #0]
 800faca:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800facc:	7bfb      	ldrb	r3, [r7, #15]
}
 800face:	4618      	mov	r0, r3
 800fad0:	3710      	adds	r7, #16
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7ff ff87 	bl	800f9f4 <sync_window>
 800fae6:	4603      	mov	r3, r0
 800fae8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800faea:	7bfb      	ldrb	r3, [r7, #15]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d158      	bne.n	800fba2 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	781b      	ldrb	r3, [r3, #0]
 800faf4:	2b03      	cmp	r3, #3
 800faf6:	d148      	bne.n	800fb8a <sync_fs+0xb2>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	791b      	ldrb	r3, [r3, #4]
 800fafc:	2b01      	cmp	r3, #1
 800fafe:	d144      	bne.n	800fb8a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3334      	adds	r3, #52	; 0x34
 800fb04:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb08:	2100      	movs	r1, #0
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f7ff fda9 	bl	800f662 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	3334      	adds	r3, #52	; 0x34
 800fb14:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fb18:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7ff fd38 	bl	800f592 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	3334      	adds	r3, #52	; 0x34
 800fb26:	4921      	ldr	r1, [pc, #132]	; (800fbac <sync_fs+0xd4>)
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7ff fd4d 	bl	800f5c8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	3334      	adds	r3, #52	; 0x34
 800fb32:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fb36:	491e      	ldr	r1, [pc, #120]	; (800fbb0 <sync_fs+0xd8>)
 800fb38:	4618      	mov	r0, r3
 800fb3a:	f7ff fd45 	bl	800f5c8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	3334      	adds	r3, #52	; 0x34
 800fb42:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	695b      	ldr	r3, [r3, #20]
 800fb4a:	4619      	mov	r1, r3
 800fb4c:	4610      	mov	r0, r2
 800fb4e:	f7ff fd3b 	bl	800f5c8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	3334      	adds	r3, #52	; 0x34
 800fb56:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	691b      	ldr	r3, [r3, #16]
 800fb5e:	4619      	mov	r1, r3
 800fb60:	4610      	mov	r0, r2
 800fb62:	f7ff fd31 	bl	800f5c8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	6a1b      	ldr	r3, [r3, #32]
 800fb6a:	1c5a      	adds	r2, r3, #1
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	7858      	ldrb	r0, [r3, #1]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fb7e:	2301      	movs	r3, #1
 800fb80:	f7ff fc8e 	bl	800f4a0 <disk_write>
			fs->fsi_flag = 0;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	2200      	movs	r2, #0
 800fb88:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	785b      	ldrb	r3, [r3, #1]
 800fb8e:	2200      	movs	r2, #0
 800fb90:	2100      	movs	r1, #0
 800fb92:	4618      	mov	r0, r3
 800fb94:	f7ff fca4 	bl	800f4e0 <disk_ioctl>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d001      	beq.n	800fba2 <sync_fs+0xca>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fba2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fba4:	4618      	mov	r0, r3
 800fba6:	3710      	adds	r7, #16
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}
 800fbac:	41615252 	.word	0x41615252
 800fbb0:	61417272 	.word	0x61417272

0800fbb4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fbb4:	b480      	push	{r7}
 800fbb6:	b083      	sub	sp, #12
 800fbb8:	af00      	add	r7, sp, #0
 800fbba:	6078      	str	r0, [r7, #4]
 800fbbc:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	3b02      	subs	r3, #2
 800fbc2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	699b      	ldr	r3, [r3, #24]
 800fbc8:	3b02      	subs	r3, #2
 800fbca:	683a      	ldr	r2, [r7, #0]
 800fbcc:	429a      	cmp	r2, r3
 800fbce:	d301      	bcc.n	800fbd4 <clust2sect+0x20>
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	e008      	b.n	800fbe6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	895b      	ldrh	r3, [r3, #10]
 800fbd8:	461a      	mov	r2, r3
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	fb03 f202 	mul.w	r2, r3, r2
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbe4:	4413      	add	r3, r2
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	370c      	adds	r7, #12
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fbf2:	b580      	push	{r7, lr}
 800fbf4:	b086      	sub	sp, #24
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	6078      	str	r0, [r7, #4]
 800fbfa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	2b01      	cmp	r3, #1
 800fc06:	d904      	bls.n	800fc12 <get_fat+0x20>
 800fc08:	693b      	ldr	r3, [r7, #16]
 800fc0a:	699b      	ldr	r3, [r3, #24]
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d302      	bcc.n	800fc18 <get_fat+0x26>
		val = 1;	/* Internal error */
 800fc12:	2301      	movs	r3, #1
 800fc14:	617b      	str	r3, [r7, #20]
 800fc16:	e08f      	b.n	800fd38 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fc18:	f04f 33ff 	mov.w	r3, #4294967295
 800fc1c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fc1e:	693b      	ldr	r3, [r7, #16]
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	2b03      	cmp	r3, #3
 800fc24:	d062      	beq.n	800fcec <get_fat+0xfa>
 800fc26:	2b03      	cmp	r3, #3
 800fc28:	dc7c      	bgt.n	800fd24 <get_fat+0x132>
 800fc2a:	2b01      	cmp	r3, #1
 800fc2c:	d002      	beq.n	800fc34 <get_fat+0x42>
 800fc2e:	2b02      	cmp	r3, #2
 800fc30:	d042      	beq.n	800fcb8 <get_fat+0xc6>
 800fc32:	e077      	b.n	800fd24 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	60fb      	str	r3, [r7, #12]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	085b      	lsrs	r3, r3, #1
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	4413      	add	r3, r2
 800fc40:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	0a5b      	lsrs	r3, r3, #9
 800fc4a:	4413      	add	r3, r2
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	6938      	ldr	r0, [r7, #16]
 800fc50:	f7ff ff14 	bl	800fa7c <move_window>
 800fc54:	4603      	mov	r3, r0
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d167      	bne.n	800fd2a <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	1c5a      	adds	r2, r3, #1
 800fc5e:	60fa      	str	r2, [r7, #12]
 800fc60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc64:	693a      	ldr	r2, [r7, #16]
 800fc66:	4413      	add	r3, r2
 800fc68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc6c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	0a5b      	lsrs	r3, r3, #9
 800fc76:	4413      	add	r3, r2
 800fc78:	4619      	mov	r1, r3
 800fc7a:	6938      	ldr	r0, [r7, #16]
 800fc7c:	f7ff fefe 	bl	800fa7c <move_window>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d153      	bne.n	800fd2e <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fc8c:	693a      	ldr	r2, [r7, #16]
 800fc8e:	4413      	add	r3, r2
 800fc90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc94:	021b      	lsls	r3, r3, #8
 800fc96:	461a      	mov	r2, r3
 800fc98:	68bb      	ldr	r3, [r7, #8]
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fc9e:	683b      	ldr	r3, [r7, #0]
 800fca0:	f003 0301 	and.w	r3, r3, #1
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d002      	beq.n	800fcae <get_fat+0xbc>
 800fca8:	68bb      	ldr	r3, [r7, #8]
 800fcaa:	091b      	lsrs	r3, r3, #4
 800fcac:	e002      	b.n	800fcb4 <get_fat+0xc2>
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800fcb4:	617b      	str	r3, [r7, #20]
			break;
 800fcb6:	e03f      	b.n	800fd38 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fcb8:	693b      	ldr	r3, [r7, #16]
 800fcba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcbc:	683b      	ldr	r3, [r7, #0]
 800fcbe:	0a1b      	lsrs	r3, r3, #8
 800fcc0:	4413      	add	r3, r2
 800fcc2:	4619      	mov	r1, r3
 800fcc4:	6938      	ldr	r0, [r7, #16]
 800fcc6:	f7ff fed9 	bl	800fa7c <move_window>
 800fcca:	4603      	mov	r3, r0
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d130      	bne.n	800fd32 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	005b      	lsls	r3, r3, #1
 800fcda:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fcde:	4413      	add	r3, r2
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7ff fc1b 	bl	800f51c <ld_word>
 800fce6:	4603      	mov	r3, r0
 800fce8:	617b      	str	r3, [r7, #20]
			break;
 800fcea:	e025      	b.n	800fd38 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fcec:	693b      	ldr	r3, [r7, #16]
 800fcee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fcf0:	683b      	ldr	r3, [r7, #0]
 800fcf2:	09db      	lsrs	r3, r3, #7
 800fcf4:	4413      	add	r3, r2
 800fcf6:	4619      	mov	r1, r3
 800fcf8:	6938      	ldr	r0, [r7, #16]
 800fcfa:	f7ff febf 	bl	800fa7c <move_window>
 800fcfe:	4603      	mov	r3, r0
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d118      	bne.n	800fd36 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd0a:	683b      	ldr	r3, [r7, #0]
 800fd0c:	009b      	lsls	r3, r3, #2
 800fd0e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fd12:	4413      	add	r3, r2
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff fc19 	bl	800f54c <ld_dword>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800fd20:	617b      	str	r3, [r7, #20]
			break;
 800fd22:	e009      	b.n	800fd38 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800fd24:	2301      	movs	r3, #1
 800fd26:	617b      	str	r3, [r7, #20]
 800fd28:	e006      	b.n	800fd38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd2a:	bf00      	nop
 800fd2c:	e004      	b.n	800fd38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fd2e:	bf00      	nop
 800fd30:	e002      	b.n	800fd38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800fd32:	bf00      	nop
 800fd34:	e000      	b.n	800fd38 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800fd36:	bf00      	nop
		}
	}

	return val;
 800fd38:	697b      	ldr	r3, [r7, #20]
}
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	3718      	adds	r7, #24
 800fd3e:	46bd      	mov	sp, r7
 800fd40:	bd80      	pop	{r7, pc}

0800fd42 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800fd42:	b590      	push	{r4, r7, lr}
 800fd44:	b089      	sub	sp, #36	; 0x24
 800fd46:	af00      	add	r7, sp, #0
 800fd48:	60f8      	str	r0, [r7, #12]
 800fd4a:	60b9      	str	r1, [r7, #8]
 800fd4c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800fd4e:	2302      	movs	r3, #2
 800fd50:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	2b01      	cmp	r3, #1
 800fd56:	f240 80d9 	bls.w	800ff0c <put_fat+0x1ca>
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	699b      	ldr	r3, [r3, #24]
 800fd5e:	68ba      	ldr	r2, [r7, #8]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	f080 80d3 	bcs.w	800ff0c <put_fat+0x1ca>
		switch (fs->fs_type) {
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	781b      	ldrb	r3, [r3, #0]
 800fd6a:	2b03      	cmp	r3, #3
 800fd6c:	f000 8096 	beq.w	800fe9c <put_fat+0x15a>
 800fd70:	2b03      	cmp	r3, #3
 800fd72:	f300 80cb 	bgt.w	800ff0c <put_fat+0x1ca>
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d002      	beq.n	800fd80 <put_fat+0x3e>
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	d06e      	beq.n	800fe5c <put_fat+0x11a>
 800fd7e:	e0c5      	b.n	800ff0c <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	61bb      	str	r3, [r7, #24]
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	085b      	lsrs	r3, r3, #1
 800fd88:	69ba      	ldr	r2, [r7, #24]
 800fd8a:	4413      	add	r3, r2
 800fd8c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	0a5b      	lsrs	r3, r3, #9
 800fd96:	4413      	add	r3, r2
 800fd98:	4619      	mov	r1, r3
 800fd9a:	68f8      	ldr	r0, [r7, #12]
 800fd9c:	f7ff fe6e 	bl	800fa7c <move_window>
 800fda0:	4603      	mov	r3, r0
 800fda2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fda4:	7ffb      	ldrb	r3, [r7, #31]
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	f040 80a9 	bne.w	800fefe <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	1c59      	adds	r1, r3, #1
 800fdb6:	61b9      	str	r1, [r7, #24]
 800fdb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdbc:	4413      	add	r3, r2
 800fdbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800fdc0:	68bb      	ldr	r3, [r7, #8]
 800fdc2:	f003 0301 	and.w	r3, r3, #1
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d00d      	beq.n	800fde6 <put_fat+0xa4>
 800fdca:	697b      	ldr	r3, [r7, #20]
 800fdcc:	781b      	ldrb	r3, [r3, #0]
 800fdce:	b25b      	sxtb	r3, r3
 800fdd0:	f003 030f 	and.w	r3, r3, #15
 800fdd4:	b25a      	sxtb	r2, r3
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	011b      	lsls	r3, r3, #4
 800fddc:	b25b      	sxtb	r3, r3
 800fdde:	4313      	orrs	r3, r2
 800fde0:	b25b      	sxtb	r3, r3
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	e001      	b.n	800fdea <put_fat+0xa8>
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	b2db      	uxtb	r3, r3
 800fdea:	697a      	ldr	r2, [r7, #20]
 800fdec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	2201      	movs	r2, #1
 800fdf2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdf8:	69bb      	ldr	r3, [r7, #24]
 800fdfa:	0a5b      	lsrs	r3, r3, #9
 800fdfc:	4413      	add	r3, r2
 800fdfe:	4619      	mov	r1, r3
 800fe00:	68f8      	ldr	r0, [r7, #12]
 800fe02:	f7ff fe3b 	bl	800fa7c <move_window>
 800fe06:	4603      	mov	r3, r0
 800fe08:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe0a:	7ffb      	ldrb	r3, [r7, #31]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d178      	bne.n	800ff02 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe16:	69bb      	ldr	r3, [r7, #24]
 800fe18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe1c:	4413      	add	r3, r2
 800fe1e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	f003 0301 	and.w	r3, r3, #1
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d003      	beq.n	800fe32 <put_fat+0xf0>
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	091b      	lsrs	r3, r3, #4
 800fe2e:	b2db      	uxtb	r3, r3
 800fe30:	e00e      	b.n	800fe50 <put_fat+0x10e>
 800fe32:	697b      	ldr	r3, [r7, #20]
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	b25b      	sxtb	r3, r3
 800fe38:	f023 030f 	bic.w	r3, r3, #15
 800fe3c:	b25a      	sxtb	r2, r3
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	0a1b      	lsrs	r3, r3, #8
 800fe42:	b25b      	sxtb	r3, r3
 800fe44:	f003 030f 	and.w	r3, r3, #15
 800fe48:	b25b      	sxtb	r3, r3
 800fe4a:	4313      	orrs	r3, r2
 800fe4c:	b25b      	sxtb	r3, r3
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	697a      	ldr	r2, [r7, #20]
 800fe52:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	2201      	movs	r2, #1
 800fe58:	70da      	strb	r2, [r3, #3]
			break;
 800fe5a:	e057      	b.n	800ff0c <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	0a1b      	lsrs	r3, r3, #8
 800fe64:	4413      	add	r3, r2
 800fe66:	4619      	mov	r1, r3
 800fe68:	68f8      	ldr	r0, [r7, #12]
 800fe6a:	f7ff fe07 	bl	800fa7c <move_window>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fe72:	7ffb      	ldrb	r3, [r7, #31]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d146      	bne.n	800ff06 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	005b      	lsls	r3, r3, #1
 800fe82:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800fe86:	4413      	add	r3, r2
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	b292      	uxth	r2, r2
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7ff fb7f 	bl	800f592 <st_word>
			fs->wflag = 1;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	2201      	movs	r2, #1
 800fe98:	70da      	strb	r2, [r3, #3]
			break;
 800fe9a:	e037      	b.n	800ff0c <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	09db      	lsrs	r3, r3, #7
 800fea4:	4413      	add	r3, r2
 800fea6:	4619      	mov	r1, r3
 800fea8:	68f8      	ldr	r0, [r7, #12]
 800feaa:	f7ff fde7 	bl	800fa7c <move_window>
 800feae:	4603      	mov	r3, r0
 800feb0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800feb2:	7ffb      	ldrb	r3, [r7, #31]
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d128      	bne.n	800ff0a <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fec4:	68bb      	ldr	r3, [r7, #8]
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800fecc:	4413      	add	r3, r2
 800fece:	4618      	mov	r0, r3
 800fed0:	f7ff fb3c 	bl	800f54c <ld_dword>
 800fed4:	4603      	mov	r3, r0
 800fed6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800feda:	4323      	orrs	r3, r4
 800fedc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	009b      	lsls	r3, r3, #2
 800fee8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800feec:	4413      	add	r3, r2
 800feee:	6879      	ldr	r1, [r7, #4]
 800fef0:	4618      	mov	r0, r3
 800fef2:	f7ff fb69 	bl	800f5c8 <st_dword>
			fs->wflag = 1;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2201      	movs	r2, #1
 800fefa:	70da      	strb	r2, [r3, #3]
			break;
 800fefc:	e006      	b.n	800ff0c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800fefe:	bf00      	nop
 800ff00:	e004      	b.n	800ff0c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ff02:	bf00      	nop
 800ff04:	e002      	b.n	800ff0c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ff06:	bf00      	nop
 800ff08:	e000      	b.n	800ff0c <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ff0a:	bf00      	nop
		}
	}
	return res;
 800ff0c:	7ffb      	ldrb	r3, [r7, #31]
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	3724      	adds	r7, #36	; 0x24
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd90      	pop	{r4, r7, pc}

0800ff16 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b088      	sub	sp, #32
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	60f8      	str	r0, [r7, #12]
 800ff1e:	60b9      	str	r1, [r7, #8]
 800ff20:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ff22:	2300      	movs	r3, #0
 800ff24:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ff2c:	68bb      	ldr	r3, [r7, #8]
 800ff2e:	2b01      	cmp	r3, #1
 800ff30:	d904      	bls.n	800ff3c <remove_chain+0x26>
 800ff32:	69bb      	ldr	r3, [r7, #24]
 800ff34:	699b      	ldr	r3, [r3, #24]
 800ff36:	68ba      	ldr	r2, [r7, #8]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d301      	bcc.n	800ff40 <remove_chain+0x2a>
 800ff3c:	2302      	movs	r3, #2
 800ff3e:	e04b      	b.n	800ffd8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d00c      	beq.n	800ff60 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ff46:	f04f 32ff 	mov.w	r2, #4294967295
 800ff4a:	6879      	ldr	r1, [r7, #4]
 800ff4c:	69b8      	ldr	r0, [r7, #24]
 800ff4e:	f7ff fef8 	bl	800fd42 <put_fat>
 800ff52:	4603      	mov	r3, r0
 800ff54:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ff56:	7ffb      	ldrb	r3, [r7, #31]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d001      	beq.n	800ff60 <remove_chain+0x4a>
 800ff5c:	7ffb      	ldrb	r3, [r7, #31]
 800ff5e:	e03b      	b.n	800ffd8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ff60:	68b9      	ldr	r1, [r7, #8]
 800ff62:	68f8      	ldr	r0, [r7, #12]
 800ff64:	f7ff fe45 	bl	800fbf2 <get_fat>
 800ff68:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d031      	beq.n	800ffd4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ff70:	697b      	ldr	r3, [r7, #20]
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d101      	bne.n	800ff7a <remove_chain+0x64>
 800ff76:	2302      	movs	r3, #2
 800ff78:	e02e      	b.n	800ffd8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ff7a:	697b      	ldr	r3, [r7, #20]
 800ff7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff80:	d101      	bne.n	800ff86 <remove_chain+0x70>
 800ff82:	2301      	movs	r3, #1
 800ff84:	e028      	b.n	800ffd8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ff86:	2200      	movs	r2, #0
 800ff88:	68b9      	ldr	r1, [r7, #8]
 800ff8a:	69b8      	ldr	r0, [r7, #24]
 800ff8c:	f7ff fed9 	bl	800fd42 <put_fat>
 800ff90:	4603      	mov	r3, r0
 800ff92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ff94:	7ffb      	ldrb	r3, [r7, #31]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d001      	beq.n	800ff9e <remove_chain+0x88>
 800ff9a:	7ffb      	ldrb	r3, [r7, #31]
 800ff9c:	e01c      	b.n	800ffd8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	695a      	ldr	r2, [r3, #20]
 800ffa2:	69bb      	ldr	r3, [r7, #24]
 800ffa4:	699b      	ldr	r3, [r3, #24]
 800ffa6:	3b02      	subs	r3, #2
 800ffa8:	429a      	cmp	r2, r3
 800ffaa:	d20b      	bcs.n	800ffc4 <remove_chain+0xae>
			fs->free_clst++;
 800ffac:	69bb      	ldr	r3, [r7, #24]
 800ffae:	695b      	ldr	r3, [r3, #20]
 800ffb0:	1c5a      	adds	r2, r3, #1
 800ffb2:	69bb      	ldr	r3, [r7, #24]
 800ffb4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ffb6:	69bb      	ldr	r3, [r7, #24]
 800ffb8:	791b      	ldrb	r3, [r3, #4]
 800ffba:	f043 0301 	orr.w	r3, r3, #1
 800ffbe:	b2da      	uxtb	r2, r3
 800ffc0:	69bb      	ldr	r3, [r7, #24]
 800ffc2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ffc8:	69bb      	ldr	r3, [r7, #24]
 800ffca:	699b      	ldr	r3, [r3, #24]
 800ffcc:	68ba      	ldr	r2, [r7, #8]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d3c6      	bcc.n	800ff60 <remove_chain+0x4a>
 800ffd2:	e000      	b.n	800ffd6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ffd4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ffd6:	2300      	movs	r3, #0
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3720      	adds	r7, #32
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b088      	sub	sp, #32
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
 800ffe8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fff0:	683b      	ldr	r3, [r7, #0]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d10d      	bne.n	8010012 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	691b      	ldr	r3, [r3, #16]
 800fffa:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d004      	beq.n	801000c <create_chain+0x2c>
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	699b      	ldr	r3, [r3, #24]
 8010006:	69ba      	ldr	r2, [r7, #24]
 8010008:	429a      	cmp	r2, r3
 801000a:	d31b      	bcc.n	8010044 <create_chain+0x64>
 801000c:	2301      	movs	r3, #1
 801000e:	61bb      	str	r3, [r7, #24]
 8010010:	e018      	b.n	8010044 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010012:	6839      	ldr	r1, [r7, #0]
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f7ff fdec 	bl	800fbf2 <get_fat>
 801001a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d801      	bhi.n	8010026 <create_chain+0x46>
 8010022:	2301      	movs	r3, #1
 8010024:	e070      	b.n	8010108 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	f1b3 3fff 	cmp.w	r3, #4294967295
 801002c:	d101      	bne.n	8010032 <create_chain+0x52>
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	e06a      	b.n	8010108 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010032:	693b      	ldr	r3, [r7, #16]
 8010034:	699b      	ldr	r3, [r3, #24]
 8010036:	68fa      	ldr	r2, [r7, #12]
 8010038:	429a      	cmp	r2, r3
 801003a:	d201      	bcs.n	8010040 <create_chain+0x60>
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	e063      	b.n	8010108 <create_chain+0x128>
		scl = clst;
 8010040:	683b      	ldr	r3, [r7, #0]
 8010042:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010044:	69bb      	ldr	r3, [r7, #24]
 8010046:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	3301      	adds	r3, #1
 801004c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	699b      	ldr	r3, [r3, #24]
 8010052:	69fa      	ldr	r2, [r7, #28]
 8010054:	429a      	cmp	r2, r3
 8010056:	d307      	bcc.n	8010068 <create_chain+0x88>
				ncl = 2;
 8010058:	2302      	movs	r3, #2
 801005a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801005c:	69fa      	ldr	r2, [r7, #28]
 801005e:	69bb      	ldr	r3, [r7, #24]
 8010060:	429a      	cmp	r2, r3
 8010062:	d901      	bls.n	8010068 <create_chain+0x88>
 8010064:	2300      	movs	r3, #0
 8010066:	e04f      	b.n	8010108 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010068:	69f9      	ldr	r1, [r7, #28]
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f7ff fdc1 	bl	800fbf2 <get_fat>
 8010070:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2b00      	cmp	r3, #0
 8010076:	d00e      	beq.n	8010096 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	2b01      	cmp	r3, #1
 801007c:	d003      	beq.n	8010086 <create_chain+0xa6>
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010084:	d101      	bne.n	801008a <create_chain+0xaa>
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	e03e      	b.n	8010108 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801008a:	69fa      	ldr	r2, [r7, #28]
 801008c:	69bb      	ldr	r3, [r7, #24]
 801008e:	429a      	cmp	r2, r3
 8010090:	d1da      	bne.n	8010048 <create_chain+0x68>
 8010092:	2300      	movs	r3, #0
 8010094:	e038      	b.n	8010108 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010096:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010098:	f04f 32ff 	mov.w	r2, #4294967295
 801009c:	69f9      	ldr	r1, [r7, #28]
 801009e:	6938      	ldr	r0, [r7, #16]
 80100a0:	f7ff fe4f 	bl	800fd42 <put_fat>
 80100a4:	4603      	mov	r3, r0
 80100a6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80100a8:	7dfb      	ldrb	r3, [r7, #23]
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d109      	bne.n	80100c2 <create_chain+0xe2>
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d006      	beq.n	80100c2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80100b4:	69fa      	ldr	r2, [r7, #28]
 80100b6:	6839      	ldr	r1, [r7, #0]
 80100b8:	6938      	ldr	r0, [r7, #16]
 80100ba:	f7ff fe42 	bl	800fd42 <put_fat>
 80100be:	4603      	mov	r3, r0
 80100c0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80100c2:	7dfb      	ldrb	r3, [r7, #23]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d116      	bne.n	80100f6 <create_chain+0x116>
		fs->last_clst = ncl;
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	69fa      	ldr	r2, [r7, #28]
 80100cc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	695a      	ldr	r2, [r3, #20]
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	699b      	ldr	r3, [r3, #24]
 80100d6:	3b02      	subs	r3, #2
 80100d8:	429a      	cmp	r2, r3
 80100da:	d804      	bhi.n	80100e6 <create_chain+0x106>
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	695b      	ldr	r3, [r3, #20]
 80100e0:	1e5a      	subs	r2, r3, #1
 80100e2:	693b      	ldr	r3, [r7, #16]
 80100e4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80100e6:	693b      	ldr	r3, [r7, #16]
 80100e8:	791b      	ldrb	r3, [r3, #4]
 80100ea:	f043 0301 	orr.w	r3, r3, #1
 80100ee:	b2da      	uxtb	r2, r3
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	711a      	strb	r2, [r3, #4]
 80100f4:	e007      	b.n	8010106 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80100f6:	7dfb      	ldrb	r3, [r7, #23]
 80100f8:	2b01      	cmp	r3, #1
 80100fa:	d102      	bne.n	8010102 <create_chain+0x122>
 80100fc:	f04f 33ff 	mov.w	r3, #4294967295
 8010100:	e000      	b.n	8010104 <create_chain+0x124>
 8010102:	2301      	movs	r3, #1
 8010104:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8010106:	69fb      	ldr	r3, [r7, #28]
}
 8010108:	4618      	mov	r0, r3
 801010a:	3720      	adds	r7, #32
 801010c:	46bd      	mov	sp, r7
 801010e:	bd80      	pop	{r7, pc}

08010110 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010110:	b480      	push	{r7}
 8010112:	b087      	sub	sp, #28
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010124:	3304      	adds	r3, #4
 8010126:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	0a5b      	lsrs	r3, r3, #9
 801012c:	68fa      	ldr	r2, [r7, #12]
 801012e:	8952      	ldrh	r2, [r2, #10]
 8010130:	fbb3 f3f2 	udiv	r3, r3, r2
 8010134:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010136:	693b      	ldr	r3, [r7, #16]
 8010138:	1d1a      	adds	r2, r3, #4
 801013a:	613a      	str	r2, [r7, #16]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	2b00      	cmp	r3, #0
 8010144:	d101      	bne.n	801014a <clmt_clust+0x3a>
 8010146:	2300      	movs	r3, #0
 8010148:	e010      	b.n	801016c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801014a:	697a      	ldr	r2, [r7, #20]
 801014c:	68bb      	ldr	r3, [r7, #8]
 801014e:	429a      	cmp	r2, r3
 8010150:	d307      	bcc.n	8010162 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8010152:	697a      	ldr	r2, [r7, #20]
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	1ad3      	subs	r3, r2, r3
 8010158:	617b      	str	r3, [r7, #20]
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	3304      	adds	r3, #4
 801015e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010160:	e7e9      	b.n	8010136 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8010162:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8010164:	693b      	ldr	r3, [r7, #16]
 8010166:	681a      	ldr	r2, [r3, #0]
 8010168:	697b      	ldr	r3, [r7, #20]
 801016a:	4413      	add	r3, r2
}
 801016c:	4618      	mov	r0, r3
 801016e:	371c      	adds	r7, #28
 8010170:	46bd      	mov	sp, r7
 8010172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010176:	4770      	bx	lr

08010178 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010178:	b580      	push	{r7, lr}
 801017a:	b086      	sub	sp, #24
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
 8010180:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801018e:	d204      	bcs.n	801019a <dir_sdi+0x22>
 8010190:	683b      	ldr	r3, [r7, #0]
 8010192:	f003 031f 	and.w	r3, r3, #31
 8010196:	2b00      	cmp	r3, #0
 8010198:	d001      	beq.n	801019e <dir_sdi+0x26>
		return FR_INT_ERR;
 801019a:	2302      	movs	r3, #2
 801019c:	e063      	b.n	8010266 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	689b      	ldr	r3, [r3, #8]
 80101a8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80101aa:	697b      	ldr	r3, [r7, #20]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d106      	bne.n	80101be <dir_sdi+0x46>
 80101b0:	693b      	ldr	r3, [r7, #16]
 80101b2:	781b      	ldrb	r3, [r3, #0]
 80101b4:	2b02      	cmp	r3, #2
 80101b6:	d902      	bls.n	80101be <dir_sdi+0x46>
		clst = fs->dirbase;
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80101bc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d10c      	bne.n	80101de <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80101c4:	683b      	ldr	r3, [r7, #0]
 80101c6:	095b      	lsrs	r3, r3, #5
 80101c8:	693a      	ldr	r2, [r7, #16]
 80101ca:	8912      	ldrh	r2, [r2, #8]
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d301      	bcc.n	80101d4 <dir_sdi+0x5c>
 80101d0:	2302      	movs	r3, #2
 80101d2:	e048      	b.n	8010266 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	61da      	str	r2, [r3, #28]
 80101dc:	e029      	b.n	8010232 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80101de:	693b      	ldr	r3, [r7, #16]
 80101e0:	895b      	ldrh	r3, [r3, #10]
 80101e2:	025b      	lsls	r3, r3, #9
 80101e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80101e6:	e019      	b.n	801021c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6979      	ldr	r1, [r7, #20]
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7ff fd00 	bl	800fbf2 <get_fat>
 80101f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101fa:	d101      	bne.n	8010200 <dir_sdi+0x88>
 80101fc:	2301      	movs	r3, #1
 80101fe:	e032      	b.n	8010266 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	2b01      	cmp	r3, #1
 8010204:	d904      	bls.n	8010210 <dir_sdi+0x98>
 8010206:	693b      	ldr	r3, [r7, #16]
 8010208:	699b      	ldr	r3, [r3, #24]
 801020a:	697a      	ldr	r2, [r7, #20]
 801020c:	429a      	cmp	r2, r3
 801020e:	d301      	bcc.n	8010214 <dir_sdi+0x9c>
 8010210:	2302      	movs	r3, #2
 8010212:	e028      	b.n	8010266 <dir_sdi+0xee>
			ofs -= csz;
 8010214:	683a      	ldr	r2, [r7, #0]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	1ad3      	subs	r3, r2, r3
 801021a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801021c:	683a      	ldr	r2, [r7, #0]
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	429a      	cmp	r2, r3
 8010222:	d2e1      	bcs.n	80101e8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010224:	6979      	ldr	r1, [r7, #20]
 8010226:	6938      	ldr	r0, [r7, #16]
 8010228:	f7ff fcc4 	bl	800fbb4 <clust2sect>
 801022c:	4602      	mov	r2, r0
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	697a      	ldr	r2, [r7, #20]
 8010236:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	69db      	ldr	r3, [r3, #28]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d101      	bne.n	8010244 <dir_sdi+0xcc>
 8010240:	2302      	movs	r3, #2
 8010242:	e010      	b.n	8010266 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	69da      	ldr	r2, [r3, #28]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	0a5b      	lsrs	r3, r3, #9
 801024c:	441a      	add	r2, r3
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010258:	683b      	ldr	r3, [r7, #0]
 801025a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801025e:	441a      	add	r2, r3
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}

0801026e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801026e:	b580      	push	{r7, lr}
 8010270:	b086      	sub	sp, #24
 8010272:	af00      	add	r7, sp, #0
 8010274:	6078      	str	r0, [r7, #4]
 8010276:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	695b      	ldr	r3, [r3, #20]
 8010282:	3320      	adds	r3, #32
 8010284:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	69db      	ldr	r3, [r3, #28]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d003      	beq.n	8010296 <dir_next+0x28>
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010294:	d301      	bcc.n	801029a <dir_next+0x2c>
 8010296:	2304      	movs	r3, #4
 8010298:	e0aa      	b.n	80103f0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801029a:	68bb      	ldr	r3, [r7, #8]
 801029c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	f040 8098 	bne.w	80103d6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	69db      	ldr	r3, [r3, #28]
 80102aa:	1c5a      	adds	r2, r3, #1
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	699b      	ldr	r3, [r3, #24]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10b      	bne.n	80102d0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	095b      	lsrs	r3, r3, #5
 80102bc:	68fa      	ldr	r2, [r7, #12]
 80102be:	8912      	ldrh	r2, [r2, #8]
 80102c0:	4293      	cmp	r3, r2
 80102c2:	f0c0 8088 	bcc.w	80103d6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	2200      	movs	r2, #0
 80102ca:	61da      	str	r2, [r3, #28]
 80102cc:	2304      	movs	r3, #4
 80102ce:	e08f      	b.n	80103f0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	0a5b      	lsrs	r3, r3, #9
 80102d4:	68fa      	ldr	r2, [r7, #12]
 80102d6:	8952      	ldrh	r2, [r2, #10]
 80102d8:	3a01      	subs	r2, #1
 80102da:	4013      	ands	r3, r2
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d17a      	bne.n	80103d6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80102e0:	687a      	ldr	r2, [r7, #4]
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	699b      	ldr	r3, [r3, #24]
 80102e6:	4619      	mov	r1, r3
 80102e8:	4610      	mov	r0, r2
 80102ea:	f7ff fc82 	bl	800fbf2 <get_fat>
 80102ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80102f0:	697b      	ldr	r3, [r7, #20]
 80102f2:	2b01      	cmp	r3, #1
 80102f4:	d801      	bhi.n	80102fa <dir_next+0x8c>
 80102f6:	2302      	movs	r3, #2
 80102f8:	e07a      	b.n	80103f0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80102fa:	697b      	ldr	r3, [r7, #20]
 80102fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010300:	d101      	bne.n	8010306 <dir_next+0x98>
 8010302:	2301      	movs	r3, #1
 8010304:	e074      	b.n	80103f0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010306:	68fb      	ldr	r3, [r7, #12]
 8010308:	699b      	ldr	r3, [r3, #24]
 801030a:	697a      	ldr	r2, [r7, #20]
 801030c:	429a      	cmp	r2, r3
 801030e:	d358      	bcc.n	80103c2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010310:	683b      	ldr	r3, [r7, #0]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d104      	bne.n	8010320 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	2200      	movs	r2, #0
 801031a:	61da      	str	r2, [r3, #28]
 801031c:	2304      	movs	r3, #4
 801031e:	e067      	b.n	80103f0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	699b      	ldr	r3, [r3, #24]
 8010326:	4619      	mov	r1, r3
 8010328:	4610      	mov	r0, r2
 801032a:	f7ff fe59 	bl	800ffe0 <create_chain>
 801032e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010330:	697b      	ldr	r3, [r7, #20]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d101      	bne.n	801033a <dir_next+0xcc>
 8010336:	2307      	movs	r3, #7
 8010338:	e05a      	b.n	80103f0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801033a:	697b      	ldr	r3, [r7, #20]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d101      	bne.n	8010344 <dir_next+0xd6>
 8010340:	2302      	movs	r3, #2
 8010342:	e055      	b.n	80103f0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010344:	697b      	ldr	r3, [r7, #20]
 8010346:	f1b3 3fff 	cmp.w	r3, #4294967295
 801034a:	d101      	bne.n	8010350 <dir_next+0xe2>
 801034c:	2301      	movs	r3, #1
 801034e:	e04f      	b.n	80103f0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f7ff fb4f 	bl	800f9f4 <sync_window>
 8010356:	4603      	mov	r3, r0
 8010358:	2b00      	cmp	r3, #0
 801035a:	d001      	beq.n	8010360 <dir_next+0xf2>
 801035c:	2301      	movs	r3, #1
 801035e:	e047      	b.n	80103f0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	3334      	adds	r3, #52	; 0x34
 8010364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010368:	2100      	movs	r1, #0
 801036a:	4618      	mov	r0, r3
 801036c:	f7ff f979 	bl	800f662 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010370:	2300      	movs	r3, #0
 8010372:	613b      	str	r3, [r7, #16]
 8010374:	6979      	ldr	r1, [r7, #20]
 8010376:	68f8      	ldr	r0, [r7, #12]
 8010378:	f7ff fc1c 	bl	800fbb4 <clust2sect>
 801037c:	4602      	mov	r2, r0
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	631a      	str	r2, [r3, #48]	; 0x30
 8010382:	e012      	b.n	80103aa <dir_next+0x13c>
						fs->wflag = 1;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	2201      	movs	r2, #1
 8010388:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801038a:	68f8      	ldr	r0, [r7, #12]
 801038c:	f7ff fb32 	bl	800f9f4 <sync_window>
 8010390:	4603      	mov	r3, r0
 8010392:	2b00      	cmp	r3, #0
 8010394:	d001      	beq.n	801039a <dir_next+0x12c>
 8010396:	2301      	movs	r3, #1
 8010398:	e02a      	b.n	80103f0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	3301      	adds	r3, #1
 801039e:	613b      	str	r3, [r7, #16]
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80103a4:	1c5a      	adds	r2, r3, #1
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	631a      	str	r2, [r3, #48]	; 0x30
 80103aa:	68fb      	ldr	r3, [r7, #12]
 80103ac:	895b      	ldrh	r3, [r3, #10]
 80103ae:	461a      	mov	r2, r3
 80103b0:	693b      	ldr	r3, [r7, #16]
 80103b2:	4293      	cmp	r3, r2
 80103b4:	d3e6      	bcc.n	8010384 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	1ad2      	subs	r2, r2, r3
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	697a      	ldr	r2, [r7, #20]
 80103c6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80103c8:	6979      	ldr	r1, [r7, #20]
 80103ca:	68f8      	ldr	r0, [r7, #12]
 80103cc:	f7ff fbf2 	bl	800fbb4 <clust2sect>
 80103d0:	4602      	mov	r2, r0
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	68ba      	ldr	r2, [r7, #8]
 80103da:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103e8:	441a      	add	r2, r3
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80103ee:	2300      	movs	r3, #0
}
 80103f0:	4618      	mov	r0, r3
 80103f2:	3718      	adds	r7, #24
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd80      	pop	{r7, pc}

080103f8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b086      	sub	sp, #24
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
 8010400:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010408:	2100      	movs	r1, #0
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	f7ff feb4 	bl	8010178 <dir_sdi>
 8010410:	4603      	mov	r3, r0
 8010412:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010414:	7dfb      	ldrb	r3, [r7, #23]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d12b      	bne.n	8010472 <dir_alloc+0x7a>
		n = 0;
 801041a:	2300      	movs	r3, #0
 801041c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	69db      	ldr	r3, [r3, #28]
 8010422:	4619      	mov	r1, r3
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f7ff fb29 	bl	800fa7c <move_window>
 801042a:	4603      	mov	r3, r0
 801042c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801042e:	7dfb      	ldrb	r3, [r7, #23]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d11d      	bne.n	8010470 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	6a1b      	ldr	r3, [r3, #32]
 8010438:	781b      	ldrb	r3, [r3, #0]
 801043a:	2be5      	cmp	r3, #229	; 0xe5
 801043c:	d004      	beq.n	8010448 <dir_alloc+0x50>
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	6a1b      	ldr	r3, [r3, #32]
 8010442:	781b      	ldrb	r3, [r3, #0]
 8010444:	2b00      	cmp	r3, #0
 8010446:	d107      	bne.n	8010458 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	3301      	adds	r3, #1
 801044c:	613b      	str	r3, [r7, #16]
 801044e:	693a      	ldr	r2, [r7, #16]
 8010450:	683b      	ldr	r3, [r7, #0]
 8010452:	429a      	cmp	r2, r3
 8010454:	d102      	bne.n	801045c <dir_alloc+0x64>
 8010456:	e00c      	b.n	8010472 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010458:	2300      	movs	r3, #0
 801045a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801045c:	2101      	movs	r1, #1
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f7ff ff05 	bl	801026e <dir_next>
 8010464:	4603      	mov	r3, r0
 8010466:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010468:	7dfb      	ldrb	r3, [r7, #23]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d0d7      	beq.n	801041e <dir_alloc+0x26>
 801046e:	e000      	b.n	8010472 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010470:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010472:	7dfb      	ldrb	r3, [r7, #23]
 8010474:	2b04      	cmp	r3, #4
 8010476:	d101      	bne.n	801047c <dir_alloc+0x84>
 8010478:	2307      	movs	r3, #7
 801047a:	75fb      	strb	r3, [r7, #23]
	return res;
 801047c:	7dfb      	ldrb	r3, [r7, #23]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3718      	adds	r7, #24
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b084      	sub	sp, #16
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010490:	683b      	ldr	r3, [r7, #0]
 8010492:	331a      	adds	r3, #26
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff f841 	bl	800f51c <ld_word>
 801049a:	4603      	mov	r3, r0
 801049c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	781b      	ldrb	r3, [r3, #0]
 80104a2:	2b03      	cmp	r3, #3
 80104a4:	d109      	bne.n	80104ba <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80104a6:	683b      	ldr	r3, [r7, #0]
 80104a8:	3314      	adds	r3, #20
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff f836 	bl	800f51c <ld_word>
 80104b0:	4603      	mov	r3, r0
 80104b2:	041b      	lsls	r3, r3, #16
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	4313      	orrs	r3, r2
 80104b8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80104ba:	68fb      	ldr	r3, [r7, #12]
}
 80104bc:	4618      	mov	r0, r3
 80104be:	3710      	adds	r7, #16
 80104c0:	46bd      	mov	sp, r7
 80104c2:	bd80      	pop	{r7, pc}

080104c4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80104c4:	b580      	push	{r7, lr}
 80104c6:	b084      	sub	sp, #16
 80104c8:	af00      	add	r7, sp, #0
 80104ca:	60f8      	str	r0, [r7, #12]
 80104cc:	60b9      	str	r1, [r7, #8]
 80104ce:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	331a      	adds	r3, #26
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	b292      	uxth	r2, r2
 80104d8:	4611      	mov	r1, r2
 80104da:	4618      	mov	r0, r3
 80104dc:	f7ff f859 	bl	800f592 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	2b03      	cmp	r3, #3
 80104e6:	d109      	bne.n	80104fc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80104e8:	68bb      	ldr	r3, [r7, #8]
 80104ea:	f103 0214 	add.w	r2, r3, #20
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	0c1b      	lsrs	r3, r3, #16
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	4619      	mov	r1, r3
 80104f6:	4610      	mov	r0, r2
 80104f8:	f7ff f84b 	bl	800f592 <st_word>
	}
}
 80104fc:	bf00      	nop
 80104fe:	3710      	adds	r7, #16
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8010504:	b590      	push	{r4, r7, lr}
 8010506:	b087      	sub	sp, #28
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	331a      	adds	r3, #26
 8010512:	4618      	mov	r0, r3
 8010514:	f7ff f802 	bl	800f51c <ld_word>
 8010518:	4603      	mov	r3, r0
 801051a:	2b00      	cmp	r3, #0
 801051c:	d001      	beq.n	8010522 <cmp_lfn+0x1e>
 801051e:	2300      	movs	r3, #0
 8010520:	e059      	b.n	80105d6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8010522:	683b      	ldr	r3, [r7, #0]
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801052a:	1e5a      	subs	r2, r3, #1
 801052c:	4613      	mov	r3, r2
 801052e:	005b      	lsls	r3, r3, #1
 8010530:	4413      	add	r3, r2
 8010532:	009b      	lsls	r3, r3, #2
 8010534:	4413      	add	r3, r2
 8010536:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010538:	2301      	movs	r3, #1
 801053a:	81fb      	strh	r3, [r7, #14]
 801053c:	2300      	movs	r3, #0
 801053e:	613b      	str	r3, [r7, #16]
 8010540:	e033      	b.n	80105aa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8010542:	4a27      	ldr	r2, [pc, #156]	; (80105e0 <cmp_lfn+0xdc>)
 8010544:	693b      	ldr	r3, [r7, #16]
 8010546:	4413      	add	r3, r2
 8010548:	781b      	ldrb	r3, [r3, #0]
 801054a:	461a      	mov	r2, r3
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	4413      	add	r3, r2
 8010550:	4618      	mov	r0, r3
 8010552:	f7fe ffe3 	bl	800f51c <ld_word>
 8010556:	4603      	mov	r3, r0
 8010558:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 801055a:	89fb      	ldrh	r3, [r7, #14]
 801055c:	2b00      	cmp	r3, #0
 801055e:	d01a      	beq.n	8010596 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	2bfe      	cmp	r3, #254	; 0xfe
 8010564:	d812      	bhi.n	801058c <cmp_lfn+0x88>
 8010566:	89bb      	ldrh	r3, [r7, #12]
 8010568:	4618      	mov	r0, r3
 801056a:	f001 fe25 	bl	80121b8 <ff_wtoupper>
 801056e:	4603      	mov	r3, r0
 8010570:	461c      	mov	r4, r3
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	1c5a      	adds	r2, r3, #1
 8010576:	617a      	str	r2, [r7, #20]
 8010578:	005b      	lsls	r3, r3, #1
 801057a:	687a      	ldr	r2, [r7, #4]
 801057c:	4413      	add	r3, r2
 801057e:	881b      	ldrh	r3, [r3, #0]
 8010580:	4618      	mov	r0, r3
 8010582:	f001 fe19 	bl	80121b8 <ff_wtoupper>
 8010586:	4603      	mov	r3, r0
 8010588:	429c      	cmp	r4, r3
 801058a:	d001      	beq.n	8010590 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 801058c:	2300      	movs	r3, #0
 801058e:	e022      	b.n	80105d6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8010590:	89bb      	ldrh	r3, [r7, #12]
 8010592:	81fb      	strh	r3, [r7, #14]
 8010594:	e006      	b.n	80105a4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8010596:	89bb      	ldrh	r3, [r7, #12]
 8010598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801059c:	4293      	cmp	r3, r2
 801059e:	d001      	beq.n	80105a4 <cmp_lfn+0xa0>
 80105a0:	2300      	movs	r3, #0
 80105a2:	e018      	b.n	80105d6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80105a4:	693b      	ldr	r3, [r7, #16]
 80105a6:	3301      	adds	r3, #1
 80105a8:	613b      	str	r3, [r7, #16]
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	2b0c      	cmp	r3, #12
 80105ae:	d9c8      	bls.n	8010542 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d00b      	beq.n	80105d4 <cmp_lfn+0xd0>
 80105bc:	89fb      	ldrh	r3, [r7, #14]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d008      	beq.n	80105d4 <cmp_lfn+0xd0>
 80105c2:	697b      	ldr	r3, [r7, #20]
 80105c4:	005b      	lsls	r3, r3, #1
 80105c6:	687a      	ldr	r2, [r7, #4]
 80105c8:	4413      	add	r3, r2
 80105ca:	881b      	ldrh	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d001      	beq.n	80105d4 <cmp_lfn+0xd0>
 80105d0:	2300      	movs	r3, #0
 80105d2:	e000      	b.n	80105d6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80105d4:	2301      	movs	r3, #1
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	371c      	adds	r7, #28
 80105da:	46bd      	mov	sp, r7
 80105dc:	bd90      	pop	{r4, r7, pc}
 80105de:	bf00      	nop
 80105e0:	08017adc 	.word	0x08017adc

080105e4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b088      	sub	sp, #32
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	60f8      	str	r0, [r7, #12]
 80105ec:	60b9      	str	r1, [r7, #8]
 80105ee:	4611      	mov	r1, r2
 80105f0:	461a      	mov	r2, r3
 80105f2:	460b      	mov	r3, r1
 80105f4:	71fb      	strb	r3, [r7, #7]
 80105f6:	4613      	mov	r3, r2
 80105f8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80105fa:	68bb      	ldr	r3, [r7, #8]
 80105fc:	330d      	adds	r3, #13
 80105fe:	79ba      	ldrb	r2, [r7, #6]
 8010600:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010602:	68bb      	ldr	r3, [r7, #8]
 8010604:	330b      	adds	r3, #11
 8010606:	220f      	movs	r2, #15
 8010608:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801060a:	68bb      	ldr	r3, [r7, #8]
 801060c:	330c      	adds	r3, #12
 801060e:	2200      	movs	r2, #0
 8010610:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	331a      	adds	r3, #26
 8010616:	2100      	movs	r1, #0
 8010618:	4618      	mov	r0, r3
 801061a:	f7fe ffba 	bl	800f592 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	1e5a      	subs	r2, r3, #1
 8010622:	4613      	mov	r3, r2
 8010624:	005b      	lsls	r3, r3, #1
 8010626:	4413      	add	r3, r2
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	4413      	add	r3, r2
 801062c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801062e:	2300      	movs	r3, #0
 8010630:	82fb      	strh	r3, [r7, #22]
 8010632:	2300      	movs	r3, #0
 8010634:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010636:	8afb      	ldrh	r3, [r7, #22]
 8010638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801063c:	4293      	cmp	r3, r2
 801063e:	d007      	beq.n	8010650 <put_lfn+0x6c>
 8010640:	69fb      	ldr	r3, [r7, #28]
 8010642:	1c5a      	adds	r2, r3, #1
 8010644:	61fa      	str	r2, [r7, #28]
 8010646:	005b      	lsls	r3, r3, #1
 8010648:	68fa      	ldr	r2, [r7, #12]
 801064a:	4413      	add	r3, r2
 801064c:	881b      	ldrh	r3, [r3, #0]
 801064e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010650:	4a17      	ldr	r2, [pc, #92]	; (80106b0 <put_lfn+0xcc>)
 8010652:	69bb      	ldr	r3, [r7, #24]
 8010654:	4413      	add	r3, r2
 8010656:	781b      	ldrb	r3, [r3, #0]
 8010658:	461a      	mov	r2, r3
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	4413      	add	r3, r2
 801065e:	8afa      	ldrh	r2, [r7, #22]
 8010660:	4611      	mov	r1, r2
 8010662:	4618      	mov	r0, r3
 8010664:	f7fe ff95 	bl	800f592 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010668:	8afb      	ldrh	r3, [r7, #22]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d102      	bne.n	8010674 <put_lfn+0x90>
 801066e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010672:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010674:	69bb      	ldr	r3, [r7, #24]
 8010676:	3301      	adds	r3, #1
 8010678:	61bb      	str	r3, [r7, #24]
 801067a:	69bb      	ldr	r3, [r7, #24]
 801067c:	2b0c      	cmp	r3, #12
 801067e:	d9da      	bls.n	8010636 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010680:	8afb      	ldrh	r3, [r7, #22]
 8010682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010686:	4293      	cmp	r3, r2
 8010688:	d006      	beq.n	8010698 <put_lfn+0xb4>
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	005b      	lsls	r3, r3, #1
 801068e:	68fa      	ldr	r2, [r7, #12]
 8010690:	4413      	add	r3, r2
 8010692:	881b      	ldrh	r3, [r3, #0]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d103      	bne.n	80106a0 <put_lfn+0xbc>
 8010698:	79fb      	ldrb	r3, [r7, #7]
 801069a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801069e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	79fa      	ldrb	r2, [r7, #7]
 80106a4:	701a      	strb	r2, [r3, #0]
}
 80106a6:	bf00      	nop
 80106a8:	3720      	adds	r7, #32
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	08017adc 	.word	0x08017adc

080106b4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80106b4:	b580      	push	{r7, lr}
 80106b6:	b08c      	sub	sp, #48	; 0x30
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	607a      	str	r2, [r7, #4]
 80106c0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80106c2:	220b      	movs	r2, #11
 80106c4:	68b9      	ldr	r1, [r7, #8]
 80106c6:	68f8      	ldr	r0, [r7, #12]
 80106c8:	f7fe ffaa 	bl	800f620 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80106cc:	683b      	ldr	r3, [r7, #0]
 80106ce:	2b05      	cmp	r3, #5
 80106d0:	d92b      	bls.n	801072a <gen_numname+0x76>
		sr = seq;
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80106d6:	e022      	b.n	801071e <gen_numname+0x6a>
			wc = *lfn++;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	1c9a      	adds	r2, r3, #2
 80106dc:	607a      	str	r2, [r7, #4]
 80106de:	881b      	ldrh	r3, [r3, #0]
 80106e0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80106e2:	2300      	movs	r3, #0
 80106e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80106e6:	e017      	b.n	8010718 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	005a      	lsls	r2, r3, #1
 80106ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106ee:	f003 0301 	and.w	r3, r3, #1
 80106f2:	4413      	add	r3, r2
 80106f4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80106f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80106f8:	085b      	lsrs	r3, r3, #1
 80106fa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80106fc:	69fb      	ldr	r3, [r7, #28]
 80106fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010702:	2b00      	cmp	r3, #0
 8010704:	d005      	beq.n	8010712 <gen_numname+0x5e>
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 801070c:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8010710:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010714:	3301      	adds	r3, #1
 8010716:	62bb      	str	r3, [r7, #40]	; 0x28
 8010718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801071a:	2b0f      	cmp	r3, #15
 801071c:	d9e4      	bls.n	80106e8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	881b      	ldrh	r3, [r3, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d1d8      	bne.n	80106d8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010726:	69fb      	ldr	r3, [r7, #28]
 8010728:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 801072a:	2307      	movs	r3, #7
 801072c:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	b2db      	uxtb	r3, r3
 8010732:	f003 030f 	and.w	r3, r3, #15
 8010736:	b2db      	uxtb	r3, r3
 8010738:	3330      	adds	r3, #48	; 0x30
 801073a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801073e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010742:	2b39      	cmp	r3, #57	; 0x39
 8010744:	d904      	bls.n	8010750 <gen_numname+0x9c>
 8010746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801074a:	3307      	adds	r3, #7
 801074c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8010750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010752:	1e5a      	subs	r2, r3, #1
 8010754:	62ba      	str	r2, [r7, #40]	; 0x28
 8010756:	3330      	adds	r3, #48	; 0x30
 8010758:	443b      	add	r3, r7
 801075a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801075e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010762:	683b      	ldr	r3, [r7, #0]
 8010764:	091b      	lsrs	r3, r3, #4
 8010766:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010768:	683b      	ldr	r3, [r7, #0]
 801076a:	2b00      	cmp	r3, #0
 801076c:	d1df      	bne.n	801072e <gen_numname+0x7a>
	ns[i] = '~';
 801076e:	f107 0214 	add.w	r2, r7, #20
 8010772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010774:	4413      	add	r3, r2
 8010776:	227e      	movs	r2, #126	; 0x7e
 8010778:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801077a:	2300      	movs	r3, #0
 801077c:	627b      	str	r3, [r7, #36]	; 0x24
 801077e:	e002      	b.n	8010786 <gen_numname+0xd2>
 8010780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010782:	3301      	adds	r3, #1
 8010784:	627b      	str	r3, [r7, #36]	; 0x24
 8010786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801078a:	429a      	cmp	r2, r3
 801078c:	d205      	bcs.n	801079a <gen_numname+0xe6>
 801078e:	68fa      	ldr	r2, [r7, #12]
 8010790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010792:	4413      	add	r3, r2
 8010794:	781b      	ldrb	r3, [r3, #0]
 8010796:	2b20      	cmp	r3, #32
 8010798:	d1f2      	bne.n	8010780 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079c:	2b07      	cmp	r3, #7
 801079e:	d807      	bhi.n	80107b0 <gen_numname+0xfc>
 80107a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a2:	1c5a      	adds	r2, r3, #1
 80107a4:	62ba      	str	r2, [r7, #40]	; 0x28
 80107a6:	3330      	adds	r3, #48	; 0x30
 80107a8:	443b      	add	r3, r7
 80107aa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80107ae:	e000      	b.n	80107b2 <gen_numname+0xfe>
 80107b0:	2120      	movs	r1, #32
 80107b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107b4:	1c5a      	adds	r2, r3, #1
 80107b6:	627a      	str	r2, [r7, #36]	; 0x24
 80107b8:	68fa      	ldr	r2, [r7, #12]
 80107ba:	4413      	add	r3, r2
 80107bc:	460a      	mov	r2, r1
 80107be:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80107c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107c2:	2b07      	cmp	r3, #7
 80107c4:	d9e9      	bls.n	801079a <gen_numname+0xe6>
}
 80107c6:	bf00      	nop
 80107c8:	bf00      	nop
 80107ca:	3730      	adds	r7, #48	; 0x30
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}

080107d0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80107d0:	b480      	push	{r7}
 80107d2:	b085      	sub	sp, #20
 80107d4:	af00      	add	r7, sp, #0
 80107d6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80107d8:	2300      	movs	r3, #0
 80107da:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80107dc:	230b      	movs	r3, #11
 80107de:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80107e0:	7bfb      	ldrb	r3, [r7, #15]
 80107e2:	b2da      	uxtb	r2, r3
 80107e4:	0852      	lsrs	r2, r2, #1
 80107e6:	01db      	lsls	r3, r3, #7
 80107e8:	4313      	orrs	r3, r2
 80107ea:	b2da      	uxtb	r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	1c59      	adds	r1, r3, #1
 80107f0:	6079      	str	r1, [r7, #4]
 80107f2:	781b      	ldrb	r3, [r3, #0]
 80107f4:	4413      	add	r3, r2
 80107f6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	3b01      	subs	r3, #1
 80107fc:	60bb      	str	r3, [r7, #8]
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1ed      	bne.n	80107e0 <sum_sfn+0x10>
	return sum;
 8010804:	7bfb      	ldrb	r3, [r7, #15]
}
 8010806:	4618      	mov	r0, r3
 8010808:	3714      	adds	r7, #20
 801080a:	46bd      	mov	sp, r7
 801080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010810:	4770      	bx	lr

08010812 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010812:	b580      	push	{r7, lr}
 8010814:	b086      	sub	sp, #24
 8010816:	af00      	add	r7, sp, #0
 8010818:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010820:	2100      	movs	r1, #0
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f7ff fca8 	bl	8010178 <dir_sdi>
 8010828:	4603      	mov	r3, r0
 801082a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801082c:	7dfb      	ldrb	r3, [r7, #23]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d001      	beq.n	8010836 <dir_find+0x24>
 8010832:	7dfb      	ldrb	r3, [r7, #23]
 8010834:	e0a9      	b.n	801098a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010836:	23ff      	movs	r3, #255	; 0xff
 8010838:	753b      	strb	r3, [r7, #20]
 801083a:	7d3b      	ldrb	r3, [r7, #20]
 801083c:	757b      	strb	r3, [r7, #21]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f04f 32ff 	mov.w	r2, #4294967295
 8010844:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	69db      	ldr	r3, [r3, #28]
 801084a:	4619      	mov	r1, r3
 801084c:	6938      	ldr	r0, [r7, #16]
 801084e:	f7ff f915 	bl	800fa7c <move_window>
 8010852:	4603      	mov	r3, r0
 8010854:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010856:	7dfb      	ldrb	r3, [r7, #23]
 8010858:	2b00      	cmp	r3, #0
 801085a:	f040 8090 	bne.w	801097e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6a1b      	ldr	r3, [r3, #32]
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010866:	7dbb      	ldrb	r3, [r7, #22]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d102      	bne.n	8010872 <dir_find+0x60>
 801086c:	2304      	movs	r3, #4
 801086e:	75fb      	strb	r3, [r7, #23]
 8010870:	e08a      	b.n	8010988 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6a1b      	ldr	r3, [r3, #32]
 8010876:	330b      	adds	r3, #11
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801087e:	73fb      	strb	r3, [r7, #15]
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	7bfa      	ldrb	r2, [r7, #15]
 8010884:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010886:	7dbb      	ldrb	r3, [r7, #22]
 8010888:	2be5      	cmp	r3, #229	; 0xe5
 801088a:	d007      	beq.n	801089c <dir_find+0x8a>
 801088c:	7bfb      	ldrb	r3, [r7, #15]
 801088e:	f003 0308 	and.w	r3, r3, #8
 8010892:	2b00      	cmp	r3, #0
 8010894:	d009      	beq.n	80108aa <dir_find+0x98>
 8010896:	7bfb      	ldrb	r3, [r7, #15]
 8010898:	2b0f      	cmp	r3, #15
 801089a:	d006      	beq.n	80108aa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801089c:	23ff      	movs	r3, #255	; 0xff
 801089e:	757b      	strb	r3, [r7, #21]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	f04f 32ff 	mov.w	r2, #4294967295
 80108a6:	631a      	str	r2, [r3, #48]	; 0x30
 80108a8:	e05e      	b.n	8010968 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80108aa:	7bfb      	ldrb	r3, [r7, #15]
 80108ac:	2b0f      	cmp	r3, #15
 80108ae:	d136      	bne.n	801091e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80108b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d154      	bne.n	8010968 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80108be:	7dbb      	ldrb	r3, [r7, #22]
 80108c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	d00d      	beq.n	80108e4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	6a1b      	ldr	r3, [r3, #32]
 80108cc:	7b5b      	ldrb	r3, [r3, #13]
 80108ce:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80108d0:	7dbb      	ldrb	r3, [r7, #22]
 80108d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80108d6:	75bb      	strb	r3, [r7, #22]
 80108d8:	7dbb      	ldrb	r3, [r7, #22]
 80108da:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	695a      	ldr	r2, [r3, #20]
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80108e4:	7dba      	ldrb	r2, [r7, #22]
 80108e6:	7d7b      	ldrb	r3, [r7, #21]
 80108e8:	429a      	cmp	r2, r3
 80108ea:	d115      	bne.n	8010918 <dir_find+0x106>
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6a1b      	ldr	r3, [r3, #32]
 80108f0:	330d      	adds	r3, #13
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	7d3a      	ldrb	r2, [r7, #20]
 80108f6:	429a      	cmp	r2, r3
 80108f8:	d10e      	bne.n	8010918 <dir_find+0x106>
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	68da      	ldr	r2, [r3, #12]
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	6a1b      	ldr	r3, [r3, #32]
 8010902:	4619      	mov	r1, r3
 8010904:	4610      	mov	r0, r2
 8010906:	f7ff fdfd 	bl	8010504 <cmp_lfn>
 801090a:	4603      	mov	r3, r0
 801090c:	2b00      	cmp	r3, #0
 801090e:	d003      	beq.n	8010918 <dir_find+0x106>
 8010910:	7d7b      	ldrb	r3, [r7, #21]
 8010912:	3b01      	subs	r3, #1
 8010914:	b2db      	uxtb	r3, r3
 8010916:	e000      	b.n	801091a <dir_find+0x108>
 8010918:	23ff      	movs	r3, #255	; 0xff
 801091a:	757b      	strb	r3, [r7, #21]
 801091c:	e024      	b.n	8010968 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801091e:	7d7b      	ldrb	r3, [r7, #21]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d109      	bne.n	8010938 <dir_find+0x126>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	6a1b      	ldr	r3, [r3, #32]
 8010928:	4618      	mov	r0, r3
 801092a:	f7ff ff51 	bl	80107d0 <sum_sfn>
 801092e:	4603      	mov	r3, r0
 8010930:	461a      	mov	r2, r3
 8010932:	7d3b      	ldrb	r3, [r7, #20]
 8010934:	4293      	cmp	r3, r2
 8010936:	d024      	beq.n	8010982 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801093e:	f003 0301 	and.w	r3, r3, #1
 8010942:	2b00      	cmp	r3, #0
 8010944:	d10a      	bne.n	801095c <dir_find+0x14a>
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	6a18      	ldr	r0, [r3, #32]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	3324      	adds	r3, #36	; 0x24
 801094e:	220b      	movs	r2, #11
 8010950:	4619      	mov	r1, r3
 8010952:	f7fe fea1 	bl	800f698 <mem_cmp>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d014      	beq.n	8010986 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801095c:	23ff      	movs	r3, #255	; 0xff
 801095e:	757b      	strb	r3, [r7, #21]
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f04f 32ff 	mov.w	r2, #4294967295
 8010966:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010968:	2100      	movs	r1, #0
 801096a:	6878      	ldr	r0, [r7, #4]
 801096c:	f7ff fc7f 	bl	801026e <dir_next>
 8010970:	4603      	mov	r3, r0
 8010972:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010974:	7dfb      	ldrb	r3, [r7, #23]
 8010976:	2b00      	cmp	r3, #0
 8010978:	f43f af65 	beq.w	8010846 <dir_find+0x34>
 801097c:	e004      	b.n	8010988 <dir_find+0x176>
		if (res != FR_OK) break;
 801097e:	bf00      	nop
 8010980:	e002      	b.n	8010988 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010982:	bf00      	nop
 8010984:	e000      	b.n	8010988 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010986:	bf00      	nop

	return res;
 8010988:	7dfb      	ldrb	r3, [r7, #23]
}
 801098a:	4618      	mov	r0, r3
 801098c:	3718      	adds	r7, #24
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
	...

08010994 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b08c      	sub	sp, #48	; 0x30
 8010998:	af00      	add	r7, sp, #0
 801099a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80109a8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d001      	beq.n	80109b4 <dir_register+0x20>
 80109b0:	2306      	movs	r3, #6
 80109b2:	e0e0      	b.n	8010b76 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80109b4:	2300      	movs	r3, #0
 80109b6:	627b      	str	r3, [r7, #36]	; 0x24
 80109b8:	e002      	b.n	80109c0 <dir_register+0x2c>
 80109ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109bc:	3301      	adds	r3, #1
 80109be:	627b      	str	r3, [r7, #36]	; 0x24
 80109c0:	69fb      	ldr	r3, [r7, #28]
 80109c2:	68da      	ldr	r2, [r3, #12]
 80109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c6:	005b      	lsls	r3, r3, #1
 80109c8:	4413      	add	r3, r2
 80109ca:	881b      	ldrh	r3, [r3, #0]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d1f4      	bne.n	80109ba <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80109d6:	f107 030c 	add.w	r3, r7, #12
 80109da:	220c      	movs	r2, #12
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fe fe1f 	bl	800f620 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80109e2:	7dfb      	ldrb	r3, [r7, #23]
 80109e4:	f003 0301 	and.w	r3, r3, #1
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d032      	beq.n	8010a52 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2240      	movs	r2, #64	; 0x40
 80109f0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80109f4:	2301      	movs	r3, #1
 80109f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80109f8:	e016      	b.n	8010a28 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8010a00:	69fb      	ldr	r3, [r7, #28]
 8010a02:	68da      	ldr	r2, [r3, #12]
 8010a04:	f107 010c 	add.w	r1, r7, #12
 8010a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a0a:	f7ff fe53 	bl	80106b4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010a0e:	6878      	ldr	r0, [r7, #4]
 8010a10:	f7ff feff 	bl	8010812 <dir_find>
 8010a14:	4603      	mov	r3, r0
 8010a16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8010a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d106      	bne.n	8010a30 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a24:	3301      	adds	r3, #1
 8010a26:	62bb      	str	r3, [r7, #40]	; 0x28
 8010a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a2a:	2b63      	cmp	r3, #99	; 0x63
 8010a2c:	d9e5      	bls.n	80109fa <dir_register+0x66>
 8010a2e:	e000      	b.n	8010a32 <dir_register+0x9e>
			if (res != FR_OK) break;
 8010a30:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a34:	2b64      	cmp	r3, #100	; 0x64
 8010a36:	d101      	bne.n	8010a3c <dir_register+0xa8>
 8010a38:	2307      	movs	r3, #7
 8010a3a:	e09c      	b.n	8010b76 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010a3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a40:	2b04      	cmp	r3, #4
 8010a42:	d002      	beq.n	8010a4a <dir_register+0xb6>
 8010a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a48:	e095      	b.n	8010b76 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010a4a:	7dfa      	ldrb	r2, [r7, #23]
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010a52:	7dfb      	ldrb	r3, [r7, #23]
 8010a54:	f003 0302 	and.w	r3, r3, #2
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d007      	beq.n	8010a6c <dir_register+0xd8>
 8010a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a5e:	330c      	adds	r3, #12
 8010a60:	4a47      	ldr	r2, [pc, #284]	; (8010b80 <dir_register+0x1ec>)
 8010a62:	fba2 2303 	umull	r2, r3, r2, r3
 8010a66:	089b      	lsrs	r3, r3, #2
 8010a68:	3301      	adds	r3, #1
 8010a6a:	e000      	b.n	8010a6e <dir_register+0xda>
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010a70:	6a39      	ldr	r1, [r7, #32]
 8010a72:	6878      	ldr	r0, [r7, #4]
 8010a74:	f7ff fcc0 	bl	80103f8 <dir_alloc>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d148      	bne.n	8010b18 <dir_register+0x184>
 8010a86:	6a3b      	ldr	r3, [r7, #32]
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	623b      	str	r3, [r7, #32]
 8010a8c:	6a3b      	ldr	r3, [r7, #32]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d042      	beq.n	8010b18 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	695a      	ldr	r2, [r3, #20]
 8010a96:	6a3b      	ldr	r3, [r7, #32]
 8010a98:	015b      	lsls	r3, r3, #5
 8010a9a:	1ad3      	subs	r3, r2, r3
 8010a9c:	4619      	mov	r1, r3
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f7ff fb6a 	bl	8010178 <dir_sdi>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8010aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d132      	bne.n	8010b18 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	3324      	adds	r3, #36	; 0x24
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	f7ff fe8a 	bl	80107d0 <sum_sfn>
 8010abc:	4603      	mov	r3, r0
 8010abe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	69db      	ldr	r3, [r3, #28]
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	69f8      	ldr	r0, [r7, #28]
 8010ac8:	f7fe ffd8 	bl	800fa7c <move_window>
 8010acc:	4603      	mov	r3, r0
 8010ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8010ad2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d11d      	bne.n	8010b16 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	68d8      	ldr	r0, [r3, #12]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	6a19      	ldr	r1, [r3, #32]
 8010ae2:	6a3b      	ldr	r3, [r7, #32]
 8010ae4:	b2da      	uxtb	r2, r3
 8010ae6:	7efb      	ldrb	r3, [r7, #27]
 8010ae8:	f7ff fd7c 	bl	80105e4 <put_lfn>
				fs->wflag = 1;
 8010aec:	69fb      	ldr	r3, [r7, #28]
 8010aee:	2201      	movs	r2, #1
 8010af0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010af2:	2100      	movs	r1, #0
 8010af4:	6878      	ldr	r0, [r7, #4]
 8010af6:	f7ff fbba 	bl	801026e <dir_next>
 8010afa:	4603      	mov	r3, r0
 8010afc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8010b00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d107      	bne.n	8010b18 <dir_register+0x184>
 8010b08:	6a3b      	ldr	r3, [r7, #32]
 8010b0a:	3b01      	subs	r3, #1
 8010b0c:	623b      	str	r3, [r7, #32]
 8010b0e:	6a3b      	ldr	r3, [r7, #32]
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d1d5      	bne.n	8010ac0 <dir_register+0x12c>
 8010b14:	e000      	b.n	8010b18 <dir_register+0x184>
				if (res != FR_OK) break;
 8010b16:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010b18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d128      	bne.n	8010b72 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	69db      	ldr	r3, [r3, #28]
 8010b24:	4619      	mov	r1, r3
 8010b26:	69f8      	ldr	r0, [r7, #28]
 8010b28:	f7fe ffa8 	bl	800fa7c <move_window>
 8010b2c:	4603      	mov	r3, r0
 8010b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8010b32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d11b      	bne.n	8010b72 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010b3a:	687b      	ldr	r3, [r7, #4]
 8010b3c:	6a1b      	ldr	r3, [r3, #32]
 8010b3e:	2220      	movs	r2, #32
 8010b40:	2100      	movs	r1, #0
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fe fd8d 	bl	800f662 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	6a18      	ldr	r0, [r3, #32]
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	3324      	adds	r3, #36	; 0x24
 8010b50:	220b      	movs	r2, #11
 8010b52:	4619      	mov	r1, r3
 8010b54:	f7fe fd64 	bl	800f620 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	6a1b      	ldr	r3, [r3, #32]
 8010b62:	330c      	adds	r3, #12
 8010b64:	f002 0218 	and.w	r2, r2, #24
 8010b68:	b2d2      	uxtb	r2, r2
 8010b6a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010b6c:	69fb      	ldr	r3, [r7, #28]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010b76:	4618      	mov	r0, r3
 8010b78:	3730      	adds	r7, #48	; 0x30
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
 8010b7e:	bf00      	nop
 8010b80:	4ec4ec4f 	.word	0x4ec4ec4f

08010b84 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b088      	sub	sp, #32
 8010b88:	af00      	add	r7, sp, #0
 8010b8a:	6078      	str	r0, [r7, #4]
 8010b8c:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	2200      	movs	r2, #0
 8010b98:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	69db      	ldr	r3, [r3, #28]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	f000 80c9 	beq.w	8010d36 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bac:	d032      	beq.n	8010c14 <get_fileinfo+0x90>
			i = j = 0;
 8010bae:	2300      	movs	r3, #0
 8010bb0:	61bb      	str	r3, [r7, #24]
 8010bb2:	69bb      	ldr	r3, [r7, #24]
 8010bb4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010bb6:	e01b      	b.n	8010bf0 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010bb8:	89fb      	ldrh	r3, [r7, #14]
 8010bba:	2100      	movs	r1, #0
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	f001 fabf 	bl	8012140 <ff_convert>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8010bc6:	89fb      	ldrh	r3, [r7, #14]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d102      	bne.n	8010bd2 <get_fileinfo+0x4e>
 8010bcc:	2300      	movs	r3, #0
 8010bce:	61fb      	str	r3, [r7, #28]
 8010bd0:	e01a      	b.n	8010c08 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8010bd2:	69fb      	ldr	r3, [r7, #28]
 8010bd4:	2bfe      	cmp	r3, #254	; 0xfe
 8010bd6:	d902      	bls.n	8010bde <get_fileinfo+0x5a>
 8010bd8:	2300      	movs	r3, #0
 8010bda:	61fb      	str	r3, [r7, #28]
 8010bdc:	e014      	b.n	8010c08 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	1c5a      	adds	r2, r3, #1
 8010be2:	61fa      	str	r2, [r7, #28]
 8010be4:	89fa      	ldrh	r2, [r7, #14]
 8010be6:	b2d1      	uxtb	r1, r2
 8010be8:	683a      	ldr	r2, [r7, #0]
 8010bea:	4413      	add	r3, r2
 8010bec:	460a      	mov	r2, r1
 8010bee:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	68da      	ldr	r2, [r3, #12]
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	1c59      	adds	r1, r3, #1
 8010bf8:	61b9      	str	r1, [r7, #24]
 8010bfa:	005b      	lsls	r3, r3, #1
 8010bfc:	4413      	add	r3, r2
 8010bfe:	881b      	ldrh	r3, [r3, #0]
 8010c00:	81fb      	strh	r3, [r7, #14]
 8010c02:	89fb      	ldrh	r3, [r7, #14]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d1d7      	bne.n	8010bb8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8010c08:	683a      	ldr	r2, [r7, #0]
 8010c0a:	69fb      	ldr	r3, [r7, #28]
 8010c0c:	4413      	add	r3, r2
 8010c0e:	3316      	adds	r3, #22
 8010c10:	2200      	movs	r2, #0
 8010c12:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8010c14:	2300      	movs	r3, #0
 8010c16:	61bb      	str	r3, [r7, #24]
 8010c18:	69bb      	ldr	r3, [r7, #24]
 8010c1a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8010c1c:	683a      	ldr	r2, [r7, #0]
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	4413      	add	r3, r2
 8010c22:	3316      	adds	r3, #22
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8010c28:	e04c      	b.n	8010cc4 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6a1a      	ldr	r2, [r3, #32]
 8010c2e:	69fb      	ldr	r3, [r7, #28]
 8010c30:	1c59      	adds	r1, r3, #1
 8010c32:	61f9      	str	r1, [r7, #28]
 8010c34:	4413      	add	r3, r2
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010c3a:	7dfb      	ldrb	r3, [r7, #23]
 8010c3c:	2b20      	cmp	r3, #32
 8010c3e:	d100      	bne.n	8010c42 <get_fileinfo+0xbe>
 8010c40:	e040      	b.n	8010cc4 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8010c42:	7dfb      	ldrb	r3, [r7, #23]
 8010c44:	2b05      	cmp	r3, #5
 8010c46:	d101      	bne.n	8010c4c <get_fileinfo+0xc8>
 8010c48:	23e5      	movs	r3, #229	; 0xe5
 8010c4a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8010c4c:	69fb      	ldr	r3, [r7, #28]
 8010c4e:	2b09      	cmp	r3, #9
 8010c50:	d10f      	bne.n	8010c72 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8010c52:	89bb      	ldrh	r3, [r7, #12]
 8010c54:	2b00      	cmp	r3, #0
 8010c56:	d105      	bne.n	8010c64 <get_fileinfo+0xe0>
 8010c58:	683a      	ldr	r2, [r7, #0]
 8010c5a:	69bb      	ldr	r3, [r7, #24]
 8010c5c:	4413      	add	r3, r2
 8010c5e:	3316      	adds	r3, #22
 8010c60:	222e      	movs	r2, #46	; 0x2e
 8010c62:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8010c64:	69bb      	ldr	r3, [r7, #24]
 8010c66:	1c5a      	adds	r2, r3, #1
 8010c68:	61ba      	str	r2, [r7, #24]
 8010c6a:	683a      	ldr	r2, [r7, #0]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	222e      	movs	r2, #46	; 0x2e
 8010c70:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 8010c72:	683a      	ldr	r2, [r7, #0]
 8010c74:	69bb      	ldr	r3, [r7, #24]
 8010c76:	4413      	add	r3, r2
 8010c78:	3309      	adds	r3, #9
 8010c7a:	7dfa      	ldrb	r2, [r7, #23]
 8010c7c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8010c7e:	89bb      	ldrh	r3, [r7, #12]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d11c      	bne.n	8010cbe <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8010c84:	7dfb      	ldrb	r3, [r7, #23]
 8010c86:	2b40      	cmp	r3, #64	; 0x40
 8010c88:	d913      	bls.n	8010cb2 <get_fileinfo+0x12e>
 8010c8a:	7dfb      	ldrb	r3, [r7, #23]
 8010c8c:	2b5a      	cmp	r3, #90	; 0x5a
 8010c8e:	d810      	bhi.n	8010cb2 <get_fileinfo+0x12e>
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	6a1b      	ldr	r3, [r3, #32]
 8010c94:	330c      	adds	r3, #12
 8010c96:	781b      	ldrb	r3, [r3, #0]
 8010c98:	461a      	mov	r2, r3
 8010c9a:	69fb      	ldr	r3, [r7, #28]
 8010c9c:	2b08      	cmp	r3, #8
 8010c9e:	d901      	bls.n	8010ca4 <get_fileinfo+0x120>
 8010ca0:	2310      	movs	r3, #16
 8010ca2:	e000      	b.n	8010ca6 <get_fileinfo+0x122>
 8010ca4:	2308      	movs	r3, #8
 8010ca6:	4013      	ands	r3, r2
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d002      	beq.n	8010cb2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8010cac:	7dfb      	ldrb	r3, [r7, #23]
 8010cae:	3320      	adds	r3, #32
 8010cb0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8010cb2:	683a      	ldr	r2, [r7, #0]
 8010cb4:	69bb      	ldr	r3, [r7, #24]
 8010cb6:	4413      	add	r3, r2
 8010cb8:	3316      	adds	r3, #22
 8010cba:	7dfa      	ldrb	r2, [r7, #23]
 8010cbc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8010cbe:	69bb      	ldr	r3, [r7, #24]
 8010cc0:	3301      	adds	r3, #1
 8010cc2:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8010cc4:	69fb      	ldr	r3, [r7, #28]
 8010cc6:	2b0a      	cmp	r3, #10
 8010cc8:	d9af      	bls.n	8010c2a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8010cca:	89bb      	ldrh	r3, [r7, #12]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d10d      	bne.n	8010cec <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8010cd0:	683a      	ldr	r2, [r7, #0]
 8010cd2:	69bb      	ldr	r3, [r7, #24]
 8010cd4:	4413      	add	r3, r2
 8010cd6:	3316      	adds	r3, #22
 8010cd8:	2200      	movs	r2, #0
 8010cda:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a1b      	ldr	r3, [r3, #32]
 8010ce0:	330c      	adds	r3, #12
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d101      	bne.n	8010cec <get_fileinfo+0x168>
 8010ce8:	2300      	movs	r3, #0
 8010cea:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8010cec:	683a      	ldr	r2, [r7, #0]
 8010cee:	69bb      	ldr	r3, [r7, #24]
 8010cf0:	4413      	add	r3, r2
 8010cf2:	3309      	adds	r3, #9
 8010cf4:	2200      	movs	r2, #0
 8010cf6:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	6a1b      	ldr	r3, [r3, #32]
 8010cfc:	7ada      	ldrb	r2, [r3, #11]
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	6a1b      	ldr	r3, [r3, #32]
 8010d06:	331c      	adds	r3, #28
 8010d08:	4618      	mov	r0, r3
 8010d0a:	f7fe fc1f 	bl	800f54c <ld_dword>
 8010d0e:	4602      	mov	r2, r0
 8010d10:	683b      	ldr	r3, [r7, #0]
 8010d12:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	6a1b      	ldr	r3, [r3, #32]
 8010d18:	3316      	adds	r3, #22
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fe fc16 	bl	800f54c <ld_dword>
 8010d20:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010d22:	68bb      	ldr	r3, [r7, #8]
 8010d24:	b29a      	uxth	r2, r3
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	80da      	strh	r2, [r3, #6]
 8010d2a:	68bb      	ldr	r3, [r7, #8]
 8010d2c:	0c1b      	lsrs	r3, r3, #16
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	809a      	strh	r2, [r3, #4]
 8010d34:	e000      	b.n	8010d38 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010d36:	bf00      	nop
}
 8010d38:	3720      	adds	r7, #32
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
	...

08010d40 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b08a      	sub	sp, #40	; 0x28
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8010d4a:	683b      	ldr	r3, [r7, #0]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	613b      	str	r3, [r7, #16]
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	68db      	ldr	r3, [r3, #12]
 8010d56:	60fb      	str	r3, [r7, #12]
 8010d58:	2300      	movs	r3, #0
 8010d5a:	617b      	str	r3, [r7, #20]
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8010d60:	69bb      	ldr	r3, [r7, #24]
 8010d62:	1c5a      	adds	r2, r3, #1
 8010d64:	61ba      	str	r2, [r7, #24]
 8010d66:	693a      	ldr	r2, [r7, #16]
 8010d68:	4413      	add	r3, r2
 8010d6a:	781b      	ldrb	r3, [r3, #0]
 8010d6c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8010d6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d70:	2b1f      	cmp	r3, #31
 8010d72:	d940      	bls.n	8010df6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8010d74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d76:	2b2f      	cmp	r3, #47	; 0x2f
 8010d78:	d006      	beq.n	8010d88 <create_name+0x48>
 8010d7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010d7c:	2b5c      	cmp	r3, #92	; 0x5c
 8010d7e:	d110      	bne.n	8010da2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010d80:	e002      	b.n	8010d88 <create_name+0x48>
 8010d82:	69bb      	ldr	r3, [r7, #24]
 8010d84:	3301      	adds	r3, #1
 8010d86:	61bb      	str	r3, [r7, #24]
 8010d88:	693a      	ldr	r2, [r7, #16]
 8010d8a:	69bb      	ldr	r3, [r7, #24]
 8010d8c:	4413      	add	r3, r2
 8010d8e:	781b      	ldrb	r3, [r3, #0]
 8010d90:	2b2f      	cmp	r3, #47	; 0x2f
 8010d92:	d0f6      	beq.n	8010d82 <create_name+0x42>
 8010d94:	693a      	ldr	r2, [r7, #16]
 8010d96:	69bb      	ldr	r3, [r7, #24]
 8010d98:	4413      	add	r3, r2
 8010d9a:	781b      	ldrb	r3, [r3, #0]
 8010d9c:	2b5c      	cmp	r3, #92	; 0x5c
 8010d9e:	d0f0      	beq.n	8010d82 <create_name+0x42>
			break;
 8010da0:	e02a      	b.n	8010df8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	2bfe      	cmp	r3, #254	; 0xfe
 8010da6:	d901      	bls.n	8010dac <create_name+0x6c>
 8010da8:	2306      	movs	r3, #6
 8010daa:	e17d      	b.n	80110a8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010dac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dae:	b2db      	uxtb	r3, r3
 8010db0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8010db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010db4:	2101      	movs	r1, #1
 8010db6:	4618      	mov	r0, r3
 8010db8:	f001 f9c2 	bl	8012140 <ff_convert>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8010dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d101      	bne.n	8010dca <create_name+0x8a>
 8010dc6:	2306      	movs	r3, #6
 8010dc8:	e16e      	b.n	80110a8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010dca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8010dce:	d809      	bhi.n	8010de4 <create_name+0xa4>
 8010dd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	488d      	ldr	r0, [pc, #564]	; (801100c <create_name+0x2cc>)
 8010dd6:	f7fe fc86 	bl	800f6e6 <chk_chr>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d001      	beq.n	8010de4 <create_name+0xa4>
 8010de0:	2306      	movs	r3, #6
 8010de2:	e161      	b.n	80110a8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	1c5a      	adds	r2, r3, #1
 8010de8:	617a      	str	r2, [r7, #20]
 8010dea:	005b      	lsls	r3, r3, #1
 8010dec:	68fa      	ldr	r2, [r7, #12]
 8010dee:	4413      	add	r3, r2
 8010df0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010df2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010df4:	e7b4      	b.n	8010d60 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010df6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010df8:	693a      	ldr	r2, [r7, #16]
 8010dfa:	69bb      	ldr	r3, [r7, #24]
 8010dfc:	441a      	add	r2, r3
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010e02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e04:	2b1f      	cmp	r3, #31
 8010e06:	d801      	bhi.n	8010e0c <create_name+0xcc>
 8010e08:	2304      	movs	r3, #4
 8010e0a:	e000      	b.n	8010e0e <create_name+0xce>
 8010e0c:	2300      	movs	r3, #0
 8010e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010e12:	e011      	b.n	8010e38 <create_name+0xf8>
		w = lfn[di - 1];
 8010e14:	697b      	ldr	r3, [r7, #20]
 8010e16:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010e1a:	3b01      	subs	r3, #1
 8010e1c:	005b      	lsls	r3, r3, #1
 8010e1e:	68fa      	ldr	r2, [r7, #12]
 8010e20:	4413      	add	r3, r2
 8010e22:	881b      	ldrh	r3, [r3, #0]
 8010e24:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8010e26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e28:	2b20      	cmp	r3, #32
 8010e2a:	d002      	beq.n	8010e32 <create_name+0xf2>
 8010e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e2e:	2b2e      	cmp	r3, #46	; 0x2e
 8010e30:	d106      	bne.n	8010e40 <create_name+0x100>
		di--;
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	3b01      	subs	r3, #1
 8010e36:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d1ea      	bne.n	8010e14 <create_name+0xd4>
 8010e3e:	e000      	b.n	8010e42 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8010e40:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8010e42:	697b      	ldr	r3, [r7, #20]
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	4413      	add	r3, r2
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010e4e:	697b      	ldr	r3, [r7, #20]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d101      	bne.n	8010e58 <create_name+0x118>
 8010e54:	2306      	movs	r3, #6
 8010e56:	e127      	b.n	80110a8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	3324      	adds	r3, #36	; 0x24
 8010e5c:	220b      	movs	r2, #11
 8010e5e:	2120      	movs	r1, #32
 8010e60:	4618      	mov	r0, r3
 8010e62:	f7fe fbfe 	bl	800f662 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8010e66:	2300      	movs	r3, #0
 8010e68:	61bb      	str	r3, [r7, #24]
 8010e6a:	e002      	b.n	8010e72 <create_name+0x132>
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	3301      	adds	r3, #1
 8010e70:	61bb      	str	r3, [r7, #24]
 8010e72:	69bb      	ldr	r3, [r7, #24]
 8010e74:	005b      	lsls	r3, r3, #1
 8010e76:	68fa      	ldr	r2, [r7, #12]
 8010e78:	4413      	add	r3, r2
 8010e7a:	881b      	ldrh	r3, [r3, #0]
 8010e7c:	2b20      	cmp	r3, #32
 8010e7e:	d0f5      	beq.n	8010e6c <create_name+0x12c>
 8010e80:	69bb      	ldr	r3, [r7, #24]
 8010e82:	005b      	lsls	r3, r3, #1
 8010e84:	68fa      	ldr	r2, [r7, #12]
 8010e86:	4413      	add	r3, r2
 8010e88:	881b      	ldrh	r3, [r3, #0]
 8010e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8010e8c:	d0ee      	beq.n	8010e6c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	d009      	beq.n	8010ea8 <create_name+0x168>
 8010e94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010e98:	f043 0303 	orr.w	r3, r3, #3
 8010e9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010ea0:	e002      	b.n	8010ea8 <create_name+0x168>
 8010ea2:	697b      	ldr	r3, [r7, #20]
 8010ea4:	3b01      	subs	r3, #1
 8010ea6:	617b      	str	r3, [r7, #20]
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d009      	beq.n	8010ec2 <create_name+0x182>
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010eb4:	3b01      	subs	r3, #1
 8010eb6:	005b      	lsls	r3, r3, #1
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	4413      	add	r3, r2
 8010ebc:	881b      	ldrh	r3, [r3, #0]
 8010ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8010ec0:	d1ef      	bne.n	8010ea2 <create_name+0x162>

	i = b = 0; ni = 8;
 8010ec2:	2300      	movs	r3, #0
 8010ec4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010ec8:	2300      	movs	r3, #0
 8010eca:	623b      	str	r3, [r7, #32]
 8010ecc:	2308      	movs	r3, #8
 8010ece:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	1c5a      	adds	r2, r3, #1
 8010ed4:	61ba      	str	r2, [r7, #24]
 8010ed6:	005b      	lsls	r3, r3, #1
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	4413      	add	r3, r2
 8010edc:	881b      	ldrh	r3, [r3, #0]
 8010ede:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	f000 8090 	beq.w	8011008 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010ee8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010eea:	2b20      	cmp	r3, #32
 8010eec:	d006      	beq.n	8010efc <create_name+0x1bc>
 8010eee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8010ef2:	d10a      	bne.n	8010f0a <create_name+0x1ca>
 8010ef4:	69ba      	ldr	r2, [r7, #24]
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d006      	beq.n	8010f0a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010efc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f00:	f043 0303 	orr.w	r3, r3, #3
 8010f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f08:	e07d      	b.n	8011006 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010f0a:	6a3a      	ldr	r2, [r7, #32]
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	429a      	cmp	r2, r3
 8010f10:	d203      	bcs.n	8010f1a <create_name+0x1da>
 8010f12:	69ba      	ldr	r2, [r7, #24]
 8010f14:	697b      	ldr	r3, [r7, #20]
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d123      	bne.n	8010f62 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8010f1a:	69fb      	ldr	r3, [r7, #28]
 8010f1c:	2b0b      	cmp	r3, #11
 8010f1e:	d106      	bne.n	8010f2e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8010f20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f24:	f043 0303 	orr.w	r3, r3, #3
 8010f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010f2c:	e075      	b.n	801101a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010f2e:	69ba      	ldr	r2, [r7, #24]
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	429a      	cmp	r2, r3
 8010f34:	d005      	beq.n	8010f42 <create_name+0x202>
 8010f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f3a:	f043 0303 	orr.w	r3, r3, #3
 8010f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8010f42:	69ba      	ldr	r2, [r7, #24]
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	429a      	cmp	r2, r3
 8010f48:	d866      	bhi.n	8011018 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010f4a:	697b      	ldr	r3, [r7, #20]
 8010f4c:	61bb      	str	r3, [r7, #24]
 8010f4e:	2308      	movs	r3, #8
 8010f50:	623b      	str	r3, [r7, #32]
 8010f52:	230b      	movs	r3, #11
 8010f54:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010f56:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010f5a:	009b      	lsls	r3, r3, #2
 8010f5c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010f60:	e051      	b.n	8011006 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010f62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f64:	2b7f      	cmp	r3, #127	; 0x7f
 8010f66:	d914      	bls.n	8010f92 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f001 f8e7 	bl	8012140 <ff_convert>
 8010f72:	4603      	mov	r3, r0
 8010f74:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d004      	beq.n	8010f86 <create_name+0x246>
 8010f7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f7e:	3b80      	subs	r3, #128	; 0x80
 8010f80:	4a23      	ldr	r2, [pc, #140]	; (8011010 <create_name+0x2d0>)
 8010f82:	5cd3      	ldrb	r3, [r2, r3]
 8010f84:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f8a:	f043 0302 	orr.w	r3, r3, #2
 8010f8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010f92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d007      	beq.n	8010fa8 <create_name+0x268>
 8010f98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f9a:	4619      	mov	r1, r3
 8010f9c:	481d      	ldr	r0, [pc, #116]	; (8011014 <create_name+0x2d4>)
 8010f9e:	f7fe fba2 	bl	800f6e6 <chk_chr>
 8010fa2:	4603      	mov	r3, r0
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d008      	beq.n	8010fba <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010fa8:	235f      	movs	r3, #95	; 0x5f
 8010faa:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fb0:	f043 0303 	orr.w	r3, r3, #3
 8010fb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010fb8:	e01b      	b.n	8010ff2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010fba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010fbc:	2b40      	cmp	r3, #64	; 0x40
 8010fbe:	d909      	bls.n	8010fd4 <create_name+0x294>
 8010fc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010fc2:	2b5a      	cmp	r3, #90	; 0x5a
 8010fc4:	d806      	bhi.n	8010fd4 <create_name+0x294>
					b |= 2;
 8010fc6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010fca:	f043 0302 	orr.w	r3, r3, #2
 8010fce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010fd2:	e00e      	b.n	8010ff2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010fd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010fd6:	2b60      	cmp	r3, #96	; 0x60
 8010fd8:	d90b      	bls.n	8010ff2 <create_name+0x2b2>
 8010fda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010fdc:	2b7a      	cmp	r3, #122	; 0x7a
 8010fde:	d808      	bhi.n	8010ff2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010fe0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010fe4:	f043 0301 	orr.w	r3, r3, #1
 8010fe8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010fec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010fee:	3b20      	subs	r3, #32
 8010ff0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010ff2:	6a3b      	ldr	r3, [r7, #32]
 8010ff4:	1c5a      	adds	r2, r3, #1
 8010ff6:	623a      	str	r2, [r7, #32]
 8010ff8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010ffa:	b2d1      	uxtb	r1, r2
 8010ffc:	687a      	ldr	r2, [r7, #4]
 8010ffe:	4413      	add	r3, r2
 8011000:	460a      	mov	r2, r1
 8011002:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011006:	e763      	b.n	8010ed0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8011008:	bf00      	nop
 801100a:	e006      	b.n	801101a <create_name+0x2da>
 801100c:	080179e0 	.word	0x080179e0
 8011010:	08017a5c 	.word	0x08017a5c
 8011014:	080179ec 	.word	0x080179ec
			if (si > di) break;			/* No extension */
 8011018:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011020:	2be5      	cmp	r3, #229	; 0xe5
 8011022:	d103      	bne.n	801102c <create_name+0x2ec>
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	2205      	movs	r2, #5
 8011028:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801102c:	69fb      	ldr	r3, [r7, #28]
 801102e:	2b08      	cmp	r3, #8
 8011030:	d104      	bne.n	801103c <create_name+0x2fc>
 8011032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801103c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011040:	f003 030c 	and.w	r3, r3, #12
 8011044:	2b0c      	cmp	r3, #12
 8011046:	d005      	beq.n	8011054 <create_name+0x314>
 8011048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801104c:	f003 0303 	and.w	r3, r3, #3
 8011050:	2b03      	cmp	r3, #3
 8011052:	d105      	bne.n	8011060 <create_name+0x320>
 8011054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011058:	f043 0302 	orr.w	r3, r3, #2
 801105c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011064:	f003 0302 	and.w	r3, r3, #2
 8011068:	2b00      	cmp	r3, #0
 801106a:	d117      	bne.n	801109c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801106c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011070:	f003 0303 	and.w	r3, r3, #3
 8011074:	2b01      	cmp	r3, #1
 8011076:	d105      	bne.n	8011084 <create_name+0x344>
 8011078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801107c:	f043 0310 	orr.w	r3, r3, #16
 8011080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8011084:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011088:	f003 030c 	and.w	r3, r3, #12
 801108c:	2b04      	cmp	r3, #4
 801108e:	d105      	bne.n	801109c <create_name+0x35c>
 8011090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011094:	f043 0308 	orr.w	r3, r3, #8
 8011098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80110a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80110a6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80110a8:	4618      	mov	r0, r3
 80110aa:	3728      	adds	r7, #40	; 0x28
 80110ac:	46bd      	mov	sp, r7
 80110ae:	bd80      	pop	{r7, pc}

080110b0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80110b0:	b580      	push	{r7, lr}
 80110b2:	b086      	sub	sp, #24
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
 80110b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80110c4:	e002      	b.n	80110cc <follow_path+0x1c>
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	3301      	adds	r3, #1
 80110ca:	603b      	str	r3, [r7, #0]
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	781b      	ldrb	r3, [r3, #0]
 80110d0:	2b2f      	cmp	r3, #47	; 0x2f
 80110d2:	d0f8      	beq.n	80110c6 <follow_path+0x16>
 80110d4:	683b      	ldr	r3, [r7, #0]
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	2b5c      	cmp	r3, #92	; 0x5c
 80110da:	d0f4      	beq.n	80110c6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80110dc:	693b      	ldr	r3, [r7, #16]
 80110de:	2200      	movs	r2, #0
 80110e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	781b      	ldrb	r3, [r3, #0]
 80110e6:	2b1f      	cmp	r3, #31
 80110e8:	d80a      	bhi.n	8011100 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2280      	movs	r2, #128	; 0x80
 80110ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80110f2:	2100      	movs	r1, #0
 80110f4:	6878      	ldr	r0, [r7, #4]
 80110f6:	f7ff f83f 	bl	8010178 <dir_sdi>
 80110fa:	4603      	mov	r3, r0
 80110fc:	75fb      	strb	r3, [r7, #23]
 80110fe:	e043      	b.n	8011188 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011100:	463b      	mov	r3, r7
 8011102:	4619      	mov	r1, r3
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff fe1b 	bl	8010d40 <create_name>
 801110a:	4603      	mov	r3, r0
 801110c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801110e:	7dfb      	ldrb	r3, [r7, #23]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d134      	bne.n	801117e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011114:	6878      	ldr	r0, [r7, #4]
 8011116:	f7ff fb7c 	bl	8010812 <dir_find>
 801111a:	4603      	mov	r3, r0
 801111c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011124:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011126:	7dfb      	ldrb	r3, [r7, #23]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d00a      	beq.n	8011142 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801112c:	7dfb      	ldrb	r3, [r7, #23]
 801112e:	2b04      	cmp	r3, #4
 8011130:	d127      	bne.n	8011182 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011132:	7afb      	ldrb	r3, [r7, #11]
 8011134:	f003 0304 	and.w	r3, r3, #4
 8011138:	2b00      	cmp	r3, #0
 801113a:	d122      	bne.n	8011182 <follow_path+0xd2>
 801113c:	2305      	movs	r3, #5
 801113e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011140:	e01f      	b.n	8011182 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011142:	7afb      	ldrb	r3, [r7, #11]
 8011144:	f003 0304 	and.w	r3, r3, #4
 8011148:	2b00      	cmp	r3, #0
 801114a:	d11c      	bne.n	8011186 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801114c:	693b      	ldr	r3, [r7, #16]
 801114e:	799b      	ldrb	r3, [r3, #6]
 8011150:	f003 0310 	and.w	r3, r3, #16
 8011154:	2b00      	cmp	r3, #0
 8011156:	d102      	bne.n	801115e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011158:	2305      	movs	r3, #5
 801115a:	75fb      	strb	r3, [r7, #23]
 801115c:	e014      	b.n	8011188 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	695b      	ldr	r3, [r3, #20]
 8011168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801116c:	4413      	add	r3, r2
 801116e:	4619      	mov	r1, r3
 8011170:	68f8      	ldr	r0, [r7, #12]
 8011172:	f7ff f988 	bl	8010486 <ld_clust>
 8011176:	4602      	mov	r2, r0
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801117c:	e7c0      	b.n	8011100 <follow_path+0x50>
			if (res != FR_OK) break;
 801117e:	bf00      	nop
 8011180:	e002      	b.n	8011188 <follow_path+0xd8>
				break;
 8011182:	bf00      	nop
 8011184:	e000      	b.n	8011188 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011186:	bf00      	nop
			}
		}
	}

	return res;
 8011188:	7dfb      	ldrb	r3, [r7, #23]
}
 801118a:	4618      	mov	r0, r3
 801118c:	3718      	adds	r7, #24
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}

08011192 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011192:	b480      	push	{r7}
 8011194:	b087      	sub	sp, #28
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801119a:	f04f 33ff 	mov.w	r3, #4294967295
 801119e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d031      	beq.n	801120c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	617b      	str	r3, [r7, #20]
 80111ae:	e002      	b.n	80111b6 <get_ldnumber+0x24>
 80111b0:	697b      	ldr	r3, [r7, #20]
 80111b2:	3301      	adds	r3, #1
 80111b4:	617b      	str	r3, [r7, #20]
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	2b1f      	cmp	r3, #31
 80111bc:	d903      	bls.n	80111c6 <get_ldnumber+0x34>
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	2b3a      	cmp	r3, #58	; 0x3a
 80111c4:	d1f4      	bne.n	80111b0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	781b      	ldrb	r3, [r3, #0]
 80111ca:	2b3a      	cmp	r3, #58	; 0x3a
 80111cc:	d11c      	bne.n	8011208 <get_ldnumber+0x76>
			tp = *path;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	1c5a      	adds	r2, r3, #1
 80111d8:	60fa      	str	r2, [r7, #12]
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	3b30      	subs	r3, #48	; 0x30
 80111de:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80111e0:	68bb      	ldr	r3, [r7, #8]
 80111e2:	2b09      	cmp	r3, #9
 80111e4:	d80e      	bhi.n	8011204 <get_ldnumber+0x72>
 80111e6:	68fa      	ldr	r2, [r7, #12]
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	429a      	cmp	r2, r3
 80111ec:	d10a      	bne.n	8011204 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d107      	bne.n	8011204 <get_ldnumber+0x72>
					vol = (int)i;
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	3301      	adds	r3, #1
 80111fc:	617b      	str	r3, [r7, #20]
 80111fe:	687b      	ldr	r3, [r7, #4]
 8011200:	697a      	ldr	r2, [r7, #20]
 8011202:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	e002      	b.n	801120e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011208:	2300      	movs	r3, #0
 801120a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801120c:	693b      	ldr	r3, [r7, #16]
}
 801120e:	4618      	mov	r0, r3
 8011210:	371c      	adds	r7, #28
 8011212:	46bd      	mov	sp, r7
 8011214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011218:	4770      	bx	lr
	...

0801121c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b082      	sub	sp, #8
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	2200      	movs	r2, #0
 801122a:	70da      	strb	r2, [r3, #3]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	f04f 32ff 	mov.w	r2, #4294967295
 8011232:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011234:	6839      	ldr	r1, [r7, #0]
 8011236:	6878      	ldr	r0, [r7, #4]
 8011238:	f7fe fc20 	bl	800fa7c <move_window>
 801123c:	4603      	mov	r3, r0
 801123e:	2b00      	cmp	r3, #0
 8011240:	d001      	beq.n	8011246 <check_fs+0x2a>
 8011242:	2304      	movs	r3, #4
 8011244:	e038      	b.n	80112b8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	3334      	adds	r3, #52	; 0x34
 801124a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801124e:	4618      	mov	r0, r3
 8011250:	f7fe f964 	bl	800f51c <ld_word>
 8011254:	4603      	mov	r3, r0
 8011256:	461a      	mov	r2, r3
 8011258:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801125c:	429a      	cmp	r2, r3
 801125e:	d001      	beq.n	8011264 <check_fs+0x48>
 8011260:	2303      	movs	r3, #3
 8011262:	e029      	b.n	80112b8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801126a:	2be9      	cmp	r3, #233	; 0xe9
 801126c:	d009      	beq.n	8011282 <check_fs+0x66>
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011274:	2beb      	cmp	r3, #235	; 0xeb
 8011276:	d11e      	bne.n	80112b6 <check_fs+0x9a>
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801127e:	2b90      	cmp	r3, #144	; 0x90
 8011280:	d119      	bne.n	80112b6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	3334      	adds	r3, #52	; 0x34
 8011286:	3336      	adds	r3, #54	; 0x36
 8011288:	4618      	mov	r0, r3
 801128a:	f7fe f95f 	bl	800f54c <ld_dword>
 801128e:	4603      	mov	r3, r0
 8011290:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011294:	4a0a      	ldr	r2, [pc, #40]	; (80112c0 <check_fs+0xa4>)
 8011296:	4293      	cmp	r3, r2
 8011298:	d101      	bne.n	801129e <check_fs+0x82>
 801129a:	2300      	movs	r3, #0
 801129c:	e00c      	b.n	80112b8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	3334      	adds	r3, #52	; 0x34
 80112a2:	3352      	adds	r3, #82	; 0x52
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7fe f951 	bl	800f54c <ld_dword>
 80112aa:	4603      	mov	r3, r0
 80112ac:	4a05      	ldr	r2, [pc, #20]	; (80112c4 <check_fs+0xa8>)
 80112ae:	4293      	cmp	r3, r2
 80112b0:	d101      	bne.n	80112b6 <check_fs+0x9a>
 80112b2:	2300      	movs	r3, #0
 80112b4:	e000      	b.n	80112b8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80112b6:	2302      	movs	r3, #2
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3708      	adds	r7, #8
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd80      	pop	{r7, pc}
 80112c0:	00544146 	.word	0x00544146
 80112c4:	33544146 	.word	0x33544146

080112c8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80112c8:	b580      	push	{r7, lr}
 80112ca:	b096      	sub	sp, #88	; 0x58
 80112cc:	af00      	add	r7, sp, #0
 80112ce:	60f8      	str	r0, [r7, #12]
 80112d0:	60b9      	str	r1, [r7, #8]
 80112d2:	4613      	mov	r3, r2
 80112d4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80112d6:	68bb      	ldr	r3, [r7, #8]
 80112d8:	2200      	movs	r2, #0
 80112da:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80112dc:	68f8      	ldr	r0, [r7, #12]
 80112de:	f7ff ff58 	bl	8011192 <get_ldnumber>
 80112e2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80112e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	da01      	bge.n	80112ee <find_volume+0x26>
 80112ea:	230b      	movs	r3, #11
 80112ec:	e230      	b.n	8011750 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80112ee:	4aa1      	ldr	r2, [pc, #644]	; (8011574 <find_volume+0x2ac>)
 80112f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80112f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d101      	bne.n	8011302 <find_volume+0x3a>
 80112fe:	230c      	movs	r3, #12
 8011300:	e226      	b.n	8011750 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011306:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011308:	79fb      	ldrb	r3, [r7, #7]
 801130a:	f023 0301 	bic.w	r3, r3, #1
 801130e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011312:	781b      	ldrb	r3, [r3, #0]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d01a      	beq.n	801134e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801131a:	785b      	ldrb	r3, [r3, #1]
 801131c:	4618      	mov	r0, r3
 801131e:	f7fe f85f 	bl	800f3e0 <disk_status>
 8011322:	4603      	mov	r3, r0
 8011324:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011328:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801132c:	f003 0301 	and.w	r3, r3, #1
 8011330:	2b00      	cmp	r3, #0
 8011332:	d10c      	bne.n	801134e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011334:	79fb      	ldrb	r3, [r7, #7]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d007      	beq.n	801134a <find_volume+0x82>
 801133a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801133e:	f003 0304 	and.w	r3, r3, #4
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011346:	230a      	movs	r3, #10
 8011348:	e202      	b.n	8011750 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801134a:	2300      	movs	r3, #0
 801134c:	e200      	b.n	8011750 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801134e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011350:	2200      	movs	r2, #0
 8011352:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011356:	b2da      	uxtb	r2, r3
 8011358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135e:	785b      	ldrb	r3, [r3, #1]
 8011360:	4618      	mov	r0, r3
 8011362:	f7fe f857 	bl	800f414 <disk_initialize>
 8011366:	4603      	mov	r3, r0
 8011368:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801136c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011370:	f003 0301 	and.w	r3, r3, #1
 8011374:	2b00      	cmp	r3, #0
 8011376:	d001      	beq.n	801137c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011378:	2303      	movs	r3, #3
 801137a:	e1e9      	b.n	8011750 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801137c:	79fb      	ldrb	r3, [r7, #7]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d007      	beq.n	8011392 <find_volume+0xca>
 8011382:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011386:	f003 0304 	and.w	r3, r3, #4
 801138a:	2b00      	cmp	r3, #0
 801138c:	d001      	beq.n	8011392 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801138e:	230a      	movs	r3, #10
 8011390:	e1de      	b.n	8011750 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011392:	2300      	movs	r3, #0
 8011394:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011396:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011398:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801139a:	f7ff ff3f 	bl	801121c <check_fs>
 801139e:	4603      	mov	r3, r0
 80113a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80113a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113a8:	2b02      	cmp	r3, #2
 80113aa:	d149      	bne.n	8011440 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113ac:	2300      	movs	r3, #0
 80113ae:	643b      	str	r3, [r7, #64]	; 0x40
 80113b0:	e01e      	b.n	80113f0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80113b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80113b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ba:	011b      	lsls	r3, r3, #4
 80113bc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80113c0:	4413      	add	r3, r2
 80113c2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80113c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113c6:	3304      	adds	r3, #4
 80113c8:	781b      	ldrb	r3, [r3, #0]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d006      	beq.n	80113dc <find_volume+0x114>
 80113ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113d0:	3308      	adds	r3, #8
 80113d2:	4618      	mov	r0, r3
 80113d4:	f7fe f8ba 	bl	800f54c <ld_dword>
 80113d8:	4602      	mov	r2, r0
 80113da:	e000      	b.n	80113de <find_volume+0x116>
 80113dc:	2200      	movs	r2, #0
 80113de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113e0:	009b      	lsls	r3, r3, #2
 80113e2:	3358      	adds	r3, #88	; 0x58
 80113e4:	443b      	add	r3, r7
 80113e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ec:	3301      	adds	r3, #1
 80113ee:	643b      	str	r3, [r7, #64]	; 0x40
 80113f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113f2:	2b03      	cmp	r3, #3
 80113f4:	d9dd      	bls.n	80113b2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80113f6:	2300      	movs	r3, #0
 80113f8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80113fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d002      	beq.n	8011406 <find_volume+0x13e>
 8011400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011402:	3b01      	subs	r3, #1
 8011404:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011408:	009b      	lsls	r3, r3, #2
 801140a:	3358      	adds	r3, #88	; 0x58
 801140c:	443b      	add	r3, r7
 801140e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011412:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011416:	2b00      	cmp	r3, #0
 8011418:	d005      	beq.n	8011426 <find_volume+0x15e>
 801141a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801141c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801141e:	f7ff fefd 	bl	801121c <check_fs>
 8011422:	4603      	mov	r3, r0
 8011424:	e000      	b.n	8011428 <find_volume+0x160>
 8011426:	2303      	movs	r3, #3
 8011428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801142c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011430:	2b01      	cmp	r3, #1
 8011432:	d905      	bls.n	8011440 <find_volume+0x178>
 8011434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011436:	3301      	adds	r3, #1
 8011438:	643b      	str	r3, [r7, #64]	; 0x40
 801143a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801143c:	2b03      	cmp	r3, #3
 801143e:	d9e2      	bls.n	8011406 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011440:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011444:	2b04      	cmp	r3, #4
 8011446:	d101      	bne.n	801144c <find_volume+0x184>
 8011448:	2301      	movs	r3, #1
 801144a:	e181      	b.n	8011750 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801144c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011450:	2b01      	cmp	r3, #1
 8011452:	d901      	bls.n	8011458 <find_volume+0x190>
 8011454:	230d      	movs	r3, #13
 8011456:	e17b      	b.n	8011750 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801145a:	3334      	adds	r3, #52	; 0x34
 801145c:	330b      	adds	r3, #11
 801145e:	4618      	mov	r0, r3
 8011460:	f7fe f85c 	bl	800f51c <ld_word>
 8011464:	4603      	mov	r3, r0
 8011466:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801146a:	d001      	beq.n	8011470 <find_volume+0x1a8>
 801146c:	230d      	movs	r3, #13
 801146e:	e16f      	b.n	8011750 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011472:	3334      	adds	r3, #52	; 0x34
 8011474:	3316      	adds	r3, #22
 8011476:	4618      	mov	r0, r3
 8011478:	f7fe f850 	bl	800f51c <ld_word>
 801147c:	4603      	mov	r3, r0
 801147e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011482:	2b00      	cmp	r3, #0
 8011484:	d106      	bne.n	8011494 <find_volume+0x1cc>
 8011486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011488:	3334      	adds	r3, #52	; 0x34
 801148a:	3324      	adds	r3, #36	; 0x24
 801148c:	4618      	mov	r0, r3
 801148e:	f7fe f85d 	bl	800f54c <ld_dword>
 8011492:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011498:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80114a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80114a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a6:	789b      	ldrb	r3, [r3, #2]
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d005      	beq.n	80114b8 <find_volume+0x1f0>
 80114ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ae:	789b      	ldrb	r3, [r3, #2]
 80114b0:	2b02      	cmp	r3, #2
 80114b2:	d001      	beq.n	80114b8 <find_volume+0x1f0>
 80114b4:	230d      	movs	r3, #13
 80114b6:	e14b      	b.n	8011750 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80114b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ba:	789b      	ldrb	r3, [r3, #2]
 80114bc:	461a      	mov	r2, r3
 80114be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114c0:	fb02 f303 	mul.w	r3, r2, r3
 80114c4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80114c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80114cc:	b29a      	uxth	r2, r3
 80114ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	895b      	ldrh	r3, [r3, #10]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d008      	beq.n	80114ec <find_volume+0x224>
 80114da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114dc:	895b      	ldrh	r3, [r3, #10]
 80114de:	461a      	mov	r2, r3
 80114e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e2:	895b      	ldrh	r3, [r3, #10]
 80114e4:	3b01      	subs	r3, #1
 80114e6:	4013      	ands	r3, r2
 80114e8:	2b00      	cmp	r3, #0
 80114ea:	d001      	beq.n	80114f0 <find_volume+0x228>
 80114ec:	230d      	movs	r3, #13
 80114ee:	e12f      	b.n	8011750 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80114f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f2:	3334      	adds	r3, #52	; 0x34
 80114f4:	3311      	adds	r3, #17
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fe f810 	bl	800f51c <ld_word>
 80114fc:	4603      	mov	r3, r0
 80114fe:	461a      	mov	r2, r3
 8011500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011502:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011506:	891b      	ldrh	r3, [r3, #8]
 8011508:	f003 030f 	and.w	r3, r3, #15
 801150c:	b29b      	uxth	r3, r3
 801150e:	2b00      	cmp	r3, #0
 8011510:	d001      	beq.n	8011516 <find_volume+0x24e>
 8011512:	230d      	movs	r3, #13
 8011514:	e11c      	b.n	8011750 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011518:	3334      	adds	r3, #52	; 0x34
 801151a:	3313      	adds	r3, #19
 801151c:	4618      	mov	r0, r3
 801151e:	f7fd fffd 	bl	800f51c <ld_word>
 8011522:	4603      	mov	r3, r0
 8011524:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011528:	2b00      	cmp	r3, #0
 801152a:	d106      	bne.n	801153a <find_volume+0x272>
 801152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152e:	3334      	adds	r3, #52	; 0x34
 8011530:	3320      	adds	r3, #32
 8011532:	4618      	mov	r0, r3
 8011534:	f7fe f80a 	bl	800f54c <ld_dword>
 8011538:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801153a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153c:	3334      	adds	r3, #52	; 0x34
 801153e:	330e      	adds	r3, #14
 8011540:	4618      	mov	r0, r3
 8011542:	f7fd ffeb 	bl	800f51c <ld_word>
 8011546:	4603      	mov	r3, r0
 8011548:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801154a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801154c:	2b00      	cmp	r3, #0
 801154e:	d101      	bne.n	8011554 <find_volume+0x28c>
 8011550:	230d      	movs	r3, #13
 8011552:	e0fd      	b.n	8011750 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011554:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011558:	4413      	add	r3, r2
 801155a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801155c:	8912      	ldrh	r2, [r2, #8]
 801155e:	0912      	lsrs	r2, r2, #4
 8011560:	b292      	uxth	r2, r2
 8011562:	4413      	add	r3, r2
 8011564:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011566:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801156a:	429a      	cmp	r2, r3
 801156c:	d204      	bcs.n	8011578 <find_volume+0x2b0>
 801156e:	230d      	movs	r3, #13
 8011570:	e0ee      	b.n	8011750 <find_volume+0x488>
 8011572:	bf00      	nop
 8011574:	20001220 	.word	0x20001220
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011578:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801157c:	1ad3      	subs	r3, r2, r3
 801157e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011580:	8952      	ldrh	r2, [r2, #10]
 8011582:	fbb3 f3f2 	udiv	r3, r3, r2
 8011586:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <find_volume+0x2ca>
 801158e:	230d      	movs	r3, #13
 8011590:	e0de      	b.n	8011750 <find_volume+0x488>
		fmt = FS_FAT32;
 8011592:	2303      	movs	r3, #3
 8011594:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801159a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801159e:	4293      	cmp	r3, r2
 80115a0:	d802      	bhi.n	80115a8 <find_volume+0x2e0>
 80115a2:	2302      	movs	r3, #2
 80115a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80115a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115aa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80115ae:	4293      	cmp	r3, r2
 80115b0:	d802      	bhi.n	80115b8 <find_volume+0x2f0>
 80115b2:	2301      	movs	r3, #1
 80115b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80115b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ba:	1c9a      	adds	r2, r3, #2
 80115bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115be:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80115c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115c4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80115c6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80115c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115ca:	441a      	add	r2, r3
 80115cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ce:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80115d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80115d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d4:	441a      	add	r2, r3
 80115d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115d8:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80115da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80115de:	2b03      	cmp	r3, #3
 80115e0:	d11e      	bne.n	8011620 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80115e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115e4:	3334      	adds	r3, #52	; 0x34
 80115e6:	332a      	adds	r3, #42	; 0x2a
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7fd ff97 	bl	800f51c <ld_word>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d001      	beq.n	80115f8 <find_volume+0x330>
 80115f4:	230d      	movs	r3, #13
 80115f6:	e0ab      	b.n	8011750 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80115f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115fa:	891b      	ldrh	r3, [r3, #8]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d001      	beq.n	8011604 <find_volume+0x33c>
 8011600:	230d      	movs	r3, #13
 8011602:	e0a5      	b.n	8011750 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011606:	3334      	adds	r3, #52	; 0x34
 8011608:	332c      	adds	r3, #44	; 0x2c
 801160a:	4618      	mov	r0, r3
 801160c:	f7fd ff9e 	bl	800f54c <ld_dword>
 8011610:	4602      	mov	r2, r0
 8011612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011614:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011618:	699b      	ldr	r3, [r3, #24]
 801161a:	009b      	lsls	r3, r3, #2
 801161c:	647b      	str	r3, [r7, #68]	; 0x44
 801161e:	e01f      	b.n	8011660 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011622:	891b      	ldrh	r3, [r3, #8]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d101      	bne.n	801162c <find_volume+0x364>
 8011628:	230d      	movs	r3, #13
 801162a:	e091      	b.n	8011750 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801162c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011632:	441a      	add	r2, r3
 8011634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011636:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011638:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801163c:	2b02      	cmp	r3, #2
 801163e:	d103      	bne.n	8011648 <find_volume+0x380>
 8011640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011642:	699b      	ldr	r3, [r3, #24]
 8011644:	005b      	lsls	r3, r3, #1
 8011646:	e00a      	b.n	801165e <find_volume+0x396>
 8011648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801164a:	699a      	ldr	r2, [r3, #24]
 801164c:	4613      	mov	r3, r2
 801164e:	005b      	lsls	r3, r3, #1
 8011650:	4413      	add	r3, r2
 8011652:	085a      	lsrs	r2, r3, #1
 8011654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011656:	699b      	ldr	r3, [r3, #24]
 8011658:	f003 0301 	and.w	r3, r3, #1
 801165c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801165e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	69da      	ldr	r2, [r3, #28]
 8011664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011666:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801166a:	0a5b      	lsrs	r3, r3, #9
 801166c:	429a      	cmp	r2, r3
 801166e:	d201      	bcs.n	8011674 <find_volume+0x3ac>
 8011670:	230d      	movs	r3, #13
 8011672:	e06d      	b.n	8011750 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011676:	f04f 32ff 	mov.w	r2, #4294967295
 801167a:	615a      	str	r2, [r3, #20]
 801167c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801167e:	695a      	ldr	r2, [r3, #20]
 8011680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011682:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011686:	2280      	movs	r2, #128	; 0x80
 8011688:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801168a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801168e:	2b03      	cmp	r3, #3
 8011690:	d149      	bne.n	8011726 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011694:	3334      	adds	r3, #52	; 0x34
 8011696:	3330      	adds	r3, #48	; 0x30
 8011698:	4618      	mov	r0, r3
 801169a:	f7fd ff3f 	bl	800f51c <ld_word>
 801169e:	4603      	mov	r3, r0
 80116a0:	2b01      	cmp	r3, #1
 80116a2:	d140      	bne.n	8011726 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80116a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116a6:	3301      	adds	r3, #1
 80116a8:	4619      	mov	r1, r3
 80116aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80116ac:	f7fe f9e6 	bl	800fa7c <move_window>
 80116b0:	4603      	mov	r3, r0
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d137      	bne.n	8011726 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 80116b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b8:	2200      	movs	r2, #0
 80116ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80116bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116be:	3334      	adds	r3, #52	; 0x34
 80116c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80116c4:	4618      	mov	r0, r3
 80116c6:	f7fd ff29 	bl	800f51c <ld_word>
 80116ca:	4603      	mov	r3, r0
 80116cc:	461a      	mov	r2, r3
 80116ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80116d2:	429a      	cmp	r2, r3
 80116d4:	d127      	bne.n	8011726 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80116d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d8:	3334      	adds	r3, #52	; 0x34
 80116da:	4618      	mov	r0, r3
 80116dc:	f7fd ff36 	bl	800f54c <ld_dword>
 80116e0:	4603      	mov	r3, r0
 80116e2:	4a1d      	ldr	r2, [pc, #116]	; (8011758 <find_volume+0x490>)
 80116e4:	4293      	cmp	r3, r2
 80116e6:	d11e      	bne.n	8011726 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80116e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ea:	3334      	adds	r3, #52	; 0x34
 80116ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fd ff2b 	bl	800f54c <ld_dword>
 80116f6:	4603      	mov	r3, r0
 80116f8:	4a18      	ldr	r2, [pc, #96]	; (801175c <find_volume+0x494>)
 80116fa:	4293      	cmp	r3, r2
 80116fc:	d113      	bne.n	8011726 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80116fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011700:	3334      	adds	r3, #52	; 0x34
 8011702:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011706:	4618      	mov	r0, r3
 8011708:	f7fd ff20 	bl	800f54c <ld_dword>
 801170c:	4602      	mov	r2, r0
 801170e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011710:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011714:	3334      	adds	r3, #52	; 0x34
 8011716:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801171a:	4618      	mov	r0, r3
 801171c:	f7fd ff16 	bl	800f54c <ld_dword>
 8011720:	4602      	mov	r2, r0
 8011722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011724:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011728:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801172c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801172e:	4b0c      	ldr	r3, [pc, #48]	; (8011760 <find_volume+0x498>)
 8011730:	881b      	ldrh	r3, [r3, #0]
 8011732:	3301      	adds	r3, #1
 8011734:	b29a      	uxth	r2, r3
 8011736:	4b0a      	ldr	r3, [pc, #40]	; (8011760 <find_volume+0x498>)
 8011738:	801a      	strh	r2, [r3, #0]
 801173a:	4b09      	ldr	r3, [pc, #36]	; (8011760 <find_volume+0x498>)
 801173c:	881a      	ldrh	r2, [r3, #0]
 801173e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011740:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011744:	4a07      	ldr	r2, [pc, #28]	; (8011764 <find_volume+0x49c>)
 8011746:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011748:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801174a:	f7fe f92f 	bl	800f9ac <clear_lock>
#endif
	return FR_OK;
 801174e:	2300      	movs	r3, #0
}
 8011750:	4618      	mov	r0, r3
 8011752:	3758      	adds	r7, #88	; 0x58
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	41615252 	.word	0x41615252
 801175c:	61417272 	.word	0x61417272
 8011760:	20001224 	.word	0x20001224
 8011764:	20001248 	.word	0x20001248

08011768 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011772:	2309      	movs	r3, #9
 8011774:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d01c      	beq.n	80117b6 <validate+0x4e>
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d018      	beq.n	80117b6 <validate+0x4e>
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d013      	beq.n	80117b6 <validate+0x4e>
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	889a      	ldrh	r2, [r3, #4]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	88db      	ldrh	r3, [r3, #6]
 8011798:	429a      	cmp	r2, r3
 801179a:	d10c      	bne.n	80117b6 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	681b      	ldr	r3, [r3, #0]
 80117a0:	785b      	ldrb	r3, [r3, #1]
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fd fe1c 	bl	800f3e0 <disk_status>
 80117a8:	4603      	mov	r3, r0
 80117aa:	f003 0301 	and.w	r3, r3, #1
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d101      	bne.n	80117b6 <validate+0x4e>
			res = FR_OK;
 80117b2:	2300      	movs	r3, #0
 80117b4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80117b6:	7bfb      	ldrb	r3, [r7, #15]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d102      	bne.n	80117c2 <validate+0x5a>
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	e000      	b.n	80117c4 <validate+0x5c>
 80117c2:	2300      	movs	r3, #0
 80117c4:	683a      	ldr	r2, [r7, #0]
 80117c6:	6013      	str	r3, [r2, #0]
	return res;
 80117c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3710      	adds	r7, #16
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
	...

080117d4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b088      	sub	sp, #32
 80117d8:	af00      	add	r7, sp, #0
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	4613      	mov	r3, r2
 80117e0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80117e6:	f107 0310 	add.w	r3, r7, #16
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7ff fcd1 	bl	8011192 <get_ldnumber>
 80117f0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80117f2:	69fb      	ldr	r3, [r7, #28]
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	da01      	bge.n	80117fc <f_mount+0x28>
 80117f8:	230b      	movs	r3, #11
 80117fa:	e02b      	b.n	8011854 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80117fc:	4a17      	ldr	r2, [pc, #92]	; (801185c <f_mount+0x88>)
 80117fe:	69fb      	ldr	r3, [r7, #28]
 8011800:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011804:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d005      	beq.n	8011818 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801180c:	69b8      	ldr	r0, [r7, #24]
 801180e:	f7fe f8cd 	bl	800f9ac <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011812:	69bb      	ldr	r3, [r7, #24]
 8011814:	2200      	movs	r2, #0
 8011816:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d002      	beq.n	8011824 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2200      	movs	r2, #0
 8011822:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	490d      	ldr	r1, [pc, #52]	; (801185c <f_mount+0x88>)
 8011828:	69fb      	ldr	r3, [r7, #28]
 801182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d002      	beq.n	801183a <f_mount+0x66>
 8011834:	79fb      	ldrb	r3, [r7, #7]
 8011836:	2b01      	cmp	r3, #1
 8011838:	d001      	beq.n	801183e <f_mount+0x6a>
 801183a:	2300      	movs	r3, #0
 801183c:	e00a      	b.n	8011854 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801183e:	f107 010c 	add.w	r1, r7, #12
 8011842:	f107 0308 	add.w	r3, r7, #8
 8011846:	2200      	movs	r2, #0
 8011848:	4618      	mov	r0, r3
 801184a:	f7ff fd3d 	bl	80112c8 <find_volume>
 801184e:	4603      	mov	r3, r0
 8011850:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011852:	7dfb      	ldrb	r3, [r7, #23]
}
 8011854:	4618      	mov	r0, r3
 8011856:	3720      	adds	r7, #32
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}
 801185c:	20001220 	.word	0x20001220

08011860 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b09a      	sub	sp, #104	; 0x68
 8011864:	af00      	add	r7, sp, #0
 8011866:	60f8      	str	r0, [r7, #12]
 8011868:	60b9      	str	r1, [r7, #8]
 801186a:	4613      	mov	r3, r2
 801186c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2b00      	cmp	r3, #0
 8011872:	d101      	bne.n	8011878 <f_open+0x18>
 8011874:	2309      	movs	r3, #9
 8011876:	e1ad      	b.n	8011bd4 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011878:	79fb      	ldrb	r3, [r7, #7]
 801187a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801187e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011880:	79fa      	ldrb	r2, [r7, #7]
 8011882:	f107 0114 	add.w	r1, r7, #20
 8011886:	f107 0308 	add.w	r3, r7, #8
 801188a:	4618      	mov	r0, r3
 801188c:	f7ff fd1c 	bl	80112c8 <find_volume>
 8011890:	4603      	mov	r3, r0
 8011892:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8011896:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801189a:	2b00      	cmp	r3, #0
 801189c:	f040 8191 	bne.w	8011bc2 <f_open+0x362>
		dj.obj.fs = fs;
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80118a4:	68ba      	ldr	r2, [r7, #8]
 80118a6:	f107 0318 	add.w	r3, r7, #24
 80118aa:	4611      	mov	r1, r2
 80118ac:	4618      	mov	r0, r3
 80118ae:	f7ff fbff 	bl	80110b0 <follow_path>
 80118b2:	4603      	mov	r3, r0
 80118b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80118b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d11a      	bne.n	80118f6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80118c0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80118c4:	b25b      	sxtb	r3, r3
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	da03      	bge.n	80118d2 <f_open+0x72>
				res = FR_INVALID_NAME;
 80118ca:	2306      	movs	r3, #6
 80118cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80118d0:	e011      	b.n	80118f6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80118d2:	79fb      	ldrb	r3, [r7, #7]
 80118d4:	f023 0301 	bic.w	r3, r3, #1
 80118d8:	2b00      	cmp	r3, #0
 80118da:	bf14      	ite	ne
 80118dc:	2301      	movne	r3, #1
 80118de:	2300      	moveq	r3, #0
 80118e0:	b2db      	uxtb	r3, r3
 80118e2:	461a      	mov	r2, r3
 80118e4:	f107 0318 	add.w	r3, r7, #24
 80118e8:	4611      	mov	r1, r2
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7fd ff16 	bl	800f71c <chk_lock>
 80118f0:	4603      	mov	r3, r0
 80118f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80118f6:	79fb      	ldrb	r3, [r7, #7]
 80118f8:	f003 031c 	and.w	r3, r3, #28
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d07f      	beq.n	8011a00 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011900:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011904:	2b00      	cmp	r3, #0
 8011906:	d017      	beq.n	8011938 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011908:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801190c:	2b04      	cmp	r3, #4
 801190e:	d10e      	bne.n	801192e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011910:	f7fd ff60 	bl	800f7d4 <enq_lock>
 8011914:	4603      	mov	r3, r0
 8011916:	2b00      	cmp	r3, #0
 8011918:	d006      	beq.n	8011928 <f_open+0xc8>
 801191a:	f107 0318 	add.w	r3, r7, #24
 801191e:	4618      	mov	r0, r3
 8011920:	f7ff f838 	bl	8010994 <dir_register>
 8011924:	4603      	mov	r3, r0
 8011926:	e000      	b.n	801192a <f_open+0xca>
 8011928:	2312      	movs	r3, #18
 801192a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801192e:	79fb      	ldrb	r3, [r7, #7]
 8011930:	f043 0308 	orr.w	r3, r3, #8
 8011934:	71fb      	strb	r3, [r7, #7]
 8011936:	e010      	b.n	801195a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011938:	7fbb      	ldrb	r3, [r7, #30]
 801193a:	f003 0311 	and.w	r3, r3, #17
 801193e:	2b00      	cmp	r3, #0
 8011940:	d003      	beq.n	801194a <f_open+0xea>
					res = FR_DENIED;
 8011942:	2307      	movs	r3, #7
 8011944:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011948:	e007      	b.n	801195a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801194a:	79fb      	ldrb	r3, [r7, #7]
 801194c:	f003 0304 	and.w	r3, r3, #4
 8011950:	2b00      	cmp	r3, #0
 8011952:	d002      	beq.n	801195a <f_open+0xfa>
 8011954:	2308      	movs	r3, #8
 8011956:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801195a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801195e:	2b00      	cmp	r3, #0
 8011960:	d168      	bne.n	8011a34 <f_open+0x1d4>
 8011962:	79fb      	ldrb	r3, [r7, #7]
 8011964:	f003 0308 	and.w	r3, r3, #8
 8011968:	2b00      	cmp	r3, #0
 801196a:	d063      	beq.n	8011a34 <f_open+0x1d4>
				dw = GET_FATTIME();
 801196c:	f7fd fbcc 	bl	800f108 <get_fattime>
 8011970:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011974:	330e      	adds	r3, #14
 8011976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011978:	4618      	mov	r0, r3
 801197a:	f7fd fe25 	bl	800f5c8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801197e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011980:	3316      	adds	r3, #22
 8011982:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011984:	4618      	mov	r0, r3
 8011986:	f7fd fe1f 	bl	800f5c8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801198a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801198c:	330b      	adds	r3, #11
 801198e:	2220      	movs	r2, #32
 8011990:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011996:	4611      	mov	r1, r2
 8011998:	4618      	mov	r0, r3
 801199a:	f7fe fd74 	bl	8010486 <ld_clust>
 801199e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80119a0:	697b      	ldr	r3, [r7, #20]
 80119a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80119a4:	2200      	movs	r2, #0
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fe fd8c 	bl	80104c4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80119ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ae:	331c      	adds	r3, #28
 80119b0:	2100      	movs	r1, #0
 80119b2:	4618      	mov	r0, r3
 80119b4:	f7fd fe08 	bl	800f5c8 <st_dword>
					fs->wflag = 1;
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	2201      	movs	r2, #1
 80119bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80119be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d037      	beq.n	8011a34 <f_open+0x1d4>
						dw = fs->winsect;
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119c8:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80119ca:	f107 0318 	add.w	r3, r7, #24
 80119ce:	2200      	movs	r2, #0
 80119d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe fa9f 	bl	800ff16 <remove_chain>
 80119d8:	4603      	mov	r3, r0
 80119da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 80119de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d126      	bne.n	8011a34 <f_open+0x1d4>
							res = move_window(fs, dw);
 80119e6:	697b      	ldr	r3, [r7, #20]
 80119e8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fe f846 	bl	800fa7c <move_window>
 80119f0:	4603      	mov	r3, r0
 80119f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80119fa:	3a01      	subs	r2, #1
 80119fc:	611a      	str	r2, [r3, #16]
 80119fe:	e019      	b.n	8011a34 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011a00:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d115      	bne.n	8011a34 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011a08:	7fbb      	ldrb	r3, [r7, #30]
 8011a0a:	f003 0310 	and.w	r3, r3, #16
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d003      	beq.n	8011a1a <f_open+0x1ba>
					res = FR_NO_FILE;
 8011a12:	2304      	movs	r3, #4
 8011a14:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011a18:	e00c      	b.n	8011a34 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011a1a:	79fb      	ldrb	r3, [r7, #7]
 8011a1c:	f003 0302 	and.w	r3, r3, #2
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d007      	beq.n	8011a34 <f_open+0x1d4>
 8011a24:	7fbb      	ldrb	r3, [r7, #30]
 8011a26:	f003 0301 	and.w	r3, r3, #1
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d002      	beq.n	8011a34 <f_open+0x1d4>
						res = FR_DENIED;
 8011a2e:	2307      	movs	r3, #7
 8011a30:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8011a34:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d128      	bne.n	8011a8e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a3c:	79fb      	ldrb	r3, [r7, #7]
 8011a3e:	f003 0308 	and.w	r3, r3, #8
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d003      	beq.n	8011a4e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8011a46:	79fb      	ldrb	r3, [r7, #7]
 8011a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a4c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a52:	68fb      	ldr	r3, [r7, #12]
 8011a54:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011a56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011a5c:	79fb      	ldrb	r3, [r7, #7]
 8011a5e:	f023 0301 	bic.w	r3, r3, #1
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	bf14      	ite	ne
 8011a66:	2301      	movne	r3, #1
 8011a68:	2300      	moveq	r3, #0
 8011a6a:	b2db      	uxtb	r3, r3
 8011a6c:	461a      	mov	r2, r3
 8011a6e:	f107 0318 	add.w	r3, r7, #24
 8011a72:	4611      	mov	r1, r2
 8011a74:	4618      	mov	r0, r3
 8011a76:	f7fd fecf 	bl	800f818 <inc_lock>
 8011a7a:	4602      	mov	r2, r0
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	691b      	ldr	r3, [r3, #16]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d102      	bne.n	8011a8e <f_open+0x22e>
 8011a88:	2302      	movs	r3, #2
 8011a8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011a8e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	f040 8095 	bne.w	8011bc2 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011a98:	697b      	ldr	r3, [r7, #20]
 8011a9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a9c:	4611      	mov	r1, r2
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fe fcf1 	bl	8010486 <ld_clust>
 8011aa4:	4602      	mov	r2, r0
 8011aa6:	68fb      	ldr	r3, [r7, #12]
 8011aa8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aac:	331c      	adds	r3, #28
 8011aae:	4618      	mov	r0, r3
 8011ab0:	f7fd fd4c 	bl	800f54c <ld_dword>
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011aba:	68fb      	ldr	r3, [r7, #12]
 8011abc:	2200      	movs	r2, #0
 8011abe:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011ac0:	697a      	ldr	r2, [r7, #20]
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	88da      	ldrh	r2, [r3, #6]
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	79fa      	ldrb	r2, [r7, #7]
 8011ad2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	2200      	movs	r2, #0
 8011ade:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	2200      	movs	r2, #0
 8011ae4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	3330      	adds	r3, #48	; 0x30
 8011aea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011aee:	2100      	movs	r1, #0
 8011af0:	4618      	mov	r0, r3
 8011af2:	f7fd fdb6 	bl	800f662 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011af6:	79fb      	ldrb	r3, [r7, #7]
 8011af8:	f003 0320 	and.w	r3, r3, #32
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d060      	beq.n	8011bc2 <f_open+0x362>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	68db      	ldr	r3, [r3, #12]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d05c      	beq.n	8011bc2 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	68da      	ldr	r2, [r3, #12]
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	895b      	ldrh	r3, [r3, #10]
 8011b14:	025b      	lsls	r3, r3, #9
 8011b16:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	689b      	ldr	r3, [r3, #8]
 8011b1c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	68db      	ldr	r3, [r3, #12]
 8011b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011b24:	e016      	b.n	8011b54 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	f7fe f861 	bl	800fbf2 <get_fat>
 8011b30:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8011b32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b34:	2b01      	cmp	r3, #1
 8011b36:	d802      	bhi.n	8011b3e <f_open+0x2de>
 8011b38:	2302      	movs	r3, #2
 8011b3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b44:	d102      	bne.n	8011b4c <f_open+0x2ec>
 8011b46:	2301      	movs	r3, #1
 8011b48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b50:	1ad3      	subs	r3, r2, r3
 8011b52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011b54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d103      	bne.n	8011b64 <f_open+0x304>
 8011b5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b60:	429a      	cmp	r2, r3
 8011b62:	d8e0      	bhi.n	8011b26 <f_open+0x2c6>
				}
				fp->clust = clst;
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011b68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011b6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d127      	bne.n	8011bc2 <f_open+0x362>
 8011b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d022      	beq.n	8011bc2 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8011b80:	4618      	mov	r0, r3
 8011b82:	f7fe f817 	bl	800fbb4 <clust2sect>
 8011b86:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d103      	bne.n	8011b96 <f_open+0x336>
						res = FR_INT_ERR;
 8011b8e:	2302      	movs	r3, #2
 8011b90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8011b94:	e015      	b.n	8011bc2 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011b96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011b98:	0a5a      	lsrs	r2, r3, #9
 8011b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b9c:	441a      	add	r2, r3
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	7858      	ldrb	r0, [r3, #1]
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	6a1a      	ldr	r2, [r3, #32]
 8011bb0:	2301      	movs	r3, #1
 8011bb2:	f7fd fc55 	bl	800f460 <disk_read>
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d002      	beq.n	8011bc2 <f_open+0x362>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011bc2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d002      	beq.n	8011bd0 <f_open+0x370>
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011bd0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3768      	adds	r7, #104	; 0x68
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}

08011bdc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b08c      	sub	sp, #48	; 0x30
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
 8011be8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011bea:	68bb      	ldr	r3, [r7, #8]
 8011bec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011bee:	683b      	ldr	r3, [r7, #0]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f107 0210 	add.w	r2, r7, #16
 8011bfa:	4611      	mov	r1, r2
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7ff fdb3 	bl	8011768 <validate>
 8011c02:	4603      	mov	r3, r0
 8011c04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011c08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d107      	bne.n	8011c20 <f_write+0x44>
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	7d5b      	ldrb	r3, [r3, #21]
 8011c14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d002      	beq.n	8011c26 <f_write+0x4a>
 8011c20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c24:	e14b      	b.n	8011ebe <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	7d1b      	ldrb	r3, [r3, #20]
 8011c2a:	f003 0302 	and.w	r3, r3, #2
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d101      	bne.n	8011c36 <f_write+0x5a>
 8011c32:	2307      	movs	r3, #7
 8011c34:	e143      	b.n	8011ebe <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	699a      	ldr	r2, [r3, #24]
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	441a      	add	r2, r3
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	699b      	ldr	r3, [r3, #24]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	f080 812d 	bcs.w	8011ea2 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	699b      	ldr	r3, [r3, #24]
 8011c4c:	43db      	mvns	r3, r3
 8011c4e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011c50:	e127      	b.n	8011ea2 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	699b      	ldr	r3, [r3, #24]
 8011c56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	f040 80e3 	bne.w	8011e26 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	699b      	ldr	r3, [r3, #24]
 8011c64:	0a5b      	lsrs	r3, r3, #9
 8011c66:	693a      	ldr	r2, [r7, #16]
 8011c68:	8952      	ldrh	r2, [r2, #10]
 8011c6a:	3a01      	subs	r2, #1
 8011c6c:	4013      	ands	r3, r2
 8011c6e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011c70:	69bb      	ldr	r3, [r7, #24]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d143      	bne.n	8011cfe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011c76:	68fb      	ldr	r3, [r7, #12]
 8011c78:	699b      	ldr	r3, [r3, #24]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d10c      	bne.n	8011c98 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	689b      	ldr	r3, [r3, #8]
 8011c82:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d11a      	bne.n	8011cc0 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	2100      	movs	r1, #0
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fe f9a6 	bl	800ffe0 <create_chain>
 8011c94:	62b8      	str	r0, [r7, #40]	; 0x28
 8011c96:	e013      	b.n	8011cc0 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d007      	beq.n	8011cb0 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	699b      	ldr	r3, [r3, #24]
 8011ca4:	4619      	mov	r1, r3
 8011ca6:	68f8      	ldr	r0, [r7, #12]
 8011ca8:	f7fe fa32 	bl	8010110 <clmt_clust>
 8011cac:	62b8      	str	r0, [r7, #40]	; 0x28
 8011cae:	e007      	b.n	8011cc0 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011cb0:	68fa      	ldr	r2, [r7, #12]
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	69db      	ldr	r3, [r3, #28]
 8011cb6:	4619      	mov	r1, r3
 8011cb8:	4610      	mov	r0, r2
 8011cba:	f7fe f991 	bl	800ffe0 <create_chain>
 8011cbe:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	f000 80f2 	beq.w	8011eac <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cca:	2b01      	cmp	r3, #1
 8011ccc:	d104      	bne.n	8011cd8 <f_write+0xfc>
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	2202      	movs	r2, #2
 8011cd2:	755a      	strb	r2, [r3, #21]
 8011cd4:	2302      	movs	r3, #2
 8011cd6:	e0f2      	b.n	8011ebe <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cde:	d104      	bne.n	8011cea <f_write+0x10e>
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	2201      	movs	r2, #1
 8011ce4:	755a      	strb	r2, [r3, #21]
 8011ce6:	2301      	movs	r3, #1
 8011ce8:	e0e9      	b.n	8011ebe <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cee:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	689b      	ldr	r3, [r3, #8]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d102      	bne.n	8011cfe <f_write+0x122>
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cfc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	7d1b      	ldrb	r3, [r3, #20]
 8011d02:	b25b      	sxtb	r3, r3
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	da18      	bge.n	8011d3a <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	7858      	ldrb	r0, [r3, #1]
 8011d0c:	68fb      	ldr	r3, [r7, #12]
 8011d0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	6a1a      	ldr	r2, [r3, #32]
 8011d16:	2301      	movs	r3, #1
 8011d18:	f7fd fbc2 	bl	800f4a0 <disk_write>
 8011d1c:	4603      	mov	r3, r0
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d004      	beq.n	8011d2c <f_write+0x150>
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	2201      	movs	r2, #1
 8011d26:	755a      	strb	r2, [r3, #21]
 8011d28:	2301      	movs	r3, #1
 8011d2a:	e0c8      	b.n	8011ebe <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	7d1b      	ldrb	r3, [r3, #20]
 8011d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d34:	b2da      	uxtb	r2, r3
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011d3a:	693a      	ldr	r2, [r7, #16]
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	69db      	ldr	r3, [r3, #28]
 8011d40:	4619      	mov	r1, r3
 8011d42:	4610      	mov	r0, r2
 8011d44:	f7fd ff36 	bl	800fbb4 <clust2sect>
 8011d48:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d104      	bne.n	8011d5a <f_write+0x17e>
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	2202      	movs	r2, #2
 8011d54:	755a      	strb	r2, [r3, #21]
 8011d56:	2302      	movs	r3, #2
 8011d58:	e0b1      	b.n	8011ebe <f_write+0x2e2>
			sect += csect;
 8011d5a:	697a      	ldr	r2, [r7, #20]
 8011d5c:	69bb      	ldr	r3, [r7, #24]
 8011d5e:	4413      	add	r3, r2
 8011d60:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	0a5b      	lsrs	r3, r3, #9
 8011d66:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011d68:	6a3b      	ldr	r3, [r7, #32]
 8011d6a:	2b00      	cmp	r3, #0
 8011d6c:	d03c      	beq.n	8011de8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011d6e:	69ba      	ldr	r2, [r7, #24]
 8011d70:	6a3b      	ldr	r3, [r7, #32]
 8011d72:	4413      	add	r3, r2
 8011d74:	693a      	ldr	r2, [r7, #16]
 8011d76:	8952      	ldrh	r2, [r2, #10]
 8011d78:	4293      	cmp	r3, r2
 8011d7a:	d905      	bls.n	8011d88 <f_write+0x1ac>
					cc = fs->csize - csect;
 8011d7c:	693b      	ldr	r3, [r7, #16]
 8011d7e:	895b      	ldrh	r3, [r3, #10]
 8011d80:	461a      	mov	r2, r3
 8011d82:	69bb      	ldr	r3, [r7, #24]
 8011d84:	1ad3      	subs	r3, r2, r3
 8011d86:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011d88:	693b      	ldr	r3, [r7, #16]
 8011d8a:	7858      	ldrb	r0, [r3, #1]
 8011d8c:	6a3b      	ldr	r3, [r7, #32]
 8011d8e:	697a      	ldr	r2, [r7, #20]
 8011d90:	69f9      	ldr	r1, [r7, #28]
 8011d92:	f7fd fb85 	bl	800f4a0 <disk_write>
 8011d96:	4603      	mov	r3, r0
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d004      	beq.n	8011da6 <f_write+0x1ca>
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	2201      	movs	r2, #1
 8011da0:	755a      	strb	r2, [r3, #21]
 8011da2:	2301      	movs	r3, #1
 8011da4:	e08b      	b.n	8011ebe <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	6a1a      	ldr	r2, [r3, #32]
 8011daa:	697b      	ldr	r3, [r7, #20]
 8011dac:	1ad3      	subs	r3, r2, r3
 8011dae:	6a3a      	ldr	r2, [r7, #32]
 8011db0:	429a      	cmp	r2, r3
 8011db2:	d915      	bls.n	8011de0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	6a1a      	ldr	r2, [r3, #32]
 8011dbe:	697b      	ldr	r3, [r7, #20]
 8011dc0:	1ad3      	subs	r3, r2, r3
 8011dc2:	025b      	lsls	r3, r3, #9
 8011dc4:	69fa      	ldr	r2, [r7, #28]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011dcc:	4619      	mov	r1, r3
 8011dce:	f7fd fc27 	bl	800f620 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	7d1b      	ldrb	r3, [r3, #20]
 8011dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011dda:	b2da      	uxtb	r2, r3
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011de0:	6a3b      	ldr	r3, [r7, #32]
 8011de2:	025b      	lsls	r3, r3, #9
 8011de4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011de6:	e03f      	b.n	8011e68 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	6a1b      	ldr	r3, [r3, #32]
 8011dec:	697a      	ldr	r2, [r7, #20]
 8011dee:	429a      	cmp	r2, r3
 8011df0:	d016      	beq.n	8011e20 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	699a      	ldr	r2, [r3, #24]
 8011df6:	68fb      	ldr	r3, [r7, #12]
 8011df8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011dfa:	429a      	cmp	r2, r3
 8011dfc:	d210      	bcs.n	8011e20 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	7858      	ldrb	r0, [r3, #1]
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e08:	2301      	movs	r3, #1
 8011e0a:	697a      	ldr	r2, [r7, #20]
 8011e0c:	f7fd fb28 	bl	800f460 <disk_read>
 8011e10:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d004      	beq.n	8011e20 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	2201      	movs	r2, #1
 8011e1a:	755a      	strb	r2, [r3, #21]
 8011e1c:	2301      	movs	r3, #1
 8011e1e:	e04e      	b.n	8011ebe <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	697a      	ldr	r2, [r7, #20]
 8011e24:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	699b      	ldr	r3, [r3, #24]
 8011e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e2e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011e32:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011e34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	429a      	cmp	r2, r3
 8011e3a:	d901      	bls.n	8011e40 <f_write+0x264>
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	699b      	ldr	r3, [r3, #24]
 8011e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011e4e:	4413      	add	r3, r2
 8011e50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e52:	69f9      	ldr	r1, [r7, #28]
 8011e54:	4618      	mov	r0, r3
 8011e56:	f7fd fbe3 	bl	800f620 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	7d1b      	ldrb	r3, [r3, #20]
 8011e5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011e62:	b2da      	uxtb	r2, r3
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011e68:	69fa      	ldr	r2, [r7, #28]
 8011e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e6c:	4413      	add	r3, r2
 8011e6e:	61fb      	str	r3, [r7, #28]
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	699a      	ldr	r2, [r3, #24]
 8011e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e76:	441a      	add	r2, r3
 8011e78:	68fb      	ldr	r3, [r7, #12]
 8011e7a:	619a      	str	r2, [r3, #24]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	68da      	ldr	r2, [r3, #12]
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	699b      	ldr	r3, [r3, #24]
 8011e84:	429a      	cmp	r2, r3
 8011e86:	bf38      	it	cc
 8011e88:	461a      	movcc	r2, r3
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	60da      	str	r2, [r3, #12]
 8011e8e:	683b      	ldr	r3, [r7, #0]
 8011e90:	681a      	ldr	r2, [r3, #0]
 8011e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e94:	441a      	add	r2, r3
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	601a      	str	r2, [r3, #0]
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9e:	1ad3      	subs	r3, r2, r3
 8011ea0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f47f aed4 	bne.w	8011c52 <f_write+0x76>
 8011eaa:	e000      	b.n	8011eae <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011eac:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	7d1b      	ldrb	r3, [r3, #20]
 8011eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011eb6:	b2da      	uxtb	r2, r3
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011ebc:	2300      	movs	r3, #0
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3730      	adds	r7, #48	; 0x30
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	bd80      	pop	{r7, pc}

08011ec6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011ec6:	b580      	push	{r7, lr}
 8011ec8:	b086      	sub	sp, #24
 8011eca:	af00      	add	r7, sp, #0
 8011ecc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	f107 0208 	add.w	r2, r7, #8
 8011ed4:	4611      	mov	r1, r2
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f7ff fc46 	bl	8011768 <validate>
 8011edc:	4603      	mov	r3, r0
 8011ede:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011ee0:	7dfb      	ldrb	r3, [r7, #23]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d168      	bne.n	8011fb8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011ee6:	687b      	ldr	r3, [r7, #4]
 8011ee8:	7d1b      	ldrb	r3, [r3, #20]
 8011eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d062      	beq.n	8011fb8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	7d1b      	ldrb	r3, [r3, #20]
 8011ef6:	b25b      	sxtb	r3, r3
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	da15      	bge.n	8011f28 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	7858      	ldrb	r0, [r3, #1]
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6a1a      	ldr	r2, [r3, #32]
 8011f0a:	2301      	movs	r3, #1
 8011f0c:	f7fd fac8 	bl	800f4a0 <disk_write>
 8011f10:	4603      	mov	r3, r0
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d001      	beq.n	8011f1a <f_sync+0x54>
 8011f16:	2301      	movs	r3, #1
 8011f18:	e04f      	b.n	8011fba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	7d1b      	ldrb	r3, [r3, #20]
 8011f1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011f22:	b2da      	uxtb	r2, r3
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011f28:	f7fd f8ee 	bl	800f108 <get_fattime>
 8011f2c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011f2e:	68ba      	ldr	r2, [r7, #8]
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f34:	4619      	mov	r1, r3
 8011f36:	4610      	mov	r0, r2
 8011f38:	f7fd fda0 	bl	800fa7c <move_window>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011f40:	7dfb      	ldrb	r3, [r7, #23]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d138      	bne.n	8011fb8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f4a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011f4c:	68fb      	ldr	r3, [r7, #12]
 8011f4e:	330b      	adds	r3, #11
 8011f50:	781a      	ldrb	r2, [r3, #0]
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	330b      	adds	r3, #11
 8011f56:	f042 0220 	orr.w	r2, r2, #32
 8011f5a:	b2d2      	uxtb	r2, r2
 8011f5c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	6818      	ldr	r0, [r3, #0]
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	689b      	ldr	r3, [r3, #8]
 8011f66:	461a      	mov	r2, r3
 8011f68:	68f9      	ldr	r1, [r7, #12]
 8011f6a:	f7fe faab 	bl	80104c4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	f103 021c 	add.w	r2, r3, #28
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	68db      	ldr	r3, [r3, #12]
 8011f78:	4619      	mov	r1, r3
 8011f7a:	4610      	mov	r0, r2
 8011f7c:	f7fd fb24 	bl	800f5c8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	3316      	adds	r3, #22
 8011f84:	6939      	ldr	r1, [r7, #16]
 8011f86:	4618      	mov	r0, r3
 8011f88:	f7fd fb1e 	bl	800f5c8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	3312      	adds	r3, #18
 8011f90:	2100      	movs	r1, #0
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7fd fafd 	bl	800f592 <st_word>
					fs->wflag = 1;
 8011f98:	68bb      	ldr	r3, [r7, #8]
 8011f9a:	2201      	movs	r2, #1
 8011f9c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011f9e:	68bb      	ldr	r3, [r7, #8]
 8011fa0:	4618      	mov	r0, r3
 8011fa2:	f7fd fd99 	bl	800fad8 <sync_fs>
 8011fa6:	4603      	mov	r3, r0
 8011fa8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	7d1b      	ldrb	r3, [r3, #20]
 8011fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011fb2:	b2da      	uxtb	r2, r3
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3718      	adds	r7, #24
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011fc2:	b580      	push	{r7, lr}
 8011fc4:	b084      	sub	sp, #16
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7ff ff7b 	bl	8011ec6 <f_sync>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011fd4:	7bfb      	ldrb	r3, [r7, #15]
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d118      	bne.n	801200c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	f107 0208 	add.w	r2, r7, #8
 8011fe0:	4611      	mov	r1, r2
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7ff fbc0 	bl	8011768 <validate>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011fec:	7bfb      	ldrb	r3, [r7, #15]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d10c      	bne.n	801200c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	691b      	ldr	r3, [r3, #16]
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7fd fc9c 	bl	800f934 <dec_lock>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012000:	7bfb      	ldrb	r3, [r7, #15]
 8012002:	2b00      	cmp	r3, #0
 8012004:	d102      	bne.n	801200c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	2200      	movs	r2, #0
 801200a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801200c:	7bfb      	ldrb	r3, [r7, #15]
}
 801200e:	4618      	mov	r0, r3
 8012010:	3710      	adds	r7, #16
 8012012:	46bd      	mov	sp, r7
 8012014:	bd80      	pop	{r7, pc}

08012016 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012016:	b580      	push	{r7, lr}
 8012018:	b090      	sub	sp, #64	; 0x40
 801201a:	af00      	add	r7, sp, #0
 801201c:	6078      	str	r0, [r7, #4]
 801201e:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8012020:	f107 0108 	add.w	r1, r7, #8
 8012024:	1d3b      	adds	r3, r7, #4
 8012026:	2200      	movs	r2, #0
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff f94d 	bl	80112c8 <find_volume>
 801202e:	4603      	mov	r3, r0
 8012030:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8012034:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012038:	2b00      	cmp	r3, #0
 801203a:	d11f      	bne.n	801207c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 801203c:	687a      	ldr	r2, [r7, #4]
 801203e:	f107 0308 	add.w	r3, r7, #8
 8012042:	4611      	mov	r1, r2
 8012044:	4618      	mov	r0, r3
 8012046:	f7ff f833 	bl	80110b0 <follow_path>
 801204a:	4603      	mov	r3, r0
 801204c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8012050:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012054:	2b00      	cmp	r3, #0
 8012056:	d111      	bne.n	801207c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8012058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801205c:	b25b      	sxtb	r3, r3
 801205e:	2b00      	cmp	r3, #0
 8012060:	da03      	bge.n	801206a <f_stat+0x54>
				res = FR_INVALID_NAME;
 8012062:	2306      	movs	r3, #6
 8012064:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8012068:	e008      	b.n	801207c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d005      	beq.n	801207c <f_stat+0x66>
 8012070:	f107 0308 	add.w	r3, r7, #8
 8012074:	6839      	ldr	r1, [r7, #0]
 8012076:	4618      	mov	r0, r3
 8012078:	f7fe fd84 	bl	8010b84 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801207c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012080:	4618      	mov	r0, r3
 8012082:	3740      	adds	r7, #64	; 0x40
 8012084:	46bd      	mov	sp, r7
 8012086:	bd80      	pop	{r7, pc}

08012088 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012088:	b480      	push	{r7}
 801208a:	b087      	sub	sp, #28
 801208c:	af00      	add	r7, sp, #0
 801208e:	60f8      	str	r0, [r7, #12]
 8012090:	60b9      	str	r1, [r7, #8]
 8012092:	4613      	mov	r3, r2
 8012094:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012096:	2301      	movs	r3, #1
 8012098:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801209a:	2300      	movs	r3, #0
 801209c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801209e:	4b1f      	ldr	r3, [pc, #124]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120a0:	7a5b      	ldrb	r3, [r3, #9]
 80120a2:	b2db      	uxtb	r3, r3
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d131      	bne.n	801210c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80120a8:	4b1c      	ldr	r3, [pc, #112]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120aa:	7a5b      	ldrb	r3, [r3, #9]
 80120ac:	b2db      	uxtb	r3, r3
 80120ae:	461a      	mov	r2, r3
 80120b0:	4b1a      	ldr	r3, [pc, #104]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120b2:	2100      	movs	r1, #0
 80120b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80120b6:	4b19      	ldr	r3, [pc, #100]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120b8:	7a5b      	ldrb	r3, [r3, #9]
 80120ba:	b2db      	uxtb	r3, r3
 80120bc:	4a17      	ldr	r2, [pc, #92]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120be:	009b      	lsls	r3, r3, #2
 80120c0:	4413      	add	r3, r2
 80120c2:	68fa      	ldr	r2, [r7, #12]
 80120c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80120c6:	4b15      	ldr	r3, [pc, #84]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120c8:	7a5b      	ldrb	r3, [r3, #9]
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	461a      	mov	r2, r3
 80120ce:	4b13      	ldr	r3, [pc, #76]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120d0:	4413      	add	r3, r2
 80120d2:	79fa      	ldrb	r2, [r7, #7]
 80120d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80120d6:	4b11      	ldr	r3, [pc, #68]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120d8:	7a5b      	ldrb	r3, [r3, #9]
 80120da:	b2db      	uxtb	r3, r3
 80120dc:	1c5a      	adds	r2, r3, #1
 80120de:	b2d1      	uxtb	r1, r2
 80120e0:	4a0e      	ldr	r2, [pc, #56]	; (801211c <FATFS_LinkDriverEx+0x94>)
 80120e2:	7251      	strb	r1, [r2, #9]
 80120e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80120e6:	7dbb      	ldrb	r3, [r7, #22]
 80120e8:	3330      	adds	r3, #48	; 0x30
 80120ea:	b2da      	uxtb	r2, r3
 80120ec:	68bb      	ldr	r3, [r7, #8]
 80120ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80120f0:	68bb      	ldr	r3, [r7, #8]
 80120f2:	3301      	adds	r3, #1
 80120f4:	223a      	movs	r2, #58	; 0x3a
 80120f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	3302      	adds	r3, #2
 80120fc:	222f      	movs	r2, #47	; 0x2f
 80120fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	3303      	adds	r3, #3
 8012104:	2200      	movs	r2, #0
 8012106:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012108:	2300      	movs	r3, #0
 801210a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801210c:	7dfb      	ldrb	r3, [r7, #23]
}
 801210e:	4618      	mov	r0, r3
 8012110:	371c      	adds	r7, #28
 8012112:	46bd      	mov	sp, r7
 8012114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012118:	4770      	bx	lr
 801211a:	bf00      	nop
 801211c:	20001448 	.word	0x20001448

08012120 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b082      	sub	sp, #8
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801212a:	2200      	movs	r2, #0
 801212c:	6839      	ldr	r1, [r7, #0]
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff ffaa 	bl	8012088 <FATFS_LinkDriverEx>
 8012134:	4603      	mov	r3, r0
}
 8012136:	4618      	mov	r0, r3
 8012138:	3708      	adds	r7, #8
 801213a:	46bd      	mov	sp, r7
 801213c:	bd80      	pop	{r7, pc}
	...

08012140 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012140:	b480      	push	{r7}
 8012142:	b085      	sub	sp, #20
 8012144:	af00      	add	r7, sp, #0
 8012146:	4603      	mov	r3, r0
 8012148:	6039      	str	r1, [r7, #0]
 801214a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801214c:	88fb      	ldrh	r3, [r7, #6]
 801214e:	2b7f      	cmp	r3, #127	; 0x7f
 8012150:	d802      	bhi.n	8012158 <ff_convert+0x18>
		c = chr;
 8012152:	88fb      	ldrh	r3, [r7, #6]
 8012154:	81fb      	strh	r3, [r7, #14]
 8012156:	e025      	b.n	80121a4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00b      	beq.n	8012176 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801215e:	88fb      	ldrh	r3, [r7, #6]
 8012160:	2bff      	cmp	r3, #255	; 0xff
 8012162:	d805      	bhi.n	8012170 <ff_convert+0x30>
 8012164:	88fb      	ldrh	r3, [r7, #6]
 8012166:	3b80      	subs	r3, #128	; 0x80
 8012168:	4a12      	ldr	r2, [pc, #72]	; (80121b4 <ff_convert+0x74>)
 801216a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801216e:	e000      	b.n	8012172 <ff_convert+0x32>
 8012170:	2300      	movs	r3, #0
 8012172:	81fb      	strh	r3, [r7, #14]
 8012174:	e016      	b.n	80121a4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012176:	2300      	movs	r3, #0
 8012178:	81fb      	strh	r3, [r7, #14]
 801217a:	e009      	b.n	8012190 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 801217c:	89fb      	ldrh	r3, [r7, #14]
 801217e:	4a0d      	ldr	r2, [pc, #52]	; (80121b4 <ff_convert+0x74>)
 8012180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012184:	88fa      	ldrh	r2, [r7, #6]
 8012186:	429a      	cmp	r2, r3
 8012188:	d006      	beq.n	8012198 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801218a:	89fb      	ldrh	r3, [r7, #14]
 801218c:	3301      	adds	r3, #1
 801218e:	81fb      	strh	r3, [r7, #14]
 8012190:	89fb      	ldrh	r3, [r7, #14]
 8012192:	2b7f      	cmp	r3, #127	; 0x7f
 8012194:	d9f2      	bls.n	801217c <ff_convert+0x3c>
 8012196:	e000      	b.n	801219a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012198:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801219a:	89fb      	ldrh	r3, [r7, #14]
 801219c:	3380      	adds	r3, #128	; 0x80
 801219e:	b29b      	uxth	r3, r3
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80121a4:	89fb      	ldrh	r3, [r7, #14]
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	3714      	adds	r7, #20
 80121aa:	46bd      	mov	sp, r7
 80121ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b0:	4770      	bx	lr
 80121b2:	bf00      	nop
 80121b4:	08017aec 	.word	0x08017aec

080121b8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80121b8:	b480      	push	{r7}
 80121ba:	b087      	sub	sp, #28
 80121bc:	af00      	add	r7, sp, #0
 80121be:	4603      	mov	r3, r0
 80121c0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80121c2:	88fb      	ldrh	r3, [r7, #6]
 80121c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80121c8:	d201      	bcs.n	80121ce <ff_wtoupper+0x16>
 80121ca:	4b3e      	ldr	r3, [pc, #248]	; (80122c4 <ff_wtoupper+0x10c>)
 80121cc:	e000      	b.n	80121d0 <ff_wtoupper+0x18>
 80121ce:	4b3e      	ldr	r3, [pc, #248]	; (80122c8 <ff_wtoupper+0x110>)
 80121d0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80121d2:	697b      	ldr	r3, [r7, #20]
 80121d4:	1c9a      	adds	r2, r3, #2
 80121d6:	617a      	str	r2, [r7, #20]
 80121d8:	881b      	ldrh	r3, [r3, #0]
 80121da:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80121dc:	8a7b      	ldrh	r3, [r7, #18]
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d068      	beq.n	80122b4 <ff_wtoupper+0xfc>
 80121e2:	88fa      	ldrh	r2, [r7, #6]
 80121e4:	8a7b      	ldrh	r3, [r7, #18]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d364      	bcc.n	80122b4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	1c9a      	adds	r2, r3, #2
 80121ee:	617a      	str	r2, [r7, #20]
 80121f0:	881b      	ldrh	r3, [r3, #0]
 80121f2:	823b      	strh	r3, [r7, #16]
 80121f4:	8a3b      	ldrh	r3, [r7, #16]
 80121f6:	0a1b      	lsrs	r3, r3, #8
 80121f8:	81fb      	strh	r3, [r7, #14]
 80121fa:	8a3b      	ldrh	r3, [r7, #16]
 80121fc:	b2db      	uxtb	r3, r3
 80121fe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012200:	88fa      	ldrh	r2, [r7, #6]
 8012202:	8a79      	ldrh	r1, [r7, #18]
 8012204:	8a3b      	ldrh	r3, [r7, #16]
 8012206:	440b      	add	r3, r1
 8012208:	429a      	cmp	r2, r3
 801220a:	da49      	bge.n	80122a0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801220c:	89fb      	ldrh	r3, [r7, #14]
 801220e:	2b08      	cmp	r3, #8
 8012210:	d84f      	bhi.n	80122b2 <ff_wtoupper+0xfa>
 8012212:	a201      	add	r2, pc, #4	; (adr r2, 8012218 <ff_wtoupper+0x60>)
 8012214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012218:	0801223d 	.word	0x0801223d
 801221c:	0801224f 	.word	0x0801224f
 8012220:	08012265 	.word	0x08012265
 8012224:	0801226d 	.word	0x0801226d
 8012228:	08012275 	.word	0x08012275
 801222c:	0801227d 	.word	0x0801227d
 8012230:	08012285 	.word	0x08012285
 8012234:	0801228d 	.word	0x0801228d
 8012238:	08012295 	.word	0x08012295
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801223c:	88fa      	ldrh	r2, [r7, #6]
 801223e:	8a7b      	ldrh	r3, [r7, #18]
 8012240:	1ad3      	subs	r3, r2, r3
 8012242:	005b      	lsls	r3, r3, #1
 8012244:	697a      	ldr	r2, [r7, #20]
 8012246:	4413      	add	r3, r2
 8012248:	881b      	ldrh	r3, [r3, #0]
 801224a:	80fb      	strh	r3, [r7, #6]
 801224c:	e027      	b.n	801229e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801224e:	88fa      	ldrh	r2, [r7, #6]
 8012250:	8a7b      	ldrh	r3, [r7, #18]
 8012252:	1ad3      	subs	r3, r2, r3
 8012254:	b29b      	uxth	r3, r3
 8012256:	f003 0301 	and.w	r3, r3, #1
 801225a:	b29b      	uxth	r3, r3
 801225c:	88fa      	ldrh	r2, [r7, #6]
 801225e:	1ad3      	subs	r3, r2, r3
 8012260:	80fb      	strh	r3, [r7, #6]
 8012262:	e01c      	b.n	801229e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012264:	88fb      	ldrh	r3, [r7, #6]
 8012266:	3b10      	subs	r3, #16
 8012268:	80fb      	strh	r3, [r7, #6]
 801226a:	e018      	b.n	801229e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 801226c:	88fb      	ldrh	r3, [r7, #6]
 801226e:	3b20      	subs	r3, #32
 8012270:	80fb      	strh	r3, [r7, #6]
 8012272:	e014      	b.n	801229e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012274:	88fb      	ldrh	r3, [r7, #6]
 8012276:	3b30      	subs	r3, #48	; 0x30
 8012278:	80fb      	strh	r3, [r7, #6]
 801227a:	e010      	b.n	801229e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 801227c:	88fb      	ldrh	r3, [r7, #6]
 801227e:	3b1a      	subs	r3, #26
 8012280:	80fb      	strh	r3, [r7, #6]
 8012282:	e00c      	b.n	801229e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012284:	88fb      	ldrh	r3, [r7, #6]
 8012286:	3308      	adds	r3, #8
 8012288:	80fb      	strh	r3, [r7, #6]
 801228a:	e008      	b.n	801229e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801228c:	88fb      	ldrh	r3, [r7, #6]
 801228e:	3b50      	subs	r3, #80	; 0x50
 8012290:	80fb      	strh	r3, [r7, #6]
 8012292:	e004      	b.n	801229e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012294:	88fb      	ldrh	r3, [r7, #6]
 8012296:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801229a:	80fb      	strh	r3, [r7, #6]
 801229c:	bf00      	nop
			}
			break;
 801229e:	e008      	b.n	80122b2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80122a0:	89fb      	ldrh	r3, [r7, #14]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d195      	bne.n	80121d2 <ff_wtoupper+0x1a>
 80122a6:	8a3b      	ldrh	r3, [r7, #16]
 80122a8:	005b      	lsls	r3, r3, #1
 80122aa:	697a      	ldr	r2, [r7, #20]
 80122ac:	4413      	add	r3, r2
 80122ae:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80122b0:	e78f      	b.n	80121d2 <ff_wtoupper+0x1a>
			break;
 80122b2:	bf00      	nop
	}

	return chr;
 80122b4:	88fb      	ldrh	r3, [r7, #6]
}
 80122b6:	4618      	mov	r0, r3
 80122b8:	371c      	adds	r7, #28
 80122ba:	46bd      	mov	sp, r7
 80122bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c0:	4770      	bx	lr
 80122c2:	bf00      	nop
 80122c4:	08017bec 	.word	0x08017bec
 80122c8:	08017de0 	.word	0x08017de0

080122cc <atof>:
 80122cc:	2100      	movs	r1, #0
 80122ce:	f000 be13 	b.w	8012ef8 <strtod>

080122d2 <atoi>:
 80122d2:	220a      	movs	r2, #10
 80122d4:	2100      	movs	r1, #0
 80122d6:	f000 be9d 	b.w	8013014 <strtol>

080122da <sulp>:
 80122da:	b570      	push	{r4, r5, r6, lr}
 80122dc:	4604      	mov	r4, r0
 80122de:	460d      	mov	r5, r1
 80122e0:	ec45 4b10 	vmov	d0, r4, r5
 80122e4:	4616      	mov	r6, r2
 80122e6:	f003 fc33 	bl	8015b50 <__ulp>
 80122ea:	ec51 0b10 	vmov	r0, r1, d0
 80122ee:	b17e      	cbz	r6, 8012310 <sulp+0x36>
 80122f0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80122f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	dd09      	ble.n	8012310 <sulp+0x36>
 80122fc:	051b      	lsls	r3, r3, #20
 80122fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012302:	2400      	movs	r4, #0
 8012304:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012308:	4622      	mov	r2, r4
 801230a:	462b      	mov	r3, r5
 801230c:	f7ee f974 	bl	80005f8 <__aeabi_dmul>
 8012310:	bd70      	pop	{r4, r5, r6, pc}
 8012312:	0000      	movs	r0, r0
 8012314:	0000      	movs	r0, r0
	...

08012318 <_strtod_l>:
 8012318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801231c:	ed2d 8b02 	vpush	{d8}
 8012320:	b09b      	sub	sp, #108	; 0x6c
 8012322:	4604      	mov	r4, r0
 8012324:	9213      	str	r2, [sp, #76]	; 0x4c
 8012326:	2200      	movs	r2, #0
 8012328:	9216      	str	r2, [sp, #88]	; 0x58
 801232a:	460d      	mov	r5, r1
 801232c:	f04f 0800 	mov.w	r8, #0
 8012330:	f04f 0900 	mov.w	r9, #0
 8012334:	460a      	mov	r2, r1
 8012336:	9215      	str	r2, [sp, #84]	; 0x54
 8012338:	7811      	ldrb	r1, [r2, #0]
 801233a:	292b      	cmp	r1, #43	; 0x2b
 801233c:	d04c      	beq.n	80123d8 <_strtod_l+0xc0>
 801233e:	d83a      	bhi.n	80123b6 <_strtod_l+0x9e>
 8012340:	290d      	cmp	r1, #13
 8012342:	d834      	bhi.n	80123ae <_strtod_l+0x96>
 8012344:	2908      	cmp	r1, #8
 8012346:	d834      	bhi.n	80123b2 <_strtod_l+0x9a>
 8012348:	2900      	cmp	r1, #0
 801234a:	d03d      	beq.n	80123c8 <_strtod_l+0xb0>
 801234c:	2200      	movs	r2, #0
 801234e:	920a      	str	r2, [sp, #40]	; 0x28
 8012350:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8012352:	7832      	ldrb	r2, [r6, #0]
 8012354:	2a30      	cmp	r2, #48	; 0x30
 8012356:	f040 80b4 	bne.w	80124c2 <_strtod_l+0x1aa>
 801235a:	7872      	ldrb	r2, [r6, #1]
 801235c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012360:	2a58      	cmp	r2, #88	; 0x58
 8012362:	d170      	bne.n	8012446 <_strtod_l+0x12e>
 8012364:	9302      	str	r3, [sp, #8]
 8012366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012368:	9301      	str	r3, [sp, #4]
 801236a:	ab16      	add	r3, sp, #88	; 0x58
 801236c:	9300      	str	r3, [sp, #0]
 801236e:	4a8e      	ldr	r2, [pc, #568]	; (80125a8 <_strtod_l+0x290>)
 8012370:	ab17      	add	r3, sp, #92	; 0x5c
 8012372:	a915      	add	r1, sp, #84	; 0x54
 8012374:	4620      	mov	r0, r4
 8012376:	f002 fcc9 	bl	8014d0c <__gethex>
 801237a:	f010 070f 	ands.w	r7, r0, #15
 801237e:	4605      	mov	r5, r0
 8012380:	d005      	beq.n	801238e <_strtod_l+0x76>
 8012382:	2f06      	cmp	r7, #6
 8012384:	d12a      	bne.n	80123dc <_strtod_l+0xc4>
 8012386:	3601      	adds	r6, #1
 8012388:	2300      	movs	r3, #0
 801238a:	9615      	str	r6, [sp, #84]	; 0x54
 801238c:	930a      	str	r3, [sp, #40]	; 0x28
 801238e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012390:	2b00      	cmp	r3, #0
 8012392:	f040 857f 	bne.w	8012e94 <_strtod_l+0xb7c>
 8012396:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012398:	b1db      	cbz	r3, 80123d2 <_strtod_l+0xba>
 801239a:	4642      	mov	r2, r8
 801239c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80123a0:	ec43 2b10 	vmov	d0, r2, r3
 80123a4:	b01b      	add	sp, #108	; 0x6c
 80123a6:	ecbd 8b02 	vpop	{d8}
 80123aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ae:	2920      	cmp	r1, #32
 80123b0:	d1cc      	bne.n	801234c <_strtod_l+0x34>
 80123b2:	3201      	adds	r2, #1
 80123b4:	e7bf      	b.n	8012336 <_strtod_l+0x1e>
 80123b6:	292d      	cmp	r1, #45	; 0x2d
 80123b8:	d1c8      	bne.n	801234c <_strtod_l+0x34>
 80123ba:	2101      	movs	r1, #1
 80123bc:	910a      	str	r1, [sp, #40]	; 0x28
 80123be:	1c51      	adds	r1, r2, #1
 80123c0:	9115      	str	r1, [sp, #84]	; 0x54
 80123c2:	7852      	ldrb	r2, [r2, #1]
 80123c4:	2a00      	cmp	r2, #0
 80123c6:	d1c3      	bne.n	8012350 <_strtod_l+0x38>
 80123c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80123ca:	9515      	str	r5, [sp, #84]	; 0x54
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	f040 855f 	bne.w	8012e90 <_strtod_l+0xb78>
 80123d2:	4642      	mov	r2, r8
 80123d4:	464b      	mov	r3, r9
 80123d6:	e7e3      	b.n	80123a0 <_strtod_l+0x88>
 80123d8:	2100      	movs	r1, #0
 80123da:	e7ef      	b.n	80123bc <_strtod_l+0xa4>
 80123dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80123de:	b13a      	cbz	r2, 80123f0 <_strtod_l+0xd8>
 80123e0:	2135      	movs	r1, #53	; 0x35
 80123e2:	a818      	add	r0, sp, #96	; 0x60
 80123e4:	f003 fcb1 	bl	8015d4a <__copybits>
 80123e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80123ea:	4620      	mov	r0, r4
 80123ec:	f003 f884 	bl	80154f8 <_Bfree>
 80123f0:	3f01      	subs	r7, #1
 80123f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80123f4:	2f04      	cmp	r7, #4
 80123f6:	d806      	bhi.n	8012406 <_strtod_l+0xee>
 80123f8:	e8df f007 	tbb	[pc, r7]
 80123fc:	201d0314 	.word	0x201d0314
 8012400:	14          	.byte	0x14
 8012401:	00          	.byte	0x00
 8012402:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8012406:	05e9      	lsls	r1, r5, #23
 8012408:	bf48      	it	mi
 801240a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801240e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012412:	0d1b      	lsrs	r3, r3, #20
 8012414:	051b      	lsls	r3, r3, #20
 8012416:	2b00      	cmp	r3, #0
 8012418:	d1b9      	bne.n	801238e <_strtod_l+0x76>
 801241a:	f001 fd03 	bl	8013e24 <__errno>
 801241e:	2322      	movs	r3, #34	; 0x22
 8012420:	6003      	str	r3, [r0, #0]
 8012422:	e7b4      	b.n	801238e <_strtod_l+0x76>
 8012424:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8012428:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801242c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012430:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8012434:	e7e7      	b.n	8012406 <_strtod_l+0xee>
 8012436:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80125b0 <_strtod_l+0x298>
 801243a:	e7e4      	b.n	8012406 <_strtod_l+0xee>
 801243c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8012440:	f04f 38ff 	mov.w	r8, #4294967295
 8012444:	e7df      	b.n	8012406 <_strtod_l+0xee>
 8012446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012448:	1c5a      	adds	r2, r3, #1
 801244a:	9215      	str	r2, [sp, #84]	; 0x54
 801244c:	785b      	ldrb	r3, [r3, #1]
 801244e:	2b30      	cmp	r3, #48	; 0x30
 8012450:	d0f9      	beq.n	8012446 <_strtod_l+0x12e>
 8012452:	2b00      	cmp	r3, #0
 8012454:	d09b      	beq.n	801238e <_strtod_l+0x76>
 8012456:	2301      	movs	r3, #1
 8012458:	f04f 0a00 	mov.w	sl, #0
 801245c:	9304      	str	r3, [sp, #16]
 801245e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012460:	930b      	str	r3, [sp, #44]	; 0x2c
 8012462:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8012466:	46d3      	mov	fp, sl
 8012468:	220a      	movs	r2, #10
 801246a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801246c:	7806      	ldrb	r6, [r0, #0]
 801246e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8012472:	b2d9      	uxtb	r1, r3
 8012474:	2909      	cmp	r1, #9
 8012476:	d926      	bls.n	80124c6 <_strtod_l+0x1ae>
 8012478:	494c      	ldr	r1, [pc, #304]	; (80125ac <_strtod_l+0x294>)
 801247a:	2201      	movs	r2, #1
 801247c:	f001 fc6a 	bl	8013d54 <strncmp>
 8012480:	2800      	cmp	r0, #0
 8012482:	d030      	beq.n	80124e6 <_strtod_l+0x1ce>
 8012484:	2000      	movs	r0, #0
 8012486:	4632      	mov	r2, r6
 8012488:	9005      	str	r0, [sp, #20]
 801248a:	465e      	mov	r6, fp
 801248c:	4603      	mov	r3, r0
 801248e:	2a65      	cmp	r2, #101	; 0x65
 8012490:	d001      	beq.n	8012496 <_strtod_l+0x17e>
 8012492:	2a45      	cmp	r2, #69	; 0x45
 8012494:	d113      	bne.n	80124be <_strtod_l+0x1a6>
 8012496:	b91e      	cbnz	r6, 80124a0 <_strtod_l+0x188>
 8012498:	9a04      	ldr	r2, [sp, #16]
 801249a:	4302      	orrs	r2, r0
 801249c:	d094      	beq.n	80123c8 <_strtod_l+0xb0>
 801249e:	2600      	movs	r6, #0
 80124a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80124a2:	1c6a      	adds	r2, r5, #1
 80124a4:	9215      	str	r2, [sp, #84]	; 0x54
 80124a6:	786a      	ldrb	r2, [r5, #1]
 80124a8:	2a2b      	cmp	r2, #43	; 0x2b
 80124aa:	d074      	beq.n	8012596 <_strtod_l+0x27e>
 80124ac:	2a2d      	cmp	r2, #45	; 0x2d
 80124ae:	d078      	beq.n	80125a2 <_strtod_l+0x28a>
 80124b0:	f04f 0c00 	mov.w	ip, #0
 80124b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80124b8:	2909      	cmp	r1, #9
 80124ba:	d97f      	bls.n	80125bc <_strtod_l+0x2a4>
 80124bc:	9515      	str	r5, [sp, #84]	; 0x54
 80124be:	2700      	movs	r7, #0
 80124c0:	e09e      	b.n	8012600 <_strtod_l+0x2e8>
 80124c2:	2300      	movs	r3, #0
 80124c4:	e7c8      	b.n	8012458 <_strtod_l+0x140>
 80124c6:	f1bb 0f08 	cmp.w	fp, #8
 80124ca:	bfd8      	it	le
 80124cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80124ce:	f100 0001 	add.w	r0, r0, #1
 80124d2:	bfda      	itte	le
 80124d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80124d8:	9309      	strle	r3, [sp, #36]	; 0x24
 80124da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80124de:	f10b 0b01 	add.w	fp, fp, #1
 80124e2:	9015      	str	r0, [sp, #84]	; 0x54
 80124e4:	e7c1      	b.n	801246a <_strtod_l+0x152>
 80124e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80124e8:	1c5a      	adds	r2, r3, #1
 80124ea:	9215      	str	r2, [sp, #84]	; 0x54
 80124ec:	785a      	ldrb	r2, [r3, #1]
 80124ee:	f1bb 0f00 	cmp.w	fp, #0
 80124f2:	d037      	beq.n	8012564 <_strtod_l+0x24c>
 80124f4:	9005      	str	r0, [sp, #20]
 80124f6:	465e      	mov	r6, fp
 80124f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80124fc:	2b09      	cmp	r3, #9
 80124fe:	d912      	bls.n	8012526 <_strtod_l+0x20e>
 8012500:	2301      	movs	r3, #1
 8012502:	e7c4      	b.n	801248e <_strtod_l+0x176>
 8012504:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012506:	1c5a      	adds	r2, r3, #1
 8012508:	9215      	str	r2, [sp, #84]	; 0x54
 801250a:	785a      	ldrb	r2, [r3, #1]
 801250c:	3001      	adds	r0, #1
 801250e:	2a30      	cmp	r2, #48	; 0x30
 8012510:	d0f8      	beq.n	8012504 <_strtod_l+0x1ec>
 8012512:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8012516:	2b08      	cmp	r3, #8
 8012518:	f200 84c1 	bhi.w	8012e9e <_strtod_l+0xb86>
 801251c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801251e:	9005      	str	r0, [sp, #20]
 8012520:	2000      	movs	r0, #0
 8012522:	930b      	str	r3, [sp, #44]	; 0x2c
 8012524:	4606      	mov	r6, r0
 8012526:	3a30      	subs	r2, #48	; 0x30
 8012528:	f100 0301 	add.w	r3, r0, #1
 801252c:	d014      	beq.n	8012558 <_strtod_l+0x240>
 801252e:	9905      	ldr	r1, [sp, #20]
 8012530:	4419      	add	r1, r3
 8012532:	9105      	str	r1, [sp, #20]
 8012534:	4633      	mov	r3, r6
 8012536:	eb00 0c06 	add.w	ip, r0, r6
 801253a:	210a      	movs	r1, #10
 801253c:	4563      	cmp	r3, ip
 801253e:	d113      	bne.n	8012568 <_strtod_l+0x250>
 8012540:	1833      	adds	r3, r6, r0
 8012542:	2b08      	cmp	r3, #8
 8012544:	f106 0601 	add.w	r6, r6, #1
 8012548:	4406      	add	r6, r0
 801254a:	dc1a      	bgt.n	8012582 <_strtod_l+0x26a>
 801254c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801254e:	230a      	movs	r3, #10
 8012550:	fb03 2301 	mla	r3, r3, r1, r2
 8012554:	9309      	str	r3, [sp, #36]	; 0x24
 8012556:	2300      	movs	r3, #0
 8012558:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801255a:	1c51      	adds	r1, r2, #1
 801255c:	9115      	str	r1, [sp, #84]	; 0x54
 801255e:	7852      	ldrb	r2, [r2, #1]
 8012560:	4618      	mov	r0, r3
 8012562:	e7c9      	b.n	80124f8 <_strtod_l+0x1e0>
 8012564:	4658      	mov	r0, fp
 8012566:	e7d2      	b.n	801250e <_strtod_l+0x1f6>
 8012568:	2b08      	cmp	r3, #8
 801256a:	f103 0301 	add.w	r3, r3, #1
 801256e:	dc03      	bgt.n	8012578 <_strtod_l+0x260>
 8012570:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012572:	434f      	muls	r7, r1
 8012574:	9709      	str	r7, [sp, #36]	; 0x24
 8012576:	e7e1      	b.n	801253c <_strtod_l+0x224>
 8012578:	2b10      	cmp	r3, #16
 801257a:	bfd8      	it	le
 801257c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012580:	e7dc      	b.n	801253c <_strtod_l+0x224>
 8012582:	2e10      	cmp	r6, #16
 8012584:	bfdc      	itt	le
 8012586:	230a      	movle	r3, #10
 8012588:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801258c:	e7e3      	b.n	8012556 <_strtod_l+0x23e>
 801258e:	2300      	movs	r3, #0
 8012590:	9305      	str	r3, [sp, #20]
 8012592:	2301      	movs	r3, #1
 8012594:	e780      	b.n	8012498 <_strtod_l+0x180>
 8012596:	f04f 0c00 	mov.w	ip, #0
 801259a:	1caa      	adds	r2, r5, #2
 801259c:	9215      	str	r2, [sp, #84]	; 0x54
 801259e:	78aa      	ldrb	r2, [r5, #2]
 80125a0:	e788      	b.n	80124b4 <_strtod_l+0x19c>
 80125a2:	f04f 0c01 	mov.w	ip, #1
 80125a6:	e7f8      	b.n	801259a <_strtod_l+0x282>
 80125a8:	08017ea0 	.word	0x08017ea0
 80125ac:	08017e9c 	.word	0x08017e9c
 80125b0:	7ff00000 	.word	0x7ff00000
 80125b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80125b6:	1c51      	adds	r1, r2, #1
 80125b8:	9115      	str	r1, [sp, #84]	; 0x54
 80125ba:	7852      	ldrb	r2, [r2, #1]
 80125bc:	2a30      	cmp	r2, #48	; 0x30
 80125be:	d0f9      	beq.n	80125b4 <_strtod_l+0x29c>
 80125c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80125c4:	2908      	cmp	r1, #8
 80125c6:	f63f af7a 	bhi.w	80124be <_strtod_l+0x1a6>
 80125ca:	3a30      	subs	r2, #48	; 0x30
 80125cc:	9208      	str	r2, [sp, #32]
 80125ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80125d0:	920c      	str	r2, [sp, #48]	; 0x30
 80125d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80125d4:	1c57      	adds	r7, r2, #1
 80125d6:	9715      	str	r7, [sp, #84]	; 0x54
 80125d8:	7852      	ldrb	r2, [r2, #1]
 80125da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80125de:	f1be 0f09 	cmp.w	lr, #9
 80125e2:	d938      	bls.n	8012656 <_strtod_l+0x33e>
 80125e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80125e6:	1a7f      	subs	r7, r7, r1
 80125e8:	2f08      	cmp	r7, #8
 80125ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80125ee:	dc03      	bgt.n	80125f8 <_strtod_l+0x2e0>
 80125f0:	9908      	ldr	r1, [sp, #32]
 80125f2:	428f      	cmp	r7, r1
 80125f4:	bfa8      	it	ge
 80125f6:	460f      	movge	r7, r1
 80125f8:	f1bc 0f00 	cmp.w	ip, #0
 80125fc:	d000      	beq.n	8012600 <_strtod_l+0x2e8>
 80125fe:	427f      	negs	r7, r7
 8012600:	2e00      	cmp	r6, #0
 8012602:	d14f      	bne.n	80126a4 <_strtod_l+0x38c>
 8012604:	9904      	ldr	r1, [sp, #16]
 8012606:	4301      	orrs	r1, r0
 8012608:	f47f aec1 	bne.w	801238e <_strtod_l+0x76>
 801260c:	2b00      	cmp	r3, #0
 801260e:	f47f aedb 	bne.w	80123c8 <_strtod_l+0xb0>
 8012612:	2a69      	cmp	r2, #105	; 0x69
 8012614:	d029      	beq.n	801266a <_strtod_l+0x352>
 8012616:	dc26      	bgt.n	8012666 <_strtod_l+0x34e>
 8012618:	2a49      	cmp	r2, #73	; 0x49
 801261a:	d026      	beq.n	801266a <_strtod_l+0x352>
 801261c:	2a4e      	cmp	r2, #78	; 0x4e
 801261e:	f47f aed3 	bne.w	80123c8 <_strtod_l+0xb0>
 8012622:	499b      	ldr	r1, [pc, #620]	; (8012890 <_strtod_l+0x578>)
 8012624:	a815      	add	r0, sp, #84	; 0x54
 8012626:	f002 fdb1 	bl	801518c <__match>
 801262a:	2800      	cmp	r0, #0
 801262c:	f43f aecc 	beq.w	80123c8 <_strtod_l+0xb0>
 8012630:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012632:	781b      	ldrb	r3, [r3, #0]
 8012634:	2b28      	cmp	r3, #40	; 0x28
 8012636:	d12f      	bne.n	8012698 <_strtod_l+0x380>
 8012638:	4996      	ldr	r1, [pc, #600]	; (8012894 <_strtod_l+0x57c>)
 801263a:	aa18      	add	r2, sp, #96	; 0x60
 801263c:	a815      	add	r0, sp, #84	; 0x54
 801263e:	f002 fdb9 	bl	80151b4 <__hexnan>
 8012642:	2805      	cmp	r0, #5
 8012644:	d128      	bne.n	8012698 <_strtod_l+0x380>
 8012646:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012648:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801264c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012650:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8012654:	e69b      	b.n	801238e <_strtod_l+0x76>
 8012656:	9f08      	ldr	r7, [sp, #32]
 8012658:	210a      	movs	r1, #10
 801265a:	fb01 2107 	mla	r1, r1, r7, r2
 801265e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8012662:	9208      	str	r2, [sp, #32]
 8012664:	e7b5      	b.n	80125d2 <_strtod_l+0x2ba>
 8012666:	2a6e      	cmp	r2, #110	; 0x6e
 8012668:	e7d9      	b.n	801261e <_strtod_l+0x306>
 801266a:	498b      	ldr	r1, [pc, #556]	; (8012898 <_strtod_l+0x580>)
 801266c:	a815      	add	r0, sp, #84	; 0x54
 801266e:	f002 fd8d 	bl	801518c <__match>
 8012672:	2800      	cmp	r0, #0
 8012674:	f43f aea8 	beq.w	80123c8 <_strtod_l+0xb0>
 8012678:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801267a:	4988      	ldr	r1, [pc, #544]	; (801289c <_strtod_l+0x584>)
 801267c:	3b01      	subs	r3, #1
 801267e:	a815      	add	r0, sp, #84	; 0x54
 8012680:	9315      	str	r3, [sp, #84]	; 0x54
 8012682:	f002 fd83 	bl	801518c <__match>
 8012686:	b910      	cbnz	r0, 801268e <_strtod_l+0x376>
 8012688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801268a:	3301      	adds	r3, #1
 801268c:	9315      	str	r3, [sp, #84]	; 0x54
 801268e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80128ac <_strtod_l+0x594>
 8012692:	f04f 0800 	mov.w	r8, #0
 8012696:	e67a      	b.n	801238e <_strtod_l+0x76>
 8012698:	4881      	ldr	r0, [pc, #516]	; (80128a0 <_strtod_l+0x588>)
 801269a:	f001 fc01 	bl	8013ea0 <nan>
 801269e:	ec59 8b10 	vmov	r8, r9, d0
 80126a2:	e674      	b.n	801238e <_strtod_l+0x76>
 80126a4:	9b05      	ldr	r3, [sp, #20]
 80126a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80126a8:	1afb      	subs	r3, r7, r3
 80126aa:	f1bb 0f00 	cmp.w	fp, #0
 80126ae:	bf08      	it	eq
 80126b0:	46b3      	moveq	fp, r6
 80126b2:	2e10      	cmp	r6, #16
 80126b4:	9308      	str	r3, [sp, #32]
 80126b6:	4635      	mov	r5, r6
 80126b8:	bfa8      	it	ge
 80126ba:	2510      	movge	r5, #16
 80126bc:	f7ed ff22 	bl	8000504 <__aeabi_ui2d>
 80126c0:	2e09      	cmp	r6, #9
 80126c2:	4680      	mov	r8, r0
 80126c4:	4689      	mov	r9, r1
 80126c6:	dd13      	ble.n	80126f0 <_strtod_l+0x3d8>
 80126c8:	4b76      	ldr	r3, [pc, #472]	; (80128a4 <_strtod_l+0x58c>)
 80126ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80126ce:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80126d2:	f7ed ff91 	bl	80005f8 <__aeabi_dmul>
 80126d6:	4680      	mov	r8, r0
 80126d8:	4650      	mov	r0, sl
 80126da:	4689      	mov	r9, r1
 80126dc:	f7ed ff12 	bl	8000504 <__aeabi_ui2d>
 80126e0:	4602      	mov	r2, r0
 80126e2:	460b      	mov	r3, r1
 80126e4:	4640      	mov	r0, r8
 80126e6:	4649      	mov	r1, r9
 80126e8:	f7ed fdd0 	bl	800028c <__adddf3>
 80126ec:	4680      	mov	r8, r0
 80126ee:	4689      	mov	r9, r1
 80126f0:	2e0f      	cmp	r6, #15
 80126f2:	dc38      	bgt.n	8012766 <_strtod_l+0x44e>
 80126f4:	9b08      	ldr	r3, [sp, #32]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	f43f ae49 	beq.w	801238e <_strtod_l+0x76>
 80126fc:	dd24      	ble.n	8012748 <_strtod_l+0x430>
 80126fe:	2b16      	cmp	r3, #22
 8012700:	dc0b      	bgt.n	801271a <_strtod_l+0x402>
 8012702:	4968      	ldr	r1, [pc, #416]	; (80128a4 <_strtod_l+0x58c>)
 8012704:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012708:	e9d1 0100 	ldrd	r0, r1, [r1]
 801270c:	4642      	mov	r2, r8
 801270e:	464b      	mov	r3, r9
 8012710:	f7ed ff72 	bl	80005f8 <__aeabi_dmul>
 8012714:	4680      	mov	r8, r0
 8012716:	4689      	mov	r9, r1
 8012718:	e639      	b.n	801238e <_strtod_l+0x76>
 801271a:	9a08      	ldr	r2, [sp, #32]
 801271c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8012720:	4293      	cmp	r3, r2
 8012722:	db20      	blt.n	8012766 <_strtod_l+0x44e>
 8012724:	4c5f      	ldr	r4, [pc, #380]	; (80128a4 <_strtod_l+0x58c>)
 8012726:	f1c6 060f 	rsb	r6, r6, #15
 801272a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 801272e:	4642      	mov	r2, r8
 8012730:	464b      	mov	r3, r9
 8012732:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012736:	f7ed ff5f 	bl	80005f8 <__aeabi_dmul>
 801273a:	9b08      	ldr	r3, [sp, #32]
 801273c:	1b9e      	subs	r6, r3, r6
 801273e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8012742:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012746:	e7e3      	b.n	8012710 <_strtod_l+0x3f8>
 8012748:	9b08      	ldr	r3, [sp, #32]
 801274a:	3316      	adds	r3, #22
 801274c:	db0b      	blt.n	8012766 <_strtod_l+0x44e>
 801274e:	9b05      	ldr	r3, [sp, #20]
 8012750:	1bdf      	subs	r7, r3, r7
 8012752:	4b54      	ldr	r3, [pc, #336]	; (80128a4 <_strtod_l+0x58c>)
 8012754:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012758:	e9d7 2300 	ldrd	r2, r3, [r7]
 801275c:	4640      	mov	r0, r8
 801275e:	4649      	mov	r1, r9
 8012760:	f7ee f874 	bl	800084c <__aeabi_ddiv>
 8012764:	e7d6      	b.n	8012714 <_strtod_l+0x3fc>
 8012766:	9b08      	ldr	r3, [sp, #32]
 8012768:	1b75      	subs	r5, r6, r5
 801276a:	441d      	add	r5, r3
 801276c:	2d00      	cmp	r5, #0
 801276e:	dd70      	ble.n	8012852 <_strtod_l+0x53a>
 8012770:	f015 030f 	ands.w	r3, r5, #15
 8012774:	d00a      	beq.n	801278c <_strtod_l+0x474>
 8012776:	494b      	ldr	r1, [pc, #300]	; (80128a4 <_strtod_l+0x58c>)
 8012778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801277c:	4642      	mov	r2, r8
 801277e:	464b      	mov	r3, r9
 8012780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012784:	f7ed ff38 	bl	80005f8 <__aeabi_dmul>
 8012788:	4680      	mov	r8, r0
 801278a:	4689      	mov	r9, r1
 801278c:	f035 050f 	bics.w	r5, r5, #15
 8012790:	d04d      	beq.n	801282e <_strtod_l+0x516>
 8012792:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8012796:	dd22      	ble.n	80127de <_strtod_l+0x4c6>
 8012798:	2500      	movs	r5, #0
 801279a:	46ab      	mov	fp, r5
 801279c:	9509      	str	r5, [sp, #36]	; 0x24
 801279e:	9505      	str	r5, [sp, #20]
 80127a0:	2322      	movs	r3, #34	; 0x22
 80127a2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80128ac <_strtod_l+0x594>
 80127a6:	6023      	str	r3, [r4, #0]
 80127a8:	f04f 0800 	mov.w	r8, #0
 80127ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	f43f aded 	beq.w	801238e <_strtod_l+0x76>
 80127b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80127b6:	4620      	mov	r0, r4
 80127b8:	f002 fe9e 	bl	80154f8 <_Bfree>
 80127bc:	9905      	ldr	r1, [sp, #20]
 80127be:	4620      	mov	r0, r4
 80127c0:	f002 fe9a 	bl	80154f8 <_Bfree>
 80127c4:	4659      	mov	r1, fp
 80127c6:	4620      	mov	r0, r4
 80127c8:	f002 fe96 	bl	80154f8 <_Bfree>
 80127cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80127ce:	4620      	mov	r0, r4
 80127d0:	f002 fe92 	bl	80154f8 <_Bfree>
 80127d4:	4629      	mov	r1, r5
 80127d6:	4620      	mov	r0, r4
 80127d8:	f002 fe8e 	bl	80154f8 <_Bfree>
 80127dc:	e5d7      	b.n	801238e <_strtod_l+0x76>
 80127de:	4b32      	ldr	r3, [pc, #200]	; (80128a8 <_strtod_l+0x590>)
 80127e0:	9304      	str	r3, [sp, #16]
 80127e2:	2300      	movs	r3, #0
 80127e4:	112d      	asrs	r5, r5, #4
 80127e6:	4640      	mov	r0, r8
 80127e8:	4649      	mov	r1, r9
 80127ea:	469a      	mov	sl, r3
 80127ec:	2d01      	cmp	r5, #1
 80127ee:	dc21      	bgt.n	8012834 <_strtod_l+0x51c>
 80127f0:	b10b      	cbz	r3, 80127f6 <_strtod_l+0x4de>
 80127f2:	4680      	mov	r8, r0
 80127f4:	4689      	mov	r9, r1
 80127f6:	492c      	ldr	r1, [pc, #176]	; (80128a8 <_strtod_l+0x590>)
 80127f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80127fc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8012800:	4642      	mov	r2, r8
 8012802:	464b      	mov	r3, r9
 8012804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012808:	f7ed fef6 	bl	80005f8 <__aeabi_dmul>
 801280c:	4b27      	ldr	r3, [pc, #156]	; (80128ac <_strtod_l+0x594>)
 801280e:	460a      	mov	r2, r1
 8012810:	400b      	ands	r3, r1
 8012812:	4927      	ldr	r1, [pc, #156]	; (80128b0 <_strtod_l+0x598>)
 8012814:	428b      	cmp	r3, r1
 8012816:	4680      	mov	r8, r0
 8012818:	d8be      	bhi.n	8012798 <_strtod_l+0x480>
 801281a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801281e:	428b      	cmp	r3, r1
 8012820:	bf86      	itte	hi
 8012822:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 80128b4 <_strtod_l+0x59c>
 8012826:	f04f 38ff 	movhi.w	r8, #4294967295
 801282a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 801282e:	2300      	movs	r3, #0
 8012830:	9304      	str	r3, [sp, #16]
 8012832:	e07b      	b.n	801292c <_strtod_l+0x614>
 8012834:	07ea      	lsls	r2, r5, #31
 8012836:	d505      	bpl.n	8012844 <_strtod_l+0x52c>
 8012838:	9b04      	ldr	r3, [sp, #16]
 801283a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801283e:	f7ed fedb 	bl	80005f8 <__aeabi_dmul>
 8012842:	2301      	movs	r3, #1
 8012844:	9a04      	ldr	r2, [sp, #16]
 8012846:	3208      	adds	r2, #8
 8012848:	f10a 0a01 	add.w	sl, sl, #1
 801284c:	106d      	asrs	r5, r5, #1
 801284e:	9204      	str	r2, [sp, #16]
 8012850:	e7cc      	b.n	80127ec <_strtod_l+0x4d4>
 8012852:	d0ec      	beq.n	801282e <_strtod_l+0x516>
 8012854:	426d      	negs	r5, r5
 8012856:	f015 020f 	ands.w	r2, r5, #15
 801285a:	d00a      	beq.n	8012872 <_strtod_l+0x55a>
 801285c:	4b11      	ldr	r3, [pc, #68]	; (80128a4 <_strtod_l+0x58c>)
 801285e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012862:	4640      	mov	r0, r8
 8012864:	4649      	mov	r1, r9
 8012866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801286a:	f7ed ffef 	bl	800084c <__aeabi_ddiv>
 801286e:	4680      	mov	r8, r0
 8012870:	4689      	mov	r9, r1
 8012872:	112d      	asrs	r5, r5, #4
 8012874:	d0db      	beq.n	801282e <_strtod_l+0x516>
 8012876:	2d1f      	cmp	r5, #31
 8012878:	dd1e      	ble.n	80128b8 <_strtod_l+0x5a0>
 801287a:	2500      	movs	r5, #0
 801287c:	46ab      	mov	fp, r5
 801287e:	9509      	str	r5, [sp, #36]	; 0x24
 8012880:	9505      	str	r5, [sp, #20]
 8012882:	2322      	movs	r3, #34	; 0x22
 8012884:	f04f 0800 	mov.w	r8, #0
 8012888:	f04f 0900 	mov.w	r9, #0
 801288c:	6023      	str	r3, [r4, #0]
 801288e:	e78d      	b.n	80127ac <_strtod_l+0x494>
 8012890:	08017ffe 	.word	0x08017ffe
 8012894:	08017eb4 	.word	0x08017eb4
 8012898:	08017ff6 	.word	0x08017ff6
 801289c:	08018030 	.word	0x08018030
 80128a0:	080182c0 	.word	0x080182c0
 80128a4:	080181a0 	.word	0x080181a0
 80128a8:	08018178 	.word	0x08018178
 80128ac:	7ff00000 	.word	0x7ff00000
 80128b0:	7ca00000 	.word	0x7ca00000
 80128b4:	7fefffff 	.word	0x7fefffff
 80128b8:	f015 0310 	ands.w	r3, r5, #16
 80128bc:	bf18      	it	ne
 80128be:	236a      	movne	r3, #106	; 0x6a
 80128c0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8012c64 <_strtod_l+0x94c>
 80128c4:	9304      	str	r3, [sp, #16]
 80128c6:	4640      	mov	r0, r8
 80128c8:	4649      	mov	r1, r9
 80128ca:	2300      	movs	r3, #0
 80128cc:	07ea      	lsls	r2, r5, #31
 80128ce:	d504      	bpl.n	80128da <_strtod_l+0x5c2>
 80128d0:	e9da 2300 	ldrd	r2, r3, [sl]
 80128d4:	f7ed fe90 	bl	80005f8 <__aeabi_dmul>
 80128d8:	2301      	movs	r3, #1
 80128da:	106d      	asrs	r5, r5, #1
 80128dc:	f10a 0a08 	add.w	sl, sl, #8
 80128e0:	d1f4      	bne.n	80128cc <_strtod_l+0x5b4>
 80128e2:	b10b      	cbz	r3, 80128e8 <_strtod_l+0x5d0>
 80128e4:	4680      	mov	r8, r0
 80128e6:	4689      	mov	r9, r1
 80128e8:	9b04      	ldr	r3, [sp, #16]
 80128ea:	b1bb      	cbz	r3, 801291c <_strtod_l+0x604>
 80128ec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80128f0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	4649      	mov	r1, r9
 80128f8:	dd10      	ble.n	801291c <_strtod_l+0x604>
 80128fa:	2b1f      	cmp	r3, #31
 80128fc:	f340 811e 	ble.w	8012b3c <_strtod_l+0x824>
 8012900:	2b34      	cmp	r3, #52	; 0x34
 8012902:	bfde      	ittt	le
 8012904:	f04f 33ff 	movle.w	r3, #4294967295
 8012908:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801290c:	4093      	lslle	r3, r2
 801290e:	f04f 0800 	mov.w	r8, #0
 8012912:	bfcc      	ite	gt
 8012914:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8012918:	ea03 0901 	andle.w	r9, r3, r1
 801291c:	2200      	movs	r2, #0
 801291e:	2300      	movs	r3, #0
 8012920:	4640      	mov	r0, r8
 8012922:	4649      	mov	r1, r9
 8012924:	f7ee f8d0 	bl	8000ac8 <__aeabi_dcmpeq>
 8012928:	2800      	cmp	r0, #0
 801292a:	d1a6      	bne.n	801287a <_strtod_l+0x562>
 801292c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801292e:	9300      	str	r3, [sp, #0]
 8012930:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012932:	4633      	mov	r3, r6
 8012934:	465a      	mov	r2, fp
 8012936:	4620      	mov	r0, r4
 8012938:	f002 fe46 	bl	80155c8 <__s2b>
 801293c:	9009      	str	r0, [sp, #36]	; 0x24
 801293e:	2800      	cmp	r0, #0
 8012940:	f43f af2a 	beq.w	8012798 <_strtod_l+0x480>
 8012944:	9a08      	ldr	r2, [sp, #32]
 8012946:	9b05      	ldr	r3, [sp, #20]
 8012948:	2a00      	cmp	r2, #0
 801294a:	eba3 0307 	sub.w	r3, r3, r7
 801294e:	bfa8      	it	ge
 8012950:	2300      	movge	r3, #0
 8012952:	930c      	str	r3, [sp, #48]	; 0x30
 8012954:	2500      	movs	r5, #0
 8012956:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801295a:	9312      	str	r3, [sp, #72]	; 0x48
 801295c:	46ab      	mov	fp, r5
 801295e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012960:	4620      	mov	r0, r4
 8012962:	6859      	ldr	r1, [r3, #4]
 8012964:	f002 fd88 	bl	8015478 <_Balloc>
 8012968:	9005      	str	r0, [sp, #20]
 801296a:	2800      	cmp	r0, #0
 801296c:	f43f af18 	beq.w	80127a0 <_strtod_l+0x488>
 8012970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012972:	691a      	ldr	r2, [r3, #16]
 8012974:	3202      	adds	r2, #2
 8012976:	f103 010c 	add.w	r1, r3, #12
 801297a:	0092      	lsls	r2, r2, #2
 801297c:	300c      	adds	r0, #12
 801297e:	f001 fa7e 	bl	8013e7e <memcpy>
 8012982:	ec49 8b10 	vmov	d0, r8, r9
 8012986:	aa18      	add	r2, sp, #96	; 0x60
 8012988:	a917      	add	r1, sp, #92	; 0x5c
 801298a:	4620      	mov	r0, r4
 801298c:	f003 f950 	bl	8015c30 <__d2b>
 8012990:	ec49 8b18 	vmov	d8, r8, r9
 8012994:	9016      	str	r0, [sp, #88]	; 0x58
 8012996:	2800      	cmp	r0, #0
 8012998:	f43f af02 	beq.w	80127a0 <_strtod_l+0x488>
 801299c:	2101      	movs	r1, #1
 801299e:	4620      	mov	r0, r4
 80129a0:	f002 feaa 	bl	80156f8 <__i2b>
 80129a4:	4683      	mov	fp, r0
 80129a6:	2800      	cmp	r0, #0
 80129a8:	f43f aefa 	beq.w	80127a0 <_strtod_l+0x488>
 80129ac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80129ae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80129b0:	2e00      	cmp	r6, #0
 80129b2:	bfab      	itete	ge
 80129b4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 80129b6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 80129b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80129ba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 80129be:	bfac      	ite	ge
 80129c0:	eb06 0a03 	addge.w	sl, r6, r3
 80129c4:	1b9f      	sublt	r7, r3, r6
 80129c6:	9b04      	ldr	r3, [sp, #16]
 80129c8:	1af6      	subs	r6, r6, r3
 80129ca:	4416      	add	r6, r2
 80129cc:	4ba0      	ldr	r3, [pc, #640]	; (8012c50 <_strtod_l+0x938>)
 80129ce:	3e01      	subs	r6, #1
 80129d0:	429e      	cmp	r6, r3
 80129d2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80129d6:	f280 80c4 	bge.w	8012b62 <_strtod_l+0x84a>
 80129da:	1b9b      	subs	r3, r3, r6
 80129dc:	2b1f      	cmp	r3, #31
 80129de:	eba2 0203 	sub.w	r2, r2, r3
 80129e2:	f04f 0101 	mov.w	r1, #1
 80129e6:	f300 80b0 	bgt.w	8012b4a <_strtod_l+0x832>
 80129ea:	fa01 f303 	lsl.w	r3, r1, r3
 80129ee:	930e      	str	r3, [sp, #56]	; 0x38
 80129f0:	2300      	movs	r3, #0
 80129f2:	930d      	str	r3, [sp, #52]	; 0x34
 80129f4:	eb0a 0602 	add.w	r6, sl, r2
 80129f8:	9b04      	ldr	r3, [sp, #16]
 80129fa:	45b2      	cmp	sl, r6
 80129fc:	4417      	add	r7, r2
 80129fe:	441f      	add	r7, r3
 8012a00:	4653      	mov	r3, sl
 8012a02:	bfa8      	it	ge
 8012a04:	4633      	movge	r3, r6
 8012a06:	42bb      	cmp	r3, r7
 8012a08:	bfa8      	it	ge
 8012a0a:	463b      	movge	r3, r7
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	bfc2      	ittt	gt
 8012a10:	1af6      	subgt	r6, r6, r3
 8012a12:	1aff      	subgt	r7, r7, r3
 8012a14:	ebaa 0a03 	subgt.w	sl, sl, r3
 8012a18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	dd17      	ble.n	8012a4e <_strtod_l+0x736>
 8012a1e:	4659      	mov	r1, fp
 8012a20:	461a      	mov	r2, r3
 8012a22:	4620      	mov	r0, r4
 8012a24:	f002 ff28 	bl	8015878 <__pow5mult>
 8012a28:	4683      	mov	fp, r0
 8012a2a:	2800      	cmp	r0, #0
 8012a2c:	f43f aeb8 	beq.w	80127a0 <_strtod_l+0x488>
 8012a30:	4601      	mov	r1, r0
 8012a32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012a34:	4620      	mov	r0, r4
 8012a36:	f002 fe75 	bl	8015724 <__multiply>
 8012a3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8012a3c:	2800      	cmp	r0, #0
 8012a3e:	f43f aeaf 	beq.w	80127a0 <_strtod_l+0x488>
 8012a42:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012a44:	4620      	mov	r0, r4
 8012a46:	f002 fd57 	bl	80154f8 <_Bfree>
 8012a4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a4c:	9316      	str	r3, [sp, #88]	; 0x58
 8012a4e:	2e00      	cmp	r6, #0
 8012a50:	f300 808c 	bgt.w	8012b6c <_strtod_l+0x854>
 8012a54:	9b08      	ldr	r3, [sp, #32]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	dd08      	ble.n	8012a6c <_strtod_l+0x754>
 8012a5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012a5c:	9905      	ldr	r1, [sp, #20]
 8012a5e:	4620      	mov	r0, r4
 8012a60:	f002 ff0a 	bl	8015878 <__pow5mult>
 8012a64:	9005      	str	r0, [sp, #20]
 8012a66:	2800      	cmp	r0, #0
 8012a68:	f43f ae9a 	beq.w	80127a0 <_strtod_l+0x488>
 8012a6c:	2f00      	cmp	r7, #0
 8012a6e:	dd08      	ble.n	8012a82 <_strtod_l+0x76a>
 8012a70:	9905      	ldr	r1, [sp, #20]
 8012a72:	463a      	mov	r2, r7
 8012a74:	4620      	mov	r0, r4
 8012a76:	f002 ff59 	bl	801592c <__lshift>
 8012a7a:	9005      	str	r0, [sp, #20]
 8012a7c:	2800      	cmp	r0, #0
 8012a7e:	f43f ae8f 	beq.w	80127a0 <_strtod_l+0x488>
 8012a82:	f1ba 0f00 	cmp.w	sl, #0
 8012a86:	dd08      	ble.n	8012a9a <_strtod_l+0x782>
 8012a88:	4659      	mov	r1, fp
 8012a8a:	4652      	mov	r2, sl
 8012a8c:	4620      	mov	r0, r4
 8012a8e:	f002 ff4d 	bl	801592c <__lshift>
 8012a92:	4683      	mov	fp, r0
 8012a94:	2800      	cmp	r0, #0
 8012a96:	f43f ae83 	beq.w	80127a0 <_strtod_l+0x488>
 8012a9a:	9a05      	ldr	r2, [sp, #20]
 8012a9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f002 ffcc 	bl	8015a3c <__mdiff>
 8012aa4:	4605      	mov	r5, r0
 8012aa6:	2800      	cmp	r0, #0
 8012aa8:	f43f ae7a 	beq.w	80127a0 <_strtod_l+0x488>
 8012aac:	68c3      	ldr	r3, [r0, #12]
 8012aae:	930b      	str	r3, [sp, #44]	; 0x2c
 8012ab0:	2300      	movs	r3, #0
 8012ab2:	60c3      	str	r3, [r0, #12]
 8012ab4:	4659      	mov	r1, fp
 8012ab6:	f002 ffa5 	bl	8015a04 <__mcmp>
 8012aba:	2800      	cmp	r0, #0
 8012abc:	da60      	bge.n	8012b80 <_strtod_l+0x868>
 8012abe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ac0:	ea53 0308 	orrs.w	r3, r3, r8
 8012ac4:	f040 8084 	bne.w	8012bd0 <_strtod_l+0x8b8>
 8012ac8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d17f      	bne.n	8012bd0 <_strtod_l+0x8b8>
 8012ad0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012ad4:	0d1b      	lsrs	r3, r3, #20
 8012ad6:	051b      	lsls	r3, r3, #20
 8012ad8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012adc:	d978      	bls.n	8012bd0 <_strtod_l+0x8b8>
 8012ade:	696b      	ldr	r3, [r5, #20]
 8012ae0:	b913      	cbnz	r3, 8012ae8 <_strtod_l+0x7d0>
 8012ae2:	692b      	ldr	r3, [r5, #16]
 8012ae4:	2b01      	cmp	r3, #1
 8012ae6:	dd73      	ble.n	8012bd0 <_strtod_l+0x8b8>
 8012ae8:	4629      	mov	r1, r5
 8012aea:	2201      	movs	r2, #1
 8012aec:	4620      	mov	r0, r4
 8012aee:	f002 ff1d 	bl	801592c <__lshift>
 8012af2:	4659      	mov	r1, fp
 8012af4:	4605      	mov	r5, r0
 8012af6:	f002 ff85 	bl	8015a04 <__mcmp>
 8012afa:	2800      	cmp	r0, #0
 8012afc:	dd68      	ble.n	8012bd0 <_strtod_l+0x8b8>
 8012afe:	9904      	ldr	r1, [sp, #16]
 8012b00:	4a54      	ldr	r2, [pc, #336]	; (8012c54 <_strtod_l+0x93c>)
 8012b02:	464b      	mov	r3, r9
 8012b04:	2900      	cmp	r1, #0
 8012b06:	f000 8084 	beq.w	8012c12 <_strtod_l+0x8fa>
 8012b0a:	ea02 0109 	and.w	r1, r2, r9
 8012b0e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8012b12:	dc7e      	bgt.n	8012c12 <_strtod_l+0x8fa>
 8012b14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8012b18:	f77f aeb3 	ble.w	8012882 <_strtod_l+0x56a>
 8012b1c:	4b4e      	ldr	r3, [pc, #312]	; (8012c58 <_strtod_l+0x940>)
 8012b1e:	4640      	mov	r0, r8
 8012b20:	4649      	mov	r1, r9
 8012b22:	2200      	movs	r2, #0
 8012b24:	f7ed fd68 	bl	80005f8 <__aeabi_dmul>
 8012b28:	4b4a      	ldr	r3, [pc, #296]	; (8012c54 <_strtod_l+0x93c>)
 8012b2a:	400b      	ands	r3, r1
 8012b2c:	4680      	mov	r8, r0
 8012b2e:	4689      	mov	r9, r1
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	f47f ae3f 	bne.w	80127b4 <_strtod_l+0x49c>
 8012b36:	2322      	movs	r3, #34	; 0x22
 8012b38:	6023      	str	r3, [r4, #0]
 8012b3a:	e63b      	b.n	80127b4 <_strtod_l+0x49c>
 8012b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8012b40:	fa02 f303 	lsl.w	r3, r2, r3
 8012b44:	ea03 0808 	and.w	r8, r3, r8
 8012b48:	e6e8      	b.n	801291c <_strtod_l+0x604>
 8012b4a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012b4e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8012b52:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8012b56:	36e2      	adds	r6, #226	; 0xe2
 8012b58:	fa01 f306 	lsl.w	r3, r1, r6
 8012b5c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012b60:	e748      	b.n	80129f4 <_strtod_l+0x6dc>
 8012b62:	2100      	movs	r1, #0
 8012b64:	2301      	movs	r3, #1
 8012b66:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012b6a:	e743      	b.n	80129f4 <_strtod_l+0x6dc>
 8012b6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012b6e:	4632      	mov	r2, r6
 8012b70:	4620      	mov	r0, r4
 8012b72:	f002 fedb 	bl	801592c <__lshift>
 8012b76:	9016      	str	r0, [sp, #88]	; 0x58
 8012b78:	2800      	cmp	r0, #0
 8012b7a:	f47f af6b 	bne.w	8012a54 <_strtod_l+0x73c>
 8012b7e:	e60f      	b.n	80127a0 <_strtod_l+0x488>
 8012b80:	46ca      	mov	sl, r9
 8012b82:	d171      	bne.n	8012c68 <_strtod_l+0x950>
 8012b84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012b8a:	b352      	cbz	r2, 8012be2 <_strtod_l+0x8ca>
 8012b8c:	4a33      	ldr	r2, [pc, #204]	; (8012c5c <_strtod_l+0x944>)
 8012b8e:	4293      	cmp	r3, r2
 8012b90:	d12a      	bne.n	8012be8 <_strtod_l+0x8d0>
 8012b92:	9b04      	ldr	r3, [sp, #16]
 8012b94:	4641      	mov	r1, r8
 8012b96:	b1fb      	cbz	r3, 8012bd8 <_strtod_l+0x8c0>
 8012b98:	4b2e      	ldr	r3, [pc, #184]	; (8012c54 <_strtod_l+0x93c>)
 8012b9a:	ea09 0303 	and.w	r3, r9, r3
 8012b9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ba6:	d81a      	bhi.n	8012bde <_strtod_l+0x8c6>
 8012ba8:	0d1b      	lsrs	r3, r3, #20
 8012baa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012bae:	fa02 f303 	lsl.w	r3, r2, r3
 8012bb2:	4299      	cmp	r1, r3
 8012bb4:	d118      	bne.n	8012be8 <_strtod_l+0x8d0>
 8012bb6:	4b2a      	ldr	r3, [pc, #168]	; (8012c60 <_strtod_l+0x948>)
 8012bb8:	459a      	cmp	sl, r3
 8012bba:	d102      	bne.n	8012bc2 <_strtod_l+0x8aa>
 8012bbc:	3101      	adds	r1, #1
 8012bbe:	f43f adef 	beq.w	80127a0 <_strtod_l+0x488>
 8012bc2:	4b24      	ldr	r3, [pc, #144]	; (8012c54 <_strtod_l+0x93c>)
 8012bc4:	ea0a 0303 	and.w	r3, sl, r3
 8012bc8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012bcc:	f04f 0800 	mov.w	r8, #0
 8012bd0:	9b04      	ldr	r3, [sp, #16]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d1a2      	bne.n	8012b1c <_strtod_l+0x804>
 8012bd6:	e5ed      	b.n	80127b4 <_strtod_l+0x49c>
 8012bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8012bdc:	e7e9      	b.n	8012bb2 <_strtod_l+0x89a>
 8012bde:	4613      	mov	r3, r2
 8012be0:	e7e7      	b.n	8012bb2 <_strtod_l+0x89a>
 8012be2:	ea53 0308 	orrs.w	r3, r3, r8
 8012be6:	d08a      	beq.n	8012afe <_strtod_l+0x7e6>
 8012be8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bea:	b1e3      	cbz	r3, 8012c26 <_strtod_l+0x90e>
 8012bec:	ea13 0f0a 	tst.w	r3, sl
 8012bf0:	d0ee      	beq.n	8012bd0 <_strtod_l+0x8b8>
 8012bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012bf4:	9a04      	ldr	r2, [sp, #16]
 8012bf6:	4640      	mov	r0, r8
 8012bf8:	4649      	mov	r1, r9
 8012bfa:	b1c3      	cbz	r3, 8012c2e <_strtod_l+0x916>
 8012bfc:	f7ff fb6d 	bl	80122da <sulp>
 8012c00:	4602      	mov	r2, r0
 8012c02:	460b      	mov	r3, r1
 8012c04:	ec51 0b18 	vmov	r0, r1, d8
 8012c08:	f7ed fb40 	bl	800028c <__adddf3>
 8012c0c:	4680      	mov	r8, r0
 8012c0e:	4689      	mov	r9, r1
 8012c10:	e7de      	b.n	8012bd0 <_strtod_l+0x8b8>
 8012c12:	4013      	ands	r3, r2
 8012c14:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8012c18:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8012c1c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8012c20:	f04f 38ff 	mov.w	r8, #4294967295
 8012c24:	e7d4      	b.n	8012bd0 <_strtod_l+0x8b8>
 8012c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012c28:	ea13 0f08 	tst.w	r3, r8
 8012c2c:	e7e0      	b.n	8012bf0 <_strtod_l+0x8d8>
 8012c2e:	f7ff fb54 	bl	80122da <sulp>
 8012c32:	4602      	mov	r2, r0
 8012c34:	460b      	mov	r3, r1
 8012c36:	ec51 0b18 	vmov	r0, r1, d8
 8012c3a:	f7ed fb25 	bl	8000288 <__aeabi_dsub>
 8012c3e:	2200      	movs	r2, #0
 8012c40:	2300      	movs	r3, #0
 8012c42:	4680      	mov	r8, r0
 8012c44:	4689      	mov	r9, r1
 8012c46:	f7ed ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c4a:	2800      	cmp	r0, #0
 8012c4c:	d0c0      	beq.n	8012bd0 <_strtod_l+0x8b8>
 8012c4e:	e618      	b.n	8012882 <_strtod_l+0x56a>
 8012c50:	fffffc02 	.word	0xfffffc02
 8012c54:	7ff00000 	.word	0x7ff00000
 8012c58:	39500000 	.word	0x39500000
 8012c5c:	000fffff 	.word	0x000fffff
 8012c60:	7fefffff 	.word	0x7fefffff
 8012c64:	08017ec8 	.word	0x08017ec8
 8012c68:	4659      	mov	r1, fp
 8012c6a:	4628      	mov	r0, r5
 8012c6c:	f003 f83a 	bl	8015ce4 <__ratio>
 8012c70:	ec57 6b10 	vmov	r6, r7, d0
 8012c74:	ee10 0a10 	vmov	r0, s0
 8012c78:	2200      	movs	r2, #0
 8012c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012c7e:	4639      	mov	r1, r7
 8012c80:	f7ed ff36 	bl	8000af0 <__aeabi_dcmple>
 8012c84:	2800      	cmp	r0, #0
 8012c86:	d071      	beq.n	8012d6c <_strtod_l+0xa54>
 8012c88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d17c      	bne.n	8012d88 <_strtod_l+0xa70>
 8012c8e:	f1b8 0f00 	cmp.w	r8, #0
 8012c92:	d15a      	bne.n	8012d4a <_strtod_l+0xa32>
 8012c94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d15d      	bne.n	8012d58 <_strtod_l+0xa40>
 8012c9c:	4b90      	ldr	r3, [pc, #576]	; (8012ee0 <_strtod_l+0xbc8>)
 8012c9e:	2200      	movs	r2, #0
 8012ca0:	4630      	mov	r0, r6
 8012ca2:	4639      	mov	r1, r7
 8012ca4:	f7ed ff1a 	bl	8000adc <__aeabi_dcmplt>
 8012ca8:	2800      	cmp	r0, #0
 8012caa:	d15c      	bne.n	8012d66 <_strtod_l+0xa4e>
 8012cac:	4630      	mov	r0, r6
 8012cae:	4639      	mov	r1, r7
 8012cb0:	4b8c      	ldr	r3, [pc, #560]	; (8012ee4 <_strtod_l+0xbcc>)
 8012cb2:	2200      	movs	r2, #0
 8012cb4:	f7ed fca0 	bl	80005f8 <__aeabi_dmul>
 8012cb8:	4606      	mov	r6, r0
 8012cba:	460f      	mov	r7, r1
 8012cbc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012cc0:	9606      	str	r6, [sp, #24]
 8012cc2:	9307      	str	r3, [sp, #28]
 8012cc4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cc8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012ccc:	4b86      	ldr	r3, [pc, #536]	; (8012ee8 <_strtod_l+0xbd0>)
 8012cce:	ea0a 0303 	and.w	r3, sl, r3
 8012cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8012cd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012cd6:	4b85      	ldr	r3, [pc, #532]	; (8012eec <_strtod_l+0xbd4>)
 8012cd8:	429a      	cmp	r2, r3
 8012cda:	f040 8090 	bne.w	8012dfe <_strtod_l+0xae6>
 8012cde:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8012ce2:	ec49 8b10 	vmov	d0, r8, r9
 8012ce6:	f002 ff33 	bl	8015b50 <__ulp>
 8012cea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012cee:	ec51 0b10 	vmov	r0, r1, d0
 8012cf2:	f7ed fc81 	bl	80005f8 <__aeabi_dmul>
 8012cf6:	4642      	mov	r2, r8
 8012cf8:	464b      	mov	r3, r9
 8012cfa:	f7ed fac7 	bl	800028c <__adddf3>
 8012cfe:	460b      	mov	r3, r1
 8012d00:	4979      	ldr	r1, [pc, #484]	; (8012ee8 <_strtod_l+0xbd0>)
 8012d02:	4a7b      	ldr	r2, [pc, #492]	; (8012ef0 <_strtod_l+0xbd8>)
 8012d04:	4019      	ands	r1, r3
 8012d06:	4291      	cmp	r1, r2
 8012d08:	4680      	mov	r8, r0
 8012d0a:	d944      	bls.n	8012d96 <_strtod_l+0xa7e>
 8012d0c:	ee18 2a90 	vmov	r2, s17
 8012d10:	4b78      	ldr	r3, [pc, #480]	; (8012ef4 <_strtod_l+0xbdc>)
 8012d12:	429a      	cmp	r2, r3
 8012d14:	d104      	bne.n	8012d20 <_strtod_l+0xa08>
 8012d16:	ee18 3a10 	vmov	r3, s16
 8012d1a:	3301      	adds	r3, #1
 8012d1c:	f43f ad40 	beq.w	80127a0 <_strtod_l+0x488>
 8012d20:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012ef4 <_strtod_l+0xbdc>
 8012d24:	f04f 38ff 	mov.w	r8, #4294967295
 8012d28:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012d2a:	4620      	mov	r0, r4
 8012d2c:	f002 fbe4 	bl	80154f8 <_Bfree>
 8012d30:	9905      	ldr	r1, [sp, #20]
 8012d32:	4620      	mov	r0, r4
 8012d34:	f002 fbe0 	bl	80154f8 <_Bfree>
 8012d38:	4659      	mov	r1, fp
 8012d3a:	4620      	mov	r0, r4
 8012d3c:	f002 fbdc 	bl	80154f8 <_Bfree>
 8012d40:	4629      	mov	r1, r5
 8012d42:	4620      	mov	r0, r4
 8012d44:	f002 fbd8 	bl	80154f8 <_Bfree>
 8012d48:	e609      	b.n	801295e <_strtod_l+0x646>
 8012d4a:	f1b8 0f01 	cmp.w	r8, #1
 8012d4e:	d103      	bne.n	8012d58 <_strtod_l+0xa40>
 8012d50:	f1b9 0f00 	cmp.w	r9, #0
 8012d54:	f43f ad95 	beq.w	8012882 <_strtod_l+0x56a>
 8012d58:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012eb0 <_strtod_l+0xb98>
 8012d5c:	4f60      	ldr	r7, [pc, #384]	; (8012ee0 <_strtod_l+0xbc8>)
 8012d5e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012d62:	2600      	movs	r6, #0
 8012d64:	e7ae      	b.n	8012cc4 <_strtod_l+0x9ac>
 8012d66:	4f5f      	ldr	r7, [pc, #380]	; (8012ee4 <_strtod_l+0xbcc>)
 8012d68:	2600      	movs	r6, #0
 8012d6a:	e7a7      	b.n	8012cbc <_strtod_l+0x9a4>
 8012d6c:	4b5d      	ldr	r3, [pc, #372]	; (8012ee4 <_strtod_l+0xbcc>)
 8012d6e:	4630      	mov	r0, r6
 8012d70:	4639      	mov	r1, r7
 8012d72:	2200      	movs	r2, #0
 8012d74:	f7ed fc40 	bl	80005f8 <__aeabi_dmul>
 8012d78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d7a:	4606      	mov	r6, r0
 8012d7c:	460f      	mov	r7, r1
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d09c      	beq.n	8012cbc <_strtod_l+0x9a4>
 8012d82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012d86:	e79d      	b.n	8012cc4 <_strtod_l+0x9ac>
 8012d88:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012eb8 <_strtod_l+0xba0>
 8012d8c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012d90:	ec57 6b17 	vmov	r6, r7, d7
 8012d94:	e796      	b.n	8012cc4 <_strtod_l+0x9ac>
 8012d96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012d9a:	9b04      	ldr	r3, [sp, #16]
 8012d9c:	46ca      	mov	sl, r9
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d1c2      	bne.n	8012d28 <_strtod_l+0xa10>
 8012da2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012da6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012da8:	0d1b      	lsrs	r3, r3, #20
 8012daa:	051b      	lsls	r3, r3, #20
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d1bb      	bne.n	8012d28 <_strtod_l+0xa10>
 8012db0:	4630      	mov	r0, r6
 8012db2:	4639      	mov	r1, r7
 8012db4:	f7ed ffd0 	bl	8000d58 <__aeabi_d2lz>
 8012db8:	f7ed fbf0 	bl	800059c <__aeabi_l2d>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	460b      	mov	r3, r1
 8012dc0:	4630      	mov	r0, r6
 8012dc2:	4639      	mov	r1, r7
 8012dc4:	f7ed fa60 	bl	8000288 <__aeabi_dsub>
 8012dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012dca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012dce:	ea43 0308 	orr.w	r3, r3, r8
 8012dd2:	4313      	orrs	r3, r2
 8012dd4:	4606      	mov	r6, r0
 8012dd6:	460f      	mov	r7, r1
 8012dd8:	d054      	beq.n	8012e84 <_strtod_l+0xb6c>
 8012dda:	a339      	add	r3, pc, #228	; (adr r3, 8012ec0 <_strtod_l+0xba8>)
 8012ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de0:	f7ed fe7c 	bl	8000adc <__aeabi_dcmplt>
 8012de4:	2800      	cmp	r0, #0
 8012de6:	f47f ace5 	bne.w	80127b4 <_strtod_l+0x49c>
 8012dea:	a337      	add	r3, pc, #220	; (adr r3, 8012ec8 <_strtod_l+0xbb0>)
 8012dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df0:	4630      	mov	r0, r6
 8012df2:	4639      	mov	r1, r7
 8012df4:	f7ed fe90 	bl	8000b18 <__aeabi_dcmpgt>
 8012df8:	2800      	cmp	r0, #0
 8012dfa:	d095      	beq.n	8012d28 <_strtod_l+0xa10>
 8012dfc:	e4da      	b.n	80127b4 <_strtod_l+0x49c>
 8012dfe:	9b04      	ldr	r3, [sp, #16]
 8012e00:	b333      	cbz	r3, 8012e50 <_strtod_l+0xb38>
 8012e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e04:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012e08:	d822      	bhi.n	8012e50 <_strtod_l+0xb38>
 8012e0a:	a331      	add	r3, pc, #196	; (adr r3, 8012ed0 <_strtod_l+0xbb8>)
 8012e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e10:	4630      	mov	r0, r6
 8012e12:	4639      	mov	r1, r7
 8012e14:	f7ed fe6c 	bl	8000af0 <__aeabi_dcmple>
 8012e18:	b1a0      	cbz	r0, 8012e44 <_strtod_l+0xb2c>
 8012e1a:	4639      	mov	r1, r7
 8012e1c:	4630      	mov	r0, r6
 8012e1e:	f7ed fec3 	bl	8000ba8 <__aeabi_d2uiz>
 8012e22:	2801      	cmp	r0, #1
 8012e24:	bf38      	it	cc
 8012e26:	2001      	movcc	r0, #1
 8012e28:	f7ed fb6c 	bl	8000504 <__aeabi_ui2d>
 8012e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012e2e:	4606      	mov	r6, r0
 8012e30:	460f      	mov	r7, r1
 8012e32:	bb23      	cbnz	r3, 8012e7e <_strtod_l+0xb66>
 8012e34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012e38:	9010      	str	r0, [sp, #64]	; 0x40
 8012e3a:	9311      	str	r3, [sp, #68]	; 0x44
 8012e3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012e40:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012e44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012e46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012e48:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012e4c:	1a9b      	subs	r3, r3, r2
 8012e4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8012e50:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012e54:	eeb0 0a48 	vmov.f32	s0, s16
 8012e58:	eef0 0a68 	vmov.f32	s1, s17
 8012e5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012e60:	f002 fe76 	bl	8015b50 <__ulp>
 8012e64:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012e68:	ec53 2b10 	vmov	r2, r3, d0
 8012e6c:	f7ed fbc4 	bl	80005f8 <__aeabi_dmul>
 8012e70:	ec53 2b18 	vmov	r2, r3, d8
 8012e74:	f7ed fa0a 	bl	800028c <__adddf3>
 8012e78:	4680      	mov	r8, r0
 8012e7a:	4689      	mov	r9, r1
 8012e7c:	e78d      	b.n	8012d9a <_strtod_l+0xa82>
 8012e7e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012e82:	e7db      	b.n	8012e3c <_strtod_l+0xb24>
 8012e84:	a314      	add	r3, pc, #80	; (adr r3, 8012ed8 <_strtod_l+0xbc0>)
 8012e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e8a:	f7ed fe27 	bl	8000adc <__aeabi_dcmplt>
 8012e8e:	e7b3      	b.n	8012df8 <_strtod_l+0xae0>
 8012e90:	2300      	movs	r3, #0
 8012e92:	930a      	str	r3, [sp, #40]	; 0x28
 8012e94:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012e96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012e98:	6013      	str	r3, [r2, #0]
 8012e9a:	f7ff ba7c 	b.w	8012396 <_strtod_l+0x7e>
 8012e9e:	2a65      	cmp	r2, #101	; 0x65
 8012ea0:	f43f ab75 	beq.w	801258e <_strtod_l+0x276>
 8012ea4:	2a45      	cmp	r2, #69	; 0x45
 8012ea6:	f43f ab72 	beq.w	801258e <_strtod_l+0x276>
 8012eaa:	2301      	movs	r3, #1
 8012eac:	f7ff bbaa 	b.w	8012604 <_strtod_l+0x2ec>
 8012eb0:	00000000 	.word	0x00000000
 8012eb4:	bff00000 	.word	0xbff00000
 8012eb8:	00000000 	.word	0x00000000
 8012ebc:	3ff00000 	.word	0x3ff00000
 8012ec0:	94a03595 	.word	0x94a03595
 8012ec4:	3fdfffff 	.word	0x3fdfffff
 8012ec8:	35afe535 	.word	0x35afe535
 8012ecc:	3fe00000 	.word	0x3fe00000
 8012ed0:	ffc00000 	.word	0xffc00000
 8012ed4:	41dfffff 	.word	0x41dfffff
 8012ed8:	94a03595 	.word	0x94a03595
 8012edc:	3fcfffff 	.word	0x3fcfffff
 8012ee0:	3ff00000 	.word	0x3ff00000
 8012ee4:	3fe00000 	.word	0x3fe00000
 8012ee8:	7ff00000 	.word	0x7ff00000
 8012eec:	7fe00000 	.word	0x7fe00000
 8012ef0:	7c9fffff 	.word	0x7c9fffff
 8012ef4:	7fefffff 	.word	0x7fefffff

08012ef8 <strtod>:
 8012ef8:	460a      	mov	r2, r1
 8012efa:	4601      	mov	r1, r0
 8012efc:	4802      	ldr	r0, [pc, #8]	; (8012f08 <strtod+0x10>)
 8012efe:	4b03      	ldr	r3, [pc, #12]	; (8012f0c <strtod+0x14>)
 8012f00:	6800      	ldr	r0, [r0, #0]
 8012f02:	f7ff ba09 	b.w	8012318 <_strtod_l>
 8012f06:	bf00      	nop
 8012f08:	2000021c 	.word	0x2000021c
 8012f0c:	20000064 	.word	0x20000064

08012f10 <_strtol_l.constprop.0>:
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f16:	d001      	beq.n	8012f1c <_strtol_l.constprop.0+0xc>
 8012f18:	2b24      	cmp	r3, #36	; 0x24
 8012f1a:	d906      	bls.n	8012f2a <_strtol_l.constprop.0+0x1a>
 8012f1c:	f000 ff82 	bl	8013e24 <__errno>
 8012f20:	2316      	movs	r3, #22
 8012f22:	6003      	str	r3, [r0, #0]
 8012f24:	2000      	movs	r0, #0
 8012f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8013010 <_strtol_l.constprop.0+0x100>
 8012f2e:	460d      	mov	r5, r1
 8012f30:	462e      	mov	r6, r5
 8012f32:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012f36:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8012f3a:	f017 0708 	ands.w	r7, r7, #8
 8012f3e:	d1f7      	bne.n	8012f30 <_strtol_l.constprop.0+0x20>
 8012f40:	2c2d      	cmp	r4, #45	; 0x2d
 8012f42:	d132      	bne.n	8012faa <_strtol_l.constprop.0+0x9a>
 8012f44:	782c      	ldrb	r4, [r5, #0]
 8012f46:	2701      	movs	r7, #1
 8012f48:	1cb5      	adds	r5, r6, #2
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d05b      	beq.n	8013006 <_strtol_l.constprop.0+0xf6>
 8012f4e:	2b10      	cmp	r3, #16
 8012f50:	d109      	bne.n	8012f66 <_strtol_l.constprop.0+0x56>
 8012f52:	2c30      	cmp	r4, #48	; 0x30
 8012f54:	d107      	bne.n	8012f66 <_strtol_l.constprop.0+0x56>
 8012f56:	782c      	ldrb	r4, [r5, #0]
 8012f58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8012f5c:	2c58      	cmp	r4, #88	; 0x58
 8012f5e:	d14d      	bne.n	8012ffc <_strtol_l.constprop.0+0xec>
 8012f60:	786c      	ldrb	r4, [r5, #1]
 8012f62:	2310      	movs	r3, #16
 8012f64:	3502      	adds	r5, #2
 8012f66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8012f6a:	f108 38ff 	add.w	r8, r8, #4294967295
 8012f6e:	f04f 0e00 	mov.w	lr, #0
 8012f72:	fbb8 f9f3 	udiv	r9, r8, r3
 8012f76:	4676      	mov	r6, lr
 8012f78:	fb03 8a19 	mls	sl, r3, r9, r8
 8012f7c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012f80:	f1bc 0f09 	cmp.w	ip, #9
 8012f84:	d816      	bhi.n	8012fb4 <_strtol_l.constprop.0+0xa4>
 8012f86:	4664      	mov	r4, ip
 8012f88:	42a3      	cmp	r3, r4
 8012f8a:	dd24      	ble.n	8012fd6 <_strtol_l.constprop.0+0xc6>
 8012f8c:	f1be 3fff 	cmp.w	lr, #4294967295
 8012f90:	d008      	beq.n	8012fa4 <_strtol_l.constprop.0+0x94>
 8012f92:	45b1      	cmp	r9, r6
 8012f94:	d31c      	bcc.n	8012fd0 <_strtol_l.constprop.0+0xc0>
 8012f96:	d101      	bne.n	8012f9c <_strtol_l.constprop.0+0x8c>
 8012f98:	45a2      	cmp	sl, r4
 8012f9a:	db19      	blt.n	8012fd0 <_strtol_l.constprop.0+0xc0>
 8012f9c:	fb06 4603 	mla	r6, r6, r3, r4
 8012fa0:	f04f 0e01 	mov.w	lr, #1
 8012fa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012fa8:	e7e8      	b.n	8012f7c <_strtol_l.constprop.0+0x6c>
 8012faa:	2c2b      	cmp	r4, #43	; 0x2b
 8012fac:	bf04      	itt	eq
 8012fae:	782c      	ldrbeq	r4, [r5, #0]
 8012fb0:	1cb5      	addeq	r5, r6, #2
 8012fb2:	e7ca      	b.n	8012f4a <_strtol_l.constprop.0+0x3a>
 8012fb4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012fb8:	f1bc 0f19 	cmp.w	ip, #25
 8012fbc:	d801      	bhi.n	8012fc2 <_strtol_l.constprop.0+0xb2>
 8012fbe:	3c37      	subs	r4, #55	; 0x37
 8012fc0:	e7e2      	b.n	8012f88 <_strtol_l.constprop.0+0x78>
 8012fc2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012fc6:	f1bc 0f19 	cmp.w	ip, #25
 8012fca:	d804      	bhi.n	8012fd6 <_strtol_l.constprop.0+0xc6>
 8012fcc:	3c57      	subs	r4, #87	; 0x57
 8012fce:	e7db      	b.n	8012f88 <_strtol_l.constprop.0+0x78>
 8012fd0:	f04f 3eff 	mov.w	lr, #4294967295
 8012fd4:	e7e6      	b.n	8012fa4 <_strtol_l.constprop.0+0x94>
 8012fd6:	f1be 3fff 	cmp.w	lr, #4294967295
 8012fda:	d105      	bne.n	8012fe8 <_strtol_l.constprop.0+0xd8>
 8012fdc:	2322      	movs	r3, #34	; 0x22
 8012fde:	6003      	str	r3, [r0, #0]
 8012fe0:	4646      	mov	r6, r8
 8012fe2:	b942      	cbnz	r2, 8012ff6 <_strtol_l.constprop.0+0xe6>
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	e79e      	b.n	8012f26 <_strtol_l.constprop.0+0x16>
 8012fe8:	b107      	cbz	r7, 8012fec <_strtol_l.constprop.0+0xdc>
 8012fea:	4276      	negs	r6, r6
 8012fec:	2a00      	cmp	r2, #0
 8012fee:	d0f9      	beq.n	8012fe4 <_strtol_l.constprop.0+0xd4>
 8012ff0:	f1be 0f00 	cmp.w	lr, #0
 8012ff4:	d000      	beq.n	8012ff8 <_strtol_l.constprop.0+0xe8>
 8012ff6:	1e69      	subs	r1, r5, #1
 8012ff8:	6011      	str	r1, [r2, #0]
 8012ffa:	e7f3      	b.n	8012fe4 <_strtol_l.constprop.0+0xd4>
 8012ffc:	2430      	movs	r4, #48	; 0x30
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d1b1      	bne.n	8012f66 <_strtol_l.constprop.0+0x56>
 8013002:	2308      	movs	r3, #8
 8013004:	e7af      	b.n	8012f66 <_strtol_l.constprop.0+0x56>
 8013006:	2c30      	cmp	r4, #48	; 0x30
 8013008:	d0a5      	beq.n	8012f56 <_strtol_l.constprop.0+0x46>
 801300a:	230a      	movs	r3, #10
 801300c:	e7ab      	b.n	8012f66 <_strtol_l.constprop.0+0x56>
 801300e:	bf00      	nop
 8013010:	08017ef1 	.word	0x08017ef1

08013014 <strtol>:
 8013014:	4613      	mov	r3, r2
 8013016:	460a      	mov	r2, r1
 8013018:	4601      	mov	r1, r0
 801301a:	4802      	ldr	r0, [pc, #8]	; (8013024 <strtol+0x10>)
 801301c:	6800      	ldr	r0, [r0, #0]
 801301e:	f7ff bf77 	b.w	8012f10 <_strtol_l.constprop.0>
 8013022:	bf00      	nop
 8013024:	2000021c 	.word	0x2000021c

08013028 <__cvt>:
 8013028:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801302c:	ec55 4b10 	vmov	r4, r5, d0
 8013030:	2d00      	cmp	r5, #0
 8013032:	460e      	mov	r6, r1
 8013034:	4619      	mov	r1, r3
 8013036:	462b      	mov	r3, r5
 8013038:	bfbb      	ittet	lt
 801303a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801303e:	461d      	movlt	r5, r3
 8013040:	2300      	movge	r3, #0
 8013042:	232d      	movlt	r3, #45	; 0x2d
 8013044:	700b      	strb	r3, [r1, #0]
 8013046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013048:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801304c:	4691      	mov	r9, r2
 801304e:	f023 0820 	bic.w	r8, r3, #32
 8013052:	bfbc      	itt	lt
 8013054:	4622      	movlt	r2, r4
 8013056:	4614      	movlt	r4, r2
 8013058:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801305c:	d005      	beq.n	801306a <__cvt+0x42>
 801305e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8013062:	d100      	bne.n	8013066 <__cvt+0x3e>
 8013064:	3601      	adds	r6, #1
 8013066:	2102      	movs	r1, #2
 8013068:	e000      	b.n	801306c <__cvt+0x44>
 801306a:	2103      	movs	r1, #3
 801306c:	ab03      	add	r3, sp, #12
 801306e:	9301      	str	r3, [sp, #4]
 8013070:	ab02      	add	r3, sp, #8
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	ec45 4b10 	vmov	d0, r4, r5
 8013078:	4653      	mov	r3, sl
 801307a:	4632      	mov	r2, r6
 801307c:	f000 ffa0 	bl	8013fc0 <_dtoa_r>
 8013080:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8013084:	4607      	mov	r7, r0
 8013086:	d102      	bne.n	801308e <__cvt+0x66>
 8013088:	f019 0f01 	tst.w	r9, #1
 801308c:	d022      	beq.n	80130d4 <__cvt+0xac>
 801308e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8013092:	eb07 0906 	add.w	r9, r7, r6
 8013096:	d110      	bne.n	80130ba <__cvt+0x92>
 8013098:	783b      	ldrb	r3, [r7, #0]
 801309a:	2b30      	cmp	r3, #48	; 0x30
 801309c:	d10a      	bne.n	80130b4 <__cvt+0x8c>
 801309e:	2200      	movs	r2, #0
 80130a0:	2300      	movs	r3, #0
 80130a2:	4620      	mov	r0, r4
 80130a4:	4629      	mov	r1, r5
 80130a6:	f7ed fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 80130aa:	b918      	cbnz	r0, 80130b4 <__cvt+0x8c>
 80130ac:	f1c6 0601 	rsb	r6, r6, #1
 80130b0:	f8ca 6000 	str.w	r6, [sl]
 80130b4:	f8da 3000 	ldr.w	r3, [sl]
 80130b8:	4499      	add	r9, r3
 80130ba:	2200      	movs	r2, #0
 80130bc:	2300      	movs	r3, #0
 80130be:	4620      	mov	r0, r4
 80130c0:	4629      	mov	r1, r5
 80130c2:	f7ed fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 80130c6:	b108      	cbz	r0, 80130cc <__cvt+0xa4>
 80130c8:	f8cd 900c 	str.w	r9, [sp, #12]
 80130cc:	2230      	movs	r2, #48	; 0x30
 80130ce:	9b03      	ldr	r3, [sp, #12]
 80130d0:	454b      	cmp	r3, r9
 80130d2:	d307      	bcc.n	80130e4 <__cvt+0xbc>
 80130d4:	9b03      	ldr	r3, [sp, #12]
 80130d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80130d8:	1bdb      	subs	r3, r3, r7
 80130da:	4638      	mov	r0, r7
 80130dc:	6013      	str	r3, [r2, #0]
 80130de:	b004      	add	sp, #16
 80130e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130e4:	1c59      	adds	r1, r3, #1
 80130e6:	9103      	str	r1, [sp, #12]
 80130e8:	701a      	strb	r2, [r3, #0]
 80130ea:	e7f0      	b.n	80130ce <__cvt+0xa6>

080130ec <__exponent>:
 80130ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80130ee:	4603      	mov	r3, r0
 80130f0:	2900      	cmp	r1, #0
 80130f2:	bfb8      	it	lt
 80130f4:	4249      	neglt	r1, r1
 80130f6:	f803 2b02 	strb.w	r2, [r3], #2
 80130fa:	bfb4      	ite	lt
 80130fc:	222d      	movlt	r2, #45	; 0x2d
 80130fe:	222b      	movge	r2, #43	; 0x2b
 8013100:	2909      	cmp	r1, #9
 8013102:	7042      	strb	r2, [r0, #1]
 8013104:	dd2a      	ble.n	801315c <__exponent+0x70>
 8013106:	f10d 0207 	add.w	r2, sp, #7
 801310a:	4617      	mov	r7, r2
 801310c:	260a      	movs	r6, #10
 801310e:	4694      	mov	ip, r2
 8013110:	fb91 f5f6 	sdiv	r5, r1, r6
 8013114:	fb06 1415 	mls	r4, r6, r5, r1
 8013118:	3430      	adds	r4, #48	; 0x30
 801311a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801311e:	460c      	mov	r4, r1
 8013120:	2c63      	cmp	r4, #99	; 0x63
 8013122:	f102 32ff 	add.w	r2, r2, #4294967295
 8013126:	4629      	mov	r1, r5
 8013128:	dcf1      	bgt.n	801310e <__exponent+0x22>
 801312a:	3130      	adds	r1, #48	; 0x30
 801312c:	f1ac 0402 	sub.w	r4, ip, #2
 8013130:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013134:	1c41      	adds	r1, r0, #1
 8013136:	4622      	mov	r2, r4
 8013138:	42ba      	cmp	r2, r7
 801313a:	d30a      	bcc.n	8013152 <__exponent+0x66>
 801313c:	f10d 0209 	add.w	r2, sp, #9
 8013140:	eba2 020c 	sub.w	r2, r2, ip
 8013144:	42bc      	cmp	r4, r7
 8013146:	bf88      	it	hi
 8013148:	2200      	movhi	r2, #0
 801314a:	4413      	add	r3, r2
 801314c:	1a18      	subs	r0, r3, r0
 801314e:	b003      	add	sp, #12
 8013150:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013152:	f812 5b01 	ldrb.w	r5, [r2], #1
 8013156:	f801 5f01 	strb.w	r5, [r1, #1]!
 801315a:	e7ed      	b.n	8013138 <__exponent+0x4c>
 801315c:	2330      	movs	r3, #48	; 0x30
 801315e:	3130      	adds	r1, #48	; 0x30
 8013160:	7083      	strb	r3, [r0, #2]
 8013162:	70c1      	strb	r1, [r0, #3]
 8013164:	1d03      	adds	r3, r0, #4
 8013166:	e7f1      	b.n	801314c <__exponent+0x60>

08013168 <_printf_float>:
 8013168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801316c:	ed2d 8b02 	vpush	{d8}
 8013170:	b08d      	sub	sp, #52	; 0x34
 8013172:	460c      	mov	r4, r1
 8013174:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8013178:	4616      	mov	r6, r2
 801317a:	461f      	mov	r7, r3
 801317c:	4605      	mov	r5, r0
 801317e:	f000 fe07 	bl	8013d90 <_localeconv_r>
 8013182:	f8d0 a000 	ldr.w	sl, [r0]
 8013186:	4650      	mov	r0, sl
 8013188:	f7ed f872 	bl	8000270 <strlen>
 801318c:	2300      	movs	r3, #0
 801318e:	930a      	str	r3, [sp, #40]	; 0x28
 8013190:	6823      	ldr	r3, [r4, #0]
 8013192:	9305      	str	r3, [sp, #20]
 8013194:	f8d8 3000 	ldr.w	r3, [r8]
 8013198:	f894 b018 	ldrb.w	fp, [r4, #24]
 801319c:	3307      	adds	r3, #7
 801319e:	f023 0307 	bic.w	r3, r3, #7
 80131a2:	f103 0208 	add.w	r2, r3, #8
 80131a6:	f8c8 2000 	str.w	r2, [r8]
 80131aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80131ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80131b2:	9307      	str	r3, [sp, #28]
 80131b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80131b8:	ee08 0a10 	vmov	s16, r0
 80131bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80131c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80131c4:	4b9e      	ldr	r3, [pc, #632]	; (8013440 <_printf_float+0x2d8>)
 80131c6:	f04f 32ff 	mov.w	r2, #4294967295
 80131ca:	f7ed fcaf 	bl	8000b2c <__aeabi_dcmpun>
 80131ce:	bb88      	cbnz	r0, 8013234 <_printf_float+0xcc>
 80131d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80131d4:	4b9a      	ldr	r3, [pc, #616]	; (8013440 <_printf_float+0x2d8>)
 80131d6:	f04f 32ff 	mov.w	r2, #4294967295
 80131da:	f7ed fc89 	bl	8000af0 <__aeabi_dcmple>
 80131de:	bb48      	cbnz	r0, 8013234 <_printf_float+0xcc>
 80131e0:	2200      	movs	r2, #0
 80131e2:	2300      	movs	r3, #0
 80131e4:	4640      	mov	r0, r8
 80131e6:	4649      	mov	r1, r9
 80131e8:	f7ed fc78 	bl	8000adc <__aeabi_dcmplt>
 80131ec:	b110      	cbz	r0, 80131f4 <_printf_float+0x8c>
 80131ee:	232d      	movs	r3, #45	; 0x2d
 80131f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131f4:	4a93      	ldr	r2, [pc, #588]	; (8013444 <_printf_float+0x2dc>)
 80131f6:	4b94      	ldr	r3, [pc, #592]	; (8013448 <_printf_float+0x2e0>)
 80131f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80131fc:	bf94      	ite	ls
 80131fe:	4690      	movls	r8, r2
 8013200:	4698      	movhi	r8, r3
 8013202:	2303      	movs	r3, #3
 8013204:	6123      	str	r3, [r4, #16]
 8013206:	9b05      	ldr	r3, [sp, #20]
 8013208:	f023 0304 	bic.w	r3, r3, #4
 801320c:	6023      	str	r3, [r4, #0]
 801320e:	f04f 0900 	mov.w	r9, #0
 8013212:	9700      	str	r7, [sp, #0]
 8013214:	4633      	mov	r3, r6
 8013216:	aa0b      	add	r2, sp, #44	; 0x2c
 8013218:	4621      	mov	r1, r4
 801321a:	4628      	mov	r0, r5
 801321c:	f000 f9da 	bl	80135d4 <_printf_common>
 8013220:	3001      	adds	r0, #1
 8013222:	f040 8090 	bne.w	8013346 <_printf_float+0x1de>
 8013226:	f04f 30ff 	mov.w	r0, #4294967295
 801322a:	b00d      	add	sp, #52	; 0x34
 801322c:	ecbd 8b02 	vpop	{d8}
 8013230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013234:	4642      	mov	r2, r8
 8013236:	464b      	mov	r3, r9
 8013238:	4640      	mov	r0, r8
 801323a:	4649      	mov	r1, r9
 801323c:	f7ed fc76 	bl	8000b2c <__aeabi_dcmpun>
 8013240:	b140      	cbz	r0, 8013254 <_printf_float+0xec>
 8013242:	464b      	mov	r3, r9
 8013244:	2b00      	cmp	r3, #0
 8013246:	bfbc      	itt	lt
 8013248:	232d      	movlt	r3, #45	; 0x2d
 801324a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801324e:	4a7f      	ldr	r2, [pc, #508]	; (801344c <_printf_float+0x2e4>)
 8013250:	4b7f      	ldr	r3, [pc, #508]	; (8013450 <_printf_float+0x2e8>)
 8013252:	e7d1      	b.n	80131f8 <_printf_float+0x90>
 8013254:	6863      	ldr	r3, [r4, #4]
 8013256:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801325a:	9206      	str	r2, [sp, #24]
 801325c:	1c5a      	adds	r2, r3, #1
 801325e:	d13f      	bne.n	80132e0 <_printf_float+0x178>
 8013260:	2306      	movs	r3, #6
 8013262:	6063      	str	r3, [r4, #4]
 8013264:	9b05      	ldr	r3, [sp, #20]
 8013266:	6861      	ldr	r1, [r4, #4]
 8013268:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801326c:	2300      	movs	r3, #0
 801326e:	9303      	str	r3, [sp, #12]
 8013270:	ab0a      	add	r3, sp, #40	; 0x28
 8013272:	e9cd b301 	strd	fp, r3, [sp, #4]
 8013276:	ab09      	add	r3, sp, #36	; 0x24
 8013278:	ec49 8b10 	vmov	d0, r8, r9
 801327c:	9300      	str	r3, [sp, #0]
 801327e:	6022      	str	r2, [r4, #0]
 8013280:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013284:	4628      	mov	r0, r5
 8013286:	f7ff fecf 	bl	8013028 <__cvt>
 801328a:	9b06      	ldr	r3, [sp, #24]
 801328c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801328e:	2b47      	cmp	r3, #71	; 0x47
 8013290:	4680      	mov	r8, r0
 8013292:	d108      	bne.n	80132a6 <_printf_float+0x13e>
 8013294:	1cc8      	adds	r0, r1, #3
 8013296:	db02      	blt.n	801329e <_printf_float+0x136>
 8013298:	6863      	ldr	r3, [r4, #4]
 801329a:	4299      	cmp	r1, r3
 801329c:	dd41      	ble.n	8013322 <_printf_float+0x1ba>
 801329e:	f1ab 0302 	sub.w	r3, fp, #2
 80132a2:	fa5f fb83 	uxtb.w	fp, r3
 80132a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80132aa:	d820      	bhi.n	80132ee <_printf_float+0x186>
 80132ac:	3901      	subs	r1, #1
 80132ae:	465a      	mov	r2, fp
 80132b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80132b4:	9109      	str	r1, [sp, #36]	; 0x24
 80132b6:	f7ff ff19 	bl	80130ec <__exponent>
 80132ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80132bc:	1813      	adds	r3, r2, r0
 80132be:	2a01      	cmp	r2, #1
 80132c0:	4681      	mov	r9, r0
 80132c2:	6123      	str	r3, [r4, #16]
 80132c4:	dc02      	bgt.n	80132cc <_printf_float+0x164>
 80132c6:	6822      	ldr	r2, [r4, #0]
 80132c8:	07d2      	lsls	r2, r2, #31
 80132ca:	d501      	bpl.n	80132d0 <_printf_float+0x168>
 80132cc:	3301      	adds	r3, #1
 80132ce:	6123      	str	r3, [r4, #16]
 80132d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d09c      	beq.n	8013212 <_printf_float+0xaa>
 80132d8:	232d      	movs	r3, #45	; 0x2d
 80132da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132de:	e798      	b.n	8013212 <_printf_float+0xaa>
 80132e0:	9a06      	ldr	r2, [sp, #24]
 80132e2:	2a47      	cmp	r2, #71	; 0x47
 80132e4:	d1be      	bne.n	8013264 <_printf_float+0xfc>
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d1bc      	bne.n	8013264 <_printf_float+0xfc>
 80132ea:	2301      	movs	r3, #1
 80132ec:	e7b9      	b.n	8013262 <_printf_float+0xfa>
 80132ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80132f2:	d118      	bne.n	8013326 <_printf_float+0x1be>
 80132f4:	2900      	cmp	r1, #0
 80132f6:	6863      	ldr	r3, [r4, #4]
 80132f8:	dd0b      	ble.n	8013312 <_printf_float+0x1aa>
 80132fa:	6121      	str	r1, [r4, #16]
 80132fc:	b913      	cbnz	r3, 8013304 <_printf_float+0x19c>
 80132fe:	6822      	ldr	r2, [r4, #0]
 8013300:	07d0      	lsls	r0, r2, #31
 8013302:	d502      	bpl.n	801330a <_printf_float+0x1a2>
 8013304:	3301      	adds	r3, #1
 8013306:	440b      	add	r3, r1
 8013308:	6123      	str	r3, [r4, #16]
 801330a:	65a1      	str	r1, [r4, #88]	; 0x58
 801330c:	f04f 0900 	mov.w	r9, #0
 8013310:	e7de      	b.n	80132d0 <_printf_float+0x168>
 8013312:	b913      	cbnz	r3, 801331a <_printf_float+0x1b2>
 8013314:	6822      	ldr	r2, [r4, #0]
 8013316:	07d2      	lsls	r2, r2, #31
 8013318:	d501      	bpl.n	801331e <_printf_float+0x1b6>
 801331a:	3302      	adds	r3, #2
 801331c:	e7f4      	b.n	8013308 <_printf_float+0x1a0>
 801331e:	2301      	movs	r3, #1
 8013320:	e7f2      	b.n	8013308 <_printf_float+0x1a0>
 8013322:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8013326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013328:	4299      	cmp	r1, r3
 801332a:	db05      	blt.n	8013338 <_printf_float+0x1d0>
 801332c:	6823      	ldr	r3, [r4, #0]
 801332e:	6121      	str	r1, [r4, #16]
 8013330:	07d8      	lsls	r0, r3, #31
 8013332:	d5ea      	bpl.n	801330a <_printf_float+0x1a2>
 8013334:	1c4b      	adds	r3, r1, #1
 8013336:	e7e7      	b.n	8013308 <_printf_float+0x1a0>
 8013338:	2900      	cmp	r1, #0
 801333a:	bfd4      	ite	le
 801333c:	f1c1 0202 	rsble	r2, r1, #2
 8013340:	2201      	movgt	r2, #1
 8013342:	4413      	add	r3, r2
 8013344:	e7e0      	b.n	8013308 <_printf_float+0x1a0>
 8013346:	6823      	ldr	r3, [r4, #0]
 8013348:	055a      	lsls	r2, r3, #21
 801334a:	d407      	bmi.n	801335c <_printf_float+0x1f4>
 801334c:	6923      	ldr	r3, [r4, #16]
 801334e:	4642      	mov	r2, r8
 8013350:	4631      	mov	r1, r6
 8013352:	4628      	mov	r0, r5
 8013354:	47b8      	blx	r7
 8013356:	3001      	adds	r0, #1
 8013358:	d12c      	bne.n	80133b4 <_printf_float+0x24c>
 801335a:	e764      	b.n	8013226 <_printf_float+0xbe>
 801335c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8013360:	f240 80e0 	bls.w	8013524 <_printf_float+0x3bc>
 8013364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013368:	2200      	movs	r2, #0
 801336a:	2300      	movs	r3, #0
 801336c:	f7ed fbac 	bl	8000ac8 <__aeabi_dcmpeq>
 8013370:	2800      	cmp	r0, #0
 8013372:	d034      	beq.n	80133de <_printf_float+0x276>
 8013374:	4a37      	ldr	r2, [pc, #220]	; (8013454 <_printf_float+0x2ec>)
 8013376:	2301      	movs	r3, #1
 8013378:	4631      	mov	r1, r6
 801337a:	4628      	mov	r0, r5
 801337c:	47b8      	blx	r7
 801337e:	3001      	adds	r0, #1
 8013380:	f43f af51 	beq.w	8013226 <_printf_float+0xbe>
 8013384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013388:	429a      	cmp	r2, r3
 801338a:	db02      	blt.n	8013392 <_printf_float+0x22a>
 801338c:	6823      	ldr	r3, [r4, #0]
 801338e:	07d8      	lsls	r0, r3, #31
 8013390:	d510      	bpl.n	80133b4 <_printf_float+0x24c>
 8013392:	ee18 3a10 	vmov	r3, s16
 8013396:	4652      	mov	r2, sl
 8013398:	4631      	mov	r1, r6
 801339a:	4628      	mov	r0, r5
 801339c:	47b8      	blx	r7
 801339e:	3001      	adds	r0, #1
 80133a0:	f43f af41 	beq.w	8013226 <_printf_float+0xbe>
 80133a4:	f04f 0800 	mov.w	r8, #0
 80133a8:	f104 091a 	add.w	r9, r4, #26
 80133ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80133ae:	3b01      	subs	r3, #1
 80133b0:	4543      	cmp	r3, r8
 80133b2:	dc09      	bgt.n	80133c8 <_printf_float+0x260>
 80133b4:	6823      	ldr	r3, [r4, #0]
 80133b6:	079b      	lsls	r3, r3, #30
 80133b8:	f100 8107 	bmi.w	80135ca <_printf_float+0x462>
 80133bc:	68e0      	ldr	r0, [r4, #12]
 80133be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80133c0:	4298      	cmp	r0, r3
 80133c2:	bfb8      	it	lt
 80133c4:	4618      	movlt	r0, r3
 80133c6:	e730      	b.n	801322a <_printf_float+0xc2>
 80133c8:	2301      	movs	r3, #1
 80133ca:	464a      	mov	r2, r9
 80133cc:	4631      	mov	r1, r6
 80133ce:	4628      	mov	r0, r5
 80133d0:	47b8      	blx	r7
 80133d2:	3001      	adds	r0, #1
 80133d4:	f43f af27 	beq.w	8013226 <_printf_float+0xbe>
 80133d8:	f108 0801 	add.w	r8, r8, #1
 80133dc:	e7e6      	b.n	80133ac <_printf_float+0x244>
 80133de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	dc39      	bgt.n	8013458 <_printf_float+0x2f0>
 80133e4:	4a1b      	ldr	r2, [pc, #108]	; (8013454 <_printf_float+0x2ec>)
 80133e6:	2301      	movs	r3, #1
 80133e8:	4631      	mov	r1, r6
 80133ea:	4628      	mov	r0, r5
 80133ec:	47b8      	blx	r7
 80133ee:	3001      	adds	r0, #1
 80133f0:	f43f af19 	beq.w	8013226 <_printf_float+0xbe>
 80133f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80133f8:	4313      	orrs	r3, r2
 80133fa:	d102      	bne.n	8013402 <_printf_float+0x29a>
 80133fc:	6823      	ldr	r3, [r4, #0]
 80133fe:	07d9      	lsls	r1, r3, #31
 8013400:	d5d8      	bpl.n	80133b4 <_printf_float+0x24c>
 8013402:	ee18 3a10 	vmov	r3, s16
 8013406:	4652      	mov	r2, sl
 8013408:	4631      	mov	r1, r6
 801340a:	4628      	mov	r0, r5
 801340c:	47b8      	blx	r7
 801340e:	3001      	adds	r0, #1
 8013410:	f43f af09 	beq.w	8013226 <_printf_float+0xbe>
 8013414:	f04f 0900 	mov.w	r9, #0
 8013418:	f104 0a1a 	add.w	sl, r4, #26
 801341c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801341e:	425b      	negs	r3, r3
 8013420:	454b      	cmp	r3, r9
 8013422:	dc01      	bgt.n	8013428 <_printf_float+0x2c0>
 8013424:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013426:	e792      	b.n	801334e <_printf_float+0x1e6>
 8013428:	2301      	movs	r3, #1
 801342a:	4652      	mov	r2, sl
 801342c:	4631      	mov	r1, r6
 801342e:	4628      	mov	r0, r5
 8013430:	47b8      	blx	r7
 8013432:	3001      	adds	r0, #1
 8013434:	f43f aef7 	beq.w	8013226 <_printf_float+0xbe>
 8013438:	f109 0901 	add.w	r9, r9, #1
 801343c:	e7ee      	b.n	801341c <_printf_float+0x2b4>
 801343e:	bf00      	nop
 8013440:	7fefffff 	.word	0x7fefffff
 8013444:	08017ff1 	.word	0x08017ff1
 8013448:	08017ff5 	.word	0x08017ff5
 801344c:	08017ff9 	.word	0x08017ff9
 8013450:	08017ffd 	.word	0x08017ffd
 8013454:	08018001 	.word	0x08018001
 8013458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801345a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801345c:	429a      	cmp	r2, r3
 801345e:	bfa8      	it	ge
 8013460:	461a      	movge	r2, r3
 8013462:	2a00      	cmp	r2, #0
 8013464:	4691      	mov	r9, r2
 8013466:	dc37      	bgt.n	80134d8 <_printf_float+0x370>
 8013468:	f04f 0b00 	mov.w	fp, #0
 801346c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013470:	f104 021a 	add.w	r2, r4, #26
 8013474:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8013476:	9305      	str	r3, [sp, #20]
 8013478:	eba3 0309 	sub.w	r3, r3, r9
 801347c:	455b      	cmp	r3, fp
 801347e:	dc33      	bgt.n	80134e8 <_printf_float+0x380>
 8013480:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8013484:	429a      	cmp	r2, r3
 8013486:	db3b      	blt.n	8013500 <_printf_float+0x398>
 8013488:	6823      	ldr	r3, [r4, #0]
 801348a:	07da      	lsls	r2, r3, #31
 801348c:	d438      	bmi.n	8013500 <_printf_float+0x398>
 801348e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8013492:	eba2 0903 	sub.w	r9, r2, r3
 8013496:	9b05      	ldr	r3, [sp, #20]
 8013498:	1ad2      	subs	r2, r2, r3
 801349a:	4591      	cmp	r9, r2
 801349c:	bfa8      	it	ge
 801349e:	4691      	movge	r9, r2
 80134a0:	f1b9 0f00 	cmp.w	r9, #0
 80134a4:	dc35      	bgt.n	8013512 <_printf_float+0x3aa>
 80134a6:	f04f 0800 	mov.w	r8, #0
 80134aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80134ae:	f104 0a1a 	add.w	sl, r4, #26
 80134b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80134b6:	1a9b      	subs	r3, r3, r2
 80134b8:	eba3 0309 	sub.w	r3, r3, r9
 80134bc:	4543      	cmp	r3, r8
 80134be:	f77f af79 	ble.w	80133b4 <_printf_float+0x24c>
 80134c2:	2301      	movs	r3, #1
 80134c4:	4652      	mov	r2, sl
 80134c6:	4631      	mov	r1, r6
 80134c8:	4628      	mov	r0, r5
 80134ca:	47b8      	blx	r7
 80134cc:	3001      	adds	r0, #1
 80134ce:	f43f aeaa 	beq.w	8013226 <_printf_float+0xbe>
 80134d2:	f108 0801 	add.w	r8, r8, #1
 80134d6:	e7ec      	b.n	80134b2 <_printf_float+0x34a>
 80134d8:	4613      	mov	r3, r2
 80134da:	4631      	mov	r1, r6
 80134dc:	4642      	mov	r2, r8
 80134de:	4628      	mov	r0, r5
 80134e0:	47b8      	blx	r7
 80134e2:	3001      	adds	r0, #1
 80134e4:	d1c0      	bne.n	8013468 <_printf_float+0x300>
 80134e6:	e69e      	b.n	8013226 <_printf_float+0xbe>
 80134e8:	2301      	movs	r3, #1
 80134ea:	4631      	mov	r1, r6
 80134ec:	4628      	mov	r0, r5
 80134ee:	9205      	str	r2, [sp, #20]
 80134f0:	47b8      	blx	r7
 80134f2:	3001      	adds	r0, #1
 80134f4:	f43f ae97 	beq.w	8013226 <_printf_float+0xbe>
 80134f8:	9a05      	ldr	r2, [sp, #20]
 80134fa:	f10b 0b01 	add.w	fp, fp, #1
 80134fe:	e7b9      	b.n	8013474 <_printf_float+0x30c>
 8013500:	ee18 3a10 	vmov	r3, s16
 8013504:	4652      	mov	r2, sl
 8013506:	4631      	mov	r1, r6
 8013508:	4628      	mov	r0, r5
 801350a:	47b8      	blx	r7
 801350c:	3001      	adds	r0, #1
 801350e:	d1be      	bne.n	801348e <_printf_float+0x326>
 8013510:	e689      	b.n	8013226 <_printf_float+0xbe>
 8013512:	9a05      	ldr	r2, [sp, #20]
 8013514:	464b      	mov	r3, r9
 8013516:	4442      	add	r2, r8
 8013518:	4631      	mov	r1, r6
 801351a:	4628      	mov	r0, r5
 801351c:	47b8      	blx	r7
 801351e:	3001      	adds	r0, #1
 8013520:	d1c1      	bne.n	80134a6 <_printf_float+0x33e>
 8013522:	e680      	b.n	8013226 <_printf_float+0xbe>
 8013524:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8013526:	2a01      	cmp	r2, #1
 8013528:	dc01      	bgt.n	801352e <_printf_float+0x3c6>
 801352a:	07db      	lsls	r3, r3, #31
 801352c:	d53a      	bpl.n	80135a4 <_printf_float+0x43c>
 801352e:	2301      	movs	r3, #1
 8013530:	4642      	mov	r2, r8
 8013532:	4631      	mov	r1, r6
 8013534:	4628      	mov	r0, r5
 8013536:	47b8      	blx	r7
 8013538:	3001      	adds	r0, #1
 801353a:	f43f ae74 	beq.w	8013226 <_printf_float+0xbe>
 801353e:	ee18 3a10 	vmov	r3, s16
 8013542:	4652      	mov	r2, sl
 8013544:	4631      	mov	r1, r6
 8013546:	4628      	mov	r0, r5
 8013548:	47b8      	blx	r7
 801354a:	3001      	adds	r0, #1
 801354c:	f43f ae6b 	beq.w	8013226 <_printf_float+0xbe>
 8013550:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8013554:	2200      	movs	r2, #0
 8013556:	2300      	movs	r3, #0
 8013558:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 801355c:	f7ed fab4 	bl	8000ac8 <__aeabi_dcmpeq>
 8013560:	b9d8      	cbnz	r0, 801359a <_printf_float+0x432>
 8013562:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013566:	f108 0201 	add.w	r2, r8, #1
 801356a:	4631      	mov	r1, r6
 801356c:	4628      	mov	r0, r5
 801356e:	47b8      	blx	r7
 8013570:	3001      	adds	r0, #1
 8013572:	d10e      	bne.n	8013592 <_printf_float+0x42a>
 8013574:	e657      	b.n	8013226 <_printf_float+0xbe>
 8013576:	2301      	movs	r3, #1
 8013578:	4652      	mov	r2, sl
 801357a:	4631      	mov	r1, r6
 801357c:	4628      	mov	r0, r5
 801357e:	47b8      	blx	r7
 8013580:	3001      	adds	r0, #1
 8013582:	f43f ae50 	beq.w	8013226 <_printf_float+0xbe>
 8013586:	f108 0801 	add.w	r8, r8, #1
 801358a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801358c:	3b01      	subs	r3, #1
 801358e:	4543      	cmp	r3, r8
 8013590:	dcf1      	bgt.n	8013576 <_printf_float+0x40e>
 8013592:	464b      	mov	r3, r9
 8013594:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8013598:	e6da      	b.n	8013350 <_printf_float+0x1e8>
 801359a:	f04f 0800 	mov.w	r8, #0
 801359e:	f104 0a1a 	add.w	sl, r4, #26
 80135a2:	e7f2      	b.n	801358a <_printf_float+0x422>
 80135a4:	2301      	movs	r3, #1
 80135a6:	4642      	mov	r2, r8
 80135a8:	e7df      	b.n	801356a <_printf_float+0x402>
 80135aa:	2301      	movs	r3, #1
 80135ac:	464a      	mov	r2, r9
 80135ae:	4631      	mov	r1, r6
 80135b0:	4628      	mov	r0, r5
 80135b2:	47b8      	blx	r7
 80135b4:	3001      	adds	r0, #1
 80135b6:	f43f ae36 	beq.w	8013226 <_printf_float+0xbe>
 80135ba:	f108 0801 	add.w	r8, r8, #1
 80135be:	68e3      	ldr	r3, [r4, #12]
 80135c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80135c2:	1a5b      	subs	r3, r3, r1
 80135c4:	4543      	cmp	r3, r8
 80135c6:	dcf0      	bgt.n	80135aa <_printf_float+0x442>
 80135c8:	e6f8      	b.n	80133bc <_printf_float+0x254>
 80135ca:	f04f 0800 	mov.w	r8, #0
 80135ce:	f104 0919 	add.w	r9, r4, #25
 80135d2:	e7f4      	b.n	80135be <_printf_float+0x456>

080135d4 <_printf_common>:
 80135d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135d8:	4616      	mov	r6, r2
 80135da:	4699      	mov	r9, r3
 80135dc:	688a      	ldr	r2, [r1, #8]
 80135de:	690b      	ldr	r3, [r1, #16]
 80135e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80135e4:	4293      	cmp	r3, r2
 80135e6:	bfb8      	it	lt
 80135e8:	4613      	movlt	r3, r2
 80135ea:	6033      	str	r3, [r6, #0]
 80135ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80135f0:	4607      	mov	r7, r0
 80135f2:	460c      	mov	r4, r1
 80135f4:	b10a      	cbz	r2, 80135fa <_printf_common+0x26>
 80135f6:	3301      	adds	r3, #1
 80135f8:	6033      	str	r3, [r6, #0]
 80135fa:	6823      	ldr	r3, [r4, #0]
 80135fc:	0699      	lsls	r1, r3, #26
 80135fe:	bf42      	ittt	mi
 8013600:	6833      	ldrmi	r3, [r6, #0]
 8013602:	3302      	addmi	r3, #2
 8013604:	6033      	strmi	r3, [r6, #0]
 8013606:	6825      	ldr	r5, [r4, #0]
 8013608:	f015 0506 	ands.w	r5, r5, #6
 801360c:	d106      	bne.n	801361c <_printf_common+0x48>
 801360e:	f104 0a19 	add.w	sl, r4, #25
 8013612:	68e3      	ldr	r3, [r4, #12]
 8013614:	6832      	ldr	r2, [r6, #0]
 8013616:	1a9b      	subs	r3, r3, r2
 8013618:	42ab      	cmp	r3, r5
 801361a:	dc26      	bgt.n	801366a <_printf_common+0x96>
 801361c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013620:	1e13      	subs	r3, r2, #0
 8013622:	6822      	ldr	r2, [r4, #0]
 8013624:	bf18      	it	ne
 8013626:	2301      	movne	r3, #1
 8013628:	0692      	lsls	r2, r2, #26
 801362a:	d42b      	bmi.n	8013684 <_printf_common+0xb0>
 801362c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013630:	4649      	mov	r1, r9
 8013632:	4638      	mov	r0, r7
 8013634:	47c0      	blx	r8
 8013636:	3001      	adds	r0, #1
 8013638:	d01e      	beq.n	8013678 <_printf_common+0xa4>
 801363a:	6823      	ldr	r3, [r4, #0]
 801363c:	6922      	ldr	r2, [r4, #16]
 801363e:	f003 0306 	and.w	r3, r3, #6
 8013642:	2b04      	cmp	r3, #4
 8013644:	bf02      	ittt	eq
 8013646:	68e5      	ldreq	r5, [r4, #12]
 8013648:	6833      	ldreq	r3, [r6, #0]
 801364a:	1aed      	subeq	r5, r5, r3
 801364c:	68a3      	ldr	r3, [r4, #8]
 801364e:	bf0c      	ite	eq
 8013650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013654:	2500      	movne	r5, #0
 8013656:	4293      	cmp	r3, r2
 8013658:	bfc4      	itt	gt
 801365a:	1a9b      	subgt	r3, r3, r2
 801365c:	18ed      	addgt	r5, r5, r3
 801365e:	2600      	movs	r6, #0
 8013660:	341a      	adds	r4, #26
 8013662:	42b5      	cmp	r5, r6
 8013664:	d11a      	bne.n	801369c <_printf_common+0xc8>
 8013666:	2000      	movs	r0, #0
 8013668:	e008      	b.n	801367c <_printf_common+0xa8>
 801366a:	2301      	movs	r3, #1
 801366c:	4652      	mov	r2, sl
 801366e:	4649      	mov	r1, r9
 8013670:	4638      	mov	r0, r7
 8013672:	47c0      	blx	r8
 8013674:	3001      	adds	r0, #1
 8013676:	d103      	bne.n	8013680 <_printf_common+0xac>
 8013678:	f04f 30ff 	mov.w	r0, #4294967295
 801367c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013680:	3501      	adds	r5, #1
 8013682:	e7c6      	b.n	8013612 <_printf_common+0x3e>
 8013684:	18e1      	adds	r1, r4, r3
 8013686:	1c5a      	adds	r2, r3, #1
 8013688:	2030      	movs	r0, #48	; 0x30
 801368a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801368e:	4422      	add	r2, r4
 8013690:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013694:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013698:	3302      	adds	r3, #2
 801369a:	e7c7      	b.n	801362c <_printf_common+0x58>
 801369c:	2301      	movs	r3, #1
 801369e:	4622      	mov	r2, r4
 80136a0:	4649      	mov	r1, r9
 80136a2:	4638      	mov	r0, r7
 80136a4:	47c0      	blx	r8
 80136a6:	3001      	adds	r0, #1
 80136a8:	d0e6      	beq.n	8013678 <_printf_common+0xa4>
 80136aa:	3601      	adds	r6, #1
 80136ac:	e7d9      	b.n	8013662 <_printf_common+0x8e>
	...

080136b0 <_printf_i>:
 80136b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80136b4:	7e0f      	ldrb	r7, [r1, #24]
 80136b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80136b8:	2f78      	cmp	r7, #120	; 0x78
 80136ba:	4691      	mov	r9, r2
 80136bc:	4680      	mov	r8, r0
 80136be:	460c      	mov	r4, r1
 80136c0:	469a      	mov	sl, r3
 80136c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80136c6:	d807      	bhi.n	80136d8 <_printf_i+0x28>
 80136c8:	2f62      	cmp	r7, #98	; 0x62
 80136ca:	d80a      	bhi.n	80136e2 <_printf_i+0x32>
 80136cc:	2f00      	cmp	r7, #0
 80136ce:	f000 80d4 	beq.w	801387a <_printf_i+0x1ca>
 80136d2:	2f58      	cmp	r7, #88	; 0x58
 80136d4:	f000 80c0 	beq.w	8013858 <_printf_i+0x1a8>
 80136d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80136dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80136e0:	e03a      	b.n	8013758 <_printf_i+0xa8>
 80136e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80136e6:	2b15      	cmp	r3, #21
 80136e8:	d8f6      	bhi.n	80136d8 <_printf_i+0x28>
 80136ea:	a101      	add	r1, pc, #4	; (adr r1, 80136f0 <_printf_i+0x40>)
 80136ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80136f0:	08013749 	.word	0x08013749
 80136f4:	0801375d 	.word	0x0801375d
 80136f8:	080136d9 	.word	0x080136d9
 80136fc:	080136d9 	.word	0x080136d9
 8013700:	080136d9 	.word	0x080136d9
 8013704:	080136d9 	.word	0x080136d9
 8013708:	0801375d 	.word	0x0801375d
 801370c:	080136d9 	.word	0x080136d9
 8013710:	080136d9 	.word	0x080136d9
 8013714:	080136d9 	.word	0x080136d9
 8013718:	080136d9 	.word	0x080136d9
 801371c:	08013861 	.word	0x08013861
 8013720:	08013789 	.word	0x08013789
 8013724:	0801381b 	.word	0x0801381b
 8013728:	080136d9 	.word	0x080136d9
 801372c:	080136d9 	.word	0x080136d9
 8013730:	08013883 	.word	0x08013883
 8013734:	080136d9 	.word	0x080136d9
 8013738:	08013789 	.word	0x08013789
 801373c:	080136d9 	.word	0x080136d9
 8013740:	080136d9 	.word	0x080136d9
 8013744:	08013823 	.word	0x08013823
 8013748:	682b      	ldr	r3, [r5, #0]
 801374a:	1d1a      	adds	r2, r3, #4
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	602a      	str	r2, [r5, #0]
 8013750:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013754:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013758:	2301      	movs	r3, #1
 801375a:	e09f      	b.n	801389c <_printf_i+0x1ec>
 801375c:	6820      	ldr	r0, [r4, #0]
 801375e:	682b      	ldr	r3, [r5, #0]
 8013760:	0607      	lsls	r7, r0, #24
 8013762:	f103 0104 	add.w	r1, r3, #4
 8013766:	6029      	str	r1, [r5, #0]
 8013768:	d501      	bpl.n	801376e <_printf_i+0xbe>
 801376a:	681e      	ldr	r6, [r3, #0]
 801376c:	e003      	b.n	8013776 <_printf_i+0xc6>
 801376e:	0646      	lsls	r6, r0, #25
 8013770:	d5fb      	bpl.n	801376a <_printf_i+0xba>
 8013772:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013776:	2e00      	cmp	r6, #0
 8013778:	da03      	bge.n	8013782 <_printf_i+0xd2>
 801377a:	232d      	movs	r3, #45	; 0x2d
 801377c:	4276      	negs	r6, r6
 801377e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013782:	485a      	ldr	r0, [pc, #360]	; (80138ec <_printf_i+0x23c>)
 8013784:	230a      	movs	r3, #10
 8013786:	e012      	b.n	80137ae <_printf_i+0xfe>
 8013788:	682b      	ldr	r3, [r5, #0]
 801378a:	6820      	ldr	r0, [r4, #0]
 801378c:	1d19      	adds	r1, r3, #4
 801378e:	6029      	str	r1, [r5, #0]
 8013790:	0605      	lsls	r5, r0, #24
 8013792:	d501      	bpl.n	8013798 <_printf_i+0xe8>
 8013794:	681e      	ldr	r6, [r3, #0]
 8013796:	e002      	b.n	801379e <_printf_i+0xee>
 8013798:	0641      	lsls	r1, r0, #25
 801379a:	d5fb      	bpl.n	8013794 <_printf_i+0xe4>
 801379c:	881e      	ldrh	r6, [r3, #0]
 801379e:	4853      	ldr	r0, [pc, #332]	; (80138ec <_printf_i+0x23c>)
 80137a0:	2f6f      	cmp	r7, #111	; 0x6f
 80137a2:	bf0c      	ite	eq
 80137a4:	2308      	moveq	r3, #8
 80137a6:	230a      	movne	r3, #10
 80137a8:	2100      	movs	r1, #0
 80137aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80137ae:	6865      	ldr	r5, [r4, #4]
 80137b0:	60a5      	str	r5, [r4, #8]
 80137b2:	2d00      	cmp	r5, #0
 80137b4:	bfa2      	ittt	ge
 80137b6:	6821      	ldrge	r1, [r4, #0]
 80137b8:	f021 0104 	bicge.w	r1, r1, #4
 80137bc:	6021      	strge	r1, [r4, #0]
 80137be:	b90e      	cbnz	r6, 80137c4 <_printf_i+0x114>
 80137c0:	2d00      	cmp	r5, #0
 80137c2:	d04b      	beq.n	801385c <_printf_i+0x1ac>
 80137c4:	4615      	mov	r5, r2
 80137c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80137ca:	fb03 6711 	mls	r7, r3, r1, r6
 80137ce:	5dc7      	ldrb	r7, [r0, r7]
 80137d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80137d4:	4637      	mov	r7, r6
 80137d6:	42bb      	cmp	r3, r7
 80137d8:	460e      	mov	r6, r1
 80137da:	d9f4      	bls.n	80137c6 <_printf_i+0x116>
 80137dc:	2b08      	cmp	r3, #8
 80137de:	d10b      	bne.n	80137f8 <_printf_i+0x148>
 80137e0:	6823      	ldr	r3, [r4, #0]
 80137e2:	07de      	lsls	r6, r3, #31
 80137e4:	d508      	bpl.n	80137f8 <_printf_i+0x148>
 80137e6:	6923      	ldr	r3, [r4, #16]
 80137e8:	6861      	ldr	r1, [r4, #4]
 80137ea:	4299      	cmp	r1, r3
 80137ec:	bfde      	ittt	le
 80137ee:	2330      	movle	r3, #48	; 0x30
 80137f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80137f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80137f8:	1b52      	subs	r2, r2, r5
 80137fa:	6122      	str	r2, [r4, #16]
 80137fc:	f8cd a000 	str.w	sl, [sp]
 8013800:	464b      	mov	r3, r9
 8013802:	aa03      	add	r2, sp, #12
 8013804:	4621      	mov	r1, r4
 8013806:	4640      	mov	r0, r8
 8013808:	f7ff fee4 	bl	80135d4 <_printf_common>
 801380c:	3001      	adds	r0, #1
 801380e:	d14a      	bne.n	80138a6 <_printf_i+0x1f6>
 8013810:	f04f 30ff 	mov.w	r0, #4294967295
 8013814:	b004      	add	sp, #16
 8013816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801381a:	6823      	ldr	r3, [r4, #0]
 801381c:	f043 0320 	orr.w	r3, r3, #32
 8013820:	6023      	str	r3, [r4, #0]
 8013822:	4833      	ldr	r0, [pc, #204]	; (80138f0 <_printf_i+0x240>)
 8013824:	2778      	movs	r7, #120	; 0x78
 8013826:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801382a:	6823      	ldr	r3, [r4, #0]
 801382c:	6829      	ldr	r1, [r5, #0]
 801382e:	061f      	lsls	r7, r3, #24
 8013830:	f851 6b04 	ldr.w	r6, [r1], #4
 8013834:	d402      	bmi.n	801383c <_printf_i+0x18c>
 8013836:	065f      	lsls	r7, r3, #25
 8013838:	bf48      	it	mi
 801383a:	b2b6      	uxthmi	r6, r6
 801383c:	07df      	lsls	r7, r3, #31
 801383e:	bf48      	it	mi
 8013840:	f043 0320 	orrmi.w	r3, r3, #32
 8013844:	6029      	str	r1, [r5, #0]
 8013846:	bf48      	it	mi
 8013848:	6023      	strmi	r3, [r4, #0]
 801384a:	b91e      	cbnz	r6, 8013854 <_printf_i+0x1a4>
 801384c:	6823      	ldr	r3, [r4, #0]
 801384e:	f023 0320 	bic.w	r3, r3, #32
 8013852:	6023      	str	r3, [r4, #0]
 8013854:	2310      	movs	r3, #16
 8013856:	e7a7      	b.n	80137a8 <_printf_i+0xf8>
 8013858:	4824      	ldr	r0, [pc, #144]	; (80138ec <_printf_i+0x23c>)
 801385a:	e7e4      	b.n	8013826 <_printf_i+0x176>
 801385c:	4615      	mov	r5, r2
 801385e:	e7bd      	b.n	80137dc <_printf_i+0x12c>
 8013860:	682b      	ldr	r3, [r5, #0]
 8013862:	6826      	ldr	r6, [r4, #0]
 8013864:	6961      	ldr	r1, [r4, #20]
 8013866:	1d18      	adds	r0, r3, #4
 8013868:	6028      	str	r0, [r5, #0]
 801386a:	0635      	lsls	r5, r6, #24
 801386c:	681b      	ldr	r3, [r3, #0]
 801386e:	d501      	bpl.n	8013874 <_printf_i+0x1c4>
 8013870:	6019      	str	r1, [r3, #0]
 8013872:	e002      	b.n	801387a <_printf_i+0x1ca>
 8013874:	0670      	lsls	r0, r6, #25
 8013876:	d5fb      	bpl.n	8013870 <_printf_i+0x1c0>
 8013878:	8019      	strh	r1, [r3, #0]
 801387a:	2300      	movs	r3, #0
 801387c:	6123      	str	r3, [r4, #16]
 801387e:	4615      	mov	r5, r2
 8013880:	e7bc      	b.n	80137fc <_printf_i+0x14c>
 8013882:	682b      	ldr	r3, [r5, #0]
 8013884:	1d1a      	adds	r2, r3, #4
 8013886:	602a      	str	r2, [r5, #0]
 8013888:	681d      	ldr	r5, [r3, #0]
 801388a:	6862      	ldr	r2, [r4, #4]
 801388c:	2100      	movs	r1, #0
 801388e:	4628      	mov	r0, r5
 8013890:	f7ec fc9e 	bl	80001d0 <memchr>
 8013894:	b108      	cbz	r0, 801389a <_printf_i+0x1ea>
 8013896:	1b40      	subs	r0, r0, r5
 8013898:	6060      	str	r0, [r4, #4]
 801389a:	6863      	ldr	r3, [r4, #4]
 801389c:	6123      	str	r3, [r4, #16]
 801389e:	2300      	movs	r3, #0
 80138a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80138a4:	e7aa      	b.n	80137fc <_printf_i+0x14c>
 80138a6:	6923      	ldr	r3, [r4, #16]
 80138a8:	462a      	mov	r2, r5
 80138aa:	4649      	mov	r1, r9
 80138ac:	4640      	mov	r0, r8
 80138ae:	47d0      	blx	sl
 80138b0:	3001      	adds	r0, #1
 80138b2:	d0ad      	beq.n	8013810 <_printf_i+0x160>
 80138b4:	6823      	ldr	r3, [r4, #0]
 80138b6:	079b      	lsls	r3, r3, #30
 80138b8:	d413      	bmi.n	80138e2 <_printf_i+0x232>
 80138ba:	68e0      	ldr	r0, [r4, #12]
 80138bc:	9b03      	ldr	r3, [sp, #12]
 80138be:	4298      	cmp	r0, r3
 80138c0:	bfb8      	it	lt
 80138c2:	4618      	movlt	r0, r3
 80138c4:	e7a6      	b.n	8013814 <_printf_i+0x164>
 80138c6:	2301      	movs	r3, #1
 80138c8:	4632      	mov	r2, r6
 80138ca:	4649      	mov	r1, r9
 80138cc:	4640      	mov	r0, r8
 80138ce:	47d0      	blx	sl
 80138d0:	3001      	adds	r0, #1
 80138d2:	d09d      	beq.n	8013810 <_printf_i+0x160>
 80138d4:	3501      	adds	r5, #1
 80138d6:	68e3      	ldr	r3, [r4, #12]
 80138d8:	9903      	ldr	r1, [sp, #12]
 80138da:	1a5b      	subs	r3, r3, r1
 80138dc:	42ab      	cmp	r3, r5
 80138de:	dcf2      	bgt.n	80138c6 <_printf_i+0x216>
 80138e0:	e7eb      	b.n	80138ba <_printf_i+0x20a>
 80138e2:	2500      	movs	r5, #0
 80138e4:	f104 0619 	add.w	r6, r4, #25
 80138e8:	e7f5      	b.n	80138d6 <_printf_i+0x226>
 80138ea:	bf00      	nop
 80138ec:	08018003 	.word	0x08018003
 80138f0:	08018014 	.word	0x08018014

080138f4 <std>:
 80138f4:	2300      	movs	r3, #0
 80138f6:	b510      	push	{r4, lr}
 80138f8:	4604      	mov	r4, r0
 80138fa:	e9c0 3300 	strd	r3, r3, [r0]
 80138fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013902:	6083      	str	r3, [r0, #8]
 8013904:	8181      	strh	r1, [r0, #12]
 8013906:	6643      	str	r3, [r0, #100]	; 0x64
 8013908:	81c2      	strh	r2, [r0, #14]
 801390a:	6183      	str	r3, [r0, #24]
 801390c:	4619      	mov	r1, r3
 801390e:	2208      	movs	r2, #8
 8013910:	305c      	adds	r0, #92	; 0x5c
 8013912:	f000 fa17 	bl	8013d44 <memset>
 8013916:	4b0d      	ldr	r3, [pc, #52]	; (801394c <std+0x58>)
 8013918:	6263      	str	r3, [r4, #36]	; 0x24
 801391a:	4b0d      	ldr	r3, [pc, #52]	; (8013950 <std+0x5c>)
 801391c:	62a3      	str	r3, [r4, #40]	; 0x28
 801391e:	4b0d      	ldr	r3, [pc, #52]	; (8013954 <std+0x60>)
 8013920:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013922:	4b0d      	ldr	r3, [pc, #52]	; (8013958 <std+0x64>)
 8013924:	6323      	str	r3, [r4, #48]	; 0x30
 8013926:	4b0d      	ldr	r3, [pc, #52]	; (801395c <std+0x68>)
 8013928:	6224      	str	r4, [r4, #32]
 801392a:	429c      	cmp	r4, r3
 801392c:	d006      	beq.n	801393c <std+0x48>
 801392e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8013932:	4294      	cmp	r4, r2
 8013934:	d002      	beq.n	801393c <std+0x48>
 8013936:	33d0      	adds	r3, #208	; 0xd0
 8013938:	429c      	cmp	r4, r3
 801393a:	d105      	bne.n	8013948 <std+0x54>
 801393c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013944:	f000 ba98 	b.w	8013e78 <__retarget_lock_init_recursive>
 8013948:	bd10      	pop	{r4, pc}
 801394a:	bf00      	nop
 801394c:	08013b95 	.word	0x08013b95
 8013950:	08013bb7 	.word	0x08013bb7
 8013954:	08013bef 	.word	0x08013bef
 8013958:	08013c13 	.word	0x08013c13
 801395c:	20001454 	.word	0x20001454

08013960 <stdio_exit_handler>:
 8013960:	4a02      	ldr	r2, [pc, #8]	; (801396c <stdio_exit_handler+0xc>)
 8013962:	4903      	ldr	r1, [pc, #12]	; (8013970 <stdio_exit_handler+0x10>)
 8013964:	4803      	ldr	r0, [pc, #12]	; (8013974 <stdio_exit_handler+0x14>)
 8013966:	f000 b869 	b.w	8013a3c <_fwalk_sglue>
 801396a:	bf00      	nop
 801396c:	20000058 	.word	0x20000058
 8013970:	08016431 	.word	0x08016431
 8013974:	200001d0 	.word	0x200001d0

08013978 <cleanup_stdio>:
 8013978:	6841      	ldr	r1, [r0, #4]
 801397a:	4b0c      	ldr	r3, [pc, #48]	; (80139ac <cleanup_stdio+0x34>)
 801397c:	4299      	cmp	r1, r3
 801397e:	b510      	push	{r4, lr}
 8013980:	4604      	mov	r4, r0
 8013982:	d001      	beq.n	8013988 <cleanup_stdio+0x10>
 8013984:	f002 fd54 	bl	8016430 <_fflush_r>
 8013988:	68a1      	ldr	r1, [r4, #8]
 801398a:	4b09      	ldr	r3, [pc, #36]	; (80139b0 <cleanup_stdio+0x38>)
 801398c:	4299      	cmp	r1, r3
 801398e:	d002      	beq.n	8013996 <cleanup_stdio+0x1e>
 8013990:	4620      	mov	r0, r4
 8013992:	f002 fd4d 	bl	8016430 <_fflush_r>
 8013996:	68e1      	ldr	r1, [r4, #12]
 8013998:	4b06      	ldr	r3, [pc, #24]	; (80139b4 <cleanup_stdio+0x3c>)
 801399a:	4299      	cmp	r1, r3
 801399c:	d004      	beq.n	80139a8 <cleanup_stdio+0x30>
 801399e:	4620      	mov	r0, r4
 80139a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139a4:	f002 bd44 	b.w	8016430 <_fflush_r>
 80139a8:	bd10      	pop	{r4, pc}
 80139aa:	bf00      	nop
 80139ac:	20001454 	.word	0x20001454
 80139b0:	200014bc 	.word	0x200014bc
 80139b4:	20001524 	.word	0x20001524

080139b8 <global_stdio_init.part.0>:
 80139b8:	b510      	push	{r4, lr}
 80139ba:	4b0b      	ldr	r3, [pc, #44]	; (80139e8 <global_stdio_init.part.0+0x30>)
 80139bc:	4c0b      	ldr	r4, [pc, #44]	; (80139ec <global_stdio_init.part.0+0x34>)
 80139be:	4a0c      	ldr	r2, [pc, #48]	; (80139f0 <global_stdio_init.part.0+0x38>)
 80139c0:	601a      	str	r2, [r3, #0]
 80139c2:	4620      	mov	r0, r4
 80139c4:	2200      	movs	r2, #0
 80139c6:	2104      	movs	r1, #4
 80139c8:	f7ff ff94 	bl	80138f4 <std>
 80139cc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80139d0:	2201      	movs	r2, #1
 80139d2:	2109      	movs	r1, #9
 80139d4:	f7ff ff8e 	bl	80138f4 <std>
 80139d8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80139dc:	2202      	movs	r2, #2
 80139de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80139e2:	2112      	movs	r1, #18
 80139e4:	f7ff bf86 	b.w	80138f4 <std>
 80139e8:	2000158c 	.word	0x2000158c
 80139ec:	20001454 	.word	0x20001454
 80139f0:	08013961 	.word	0x08013961

080139f4 <__sfp_lock_acquire>:
 80139f4:	4801      	ldr	r0, [pc, #4]	; (80139fc <__sfp_lock_acquire+0x8>)
 80139f6:	f000 ba40 	b.w	8013e7a <__retarget_lock_acquire_recursive>
 80139fa:	bf00      	nop
 80139fc:	20001595 	.word	0x20001595

08013a00 <__sfp_lock_release>:
 8013a00:	4801      	ldr	r0, [pc, #4]	; (8013a08 <__sfp_lock_release+0x8>)
 8013a02:	f000 ba3b 	b.w	8013e7c <__retarget_lock_release_recursive>
 8013a06:	bf00      	nop
 8013a08:	20001595 	.word	0x20001595

08013a0c <__sinit>:
 8013a0c:	b510      	push	{r4, lr}
 8013a0e:	4604      	mov	r4, r0
 8013a10:	f7ff fff0 	bl	80139f4 <__sfp_lock_acquire>
 8013a14:	6a23      	ldr	r3, [r4, #32]
 8013a16:	b11b      	cbz	r3, 8013a20 <__sinit+0x14>
 8013a18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013a1c:	f7ff bff0 	b.w	8013a00 <__sfp_lock_release>
 8013a20:	4b04      	ldr	r3, [pc, #16]	; (8013a34 <__sinit+0x28>)
 8013a22:	6223      	str	r3, [r4, #32]
 8013a24:	4b04      	ldr	r3, [pc, #16]	; (8013a38 <__sinit+0x2c>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d1f5      	bne.n	8013a18 <__sinit+0xc>
 8013a2c:	f7ff ffc4 	bl	80139b8 <global_stdio_init.part.0>
 8013a30:	e7f2      	b.n	8013a18 <__sinit+0xc>
 8013a32:	bf00      	nop
 8013a34:	08013979 	.word	0x08013979
 8013a38:	2000158c 	.word	0x2000158c

08013a3c <_fwalk_sglue>:
 8013a3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a40:	4607      	mov	r7, r0
 8013a42:	4688      	mov	r8, r1
 8013a44:	4614      	mov	r4, r2
 8013a46:	2600      	movs	r6, #0
 8013a48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013a4c:	f1b9 0901 	subs.w	r9, r9, #1
 8013a50:	d505      	bpl.n	8013a5e <_fwalk_sglue+0x22>
 8013a52:	6824      	ldr	r4, [r4, #0]
 8013a54:	2c00      	cmp	r4, #0
 8013a56:	d1f7      	bne.n	8013a48 <_fwalk_sglue+0xc>
 8013a58:	4630      	mov	r0, r6
 8013a5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a5e:	89ab      	ldrh	r3, [r5, #12]
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	d907      	bls.n	8013a74 <_fwalk_sglue+0x38>
 8013a64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013a68:	3301      	adds	r3, #1
 8013a6a:	d003      	beq.n	8013a74 <_fwalk_sglue+0x38>
 8013a6c:	4629      	mov	r1, r5
 8013a6e:	4638      	mov	r0, r7
 8013a70:	47c0      	blx	r8
 8013a72:	4306      	orrs	r6, r0
 8013a74:	3568      	adds	r5, #104	; 0x68
 8013a76:	e7e9      	b.n	8013a4c <_fwalk_sglue+0x10>

08013a78 <iprintf>:
 8013a78:	b40f      	push	{r0, r1, r2, r3}
 8013a7a:	b507      	push	{r0, r1, r2, lr}
 8013a7c:	4906      	ldr	r1, [pc, #24]	; (8013a98 <iprintf+0x20>)
 8013a7e:	ab04      	add	r3, sp, #16
 8013a80:	6808      	ldr	r0, [r1, #0]
 8013a82:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a86:	6881      	ldr	r1, [r0, #8]
 8013a88:	9301      	str	r3, [sp, #4]
 8013a8a:	f002 fb31 	bl	80160f0 <_vfiprintf_r>
 8013a8e:	b003      	add	sp, #12
 8013a90:	f85d eb04 	ldr.w	lr, [sp], #4
 8013a94:	b004      	add	sp, #16
 8013a96:	4770      	bx	lr
 8013a98:	2000021c 	.word	0x2000021c

08013a9c <_puts_r>:
 8013a9c:	6a03      	ldr	r3, [r0, #32]
 8013a9e:	b570      	push	{r4, r5, r6, lr}
 8013aa0:	6884      	ldr	r4, [r0, #8]
 8013aa2:	4605      	mov	r5, r0
 8013aa4:	460e      	mov	r6, r1
 8013aa6:	b90b      	cbnz	r3, 8013aac <_puts_r+0x10>
 8013aa8:	f7ff ffb0 	bl	8013a0c <__sinit>
 8013aac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013aae:	07db      	lsls	r3, r3, #31
 8013ab0:	d405      	bmi.n	8013abe <_puts_r+0x22>
 8013ab2:	89a3      	ldrh	r3, [r4, #12]
 8013ab4:	0598      	lsls	r0, r3, #22
 8013ab6:	d402      	bmi.n	8013abe <_puts_r+0x22>
 8013ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013aba:	f000 f9de 	bl	8013e7a <__retarget_lock_acquire_recursive>
 8013abe:	89a3      	ldrh	r3, [r4, #12]
 8013ac0:	0719      	lsls	r1, r3, #28
 8013ac2:	d513      	bpl.n	8013aec <_puts_r+0x50>
 8013ac4:	6923      	ldr	r3, [r4, #16]
 8013ac6:	b18b      	cbz	r3, 8013aec <_puts_r+0x50>
 8013ac8:	3e01      	subs	r6, #1
 8013aca:	68a3      	ldr	r3, [r4, #8]
 8013acc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8013ad0:	3b01      	subs	r3, #1
 8013ad2:	60a3      	str	r3, [r4, #8]
 8013ad4:	b9e9      	cbnz	r1, 8013b12 <_puts_r+0x76>
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	da2e      	bge.n	8013b38 <_puts_r+0x9c>
 8013ada:	4622      	mov	r2, r4
 8013adc:	210a      	movs	r1, #10
 8013ade:	4628      	mov	r0, r5
 8013ae0:	f000 f89b 	bl	8013c1a <__swbuf_r>
 8013ae4:	3001      	adds	r0, #1
 8013ae6:	d007      	beq.n	8013af8 <_puts_r+0x5c>
 8013ae8:	250a      	movs	r5, #10
 8013aea:	e007      	b.n	8013afc <_puts_r+0x60>
 8013aec:	4621      	mov	r1, r4
 8013aee:	4628      	mov	r0, r5
 8013af0:	f000 f8d0 	bl	8013c94 <__swsetup_r>
 8013af4:	2800      	cmp	r0, #0
 8013af6:	d0e7      	beq.n	8013ac8 <_puts_r+0x2c>
 8013af8:	f04f 35ff 	mov.w	r5, #4294967295
 8013afc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013afe:	07da      	lsls	r2, r3, #31
 8013b00:	d405      	bmi.n	8013b0e <_puts_r+0x72>
 8013b02:	89a3      	ldrh	r3, [r4, #12]
 8013b04:	059b      	lsls	r3, r3, #22
 8013b06:	d402      	bmi.n	8013b0e <_puts_r+0x72>
 8013b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013b0a:	f000 f9b7 	bl	8013e7c <__retarget_lock_release_recursive>
 8013b0e:	4628      	mov	r0, r5
 8013b10:	bd70      	pop	{r4, r5, r6, pc}
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	da04      	bge.n	8013b20 <_puts_r+0x84>
 8013b16:	69a2      	ldr	r2, [r4, #24]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	dc06      	bgt.n	8013b2a <_puts_r+0x8e>
 8013b1c:	290a      	cmp	r1, #10
 8013b1e:	d004      	beq.n	8013b2a <_puts_r+0x8e>
 8013b20:	6823      	ldr	r3, [r4, #0]
 8013b22:	1c5a      	adds	r2, r3, #1
 8013b24:	6022      	str	r2, [r4, #0]
 8013b26:	7019      	strb	r1, [r3, #0]
 8013b28:	e7cf      	b.n	8013aca <_puts_r+0x2e>
 8013b2a:	4622      	mov	r2, r4
 8013b2c:	4628      	mov	r0, r5
 8013b2e:	f000 f874 	bl	8013c1a <__swbuf_r>
 8013b32:	3001      	adds	r0, #1
 8013b34:	d1c9      	bne.n	8013aca <_puts_r+0x2e>
 8013b36:	e7df      	b.n	8013af8 <_puts_r+0x5c>
 8013b38:	6823      	ldr	r3, [r4, #0]
 8013b3a:	250a      	movs	r5, #10
 8013b3c:	1c5a      	adds	r2, r3, #1
 8013b3e:	6022      	str	r2, [r4, #0]
 8013b40:	701d      	strb	r5, [r3, #0]
 8013b42:	e7db      	b.n	8013afc <_puts_r+0x60>

08013b44 <puts>:
 8013b44:	4b02      	ldr	r3, [pc, #8]	; (8013b50 <puts+0xc>)
 8013b46:	4601      	mov	r1, r0
 8013b48:	6818      	ldr	r0, [r3, #0]
 8013b4a:	f7ff bfa7 	b.w	8013a9c <_puts_r>
 8013b4e:	bf00      	nop
 8013b50:	2000021c 	.word	0x2000021c

08013b54 <siprintf>:
 8013b54:	b40e      	push	{r1, r2, r3}
 8013b56:	b500      	push	{lr}
 8013b58:	b09c      	sub	sp, #112	; 0x70
 8013b5a:	ab1d      	add	r3, sp, #116	; 0x74
 8013b5c:	9002      	str	r0, [sp, #8]
 8013b5e:	9006      	str	r0, [sp, #24]
 8013b60:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b64:	4809      	ldr	r0, [pc, #36]	; (8013b8c <siprintf+0x38>)
 8013b66:	9107      	str	r1, [sp, #28]
 8013b68:	9104      	str	r1, [sp, #16]
 8013b6a:	4909      	ldr	r1, [pc, #36]	; (8013b90 <siprintf+0x3c>)
 8013b6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013b70:	9105      	str	r1, [sp, #20]
 8013b72:	6800      	ldr	r0, [r0, #0]
 8013b74:	9301      	str	r3, [sp, #4]
 8013b76:	a902      	add	r1, sp, #8
 8013b78:	f002 f992 	bl	8015ea0 <_svfiprintf_r>
 8013b7c:	9b02      	ldr	r3, [sp, #8]
 8013b7e:	2200      	movs	r2, #0
 8013b80:	701a      	strb	r2, [r3, #0]
 8013b82:	b01c      	add	sp, #112	; 0x70
 8013b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8013b88:	b003      	add	sp, #12
 8013b8a:	4770      	bx	lr
 8013b8c:	2000021c 	.word	0x2000021c
 8013b90:	ffff0208 	.word	0xffff0208

08013b94 <__sread>:
 8013b94:	b510      	push	{r4, lr}
 8013b96:	460c      	mov	r4, r1
 8013b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b9c:	f000 f91e 	bl	8013ddc <_read_r>
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	bfab      	itete	ge
 8013ba4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013ba6:	89a3      	ldrhlt	r3, [r4, #12]
 8013ba8:	181b      	addge	r3, r3, r0
 8013baa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013bae:	bfac      	ite	ge
 8013bb0:	6563      	strge	r3, [r4, #84]	; 0x54
 8013bb2:	81a3      	strhlt	r3, [r4, #12]
 8013bb4:	bd10      	pop	{r4, pc}

08013bb6 <__swrite>:
 8013bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bba:	461f      	mov	r7, r3
 8013bbc:	898b      	ldrh	r3, [r1, #12]
 8013bbe:	05db      	lsls	r3, r3, #23
 8013bc0:	4605      	mov	r5, r0
 8013bc2:	460c      	mov	r4, r1
 8013bc4:	4616      	mov	r6, r2
 8013bc6:	d505      	bpl.n	8013bd4 <__swrite+0x1e>
 8013bc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bcc:	2302      	movs	r3, #2
 8013bce:	2200      	movs	r2, #0
 8013bd0:	f000 f8f2 	bl	8013db8 <_lseek_r>
 8013bd4:	89a3      	ldrh	r3, [r4, #12]
 8013bd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013bda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013bde:	81a3      	strh	r3, [r4, #12]
 8013be0:	4632      	mov	r2, r6
 8013be2:	463b      	mov	r3, r7
 8013be4:	4628      	mov	r0, r5
 8013be6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bea:	f000 b909 	b.w	8013e00 <_write_r>

08013bee <__sseek>:
 8013bee:	b510      	push	{r4, lr}
 8013bf0:	460c      	mov	r4, r1
 8013bf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013bf6:	f000 f8df 	bl	8013db8 <_lseek_r>
 8013bfa:	1c43      	adds	r3, r0, #1
 8013bfc:	89a3      	ldrh	r3, [r4, #12]
 8013bfe:	bf15      	itete	ne
 8013c00:	6560      	strne	r0, [r4, #84]	; 0x54
 8013c02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013c06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013c0a:	81a3      	strheq	r3, [r4, #12]
 8013c0c:	bf18      	it	ne
 8013c0e:	81a3      	strhne	r3, [r4, #12]
 8013c10:	bd10      	pop	{r4, pc}

08013c12 <__sclose>:
 8013c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013c16:	f000 b8bf 	b.w	8013d98 <_close_r>

08013c1a <__swbuf_r>:
 8013c1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c1c:	460e      	mov	r6, r1
 8013c1e:	4614      	mov	r4, r2
 8013c20:	4605      	mov	r5, r0
 8013c22:	b118      	cbz	r0, 8013c2c <__swbuf_r+0x12>
 8013c24:	6a03      	ldr	r3, [r0, #32]
 8013c26:	b90b      	cbnz	r3, 8013c2c <__swbuf_r+0x12>
 8013c28:	f7ff fef0 	bl	8013a0c <__sinit>
 8013c2c:	69a3      	ldr	r3, [r4, #24]
 8013c2e:	60a3      	str	r3, [r4, #8]
 8013c30:	89a3      	ldrh	r3, [r4, #12]
 8013c32:	071a      	lsls	r2, r3, #28
 8013c34:	d525      	bpl.n	8013c82 <__swbuf_r+0x68>
 8013c36:	6923      	ldr	r3, [r4, #16]
 8013c38:	b31b      	cbz	r3, 8013c82 <__swbuf_r+0x68>
 8013c3a:	6823      	ldr	r3, [r4, #0]
 8013c3c:	6922      	ldr	r2, [r4, #16]
 8013c3e:	1a98      	subs	r0, r3, r2
 8013c40:	6963      	ldr	r3, [r4, #20]
 8013c42:	b2f6      	uxtb	r6, r6
 8013c44:	4283      	cmp	r3, r0
 8013c46:	4637      	mov	r7, r6
 8013c48:	dc04      	bgt.n	8013c54 <__swbuf_r+0x3a>
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	4628      	mov	r0, r5
 8013c4e:	f002 fbef 	bl	8016430 <_fflush_r>
 8013c52:	b9e0      	cbnz	r0, 8013c8e <__swbuf_r+0x74>
 8013c54:	68a3      	ldr	r3, [r4, #8]
 8013c56:	3b01      	subs	r3, #1
 8013c58:	60a3      	str	r3, [r4, #8]
 8013c5a:	6823      	ldr	r3, [r4, #0]
 8013c5c:	1c5a      	adds	r2, r3, #1
 8013c5e:	6022      	str	r2, [r4, #0]
 8013c60:	701e      	strb	r6, [r3, #0]
 8013c62:	6962      	ldr	r2, [r4, #20]
 8013c64:	1c43      	adds	r3, r0, #1
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d004      	beq.n	8013c74 <__swbuf_r+0x5a>
 8013c6a:	89a3      	ldrh	r3, [r4, #12]
 8013c6c:	07db      	lsls	r3, r3, #31
 8013c6e:	d506      	bpl.n	8013c7e <__swbuf_r+0x64>
 8013c70:	2e0a      	cmp	r6, #10
 8013c72:	d104      	bne.n	8013c7e <__swbuf_r+0x64>
 8013c74:	4621      	mov	r1, r4
 8013c76:	4628      	mov	r0, r5
 8013c78:	f002 fbda 	bl	8016430 <_fflush_r>
 8013c7c:	b938      	cbnz	r0, 8013c8e <__swbuf_r+0x74>
 8013c7e:	4638      	mov	r0, r7
 8013c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c82:	4621      	mov	r1, r4
 8013c84:	4628      	mov	r0, r5
 8013c86:	f000 f805 	bl	8013c94 <__swsetup_r>
 8013c8a:	2800      	cmp	r0, #0
 8013c8c:	d0d5      	beq.n	8013c3a <__swbuf_r+0x20>
 8013c8e:	f04f 37ff 	mov.w	r7, #4294967295
 8013c92:	e7f4      	b.n	8013c7e <__swbuf_r+0x64>

08013c94 <__swsetup_r>:
 8013c94:	b538      	push	{r3, r4, r5, lr}
 8013c96:	4b2a      	ldr	r3, [pc, #168]	; (8013d40 <__swsetup_r+0xac>)
 8013c98:	4605      	mov	r5, r0
 8013c9a:	6818      	ldr	r0, [r3, #0]
 8013c9c:	460c      	mov	r4, r1
 8013c9e:	b118      	cbz	r0, 8013ca8 <__swsetup_r+0x14>
 8013ca0:	6a03      	ldr	r3, [r0, #32]
 8013ca2:	b90b      	cbnz	r3, 8013ca8 <__swsetup_r+0x14>
 8013ca4:	f7ff feb2 	bl	8013a0c <__sinit>
 8013ca8:	89a3      	ldrh	r3, [r4, #12]
 8013caa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013cae:	0718      	lsls	r0, r3, #28
 8013cb0:	d422      	bmi.n	8013cf8 <__swsetup_r+0x64>
 8013cb2:	06d9      	lsls	r1, r3, #27
 8013cb4:	d407      	bmi.n	8013cc6 <__swsetup_r+0x32>
 8013cb6:	2309      	movs	r3, #9
 8013cb8:	602b      	str	r3, [r5, #0]
 8013cba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8013cbe:	81a3      	strh	r3, [r4, #12]
 8013cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cc4:	e034      	b.n	8013d30 <__swsetup_r+0x9c>
 8013cc6:	0758      	lsls	r0, r3, #29
 8013cc8:	d512      	bpl.n	8013cf0 <__swsetup_r+0x5c>
 8013cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013ccc:	b141      	cbz	r1, 8013ce0 <__swsetup_r+0x4c>
 8013cce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013cd2:	4299      	cmp	r1, r3
 8013cd4:	d002      	beq.n	8013cdc <__swsetup_r+0x48>
 8013cd6:	4628      	mov	r0, r5
 8013cd8:	f000 ff64 	bl	8014ba4 <_free_r>
 8013cdc:	2300      	movs	r3, #0
 8013cde:	6363      	str	r3, [r4, #52]	; 0x34
 8013ce0:	89a3      	ldrh	r3, [r4, #12]
 8013ce2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013ce6:	81a3      	strh	r3, [r4, #12]
 8013ce8:	2300      	movs	r3, #0
 8013cea:	6063      	str	r3, [r4, #4]
 8013cec:	6923      	ldr	r3, [r4, #16]
 8013cee:	6023      	str	r3, [r4, #0]
 8013cf0:	89a3      	ldrh	r3, [r4, #12]
 8013cf2:	f043 0308 	orr.w	r3, r3, #8
 8013cf6:	81a3      	strh	r3, [r4, #12]
 8013cf8:	6923      	ldr	r3, [r4, #16]
 8013cfa:	b94b      	cbnz	r3, 8013d10 <__swsetup_r+0x7c>
 8013cfc:	89a3      	ldrh	r3, [r4, #12]
 8013cfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013d02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013d06:	d003      	beq.n	8013d10 <__swsetup_r+0x7c>
 8013d08:	4621      	mov	r1, r4
 8013d0a:	4628      	mov	r0, r5
 8013d0c:	f002 fbde 	bl	80164cc <__smakebuf_r>
 8013d10:	89a0      	ldrh	r0, [r4, #12]
 8013d12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013d16:	f010 0301 	ands.w	r3, r0, #1
 8013d1a:	d00a      	beq.n	8013d32 <__swsetup_r+0x9e>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	60a3      	str	r3, [r4, #8]
 8013d20:	6963      	ldr	r3, [r4, #20]
 8013d22:	425b      	negs	r3, r3
 8013d24:	61a3      	str	r3, [r4, #24]
 8013d26:	6923      	ldr	r3, [r4, #16]
 8013d28:	b943      	cbnz	r3, 8013d3c <__swsetup_r+0xa8>
 8013d2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013d2e:	d1c4      	bne.n	8013cba <__swsetup_r+0x26>
 8013d30:	bd38      	pop	{r3, r4, r5, pc}
 8013d32:	0781      	lsls	r1, r0, #30
 8013d34:	bf58      	it	pl
 8013d36:	6963      	ldrpl	r3, [r4, #20]
 8013d38:	60a3      	str	r3, [r4, #8]
 8013d3a:	e7f4      	b.n	8013d26 <__swsetup_r+0x92>
 8013d3c:	2000      	movs	r0, #0
 8013d3e:	e7f7      	b.n	8013d30 <__swsetup_r+0x9c>
 8013d40:	2000021c 	.word	0x2000021c

08013d44 <memset>:
 8013d44:	4402      	add	r2, r0
 8013d46:	4603      	mov	r3, r0
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	d100      	bne.n	8013d4e <memset+0xa>
 8013d4c:	4770      	bx	lr
 8013d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8013d52:	e7f9      	b.n	8013d48 <memset+0x4>

08013d54 <strncmp>:
 8013d54:	b510      	push	{r4, lr}
 8013d56:	b16a      	cbz	r2, 8013d74 <strncmp+0x20>
 8013d58:	3901      	subs	r1, #1
 8013d5a:	1884      	adds	r4, r0, r2
 8013d5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d60:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013d64:	429a      	cmp	r2, r3
 8013d66:	d103      	bne.n	8013d70 <strncmp+0x1c>
 8013d68:	42a0      	cmp	r0, r4
 8013d6a:	d001      	beq.n	8013d70 <strncmp+0x1c>
 8013d6c:	2a00      	cmp	r2, #0
 8013d6e:	d1f5      	bne.n	8013d5c <strncmp+0x8>
 8013d70:	1ad0      	subs	r0, r2, r3
 8013d72:	bd10      	pop	{r4, pc}
 8013d74:	4610      	mov	r0, r2
 8013d76:	e7fc      	b.n	8013d72 <strncmp+0x1e>

08013d78 <strnlen>:
 8013d78:	b510      	push	{r4, lr}
 8013d7a:	4602      	mov	r2, r0
 8013d7c:	4401      	add	r1, r0
 8013d7e:	428a      	cmp	r2, r1
 8013d80:	4613      	mov	r3, r2
 8013d82:	d003      	beq.n	8013d8c <strnlen+0x14>
 8013d84:	781c      	ldrb	r4, [r3, #0]
 8013d86:	3201      	adds	r2, #1
 8013d88:	2c00      	cmp	r4, #0
 8013d8a:	d1f8      	bne.n	8013d7e <strnlen+0x6>
 8013d8c:	1a18      	subs	r0, r3, r0
 8013d8e:	bd10      	pop	{r4, pc}

08013d90 <_localeconv_r>:
 8013d90:	4800      	ldr	r0, [pc, #0]	; (8013d94 <_localeconv_r+0x4>)
 8013d92:	4770      	bx	lr
 8013d94:	20000154 	.word	0x20000154

08013d98 <_close_r>:
 8013d98:	b538      	push	{r3, r4, r5, lr}
 8013d9a:	4d06      	ldr	r5, [pc, #24]	; (8013db4 <_close_r+0x1c>)
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	4604      	mov	r4, r0
 8013da0:	4608      	mov	r0, r1
 8013da2:	602b      	str	r3, [r5, #0]
 8013da4:	f7f1 fd09 	bl	80057ba <_close>
 8013da8:	1c43      	adds	r3, r0, #1
 8013daa:	d102      	bne.n	8013db2 <_close_r+0x1a>
 8013dac:	682b      	ldr	r3, [r5, #0]
 8013dae:	b103      	cbz	r3, 8013db2 <_close_r+0x1a>
 8013db0:	6023      	str	r3, [r4, #0]
 8013db2:	bd38      	pop	{r3, r4, r5, pc}
 8013db4:	20001590 	.word	0x20001590

08013db8 <_lseek_r>:
 8013db8:	b538      	push	{r3, r4, r5, lr}
 8013dba:	4d07      	ldr	r5, [pc, #28]	; (8013dd8 <_lseek_r+0x20>)
 8013dbc:	4604      	mov	r4, r0
 8013dbe:	4608      	mov	r0, r1
 8013dc0:	4611      	mov	r1, r2
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	602a      	str	r2, [r5, #0]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	f7f1 fd1e 	bl	8005808 <_lseek>
 8013dcc:	1c43      	adds	r3, r0, #1
 8013dce:	d102      	bne.n	8013dd6 <_lseek_r+0x1e>
 8013dd0:	682b      	ldr	r3, [r5, #0]
 8013dd2:	b103      	cbz	r3, 8013dd6 <_lseek_r+0x1e>
 8013dd4:	6023      	str	r3, [r4, #0]
 8013dd6:	bd38      	pop	{r3, r4, r5, pc}
 8013dd8:	20001590 	.word	0x20001590

08013ddc <_read_r>:
 8013ddc:	b538      	push	{r3, r4, r5, lr}
 8013dde:	4d07      	ldr	r5, [pc, #28]	; (8013dfc <_read_r+0x20>)
 8013de0:	4604      	mov	r4, r0
 8013de2:	4608      	mov	r0, r1
 8013de4:	4611      	mov	r1, r2
 8013de6:	2200      	movs	r2, #0
 8013de8:	602a      	str	r2, [r5, #0]
 8013dea:	461a      	mov	r2, r3
 8013dec:	f7f1 fcac 	bl	8005748 <_read>
 8013df0:	1c43      	adds	r3, r0, #1
 8013df2:	d102      	bne.n	8013dfa <_read_r+0x1e>
 8013df4:	682b      	ldr	r3, [r5, #0]
 8013df6:	b103      	cbz	r3, 8013dfa <_read_r+0x1e>
 8013df8:	6023      	str	r3, [r4, #0]
 8013dfa:	bd38      	pop	{r3, r4, r5, pc}
 8013dfc:	20001590 	.word	0x20001590

08013e00 <_write_r>:
 8013e00:	b538      	push	{r3, r4, r5, lr}
 8013e02:	4d07      	ldr	r5, [pc, #28]	; (8013e20 <_write_r+0x20>)
 8013e04:	4604      	mov	r4, r0
 8013e06:	4608      	mov	r0, r1
 8013e08:	4611      	mov	r1, r2
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	602a      	str	r2, [r5, #0]
 8013e0e:	461a      	mov	r2, r3
 8013e10:	f7f1 fcb7 	bl	8005782 <_write>
 8013e14:	1c43      	adds	r3, r0, #1
 8013e16:	d102      	bne.n	8013e1e <_write_r+0x1e>
 8013e18:	682b      	ldr	r3, [r5, #0]
 8013e1a:	b103      	cbz	r3, 8013e1e <_write_r+0x1e>
 8013e1c:	6023      	str	r3, [r4, #0]
 8013e1e:	bd38      	pop	{r3, r4, r5, pc}
 8013e20:	20001590 	.word	0x20001590

08013e24 <__errno>:
 8013e24:	4b01      	ldr	r3, [pc, #4]	; (8013e2c <__errno+0x8>)
 8013e26:	6818      	ldr	r0, [r3, #0]
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	2000021c 	.word	0x2000021c

08013e30 <__libc_init_array>:
 8013e30:	b570      	push	{r4, r5, r6, lr}
 8013e32:	4d0d      	ldr	r5, [pc, #52]	; (8013e68 <__libc_init_array+0x38>)
 8013e34:	4c0d      	ldr	r4, [pc, #52]	; (8013e6c <__libc_init_array+0x3c>)
 8013e36:	1b64      	subs	r4, r4, r5
 8013e38:	10a4      	asrs	r4, r4, #2
 8013e3a:	2600      	movs	r6, #0
 8013e3c:	42a6      	cmp	r6, r4
 8013e3e:	d109      	bne.n	8013e54 <__libc_init_array+0x24>
 8013e40:	4d0b      	ldr	r5, [pc, #44]	; (8013e70 <__libc_init_array+0x40>)
 8013e42:	4c0c      	ldr	r4, [pc, #48]	; (8013e74 <__libc_init_array+0x44>)
 8013e44:	f003 fbee 	bl	8017624 <_init>
 8013e48:	1b64      	subs	r4, r4, r5
 8013e4a:	10a4      	asrs	r4, r4, #2
 8013e4c:	2600      	movs	r6, #0
 8013e4e:	42a6      	cmp	r6, r4
 8013e50:	d105      	bne.n	8013e5e <__libc_init_array+0x2e>
 8013e52:	bd70      	pop	{r4, r5, r6, pc}
 8013e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e58:	4798      	blx	r3
 8013e5a:	3601      	adds	r6, #1
 8013e5c:	e7ee      	b.n	8013e3c <__libc_init_array+0xc>
 8013e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e62:	4798      	blx	r3
 8013e64:	3601      	adds	r6, #1
 8013e66:	e7f2      	b.n	8013e4e <__libc_init_array+0x1e>
 8013e68:	08018300 	.word	0x08018300
 8013e6c:	08018300 	.word	0x08018300
 8013e70:	08018300 	.word	0x08018300
 8013e74:	08018304 	.word	0x08018304

08013e78 <__retarget_lock_init_recursive>:
 8013e78:	4770      	bx	lr

08013e7a <__retarget_lock_acquire_recursive>:
 8013e7a:	4770      	bx	lr

08013e7c <__retarget_lock_release_recursive>:
 8013e7c:	4770      	bx	lr

08013e7e <memcpy>:
 8013e7e:	440a      	add	r2, r1
 8013e80:	4291      	cmp	r1, r2
 8013e82:	f100 33ff 	add.w	r3, r0, #4294967295
 8013e86:	d100      	bne.n	8013e8a <memcpy+0xc>
 8013e88:	4770      	bx	lr
 8013e8a:	b510      	push	{r4, lr}
 8013e8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e90:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e94:	4291      	cmp	r1, r2
 8013e96:	d1f9      	bne.n	8013e8c <memcpy+0xe>
 8013e98:	bd10      	pop	{r4, pc}
 8013e9a:	0000      	movs	r0, r0
 8013e9c:	0000      	movs	r0, r0
	...

08013ea0 <nan>:
 8013ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013ea8 <nan+0x8>
 8013ea4:	4770      	bx	lr
 8013ea6:	bf00      	nop
 8013ea8:	00000000 	.word	0x00000000
 8013eac:	7ff80000 	.word	0x7ff80000

08013eb0 <quorem>:
 8013eb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eb4:	6903      	ldr	r3, [r0, #16]
 8013eb6:	690c      	ldr	r4, [r1, #16]
 8013eb8:	42a3      	cmp	r3, r4
 8013eba:	4607      	mov	r7, r0
 8013ebc:	db7e      	blt.n	8013fbc <quorem+0x10c>
 8013ebe:	3c01      	subs	r4, #1
 8013ec0:	f101 0814 	add.w	r8, r1, #20
 8013ec4:	f100 0514 	add.w	r5, r0, #20
 8013ec8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013ecc:	9301      	str	r3, [sp, #4]
 8013ece:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013ed2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	429a      	cmp	r2, r3
 8013eda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013ede:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013ee2:	fbb2 f6f3 	udiv	r6, r2, r3
 8013ee6:	d331      	bcc.n	8013f4c <quorem+0x9c>
 8013ee8:	f04f 0e00 	mov.w	lr, #0
 8013eec:	4640      	mov	r0, r8
 8013eee:	46ac      	mov	ip, r5
 8013ef0:	46f2      	mov	sl, lr
 8013ef2:	f850 2b04 	ldr.w	r2, [r0], #4
 8013ef6:	b293      	uxth	r3, r2
 8013ef8:	fb06 e303 	mla	r3, r6, r3, lr
 8013efc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013f00:	0c1a      	lsrs	r2, r3, #16
 8013f02:	b29b      	uxth	r3, r3
 8013f04:	ebaa 0303 	sub.w	r3, sl, r3
 8013f08:	f8dc a000 	ldr.w	sl, [ip]
 8013f0c:	fa13 f38a 	uxtah	r3, r3, sl
 8013f10:	fb06 220e 	mla	r2, r6, lr, r2
 8013f14:	9300      	str	r3, [sp, #0]
 8013f16:	9b00      	ldr	r3, [sp, #0]
 8013f18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8013f1c:	b292      	uxth	r2, r2
 8013f1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8013f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013f26:	f8bd 3000 	ldrh.w	r3, [sp]
 8013f2a:	4581      	cmp	r9, r0
 8013f2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f30:	f84c 3b04 	str.w	r3, [ip], #4
 8013f34:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8013f38:	d2db      	bcs.n	8013ef2 <quorem+0x42>
 8013f3a:	f855 300b 	ldr.w	r3, [r5, fp]
 8013f3e:	b92b      	cbnz	r3, 8013f4c <quorem+0x9c>
 8013f40:	9b01      	ldr	r3, [sp, #4]
 8013f42:	3b04      	subs	r3, #4
 8013f44:	429d      	cmp	r5, r3
 8013f46:	461a      	mov	r2, r3
 8013f48:	d32c      	bcc.n	8013fa4 <quorem+0xf4>
 8013f4a:	613c      	str	r4, [r7, #16]
 8013f4c:	4638      	mov	r0, r7
 8013f4e:	f001 fd59 	bl	8015a04 <__mcmp>
 8013f52:	2800      	cmp	r0, #0
 8013f54:	db22      	blt.n	8013f9c <quorem+0xec>
 8013f56:	3601      	adds	r6, #1
 8013f58:	4629      	mov	r1, r5
 8013f5a:	2000      	movs	r0, #0
 8013f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8013f60:	f8d1 c000 	ldr.w	ip, [r1]
 8013f64:	b293      	uxth	r3, r2
 8013f66:	1ac3      	subs	r3, r0, r3
 8013f68:	0c12      	lsrs	r2, r2, #16
 8013f6a:	fa13 f38c 	uxtah	r3, r3, ip
 8013f6e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8013f72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013f76:	b29b      	uxth	r3, r3
 8013f78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013f7c:	45c1      	cmp	r9, r8
 8013f7e:	f841 3b04 	str.w	r3, [r1], #4
 8013f82:	ea4f 4022 	mov.w	r0, r2, asr #16
 8013f86:	d2e9      	bcs.n	8013f5c <quorem+0xac>
 8013f88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013f8c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013f90:	b922      	cbnz	r2, 8013f9c <quorem+0xec>
 8013f92:	3b04      	subs	r3, #4
 8013f94:	429d      	cmp	r5, r3
 8013f96:	461a      	mov	r2, r3
 8013f98:	d30a      	bcc.n	8013fb0 <quorem+0x100>
 8013f9a:	613c      	str	r4, [r7, #16]
 8013f9c:	4630      	mov	r0, r6
 8013f9e:	b003      	add	sp, #12
 8013fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fa4:	6812      	ldr	r2, [r2, #0]
 8013fa6:	3b04      	subs	r3, #4
 8013fa8:	2a00      	cmp	r2, #0
 8013faa:	d1ce      	bne.n	8013f4a <quorem+0x9a>
 8013fac:	3c01      	subs	r4, #1
 8013fae:	e7c9      	b.n	8013f44 <quorem+0x94>
 8013fb0:	6812      	ldr	r2, [r2, #0]
 8013fb2:	3b04      	subs	r3, #4
 8013fb4:	2a00      	cmp	r2, #0
 8013fb6:	d1f0      	bne.n	8013f9a <quorem+0xea>
 8013fb8:	3c01      	subs	r4, #1
 8013fba:	e7eb      	b.n	8013f94 <quorem+0xe4>
 8013fbc:	2000      	movs	r0, #0
 8013fbe:	e7ee      	b.n	8013f9e <quorem+0xee>

08013fc0 <_dtoa_r>:
 8013fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fc4:	ed2d 8b04 	vpush	{d8-d9}
 8013fc8:	69c5      	ldr	r5, [r0, #28]
 8013fca:	b093      	sub	sp, #76	; 0x4c
 8013fcc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8013fd0:	ec57 6b10 	vmov	r6, r7, d0
 8013fd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013fd8:	9107      	str	r1, [sp, #28]
 8013fda:	4604      	mov	r4, r0
 8013fdc:	920a      	str	r2, [sp, #40]	; 0x28
 8013fde:	930d      	str	r3, [sp, #52]	; 0x34
 8013fe0:	b975      	cbnz	r5, 8014000 <_dtoa_r+0x40>
 8013fe2:	2010      	movs	r0, #16
 8013fe4:	f001 f982 	bl	80152ec <malloc>
 8013fe8:	4602      	mov	r2, r0
 8013fea:	61e0      	str	r0, [r4, #28]
 8013fec:	b920      	cbnz	r0, 8013ff8 <_dtoa_r+0x38>
 8013fee:	4bae      	ldr	r3, [pc, #696]	; (80142a8 <_dtoa_r+0x2e8>)
 8013ff0:	21ef      	movs	r1, #239	; 0xef
 8013ff2:	48ae      	ldr	r0, [pc, #696]	; (80142ac <_dtoa_r+0x2ec>)
 8013ff4:	f002 faf2 	bl	80165dc <__assert_func>
 8013ff8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013ffc:	6005      	str	r5, [r0, #0]
 8013ffe:	60c5      	str	r5, [r0, #12]
 8014000:	69e3      	ldr	r3, [r4, #28]
 8014002:	6819      	ldr	r1, [r3, #0]
 8014004:	b151      	cbz	r1, 801401c <_dtoa_r+0x5c>
 8014006:	685a      	ldr	r2, [r3, #4]
 8014008:	604a      	str	r2, [r1, #4]
 801400a:	2301      	movs	r3, #1
 801400c:	4093      	lsls	r3, r2
 801400e:	608b      	str	r3, [r1, #8]
 8014010:	4620      	mov	r0, r4
 8014012:	f001 fa71 	bl	80154f8 <_Bfree>
 8014016:	69e3      	ldr	r3, [r4, #28]
 8014018:	2200      	movs	r2, #0
 801401a:	601a      	str	r2, [r3, #0]
 801401c:	1e3b      	subs	r3, r7, #0
 801401e:	bfbb      	ittet	lt
 8014020:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014024:	9303      	strlt	r3, [sp, #12]
 8014026:	2300      	movge	r3, #0
 8014028:	2201      	movlt	r2, #1
 801402a:	bfac      	ite	ge
 801402c:	f8c8 3000 	strge.w	r3, [r8]
 8014030:	f8c8 2000 	strlt.w	r2, [r8]
 8014034:	4b9e      	ldr	r3, [pc, #632]	; (80142b0 <_dtoa_r+0x2f0>)
 8014036:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801403a:	ea33 0308 	bics.w	r3, r3, r8
 801403e:	d11b      	bne.n	8014078 <_dtoa_r+0xb8>
 8014040:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014042:	f242 730f 	movw	r3, #9999	; 0x270f
 8014046:	6013      	str	r3, [r2, #0]
 8014048:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801404c:	4333      	orrs	r3, r6
 801404e:	f000 8593 	beq.w	8014b78 <_dtoa_r+0xbb8>
 8014052:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014054:	b963      	cbnz	r3, 8014070 <_dtoa_r+0xb0>
 8014056:	4b97      	ldr	r3, [pc, #604]	; (80142b4 <_dtoa_r+0x2f4>)
 8014058:	e027      	b.n	80140aa <_dtoa_r+0xea>
 801405a:	4b97      	ldr	r3, [pc, #604]	; (80142b8 <_dtoa_r+0x2f8>)
 801405c:	9300      	str	r3, [sp, #0]
 801405e:	3308      	adds	r3, #8
 8014060:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014062:	6013      	str	r3, [r2, #0]
 8014064:	9800      	ldr	r0, [sp, #0]
 8014066:	b013      	add	sp, #76	; 0x4c
 8014068:	ecbd 8b04 	vpop	{d8-d9}
 801406c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014070:	4b90      	ldr	r3, [pc, #576]	; (80142b4 <_dtoa_r+0x2f4>)
 8014072:	9300      	str	r3, [sp, #0]
 8014074:	3303      	adds	r3, #3
 8014076:	e7f3      	b.n	8014060 <_dtoa_r+0xa0>
 8014078:	ed9d 7b02 	vldr	d7, [sp, #8]
 801407c:	2200      	movs	r2, #0
 801407e:	ec51 0b17 	vmov	r0, r1, d7
 8014082:	eeb0 8a47 	vmov.f32	s16, s14
 8014086:	eef0 8a67 	vmov.f32	s17, s15
 801408a:	2300      	movs	r3, #0
 801408c:	f7ec fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8014090:	4681      	mov	r9, r0
 8014092:	b160      	cbz	r0, 80140ae <_dtoa_r+0xee>
 8014094:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014096:	2301      	movs	r3, #1
 8014098:	6013      	str	r3, [r2, #0]
 801409a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801409c:	2b00      	cmp	r3, #0
 801409e:	f000 8568 	beq.w	8014b72 <_dtoa_r+0xbb2>
 80140a2:	4b86      	ldr	r3, [pc, #536]	; (80142bc <_dtoa_r+0x2fc>)
 80140a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80140a6:	6013      	str	r3, [r2, #0]
 80140a8:	3b01      	subs	r3, #1
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	e7da      	b.n	8014064 <_dtoa_r+0xa4>
 80140ae:	aa10      	add	r2, sp, #64	; 0x40
 80140b0:	a911      	add	r1, sp, #68	; 0x44
 80140b2:	4620      	mov	r0, r4
 80140b4:	eeb0 0a48 	vmov.f32	s0, s16
 80140b8:	eef0 0a68 	vmov.f32	s1, s17
 80140bc:	f001 fdb8 	bl	8015c30 <__d2b>
 80140c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80140c4:	4682      	mov	sl, r0
 80140c6:	2d00      	cmp	r5, #0
 80140c8:	d07f      	beq.n	80141ca <_dtoa_r+0x20a>
 80140ca:	ee18 3a90 	vmov	r3, s17
 80140ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80140d2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80140d6:	ec51 0b18 	vmov	r0, r1, d8
 80140da:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80140de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80140e2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80140e6:	4619      	mov	r1, r3
 80140e8:	2200      	movs	r2, #0
 80140ea:	4b75      	ldr	r3, [pc, #468]	; (80142c0 <_dtoa_r+0x300>)
 80140ec:	f7ec f8cc 	bl	8000288 <__aeabi_dsub>
 80140f0:	a367      	add	r3, pc, #412	; (adr r3, 8014290 <_dtoa_r+0x2d0>)
 80140f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140f6:	f7ec fa7f 	bl	80005f8 <__aeabi_dmul>
 80140fa:	a367      	add	r3, pc, #412	; (adr r3, 8014298 <_dtoa_r+0x2d8>)
 80140fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014100:	f7ec f8c4 	bl	800028c <__adddf3>
 8014104:	4606      	mov	r6, r0
 8014106:	4628      	mov	r0, r5
 8014108:	460f      	mov	r7, r1
 801410a:	f7ec fa0b 	bl	8000524 <__aeabi_i2d>
 801410e:	a364      	add	r3, pc, #400	; (adr r3, 80142a0 <_dtoa_r+0x2e0>)
 8014110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014114:	f7ec fa70 	bl	80005f8 <__aeabi_dmul>
 8014118:	4602      	mov	r2, r0
 801411a:	460b      	mov	r3, r1
 801411c:	4630      	mov	r0, r6
 801411e:	4639      	mov	r1, r7
 8014120:	f7ec f8b4 	bl	800028c <__adddf3>
 8014124:	4606      	mov	r6, r0
 8014126:	460f      	mov	r7, r1
 8014128:	f7ec fd16 	bl	8000b58 <__aeabi_d2iz>
 801412c:	2200      	movs	r2, #0
 801412e:	4683      	mov	fp, r0
 8014130:	2300      	movs	r3, #0
 8014132:	4630      	mov	r0, r6
 8014134:	4639      	mov	r1, r7
 8014136:	f7ec fcd1 	bl	8000adc <__aeabi_dcmplt>
 801413a:	b148      	cbz	r0, 8014150 <_dtoa_r+0x190>
 801413c:	4658      	mov	r0, fp
 801413e:	f7ec f9f1 	bl	8000524 <__aeabi_i2d>
 8014142:	4632      	mov	r2, r6
 8014144:	463b      	mov	r3, r7
 8014146:	f7ec fcbf 	bl	8000ac8 <__aeabi_dcmpeq>
 801414a:	b908      	cbnz	r0, 8014150 <_dtoa_r+0x190>
 801414c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014150:	f1bb 0f16 	cmp.w	fp, #22
 8014154:	d857      	bhi.n	8014206 <_dtoa_r+0x246>
 8014156:	4b5b      	ldr	r3, [pc, #364]	; (80142c4 <_dtoa_r+0x304>)
 8014158:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801415c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014160:	ec51 0b18 	vmov	r0, r1, d8
 8014164:	f7ec fcba 	bl	8000adc <__aeabi_dcmplt>
 8014168:	2800      	cmp	r0, #0
 801416a:	d04e      	beq.n	801420a <_dtoa_r+0x24a>
 801416c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014170:	2300      	movs	r3, #0
 8014172:	930c      	str	r3, [sp, #48]	; 0x30
 8014174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014176:	1b5b      	subs	r3, r3, r5
 8014178:	1e5a      	subs	r2, r3, #1
 801417a:	bf45      	ittet	mi
 801417c:	f1c3 0301 	rsbmi	r3, r3, #1
 8014180:	9305      	strmi	r3, [sp, #20]
 8014182:	2300      	movpl	r3, #0
 8014184:	2300      	movmi	r3, #0
 8014186:	9206      	str	r2, [sp, #24]
 8014188:	bf54      	ite	pl
 801418a:	9305      	strpl	r3, [sp, #20]
 801418c:	9306      	strmi	r3, [sp, #24]
 801418e:	f1bb 0f00 	cmp.w	fp, #0
 8014192:	db3c      	blt.n	801420e <_dtoa_r+0x24e>
 8014194:	9b06      	ldr	r3, [sp, #24]
 8014196:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 801419a:	445b      	add	r3, fp
 801419c:	9306      	str	r3, [sp, #24]
 801419e:	2300      	movs	r3, #0
 80141a0:	9308      	str	r3, [sp, #32]
 80141a2:	9b07      	ldr	r3, [sp, #28]
 80141a4:	2b09      	cmp	r3, #9
 80141a6:	d868      	bhi.n	801427a <_dtoa_r+0x2ba>
 80141a8:	2b05      	cmp	r3, #5
 80141aa:	bfc4      	itt	gt
 80141ac:	3b04      	subgt	r3, #4
 80141ae:	9307      	strgt	r3, [sp, #28]
 80141b0:	9b07      	ldr	r3, [sp, #28]
 80141b2:	f1a3 0302 	sub.w	r3, r3, #2
 80141b6:	bfcc      	ite	gt
 80141b8:	2500      	movgt	r5, #0
 80141ba:	2501      	movle	r5, #1
 80141bc:	2b03      	cmp	r3, #3
 80141be:	f200 8085 	bhi.w	80142cc <_dtoa_r+0x30c>
 80141c2:	e8df f003 	tbb	[pc, r3]
 80141c6:	3b2e      	.short	0x3b2e
 80141c8:	5839      	.short	0x5839
 80141ca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80141ce:	441d      	add	r5, r3
 80141d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80141d4:	2b20      	cmp	r3, #32
 80141d6:	bfc1      	itttt	gt
 80141d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80141dc:	fa08 f803 	lslgt.w	r8, r8, r3
 80141e0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80141e4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80141e8:	bfd6      	itet	le
 80141ea:	f1c3 0320 	rsble	r3, r3, #32
 80141ee:	ea48 0003 	orrgt.w	r0, r8, r3
 80141f2:	fa06 f003 	lslle.w	r0, r6, r3
 80141f6:	f7ec f985 	bl	8000504 <__aeabi_ui2d>
 80141fa:	2201      	movs	r2, #1
 80141fc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8014200:	3d01      	subs	r5, #1
 8014202:	920e      	str	r2, [sp, #56]	; 0x38
 8014204:	e76f      	b.n	80140e6 <_dtoa_r+0x126>
 8014206:	2301      	movs	r3, #1
 8014208:	e7b3      	b.n	8014172 <_dtoa_r+0x1b2>
 801420a:	900c      	str	r0, [sp, #48]	; 0x30
 801420c:	e7b2      	b.n	8014174 <_dtoa_r+0x1b4>
 801420e:	9b05      	ldr	r3, [sp, #20]
 8014210:	eba3 030b 	sub.w	r3, r3, fp
 8014214:	9305      	str	r3, [sp, #20]
 8014216:	f1cb 0300 	rsb	r3, fp, #0
 801421a:	9308      	str	r3, [sp, #32]
 801421c:	2300      	movs	r3, #0
 801421e:	930b      	str	r3, [sp, #44]	; 0x2c
 8014220:	e7bf      	b.n	80141a2 <_dtoa_r+0x1e2>
 8014222:	2300      	movs	r3, #0
 8014224:	9309      	str	r3, [sp, #36]	; 0x24
 8014226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014228:	2b00      	cmp	r3, #0
 801422a:	dc52      	bgt.n	80142d2 <_dtoa_r+0x312>
 801422c:	2301      	movs	r3, #1
 801422e:	9301      	str	r3, [sp, #4]
 8014230:	9304      	str	r3, [sp, #16]
 8014232:	461a      	mov	r2, r3
 8014234:	920a      	str	r2, [sp, #40]	; 0x28
 8014236:	e00b      	b.n	8014250 <_dtoa_r+0x290>
 8014238:	2301      	movs	r3, #1
 801423a:	e7f3      	b.n	8014224 <_dtoa_r+0x264>
 801423c:	2300      	movs	r3, #0
 801423e:	9309      	str	r3, [sp, #36]	; 0x24
 8014240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014242:	445b      	add	r3, fp
 8014244:	9301      	str	r3, [sp, #4]
 8014246:	3301      	adds	r3, #1
 8014248:	2b01      	cmp	r3, #1
 801424a:	9304      	str	r3, [sp, #16]
 801424c:	bfb8      	it	lt
 801424e:	2301      	movlt	r3, #1
 8014250:	69e0      	ldr	r0, [r4, #28]
 8014252:	2100      	movs	r1, #0
 8014254:	2204      	movs	r2, #4
 8014256:	f102 0614 	add.w	r6, r2, #20
 801425a:	429e      	cmp	r6, r3
 801425c:	d93d      	bls.n	80142da <_dtoa_r+0x31a>
 801425e:	6041      	str	r1, [r0, #4]
 8014260:	4620      	mov	r0, r4
 8014262:	f001 f909 	bl	8015478 <_Balloc>
 8014266:	9000      	str	r0, [sp, #0]
 8014268:	2800      	cmp	r0, #0
 801426a:	d139      	bne.n	80142e0 <_dtoa_r+0x320>
 801426c:	4b16      	ldr	r3, [pc, #88]	; (80142c8 <_dtoa_r+0x308>)
 801426e:	4602      	mov	r2, r0
 8014270:	f240 11af 	movw	r1, #431	; 0x1af
 8014274:	e6bd      	b.n	8013ff2 <_dtoa_r+0x32>
 8014276:	2301      	movs	r3, #1
 8014278:	e7e1      	b.n	801423e <_dtoa_r+0x27e>
 801427a:	2501      	movs	r5, #1
 801427c:	2300      	movs	r3, #0
 801427e:	9307      	str	r3, [sp, #28]
 8014280:	9509      	str	r5, [sp, #36]	; 0x24
 8014282:	f04f 33ff 	mov.w	r3, #4294967295
 8014286:	9301      	str	r3, [sp, #4]
 8014288:	9304      	str	r3, [sp, #16]
 801428a:	2200      	movs	r2, #0
 801428c:	2312      	movs	r3, #18
 801428e:	e7d1      	b.n	8014234 <_dtoa_r+0x274>
 8014290:	636f4361 	.word	0x636f4361
 8014294:	3fd287a7 	.word	0x3fd287a7
 8014298:	8b60c8b3 	.word	0x8b60c8b3
 801429c:	3fc68a28 	.word	0x3fc68a28
 80142a0:	509f79fb 	.word	0x509f79fb
 80142a4:	3fd34413 	.word	0x3fd34413
 80142a8:	0801803a 	.word	0x0801803a
 80142ac:	08018051 	.word	0x08018051
 80142b0:	7ff00000 	.word	0x7ff00000
 80142b4:	08018036 	.word	0x08018036
 80142b8:	0801802d 	.word	0x0801802d
 80142bc:	08018002 	.word	0x08018002
 80142c0:	3ff80000 	.word	0x3ff80000
 80142c4:	080181a0 	.word	0x080181a0
 80142c8:	080180a9 	.word	0x080180a9
 80142cc:	2301      	movs	r3, #1
 80142ce:	9309      	str	r3, [sp, #36]	; 0x24
 80142d0:	e7d7      	b.n	8014282 <_dtoa_r+0x2c2>
 80142d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142d4:	9301      	str	r3, [sp, #4]
 80142d6:	9304      	str	r3, [sp, #16]
 80142d8:	e7ba      	b.n	8014250 <_dtoa_r+0x290>
 80142da:	3101      	adds	r1, #1
 80142dc:	0052      	lsls	r2, r2, #1
 80142de:	e7ba      	b.n	8014256 <_dtoa_r+0x296>
 80142e0:	69e3      	ldr	r3, [r4, #28]
 80142e2:	9a00      	ldr	r2, [sp, #0]
 80142e4:	601a      	str	r2, [r3, #0]
 80142e6:	9b04      	ldr	r3, [sp, #16]
 80142e8:	2b0e      	cmp	r3, #14
 80142ea:	f200 80a8 	bhi.w	801443e <_dtoa_r+0x47e>
 80142ee:	2d00      	cmp	r5, #0
 80142f0:	f000 80a5 	beq.w	801443e <_dtoa_r+0x47e>
 80142f4:	f1bb 0f00 	cmp.w	fp, #0
 80142f8:	dd38      	ble.n	801436c <_dtoa_r+0x3ac>
 80142fa:	4bc0      	ldr	r3, [pc, #768]	; (80145fc <_dtoa_r+0x63c>)
 80142fc:	f00b 020f 	and.w	r2, fp, #15
 8014300:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014304:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8014308:	e9d3 6700 	ldrd	r6, r7, [r3]
 801430c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8014310:	d019      	beq.n	8014346 <_dtoa_r+0x386>
 8014312:	4bbb      	ldr	r3, [pc, #748]	; (8014600 <_dtoa_r+0x640>)
 8014314:	ec51 0b18 	vmov	r0, r1, d8
 8014318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801431c:	f7ec fa96 	bl	800084c <__aeabi_ddiv>
 8014320:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014324:	f008 080f 	and.w	r8, r8, #15
 8014328:	2503      	movs	r5, #3
 801432a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8014600 <_dtoa_r+0x640>
 801432e:	f1b8 0f00 	cmp.w	r8, #0
 8014332:	d10a      	bne.n	801434a <_dtoa_r+0x38a>
 8014334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014338:	4632      	mov	r2, r6
 801433a:	463b      	mov	r3, r7
 801433c:	f7ec fa86 	bl	800084c <__aeabi_ddiv>
 8014340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014344:	e02b      	b.n	801439e <_dtoa_r+0x3de>
 8014346:	2502      	movs	r5, #2
 8014348:	e7ef      	b.n	801432a <_dtoa_r+0x36a>
 801434a:	f018 0f01 	tst.w	r8, #1
 801434e:	d008      	beq.n	8014362 <_dtoa_r+0x3a2>
 8014350:	4630      	mov	r0, r6
 8014352:	4639      	mov	r1, r7
 8014354:	e9d9 2300 	ldrd	r2, r3, [r9]
 8014358:	f7ec f94e 	bl	80005f8 <__aeabi_dmul>
 801435c:	3501      	adds	r5, #1
 801435e:	4606      	mov	r6, r0
 8014360:	460f      	mov	r7, r1
 8014362:	ea4f 0868 	mov.w	r8, r8, asr #1
 8014366:	f109 0908 	add.w	r9, r9, #8
 801436a:	e7e0      	b.n	801432e <_dtoa_r+0x36e>
 801436c:	f000 809f 	beq.w	80144ae <_dtoa_r+0x4ee>
 8014370:	f1cb 0600 	rsb	r6, fp, #0
 8014374:	4ba1      	ldr	r3, [pc, #644]	; (80145fc <_dtoa_r+0x63c>)
 8014376:	4fa2      	ldr	r7, [pc, #648]	; (8014600 <_dtoa_r+0x640>)
 8014378:	f006 020f 	and.w	r2, r6, #15
 801437c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014384:	ec51 0b18 	vmov	r0, r1, d8
 8014388:	f7ec f936 	bl	80005f8 <__aeabi_dmul>
 801438c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014390:	1136      	asrs	r6, r6, #4
 8014392:	2300      	movs	r3, #0
 8014394:	2502      	movs	r5, #2
 8014396:	2e00      	cmp	r6, #0
 8014398:	d17e      	bne.n	8014498 <_dtoa_r+0x4d8>
 801439a:	2b00      	cmp	r3, #0
 801439c:	d1d0      	bne.n	8014340 <_dtoa_r+0x380>
 801439e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80143a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	f000 8084 	beq.w	80144b2 <_dtoa_r+0x4f2>
 80143aa:	4b96      	ldr	r3, [pc, #600]	; (8014604 <_dtoa_r+0x644>)
 80143ac:	2200      	movs	r2, #0
 80143ae:	4640      	mov	r0, r8
 80143b0:	4649      	mov	r1, r9
 80143b2:	f7ec fb93 	bl	8000adc <__aeabi_dcmplt>
 80143b6:	2800      	cmp	r0, #0
 80143b8:	d07b      	beq.n	80144b2 <_dtoa_r+0x4f2>
 80143ba:	9b04      	ldr	r3, [sp, #16]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d078      	beq.n	80144b2 <_dtoa_r+0x4f2>
 80143c0:	9b01      	ldr	r3, [sp, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	dd39      	ble.n	801443a <_dtoa_r+0x47a>
 80143c6:	4b90      	ldr	r3, [pc, #576]	; (8014608 <_dtoa_r+0x648>)
 80143c8:	2200      	movs	r2, #0
 80143ca:	4640      	mov	r0, r8
 80143cc:	4649      	mov	r1, r9
 80143ce:	f7ec f913 	bl	80005f8 <__aeabi_dmul>
 80143d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143d6:	9e01      	ldr	r6, [sp, #4]
 80143d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80143dc:	3501      	adds	r5, #1
 80143de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80143e2:	4628      	mov	r0, r5
 80143e4:	f7ec f89e 	bl	8000524 <__aeabi_i2d>
 80143e8:	4642      	mov	r2, r8
 80143ea:	464b      	mov	r3, r9
 80143ec:	f7ec f904 	bl	80005f8 <__aeabi_dmul>
 80143f0:	4b86      	ldr	r3, [pc, #536]	; (801460c <_dtoa_r+0x64c>)
 80143f2:	2200      	movs	r2, #0
 80143f4:	f7eb ff4a 	bl	800028c <__adddf3>
 80143f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80143fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014400:	9303      	str	r3, [sp, #12]
 8014402:	2e00      	cmp	r6, #0
 8014404:	d158      	bne.n	80144b8 <_dtoa_r+0x4f8>
 8014406:	4b82      	ldr	r3, [pc, #520]	; (8014610 <_dtoa_r+0x650>)
 8014408:	2200      	movs	r2, #0
 801440a:	4640      	mov	r0, r8
 801440c:	4649      	mov	r1, r9
 801440e:	f7eb ff3b 	bl	8000288 <__aeabi_dsub>
 8014412:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014416:	4680      	mov	r8, r0
 8014418:	4689      	mov	r9, r1
 801441a:	f7ec fb7d 	bl	8000b18 <__aeabi_dcmpgt>
 801441e:	2800      	cmp	r0, #0
 8014420:	f040 8296 	bne.w	8014950 <_dtoa_r+0x990>
 8014424:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014428:	4640      	mov	r0, r8
 801442a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801442e:	4649      	mov	r1, r9
 8014430:	f7ec fb54 	bl	8000adc <__aeabi_dcmplt>
 8014434:	2800      	cmp	r0, #0
 8014436:	f040 8289 	bne.w	801494c <_dtoa_r+0x98c>
 801443a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801443e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8014440:	2b00      	cmp	r3, #0
 8014442:	f2c0 814e 	blt.w	80146e2 <_dtoa_r+0x722>
 8014446:	f1bb 0f0e 	cmp.w	fp, #14
 801444a:	f300 814a 	bgt.w	80146e2 <_dtoa_r+0x722>
 801444e:	4b6b      	ldr	r3, [pc, #428]	; (80145fc <_dtoa_r+0x63c>)
 8014450:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8014454:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801445a:	2b00      	cmp	r3, #0
 801445c:	f280 80dc 	bge.w	8014618 <_dtoa_r+0x658>
 8014460:	9b04      	ldr	r3, [sp, #16]
 8014462:	2b00      	cmp	r3, #0
 8014464:	f300 80d8 	bgt.w	8014618 <_dtoa_r+0x658>
 8014468:	f040 826f 	bne.w	801494a <_dtoa_r+0x98a>
 801446c:	4b68      	ldr	r3, [pc, #416]	; (8014610 <_dtoa_r+0x650>)
 801446e:	2200      	movs	r2, #0
 8014470:	4640      	mov	r0, r8
 8014472:	4649      	mov	r1, r9
 8014474:	f7ec f8c0 	bl	80005f8 <__aeabi_dmul>
 8014478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801447c:	f7ec fb42 	bl	8000b04 <__aeabi_dcmpge>
 8014480:	9e04      	ldr	r6, [sp, #16]
 8014482:	4637      	mov	r7, r6
 8014484:	2800      	cmp	r0, #0
 8014486:	f040 8245 	bne.w	8014914 <_dtoa_r+0x954>
 801448a:	9d00      	ldr	r5, [sp, #0]
 801448c:	2331      	movs	r3, #49	; 0x31
 801448e:	f805 3b01 	strb.w	r3, [r5], #1
 8014492:	f10b 0b01 	add.w	fp, fp, #1
 8014496:	e241      	b.n	801491c <_dtoa_r+0x95c>
 8014498:	07f2      	lsls	r2, r6, #31
 801449a:	d505      	bpl.n	80144a8 <_dtoa_r+0x4e8>
 801449c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80144a0:	f7ec f8aa 	bl	80005f8 <__aeabi_dmul>
 80144a4:	3501      	adds	r5, #1
 80144a6:	2301      	movs	r3, #1
 80144a8:	1076      	asrs	r6, r6, #1
 80144aa:	3708      	adds	r7, #8
 80144ac:	e773      	b.n	8014396 <_dtoa_r+0x3d6>
 80144ae:	2502      	movs	r5, #2
 80144b0:	e775      	b.n	801439e <_dtoa_r+0x3de>
 80144b2:	9e04      	ldr	r6, [sp, #16]
 80144b4:	465f      	mov	r7, fp
 80144b6:	e792      	b.n	80143de <_dtoa_r+0x41e>
 80144b8:	9900      	ldr	r1, [sp, #0]
 80144ba:	4b50      	ldr	r3, [pc, #320]	; (80145fc <_dtoa_r+0x63c>)
 80144bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80144c0:	4431      	add	r1, r6
 80144c2:	9102      	str	r1, [sp, #8]
 80144c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80144c6:	eeb0 9a47 	vmov.f32	s18, s14
 80144ca:	eef0 9a67 	vmov.f32	s19, s15
 80144ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80144d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80144d6:	2900      	cmp	r1, #0
 80144d8:	d044      	beq.n	8014564 <_dtoa_r+0x5a4>
 80144da:	494e      	ldr	r1, [pc, #312]	; (8014614 <_dtoa_r+0x654>)
 80144dc:	2000      	movs	r0, #0
 80144de:	f7ec f9b5 	bl	800084c <__aeabi_ddiv>
 80144e2:	ec53 2b19 	vmov	r2, r3, d9
 80144e6:	f7eb fecf 	bl	8000288 <__aeabi_dsub>
 80144ea:	9d00      	ldr	r5, [sp, #0]
 80144ec:	ec41 0b19 	vmov	d9, r0, r1
 80144f0:	4649      	mov	r1, r9
 80144f2:	4640      	mov	r0, r8
 80144f4:	f7ec fb30 	bl	8000b58 <__aeabi_d2iz>
 80144f8:	4606      	mov	r6, r0
 80144fa:	f7ec f813 	bl	8000524 <__aeabi_i2d>
 80144fe:	4602      	mov	r2, r0
 8014500:	460b      	mov	r3, r1
 8014502:	4640      	mov	r0, r8
 8014504:	4649      	mov	r1, r9
 8014506:	f7eb febf 	bl	8000288 <__aeabi_dsub>
 801450a:	3630      	adds	r6, #48	; 0x30
 801450c:	f805 6b01 	strb.w	r6, [r5], #1
 8014510:	ec53 2b19 	vmov	r2, r3, d9
 8014514:	4680      	mov	r8, r0
 8014516:	4689      	mov	r9, r1
 8014518:	f7ec fae0 	bl	8000adc <__aeabi_dcmplt>
 801451c:	2800      	cmp	r0, #0
 801451e:	d164      	bne.n	80145ea <_dtoa_r+0x62a>
 8014520:	4642      	mov	r2, r8
 8014522:	464b      	mov	r3, r9
 8014524:	4937      	ldr	r1, [pc, #220]	; (8014604 <_dtoa_r+0x644>)
 8014526:	2000      	movs	r0, #0
 8014528:	f7eb feae 	bl	8000288 <__aeabi_dsub>
 801452c:	ec53 2b19 	vmov	r2, r3, d9
 8014530:	f7ec fad4 	bl	8000adc <__aeabi_dcmplt>
 8014534:	2800      	cmp	r0, #0
 8014536:	f040 80b6 	bne.w	80146a6 <_dtoa_r+0x6e6>
 801453a:	9b02      	ldr	r3, [sp, #8]
 801453c:	429d      	cmp	r5, r3
 801453e:	f43f af7c 	beq.w	801443a <_dtoa_r+0x47a>
 8014542:	4b31      	ldr	r3, [pc, #196]	; (8014608 <_dtoa_r+0x648>)
 8014544:	ec51 0b19 	vmov	r0, r1, d9
 8014548:	2200      	movs	r2, #0
 801454a:	f7ec f855 	bl	80005f8 <__aeabi_dmul>
 801454e:	4b2e      	ldr	r3, [pc, #184]	; (8014608 <_dtoa_r+0x648>)
 8014550:	ec41 0b19 	vmov	d9, r0, r1
 8014554:	2200      	movs	r2, #0
 8014556:	4640      	mov	r0, r8
 8014558:	4649      	mov	r1, r9
 801455a:	f7ec f84d 	bl	80005f8 <__aeabi_dmul>
 801455e:	4680      	mov	r8, r0
 8014560:	4689      	mov	r9, r1
 8014562:	e7c5      	b.n	80144f0 <_dtoa_r+0x530>
 8014564:	ec51 0b17 	vmov	r0, r1, d7
 8014568:	f7ec f846 	bl	80005f8 <__aeabi_dmul>
 801456c:	9b02      	ldr	r3, [sp, #8]
 801456e:	9d00      	ldr	r5, [sp, #0]
 8014570:	930f      	str	r3, [sp, #60]	; 0x3c
 8014572:	ec41 0b19 	vmov	d9, r0, r1
 8014576:	4649      	mov	r1, r9
 8014578:	4640      	mov	r0, r8
 801457a:	f7ec faed 	bl	8000b58 <__aeabi_d2iz>
 801457e:	4606      	mov	r6, r0
 8014580:	f7eb ffd0 	bl	8000524 <__aeabi_i2d>
 8014584:	3630      	adds	r6, #48	; 0x30
 8014586:	4602      	mov	r2, r0
 8014588:	460b      	mov	r3, r1
 801458a:	4640      	mov	r0, r8
 801458c:	4649      	mov	r1, r9
 801458e:	f7eb fe7b 	bl	8000288 <__aeabi_dsub>
 8014592:	f805 6b01 	strb.w	r6, [r5], #1
 8014596:	9b02      	ldr	r3, [sp, #8]
 8014598:	429d      	cmp	r5, r3
 801459a:	4680      	mov	r8, r0
 801459c:	4689      	mov	r9, r1
 801459e:	f04f 0200 	mov.w	r2, #0
 80145a2:	d124      	bne.n	80145ee <_dtoa_r+0x62e>
 80145a4:	4b1b      	ldr	r3, [pc, #108]	; (8014614 <_dtoa_r+0x654>)
 80145a6:	ec51 0b19 	vmov	r0, r1, d9
 80145aa:	f7eb fe6f 	bl	800028c <__adddf3>
 80145ae:	4602      	mov	r2, r0
 80145b0:	460b      	mov	r3, r1
 80145b2:	4640      	mov	r0, r8
 80145b4:	4649      	mov	r1, r9
 80145b6:	f7ec faaf 	bl	8000b18 <__aeabi_dcmpgt>
 80145ba:	2800      	cmp	r0, #0
 80145bc:	d173      	bne.n	80146a6 <_dtoa_r+0x6e6>
 80145be:	ec53 2b19 	vmov	r2, r3, d9
 80145c2:	4914      	ldr	r1, [pc, #80]	; (8014614 <_dtoa_r+0x654>)
 80145c4:	2000      	movs	r0, #0
 80145c6:	f7eb fe5f 	bl	8000288 <__aeabi_dsub>
 80145ca:	4602      	mov	r2, r0
 80145cc:	460b      	mov	r3, r1
 80145ce:	4640      	mov	r0, r8
 80145d0:	4649      	mov	r1, r9
 80145d2:	f7ec fa83 	bl	8000adc <__aeabi_dcmplt>
 80145d6:	2800      	cmp	r0, #0
 80145d8:	f43f af2f 	beq.w	801443a <_dtoa_r+0x47a>
 80145dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80145de:	1e6b      	subs	r3, r5, #1
 80145e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80145e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80145e6:	2b30      	cmp	r3, #48	; 0x30
 80145e8:	d0f8      	beq.n	80145dc <_dtoa_r+0x61c>
 80145ea:	46bb      	mov	fp, r7
 80145ec:	e04a      	b.n	8014684 <_dtoa_r+0x6c4>
 80145ee:	4b06      	ldr	r3, [pc, #24]	; (8014608 <_dtoa_r+0x648>)
 80145f0:	f7ec f802 	bl	80005f8 <__aeabi_dmul>
 80145f4:	4680      	mov	r8, r0
 80145f6:	4689      	mov	r9, r1
 80145f8:	e7bd      	b.n	8014576 <_dtoa_r+0x5b6>
 80145fa:	bf00      	nop
 80145fc:	080181a0 	.word	0x080181a0
 8014600:	08018178 	.word	0x08018178
 8014604:	3ff00000 	.word	0x3ff00000
 8014608:	40240000 	.word	0x40240000
 801460c:	401c0000 	.word	0x401c0000
 8014610:	40140000 	.word	0x40140000
 8014614:	3fe00000 	.word	0x3fe00000
 8014618:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 801461c:	9d00      	ldr	r5, [sp, #0]
 801461e:	4642      	mov	r2, r8
 8014620:	464b      	mov	r3, r9
 8014622:	4630      	mov	r0, r6
 8014624:	4639      	mov	r1, r7
 8014626:	f7ec f911 	bl	800084c <__aeabi_ddiv>
 801462a:	f7ec fa95 	bl	8000b58 <__aeabi_d2iz>
 801462e:	9001      	str	r0, [sp, #4]
 8014630:	f7eb ff78 	bl	8000524 <__aeabi_i2d>
 8014634:	4642      	mov	r2, r8
 8014636:	464b      	mov	r3, r9
 8014638:	f7eb ffde 	bl	80005f8 <__aeabi_dmul>
 801463c:	4602      	mov	r2, r0
 801463e:	460b      	mov	r3, r1
 8014640:	4630      	mov	r0, r6
 8014642:	4639      	mov	r1, r7
 8014644:	f7eb fe20 	bl	8000288 <__aeabi_dsub>
 8014648:	9e01      	ldr	r6, [sp, #4]
 801464a:	9f04      	ldr	r7, [sp, #16]
 801464c:	3630      	adds	r6, #48	; 0x30
 801464e:	f805 6b01 	strb.w	r6, [r5], #1
 8014652:	9e00      	ldr	r6, [sp, #0]
 8014654:	1bae      	subs	r6, r5, r6
 8014656:	42b7      	cmp	r7, r6
 8014658:	4602      	mov	r2, r0
 801465a:	460b      	mov	r3, r1
 801465c:	d134      	bne.n	80146c8 <_dtoa_r+0x708>
 801465e:	f7eb fe15 	bl	800028c <__adddf3>
 8014662:	4642      	mov	r2, r8
 8014664:	464b      	mov	r3, r9
 8014666:	4606      	mov	r6, r0
 8014668:	460f      	mov	r7, r1
 801466a:	f7ec fa55 	bl	8000b18 <__aeabi_dcmpgt>
 801466e:	b9c8      	cbnz	r0, 80146a4 <_dtoa_r+0x6e4>
 8014670:	4642      	mov	r2, r8
 8014672:	464b      	mov	r3, r9
 8014674:	4630      	mov	r0, r6
 8014676:	4639      	mov	r1, r7
 8014678:	f7ec fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 801467c:	b110      	cbz	r0, 8014684 <_dtoa_r+0x6c4>
 801467e:	9b01      	ldr	r3, [sp, #4]
 8014680:	07db      	lsls	r3, r3, #31
 8014682:	d40f      	bmi.n	80146a4 <_dtoa_r+0x6e4>
 8014684:	4651      	mov	r1, sl
 8014686:	4620      	mov	r0, r4
 8014688:	f000 ff36 	bl	80154f8 <_Bfree>
 801468c:	2300      	movs	r3, #0
 801468e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8014690:	702b      	strb	r3, [r5, #0]
 8014692:	f10b 0301 	add.w	r3, fp, #1
 8014696:	6013      	str	r3, [r2, #0]
 8014698:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801469a:	2b00      	cmp	r3, #0
 801469c:	f43f ace2 	beq.w	8014064 <_dtoa_r+0xa4>
 80146a0:	601d      	str	r5, [r3, #0]
 80146a2:	e4df      	b.n	8014064 <_dtoa_r+0xa4>
 80146a4:	465f      	mov	r7, fp
 80146a6:	462b      	mov	r3, r5
 80146a8:	461d      	mov	r5, r3
 80146aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80146ae:	2a39      	cmp	r2, #57	; 0x39
 80146b0:	d106      	bne.n	80146c0 <_dtoa_r+0x700>
 80146b2:	9a00      	ldr	r2, [sp, #0]
 80146b4:	429a      	cmp	r2, r3
 80146b6:	d1f7      	bne.n	80146a8 <_dtoa_r+0x6e8>
 80146b8:	9900      	ldr	r1, [sp, #0]
 80146ba:	2230      	movs	r2, #48	; 0x30
 80146bc:	3701      	adds	r7, #1
 80146be:	700a      	strb	r2, [r1, #0]
 80146c0:	781a      	ldrb	r2, [r3, #0]
 80146c2:	3201      	adds	r2, #1
 80146c4:	701a      	strb	r2, [r3, #0]
 80146c6:	e790      	b.n	80145ea <_dtoa_r+0x62a>
 80146c8:	4ba3      	ldr	r3, [pc, #652]	; (8014958 <_dtoa_r+0x998>)
 80146ca:	2200      	movs	r2, #0
 80146cc:	f7eb ff94 	bl	80005f8 <__aeabi_dmul>
 80146d0:	2200      	movs	r2, #0
 80146d2:	2300      	movs	r3, #0
 80146d4:	4606      	mov	r6, r0
 80146d6:	460f      	mov	r7, r1
 80146d8:	f7ec f9f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80146dc:	2800      	cmp	r0, #0
 80146de:	d09e      	beq.n	801461e <_dtoa_r+0x65e>
 80146e0:	e7d0      	b.n	8014684 <_dtoa_r+0x6c4>
 80146e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80146e4:	2a00      	cmp	r2, #0
 80146e6:	f000 80ca 	beq.w	801487e <_dtoa_r+0x8be>
 80146ea:	9a07      	ldr	r2, [sp, #28]
 80146ec:	2a01      	cmp	r2, #1
 80146ee:	f300 80ad 	bgt.w	801484c <_dtoa_r+0x88c>
 80146f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80146f4:	2a00      	cmp	r2, #0
 80146f6:	f000 80a5 	beq.w	8014844 <_dtoa_r+0x884>
 80146fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80146fe:	9e08      	ldr	r6, [sp, #32]
 8014700:	9d05      	ldr	r5, [sp, #20]
 8014702:	9a05      	ldr	r2, [sp, #20]
 8014704:	441a      	add	r2, r3
 8014706:	9205      	str	r2, [sp, #20]
 8014708:	9a06      	ldr	r2, [sp, #24]
 801470a:	2101      	movs	r1, #1
 801470c:	441a      	add	r2, r3
 801470e:	4620      	mov	r0, r4
 8014710:	9206      	str	r2, [sp, #24]
 8014712:	f000 fff1 	bl	80156f8 <__i2b>
 8014716:	4607      	mov	r7, r0
 8014718:	b165      	cbz	r5, 8014734 <_dtoa_r+0x774>
 801471a:	9b06      	ldr	r3, [sp, #24]
 801471c:	2b00      	cmp	r3, #0
 801471e:	dd09      	ble.n	8014734 <_dtoa_r+0x774>
 8014720:	42ab      	cmp	r3, r5
 8014722:	9a05      	ldr	r2, [sp, #20]
 8014724:	bfa8      	it	ge
 8014726:	462b      	movge	r3, r5
 8014728:	1ad2      	subs	r2, r2, r3
 801472a:	9205      	str	r2, [sp, #20]
 801472c:	9a06      	ldr	r2, [sp, #24]
 801472e:	1aed      	subs	r5, r5, r3
 8014730:	1ad3      	subs	r3, r2, r3
 8014732:	9306      	str	r3, [sp, #24]
 8014734:	9b08      	ldr	r3, [sp, #32]
 8014736:	b1f3      	cbz	r3, 8014776 <_dtoa_r+0x7b6>
 8014738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801473a:	2b00      	cmp	r3, #0
 801473c:	f000 80a3 	beq.w	8014886 <_dtoa_r+0x8c6>
 8014740:	2e00      	cmp	r6, #0
 8014742:	dd10      	ble.n	8014766 <_dtoa_r+0x7a6>
 8014744:	4639      	mov	r1, r7
 8014746:	4632      	mov	r2, r6
 8014748:	4620      	mov	r0, r4
 801474a:	f001 f895 	bl	8015878 <__pow5mult>
 801474e:	4652      	mov	r2, sl
 8014750:	4601      	mov	r1, r0
 8014752:	4607      	mov	r7, r0
 8014754:	4620      	mov	r0, r4
 8014756:	f000 ffe5 	bl	8015724 <__multiply>
 801475a:	4651      	mov	r1, sl
 801475c:	4680      	mov	r8, r0
 801475e:	4620      	mov	r0, r4
 8014760:	f000 feca 	bl	80154f8 <_Bfree>
 8014764:	46c2      	mov	sl, r8
 8014766:	9b08      	ldr	r3, [sp, #32]
 8014768:	1b9a      	subs	r2, r3, r6
 801476a:	d004      	beq.n	8014776 <_dtoa_r+0x7b6>
 801476c:	4651      	mov	r1, sl
 801476e:	4620      	mov	r0, r4
 8014770:	f001 f882 	bl	8015878 <__pow5mult>
 8014774:	4682      	mov	sl, r0
 8014776:	2101      	movs	r1, #1
 8014778:	4620      	mov	r0, r4
 801477a:	f000 ffbd 	bl	80156f8 <__i2b>
 801477e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014780:	2b00      	cmp	r3, #0
 8014782:	4606      	mov	r6, r0
 8014784:	f340 8081 	ble.w	801488a <_dtoa_r+0x8ca>
 8014788:	461a      	mov	r2, r3
 801478a:	4601      	mov	r1, r0
 801478c:	4620      	mov	r0, r4
 801478e:	f001 f873 	bl	8015878 <__pow5mult>
 8014792:	9b07      	ldr	r3, [sp, #28]
 8014794:	2b01      	cmp	r3, #1
 8014796:	4606      	mov	r6, r0
 8014798:	dd7a      	ble.n	8014890 <_dtoa_r+0x8d0>
 801479a:	f04f 0800 	mov.w	r8, #0
 801479e:	6933      	ldr	r3, [r6, #16]
 80147a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80147a4:	6918      	ldr	r0, [r3, #16]
 80147a6:	f000 ff59 	bl	801565c <__hi0bits>
 80147aa:	f1c0 0020 	rsb	r0, r0, #32
 80147ae:	9b06      	ldr	r3, [sp, #24]
 80147b0:	4418      	add	r0, r3
 80147b2:	f010 001f 	ands.w	r0, r0, #31
 80147b6:	f000 8094 	beq.w	80148e2 <_dtoa_r+0x922>
 80147ba:	f1c0 0320 	rsb	r3, r0, #32
 80147be:	2b04      	cmp	r3, #4
 80147c0:	f340 8085 	ble.w	80148ce <_dtoa_r+0x90e>
 80147c4:	9b05      	ldr	r3, [sp, #20]
 80147c6:	f1c0 001c 	rsb	r0, r0, #28
 80147ca:	4403      	add	r3, r0
 80147cc:	9305      	str	r3, [sp, #20]
 80147ce:	9b06      	ldr	r3, [sp, #24]
 80147d0:	4403      	add	r3, r0
 80147d2:	4405      	add	r5, r0
 80147d4:	9306      	str	r3, [sp, #24]
 80147d6:	9b05      	ldr	r3, [sp, #20]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	dd05      	ble.n	80147e8 <_dtoa_r+0x828>
 80147dc:	4651      	mov	r1, sl
 80147de:	461a      	mov	r2, r3
 80147e0:	4620      	mov	r0, r4
 80147e2:	f001 f8a3 	bl	801592c <__lshift>
 80147e6:	4682      	mov	sl, r0
 80147e8:	9b06      	ldr	r3, [sp, #24]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	dd05      	ble.n	80147fa <_dtoa_r+0x83a>
 80147ee:	4631      	mov	r1, r6
 80147f0:	461a      	mov	r2, r3
 80147f2:	4620      	mov	r0, r4
 80147f4:	f001 f89a 	bl	801592c <__lshift>
 80147f8:	4606      	mov	r6, r0
 80147fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d072      	beq.n	80148e6 <_dtoa_r+0x926>
 8014800:	4631      	mov	r1, r6
 8014802:	4650      	mov	r0, sl
 8014804:	f001 f8fe 	bl	8015a04 <__mcmp>
 8014808:	2800      	cmp	r0, #0
 801480a:	da6c      	bge.n	80148e6 <_dtoa_r+0x926>
 801480c:	2300      	movs	r3, #0
 801480e:	4651      	mov	r1, sl
 8014810:	220a      	movs	r2, #10
 8014812:	4620      	mov	r0, r4
 8014814:	f000 fe92 	bl	801553c <__multadd>
 8014818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801481a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801481e:	4682      	mov	sl, r0
 8014820:	2b00      	cmp	r3, #0
 8014822:	f000 81b0 	beq.w	8014b86 <_dtoa_r+0xbc6>
 8014826:	2300      	movs	r3, #0
 8014828:	4639      	mov	r1, r7
 801482a:	220a      	movs	r2, #10
 801482c:	4620      	mov	r0, r4
 801482e:	f000 fe85 	bl	801553c <__multadd>
 8014832:	9b01      	ldr	r3, [sp, #4]
 8014834:	2b00      	cmp	r3, #0
 8014836:	4607      	mov	r7, r0
 8014838:	f300 8096 	bgt.w	8014968 <_dtoa_r+0x9a8>
 801483c:	9b07      	ldr	r3, [sp, #28]
 801483e:	2b02      	cmp	r3, #2
 8014840:	dc59      	bgt.n	80148f6 <_dtoa_r+0x936>
 8014842:	e091      	b.n	8014968 <_dtoa_r+0x9a8>
 8014844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8014846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801484a:	e758      	b.n	80146fe <_dtoa_r+0x73e>
 801484c:	9b04      	ldr	r3, [sp, #16]
 801484e:	1e5e      	subs	r6, r3, #1
 8014850:	9b08      	ldr	r3, [sp, #32]
 8014852:	42b3      	cmp	r3, r6
 8014854:	bfbf      	itttt	lt
 8014856:	9b08      	ldrlt	r3, [sp, #32]
 8014858:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801485a:	9608      	strlt	r6, [sp, #32]
 801485c:	1af3      	sublt	r3, r6, r3
 801485e:	bfb4      	ite	lt
 8014860:	18d2      	addlt	r2, r2, r3
 8014862:	1b9e      	subge	r6, r3, r6
 8014864:	9b04      	ldr	r3, [sp, #16]
 8014866:	bfbc      	itt	lt
 8014868:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801486a:	2600      	movlt	r6, #0
 801486c:	2b00      	cmp	r3, #0
 801486e:	bfb7      	itett	lt
 8014870:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8014874:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8014878:	1a9d      	sublt	r5, r3, r2
 801487a:	2300      	movlt	r3, #0
 801487c:	e741      	b.n	8014702 <_dtoa_r+0x742>
 801487e:	9e08      	ldr	r6, [sp, #32]
 8014880:	9d05      	ldr	r5, [sp, #20]
 8014882:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8014884:	e748      	b.n	8014718 <_dtoa_r+0x758>
 8014886:	9a08      	ldr	r2, [sp, #32]
 8014888:	e770      	b.n	801476c <_dtoa_r+0x7ac>
 801488a:	9b07      	ldr	r3, [sp, #28]
 801488c:	2b01      	cmp	r3, #1
 801488e:	dc19      	bgt.n	80148c4 <_dtoa_r+0x904>
 8014890:	9b02      	ldr	r3, [sp, #8]
 8014892:	b9bb      	cbnz	r3, 80148c4 <_dtoa_r+0x904>
 8014894:	9b03      	ldr	r3, [sp, #12]
 8014896:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801489a:	b99b      	cbnz	r3, 80148c4 <_dtoa_r+0x904>
 801489c:	9b03      	ldr	r3, [sp, #12]
 801489e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80148a2:	0d1b      	lsrs	r3, r3, #20
 80148a4:	051b      	lsls	r3, r3, #20
 80148a6:	b183      	cbz	r3, 80148ca <_dtoa_r+0x90a>
 80148a8:	9b05      	ldr	r3, [sp, #20]
 80148aa:	3301      	adds	r3, #1
 80148ac:	9305      	str	r3, [sp, #20]
 80148ae:	9b06      	ldr	r3, [sp, #24]
 80148b0:	3301      	adds	r3, #1
 80148b2:	9306      	str	r3, [sp, #24]
 80148b4:	f04f 0801 	mov.w	r8, #1
 80148b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148ba:	2b00      	cmp	r3, #0
 80148bc:	f47f af6f 	bne.w	801479e <_dtoa_r+0x7de>
 80148c0:	2001      	movs	r0, #1
 80148c2:	e774      	b.n	80147ae <_dtoa_r+0x7ee>
 80148c4:	f04f 0800 	mov.w	r8, #0
 80148c8:	e7f6      	b.n	80148b8 <_dtoa_r+0x8f8>
 80148ca:	4698      	mov	r8, r3
 80148cc:	e7f4      	b.n	80148b8 <_dtoa_r+0x8f8>
 80148ce:	d082      	beq.n	80147d6 <_dtoa_r+0x816>
 80148d0:	9a05      	ldr	r2, [sp, #20]
 80148d2:	331c      	adds	r3, #28
 80148d4:	441a      	add	r2, r3
 80148d6:	9205      	str	r2, [sp, #20]
 80148d8:	9a06      	ldr	r2, [sp, #24]
 80148da:	441a      	add	r2, r3
 80148dc:	441d      	add	r5, r3
 80148de:	9206      	str	r2, [sp, #24]
 80148e0:	e779      	b.n	80147d6 <_dtoa_r+0x816>
 80148e2:	4603      	mov	r3, r0
 80148e4:	e7f4      	b.n	80148d0 <_dtoa_r+0x910>
 80148e6:	9b04      	ldr	r3, [sp, #16]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	dc37      	bgt.n	801495c <_dtoa_r+0x99c>
 80148ec:	9b07      	ldr	r3, [sp, #28]
 80148ee:	2b02      	cmp	r3, #2
 80148f0:	dd34      	ble.n	801495c <_dtoa_r+0x99c>
 80148f2:	9b04      	ldr	r3, [sp, #16]
 80148f4:	9301      	str	r3, [sp, #4]
 80148f6:	9b01      	ldr	r3, [sp, #4]
 80148f8:	b963      	cbnz	r3, 8014914 <_dtoa_r+0x954>
 80148fa:	4631      	mov	r1, r6
 80148fc:	2205      	movs	r2, #5
 80148fe:	4620      	mov	r0, r4
 8014900:	f000 fe1c 	bl	801553c <__multadd>
 8014904:	4601      	mov	r1, r0
 8014906:	4606      	mov	r6, r0
 8014908:	4650      	mov	r0, sl
 801490a:	f001 f87b 	bl	8015a04 <__mcmp>
 801490e:	2800      	cmp	r0, #0
 8014910:	f73f adbb 	bgt.w	801448a <_dtoa_r+0x4ca>
 8014914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014916:	9d00      	ldr	r5, [sp, #0]
 8014918:	ea6f 0b03 	mvn.w	fp, r3
 801491c:	f04f 0800 	mov.w	r8, #0
 8014920:	4631      	mov	r1, r6
 8014922:	4620      	mov	r0, r4
 8014924:	f000 fde8 	bl	80154f8 <_Bfree>
 8014928:	2f00      	cmp	r7, #0
 801492a:	f43f aeab 	beq.w	8014684 <_dtoa_r+0x6c4>
 801492e:	f1b8 0f00 	cmp.w	r8, #0
 8014932:	d005      	beq.n	8014940 <_dtoa_r+0x980>
 8014934:	45b8      	cmp	r8, r7
 8014936:	d003      	beq.n	8014940 <_dtoa_r+0x980>
 8014938:	4641      	mov	r1, r8
 801493a:	4620      	mov	r0, r4
 801493c:	f000 fddc 	bl	80154f8 <_Bfree>
 8014940:	4639      	mov	r1, r7
 8014942:	4620      	mov	r0, r4
 8014944:	f000 fdd8 	bl	80154f8 <_Bfree>
 8014948:	e69c      	b.n	8014684 <_dtoa_r+0x6c4>
 801494a:	2600      	movs	r6, #0
 801494c:	4637      	mov	r7, r6
 801494e:	e7e1      	b.n	8014914 <_dtoa_r+0x954>
 8014950:	46bb      	mov	fp, r7
 8014952:	4637      	mov	r7, r6
 8014954:	e599      	b.n	801448a <_dtoa_r+0x4ca>
 8014956:	bf00      	nop
 8014958:	40240000 	.word	0x40240000
 801495c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801495e:	2b00      	cmp	r3, #0
 8014960:	f000 80c8 	beq.w	8014af4 <_dtoa_r+0xb34>
 8014964:	9b04      	ldr	r3, [sp, #16]
 8014966:	9301      	str	r3, [sp, #4]
 8014968:	2d00      	cmp	r5, #0
 801496a:	dd05      	ble.n	8014978 <_dtoa_r+0x9b8>
 801496c:	4639      	mov	r1, r7
 801496e:	462a      	mov	r2, r5
 8014970:	4620      	mov	r0, r4
 8014972:	f000 ffdb 	bl	801592c <__lshift>
 8014976:	4607      	mov	r7, r0
 8014978:	f1b8 0f00 	cmp.w	r8, #0
 801497c:	d05b      	beq.n	8014a36 <_dtoa_r+0xa76>
 801497e:	6879      	ldr	r1, [r7, #4]
 8014980:	4620      	mov	r0, r4
 8014982:	f000 fd79 	bl	8015478 <_Balloc>
 8014986:	4605      	mov	r5, r0
 8014988:	b928      	cbnz	r0, 8014996 <_dtoa_r+0x9d6>
 801498a:	4b83      	ldr	r3, [pc, #524]	; (8014b98 <_dtoa_r+0xbd8>)
 801498c:	4602      	mov	r2, r0
 801498e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8014992:	f7ff bb2e 	b.w	8013ff2 <_dtoa_r+0x32>
 8014996:	693a      	ldr	r2, [r7, #16]
 8014998:	3202      	adds	r2, #2
 801499a:	0092      	lsls	r2, r2, #2
 801499c:	f107 010c 	add.w	r1, r7, #12
 80149a0:	300c      	adds	r0, #12
 80149a2:	f7ff fa6c 	bl	8013e7e <memcpy>
 80149a6:	2201      	movs	r2, #1
 80149a8:	4629      	mov	r1, r5
 80149aa:	4620      	mov	r0, r4
 80149ac:	f000 ffbe 	bl	801592c <__lshift>
 80149b0:	9b00      	ldr	r3, [sp, #0]
 80149b2:	3301      	adds	r3, #1
 80149b4:	9304      	str	r3, [sp, #16]
 80149b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80149ba:	4413      	add	r3, r2
 80149bc:	9308      	str	r3, [sp, #32]
 80149be:	9b02      	ldr	r3, [sp, #8]
 80149c0:	f003 0301 	and.w	r3, r3, #1
 80149c4:	46b8      	mov	r8, r7
 80149c6:	9306      	str	r3, [sp, #24]
 80149c8:	4607      	mov	r7, r0
 80149ca:	9b04      	ldr	r3, [sp, #16]
 80149cc:	4631      	mov	r1, r6
 80149ce:	3b01      	subs	r3, #1
 80149d0:	4650      	mov	r0, sl
 80149d2:	9301      	str	r3, [sp, #4]
 80149d4:	f7ff fa6c 	bl	8013eb0 <quorem>
 80149d8:	4641      	mov	r1, r8
 80149da:	9002      	str	r0, [sp, #8]
 80149dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80149e0:	4650      	mov	r0, sl
 80149e2:	f001 f80f 	bl	8015a04 <__mcmp>
 80149e6:	463a      	mov	r2, r7
 80149e8:	9005      	str	r0, [sp, #20]
 80149ea:	4631      	mov	r1, r6
 80149ec:	4620      	mov	r0, r4
 80149ee:	f001 f825 	bl	8015a3c <__mdiff>
 80149f2:	68c2      	ldr	r2, [r0, #12]
 80149f4:	4605      	mov	r5, r0
 80149f6:	bb02      	cbnz	r2, 8014a3a <_dtoa_r+0xa7a>
 80149f8:	4601      	mov	r1, r0
 80149fa:	4650      	mov	r0, sl
 80149fc:	f001 f802 	bl	8015a04 <__mcmp>
 8014a00:	4602      	mov	r2, r0
 8014a02:	4629      	mov	r1, r5
 8014a04:	4620      	mov	r0, r4
 8014a06:	9209      	str	r2, [sp, #36]	; 0x24
 8014a08:	f000 fd76 	bl	80154f8 <_Bfree>
 8014a0c:	9b07      	ldr	r3, [sp, #28]
 8014a0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014a10:	9d04      	ldr	r5, [sp, #16]
 8014a12:	ea43 0102 	orr.w	r1, r3, r2
 8014a16:	9b06      	ldr	r3, [sp, #24]
 8014a18:	4319      	orrs	r1, r3
 8014a1a:	d110      	bne.n	8014a3e <_dtoa_r+0xa7e>
 8014a1c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014a20:	d029      	beq.n	8014a76 <_dtoa_r+0xab6>
 8014a22:	9b05      	ldr	r3, [sp, #20]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	dd02      	ble.n	8014a2e <_dtoa_r+0xa6e>
 8014a28:	9b02      	ldr	r3, [sp, #8]
 8014a2a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8014a2e:	9b01      	ldr	r3, [sp, #4]
 8014a30:	f883 9000 	strb.w	r9, [r3]
 8014a34:	e774      	b.n	8014920 <_dtoa_r+0x960>
 8014a36:	4638      	mov	r0, r7
 8014a38:	e7ba      	b.n	80149b0 <_dtoa_r+0x9f0>
 8014a3a:	2201      	movs	r2, #1
 8014a3c:	e7e1      	b.n	8014a02 <_dtoa_r+0xa42>
 8014a3e:	9b05      	ldr	r3, [sp, #20]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	db04      	blt.n	8014a4e <_dtoa_r+0xa8e>
 8014a44:	9907      	ldr	r1, [sp, #28]
 8014a46:	430b      	orrs	r3, r1
 8014a48:	9906      	ldr	r1, [sp, #24]
 8014a4a:	430b      	orrs	r3, r1
 8014a4c:	d120      	bne.n	8014a90 <_dtoa_r+0xad0>
 8014a4e:	2a00      	cmp	r2, #0
 8014a50:	dded      	ble.n	8014a2e <_dtoa_r+0xa6e>
 8014a52:	4651      	mov	r1, sl
 8014a54:	2201      	movs	r2, #1
 8014a56:	4620      	mov	r0, r4
 8014a58:	f000 ff68 	bl	801592c <__lshift>
 8014a5c:	4631      	mov	r1, r6
 8014a5e:	4682      	mov	sl, r0
 8014a60:	f000 ffd0 	bl	8015a04 <__mcmp>
 8014a64:	2800      	cmp	r0, #0
 8014a66:	dc03      	bgt.n	8014a70 <_dtoa_r+0xab0>
 8014a68:	d1e1      	bne.n	8014a2e <_dtoa_r+0xa6e>
 8014a6a:	f019 0f01 	tst.w	r9, #1
 8014a6e:	d0de      	beq.n	8014a2e <_dtoa_r+0xa6e>
 8014a70:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014a74:	d1d8      	bne.n	8014a28 <_dtoa_r+0xa68>
 8014a76:	9a01      	ldr	r2, [sp, #4]
 8014a78:	2339      	movs	r3, #57	; 0x39
 8014a7a:	7013      	strb	r3, [r2, #0]
 8014a7c:	462b      	mov	r3, r5
 8014a7e:	461d      	mov	r5, r3
 8014a80:	3b01      	subs	r3, #1
 8014a82:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8014a86:	2a39      	cmp	r2, #57	; 0x39
 8014a88:	d06c      	beq.n	8014b64 <_dtoa_r+0xba4>
 8014a8a:	3201      	adds	r2, #1
 8014a8c:	701a      	strb	r2, [r3, #0]
 8014a8e:	e747      	b.n	8014920 <_dtoa_r+0x960>
 8014a90:	2a00      	cmp	r2, #0
 8014a92:	dd07      	ble.n	8014aa4 <_dtoa_r+0xae4>
 8014a94:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8014a98:	d0ed      	beq.n	8014a76 <_dtoa_r+0xab6>
 8014a9a:	9a01      	ldr	r2, [sp, #4]
 8014a9c:	f109 0301 	add.w	r3, r9, #1
 8014aa0:	7013      	strb	r3, [r2, #0]
 8014aa2:	e73d      	b.n	8014920 <_dtoa_r+0x960>
 8014aa4:	9b04      	ldr	r3, [sp, #16]
 8014aa6:	9a08      	ldr	r2, [sp, #32]
 8014aa8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8014aac:	4293      	cmp	r3, r2
 8014aae:	d043      	beq.n	8014b38 <_dtoa_r+0xb78>
 8014ab0:	4651      	mov	r1, sl
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	220a      	movs	r2, #10
 8014ab6:	4620      	mov	r0, r4
 8014ab8:	f000 fd40 	bl	801553c <__multadd>
 8014abc:	45b8      	cmp	r8, r7
 8014abe:	4682      	mov	sl, r0
 8014ac0:	f04f 0300 	mov.w	r3, #0
 8014ac4:	f04f 020a 	mov.w	r2, #10
 8014ac8:	4641      	mov	r1, r8
 8014aca:	4620      	mov	r0, r4
 8014acc:	d107      	bne.n	8014ade <_dtoa_r+0xb1e>
 8014ace:	f000 fd35 	bl	801553c <__multadd>
 8014ad2:	4680      	mov	r8, r0
 8014ad4:	4607      	mov	r7, r0
 8014ad6:	9b04      	ldr	r3, [sp, #16]
 8014ad8:	3301      	adds	r3, #1
 8014ada:	9304      	str	r3, [sp, #16]
 8014adc:	e775      	b.n	80149ca <_dtoa_r+0xa0a>
 8014ade:	f000 fd2d 	bl	801553c <__multadd>
 8014ae2:	4639      	mov	r1, r7
 8014ae4:	4680      	mov	r8, r0
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	220a      	movs	r2, #10
 8014aea:	4620      	mov	r0, r4
 8014aec:	f000 fd26 	bl	801553c <__multadd>
 8014af0:	4607      	mov	r7, r0
 8014af2:	e7f0      	b.n	8014ad6 <_dtoa_r+0xb16>
 8014af4:	9b04      	ldr	r3, [sp, #16]
 8014af6:	9301      	str	r3, [sp, #4]
 8014af8:	9d00      	ldr	r5, [sp, #0]
 8014afa:	4631      	mov	r1, r6
 8014afc:	4650      	mov	r0, sl
 8014afe:	f7ff f9d7 	bl	8013eb0 <quorem>
 8014b02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8014b06:	9b00      	ldr	r3, [sp, #0]
 8014b08:	f805 9b01 	strb.w	r9, [r5], #1
 8014b0c:	1aea      	subs	r2, r5, r3
 8014b0e:	9b01      	ldr	r3, [sp, #4]
 8014b10:	4293      	cmp	r3, r2
 8014b12:	dd07      	ble.n	8014b24 <_dtoa_r+0xb64>
 8014b14:	4651      	mov	r1, sl
 8014b16:	2300      	movs	r3, #0
 8014b18:	220a      	movs	r2, #10
 8014b1a:	4620      	mov	r0, r4
 8014b1c:	f000 fd0e 	bl	801553c <__multadd>
 8014b20:	4682      	mov	sl, r0
 8014b22:	e7ea      	b.n	8014afa <_dtoa_r+0xb3a>
 8014b24:	9b01      	ldr	r3, [sp, #4]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	bfc8      	it	gt
 8014b2a:	461d      	movgt	r5, r3
 8014b2c:	9b00      	ldr	r3, [sp, #0]
 8014b2e:	bfd8      	it	le
 8014b30:	2501      	movle	r5, #1
 8014b32:	441d      	add	r5, r3
 8014b34:	f04f 0800 	mov.w	r8, #0
 8014b38:	4651      	mov	r1, sl
 8014b3a:	2201      	movs	r2, #1
 8014b3c:	4620      	mov	r0, r4
 8014b3e:	f000 fef5 	bl	801592c <__lshift>
 8014b42:	4631      	mov	r1, r6
 8014b44:	4682      	mov	sl, r0
 8014b46:	f000 ff5d 	bl	8015a04 <__mcmp>
 8014b4a:	2800      	cmp	r0, #0
 8014b4c:	dc96      	bgt.n	8014a7c <_dtoa_r+0xabc>
 8014b4e:	d102      	bne.n	8014b56 <_dtoa_r+0xb96>
 8014b50:	f019 0f01 	tst.w	r9, #1
 8014b54:	d192      	bne.n	8014a7c <_dtoa_r+0xabc>
 8014b56:	462b      	mov	r3, r5
 8014b58:	461d      	mov	r5, r3
 8014b5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8014b5e:	2a30      	cmp	r2, #48	; 0x30
 8014b60:	d0fa      	beq.n	8014b58 <_dtoa_r+0xb98>
 8014b62:	e6dd      	b.n	8014920 <_dtoa_r+0x960>
 8014b64:	9a00      	ldr	r2, [sp, #0]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d189      	bne.n	8014a7e <_dtoa_r+0xabe>
 8014b6a:	f10b 0b01 	add.w	fp, fp, #1
 8014b6e:	2331      	movs	r3, #49	; 0x31
 8014b70:	e796      	b.n	8014aa0 <_dtoa_r+0xae0>
 8014b72:	4b0a      	ldr	r3, [pc, #40]	; (8014b9c <_dtoa_r+0xbdc>)
 8014b74:	f7ff ba99 	b.w	80140aa <_dtoa_r+0xea>
 8014b78:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	f47f aa6d 	bne.w	801405a <_dtoa_r+0x9a>
 8014b80:	4b07      	ldr	r3, [pc, #28]	; (8014ba0 <_dtoa_r+0xbe0>)
 8014b82:	f7ff ba92 	b.w	80140aa <_dtoa_r+0xea>
 8014b86:	9b01      	ldr	r3, [sp, #4]
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	dcb5      	bgt.n	8014af8 <_dtoa_r+0xb38>
 8014b8c:	9b07      	ldr	r3, [sp, #28]
 8014b8e:	2b02      	cmp	r3, #2
 8014b90:	f73f aeb1 	bgt.w	80148f6 <_dtoa_r+0x936>
 8014b94:	e7b0      	b.n	8014af8 <_dtoa_r+0xb38>
 8014b96:	bf00      	nop
 8014b98:	080180a9 	.word	0x080180a9
 8014b9c:	08018001 	.word	0x08018001
 8014ba0:	0801802d 	.word	0x0801802d

08014ba4 <_free_r>:
 8014ba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014ba6:	2900      	cmp	r1, #0
 8014ba8:	d044      	beq.n	8014c34 <_free_r+0x90>
 8014baa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014bae:	9001      	str	r0, [sp, #4]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	f1a1 0404 	sub.w	r4, r1, #4
 8014bb6:	bfb8      	it	lt
 8014bb8:	18e4      	addlt	r4, r4, r3
 8014bba:	f000 fc51 	bl	8015460 <__malloc_lock>
 8014bbe:	4a1e      	ldr	r2, [pc, #120]	; (8014c38 <_free_r+0x94>)
 8014bc0:	9801      	ldr	r0, [sp, #4]
 8014bc2:	6813      	ldr	r3, [r2, #0]
 8014bc4:	b933      	cbnz	r3, 8014bd4 <_free_r+0x30>
 8014bc6:	6063      	str	r3, [r4, #4]
 8014bc8:	6014      	str	r4, [r2, #0]
 8014bca:	b003      	add	sp, #12
 8014bcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014bd0:	f000 bc4c 	b.w	801546c <__malloc_unlock>
 8014bd4:	42a3      	cmp	r3, r4
 8014bd6:	d908      	bls.n	8014bea <_free_r+0x46>
 8014bd8:	6825      	ldr	r5, [r4, #0]
 8014bda:	1961      	adds	r1, r4, r5
 8014bdc:	428b      	cmp	r3, r1
 8014bde:	bf01      	itttt	eq
 8014be0:	6819      	ldreq	r1, [r3, #0]
 8014be2:	685b      	ldreq	r3, [r3, #4]
 8014be4:	1949      	addeq	r1, r1, r5
 8014be6:	6021      	streq	r1, [r4, #0]
 8014be8:	e7ed      	b.n	8014bc6 <_free_r+0x22>
 8014bea:	461a      	mov	r2, r3
 8014bec:	685b      	ldr	r3, [r3, #4]
 8014bee:	b10b      	cbz	r3, 8014bf4 <_free_r+0x50>
 8014bf0:	42a3      	cmp	r3, r4
 8014bf2:	d9fa      	bls.n	8014bea <_free_r+0x46>
 8014bf4:	6811      	ldr	r1, [r2, #0]
 8014bf6:	1855      	adds	r5, r2, r1
 8014bf8:	42a5      	cmp	r5, r4
 8014bfa:	d10b      	bne.n	8014c14 <_free_r+0x70>
 8014bfc:	6824      	ldr	r4, [r4, #0]
 8014bfe:	4421      	add	r1, r4
 8014c00:	1854      	adds	r4, r2, r1
 8014c02:	42a3      	cmp	r3, r4
 8014c04:	6011      	str	r1, [r2, #0]
 8014c06:	d1e0      	bne.n	8014bca <_free_r+0x26>
 8014c08:	681c      	ldr	r4, [r3, #0]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	6053      	str	r3, [r2, #4]
 8014c0e:	440c      	add	r4, r1
 8014c10:	6014      	str	r4, [r2, #0]
 8014c12:	e7da      	b.n	8014bca <_free_r+0x26>
 8014c14:	d902      	bls.n	8014c1c <_free_r+0x78>
 8014c16:	230c      	movs	r3, #12
 8014c18:	6003      	str	r3, [r0, #0]
 8014c1a:	e7d6      	b.n	8014bca <_free_r+0x26>
 8014c1c:	6825      	ldr	r5, [r4, #0]
 8014c1e:	1961      	adds	r1, r4, r5
 8014c20:	428b      	cmp	r3, r1
 8014c22:	bf04      	itt	eq
 8014c24:	6819      	ldreq	r1, [r3, #0]
 8014c26:	685b      	ldreq	r3, [r3, #4]
 8014c28:	6063      	str	r3, [r4, #4]
 8014c2a:	bf04      	itt	eq
 8014c2c:	1949      	addeq	r1, r1, r5
 8014c2e:	6021      	streq	r1, [r4, #0]
 8014c30:	6054      	str	r4, [r2, #4]
 8014c32:	e7ca      	b.n	8014bca <_free_r+0x26>
 8014c34:	b003      	add	sp, #12
 8014c36:	bd30      	pop	{r4, r5, pc}
 8014c38:	20001598 	.word	0x20001598

08014c3c <rshift>:
 8014c3c:	6903      	ldr	r3, [r0, #16]
 8014c3e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8014c42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014c46:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014c4a:	f100 0414 	add.w	r4, r0, #20
 8014c4e:	dd45      	ble.n	8014cdc <rshift+0xa0>
 8014c50:	f011 011f 	ands.w	r1, r1, #31
 8014c54:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8014c58:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8014c5c:	d10c      	bne.n	8014c78 <rshift+0x3c>
 8014c5e:	f100 0710 	add.w	r7, r0, #16
 8014c62:	4629      	mov	r1, r5
 8014c64:	42b1      	cmp	r1, r6
 8014c66:	d334      	bcc.n	8014cd2 <rshift+0x96>
 8014c68:	1a9b      	subs	r3, r3, r2
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	1eea      	subs	r2, r5, #3
 8014c6e:	4296      	cmp	r6, r2
 8014c70:	bf38      	it	cc
 8014c72:	2300      	movcc	r3, #0
 8014c74:	4423      	add	r3, r4
 8014c76:	e015      	b.n	8014ca4 <rshift+0x68>
 8014c78:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8014c7c:	f1c1 0820 	rsb	r8, r1, #32
 8014c80:	40cf      	lsrs	r7, r1
 8014c82:	f105 0e04 	add.w	lr, r5, #4
 8014c86:	46a1      	mov	r9, r4
 8014c88:	4576      	cmp	r6, lr
 8014c8a:	46f4      	mov	ip, lr
 8014c8c:	d815      	bhi.n	8014cba <rshift+0x7e>
 8014c8e:	1a9a      	subs	r2, r3, r2
 8014c90:	0092      	lsls	r2, r2, #2
 8014c92:	3a04      	subs	r2, #4
 8014c94:	3501      	adds	r5, #1
 8014c96:	42ae      	cmp	r6, r5
 8014c98:	bf38      	it	cc
 8014c9a:	2200      	movcc	r2, #0
 8014c9c:	18a3      	adds	r3, r4, r2
 8014c9e:	50a7      	str	r7, [r4, r2]
 8014ca0:	b107      	cbz	r7, 8014ca4 <rshift+0x68>
 8014ca2:	3304      	adds	r3, #4
 8014ca4:	1b1a      	subs	r2, r3, r4
 8014ca6:	42a3      	cmp	r3, r4
 8014ca8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014cac:	bf08      	it	eq
 8014cae:	2300      	moveq	r3, #0
 8014cb0:	6102      	str	r2, [r0, #16]
 8014cb2:	bf08      	it	eq
 8014cb4:	6143      	streq	r3, [r0, #20]
 8014cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cba:	f8dc c000 	ldr.w	ip, [ip]
 8014cbe:	fa0c fc08 	lsl.w	ip, ip, r8
 8014cc2:	ea4c 0707 	orr.w	r7, ip, r7
 8014cc6:	f849 7b04 	str.w	r7, [r9], #4
 8014cca:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014cce:	40cf      	lsrs	r7, r1
 8014cd0:	e7da      	b.n	8014c88 <rshift+0x4c>
 8014cd2:	f851 cb04 	ldr.w	ip, [r1], #4
 8014cd6:	f847 cf04 	str.w	ip, [r7, #4]!
 8014cda:	e7c3      	b.n	8014c64 <rshift+0x28>
 8014cdc:	4623      	mov	r3, r4
 8014cde:	e7e1      	b.n	8014ca4 <rshift+0x68>

08014ce0 <__hexdig_fun>:
 8014ce0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014ce4:	2b09      	cmp	r3, #9
 8014ce6:	d802      	bhi.n	8014cee <__hexdig_fun+0xe>
 8014ce8:	3820      	subs	r0, #32
 8014cea:	b2c0      	uxtb	r0, r0
 8014cec:	4770      	bx	lr
 8014cee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014cf2:	2b05      	cmp	r3, #5
 8014cf4:	d801      	bhi.n	8014cfa <__hexdig_fun+0x1a>
 8014cf6:	3847      	subs	r0, #71	; 0x47
 8014cf8:	e7f7      	b.n	8014cea <__hexdig_fun+0xa>
 8014cfa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014cfe:	2b05      	cmp	r3, #5
 8014d00:	d801      	bhi.n	8014d06 <__hexdig_fun+0x26>
 8014d02:	3827      	subs	r0, #39	; 0x27
 8014d04:	e7f1      	b.n	8014cea <__hexdig_fun+0xa>
 8014d06:	2000      	movs	r0, #0
 8014d08:	4770      	bx	lr
	...

08014d0c <__gethex>:
 8014d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d10:	4617      	mov	r7, r2
 8014d12:	680a      	ldr	r2, [r1, #0]
 8014d14:	b085      	sub	sp, #20
 8014d16:	f102 0b02 	add.w	fp, r2, #2
 8014d1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014d1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014d22:	4681      	mov	r9, r0
 8014d24:	468a      	mov	sl, r1
 8014d26:	9302      	str	r3, [sp, #8]
 8014d28:	32fe      	adds	r2, #254	; 0xfe
 8014d2a:	eb02 030b 	add.w	r3, r2, fp
 8014d2e:	46d8      	mov	r8, fp
 8014d30:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8014d34:	9301      	str	r3, [sp, #4]
 8014d36:	2830      	cmp	r0, #48	; 0x30
 8014d38:	d0f7      	beq.n	8014d2a <__gethex+0x1e>
 8014d3a:	f7ff ffd1 	bl	8014ce0 <__hexdig_fun>
 8014d3e:	4604      	mov	r4, r0
 8014d40:	2800      	cmp	r0, #0
 8014d42:	d138      	bne.n	8014db6 <__gethex+0xaa>
 8014d44:	49a7      	ldr	r1, [pc, #668]	; (8014fe4 <__gethex+0x2d8>)
 8014d46:	2201      	movs	r2, #1
 8014d48:	4640      	mov	r0, r8
 8014d4a:	f7ff f803 	bl	8013d54 <strncmp>
 8014d4e:	4606      	mov	r6, r0
 8014d50:	2800      	cmp	r0, #0
 8014d52:	d169      	bne.n	8014e28 <__gethex+0x11c>
 8014d54:	f898 0001 	ldrb.w	r0, [r8, #1]
 8014d58:	465d      	mov	r5, fp
 8014d5a:	f7ff ffc1 	bl	8014ce0 <__hexdig_fun>
 8014d5e:	2800      	cmp	r0, #0
 8014d60:	d064      	beq.n	8014e2c <__gethex+0x120>
 8014d62:	465a      	mov	r2, fp
 8014d64:	7810      	ldrb	r0, [r2, #0]
 8014d66:	2830      	cmp	r0, #48	; 0x30
 8014d68:	4690      	mov	r8, r2
 8014d6a:	f102 0201 	add.w	r2, r2, #1
 8014d6e:	d0f9      	beq.n	8014d64 <__gethex+0x58>
 8014d70:	f7ff ffb6 	bl	8014ce0 <__hexdig_fun>
 8014d74:	2301      	movs	r3, #1
 8014d76:	fab0 f480 	clz	r4, r0
 8014d7a:	0964      	lsrs	r4, r4, #5
 8014d7c:	465e      	mov	r6, fp
 8014d7e:	9301      	str	r3, [sp, #4]
 8014d80:	4642      	mov	r2, r8
 8014d82:	4615      	mov	r5, r2
 8014d84:	3201      	adds	r2, #1
 8014d86:	7828      	ldrb	r0, [r5, #0]
 8014d88:	f7ff ffaa 	bl	8014ce0 <__hexdig_fun>
 8014d8c:	2800      	cmp	r0, #0
 8014d8e:	d1f8      	bne.n	8014d82 <__gethex+0x76>
 8014d90:	4994      	ldr	r1, [pc, #592]	; (8014fe4 <__gethex+0x2d8>)
 8014d92:	2201      	movs	r2, #1
 8014d94:	4628      	mov	r0, r5
 8014d96:	f7fe ffdd 	bl	8013d54 <strncmp>
 8014d9a:	b978      	cbnz	r0, 8014dbc <__gethex+0xb0>
 8014d9c:	b946      	cbnz	r6, 8014db0 <__gethex+0xa4>
 8014d9e:	1c6e      	adds	r6, r5, #1
 8014da0:	4632      	mov	r2, r6
 8014da2:	4615      	mov	r5, r2
 8014da4:	3201      	adds	r2, #1
 8014da6:	7828      	ldrb	r0, [r5, #0]
 8014da8:	f7ff ff9a 	bl	8014ce0 <__hexdig_fun>
 8014dac:	2800      	cmp	r0, #0
 8014dae:	d1f8      	bne.n	8014da2 <__gethex+0x96>
 8014db0:	1b73      	subs	r3, r6, r5
 8014db2:	009e      	lsls	r6, r3, #2
 8014db4:	e004      	b.n	8014dc0 <__gethex+0xb4>
 8014db6:	2400      	movs	r4, #0
 8014db8:	4626      	mov	r6, r4
 8014dba:	e7e1      	b.n	8014d80 <__gethex+0x74>
 8014dbc:	2e00      	cmp	r6, #0
 8014dbe:	d1f7      	bne.n	8014db0 <__gethex+0xa4>
 8014dc0:	782b      	ldrb	r3, [r5, #0]
 8014dc2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014dc6:	2b50      	cmp	r3, #80	; 0x50
 8014dc8:	d13d      	bne.n	8014e46 <__gethex+0x13a>
 8014dca:	786b      	ldrb	r3, [r5, #1]
 8014dcc:	2b2b      	cmp	r3, #43	; 0x2b
 8014dce:	d02f      	beq.n	8014e30 <__gethex+0x124>
 8014dd0:	2b2d      	cmp	r3, #45	; 0x2d
 8014dd2:	d031      	beq.n	8014e38 <__gethex+0x12c>
 8014dd4:	1c69      	adds	r1, r5, #1
 8014dd6:	f04f 0b00 	mov.w	fp, #0
 8014dda:	7808      	ldrb	r0, [r1, #0]
 8014ddc:	f7ff ff80 	bl	8014ce0 <__hexdig_fun>
 8014de0:	1e42      	subs	r2, r0, #1
 8014de2:	b2d2      	uxtb	r2, r2
 8014de4:	2a18      	cmp	r2, #24
 8014de6:	d82e      	bhi.n	8014e46 <__gethex+0x13a>
 8014de8:	f1a0 0210 	sub.w	r2, r0, #16
 8014dec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014df0:	f7ff ff76 	bl	8014ce0 <__hexdig_fun>
 8014df4:	f100 3cff 	add.w	ip, r0, #4294967295
 8014df8:	fa5f fc8c 	uxtb.w	ip, ip
 8014dfc:	f1bc 0f18 	cmp.w	ip, #24
 8014e00:	d91d      	bls.n	8014e3e <__gethex+0x132>
 8014e02:	f1bb 0f00 	cmp.w	fp, #0
 8014e06:	d000      	beq.n	8014e0a <__gethex+0xfe>
 8014e08:	4252      	negs	r2, r2
 8014e0a:	4416      	add	r6, r2
 8014e0c:	f8ca 1000 	str.w	r1, [sl]
 8014e10:	b1dc      	cbz	r4, 8014e4a <__gethex+0x13e>
 8014e12:	9b01      	ldr	r3, [sp, #4]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	bf14      	ite	ne
 8014e18:	f04f 0800 	movne.w	r8, #0
 8014e1c:	f04f 0806 	moveq.w	r8, #6
 8014e20:	4640      	mov	r0, r8
 8014e22:	b005      	add	sp, #20
 8014e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e28:	4645      	mov	r5, r8
 8014e2a:	4626      	mov	r6, r4
 8014e2c:	2401      	movs	r4, #1
 8014e2e:	e7c7      	b.n	8014dc0 <__gethex+0xb4>
 8014e30:	f04f 0b00 	mov.w	fp, #0
 8014e34:	1ca9      	adds	r1, r5, #2
 8014e36:	e7d0      	b.n	8014dda <__gethex+0xce>
 8014e38:	f04f 0b01 	mov.w	fp, #1
 8014e3c:	e7fa      	b.n	8014e34 <__gethex+0x128>
 8014e3e:	230a      	movs	r3, #10
 8014e40:	fb03 0002 	mla	r0, r3, r2, r0
 8014e44:	e7d0      	b.n	8014de8 <__gethex+0xdc>
 8014e46:	4629      	mov	r1, r5
 8014e48:	e7e0      	b.n	8014e0c <__gethex+0x100>
 8014e4a:	eba5 0308 	sub.w	r3, r5, r8
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	4621      	mov	r1, r4
 8014e52:	2b07      	cmp	r3, #7
 8014e54:	dc0a      	bgt.n	8014e6c <__gethex+0x160>
 8014e56:	4648      	mov	r0, r9
 8014e58:	f000 fb0e 	bl	8015478 <_Balloc>
 8014e5c:	4604      	mov	r4, r0
 8014e5e:	b940      	cbnz	r0, 8014e72 <__gethex+0x166>
 8014e60:	4b61      	ldr	r3, [pc, #388]	; (8014fe8 <__gethex+0x2dc>)
 8014e62:	4602      	mov	r2, r0
 8014e64:	21e4      	movs	r1, #228	; 0xe4
 8014e66:	4861      	ldr	r0, [pc, #388]	; (8014fec <__gethex+0x2e0>)
 8014e68:	f001 fbb8 	bl	80165dc <__assert_func>
 8014e6c:	3101      	adds	r1, #1
 8014e6e:	105b      	asrs	r3, r3, #1
 8014e70:	e7ef      	b.n	8014e52 <__gethex+0x146>
 8014e72:	f100 0a14 	add.w	sl, r0, #20
 8014e76:	2300      	movs	r3, #0
 8014e78:	495a      	ldr	r1, [pc, #360]	; (8014fe4 <__gethex+0x2d8>)
 8014e7a:	f8cd a004 	str.w	sl, [sp, #4]
 8014e7e:	469b      	mov	fp, r3
 8014e80:	45a8      	cmp	r8, r5
 8014e82:	d342      	bcc.n	8014f0a <__gethex+0x1fe>
 8014e84:	9801      	ldr	r0, [sp, #4]
 8014e86:	f840 bb04 	str.w	fp, [r0], #4
 8014e8a:	eba0 000a 	sub.w	r0, r0, sl
 8014e8e:	1080      	asrs	r0, r0, #2
 8014e90:	6120      	str	r0, [r4, #16]
 8014e92:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8014e96:	4658      	mov	r0, fp
 8014e98:	f000 fbe0 	bl	801565c <__hi0bits>
 8014e9c:	683d      	ldr	r5, [r7, #0]
 8014e9e:	eba8 0000 	sub.w	r0, r8, r0
 8014ea2:	42a8      	cmp	r0, r5
 8014ea4:	dd59      	ble.n	8014f5a <__gethex+0x24e>
 8014ea6:	eba0 0805 	sub.w	r8, r0, r5
 8014eaa:	4641      	mov	r1, r8
 8014eac:	4620      	mov	r0, r4
 8014eae:	f000 ff6f 	bl	8015d90 <__any_on>
 8014eb2:	4683      	mov	fp, r0
 8014eb4:	b1b8      	cbz	r0, 8014ee6 <__gethex+0x1da>
 8014eb6:	f108 33ff 	add.w	r3, r8, #4294967295
 8014eba:	1159      	asrs	r1, r3, #5
 8014ebc:	f003 021f 	and.w	r2, r3, #31
 8014ec0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8014ec4:	f04f 0b01 	mov.w	fp, #1
 8014ec8:	fa0b f202 	lsl.w	r2, fp, r2
 8014ecc:	420a      	tst	r2, r1
 8014ece:	d00a      	beq.n	8014ee6 <__gethex+0x1da>
 8014ed0:	455b      	cmp	r3, fp
 8014ed2:	dd06      	ble.n	8014ee2 <__gethex+0x1d6>
 8014ed4:	f1a8 0102 	sub.w	r1, r8, #2
 8014ed8:	4620      	mov	r0, r4
 8014eda:	f000 ff59 	bl	8015d90 <__any_on>
 8014ede:	2800      	cmp	r0, #0
 8014ee0:	d138      	bne.n	8014f54 <__gethex+0x248>
 8014ee2:	f04f 0b02 	mov.w	fp, #2
 8014ee6:	4641      	mov	r1, r8
 8014ee8:	4620      	mov	r0, r4
 8014eea:	f7ff fea7 	bl	8014c3c <rshift>
 8014eee:	4446      	add	r6, r8
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	42b3      	cmp	r3, r6
 8014ef4:	da41      	bge.n	8014f7a <__gethex+0x26e>
 8014ef6:	4621      	mov	r1, r4
 8014ef8:	4648      	mov	r0, r9
 8014efa:	f000 fafd 	bl	80154f8 <_Bfree>
 8014efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014f00:	2300      	movs	r3, #0
 8014f02:	6013      	str	r3, [r2, #0]
 8014f04:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014f08:	e78a      	b.n	8014e20 <__gethex+0x114>
 8014f0a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014f0e:	2a2e      	cmp	r2, #46	; 0x2e
 8014f10:	d014      	beq.n	8014f3c <__gethex+0x230>
 8014f12:	2b20      	cmp	r3, #32
 8014f14:	d106      	bne.n	8014f24 <__gethex+0x218>
 8014f16:	9b01      	ldr	r3, [sp, #4]
 8014f18:	f843 bb04 	str.w	fp, [r3], #4
 8014f1c:	f04f 0b00 	mov.w	fp, #0
 8014f20:	9301      	str	r3, [sp, #4]
 8014f22:	465b      	mov	r3, fp
 8014f24:	7828      	ldrb	r0, [r5, #0]
 8014f26:	9303      	str	r3, [sp, #12]
 8014f28:	f7ff feda 	bl	8014ce0 <__hexdig_fun>
 8014f2c:	9b03      	ldr	r3, [sp, #12]
 8014f2e:	f000 000f 	and.w	r0, r0, #15
 8014f32:	4098      	lsls	r0, r3
 8014f34:	ea4b 0b00 	orr.w	fp, fp, r0
 8014f38:	3304      	adds	r3, #4
 8014f3a:	e7a1      	b.n	8014e80 <__gethex+0x174>
 8014f3c:	45a8      	cmp	r8, r5
 8014f3e:	d8e8      	bhi.n	8014f12 <__gethex+0x206>
 8014f40:	2201      	movs	r2, #1
 8014f42:	4628      	mov	r0, r5
 8014f44:	9303      	str	r3, [sp, #12]
 8014f46:	f7fe ff05 	bl	8013d54 <strncmp>
 8014f4a:	4926      	ldr	r1, [pc, #152]	; (8014fe4 <__gethex+0x2d8>)
 8014f4c:	9b03      	ldr	r3, [sp, #12]
 8014f4e:	2800      	cmp	r0, #0
 8014f50:	d1df      	bne.n	8014f12 <__gethex+0x206>
 8014f52:	e795      	b.n	8014e80 <__gethex+0x174>
 8014f54:	f04f 0b03 	mov.w	fp, #3
 8014f58:	e7c5      	b.n	8014ee6 <__gethex+0x1da>
 8014f5a:	da0b      	bge.n	8014f74 <__gethex+0x268>
 8014f5c:	eba5 0800 	sub.w	r8, r5, r0
 8014f60:	4621      	mov	r1, r4
 8014f62:	4642      	mov	r2, r8
 8014f64:	4648      	mov	r0, r9
 8014f66:	f000 fce1 	bl	801592c <__lshift>
 8014f6a:	eba6 0608 	sub.w	r6, r6, r8
 8014f6e:	4604      	mov	r4, r0
 8014f70:	f100 0a14 	add.w	sl, r0, #20
 8014f74:	f04f 0b00 	mov.w	fp, #0
 8014f78:	e7ba      	b.n	8014ef0 <__gethex+0x1e4>
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	42b3      	cmp	r3, r6
 8014f7e:	dd73      	ble.n	8015068 <__gethex+0x35c>
 8014f80:	1b9e      	subs	r6, r3, r6
 8014f82:	42b5      	cmp	r5, r6
 8014f84:	dc34      	bgt.n	8014ff0 <__gethex+0x2e4>
 8014f86:	68fb      	ldr	r3, [r7, #12]
 8014f88:	2b02      	cmp	r3, #2
 8014f8a:	d023      	beq.n	8014fd4 <__gethex+0x2c8>
 8014f8c:	2b03      	cmp	r3, #3
 8014f8e:	d025      	beq.n	8014fdc <__gethex+0x2d0>
 8014f90:	2b01      	cmp	r3, #1
 8014f92:	d115      	bne.n	8014fc0 <__gethex+0x2b4>
 8014f94:	42b5      	cmp	r5, r6
 8014f96:	d113      	bne.n	8014fc0 <__gethex+0x2b4>
 8014f98:	2d01      	cmp	r5, #1
 8014f9a:	d10b      	bne.n	8014fb4 <__gethex+0x2a8>
 8014f9c:	9a02      	ldr	r2, [sp, #8]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	6013      	str	r3, [r2, #0]
 8014fa2:	2301      	movs	r3, #1
 8014fa4:	6123      	str	r3, [r4, #16]
 8014fa6:	f8ca 3000 	str.w	r3, [sl]
 8014faa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014fac:	f04f 0862 	mov.w	r8, #98	; 0x62
 8014fb0:	601c      	str	r4, [r3, #0]
 8014fb2:	e735      	b.n	8014e20 <__gethex+0x114>
 8014fb4:	1e69      	subs	r1, r5, #1
 8014fb6:	4620      	mov	r0, r4
 8014fb8:	f000 feea 	bl	8015d90 <__any_on>
 8014fbc:	2800      	cmp	r0, #0
 8014fbe:	d1ed      	bne.n	8014f9c <__gethex+0x290>
 8014fc0:	4621      	mov	r1, r4
 8014fc2:	4648      	mov	r0, r9
 8014fc4:	f000 fa98 	bl	80154f8 <_Bfree>
 8014fc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014fca:	2300      	movs	r3, #0
 8014fcc:	6013      	str	r3, [r2, #0]
 8014fce:	f04f 0850 	mov.w	r8, #80	; 0x50
 8014fd2:	e725      	b.n	8014e20 <__gethex+0x114>
 8014fd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d1f2      	bne.n	8014fc0 <__gethex+0x2b4>
 8014fda:	e7df      	b.n	8014f9c <__gethex+0x290>
 8014fdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d1dc      	bne.n	8014f9c <__gethex+0x290>
 8014fe2:	e7ed      	b.n	8014fc0 <__gethex+0x2b4>
 8014fe4:	08017e9c 	.word	0x08017e9c
 8014fe8:	080180a9 	.word	0x080180a9
 8014fec:	080180ba 	.word	0x080180ba
 8014ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8014ff4:	f1bb 0f00 	cmp.w	fp, #0
 8014ff8:	d133      	bne.n	8015062 <__gethex+0x356>
 8014ffa:	f1b8 0f00 	cmp.w	r8, #0
 8014ffe:	d004      	beq.n	801500a <__gethex+0x2fe>
 8015000:	4641      	mov	r1, r8
 8015002:	4620      	mov	r0, r4
 8015004:	f000 fec4 	bl	8015d90 <__any_on>
 8015008:	4683      	mov	fp, r0
 801500a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801500e:	2301      	movs	r3, #1
 8015010:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8015014:	f008 081f 	and.w	r8, r8, #31
 8015018:	fa03 f308 	lsl.w	r3, r3, r8
 801501c:	4213      	tst	r3, r2
 801501e:	4631      	mov	r1, r6
 8015020:	4620      	mov	r0, r4
 8015022:	bf18      	it	ne
 8015024:	f04b 0b02 	orrne.w	fp, fp, #2
 8015028:	1bad      	subs	r5, r5, r6
 801502a:	f7ff fe07 	bl	8014c3c <rshift>
 801502e:	687e      	ldr	r6, [r7, #4]
 8015030:	f04f 0802 	mov.w	r8, #2
 8015034:	f1bb 0f00 	cmp.w	fp, #0
 8015038:	d04a      	beq.n	80150d0 <__gethex+0x3c4>
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	2b02      	cmp	r3, #2
 801503e:	d016      	beq.n	801506e <__gethex+0x362>
 8015040:	2b03      	cmp	r3, #3
 8015042:	d018      	beq.n	8015076 <__gethex+0x36a>
 8015044:	2b01      	cmp	r3, #1
 8015046:	d109      	bne.n	801505c <__gethex+0x350>
 8015048:	f01b 0f02 	tst.w	fp, #2
 801504c:	d006      	beq.n	801505c <__gethex+0x350>
 801504e:	f8da 3000 	ldr.w	r3, [sl]
 8015052:	ea4b 0b03 	orr.w	fp, fp, r3
 8015056:	f01b 0f01 	tst.w	fp, #1
 801505a:	d10f      	bne.n	801507c <__gethex+0x370>
 801505c:	f048 0810 	orr.w	r8, r8, #16
 8015060:	e036      	b.n	80150d0 <__gethex+0x3c4>
 8015062:	f04f 0b01 	mov.w	fp, #1
 8015066:	e7d0      	b.n	801500a <__gethex+0x2fe>
 8015068:	f04f 0801 	mov.w	r8, #1
 801506c:	e7e2      	b.n	8015034 <__gethex+0x328>
 801506e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015070:	f1c3 0301 	rsb	r3, r3, #1
 8015074:	930f      	str	r3, [sp, #60]	; 0x3c
 8015076:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015078:	2b00      	cmp	r3, #0
 801507a:	d0ef      	beq.n	801505c <__gethex+0x350>
 801507c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8015080:	f104 0214 	add.w	r2, r4, #20
 8015084:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8015088:	9301      	str	r3, [sp, #4]
 801508a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801508e:	2300      	movs	r3, #0
 8015090:	4694      	mov	ip, r2
 8015092:	f852 1b04 	ldr.w	r1, [r2], #4
 8015096:	f1b1 3fff 	cmp.w	r1, #4294967295
 801509a:	d01e      	beq.n	80150da <__gethex+0x3ce>
 801509c:	3101      	adds	r1, #1
 801509e:	f8cc 1000 	str.w	r1, [ip]
 80150a2:	f1b8 0f02 	cmp.w	r8, #2
 80150a6:	f104 0214 	add.w	r2, r4, #20
 80150aa:	d13d      	bne.n	8015128 <__gethex+0x41c>
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	3b01      	subs	r3, #1
 80150b0:	42ab      	cmp	r3, r5
 80150b2:	d10b      	bne.n	80150cc <__gethex+0x3c0>
 80150b4:	1169      	asrs	r1, r5, #5
 80150b6:	2301      	movs	r3, #1
 80150b8:	f005 051f 	and.w	r5, r5, #31
 80150bc:	fa03 f505 	lsl.w	r5, r3, r5
 80150c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150c4:	421d      	tst	r5, r3
 80150c6:	bf18      	it	ne
 80150c8:	f04f 0801 	movne.w	r8, #1
 80150cc:	f048 0820 	orr.w	r8, r8, #32
 80150d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80150d2:	601c      	str	r4, [r3, #0]
 80150d4:	9b02      	ldr	r3, [sp, #8]
 80150d6:	601e      	str	r6, [r3, #0]
 80150d8:	e6a2      	b.n	8014e20 <__gethex+0x114>
 80150da:	4290      	cmp	r0, r2
 80150dc:	f842 3c04 	str.w	r3, [r2, #-4]
 80150e0:	d8d6      	bhi.n	8015090 <__gethex+0x384>
 80150e2:	68a2      	ldr	r2, [r4, #8]
 80150e4:	4593      	cmp	fp, r2
 80150e6:	db17      	blt.n	8015118 <__gethex+0x40c>
 80150e8:	6861      	ldr	r1, [r4, #4]
 80150ea:	4648      	mov	r0, r9
 80150ec:	3101      	adds	r1, #1
 80150ee:	f000 f9c3 	bl	8015478 <_Balloc>
 80150f2:	4682      	mov	sl, r0
 80150f4:	b918      	cbnz	r0, 80150fe <__gethex+0x3f2>
 80150f6:	4b1b      	ldr	r3, [pc, #108]	; (8015164 <__gethex+0x458>)
 80150f8:	4602      	mov	r2, r0
 80150fa:	2184      	movs	r1, #132	; 0x84
 80150fc:	e6b3      	b.n	8014e66 <__gethex+0x15a>
 80150fe:	6922      	ldr	r2, [r4, #16]
 8015100:	3202      	adds	r2, #2
 8015102:	f104 010c 	add.w	r1, r4, #12
 8015106:	0092      	lsls	r2, r2, #2
 8015108:	300c      	adds	r0, #12
 801510a:	f7fe feb8 	bl	8013e7e <memcpy>
 801510e:	4621      	mov	r1, r4
 8015110:	4648      	mov	r0, r9
 8015112:	f000 f9f1 	bl	80154f8 <_Bfree>
 8015116:	4654      	mov	r4, sl
 8015118:	6922      	ldr	r2, [r4, #16]
 801511a:	1c51      	adds	r1, r2, #1
 801511c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015120:	6121      	str	r1, [r4, #16]
 8015122:	2101      	movs	r1, #1
 8015124:	6151      	str	r1, [r2, #20]
 8015126:	e7bc      	b.n	80150a2 <__gethex+0x396>
 8015128:	6921      	ldr	r1, [r4, #16]
 801512a:	4559      	cmp	r1, fp
 801512c:	dd0b      	ble.n	8015146 <__gethex+0x43a>
 801512e:	2101      	movs	r1, #1
 8015130:	4620      	mov	r0, r4
 8015132:	f7ff fd83 	bl	8014c3c <rshift>
 8015136:	68bb      	ldr	r3, [r7, #8]
 8015138:	3601      	adds	r6, #1
 801513a:	42b3      	cmp	r3, r6
 801513c:	f6ff aedb 	blt.w	8014ef6 <__gethex+0x1ea>
 8015140:	f04f 0801 	mov.w	r8, #1
 8015144:	e7c2      	b.n	80150cc <__gethex+0x3c0>
 8015146:	f015 051f 	ands.w	r5, r5, #31
 801514a:	d0f9      	beq.n	8015140 <__gethex+0x434>
 801514c:	9b01      	ldr	r3, [sp, #4]
 801514e:	441a      	add	r2, r3
 8015150:	f1c5 0520 	rsb	r5, r5, #32
 8015154:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8015158:	f000 fa80 	bl	801565c <__hi0bits>
 801515c:	42a8      	cmp	r0, r5
 801515e:	dbe6      	blt.n	801512e <__gethex+0x422>
 8015160:	e7ee      	b.n	8015140 <__gethex+0x434>
 8015162:	bf00      	nop
 8015164:	080180a9 	.word	0x080180a9

08015168 <L_shift>:
 8015168:	f1c2 0208 	rsb	r2, r2, #8
 801516c:	0092      	lsls	r2, r2, #2
 801516e:	b570      	push	{r4, r5, r6, lr}
 8015170:	f1c2 0620 	rsb	r6, r2, #32
 8015174:	6843      	ldr	r3, [r0, #4]
 8015176:	6804      	ldr	r4, [r0, #0]
 8015178:	fa03 f506 	lsl.w	r5, r3, r6
 801517c:	432c      	orrs	r4, r5
 801517e:	40d3      	lsrs	r3, r2
 8015180:	6004      	str	r4, [r0, #0]
 8015182:	f840 3f04 	str.w	r3, [r0, #4]!
 8015186:	4288      	cmp	r0, r1
 8015188:	d3f4      	bcc.n	8015174 <L_shift+0xc>
 801518a:	bd70      	pop	{r4, r5, r6, pc}

0801518c <__match>:
 801518c:	b530      	push	{r4, r5, lr}
 801518e:	6803      	ldr	r3, [r0, #0]
 8015190:	3301      	adds	r3, #1
 8015192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015196:	b914      	cbnz	r4, 801519e <__match+0x12>
 8015198:	6003      	str	r3, [r0, #0]
 801519a:	2001      	movs	r0, #1
 801519c:	bd30      	pop	{r4, r5, pc}
 801519e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80151a6:	2d19      	cmp	r5, #25
 80151a8:	bf98      	it	ls
 80151aa:	3220      	addls	r2, #32
 80151ac:	42a2      	cmp	r2, r4
 80151ae:	d0f0      	beq.n	8015192 <__match+0x6>
 80151b0:	2000      	movs	r0, #0
 80151b2:	e7f3      	b.n	801519c <__match+0x10>

080151b4 <__hexnan>:
 80151b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b8:	680b      	ldr	r3, [r1, #0]
 80151ba:	6801      	ldr	r1, [r0, #0]
 80151bc:	115e      	asrs	r6, r3, #5
 80151be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80151c2:	f013 031f 	ands.w	r3, r3, #31
 80151c6:	b087      	sub	sp, #28
 80151c8:	bf18      	it	ne
 80151ca:	3604      	addne	r6, #4
 80151cc:	2500      	movs	r5, #0
 80151ce:	1f37      	subs	r7, r6, #4
 80151d0:	4682      	mov	sl, r0
 80151d2:	4690      	mov	r8, r2
 80151d4:	9301      	str	r3, [sp, #4]
 80151d6:	f846 5c04 	str.w	r5, [r6, #-4]
 80151da:	46b9      	mov	r9, r7
 80151dc:	463c      	mov	r4, r7
 80151de:	9502      	str	r5, [sp, #8]
 80151e0:	46ab      	mov	fp, r5
 80151e2:	784a      	ldrb	r2, [r1, #1]
 80151e4:	1c4b      	adds	r3, r1, #1
 80151e6:	9303      	str	r3, [sp, #12]
 80151e8:	b342      	cbz	r2, 801523c <__hexnan+0x88>
 80151ea:	4610      	mov	r0, r2
 80151ec:	9105      	str	r1, [sp, #20]
 80151ee:	9204      	str	r2, [sp, #16]
 80151f0:	f7ff fd76 	bl	8014ce0 <__hexdig_fun>
 80151f4:	2800      	cmp	r0, #0
 80151f6:	d14f      	bne.n	8015298 <__hexnan+0xe4>
 80151f8:	9a04      	ldr	r2, [sp, #16]
 80151fa:	9905      	ldr	r1, [sp, #20]
 80151fc:	2a20      	cmp	r2, #32
 80151fe:	d818      	bhi.n	8015232 <__hexnan+0x7e>
 8015200:	9b02      	ldr	r3, [sp, #8]
 8015202:	459b      	cmp	fp, r3
 8015204:	dd13      	ble.n	801522e <__hexnan+0x7a>
 8015206:	454c      	cmp	r4, r9
 8015208:	d206      	bcs.n	8015218 <__hexnan+0x64>
 801520a:	2d07      	cmp	r5, #7
 801520c:	dc04      	bgt.n	8015218 <__hexnan+0x64>
 801520e:	462a      	mov	r2, r5
 8015210:	4649      	mov	r1, r9
 8015212:	4620      	mov	r0, r4
 8015214:	f7ff ffa8 	bl	8015168 <L_shift>
 8015218:	4544      	cmp	r4, r8
 801521a:	d950      	bls.n	80152be <__hexnan+0x10a>
 801521c:	2300      	movs	r3, #0
 801521e:	f1a4 0904 	sub.w	r9, r4, #4
 8015222:	f844 3c04 	str.w	r3, [r4, #-4]
 8015226:	f8cd b008 	str.w	fp, [sp, #8]
 801522a:	464c      	mov	r4, r9
 801522c:	461d      	mov	r5, r3
 801522e:	9903      	ldr	r1, [sp, #12]
 8015230:	e7d7      	b.n	80151e2 <__hexnan+0x2e>
 8015232:	2a29      	cmp	r2, #41	; 0x29
 8015234:	d155      	bne.n	80152e2 <__hexnan+0x12e>
 8015236:	3102      	adds	r1, #2
 8015238:	f8ca 1000 	str.w	r1, [sl]
 801523c:	f1bb 0f00 	cmp.w	fp, #0
 8015240:	d04f      	beq.n	80152e2 <__hexnan+0x12e>
 8015242:	454c      	cmp	r4, r9
 8015244:	d206      	bcs.n	8015254 <__hexnan+0xa0>
 8015246:	2d07      	cmp	r5, #7
 8015248:	dc04      	bgt.n	8015254 <__hexnan+0xa0>
 801524a:	462a      	mov	r2, r5
 801524c:	4649      	mov	r1, r9
 801524e:	4620      	mov	r0, r4
 8015250:	f7ff ff8a 	bl	8015168 <L_shift>
 8015254:	4544      	cmp	r4, r8
 8015256:	d934      	bls.n	80152c2 <__hexnan+0x10e>
 8015258:	f1a8 0204 	sub.w	r2, r8, #4
 801525c:	4623      	mov	r3, r4
 801525e:	f853 1b04 	ldr.w	r1, [r3], #4
 8015262:	f842 1f04 	str.w	r1, [r2, #4]!
 8015266:	429f      	cmp	r7, r3
 8015268:	d2f9      	bcs.n	801525e <__hexnan+0xaa>
 801526a:	1b3b      	subs	r3, r7, r4
 801526c:	f023 0303 	bic.w	r3, r3, #3
 8015270:	3304      	adds	r3, #4
 8015272:	3e03      	subs	r6, #3
 8015274:	3401      	adds	r4, #1
 8015276:	42a6      	cmp	r6, r4
 8015278:	bf38      	it	cc
 801527a:	2304      	movcc	r3, #4
 801527c:	4443      	add	r3, r8
 801527e:	2200      	movs	r2, #0
 8015280:	f843 2b04 	str.w	r2, [r3], #4
 8015284:	429f      	cmp	r7, r3
 8015286:	d2fb      	bcs.n	8015280 <__hexnan+0xcc>
 8015288:	683b      	ldr	r3, [r7, #0]
 801528a:	b91b      	cbnz	r3, 8015294 <__hexnan+0xe0>
 801528c:	4547      	cmp	r7, r8
 801528e:	d126      	bne.n	80152de <__hexnan+0x12a>
 8015290:	2301      	movs	r3, #1
 8015292:	603b      	str	r3, [r7, #0]
 8015294:	2005      	movs	r0, #5
 8015296:	e025      	b.n	80152e4 <__hexnan+0x130>
 8015298:	3501      	adds	r5, #1
 801529a:	2d08      	cmp	r5, #8
 801529c:	f10b 0b01 	add.w	fp, fp, #1
 80152a0:	dd06      	ble.n	80152b0 <__hexnan+0xfc>
 80152a2:	4544      	cmp	r4, r8
 80152a4:	d9c3      	bls.n	801522e <__hexnan+0x7a>
 80152a6:	2300      	movs	r3, #0
 80152a8:	f844 3c04 	str.w	r3, [r4, #-4]
 80152ac:	2501      	movs	r5, #1
 80152ae:	3c04      	subs	r4, #4
 80152b0:	6822      	ldr	r2, [r4, #0]
 80152b2:	f000 000f 	and.w	r0, r0, #15
 80152b6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80152ba:	6020      	str	r0, [r4, #0]
 80152bc:	e7b7      	b.n	801522e <__hexnan+0x7a>
 80152be:	2508      	movs	r5, #8
 80152c0:	e7b5      	b.n	801522e <__hexnan+0x7a>
 80152c2:	9b01      	ldr	r3, [sp, #4]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d0df      	beq.n	8015288 <__hexnan+0xd4>
 80152c8:	f1c3 0320 	rsb	r3, r3, #32
 80152cc:	f04f 32ff 	mov.w	r2, #4294967295
 80152d0:	40da      	lsrs	r2, r3
 80152d2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80152d6:	4013      	ands	r3, r2
 80152d8:	f846 3c04 	str.w	r3, [r6, #-4]
 80152dc:	e7d4      	b.n	8015288 <__hexnan+0xd4>
 80152de:	3f04      	subs	r7, #4
 80152e0:	e7d2      	b.n	8015288 <__hexnan+0xd4>
 80152e2:	2004      	movs	r0, #4
 80152e4:	b007      	add	sp, #28
 80152e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080152ec <malloc>:
 80152ec:	4b02      	ldr	r3, [pc, #8]	; (80152f8 <malloc+0xc>)
 80152ee:	4601      	mov	r1, r0
 80152f0:	6818      	ldr	r0, [r3, #0]
 80152f2:	f000 b823 	b.w	801533c <_malloc_r>
 80152f6:	bf00      	nop
 80152f8:	2000021c 	.word	0x2000021c

080152fc <sbrk_aligned>:
 80152fc:	b570      	push	{r4, r5, r6, lr}
 80152fe:	4e0e      	ldr	r6, [pc, #56]	; (8015338 <sbrk_aligned+0x3c>)
 8015300:	460c      	mov	r4, r1
 8015302:	6831      	ldr	r1, [r6, #0]
 8015304:	4605      	mov	r5, r0
 8015306:	b911      	cbnz	r1, 801530e <sbrk_aligned+0x12>
 8015308:	f001 f958 	bl	80165bc <_sbrk_r>
 801530c:	6030      	str	r0, [r6, #0]
 801530e:	4621      	mov	r1, r4
 8015310:	4628      	mov	r0, r5
 8015312:	f001 f953 	bl	80165bc <_sbrk_r>
 8015316:	1c43      	adds	r3, r0, #1
 8015318:	d00a      	beq.n	8015330 <sbrk_aligned+0x34>
 801531a:	1cc4      	adds	r4, r0, #3
 801531c:	f024 0403 	bic.w	r4, r4, #3
 8015320:	42a0      	cmp	r0, r4
 8015322:	d007      	beq.n	8015334 <sbrk_aligned+0x38>
 8015324:	1a21      	subs	r1, r4, r0
 8015326:	4628      	mov	r0, r5
 8015328:	f001 f948 	bl	80165bc <_sbrk_r>
 801532c:	3001      	adds	r0, #1
 801532e:	d101      	bne.n	8015334 <sbrk_aligned+0x38>
 8015330:	f04f 34ff 	mov.w	r4, #4294967295
 8015334:	4620      	mov	r0, r4
 8015336:	bd70      	pop	{r4, r5, r6, pc}
 8015338:	2000159c 	.word	0x2000159c

0801533c <_malloc_r>:
 801533c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015340:	1ccd      	adds	r5, r1, #3
 8015342:	f025 0503 	bic.w	r5, r5, #3
 8015346:	3508      	adds	r5, #8
 8015348:	2d0c      	cmp	r5, #12
 801534a:	bf38      	it	cc
 801534c:	250c      	movcc	r5, #12
 801534e:	2d00      	cmp	r5, #0
 8015350:	4607      	mov	r7, r0
 8015352:	db01      	blt.n	8015358 <_malloc_r+0x1c>
 8015354:	42a9      	cmp	r1, r5
 8015356:	d905      	bls.n	8015364 <_malloc_r+0x28>
 8015358:	230c      	movs	r3, #12
 801535a:	603b      	str	r3, [r7, #0]
 801535c:	2600      	movs	r6, #0
 801535e:	4630      	mov	r0, r6
 8015360:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015364:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015438 <_malloc_r+0xfc>
 8015368:	f000 f87a 	bl	8015460 <__malloc_lock>
 801536c:	f8d8 3000 	ldr.w	r3, [r8]
 8015370:	461c      	mov	r4, r3
 8015372:	bb5c      	cbnz	r4, 80153cc <_malloc_r+0x90>
 8015374:	4629      	mov	r1, r5
 8015376:	4638      	mov	r0, r7
 8015378:	f7ff ffc0 	bl	80152fc <sbrk_aligned>
 801537c:	1c43      	adds	r3, r0, #1
 801537e:	4604      	mov	r4, r0
 8015380:	d155      	bne.n	801542e <_malloc_r+0xf2>
 8015382:	f8d8 4000 	ldr.w	r4, [r8]
 8015386:	4626      	mov	r6, r4
 8015388:	2e00      	cmp	r6, #0
 801538a:	d145      	bne.n	8015418 <_malloc_r+0xdc>
 801538c:	2c00      	cmp	r4, #0
 801538e:	d048      	beq.n	8015422 <_malloc_r+0xe6>
 8015390:	6823      	ldr	r3, [r4, #0]
 8015392:	4631      	mov	r1, r6
 8015394:	4638      	mov	r0, r7
 8015396:	eb04 0903 	add.w	r9, r4, r3
 801539a:	f001 f90f 	bl	80165bc <_sbrk_r>
 801539e:	4581      	cmp	r9, r0
 80153a0:	d13f      	bne.n	8015422 <_malloc_r+0xe6>
 80153a2:	6821      	ldr	r1, [r4, #0]
 80153a4:	1a6d      	subs	r5, r5, r1
 80153a6:	4629      	mov	r1, r5
 80153a8:	4638      	mov	r0, r7
 80153aa:	f7ff ffa7 	bl	80152fc <sbrk_aligned>
 80153ae:	3001      	adds	r0, #1
 80153b0:	d037      	beq.n	8015422 <_malloc_r+0xe6>
 80153b2:	6823      	ldr	r3, [r4, #0]
 80153b4:	442b      	add	r3, r5
 80153b6:	6023      	str	r3, [r4, #0]
 80153b8:	f8d8 3000 	ldr.w	r3, [r8]
 80153bc:	2b00      	cmp	r3, #0
 80153be:	d038      	beq.n	8015432 <_malloc_r+0xf6>
 80153c0:	685a      	ldr	r2, [r3, #4]
 80153c2:	42a2      	cmp	r2, r4
 80153c4:	d12b      	bne.n	801541e <_malloc_r+0xe2>
 80153c6:	2200      	movs	r2, #0
 80153c8:	605a      	str	r2, [r3, #4]
 80153ca:	e00f      	b.n	80153ec <_malloc_r+0xb0>
 80153cc:	6822      	ldr	r2, [r4, #0]
 80153ce:	1b52      	subs	r2, r2, r5
 80153d0:	d41f      	bmi.n	8015412 <_malloc_r+0xd6>
 80153d2:	2a0b      	cmp	r2, #11
 80153d4:	d917      	bls.n	8015406 <_malloc_r+0xca>
 80153d6:	1961      	adds	r1, r4, r5
 80153d8:	42a3      	cmp	r3, r4
 80153da:	6025      	str	r5, [r4, #0]
 80153dc:	bf18      	it	ne
 80153de:	6059      	strne	r1, [r3, #4]
 80153e0:	6863      	ldr	r3, [r4, #4]
 80153e2:	bf08      	it	eq
 80153e4:	f8c8 1000 	streq.w	r1, [r8]
 80153e8:	5162      	str	r2, [r4, r5]
 80153ea:	604b      	str	r3, [r1, #4]
 80153ec:	4638      	mov	r0, r7
 80153ee:	f104 060b 	add.w	r6, r4, #11
 80153f2:	f000 f83b 	bl	801546c <__malloc_unlock>
 80153f6:	f026 0607 	bic.w	r6, r6, #7
 80153fa:	1d23      	adds	r3, r4, #4
 80153fc:	1af2      	subs	r2, r6, r3
 80153fe:	d0ae      	beq.n	801535e <_malloc_r+0x22>
 8015400:	1b9b      	subs	r3, r3, r6
 8015402:	50a3      	str	r3, [r4, r2]
 8015404:	e7ab      	b.n	801535e <_malloc_r+0x22>
 8015406:	42a3      	cmp	r3, r4
 8015408:	6862      	ldr	r2, [r4, #4]
 801540a:	d1dd      	bne.n	80153c8 <_malloc_r+0x8c>
 801540c:	f8c8 2000 	str.w	r2, [r8]
 8015410:	e7ec      	b.n	80153ec <_malloc_r+0xb0>
 8015412:	4623      	mov	r3, r4
 8015414:	6864      	ldr	r4, [r4, #4]
 8015416:	e7ac      	b.n	8015372 <_malloc_r+0x36>
 8015418:	4634      	mov	r4, r6
 801541a:	6876      	ldr	r6, [r6, #4]
 801541c:	e7b4      	b.n	8015388 <_malloc_r+0x4c>
 801541e:	4613      	mov	r3, r2
 8015420:	e7cc      	b.n	80153bc <_malloc_r+0x80>
 8015422:	230c      	movs	r3, #12
 8015424:	603b      	str	r3, [r7, #0]
 8015426:	4638      	mov	r0, r7
 8015428:	f000 f820 	bl	801546c <__malloc_unlock>
 801542c:	e797      	b.n	801535e <_malloc_r+0x22>
 801542e:	6025      	str	r5, [r4, #0]
 8015430:	e7dc      	b.n	80153ec <_malloc_r+0xb0>
 8015432:	605b      	str	r3, [r3, #4]
 8015434:	deff      	udf	#255	; 0xff
 8015436:	bf00      	nop
 8015438:	20001598 	.word	0x20001598

0801543c <__ascii_mbtowc>:
 801543c:	b082      	sub	sp, #8
 801543e:	b901      	cbnz	r1, 8015442 <__ascii_mbtowc+0x6>
 8015440:	a901      	add	r1, sp, #4
 8015442:	b142      	cbz	r2, 8015456 <__ascii_mbtowc+0x1a>
 8015444:	b14b      	cbz	r3, 801545a <__ascii_mbtowc+0x1e>
 8015446:	7813      	ldrb	r3, [r2, #0]
 8015448:	600b      	str	r3, [r1, #0]
 801544a:	7812      	ldrb	r2, [r2, #0]
 801544c:	1e10      	subs	r0, r2, #0
 801544e:	bf18      	it	ne
 8015450:	2001      	movne	r0, #1
 8015452:	b002      	add	sp, #8
 8015454:	4770      	bx	lr
 8015456:	4610      	mov	r0, r2
 8015458:	e7fb      	b.n	8015452 <__ascii_mbtowc+0x16>
 801545a:	f06f 0001 	mvn.w	r0, #1
 801545e:	e7f8      	b.n	8015452 <__ascii_mbtowc+0x16>

08015460 <__malloc_lock>:
 8015460:	4801      	ldr	r0, [pc, #4]	; (8015468 <__malloc_lock+0x8>)
 8015462:	f7fe bd0a 	b.w	8013e7a <__retarget_lock_acquire_recursive>
 8015466:	bf00      	nop
 8015468:	20001594 	.word	0x20001594

0801546c <__malloc_unlock>:
 801546c:	4801      	ldr	r0, [pc, #4]	; (8015474 <__malloc_unlock+0x8>)
 801546e:	f7fe bd05 	b.w	8013e7c <__retarget_lock_release_recursive>
 8015472:	bf00      	nop
 8015474:	20001594 	.word	0x20001594

08015478 <_Balloc>:
 8015478:	b570      	push	{r4, r5, r6, lr}
 801547a:	69c6      	ldr	r6, [r0, #28]
 801547c:	4604      	mov	r4, r0
 801547e:	460d      	mov	r5, r1
 8015480:	b976      	cbnz	r6, 80154a0 <_Balloc+0x28>
 8015482:	2010      	movs	r0, #16
 8015484:	f7ff ff32 	bl	80152ec <malloc>
 8015488:	4602      	mov	r2, r0
 801548a:	61e0      	str	r0, [r4, #28]
 801548c:	b920      	cbnz	r0, 8015498 <_Balloc+0x20>
 801548e:	4b18      	ldr	r3, [pc, #96]	; (80154f0 <_Balloc+0x78>)
 8015490:	4818      	ldr	r0, [pc, #96]	; (80154f4 <_Balloc+0x7c>)
 8015492:	216b      	movs	r1, #107	; 0x6b
 8015494:	f001 f8a2 	bl	80165dc <__assert_func>
 8015498:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801549c:	6006      	str	r6, [r0, #0]
 801549e:	60c6      	str	r6, [r0, #12]
 80154a0:	69e6      	ldr	r6, [r4, #28]
 80154a2:	68f3      	ldr	r3, [r6, #12]
 80154a4:	b183      	cbz	r3, 80154c8 <_Balloc+0x50>
 80154a6:	69e3      	ldr	r3, [r4, #28]
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80154ae:	b9b8      	cbnz	r0, 80154e0 <_Balloc+0x68>
 80154b0:	2101      	movs	r1, #1
 80154b2:	fa01 f605 	lsl.w	r6, r1, r5
 80154b6:	1d72      	adds	r2, r6, #5
 80154b8:	0092      	lsls	r2, r2, #2
 80154ba:	4620      	mov	r0, r4
 80154bc:	f001 f8ac 	bl	8016618 <_calloc_r>
 80154c0:	b160      	cbz	r0, 80154dc <_Balloc+0x64>
 80154c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80154c6:	e00e      	b.n	80154e6 <_Balloc+0x6e>
 80154c8:	2221      	movs	r2, #33	; 0x21
 80154ca:	2104      	movs	r1, #4
 80154cc:	4620      	mov	r0, r4
 80154ce:	f001 f8a3 	bl	8016618 <_calloc_r>
 80154d2:	69e3      	ldr	r3, [r4, #28]
 80154d4:	60f0      	str	r0, [r6, #12]
 80154d6:	68db      	ldr	r3, [r3, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d1e4      	bne.n	80154a6 <_Balloc+0x2e>
 80154dc:	2000      	movs	r0, #0
 80154de:	bd70      	pop	{r4, r5, r6, pc}
 80154e0:	6802      	ldr	r2, [r0, #0]
 80154e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80154e6:	2300      	movs	r3, #0
 80154e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80154ec:	e7f7      	b.n	80154de <_Balloc+0x66>
 80154ee:	bf00      	nop
 80154f0:	0801803a 	.word	0x0801803a
 80154f4:	0801811a 	.word	0x0801811a

080154f8 <_Bfree>:
 80154f8:	b570      	push	{r4, r5, r6, lr}
 80154fa:	69c6      	ldr	r6, [r0, #28]
 80154fc:	4605      	mov	r5, r0
 80154fe:	460c      	mov	r4, r1
 8015500:	b976      	cbnz	r6, 8015520 <_Bfree+0x28>
 8015502:	2010      	movs	r0, #16
 8015504:	f7ff fef2 	bl	80152ec <malloc>
 8015508:	4602      	mov	r2, r0
 801550a:	61e8      	str	r0, [r5, #28]
 801550c:	b920      	cbnz	r0, 8015518 <_Bfree+0x20>
 801550e:	4b09      	ldr	r3, [pc, #36]	; (8015534 <_Bfree+0x3c>)
 8015510:	4809      	ldr	r0, [pc, #36]	; (8015538 <_Bfree+0x40>)
 8015512:	218f      	movs	r1, #143	; 0x8f
 8015514:	f001 f862 	bl	80165dc <__assert_func>
 8015518:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801551c:	6006      	str	r6, [r0, #0]
 801551e:	60c6      	str	r6, [r0, #12]
 8015520:	b13c      	cbz	r4, 8015532 <_Bfree+0x3a>
 8015522:	69eb      	ldr	r3, [r5, #28]
 8015524:	6862      	ldr	r2, [r4, #4]
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801552c:	6021      	str	r1, [r4, #0]
 801552e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8015532:	bd70      	pop	{r4, r5, r6, pc}
 8015534:	0801803a 	.word	0x0801803a
 8015538:	0801811a 	.word	0x0801811a

0801553c <__multadd>:
 801553c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015540:	690d      	ldr	r5, [r1, #16]
 8015542:	4607      	mov	r7, r0
 8015544:	460c      	mov	r4, r1
 8015546:	461e      	mov	r6, r3
 8015548:	f101 0c14 	add.w	ip, r1, #20
 801554c:	2000      	movs	r0, #0
 801554e:	f8dc 3000 	ldr.w	r3, [ip]
 8015552:	b299      	uxth	r1, r3
 8015554:	fb02 6101 	mla	r1, r2, r1, r6
 8015558:	0c1e      	lsrs	r6, r3, #16
 801555a:	0c0b      	lsrs	r3, r1, #16
 801555c:	fb02 3306 	mla	r3, r2, r6, r3
 8015560:	b289      	uxth	r1, r1
 8015562:	3001      	adds	r0, #1
 8015564:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8015568:	4285      	cmp	r5, r0
 801556a:	f84c 1b04 	str.w	r1, [ip], #4
 801556e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8015572:	dcec      	bgt.n	801554e <__multadd+0x12>
 8015574:	b30e      	cbz	r6, 80155ba <__multadd+0x7e>
 8015576:	68a3      	ldr	r3, [r4, #8]
 8015578:	42ab      	cmp	r3, r5
 801557a:	dc19      	bgt.n	80155b0 <__multadd+0x74>
 801557c:	6861      	ldr	r1, [r4, #4]
 801557e:	4638      	mov	r0, r7
 8015580:	3101      	adds	r1, #1
 8015582:	f7ff ff79 	bl	8015478 <_Balloc>
 8015586:	4680      	mov	r8, r0
 8015588:	b928      	cbnz	r0, 8015596 <__multadd+0x5a>
 801558a:	4602      	mov	r2, r0
 801558c:	4b0c      	ldr	r3, [pc, #48]	; (80155c0 <__multadd+0x84>)
 801558e:	480d      	ldr	r0, [pc, #52]	; (80155c4 <__multadd+0x88>)
 8015590:	21ba      	movs	r1, #186	; 0xba
 8015592:	f001 f823 	bl	80165dc <__assert_func>
 8015596:	6922      	ldr	r2, [r4, #16]
 8015598:	3202      	adds	r2, #2
 801559a:	f104 010c 	add.w	r1, r4, #12
 801559e:	0092      	lsls	r2, r2, #2
 80155a0:	300c      	adds	r0, #12
 80155a2:	f7fe fc6c 	bl	8013e7e <memcpy>
 80155a6:	4621      	mov	r1, r4
 80155a8:	4638      	mov	r0, r7
 80155aa:	f7ff ffa5 	bl	80154f8 <_Bfree>
 80155ae:	4644      	mov	r4, r8
 80155b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80155b4:	3501      	adds	r5, #1
 80155b6:	615e      	str	r6, [r3, #20]
 80155b8:	6125      	str	r5, [r4, #16]
 80155ba:	4620      	mov	r0, r4
 80155bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155c0:	080180a9 	.word	0x080180a9
 80155c4:	0801811a 	.word	0x0801811a

080155c8 <__s2b>:
 80155c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80155cc:	460c      	mov	r4, r1
 80155ce:	4615      	mov	r5, r2
 80155d0:	461f      	mov	r7, r3
 80155d2:	2209      	movs	r2, #9
 80155d4:	3308      	adds	r3, #8
 80155d6:	4606      	mov	r6, r0
 80155d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80155dc:	2100      	movs	r1, #0
 80155de:	2201      	movs	r2, #1
 80155e0:	429a      	cmp	r2, r3
 80155e2:	db09      	blt.n	80155f8 <__s2b+0x30>
 80155e4:	4630      	mov	r0, r6
 80155e6:	f7ff ff47 	bl	8015478 <_Balloc>
 80155ea:	b940      	cbnz	r0, 80155fe <__s2b+0x36>
 80155ec:	4602      	mov	r2, r0
 80155ee:	4b19      	ldr	r3, [pc, #100]	; (8015654 <__s2b+0x8c>)
 80155f0:	4819      	ldr	r0, [pc, #100]	; (8015658 <__s2b+0x90>)
 80155f2:	21d3      	movs	r1, #211	; 0xd3
 80155f4:	f000 fff2 	bl	80165dc <__assert_func>
 80155f8:	0052      	lsls	r2, r2, #1
 80155fa:	3101      	adds	r1, #1
 80155fc:	e7f0      	b.n	80155e0 <__s2b+0x18>
 80155fe:	9b08      	ldr	r3, [sp, #32]
 8015600:	6143      	str	r3, [r0, #20]
 8015602:	2d09      	cmp	r5, #9
 8015604:	f04f 0301 	mov.w	r3, #1
 8015608:	6103      	str	r3, [r0, #16]
 801560a:	dd16      	ble.n	801563a <__s2b+0x72>
 801560c:	f104 0909 	add.w	r9, r4, #9
 8015610:	46c8      	mov	r8, r9
 8015612:	442c      	add	r4, r5
 8015614:	f818 3b01 	ldrb.w	r3, [r8], #1
 8015618:	4601      	mov	r1, r0
 801561a:	3b30      	subs	r3, #48	; 0x30
 801561c:	220a      	movs	r2, #10
 801561e:	4630      	mov	r0, r6
 8015620:	f7ff ff8c 	bl	801553c <__multadd>
 8015624:	45a0      	cmp	r8, r4
 8015626:	d1f5      	bne.n	8015614 <__s2b+0x4c>
 8015628:	f1a5 0408 	sub.w	r4, r5, #8
 801562c:	444c      	add	r4, r9
 801562e:	1b2d      	subs	r5, r5, r4
 8015630:	1963      	adds	r3, r4, r5
 8015632:	42bb      	cmp	r3, r7
 8015634:	db04      	blt.n	8015640 <__s2b+0x78>
 8015636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801563a:	340a      	adds	r4, #10
 801563c:	2509      	movs	r5, #9
 801563e:	e7f6      	b.n	801562e <__s2b+0x66>
 8015640:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015644:	4601      	mov	r1, r0
 8015646:	3b30      	subs	r3, #48	; 0x30
 8015648:	220a      	movs	r2, #10
 801564a:	4630      	mov	r0, r6
 801564c:	f7ff ff76 	bl	801553c <__multadd>
 8015650:	e7ee      	b.n	8015630 <__s2b+0x68>
 8015652:	bf00      	nop
 8015654:	080180a9 	.word	0x080180a9
 8015658:	0801811a 	.word	0x0801811a

0801565c <__hi0bits>:
 801565c:	0c03      	lsrs	r3, r0, #16
 801565e:	041b      	lsls	r3, r3, #16
 8015660:	b9d3      	cbnz	r3, 8015698 <__hi0bits+0x3c>
 8015662:	0400      	lsls	r0, r0, #16
 8015664:	2310      	movs	r3, #16
 8015666:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801566a:	bf04      	itt	eq
 801566c:	0200      	lsleq	r0, r0, #8
 801566e:	3308      	addeq	r3, #8
 8015670:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8015674:	bf04      	itt	eq
 8015676:	0100      	lsleq	r0, r0, #4
 8015678:	3304      	addeq	r3, #4
 801567a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801567e:	bf04      	itt	eq
 8015680:	0080      	lsleq	r0, r0, #2
 8015682:	3302      	addeq	r3, #2
 8015684:	2800      	cmp	r0, #0
 8015686:	db05      	blt.n	8015694 <__hi0bits+0x38>
 8015688:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801568c:	f103 0301 	add.w	r3, r3, #1
 8015690:	bf08      	it	eq
 8015692:	2320      	moveq	r3, #32
 8015694:	4618      	mov	r0, r3
 8015696:	4770      	bx	lr
 8015698:	2300      	movs	r3, #0
 801569a:	e7e4      	b.n	8015666 <__hi0bits+0xa>

0801569c <__lo0bits>:
 801569c:	6803      	ldr	r3, [r0, #0]
 801569e:	f013 0207 	ands.w	r2, r3, #7
 80156a2:	d00c      	beq.n	80156be <__lo0bits+0x22>
 80156a4:	07d9      	lsls	r1, r3, #31
 80156a6:	d422      	bmi.n	80156ee <__lo0bits+0x52>
 80156a8:	079a      	lsls	r2, r3, #30
 80156aa:	bf49      	itett	mi
 80156ac:	085b      	lsrmi	r3, r3, #1
 80156ae:	089b      	lsrpl	r3, r3, #2
 80156b0:	6003      	strmi	r3, [r0, #0]
 80156b2:	2201      	movmi	r2, #1
 80156b4:	bf5c      	itt	pl
 80156b6:	6003      	strpl	r3, [r0, #0]
 80156b8:	2202      	movpl	r2, #2
 80156ba:	4610      	mov	r0, r2
 80156bc:	4770      	bx	lr
 80156be:	b299      	uxth	r1, r3
 80156c0:	b909      	cbnz	r1, 80156c6 <__lo0bits+0x2a>
 80156c2:	0c1b      	lsrs	r3, r3, #16
 80156c4:	2210      	movs	r2, #16
 80156c6:	b2d9      	uxtb	r1, r3
 80156c8:	b909      	cbnz	r1, 80156ce <__lo0bits+0x32>
 80156ca:	3208      	adds	r2, #8
 80156cc:	0a1b      	lsrs	r3, r3, #8
 80156ce:	0719      	lsls	r1, r3, #28
 80156d0:	bf04      	itt	eq
 80156d2:	091b      	lsreq	r3, r3, #4
 80156d4:	3204      	addeq	r2, #4
 80156d6:	0799      	lsls	r1, r3, #30
 80156d8:	bf04      	itt	eq
 80156da:	089b      	lsreq	r3, r3, #2
 80156dc:	3202      	addeq	r2, #2
 80156de:	07d9      	lsls	r1, r3, #31
 80156e0:	d403      	bmi.n	80156ea <__lo0bits+0x4e>
 80156e2:	085b      	lsrs	r3, r3, #1
 80156e4:	f102 0201 	add.w	r2, r2, #1
 80156e8:	d003      	beq.n	80156f2 <__lo0bits+0x56>
 80156ea:	6003      	str	r3, [r0, #0]
 80156ec:	e7e5      	b.n	80156ba <__lo0bits+0x1e>
 80156ee:	2200      	movs	r2, #0
 80156f0:	e7e3      	b.n	80156ba <__lo0bits+0x1e>
 80156f2:	2220      	movs	r2, #32
 80156f4:	e7e1      	b.n	80156ba <__lo0bits+0x1e>
	...

080156f8 <__i2b>:
 80156f8:	b510      	push	{r4, lr}
 80156fa:	460c      	mov	r4, r1
 80156fc:	2101      	movs	r1, #1
 80156fe:	f7ff febb 	bl	8015478 <_Balloc>
 8015702:	4602      	mov	r2, r0
 8015704:	b928      	cbnz	r0, 8015712 <__i2b+0x1a>
 8015706:	4b05      	ldr	r3, [pc, #20]	; (801571c <__i2b+0x24>)
 8015708:	4805      	ldr	r0, [pc, #20]	; (8015720 <__i2b+0x28>)
 801570a:	f240 1145 	movw	r1, #325	; 0x145
 801570e:	f000 ff65 	bl	80165dc <__assert_func>
 8015712:	2301      	movs	r3, #1
 8015714:	6144      	str	r4, [r0, #20]
 8015716:	6103      	str	r3, [r0, #16]
 8015718:	bd10      	pop	{r4, pc}
 801571a:	bf00      	nop
 801571c:	080180a9 	.word	0x080180a9
 8015720:	0801811a 	.word	0x0801811a

08015724 <__multiply>:
 8015724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015728:	4691      	mov	r9, r2
 801572a:	690a      	ldr	r2, [r1, #16]
 801572c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015730:	429a      	cmp	r2, r3
 8015732:	bfb8      	it	lt
 8015734:	460b      	movlt	r3, r1
 8015736:	460c      	mov	r4, r1
 8015738:	bfbc      	itt	lt
 801573a:	464c      	movlt	r4, r9
 801573c:	4699      	movlt	r9, r3
 801573e:	6927      	ldr	r7, [r4, #16]
 8015740:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8015744:	68a3      	ldr	r3, [r4, #8]
 8015746:	6861      	ldr	r1, [r4, #4]
 8015748:	eb07 060a 	add.w	r6, r7, sl
 801574c:	42b3      	cmp	r3, r6
 801574e:	b085      	sub	sp, #20
 8015750:	bfb8      	it	lt
 8015752:	3101      	addlt	r1, #1
 8015754:	f7ff fe90 	bl	8015478 <_Balloc>
 8015758:	b930      	cbnz	r0, 8015768 <__multiply+0x44>
 801575a:	4602      	mov	r2, r0
 801575c:	4b44      	ldr	r3, [pc, #272]	; (8015870 <__multiply+0x14c>)
 801575e:	4845      	ldr	r0, [pc, #276]	; (8015874 <__multiply+0x150>)
 8015760:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8015764:	f000 ff3a 	bl	80165dc <__assert_func>
 8015768:	f100 0514 	add.w	r5, r0, #20
 801576c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8015770:	462b      	mov	r3, r5
 8015772:	2200      	movs	r2, #0
 8015774:	4543      	cmp	r3, r8
 8015776:	d321      	bcc.n	80157bc <__multiply+0x98>
 8015778:	f104 0314 	add.w	r3, r4, #20
 801577c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8015780:	f109 0314 	add.w	r3, r9, #20
 8015784:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8015788:	9202      	str	r2, [sp, #8]
 801578a:	1b3a      	subs	r2, r7, r4
 801578c:	3a15      	subs	r2, #21
 801578e:	f022 0203 	bic.w	r2, r2, #3
 8015792:	3204      	adds	r2, #4
 8015794:	f104 0115 	add.w	r1, r4, #21
 8015798:	428f      	cmp	r7, r1
 801579a:	bf38      	it	cc
 801579c:	2204      	movcc	r2, #4
 801579e:	9201      	str	r2, [sp, #4]
 80157a0:	9a02      	ldr	r2, [sp, #8]
 80157a2:	9303      	str	r3, [sp, #12]
 80157a4:	429a      	cmp	r2, r3
 80157a6:	d80c      	bhi.n	80157c2 <__multiply+0x9e>
 80157a8:	2e00      	cmp	r6, #0
 80157aa:	dd03      	ble.n	80157b4 <__multiply+0x90>
 80157ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d05b      	beq.n	801586c <__multiply+0x148>
 80157b4:	6106      	str	r6, [r0, #16]
 80157b6:	b005      	add	sp, #20
 80157b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157bc:	f843 2b04 	str.w	r2, [r3], #4
 80157c0:	e7d8      	b.n	8015774 <__multiply+0x50>
 80157c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80157c6:	f1ba 0f00 	cmp.w	sl, #0
 80157ca:	d024      	beq.n	8015816 <__multiply+0xf2>
 80157cc:	f104 0e14 	add.w	lr, r4, #20
 80157d0:	46a9      	mov	r9, r5
 80157d2:	f04f 0c00 	mov.w	ip, #0
 80157d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80157da:	f8d9 1000 	ldr.w	r1, [r9]
 80157de:	fa1f fb82 	uxth.w	fp, r2
 80157e2:	b289      	uxth	r1, r1
 80157e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80157e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80157ec:	f8d9 2000 	ldr.w	r2, [r9]
 80157f0:	4461      	add	r1, ip
 80157f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80157f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80157fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80157fe:	b289      	uxth	r1, r1
 8015800:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015804:	4577      	cmp	r7, lr
 8015806:	f849 1b04 	str.w	r1, [r9], #4
 801580a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801580e:	d8e2      	bhi.n	80157d6 <__multiply+0xb2>
 8015810:	9a01      	ldr	r2, [sp, #4]
 8015812:	f845 c002 	str.w	ip, [r5, r2]
 8015816:	9a03      	ldr	r2, [sp, #12]
 8015818:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801581c:	3304      	adds	r3, #4
 801581e:	f1b9 0f00 	cmp.w	r9, #0
 8015822:	d021      	beq.n	8015868 <__multiply+0x144>
 8015824:	6829      	ldr	r1, [r5, #0]
 8015826:	f104 0c14 	add.w	ip, r4, #20
 801582a:	46ae      	mov	lr, r5
 801582c:	f04f 0a00 	mov.w	sl, #0
 8015830:	f8bc b000 	ldrh.w	fp, [ip]
 8015834:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8015838:	fb09 220b 	mla	r2, r9, fp, r2
 801583c:	4452      	add	r2, sl
 801583e:	b289      	uxth	r1, r1
 8015840:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8015844:	f84e 1b04 	str.w	r1, [lr], #4
 8015848:	f85c 1b04 	ldr.w	r1, [ip], #4
 801584c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015850:	f8be 1000 	ldrh.w	r1, [lr]
 8015854:	fb09 110a 	mla	r1, r9, sl, r1
 8015858:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801585c:	4567      	cmp	r7, ip
 801585e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8015862:	d8e5      	bhi.n	8015830 <__multiply+0x10c>
 8015864:	9a01      	ldr	r2, [sp, #4]
 8015866:	50a9      	str	r1, [r5, r2]
 8015868:	3504      	adds	r5, #4
 801586a:	e799      	b.n	80157a0 <__multiply+0x7c>
 801586c:	3e01      	subs	r6, #1
 801586e:	e79b      	b.n	80157a8 <__multiply+0x84>
 8015870:	080180a9 	.word	0x080180a9
 8015874:	0801811a 	.word	0x0801811a

08015878 <__pow5mult>:
 8015878:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801587c:	4615      	mov	r5, r2
 801587e:	f012 0203 	ands.w	r2, r2, #3
 8015882:	4606      	mov	r6, r0
 8015884:	460f      	mov	r7, r1
 8015886:	d007      	beq.n	8015898 <__pow5mult+0x20>
 8015888:	4c25      	ldr	r4, [pc, #148]	; (8015920 <__pow5mult+0xa8>)
 801588a:	3a01      	subs	r2, #1
 801588c:	2300      	movs	r3, #0
 801588e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015892:	f7ff fe53 	bl	801553c <__multadd>
 8015896:	4607      	mov	r7, r0
 8015898:	10ad      	asrs	r5, r5, #2
 801589a:	d03d      	beq.n	8015918 <__pow5mult+0xa0>
 801589c:	69f4      	ldr	r4, [r6, #28]
 801589e:	b97c      	cbnz	r4, 80158c0 <__pow5mult+0x48>
 80158a0:	2010      	movs	r0, #16
 80158a2:	f7ff fd23 	bl	80152ec <malloc>
 80158a6:	4602      	mov	r2, r0
 80158a8:	61f0      	str	r0, [r6, #28]
 80158aa:	b928      	cbnz	r0, 80158b8 <__pow5mult+0x40>
 80158ac:	4b1d      	ldr	r3, [pc, #116]	; (8015924 <__pow5mult+0xac>)
 80158ae:	481e      	ldr	r0, [pc, #120]	; (8015928 <__pow5mult+0xb0>)
 80158b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80158b4:	f000 fe92 	bl	80165dc <__assert_func>
 80158b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80158bc:	6004      	str	r4, [r0, #0]
 80158be:	60c4      	str	r4, [r0, #12]
 80158c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80158c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80158c8:	b94c      	cbnz	r4, 80158de <__pow5mult+0x66>
 80158ca:	f240 2171 	movw	r1, #625	; 0x271
 80158ce:	4630      	mov	r0, r6
 80158d0:	f7ff ff12 	bl	80156f8 <__i2b>
 80158d4:	2300      	movs	r3, #0
 80158d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80158da:	4604      	mov	r4, r0
 80158dc:	6003      	str	r3, [r0, #0]
 80158de:	f04f 0900 	mov.w	r9, #0
 80158e2:	07eb      	lsls	r3, r5, #31
 80158e4:	d50a      	bpl.n	80158fc <__pow5mult+0x84>
 80158e6:	4639      	mov	r1, r7
 80158e8:	4622      	mov	r2, r4
 80158ea:	4630      	mov	r0, r6
 80158ec:	f7ff ff1a 	bl	8015724 <__multiply>
 80158f0:	4639      	mov	r1, r7
 80158f2:	4680      	mov	r8, r0
 80158f4:	4630      	mov	r0, r6
 80158f6:	f7ff fdff 	bl	80154f8 <_Bfree>
 80158fa:	4647      	mov	r7, r8
 80158fc:	106d      	asrs	r5, r5, #1
 80158fe:	d00b      	beq.n	8015918 <__pow5mult+0xa0>
 8015900:	6820      	ldr	r0, [r4, #0]
 8015902:	b938      	cbnz	r0, 8015914 <__pow5mult+0x9c>
 8015904:	4622      	mov	r2, r4
 8015906:	4621      	mov	r1, r4
 8015908:	4630      	mov	r0, r6
 801590a:	f7ff ff0b 	bl	8015724 <__multiply>
 801590e:	6020      	str	r0, [r4, #0]
 8015910:	f8c0 9000 	str.w	r9, [r0]
 8015914:	4604      	mov	r4, r0
 8015916:	e7e4      	b.n	80158e2 <__pow5mult+0x6a>
 8015918:	4638      	mov	r0, r7
 801591a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801591e:	bf00      	nop
 8015920:	08018268 	.word	0x08018268
 8015924:	0801803a 	.word	0x0801803a
 8015928:	0801811a 	.word	0x0801811a

0801592c <__lshift>:
 801592c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015930:	460c      	mov	r4, r1
 8015932:	6849      	ldr	r1, [r1, #4]
 8015934:	6923      	ldr	r3, [r4, #16]
 8015936:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801593a:	68a3      	ldr	r3, [r4, #8]
 801593c:	4607      	mov	r7, r0
 801593e:	4691      	mov	r9, r2
 8015940:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015944:	f108 0601 	add.w	r6, r8, #1
 8015948:	42b3      	cmp	r3, r6
 801594a:	db0b      	blt.n	8015964 <__lshift+0x38>
 801594c:	4638      	mov	r0, r7
 801594e:	f7ff fd93 	bl	8015478 <_Balloc>
 8015952:	4605      	mov	r5, r0
 8015954:	b948      	cbnz	r0, 801596a <__lshift+0x3e>
 8015956:	4602      	mov	r2, r0
 8015958:	4b28      	ldr	r3, [pc, #160]	; (80159fc <__lshift+0xd0>)
 801595a:	4829      	ldr	r0, [pc, #164]	; (8015a00 <__lshift+0xd4>)
 801595c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8015960:	f000 fe3c 	bl	80165dc <__assert_func>
 8015964:	3101      	adds	r1, #1
 8015966:	005b      	lsls	r3, r3, #1
 8015968:	e7ee      	b.n	8015948 <__lshift+0x1c>
 801596a:	2300      	movs	r3, #0
 801596c:	f100 0114 	add.w	r1, r0, #20
 8015970:	f100 0210 	add.w	r2, r0, #16
 8015974:	4618      	mov	r0, r3
 8015976:	4553      	cmp	r3, sl
 8015978:	db33      	blt.n	80159e2 <__lshift+0xb6>
 801597a:	6920      	ldr	r0, [r4, #16]
 801597c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015980:	f104 0314 	add.w	r3, r4, #20
 8015984:	f019 091f 	ands.w	r9, r9, #31
 8015988:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801598c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015990:	d02b      	beq.n	80159ea <__lshift+0xbe>
 8015992:	f1c9 0e20 	rsb	lr, r9, #32
 8015996:	468a      	mov	sl, r1
 8015998:	2200      	movs	r2, #0
 801599a:	6818      	ldr	r0, [r3, #0]
 801599c:	fa00 f009 	lsl.w	r0, r0, r9
 80159a0:	4310      	orrs	r0, r2
 80159a2:	f84a 0b04 	str.w	r0, [sl], #4
 80159a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80159aa:	459c      	cmp	ip, r3
 80159ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80159b0:	d8f3      	bhi.n	801599a <__lshift+0x6e>
 80159b2:	ebac 0304 	sub.w	r3, ip, r4
 80159b6:	3b15      	subs	r3, #21
 80159b8:	f023 0303 	bic.w	r3, r3, #3
 80159bc:	3304      	adds	r3, #4
 80159be:	f104 0015 	add.w	r0, r4, #21
 80159c2:	4584      	cmp	ip, r0
 80159c4:	bf38      	it	cc
 80159c6:	2304      	movcc	r3, #4
 80159c8:	50ca      	str	r2, [r1, r3]
 80159ca:	b10a      	cbz	r2, 80159d0 <__lshift+0xa4>
 80159cc:	f108 0602 	add.w	r6, r8, #2
 80159d0:	3e01      	subs	r6, #1
 80159d2:	4638      	mov	r0, r7
 80159d4:	612e      	str	r6, [r5, #16]
 80159d6:	4621      	mov	r1, r4
 80159d8:	f7ff fd8e 	bl	80154f8 <_Bfree>
 80159dc:	4628      	mov	r0, r5
 80159de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80159e6:	3301      	adds	r3, #1
 80159e8:	e7c5      	b.n	8015976 <__lshift+0x4a>
 80159ea:	3904      	subs	r1, #4
 80159ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80159f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80159f4:	459c      	cmp	ip, r3
 80159f6:	d8f9      	bhi.n	80159ec <__lshift+0xc0>
 80159f8:	e7ea      	b.n	80159d0 <__lshift+0xa4>
 80159fa:	bf00      	nop
 80159fc:	080180a9 	.word	0x080180a9
 8015a00:	0801811a 	.word	0x0801811a

08015a04 <__mcmp>:
 8015a04:	b530      	push	{r4, r5, lr}
 8015a06:	6902      	ldr	r2, [r0, #16]
 8015a08:	690c      	ldr	r4, [r1, #16]
 8015a0a:	1b12      	subs	r2, r2, r4
 8015a0c:	d10e      	bne.n	8015a2c <__mcmp+0x28>
 8015a0e:	f100 0314 	add.w	r3, r0, #20
 8015a12:	3114      	adds	r1, #20
 8015a14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015a18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015a1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015a20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8015a24:	42a5      	cmp	r5, r4
 8015a26:	d003      	beq.n	8015a30 <__mcmp+0x2c>
 8015a28:	d305      	bcc.n	8015a36 <__mcmp+0x32>
 8015a2a:	2201      	movs	r2, #1
 8015a2c:	4610      	mov	r0, r2
 8015a2e:	bd30      	pop	{r4, r5, pc}
 8015a30:	4283      	cmp	r3, r0
 8015a32:	d3f3      	bcc.n	8015a1c <__mcmp+0x18>
 8015a34:	e7fa      	b.n	8015a2c <__mcmp+0x28>
 8015a36:	f04f 32ff 	mov.w	r2, #4294967295
 8015a3a:	e7f7      	b.n	8015a2c <__mcmp+0x28>

08015a3c <__mdiff>:
 8015a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015a40:	460c      	mov	r4, r1
 8015a42:	4606      	mov	r6, r0
 8015a44:	4611      	mov	r1, r2
 8015a46:	4620      	mov	r0, r4
 8015a48:	4690      	mov	r8, r2
 8015a4a:	f7ff ffdb 	bl	8015a04 <__mcmp>
 8015a4e:	1e05      	subs	r5, r0, #0
 8015a50:	d110      	bne.n	8015a74 <__mdiff+0x38>
 8015a52:	4629      	mov	r1, r5
 8015a54:	4630      	mov	r0, r6
 8015a56:	f7ff fd0f 	bl	8015478 <_Balloc>
 8015a5a:	b930      	cbnz	r0, 8015a6a <__mdiff+0x2e>
 8015a5c:	4b3a      	ldr	r3, [pc, #232]	; (8015b48 <__mdiff+0x10c>)
 8015a5e:	4602      	mov	r2, r0
 8015a60:	f240 2137 	movw	r1, #567	; 0x237
 8015a64:	4839      	ldr	r0, [pc, #228]	; (8015b4c <__mdiff+0x110>)
 8015a66:	f000 fdb9 	bl	80165dc <__assert_func>
 8015a6a:	2301      	movs	r3, #1
 8015a6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8015a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015a74:	bfa4      	itt	ge
 8015a76:	4643      	movge	r3, r8
 8015a78:	46a0      	movge	r8, r4
 8015a7a:	4630      	mov	r0, r6
 8015a7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015a80:	bfa6      	itte	ge
 8015a82:	461c      	movge	r4, r3
 8015a84:	2500      	movge	r5, #0
 8015a86:	2501      	movlt	r5, #1
 8015a88:	f7ff fcf6 	bl	8015478 <_Balloc>
 8015a8c:	b920      	cbnz	r0, 8015a98 <__mdiff+0x5c>
 8015a8e:	4b2e      	ldr	r3, [pc, #184]	; (8015b48 <__mdiff+0x10c>)
 8015a90:	4602      	mov	r2, r0
 8015a92:	f240 2145 	movw	r1, #581	; 0x245
 8015a96:	e7e5      	b.n	8015a64 <__mdiff+0x28>
 8015a98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015a9c:	6926      	ldr	r6, [r4, #16]
 8015a9e:	60c5      	str	r5, [r0, #12]
 8015aa0:	f104 0914 	add.w	r9, r4, #20
 8015aa4:	f108 0514 	add.w	r5, r8, #20
 8015aa8:	f100 0e14 	add.w	lr, r0, #20
 8015aac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8015ab0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8015ab4:	f108 0210 	add.w	r2, r8, #16
 8015ab8:	46f2      	mov	sl, lr
 8015aba:	2100      	movs	r1, #0
 8015abc:	f859 3b04 	ldr.w	r3, [r9], #4
 8015ac0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8015ac4:	fa11 f88b 	uxtah	r8, r1, fp
 8015ac8:	b299      	uxth	r1, r3
 8015aca:	0c1b      	lsrs	r3, r3, #16
 8015acc:	eba8 0801 	sub.w	r8, r8, r1
 8015ad0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8015ad4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015ad8:	fa1f f888 	uxth.w	r8, r8
 8015adc:	1419      	asrs	r1, r3, #16
 8015ade:	454e      	cmp	r6, r9
 8015ae0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8015ae4:	f84a 3b04 	str.w	r3, [sl], #4
 8015ae8:	d8e8      	bhi.n	8015abc <__mdiff+0x80>
 8015aea:	1b33      	subs	r3, r6, r4
 8015aec:	3b15      	subs	r3, #21
 8015aee:	f023 0303 	bic.w	r3, r3, #3
 8015af2:	3304      	adds	r3, #4
 8015af4:	3415      	adds	r4, #21
 8015af6:	42a6      	cmp	r6, r4
 8015af8:	bf38      	it	cc
 8015afa:	2304      	movcc	r3, #4
 8015afc:	441d      	add	r5, r3
 8015afe:	4473      	add	r3, lr
 8015b00:	469e      	mov	lr, r3
 8015b02:	462e      	mov	r6, r5
 8015b04:	4566      	cmp	r6, ip
 8015b06:	d30e      	bcc.n	8015b26 <__mdiff+0xea>
 8015b08:	f10c 0203 	add.w	r2, ip, #3
 8015b0c:	1b52      	subs	r2, r2, r5
 8015b0e:	f022 0203 	bic.w	r2, r2, #3
 8015b12:	3d03      	subs	r5, #3
 8015b14:	45ac      	cmp	ip, r5
 8015b16:	bf38      	it	cc
 8015b18:	2200      	movcc	r2, #0
 8015b1a:	4413      	add	r3, r2
 8015b1c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015b20:	b17a      	cbz	r2, 8015b42 <__mdiff+0x106>
 8015b22:	6107      	str	r7, [r0, #16]
 8015b24:	e7a4      	b.n	8015a70 <__mdiff+0x34>
 8015b26:	f856 8b04 	ldr.w	r8, [r6], #4
 8015b2a:	fa11 f288 	uxtah	r2, r1, r8
 8015b2e:	1414      	asrs	r4, r2, #16
 8015b30:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8015b34:	b292      	uxth	r2, r2
 8015b36:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015b3a:	f84e 2b04 	str.w	r2, [lr], #4
 8015b3e:	1421      	asrs	r1, r4, #16
 8015b40:	e7e0      	b.n	8015b04 <__mdiff+0xc8>
 8015b42:	3f01      	subs	r7, #1
 8015b44:	e7ea      	b.n	8015b1c <__mdiff+0xe0>
 8015b46:	bf00      	nop
 8015b48:	080180a9 	.word	0x080180a9
 8015b4c:	0801811a 	.word	0x0801811a

08015b50 <__ulp>:
 8015b50:	b082      	sub	sp, #8
 8015b52:	ed8d 0b00 	vstr	d0, [sp]
 8015b56:	9a01      	ldr	r2, [sp, #4]
 8015b58:	4b0f      	ldr	r3, [pc, #60]	; (8015b98 <__ulp+0x48>)
 8015b5a:	4013      	ands	r3, r2
 8015b5c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	dc08      	bgt.n	8015b76 <__ulp+0x26>
 8015b64:	425b      	negs	r3, r3
 8015b66:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8015b6a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8015b6e:	da04      	bge.n	8015b7a <__ulp+0x2a>
 8015b70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8015b74:	4113      	asrs	r3, r2
 8015b76:	2200      	movs	r2, #0
 8015b78:	e008      	b.n	8015b8c <__ulp+0x3c>
 8015b7a:	f1a2 0314 	sub.w	r3, r2, #20
 8015b7e:	2b1e      	cmp	r3, #30
 8015b80:	bfda      	itte	le
 8015b82:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8015b86:	40da      	lsrle	r2, r3
 8015b88:	2201      	movgt	r2, #1
 8015b8a:	2300      	movs	r3, #0
 8015b8c:	4619      	mov	r1, r3
 8015b8e:	4610      	mov	r0, r2
 8015b90:	ec41 0b10 	vmov	d0, r0, r1
 8015b94:	b002      	add	sp, #8
 8015b96:	4770      	bx	lr
 8015b98:	7ff00000 	.word	0x7ff00000

08015b9c <__b2d>:
 8015b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ba0:	6906      	ldr	r6, [r0, #16]
 8015ba2:	f100 0814 	add.w	r8, r0, #20
 8015ba6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8015baa:	1f37      	subs	r7, r6, #4
 8015bac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8015bb0:	4610      	mov	r0, r2
 8015bb2:	f7ff fd53 	bl	801565c <__hi0bits>
 8015bb6:	f1c0 0320 	rsb	r3, r0, #32
 8015bba:	280a      	cmp	r0, #10
 8015bbc:	600b      	str	r3, [r1, #0]
 8015bbe:	491b      	ldr	r1, [pc, #108]	; (8015c2c <__b2d+0x90>)
 8015bc0:	dc15      	bgt.n	8015bee <__b2d+0x52>
 8015bc2:	f1c0 0c0b 	rsb	ip, r0, #11
 8015bc6:	fa22 f30c 	lsr.w	r3, r2, ip
 8015bca:	45b8      	cmp	r8, r7
 8015bcc:	ea43 0501 	orr.w	r5, r3, r1
 8015bd0:	bf34      	ite	cc
 8015bd2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015bd6:	2300      	movcs	r3, #0
 8015bd8:	3015      	adds	r0, #21
 8015bda:	fa02 f000 	lsl.w	r0, r2, r0
 8015bde:	fa23 f30c 	lsr.w	r3, r3, ip
 8015be2:	4303      	orrs	r3, r0
 8015be4:	461c      	mov	r4, r3
 8015be6:	ec45 4b10 	vmov	d0, r4, r5
 8015bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015bee:	45b8      	cmp	r8, r7
 8015bf0:	bf3a      	itte	cc
 8015bf2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8015bf6:	f1a6 0708 	subcc.w	r7, r6, #8
 8015bfa:	2300      	movcs	r3, #0
 8015bfc:	380b      	subs	r0, #11
 8015bfe:	d012      	beq.n	8015c26 <__b2d+0x8a>
 8015c00:	f1c0 0120 	rsb	r1, r0, #32
 8015c04:	fa23 f401 	lsr.w	r4, r3, r1
 8015c08:	4082      	lsls	r2, r0
 8015c0a:	4322      	orrs	r2, r4
 8015c0c:	4547      	cmp	r7, r8
 8015c0e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8015c12:	bf8c      	ite	hi
 8015c14:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015c18:	2200      	movls	r2, #0
 8015c1a:	4083      	lsls	r3, r0
 8015c1c:	40ca      	lsrs	r2, r1
 8015c1e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8015c22:	4313      	orrs	r3, r2
 8015c24:	e7de      	b.n	8015be4 <__b2d+0x48>
 8015c26:	ea42 0501 	orr.w	r5, r2, r1
 8015c2a:	e7db      	b.n	8015be4 <__b2d+0x48>
 8015c2c:	3ff00000 	.word	0x3ff00000

08015c30 <__d2b>:
 8015c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015c34:	460f      	mov	r7, r1
 8015c36:	2101      	movs	r1, #1
 8015c38:	ec59 8b10 	vmov	r8, r9, d0
 8015c3c:	4616      	mov	r6, r2
 8015c3e:	f7ff fc1b 	bl	8015478 <_Balloc>
 8015c42:	4604      	mov	r4, r0
 8015c44:	b930      	cbnz	r0, 8015c54 <__d2b+0x24>
 8015c46:	4602      	mov	r2, r0
 8015c48:	4b24      	ldr	r3, [pc, #144]	; (8015cdc <__d2b+0xac>)
 8015c4a:	4825      	ldr	r0, [pc, #148]	; (8015ce0 <__d2b+0xb0>)
 8015c4c:	f240 310f 	movw	r1, #783	; 0x30f
 8015c50:	f000 fcc4 	bl	80165dc <__assert_func>
 8015c54:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015c58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015c5c:	bb2d      	cbnz	r5, 8015caa <__d2b+0x7a>
 8015c5e:	9301      	str	r3, [sp, #4]
 8015c60:	f1b8 0300 	subs.w	r3, r8, #0
 8015c64:	d026      	beq.n	8015cb4 <__d2b+0x84>
 8015c66:	4668      	mov	r0, sp
 8015c68:	9300      	str	r3, [sp, #0]
 8015c6a:	f7ff fd17 	bl	801569c <__lo0bits>
 8015c6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8015c72:	b1e8      	cbz	r0, 8015cb0 <__d2b+0x80>
 8015c74:	f1c0 0320 	rsb	r3, r0, #32
 8015c78:	fa02 f303 	lsl.w	r3, r2, r3
 8015c7c:	430b      	orrs	r3, r1
 8015c7e:	40c2      	lsrs	r2, r0
 8015c80:	6163      	str	r3, [r4, #20]
 8015c82:	9201      	str	r2, [sp, #4]
 8015c84:	9b01      	ldr	r3, [sp, #4]
 8015c86:	61a3      	str	r3, [r4, #24]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	bf14      	ite	ne
 8015c8c:	2202      	movne	r2, #2
 8015c8e:	2201      	moveq	r2, #1
 8015c90:	6122      	str	r2, [r4, #16]
 8015c92:	b1bd      	cbz	r5, 8015cc4 <__d2b+0x94>
 8015c94:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8015c98:	4405      	add	r5, r0
 8015c9a:	603d      	str	r5, [r7, #0]
 8015c9c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015ca0:	6030      	str	r0, [r6, #0]
 8015ca2:	4620      	mov	r0, r4
 8015ca4:	b003      	add	sp, #12
 8015ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015cae:	e7d6      	b.n	8015c5e <__d2b+0x2e>
 8015cb0:	6161      	str	r1, [r4, #20]
 8015cb2:	e7e7      	b.n	8015c84 <__d2b+0x54>
 8015cb4:	a801      	add	r0, sp, #4
 8015cb6:	f7ff fcf1 	bl	801569c <__lo0bits>
 8015cba:	9b01      	ldr	r3, [sp, #4]
 8015cbc:	6163      	str	r3, [r4, #20]
 8015cbe:	3020      	adds	r0, #32
 8015cc0:	2201      	movs	r2, #1
 8015cc2:	e7e5      	b.n	8015c90 <__d2b+0x60>
 8015cc4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015cc8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015ccc:	6038      	str	r0, [r7, #0]
 8015cce:	6918      	ldr	r0, [r3, #16]
 8015cd0:	f7ff fcc4 	bl	801565c <__hi0bits>
 8015cd4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015cd8:	e7e2      	b.n	8015ca0 <__d2b+0x70>
 8015cda:	bf00      	nop
 8015cdc:	080180a9 	.word	0x080180a9
 8015ce0:	0801811a 	.word	0x0801811a

08015ce4 <__ratio>:
 8015ce4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ce8:	4688      	mov	r8, r1
 8015cea:	4669      	mov	r1, sp
 8015cec:	4681      	mov	r9, r0
 8015cee:	f7ff ff55 	bl	8015b9c <__b2d>
 8015cf2:	a901      	add	r1, sp, #4
 8015cf4:	4640      	mov	r0, r8
 8015cf6:	ec55 4b10 	vmov	r4, r5, d0
 8015cfa:	f7ff ff4f 	bl	8015b9c <__b2d>
 8015cfe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015d02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015d06:	eba3 0c02 	sub.w	ip, r3, r2
 8015d0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015d0e:	1a9b      	subs	r3, r3, r2
 8015d10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015d14:	ec51 0b10 	vmov	r0, r1, d0
 8015d18:	2b00      	cmp	r3, #0
 8015d1a:	bfd6      	itet	le
 8015d1c:	460a      	movle	r2, r1
 8015d1e:	462a      	movgt	r2, r5
 8015d20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015d24:	468b      	mov	fp, r1
 8015d26:	462f      	mov	r7, r5
 8015d28:	bfd4      	ite	le
 8015d2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015d2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8015d32:	4620      	mov	r0, r4
 8015d34:	ee10 2a10 	vmov	r2, s0
 8015d38:	465b      	mov	r3, fp
 8015d3a:	4639      	mov	r1, r7
 8015d3c:	f7ea fd86 	bl	800084c <__aeabi_ddiv>
 8015d40:	ec41 0b10 	vmov	d0, r0, r1
 8015d44:	b003      	add	sp, #12
 8015d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d4a <__copybits>:
 8015d4a:	3901      	subs	r1, #1
 8015d4c:	b570      	push	{r4, r5, r6, lr}
 8015d4e:	1149      	asrs	r1, r1, #5
 8015d50:	6914      	ldr	r4, [r2, #16]
 8015d52:	3101      	adds	r1, #1
 8015d54:	f102 0314 	add.w	r3, r2, #20
 8015d58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015d5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015d60:	1f05      	subs	r5, r0, #4
 8015d62:	42a3      	cmp	r3, r4
 8015d64:	d30c      	bcc.n	8015d80 <__copybits+0x36>
 8015d66:	1aa3      	subs	r3, r4, r2
 8015d68:	3b11      	subs	r3, #17
 8015d6a:	f023 0303 	bic.w	r3, r3, #3
 8015d6e:	3211      	adds	r2, #17
 8015d70:	42a2      	cmp	r2, r4
 8015d72:	bf88      	it	hi
 8015d74:	2300      	movhi	r3, #0
 8015d76:	4418      	add	r0, r3
 8015d78:	2300      	movs	r3, #0
 8015d7a:	4288      	cmp	r0, r1
 8015d7c:	d305      	bcc.n	8015d8a <__copybits+0x40>
 8015d7e:	bd70      	pop	{r4, r5, r6, pc}
 8015d80:	f853 6b04 	ldr.w	r6, [r3], #4
 8015d84:	f845 6f04 	str.w	r6, [r5, #4]!
 8015d88:	e7eb      	b.n	8015d62 <__copybits+0x18>
 8015d8a:	f840 3b04 	str.w	r3, [r0], #4
 8015d8e:	e7f4      	b.n	8015d7a <__copybits+0x30>

08015d90 <__any_on>:
 8015d90:	f100 0214 	add.w	r2, r0, #20
 8015d94:	6900      	ldr	r0, [r0, #16]
 8015d96:	114b      	asrs	r3, r1, #5
 8015d98:	4298      	cmp	r0, r3
 8015d9a:	b510      	push	{r4, lr}
 8015d9c:	db11      	blt.n	8015dc2 <__any_on+0x32>
 8015d9e:	dd0a      	ble.n	8015db6 <__any_on+0x26>
 8015da0:	f011 011f 	ands.w	r1, r1, #31
 8015da4:	d007      	beq.n	8015db6 <__any_on+0x26>
 8015da6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015daa:	fa24 f001 	lsr.w	r0, r4, r1
 8015dae:	fa00 f101 	lsl.w	r1, r0, r1
 8015db2:	428c      	cmp	r4, r1
 8015db4:	d10b      	bne.n	8015dce <__any_on+0x3e>
 8015db6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015dba:	4293      	cmp	r3, r2
 8015dbc:	d803      	bhi.n	8015dc6 <__any_on+0x36>
 8015dbe:	2000      	movs	r0, #0
 8015dc0:	bd10      	pop	{r4, pc}
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	e7f7      	b.n	8015db6 <__any_on+0x26>
 8015dc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015dca:	2900      	cmp	r1, #0
 8015dcc:	d0f5      	beq.n	8015dba <__any_on+0x2a>
 8015dce:	2001      	movs	r0, #1
 8015dd0:	e7f6      	b.n	8015dc0 <__any_on+0x30>

08015dd2 <__ascii_wctomb>:
 8015dd2:	b149      	cbz	r1, 8015de8 <__ascii_wctomb+0x16>
 8015dd4:	2aff      	cmp	r2, #255	; 0xff
 8015dd6:	bf85      	ittet	hi
 8015dd8:	238a      	movhi	r3, #138	; 0x8a
 8015dda:	6003      	strhi	r3, [r0, #0]
 8015ddc:	700a      	strbls	r2, [r1, #0]
 8015dde:	f04f 30ff 	movhi.w	r0, #4294967295
 8015de2:	bf98      	it	ls
 8015de4:	2001      	movls	r0, #1
 8015de6:	4770      	bx	lr
 8015de8:	4608      	mov	r0, r1
 8015dea:	4770      	bx	lr

08015dec <__ssputs_r>:
 8015dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015df0:	688e      	ldr	r6, [r1, #8]
 8015df2:	461f      	mov	r7, r3
 8015df4:	42be      	cmp	r6, r7
 8015df6:	680b      	ldr	r3, [r1, #0]
 8015df8:	4682      	mov	sl, r0
 8015dfa:	460c      	mov	r4, r1
 8015dfc:	4690      	mov	r8, r2
 8015dfe:	d82c      	bhi.n	8015e5a <__ssputs_r+0x6e>
 8015e00:	898a      	ldrh	r2, [r1, #12]
 8015e02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015e06:	d026      	beq.n	8015e56 <__ssputs_r+0x6a>
 8015e08:	6965      	ldr	r5, [r4, #20]
 8015e0a:	6909      	ldr	r1, [r1, #16]
 8015e0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e10:	eba3 0901 	sub.w	r9, r3, r1
 8015e14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015e18:	1c7b      	adds	r3, r7, #1
 8015e1a:	444b      	add	r3, r9
 8015e1c:	106d      	asrs	r5, r5, #1
 8015e1e:	429d      	cmp	r5, r3
 8015e20:	bf38      	it	cc
 8015e22:	461d      	movcc	r5, r3
 8015e24:	0553      	lsls	r3, r2, #21
 8015e26:	d527      	bpl.n	8015e78 <__ssputs_r+0x8c>
 8015e28:	4629      	mov	r1, r5
 8015e2a:	f7ff fa87 	bl	801533c <_malloc_r>
 8015e2e:	4606      	mov	r6, r0
 8015e30:	b360      	cbz	r0, 8015e8c <__ssputs_r+0xa0>
 8015e32:	6921      	ldr	r1, [r4, #16]
 8015e34:	464a      	mov	r2, r9
 8015e36:	f7fe f822 	bl	8013e7e <memcpy>
 8015e3a:	89a3      	ldrh	r3, [r4, #12]
 8015e3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e44:	81a3      	strh	r3, [r4, #12]
 8015e46:	6126      	str	r6, [r4, #16]
 8015e48:	6165      	str	r5, [r4, #20]
 8015e4a:	444e      	add	r6, r9
 8015e4c:	eba5 0509 	sub.w	r5, r5, r9
 8015e50:	6026      	str	r6, [r4, #0]
 8015e52:	60a5      	str	r5, [r4, #8]
 8015e54:	463e      	mov	r6, r7
 8015e56:	42be      	cmp	r6, r7
 8015e58:	d900      	bls.n	8015e5c <__ssputs_r+0x70>
 8015e5a:	463e      	mov	r6, r7
 8015e5c:	6820      	ldr	r0, [r4, #0]
 8015e5e:	4632      	mov	r2, r6
 8015e60:	4641      	mov	r1, r8
 8015e62:	f000 fb6f 	bl	8016544 <memmove>
 8015e66:	68a3      	ldr	r3, [r4, #8]
 8015e68:	1b9b      	subs	r3, r3, r6
 8015e6a:	60a3      	str	r3, [r4, #8]
 8015e6c:	6823      	ldr	r3, [r4, #0]
 8015e6e:	4433      	add	r3, r6
 8015e70:	6023      	str	r3, [r4, #0]
 8015e72:	2000      	movs	r0, #0
 8015e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e78:	462a      	mov	r2, r5
 8015e7a:	f000 fbe3 	bl	8016644 <_realloc_r>
 8015e7e:	4606      	mov	r6, r0
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d1e0      	bne.n	8015e46 <__ssputs_r+0x5a>
 8015e84:	6921      	ldr	r1, [r4, #16]
 8015e86:	4650      	mov	r0, sl
 8015e88:	f7fe fe8c 	bl	8014ba4 <_free_r>
 8015e8c:	230c      	movs	r3, #12
 8015e8e:	f8ca 3000 	str.w	r3, [sl]
 8015e92:	89a3      	ldrh	r3, [r4, #12]
 8015e94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e98:	81a3      	strh	r3, [r4, #12]
 8015e9a:	f04f 30ff 	mov.w	r0, #4294967295
 8015e9e:	e7e9      	b.n	8015e74 <__ssputs_r+0x88>

08015ea0 <_svfiprintf_r>:
 8015ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ea4:	4698      	mov	r8, r3
 8015ea6:	898b      	ldrh	r3, [r1, #12]
 8015ea8:	061b      	lsls	r3, r3, #24
 8015eaa:	b09d      	sub	sp, #116	; 0x74
 8015eac:	4607      	mov	r7, r0
 8015eae:	460d      	mov	r5, r1
 8015eb0:	4614      	mov	r4, r2
 8015eb2:	d50e      	bpl.n	8015ed2 <_svfiprintf_r+0x32>
 8015eb4:	690b      	ldr	r3, [r1, #16]
 8015eb6:	b963      	cbnz	r3, 8015ed2 <_svfiprintf_r+0x32>
 8015eb8:	2140      	movs	r1, #64	; 0x40
 8015eba:	f7ff fa3f 	bl	801533c <_malloc_r>
 8015ebe:	6028      	str	r0, [r5, #0]
 8015ec0:	6128      	str	r0, [r5, #16]
 8015ec2:	b920      	cbnz	r0, 8015ece <_svfiprintf_r+0x2e>
 8015ec4:	230c      	movs	r3, #12
 8015ec6:	603b      	str	r3, [r7, #0]
 8015ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8015ecc:	e0d0      	b.n	8016070 <_svfiprintf_r+0x1d0>
 8015ece:	2340      	movs	r3, #64	; 0x40
 8015ed0:	616b      	str	r3, [r5, #20]
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	9309      	str	r3, [sp, #36]	; 0x24
 8015ed6:	2320      	movs	r3, #32
 8015ed8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015edc:	f8cd 800c 	str.w	r8, [sp, #12]
 8015ee0:	2330      	movs	r3, #48	; 0x30
 8015ee2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8016088 <_svfiprintf_r+0x1e8>
 8015ee6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015eea:	f04f 0901 	mov.w	r9, #1
 8015eee:	4623      	mov	r3, r4
 8015ef0:	469a      	mov	sl, r3
 8015ef2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015ef6:	b10a      	cbz	r2, 8015efc <_svfiprintf_r+0x5c>
 8015ef8:	2a25      	cmp	r2, #37	; 0x25
 8015efa:	d1f9      	bne.n	8015ef0 <_svfiprintf_r+0x50>
 8015efc:	ebba 0b04 	subs.w	fp, sl, r4
 8015f00:	d00b      	beq.n	8015f1a <_svfiprintf_r+0x7a>
 8015f02:	465b      	mov	r3, fp
 8015f04:	4622      	mov	r2, r4
 8015f06:	4629      	mov	r1, r5
 8015f08:	4638      	mov	r0, r7
 8015f0a:	f7ff ff6f 	bl	8015dec <__ssputs_r>
 8015f0e:	3001      	adds	r0, #1
 8015f10:	f000 80a9 	beq.w	8016066 <_svfiprintf_r+0x1c6>
 8015f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f16:	445a      	add	r2, fp
 8015f18:	9209      	str	r2, [sp, #36]	; 0x24
 8015f1a:	f89a 3000 	ldrb.w	r3, [sl]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	f000 80a1 	beq.w	8016066 <_svfiprintf_r+0x1c6>
 8015f24:	2300      	movs	r3, #0
 8015f26:	f04f 32ff 	mov.w	r2, #4294967295
 8015f2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f2e:	f10a 0a01 	add.w	sl, sl, #1
 8015f32:	9304      	str	r3, [sp, #16]
 8015f34:	9307      	str	r3, [sp, #28]
 8015f36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f3a:	931a      	str	r3, [sp, #104]	; 0x68
 8015f3c:	4654      	mov	r4, sl
 8015f3e:	2205      	movs	r2, #5
 8015f40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015f44:	4850      	ldr	r0, [pc, #320]	; (8016088 <_svfiprintf_r+0x1e8>)
 8015f46:	f7ea f943 	bl	80001d0 <memchr>
 8015f4a:	9a04      	ldr	r2, [sp, #16]
 8015f4c:	b9d8      	cbnz	r0, 8015f86 <_svfiprintf_r+0xe6>
 8015f4e:	06d0      	lsls	r0, r2, #27
 8015f50:	bf44      	itt	mi
 8015f52:	2320      	movmi	r3, #32
 8015f54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f58:	0711      	lsls	r1, r2, #28
 8015f5a:	bf44      	itt	mi
 8015f5c:	232b      	movmi	r3, #43	; 0x2b
 8015f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015f62:	f89a 3000 	ldrb.w	r3, [sl]
 8015f66:	2b2a      	cmp	r3, #42	; 0x2a
 8015f68:	d015      	beq.n	8015f96 <_svfiprintf_r+0xf6>
 8015f6a:	9a07      	ldr	r2, [sp, #28]
 8015f6c:	4654      	mov	r4, sl
 8015f6e:	2000      	movs	r0, #0
 8015f70:	f04f 0c0a 	mov.w	ip, #10
 8015f74:	4621      	mov	r1, r4
 8015f76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f7a:	3b30      	subs	r3, #48	; 0x30
 8015f7c:	2b09      	cmp	r3, #9
 8015f7e:	d94d      	bls.n	801601c <_svfiprintf_r+0x17c>
 8015f80:	b1b0      	cbz	r0, 8015fb0 <_svfiprintf_r+0x110>
 8015f82:	9207      	str	r2, [sp, #28]
 8015f84:	e014      	b.n	8015fb0 <_svfiprintf_r+0x110>
 8015f86:	eba0 0308 	sub.w	r3, r0, r8
 8015f8a:	fa09 f303 	lsl.w	r3, r9, r3
 8015f8e:	4313      	orrs	r3, r2
 8015f90:	9304      	str	r3, [sp, #16]
 8015f92:	46a2      	mov	sl, r4
 8015f94:	e7d2      	b.n	8015f3c <_svfiprintf_r+0x9c>
 8015f96:	9b03      	ldr	r3, [sp, #12]
 8015f98:	1d19      	adds	r1, r3, #4
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	9103      	str	r1, [sp, #12]
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	bfbb      	ittet	lt
 8015fa2:	425b      	neglt	r3, r3
 8015fa4:	f042 0202 	orrlt.w	r2, r2, #2
 8015fa8:	9307      	strge	r3, [sp, #28]
 8015faa:	9307      	strlt	r3, [sp, #28]
 8015fac:	bfb8      	it	lt
 8015fae:	9204      	strlt	r2, [sp, #16]
 8015fb0:	7823      	ldrb	r3, [r4, #0]
 8015fb2:	2b2e      	cmp	r3, #46	; 0x2e
 8015fb4:	d10c      	bne.n	8015fd0 <_svfiprintf_r+0x130>
 8015fb6:	7863      	ldrb	r3, [r4, #1]
 8015fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8015fba:	d134      	bne.n	8016026 <_svfiprintf_r+0x186>
 8015fbc:	9b03      	ldr	r3, [sp, #12]
 8015fbe:	1d1a      	adds	r2, r3, #4
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	9203      	str	r2, [sp, #12]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	bfb8      	it	lt
 8015fc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8015fcc:	3402      	adds	r4, #2
 8015fce:	9305      	str	r3, [sp, #20]
 8015fd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8016098 <_svfiprintf_r+0x1f8>
 8015fd4:	7821      	ldrb	r1, [r4, #0]
 8015fd6:	2203      	movs	r2, #3
 8015fd8:	4650      	mov	r0, sl
 8015fda:	f7ea f8f9 	bl	80001d0 <memchr>
 8015fde:	b138      	cbz	r0, 8015ff0 <_svfiprintf_r+0x150>
 8015fe0:	9b04      	ldr	r3, [sp, #16]
 8015fe2:	eba0 000a 	sub.w	r0, r0, sl
 8015fe6:	2240      	movs	r2, #64	; 0x40
 8015fe8:	4082      	lsls	r2, r0
 8015fea:	4313      	orrs	r3, r2
 8015fec:	3401      	adds	r4, #1
 8015fee:	9304      	str	r3, [sp, #16]
 8015ff0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ff4:	4825      	ldr	r0, [pc, #148]	; (801608c <_svfiprintf_r+0x1ec>)
 8015ff6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015ffa:	2206      	movs	r2, #6
 8015ffc:	f7ea f8e8 	bl	80001d0 <memchr>
 8016000:	2800      	cmp	r0, #0
 8016002:	d038      	beq.n	8016076 <_svfiprintf_r+0x1d6>
 8016004:	4b22      	ldr	r3, [pc, #136]	; (8016090 <_svfiprintf_r+0x1f0>)
 8016006:	bb1b      	cbnz	r3, 8016050 <_svfiprintf_r+0x1b0>
 8016008:	9b03      	ldr	r3, [sp, #12]
 801600a:	3307      	adds	r3, #7
 801600c:	f023 0307 	bic.w	r3, r3, #7
 8016010:	3308      	adds	r3, #8
 8016012:	9303      	str	r3, [sp, #12]
 8016014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016016:	4433      	add	r3, r6
 8016018:	9309      	str	r3, [sp, #36]	; 0x24
 801601a:	e768      	b.n	8015eee <_svfiprintf_r+0x4e>
 801601c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016020:	460c      	mov	r4, r1
 8016022:	2001      	movs	r0, #1
 8016024:	e7a6      	b.n	8015f74 <_svfiprintf_r+0xd4>
 8016026:	2300      	movs	r3, #0
 8016028:	3401      	adds	r4, #1
 801602a:	9305      	str	r3, [sp, #20]
 801602c:	4619      	mov	r1, r3
 801602e:	f04f 0c0a 	mov.w	ip, #10
 8016032:	4620      	mov	r0, r4
 8016034:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016038:	3a30      	subs	r2, #48	; 0x30
 801603a:	2a09      	cmp	r2, #9
 801603c:	d903      	bls.n	8016046 <_svfiprintf_r+0x1a6>
 801603e:	2b00      	cmp	r3, #0
 8016040:	d0c6      	beq.n	8015fd0 <_svfiprintf_r+0x130>
 8016042:	9105      	str	r1, [sp, #20]
 8016044:	e7c4      	b.n	8015fd0 <_svfiprintf_r+0x130>
 8016046:	fb0c 2101 	mla	r1, ip, r1, r2
 801604a:	4604      	mov	r4, r0
 801604c:	2301      	movs	r3, #1
 801604e:	e7f0      	b.n	8016032 <_svfiprintf_r+0x192>
 8016050:	ab03      	add	r3, sp, #12
 8016052:	9300      	str	r3, [sp, #0]
 8016054:	462a      	mov	r2, r5
 8016056:	4b0f      	ldr	r3, [pc, #60]	; (8016094 <_svfiprintf_r+0x1f4>)
 8016058:	a904      	add	r1, sp, #16
 801605a:	4638      	mov	r0, r7
 801605c:	f7fd f884 	bl	8013168 <_printf_float>
 8016060:	1c42      	adds	r2, r0, #1
 8016062:	4606      	mov	r6, r0
 8016064:	d1d6      	bne.n	8016014 <_svfiprintf_r+0x174>
 8016066:	89ab      	ldrh	r3, [r5, #12]
 8016068:	065b      	lsls	r3, r3, #25
 801606a:	f53f af2d 	bmi.w	8015ec8 <_svfiprintf_r+0x28>
 801606e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016070:	b01d      	add	sp, #116	; 0x74
 8016072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016076:	ab03      	add	r3, sp, #12
 8016078:	9300      	str	r3, [sp, #0]
 801607a:	462a      	mov	r2, r5
 801607c:	4b05      	ldr	r3, [pc, #20]	; (8016094 <_svfiprintf_r+0x1f4>)
 801607e:	a904      	add	r1, sp, #16
 8016080:	4638      	mov	r0, r7
 8016082:	f7fd fb15 	bl	80136b0 <_printf_i>
 8016086:	e7eb      	b.n	8016060 <_svfiprintf_r+0x1c0>
 8016088:	08018274 	.word	0x08018274
 801608c:	0801827e 	.word	0x0801827e
 8016090:	08013169 	.word	0x08013169
 8016094:	08015ded 	.word	0x08015ded
 8016098:	0801827a 	.word	0x0801827a

0801609c <__sfputc_r>:
 801609c:	6893      	ldr	r3, [r2, #8]
 801609e:	3b01      	subs	r3, #1
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	b410      	push	{r4}
 80160a4:	6093      	str	r3, [r2, #8]
 80160a6:	da08      	bge.n	80160ba <__sfputc_r+0x1e>
 80160a8:	6994      	ldr	r4, [r2, #24]
 80160aa:	42a3      	cmp	r3, r4
 80160ac:	db01      	blt.n	80160b2 <__sfputc_r+0x16>
 80160ae:	290a      	cmp	r1, #10
 80160b0:	d103      	bne.n	80160ba <__sfputc_r+0x1e>
 80160b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160b6:	f7fd bdb0 	b.w	8013c1a <__swbuf_r>
 80160ba:	6813      	ldr	r3, [r2, #0]
 80160bc:	1c58      	adds	r0, r3, #1
 80160be:	6010      	str	r0, [r2, #0]
 80160c0:	7019      	strb	r1, [r3, #0]
 80160c2:	4608      	mov	r0, r1
 80160c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80160c8:	4770      	bx	lr

080160ca <__sfputs_r>:
 80160ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80160cc:	4606      	mov	r6, r0
 80160ce:	460f      	mov	r7, r1
 80160d0:	4614      	mov	r4, r2
 80160d2:	18d5      	adds	r5, r2, r3
 80160d4:	42ac      	cmp	r4, r5
 80160d6:	d101      	bne.n	80160dc <__sfputs_r+0x12>
 80160d8:	2000      	movs	r0, #0
 80160da:	e007      	b.n	80160ec <__sfputs_r+0x22>
 80160dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80160e0:	463a      	mov	r2, r7
 80160e2:	4630      	mov	r0, r6
 80160e4:	f7ff ffda 	bl	801609c <__sfputc_r>
 80160e8:	1c43      	adds	r3, r0, #1
 80160ea:	d1f3      	bne.n	80160d4 <__sfputs_r+0xa>
 80160ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080160f0 <_vfiprintf_r>:
 80160f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f4:	460d      	mov	r5, r1
 80160f6:	b09d      	sub	sp, #116	; 0x74
 80160f8:	4614      	mov	r4, r2
 80160fa:	4698      	mov	r8, r3
 80160fc:	4606      	mov	r6, r0
 80160fe:	b118      	cbz	r0, 8016108 <_vfiprintf_r+0x18>
 8016100:	6a03      	ldr	r3, [r0, #32]
 8016102:	b90b      	cbnz	r3, 8016108 <_vfiprintf_r+0x18>
 8016104:	f7fd fc82 	bl	8013a0c <__sinit>
 8016108:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801610a:	07d9      	lsls	r1, r3, #31
 801610c:	d405      	bmi.n	801611a <_vfiprintf_r+0x2a>
 801610e:	89ab      	ldrh	r3, [r5, #12]
 8016110:	059a      	lsls	r2, r3, #22
 8016112:	d402      	bmi.n	801611a <_vfiprintf_r+0x2a>
 8016114:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016116:	f7fd feb0 	bl	8013e7a <__retarget_lock_acquire_recursive>
 801611a:	89ab      	ldrh	r3, [r5, #12]
 801611c:	071b      	lsls	r3, r3, #28
 801611e:	d501      	bpl.n	8016124 <_vfiprintf_r+0x34>
 8016120:	692b      	ldr	r3, [r5, #16]
 8016122:	b99b      	cbnz	r3, 801614c <_vfiprintf_r+0x5c>
 8016124:	4629      	mov	r1, r5
 8016126:	4630      	mov	r0, r6
 8016128:	f7fd fdb4 	bl	8013c94 <__swsetup_r>
 801612c:	b170      	cbz	r0, 801614c <_vfiprintf_r+0x5c>
 801612e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016130:	07dc      	lsls	r4, r3, #31
 8016132:	d504      	bpl.n	801613e <_vfiprintf_r+0x4e>
 8016134:	f04f 30ff 	mov.w	r0, #4294967295
 8016138:	b01d      	add	sp, #116	; 0x74
 801613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801613e:	89ab      	ldrh	r3, [r5, #12]
 8016140:	0598      	lsls	r0, r3, #22
 8016142:	d4f7      	bmi.n	8016134 <_vfiprintf_r+0x44>
 8016144:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016146:	f7fd fe99 	bl	8013e7c <__retarget_lock_release_recursive>
 801614a:	e7f3      	b.n	8016134 <_vfiprintf_r+0x44>
 801614c:	2300      	movs	r3, #0
 801614e:	9309      	str	r3, [sp, #36]	; 0x24
 8016150:	2320      	movs	r3, #32
 8016152:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016156:	f8cd 800c 	str.w	r8, [sp, #12]
 801615a:	2330      	movs	r3, #48	; 0x30
 801615c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8016310 <_vfiprintf_r+0x220>
 8016160:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016164:	f04f 0901 	mov.w	r9, #1
 8016168:	4623      	mov	r3, r4
 801616a:	469a      	mov	sl, r3
 801616c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016170:	b10a      	cbz	r2, 8016176 <_vfiprintf_r+0x86>
 8016172:	2a25      	cmp	r2, #37	; 0x25
 8016174:	d1f9      	bne.n	801616a <_vfiprintf_r+0x7a>
 8016176:	ebba 0b04 	subs.w	fp, sl, r4
 801617a:	d00b      	beq.n	8016194 <_vfiprintf_r+0xa4>
 801617c:	465b      	mov	r3, fp
 801617e:	4622      	mov	r2, r4
 8016180:	4629      	mov	r1, r5
 8016182:	4630      	mov	r0, r6
 8016184:	f7ff ffa1 	bl	80160ca <__sfputs_r>
 8016188:	3001      	adds	r0, #1
 801618a:	f000 80a9 	beq.w	80162e0 <_vfiprintf_r+0x1f0>
 801618e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016190:	445a      	add	r2, fp
 8016192:	9209      	str	r2, [sp, #36]	; 0x24
 8016194:	f89a 3000 	ldrb.w	r3, [sl]
 8016198:	2b00      	cmp	r3, #0
 801619a:	f000 80a1 	beq.w	80162e0 <_vfiprintf_r+0x1f0>
 801619e:	2300      	movs	r3, #0
 80161a0:	f04f 32ff 	mov.w	r2, #4294967295
 80161a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80161a8:	f10a 0a01 	add.w	sl, sl, #1
 80161ac:	9304      	str	r3, [sp, #16]
 80161ae:	9307      	str	r3, [sp, #28]
 80161b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80161b4:	931a      	str	r3, [sp, #104]	; 0x68
 80161b6:	4654      	mov	r4, sl
 80161b8:	2205      	movs	r2, #5
 80161ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80161be:	4854      	ldr	r0, [pc, #336]	; (8016310 <_vfiprintf_r+0x220>)
 80161c0:	f7ea f806 	bl	80001d0 <memchr>
 80161c4:	9a04      	ldr	r2, [sp, #16]
 80161c6:	b9d8      	cbnz	r0, 8016200 <_vfiprintf_r+0x110>
 80161c8:	06d1      	lsls	r1, r2, #27
 80161ca:	bf44      	itt	mi
 80161cc:	2320      	movmi	r3, #32
 80161ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161d2:	0713      	lsls	r3, r2, #28
 80161d4:	bf44      	itt	mi
 80161d6:	232b      	movmi	r3, #43	; 0x2b
 80161d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80161dc:	f89a 3000 	ldrb.w	r3, [sl]
 80161e0:	2b2a      	cmp	r3, #42	; 0x2a
 80161e2:	d015      	beq.n	8016210 <_vfiprintf_r+0x120>
 80161e4:	9a07      	ldr	r2, [sp, #28]
 80161e6:	4654      	mov	r4, sl
 80161e8:	2000      	movs	r0, #0
 80161ea:	f04f 0c0a 	mov.w	ip, #10
 80161ee:	4621      	mov	r1, r4
 80161f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80161f4:	3b30      	subs	r3, #48	; 0x30
 80161f6:	2b09      	cmp	r3, #9
 80161f8:	d94d      	bls.n	8016296 <_vfiprintf_r+0x1a6>
 80161fa:	b1b0      	cbz	r0, 801622a <_vfiprintf_r+0x13a>
 80161fc:	9207      	str	r2, [sp, #28]
 80161fe:	e014      	b.n	801622a <_vfiprintf_r+0x13a>
 8016200:	eba0 0308 	sub.w	r3, r0, r8
 8016204:	fa09 f303 	lsl.w	r3, r9, r3
 8016208:	4313      	orrs	r3, r2
 801620a:	9304      	str	r3, [sp, #16]
 801620c:	46a2      	mov	sl, r4
 801620e:	e7d2      	b.n	80161b6 <_vfiprintf_r+0xc6>
 8016210:	9b03      	ldr	r3, [sp, #12]
 8016212:	1d19      	adds	r1, r3, #4
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	9103      	str	r1, [sp, #12]
 8016218:	2b00      	cmp	r3, #0
 801621a:	bfbb      	ittet	lt
 801621c:	425b      	neglt	r3, r3
 801621e:	f042 0202 	orrlt.w	r2, r2, #2
 8016222:	9307      	strge	r3, [sp, #28]
 8016224:	9307      	strlt	r3, [sp, #28]
 8016226:	bfb8      	it	lt
 8016228:	9204      	strlt	r2, [sp, #16]
 801622a:	7823      	ldrb	r3, [r4, #0]
 801622c:	2b2e      	cmp	r3, #46	; 0x2e
 801622e:	d10c      	bne.n	801624a <_vfiprintf_r+0x15a>
 8016230:	7863      	ldrb	r3, [r4, #1]
 8016232:	2b2a      	cmp	r3, #42	; 0x2a
 8016234:	d134      	bne.n	80162a0 <_vfiprintf_r+0x1b0>
 8016236:	9b03      	ldr	r3, [sp, #12]
 8016238:	1d1a      	adds	r2, r3, #4
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	9203      	str	r2, [sp, #12]
 801623e:	2b00      	cmp	r3, #0
 8016240:	bfb8      	it	lt
 8016242:	f04f 33ff 	movlt.w	r3, #4294967295
 8016246:	3402      	adds	r4, #2
 8016248:	9305      	str	r3, [sp, #20]
 801624a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8016320 <_vfiprintf_r+0x230>
 801624e:	7821      	ldrb	r1, [r4, #0]
 8016250:	2203      	movs	r2, #3
 8016252:	4650      	mov	r0, sl
 8016254:	f7e9 ffbc 	bl	80001d0 <memchr>
 8016258:	b138      	cbz	r0, 801626a <_vfiprintf_r+0x17a>
 801625a:	9b04      	ldr	r3, [sp, #16]
 801625c:	eba0 000a 	sub.w	r0, r0, sl
 8016260:	2240      	movs	r2, #64	; 0x40
 8016262:	4082      	lsls	r2, r0
 8016264:	4313      	orrs	r3, r2
 8016266:	3401      	adds	r4, #1
 8016268:	9304      	str	r3, [sp, #16]
 801626a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801626e:	4829      	ldr	r0, [pc, #164]	; (8016314 <_vfiprintf_r+0x224>)
 8016270:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016274:	2206      	movs	r2, #6
 8016276:	f7e9 ffab 	bl	80001d0 <memchr>
 801627a:	2800      	cmp	r0, #0
 801627c:	d03f      	beq.n	80162fe <_vfiprintf_r+0x20e>
 801627e:	4b26      	ldr	r3, [pc, #152]	; (8016318 <_vfiprintf_r+0x228>)
 8016280:	bb1b      	cbnz	r3, 80162ca <_vfiprintf_r+0x1da>
 8016282:	9b03      	ldr	r3, [sp, #12]
 8016284:	3307      	adds	r3, #7
 8016286:	f023 0307 	bic.w	r3, r3, #7
 801628a:	3308      	adds	r3, #8
 801628c:	9303      	str	r3, [sp, #12]
 801628e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016290:	443b      	add	r3, r7
 8016292:	9309      	str	r3, [sp, #36]	; 0x24
 8016294:	e768      	b.n	8016168 <_vfiprintf_r+0x78>
 8016296:	fb0c 3202 	mla	r2, ip, r2, r3
 801629a:	460c      	mov	r4, r1
 801629c:	2001      	movs	r0, #1
 801629e:	e7a6      	b.n	80161ee <_vfiprintf_r+0xfe>
 80162a0:	2300      	movs	r3, #0
 80162a2:	3401      	adds	r4, #1
 80162a4:	9305      	str	r3, [sp, #20]
 80162a6:	4619      	mov	r1, r3
 80162a8:	f04f 0c0a 	mov.w	ip, #10
 80162ac:	4620      	mov	r0, r4
 80162ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80162b2:	3a30      	subs	r2, #48	; 0x30
 80162b4:	2a09      	cmp	r2, #9
 80162b6:	d903      	bls.n	80162c0 <_vfiprintf_r+0x1d0>
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d0c6      	beq.n	801624a <_vfiprintf_r+0x15a>
 80162bc:	9105      	str	r1, [sp, #20]
 80162be:	e7c4      	b.n	801624a <_vfiprintf_r+0x15a>
 80162c0:	fb0c 2101 	mla	r1, ip, r1, r2
 80162c4:	4604      	mov	r4, r0
 80162c6:	2301      	movs	r3, #1
 80162c8:	e7f0      	b.n	80162ac <_vfiprintf_r+0x1bc>
 80162ca:	ab03      	add	r3, sp, #12
 80162cc:	9300      	str	r3, [sp, #0]
 80162ce:	462a      	mov	r2, r5
 80162d0:	4b12      	ldr	r3, [pc, #72]	; (801631c <_vfiprintf_r+0x22c>)
 80162d2:	a904      	add	r1, sp, #16
 80162d4:	4630      	mov	r0, r6
 80162d6:	f7fc ff47 	bl	8013168 <_printf_float>
 80162da:	4607      	mov	r7, r0
 80162dc:	1c78      	adds	r0, r7, #1
 80162de:	d1d6      	bne.n	801628e <_vfiprintf_r+0x19e>
 80162e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80162e2:	07d9      	lsls	r1, r3, #31
 80162e4:	d405      	bmi.n	80162f2 <_vfiprintf_r+0x202>
 80162e6:	89ab      	ldrh	r3, [r5, #12]
 80162e8:	059a      	lsls	r2, r3, #22
 80162ea:	d402      	bmi.n	80162f2 <_vfiprintf_r+0x202>
 80162ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80162ee:	f7fd fdc5 	bl	8013e7c <__retarget_lock_release_recursive>
 80162f2:	89ab      	ldrh	r3, [r5, #12]
 80162f4:	065b      	lsls	r3, r3, #25
 80162f6:	f53f af1d 	bmi.w	8016134 <_vfiprintf_r+0x44>
 80162fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80162fc:	e71c      	b.n	8016138 <_vfiprintf_r+0x48>
 80162fe:	ab03      	add	r3, sp, #12
 8016300:	9300      	str	r3, [sp, #0]
 8016302:	462a      	mov	r2, r5
 8016304:	4b05      	ldr	r3, [pc, #20]	; (801631c <_vfiprintf_r+0x22c>)
 8016306:	a904      	add	r1, sp, #16
 8016308:	4630      	mov	r0, r6
 801630a:	f7fd f9d1 	bl	80136b0 <_printf_i>
 801630e:	e7e4      	b.n	80162da <_vfiprintf_r+0x1ea>
 8016310:	08018274 	.word	0x08018274
 8016314:	0801827e 	.word	0x0801827e
 8016318:	08013169 	.word	0x08013169
 801631c:	080160cb 	.word	0x080160cb
 8016320:	0801827a 	.word	0x0801827a

08016324 <__sflush_r>:
 8016324:	898a      	ldrh	r2, [r1, #12]
 8016326:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801632a:	4605      	mov	r5, r0
 801632c:	0710      	lsls	r0, r2, #28
 801632e:	460c      	mov	r4, r1
 8016330:	d458      	bmi.n	80163e4 <__sflush_r+0xc0>
 8016332:	684b      	ldr	r3, [r1, #4]
 8016334:	2b00      	cmp	r3, #0
 8016336:	dc05      	bgt.n	8016344 <__sflush_r+0x20>
 8016338:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801633a:	2b00      	cmp	r3, #0
 801633c:	dc02      	bgt.n	8016344 <__sflush_r+0x20>
 801633e:	2000      	movs	r0, #0
 8016340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016344:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016346:	2e00      	cmp	r6, #0
 8016348:	d0f9      	beq.n	801633e <__sflush_r+0x1a>
 801634a:	2300      	movs	r3, #0
 801634c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016350:	682f      	ldr	r7, [r5, #0]
 8016352:	6a21      	ldr	r1, [r4, #32]
 8016354:	602b      	str	r3, [r5, #0]
 8016356:	d032      	beq.n	80163be <__sflush_r+0x9a>
 8016358:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801635a:	89a3      	ldrh	r3, [r4, #12]
 801635c:	075a      	lsls	r2, r3, #29
 801635e:	d505      	bpl.n	801636c <__sflush_r+0x48>
 8016360:	6863      	ldr	r3, [r4, #4]
 8016362:	1ac0      	subs	r0, r0, r3
 8016364:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016366:	b10b      	cbz	r3, 801636c <__sflush_r+0x48>
 8016368:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801636a:	1ac0      	subs	r0, r0, r3
 801636c:	2300      	movs	r3, #0
 801636e:	4602      	mov	r2, r0
 8016370:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016372:	6a21      	ldr	r1, [r4, #32]
 8016374:	4628      	mov	r0, r5
 8016376:	47b0      	blx	r6
 8016378:	1c43      	adds	r3, r0, #1
 801637a:	89a3      	ldrh	r3, [r4, #12]
 801637c:	d106      	bne.n	801638c <__sflush_r+0x68>
 801637e:	6829      	ldr	r1, [r5, #0]
 8016380:	291d      	cmp	r1, #29
 8016382:	d82b      	bhi.n	80163dc <__sflush_r+0xb8>
 8016384:	4a29      	ldr	r2, [pc, #164]	; (801642c <__sflush_r+0x108>)
 8016386:	410a      	asrs	r2, r1
 8016388:	07d6      	lsls	r6, r2, #31
 801638a:	d427      	bmi.n	80163dc <__sflush_r+0xb8>
 801638c:	2200      	movs	r2, #0
 801638e:	6062      	str	r2, [r4, #4]
 8016390:	04d9      	lsls	r1, r3, #19
 8016392:	6922      	ldr	r2, [r4, #16]
 8016394:	6022      	str	r2, [r4, #0]
 8016396:	d504      	bpl.n	80163a2 <__sflush_r+0x7e>
 8016398:	1c42      	adds	r2, r0, #1
 801639a:	d101      	bne.n	80163a0 <__sflush_r+0x7c>
 801639c:	682b      	ldr	r3, [r5, #0]
 801639e:	b903      	cbnz	r3, 80163a2 <__sflush_r+0x7e>
 80163a0:	6560      	str	r0, [r4, #84]	; 0x54
 80163a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80163a4:	602f      	str	r7, [r5, #0]
 80163a6:	2900      	cmp	r1, #0
 80163a8:	d0c9      	beq.n	801633e <__sflush_r+0x1a>
 80163aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80163ae:	4299      	cmp	r1, r3
 80163b0:	d002      	beq.n	80163b8 <__sflush_r+0x94>
 80163b2:	4628      	mov	r0, r5
 80163b4:	f7fe fbf6 	bl	8014ba4 <_free_r>
 80163b8:	2000      	movs	r0, #0
 80163ba:	6360      	str	r0, [r4, #52]	; 0x34
 80163bc:	e7c0      	b.n	8016340 <__sflush_r+0x1c>
 80163be:	2301      	movs	r3, #1
 80163c0:	4628      	mov	r0, r5
 80163c2:	47b0      	blx	r6
 80163c4:	1c41      	adds	r1, r0, #1
 80163c6:	d1c8      	bne.n	801635a <__sflush_r+0x36>
 80163c8:	682b      	ldr	r3, [r5, #0]
 80163ca:	2b00      	cmp	r3, #0
 80163cc:	d0c5      	beq.n	801635a <__sflush_r+0x36>
 80163ce:	2b1d      	cmp	r3, #29
 80163d0:	d001      	beq.n	80163d6 <__sflush_r+0xb2>
 80163d2:	2b16      	cmp	r3, #22
 80163d4:	d101      	bne.n	80163da <__sflush_r+0xb6>
 80163d6:	602f      	str	r7, [r5, #0]
 80163d8:	e7b1      	b.n	801633e <__sflush_r+0x1a>
 80163da:	89a3      	ldrh	r3, [r4, #12]
 80163dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80163e0:	81a3      	strh	r3, [r4, #12]
 80163e2:	e7ad      	b.n	8016340 <__sflush_r+0x1c>
 80163e4:	690f      	ldr	r7, [r1, #16]
 80163e6:	2f00      	cmp	r7, #0
 80163e8:	d0a9      	beq.n	801633e <__sflush_r+0x1a>
 80163ea:	0793      	lsls	r3, r2, #30
 80163ec:	680e      	ldr	r6, [r1, #0]
 80163ee:	bf08      	it	eq
 80163f0:	694b      	ldreq	r3, [r1, #20]
 80163f2:	600f      	str	r7, [r1, #0]
 80163f4:	bf18      	it	ne
 80163f6:	2300      	movne	r3, #0
 80163f8:	eba6 0807 	sub.w	r8, r6, r7
 80163fc:	608b      	str	r3, [r1, #8]
 80163fe:	f1b8 0f00 	cmp.w	r8, #0
 8016402:	dd9c      	ble.n	801633e <__sflush_r+0x1a>
 8016404:	6a21      	ldr	r1, [r4, #32]
 8016406:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016408:	4643      	mov	r3, r8
 801640a:	463a      	mov	r2, r7
 801640c:	4628      	mov	r0, r5
 801640e:	47b0      	blx	r6
 8016410:	2800      	cmp	r0, #0
 8016412:	dc06      	bgt.n	8016422 <__sflush_r+0xfe>
 8016414:	89a3      	ldrh	r3, [r4, #12]
 8016416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801641a:	81a3      	strh	r3, [r4, #12]
 801641c:	f04f 30ff 	mov.w	r0, #4294967295
 8016420:	e78e      	b.n	8016340 <__sflush_r+0x1c>
 8016422:	4407      	add	r7, r0
 8016424:	eba8 0800 	sub.w	r8, r8, r0
 8016428:	e7e9      	b.n	80163fe <__sflush_r+0xda>
 801642a:	bf00      	nop
 801642c:	dfbffffe 	.word	0xdfbffffe

08016430 <_fflush_r>:
 8016430:	b538      	push	{r3, r4, r5, lr}
 8016432:	690b      	ldr	r3, [r1, #16]
 8016434:	4605      	mov	r5, r0
 8016436:	460c      	mov	r4, r1
 8016438:	b913      	cbnz	r3, 8016440 <_fflush_r+0x10>
 801643a:	2500      	movs	r5, #0
 801643c:	4628      	mov	r0, r5
 801643e:	bd38      	pop	{r3, r4, r5, pc}
 8016440:	b118      	cbz	r0, 801644a <_fflush_r+0x1a>
 8016442:	6a03      	ldr	r3, [r0, #32]
 8016444:	b90b      	cbnz	r3, 801644a <_fflush_r+0x1a>
 8016446:	f7fd fae1 	bl	8013a0c <__sinit>
 801644a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d0f3      	beq.n	801643a <_fflush_r+0xa>
 8016452:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016454:	07d0      	lsls	r0, r2, #31
 8016456:	d404      	bmi.n	8016462 <_fflush_r+0x32>
 8016458:	0599      	lsls	r1, r3, #22
 801645a:	d402      	bmi.n	8016462 <_fflush_r+0x32>
 801645c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801645e:	f7fd fd0c 	bl	8013e7a <__retarget_lock_acquire_recursive>
 8016462:	4628      	mov	r0, r5
 8016464:	4621      	mov	r1, r4
 8016466:	f7ff ff5d 	bl	8016324 <__sflush_r>
 801646a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801646c:	07da      	lsls	r2, r3, #31
 801646e:	4605      	mov	r5, r0
 8016470:	d4e4      	bmi.n	801643c <_fflush_r+0xc>
 8016472:	89a3      	ldrh	r3, [r4, #12]
 8016474:	059b      	lsls	r3, r3, #22
 8016476:	d4e1      	bmi.n	801643c <_fflush_r+0xc>
 8016478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801647a:	f7fd fcff 	bl	8013e7c <__retarget_lock_release_recursive>
 801647e:	e7dd      	b.n	801643c <_fflush_r+0xc>

08016480 <__swhatbuf_r>:
 8016480:	b570      	push	{r4, r5, r6, lr}
 8016482:	460c      	mov	r4, r1
 8016484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016488:	2900      	cmp	r1, #0
 801648a:	b096      	sub	sp, #88	; 0x58
 801648c:	4615      	mov	r5, r2
 801648e:	461e      	mov	r6, r3
 8016490:	da0d      	bge.n	80164ae <__swhatbuf_r+0x2e>
 8016492:	89a3      	ldrh	r3, [r4, #12]
 8016494:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016498:	f04f 0100 	mov.w	r1, #0
 801649c:	bf0c      	ite	eq
 801649e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80164a2:	2340      	movne	r3, #64	; 0x40
 80164a4:	2000      	movs	r0, #0
 80164a6:	6031      	str	r1, [r6, #0]
 80164a8:	602b      	str	r3, [r5, #0]
 80164aa:	b016      	add	sp, #88	; 0x58
 80164ac:	bd70      	pop	{r4, r5, r6, pc}
 80164ae:	466a      	mov	r2, sp
 80164b0:	f000 f862 	bl	8016578 <_fstat_r>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	dbec      	blt.n	8016492 <__swhatbuf_r+0x12>
 80164b8:	9901      	ldr	r1, [sp, #4]
 80164ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80164be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80164c2:	4259      	negs	r1, r3
 80164c4:	4159      	adcs	r1, r3
 80164c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80164ca:	e7eb      	b.n	80164a4 <__swhatbuf_r+0x24>

080164cc <__smakebuf_r>:
 80164cc:	898b      	ldrh	r3, [r1, #12]
 80164ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80164d0:	079d      	lsls	r5, r3, #30
 80164d2:	4606      	mov	r6, r0
 80164d4:	460c      	mov	r4, r1
 80164d6:	d507      	bpl.n	80164e8 <__smakebuf_r+0x1c>
 80164d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80164dc:	6023      	str	r3, [r4, #0]
 80164de:	6123      	str	r3, [r4, #16]
 80164e0:	2301      	movs	r3, #1
 80164e2:	6163      	str	r3, [r4, #20]
 80164e4:	b002      	add	sp, #8
 80164e6:	bd70      	pop	{r4, r5, r6, pc}
 80164e8:	ab01      	add	r3, sp, #4
 80164ea:	466a      	mov	r2, sp
 80164ec:	f7ff ffc8 	bl	8016480 <__swhatbuf_r>
 80164f0:	9900      	ldr	r1, [sp, #0]
 80164f2:	4605      	mov	r5, r0
 80164f4:	4630      	mov	r0, r6
 80164f6:	f7fe ff21 	bl	801533c <_malloc_r>
 80164fa:	b948      	cbnz	r0, 8016510 <__smakebuf_r+0x44>
 80164fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016500:	059a      	lsls	r2, r3, #22
 8016502:	d4ef      	bmi.n	80164e4 <__smakebuf_r+0x18>
 8016504:	f023 0303 	bic.w	r3, r3, #3
 8016508:	f043 0302 	orr.w	r3, r3, #2
 801650c:	81a3      	strh	r3, [r4, #12]
 801650e:	e7e3      	b.n	80164d8 <__smakebuf_r+0xc>
 8016510:	89a3      	ldrh	r3, [r4, #12]
 8016512:	6020      	str	r0, [r4, #0]
 8016514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016518:	81a3      	strh	r3, [r4, #12]
 801651a:	9b00      	ldr	r3, [sp, #0]
 801651c:	6163      	str	r3, [r4, #20]
 801651e:	9b01      	ldr	r3, [sp, #4]
 8016520:	6120      	str	r0, [r4, #16]
 8016522:	b15b      	cbz	r3, 801653c <__smakebuf_r+0x70>
 8016524:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016528:	4630      	mov	r0, r6
 801652a:	f000 f837 	bl	801659c <_isatty_r>
 801652e:	b128      	cbz	r0, 801653c <__smakebuf_r+0x70>
 8016530:	89a3      	ldrh	r3, [r4, #12]
 8016532:	f023 0303 	bic.w	r3, r3, #3
 8016536:	f043 0301 	orr.w	r3, r3, #1
 801653a:	81a3      	strh	r3, [r4, #12]
 801653c:	89a3      	ldrh	r3, [r4, #12]
 801653e:	431d      	orrs	r5, r3
 8016540:	81a5      	strh	r5, [r4, #12]
 8016542:	e7cf      	b.n	80164e4 <__smakebuf_r+0x18>

08016544 <memmove>:
 8016544:	4288      	cmp	r0, r1
 8016546:	b510      	push	{r4, lr}
 8016548:	eb01 0402 	add.w	r4, r1, r2
 801654c:	d902      	bls.n	8016554 <memmove+0x10>
 801654e:	4284      	cmp	r4, r0
 8016550:	4623      	mov	r3, r4
 8016552:	d807      	bhi.n	8016564 <memmove+0x20>
 8016554:	1e43      	subs	r3, r0, #1
 8016556:	42a1      	cmp	r1, r4
 8016558:	d008      	beq.n	801656c <memmove+0x28>
 801655a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801655e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016562:	e7f8      	b.n	8016556 <memmove+0x12>
 8016564:	4402      	add	r2, r0
 8016566:	4601      	mov	r1, r0
 8016568:	428a      	cmp	r2, r1
 801656a:	d100      	bne.n	801656e <memmove+0x2a>
 801656c:	bd10      	pop	{r4, pc}
 801656e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016576:	e7f7      	b.n	8016568 <memmove+0x24>

08016578 <_fstat_r>:
 8016578:	b538      	push	{r3, r4, r5, lr}
 801657a:	4d07      	ldr	r5, [pc, #28]	; (8016598 <_fstat_r+0x20>)
 801657c:	2300      	movs	r3, #0
 801657e:	4604      	mov	r4, r0
 8016580:	4608      	mov	r0, r1
 8016582:	4611      	mov	r1, r2
 8016584:	602b      	str	r3, [r5, #0]
 8016586:	f7ef f924 	bl	80057d2 <_fstat>
 801658a:	1c43      	adds	r3, r0, #1
 801658c:	d102      	bne.n	8016594 <_fstat_r+0x1c>
 801658e:	682b      	ldr	r3, [r5, #0]
 8016590:	b103      	cbz	r3, 8016594 <_fstat_r+0x1c>
 8016592:	6023      	str	r3, [r4, #0]
 8016594:	bd38      	pop	{r3, r4, r5, pc}
 8016596:	bf00      	nop
 8016598:	20001590 	.word	0x20001590

0801659c <_isatty_r>:
 801659c:	b538      	push	{r3, r4, r5, lr}
 801659e:	4d06      	ldr	r5, [pc, #24]	; (80165b8 <_isatty_r+0x1c>)
 80165a0:	2300      	movs	r3, #0
 80165a2:	4604      	mov	r4, r0
 80165a4:	4608      	mov	r0, r1
 80165a6:	602b      	str	r3, [r5, #0]
 80165a8:	f7ef f923 	bl	80057f2 <_isatty>
 80165ac:	1c43      	adds	r3, r0, #1
 80165ae:	d102      	bne.n	80165b6 <_isatty_r+0x1a>
 80165b0:	682b      	ldr	r3, [r5, #0]
 80165b2:	b103      	cbz	r3, 80165b6 <_isatty_r+0x1a>
 80165b4:	6023      	str	r3, [r4, #0]
 80165b6:	bd38      	pop	{r3, r4, r5, pc}
 80165b8:	20001590 	.word	0x20001590

080165bc <_sbrk_r>:
 80165bc:	b538      	push	{r3, r4, r5, lr}
 80165be:	4d06      	ldr	r5, [pc, #24]	; (80165d8 <_sbrk_r+0x1c>)
 80165c0:	2300      	movs	r3, #0
 80165c2:	4604      	mov	r4, r0
 80165c4:	4608      	mov	r0, r1
 80165c6:	602b      	str	r3, [r5, #0]
 80165c8:	f7ef f92c 	bl	8005824 <_sbrk>
 80165cc:	1c43      	adds	r3, r0, #1
 80165ce:	d102      	bne.n	80165d6 <_sbrk_r+0x1a>
 80165d0:	682b      	ldr	r3, [r5, #0]
 80165d2:	b103      	cbz	r3, 80165d6 <_sbrk_r+0x1a>
 80165d4:	6023      	str	r3, [r4, #0]
 80165d6:	bd38      	pop	{r3, r4, r5, pc}
 80165d8:	20001590 	.word	0x20001590

080165dc <__assert_func>:
 80165dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80165de:	4614      	mov	r4, r2
 80165e0:	461a      	mov	r2, r3
 80165e2:	4b09      	ldr	r3, [pc, #36]	; (8016608 <__assert_func+0x2c>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	4605      	mov	r5, r0
 80165e8:	68d8      	ldr	r0, [r3, #12]
 80165ea:	b14c      	cbz	r4, 8016600 <__assert_func+0x24>
 80165ec:	4b07      	ldr	r3, [pc, #28]	; (801660c <__assert_func+0x30>)
 80165ee:	9100      	str	r1, [sp, #0]
 80165f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80165f4:	4906      	ldr	r1, [pc, #24]	; (8016610 <__assert_func+0x34>)
 80165f6:	462b      	mov	r3, r5
 80165f8:	f000 f854 	bl	80166a4 <fiprintf>
 80165fc:	f000 f864 	bl	80166c8 <abort>
 8016600:	4b04      	ldr	r3, [pc, #16]	; (8016614 <__assert_func+0x38>)
 8016602:	461c      	mov	r4, r3
 8016604:	e7f3      	b.n	80165ee <__assert_func+0x12>
 8016606:	bf00      	nop
 8016608:	2000021c 	.word	0x2000021c
 801660c:	08018285 	.word	0x08018285
 8016610:	08018292 	.word	0x08018292
 8016614:	080182c0 	.word	0x080182c0

08016618 <_calloc_r>:
 8016618:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801661a:	fba1 2402 	umull	r2, r4, r1, r2
 801661e:	b94c      	cbnz	r4, 8016634 <_calloc_r+0x1c>
 8016620:	4611      	mov	r1, r2
 8016622:	9201      	str	r2, [sp, #4]
 8016624:	f7fe fe8a 	bl	801533c <_malloc_r>
 8016628:	9a01      	ldr	r2, [sp, #4]
 801662a:	4605      	mov	r5, r0
 801662c:	b930      	cbnz	r0, 801663c <_calloc_r+0x24>
 801662e:	4628      	mov	r0, r5
 8016630:	b003      	add	sp, #12
 8016632:	bd30      	pop	{r4, r5, pc}
 8016634:	220c      	movs	r2, #12
 8016636:	6002      	str	r2, [r0, #0]
 8016638:	2500      	movs	r5, #0
 801663a:	e7f8      	b.n	801662e <_calloc_r+0x16>
 801663c:	4621      	mov	r1, r4
 801663e:	f7fd fb81 	bl	8013d44 <memset>
 8016642:	e7f4      	b.n	801662e <_calloc_r+0x16>

08016644 <_realloc_r>:
 8016644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016648:	4680      	mov	r8, r0
 801664a:	4614      	mov	r4, r2
 801664c:	460e      	mov	r6, r1
 801664e:	b921      	cbnz	r1, 801665a <_realloc_r+0x16>
 8016650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016654:	4611      	mov	r1, r2
 8016656:	f7fe be71 	b.w	801533c <_malloc_r>
 801665a:	b92a      	cbnz	r2, 8016668 <_realloc_r+0x24>
 801665c:	f7fe faa2 	bl	8014ba4 <_free_r>
 8016660:	4625      	mov	r5, r4
 8016662:	4628      	mov	r0, r5
 8016664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016668:	f000 f835 	bl	80166d6 <_malloc_usable_size_r>
 801666c:	4284      	cmp	r4, r0
 801666e:	4607      	mov	r7, r0
 8016670:	d802      	bhi.n	8016678 <_realloc_r+0x34>
 8016672:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8016676:	d812      	bhi.n	801669e <_realloc_r+0x5a>
 8016678:	4621      	mov	r1, r4
 801667a:	4640      	mov	r0, r8
 801667c:	f7fe fe5e 	bl	801533c <_malloc_r>
 8016680:	4605      	mov	r5, r0
 8016682:	2800      	cmp	r0, #0
 8016684:	d0ed      	beq.n	8016662 <_realloc_r+0x1e>
 8016686:	42bc      	cmp	r4, r7
 8016688:	4622      	mov	r2, r4
 801668a:	4631      	mov	r1, r6
 801668c:	bf28      	it	cs
 801668e:	463a      	movcs	r2, r7
 8016690:	f7fd fbf5 	bl	8013e7e <memcpy>
 8016694:	4631      	mov	r1, r6
 8016696:	4640      	mov	r0, r8
 8016698:	f7fe fa84 	bl	8014ba4 <_free_r>
 801669c:	e7e1      	b.n	8016662 <_realloc_r+0x1e>
 801669e:	4635      	mov	r5, r6
 80166a0:	e7df      	b.n	8016662 <_realloc_r+0x1e>
	...

080166a4 <fiprintf>:
 80166a4:	b40e      	push	{r1, r2, r3}
 80166a6:	b503      	push	{r0, r1, lr}
 80166a8:	4601      	mov	r1, r0
 80166aa:	ab03      	add	r3, sp, #12
 80166ac:	4805      	ldr	r0, [pc, #20]	; (80166c4 <fiprintf+0x20>)
 80166ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80166b2:	6800      	ldr	r0, [r0, #0]
 80166b4:	9301      	str	r3, [sp, #4]
 80166b6:	f7ff fd1b 	bl	80160f0 <_vfiprintf_r>
 80166ba:	b002      	add	sp, #8
 80166bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80166c0:	b003      	add	sp, #12
 80166c2:	4770      	bx	lr
 80166c4:	2000021c 	.word	0x2000021c

080166c8 <abort>:
 80166c8:	b508      	push	{r3, lr}
 80166ca:	2006      	movs	r0, #6
 80166cc:	f000 f834 	bl	8016738 <raise>
 80166d0:	2001      	movs	r0, #1
 80166d2:	f7ef f82f 	bl	8005734 <_exit>

080166d6 <_malloc_usable_size_r>:
 80166d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80166da:	1f18      	subs	r0, r3, #4
 80166dc:	2b00      	cmp	r3, #0
 80166de:	bfbc      	itt	lt
 80166e0:	580b      	ldrlt	r3, [r1, r0]
 80166e2:	18c0      	addlt	r0, r0, r3
 80166e4:	4770      	bx	lr

080166e6 <_raise_r>:
 80166e6:	291f      	cmp	r1, #31
 80166e8:	b538      	push	{r3, r4, r5, lr}
 80166ea:	4604      	mov	r4, r0
 80166ec:	460d      	mov	r5, r1
 80166ee:	d904      	bls.n	80166fa <_raise_r+0x14>
 80166f0:	2316      	movs	r3, #22
 80166f2:	6003      	str	r3, [r0, #0]
 80166f4:	f04f 30ff 	mov.w	r0, #4294967295
 80166f8:	bd38      	pop	{r3, r4, r5, pc}
 80166fa:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80166fc:	b112      	cbz	r2, 8016704 <_raise_r+0x1e>
 80166fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016702:	b94b      	cbnz	r3, 8016718 <_raise_r+0x32>
 8016704:	4620      	mov	r0, r4
 8016706:	f000 f831 	bl	801676c <_getpid_r>
 801670a:	462a      	mov	r2, r5
 801670c:	4601      	mov	r1, r0
 801670e:	4620      	mov	r0, r4
 8016710:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016714:	f000 b818 	b.w	8016748 <_kill_r>
 8016718:	2b01      	cmp	r3, #1
 801671a:	d00a      	beq.n	8016732 <_raise_r+0x4c>
 801671c:	1c59      	adds	r1, r3, #1
 801671e:	d103      	bne.n	8016728 <_raise_r+0x42>
 8016720:	2316      	movs	r3, #22
 8016722:	6003      	str	r3, [r0, #0]
 8016724:	2001      	movs	r0, #1
 8016726:	e7e7      	b.n	80166f8 <_raise_r+0x12>
 8016728:	2400      	movs	r4, #0
 801672a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801672e:	4628      	mov	r0, r5
 8016730:	4798      	blx	r3
 8016732:	2000      	movs	r0, #0
 8016734:	e7e0      	b.n	80166f8 <_raise_r+0x12>
	...

08016738 <raise>:
 8016738:	4b02      	ldr	r3, [pc, #8]	; (8016744 <raise+0xc>)
 801673a:	4601      	mov	r1, r0
 801673c:	6818      	ldr	r0, [r3, #0]
 801673e:	f7ff bfd2 	b.w	80166e6 <_raise_r>
 8016742:	bf00      	nop
 8016744:	2000021c 	.word	0x2000021c

08016748 <_kill_r>:
 8016748:	b538      	push	{r3, r4, r5, lr}
 801674a:	4d07      	ldr	r5, [pc, #28]	; (8016768 <_kill_r+0x20>)
 801674c:	2300      	movs	r3, #0
 801674e:	4604      	mov	r4, r0
 8016750:	4608      	mov	r0, r1
 8016752:	4611      	mov	r1, r2
 8016754:	602b      	str	r3, [r5, #0]
 8016756:	f7ee ffdd 	bl	8005714 <_kill>
 801675a:	1c43      	adds	r3, r0, #1
 801675c:	d102      	bne.n	8016764 <_kill_r+0x1c>
 801675e:	682b      	ldr	r3, [r5, #0]
 8016760:	b103      	cbz	r3, 8016764 <_kill_r+0x1c>
 8016762:	6023      	str	r3, [r4, #0]
 8016764:	bd38      	pop	{r3, r4, r5, pc}
 8016766:	bf00      	nop
 8016768:	20001590 	.word	0x20001590

0801676c <_getpid_r>:
 801676c:	f7ee bfca 	b.w	8005704 <_getpid>

08016770 <pow>:
 8016770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016772:	ed2d 8b02 	vpush	{d8}
 8016776:	eeb0 8a40 	vmov.f32	s16, s0
 801677a:	eef0 8a60 	vmov.f32	s17, s1
 801677e:	ec55 4b11 	vmov	r4, r5, d1
 8016782:	f000 f96d 	bl	8016a60 <__ieee754_pow>
 8016786:	4622      	mov	r2, r4
 8016788:	462b      	mov	r3, r5
 801678a:	4620      	mov	r0, r4
 801678c:	4629      	mov	r1, r5
 801678e:	ec57 6b10 	vmov	r6, r7, d0
 8016792:	f7ea f9cb 	bl	8000b2c <__aeabi_dcmpun>
 8016796:	2800      	cmp	r0, #0
 8016798:	d13b      	bne.n	8016812 <pow+0xa2>
 801679a:	ec51 0b18 	vmov	r0, r1, d8
 801679e:	2200      	movs	r2, #0
 80167a0:	2300      	movs	r3, #0
 80167a2:	f7ea f991 	bl	8000ac8 <__aeabi_dcmpeq>
 80167a6:	b1b8      	cbz	r0, 80167d8 <pow+0x68>
 80167a8:	2200      	movs	r2, #0
 80167aa:	2300      	movs	r3, #0
 80167ac:	4620      	mov	r0, r4
 80167ae:	4629      	mov	r1, r5
 80167b0:	f7ea f98a 	bl	8000ac8 <__aeabi_dcmpeq>
 80167b4:	2800      	cmp	r0, #0
 80167b6:	d146      	bne.n	8016846 <pow+0xd6>
 80167b8:	ec45 4b10 	vmov	d0, r4, r5
 80167bc:	f000 f866 	bl	801688c <finite>
 80167c0:	b338      	cbz	r0, 8016812 <pow+0xa2>
 80167c2:	2200      	movs	r2, #0
 80167c4:	2300      	movs	r3, #0
 80167c6:	4620      	mov	r0, r4
 80167c8:	4629      	mov	r1, r5
 80167ca:	f7ea f987 	bl	8000adc <__aeabi_dcmplt>
 80167ce:	b300      	cbz	r0, 8016812 <pow+0xa2>
 80167d0:	f7fd fb28 	bl	8013e24 <__errno>
 80167d4:	2322      	movs	r3, #34	; 0x22
 80167d6:	e01b      	b.n	8016810 <pow+0xa0>
 80167d8:	ec47 6b10 	vmov	d0, r6, r7
 80167dc:	f000 f856 	bl	801688c <finite>
 80167e0:	b9e0      	cbnz	r0, 801681c <pow+0xac>
 80167e2:	eeb0 0a48 	vmov.f32	s0, s16
 80167e6:	eef0 0a68 	vmov.f32	s1, s17
 80167ea:	f000 f84f 	bl	801688c <finite>
 80167ee:	b1a8      	cbz	r0, 801681c <pow+0xac>
 80167f0:	ec45 4b10 	vmov	d0, r4, r5
 80167f4:	f000 f84a 	bl	801688c <finite>
 80167f8:	b180      	cbz	r0, 801681c <pow+0xac>
 80167fa:	4632      	mov	r2, r6
 80167fc:	463b      	mov	r3, r7
 80167fe:	4630      	mov	r0, r6
 8016800:	4639      	mov	r1, r7
 8016802:	f7ea f993 	bl	8000b2c <__aeabi_dcmpun>
 8016806:	2800      	cmp	r0, #0
 8016808:	d0e2      	beq.n	80167d0 <pow+0x60>
 801680a:	f7fd fb0b 	bl	8013e24 <__errno>
 801680e:	2321      	movs	r3, #33	; 0x21
 8016810:	6003      	str	r3, [r0, #0]
 8016812:	ecbd 8b02 	vpop	{d8}
 8016816:	ec47 6b10 	vmov	d0, r6, r7
 801681a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801681c:	2200      	movs	r2, #0
 801681e:	2300      	movs	r3, #0
 8016820:	4630      	mov	r0, r6
 8016822:	4639      	mov	r1, r7
 8016824:	f7ea f950 	bl	8000ac8 <__aeabi_dcmpeq>
 8016828:	2800      	cmp	r0, #0
 801682a:	d0f2      	beq.n	8016812 <pow+0xa2>
 801682c:	eeb0 0a48 	vmov.f32	s0, s16
 8016830:	eef0 0a68 	vmov.f32	s1, s17
 8016834:	f000 f82a 	bl	801688c <finite>
 8016838:	2800      	cmp	r0, #0
 801683a:	d0ea      	beq.n	8016812 <pow+0xa2>
 801683c:	ec45 4b10 	vmov	d0, r4, r5
 8016840:	f000 f824 	bl	801688c <finite>
 8016844:	e7c3      	b.n	80167ce <pow+0x5e>
 8016846:	4f01      	ldr	r7, [pc, #4]	; (801684c <pow+0xdc>)
 8016848:	2600      	movs	r6, #0
 801684a:	e7e2      	b.n	8016812 <pow+0xa2>
 801684c:	3ff00000 	.word	0x3ff00000

08016850 <sqrtf>:
 8016850:	b508      	push	{r3, lr}
 8016852:	ed2d 8b02 	vpush	{d8}
 8016856:	eeb0 8a40 	vmov.f32	s16, s0
 801685a:	f000 f8fd 	bl	8016a58 <__ieee754_sqrtf>
 801685e:	eeb4 8a48 	vcmp.f32	s16, s16
 8016862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016866:	d60c      	bvs.n	8016882 <sqrtf+0x32>
 8016868:	eddf 8a07 	vldr	s17, [pc, #28]	; 8016888 <sqrtf+0x38>
 801686c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8016870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016874:	d505      	bpl.n	8016882 <sqrtf+0x32>
 8016876:	f7fd fad5 	bl	8013e24 <__errno>
 801687a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801687e:	2321      	movs	r3, #33	; 0x21
 8016880:	6003      	str	r3, [r0, #0]
 8016882:	ecbd 8b02 	vpop	{d8}
 8016886:	bd08      	pop	{r3, pc}
 8016888:	00000000 	.word	0x00000000

0801688c <finite>:
 801688c:	b082      	sub	sp, #8
 801688e:	ed8d 0b00 	vstr	d0, [sp]
 8016892:	9801      	ldr	r0, [sp, #4]
 8016894:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8016898:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801689c:	0fc0      	lsrs	r0, r0, #31
 801689e:	b002      	add	sp, #8
 80168a0:	4770      	bx	lr
	...

080168a4 <__ieee754_sqrt>:
 80168a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80168a8:	ec55 4b10 	vmov	r4, r5, d0
 80168ac:	4e67      	ldr	r6, [pc, #412]	; (8016a4c <__ieee754_sqrt+0x1a8>)
 80168ae:	43ae      	bics	r6, r5
 80168b0:	ee10 0a10 	vmov	r0, s0
 80168b4:	ee10 2a10 	vmov	r2, s0
 80168b8:	4629      	mov	r1, r5
 80168ba:	462b      	mov	r3, r5
 80168bc:	d10d      	bne.n	80168da <__ieee754_sqrt+0x36>
 80168be:	f7e9 fe9b 	bl	80005f8 <__aeabi_dmul>
 80168c2:	4602      	mov	r2, r0
 80168c4:	460b      	mov	r3, r1
 80168c6:	4620      	mov	r0, r4
 80168c8:	4629      	mov	r1, r5
 80168ca:	f7e9 fcdf 	bl	800028c <__adddf3>
 80168ce:	4604      	mov	r4, r0
 80168d0:	460d      	mov	r5, r1
 80168d2:	ec45 4b10 	vmov	d0, r4, r5
 80168d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168da:	2d00      	cmp	r5, #0
 80168dc:	dc0b      	bgt.n	80168f6 <__ieee754_sqrt+0x52>
 80168de:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80168e2:	4326      	orrs	r6, r4
 80168e4:	d0f5      	beq.n	80168d2 <__ieee754_sqrt+0x2e>
 80168e6:	b135      	cbz	r5, 80168f6 <__ieee754_sqrt+0x52>
 80168e8:	f7e9 fcce 	bl	8000288 <__aeabi_dsub>
 80168ec:	4602      	mov	r2, r0
 80168ee:	460b      	mov	r3, r1
 80168f0:	f7e9 ffac 	bl	800084c <__aeabi_ddiv>
 80168f4:	e7eb      	b.n	80168ce <__ieee754_sqrt+0x2a>
 80168f6:	1509      	asrs	r1, r1, #20
 80168f8:	f000 808d 	beq.w	8016a16 <__ieee754_sqrt+0x172>
 80168fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016900:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8016904:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016908:	07c9      	lsls	r1, r1, #31
 801690a:	bf5c      	itt	pl
 801690c:	005b      	lslpl	r3, r3, #1
 801690e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8016912:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8016916:	bf58      	it	pl
 8016918:	0052      	lslpl	r2, r2, #1
 801691a:	2500      	movs	r5, #0
 801691c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016920:	1076      	asrs	r6, r6, #1
 8016922:	0052      	lsls	r2, r2, #1
 8016924:	f04f 0e16 	mov.w	lr, #22
 8016928:	46ac      	mov	ip, r5
 801692a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801692e:	eb0c 0001 	add.w	r0, ip, r1
 8016932:	4298      	cmp	r0, r3
 8016934:	bfde      	ittt	le
 8016936:	1a1b      	suble	r3, r3, r0
 8016938:	eb00 0c01 	addle.w	ip, r0, r1
 801693c:	186d      	addle	r5, r5, r1
 801693e:	005b      	lsls	r3, r3, #1
 8016940:	f1be 0e01 	subs.w	lr, lr, #1
 8016944:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016948:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801694c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8016950:	d1ed      	bne.n	801692e <__ieee754_sqrt+0x8a>
 8016952:	4674      	mov	r4, lr
 8016954:	2720      	movs	r7, #32
 8016956:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801695a:	4563      	cmp	r3, ip
 801695c:	eb01 000e 	add.w	r0, r1, lr
 8016960:	dc02      	bgt.n	8016968 <__ieee754_sqrt+0xc4>
 8016962:	d113      	bne.n	801698c <__ieee754_sqrt+0xe8>
 8016964:	4290      	cmp	r0, r2
 8016966:	d811      	bhi.n	801698c <__ieee754_sqrt+0xe8>
 8016968:	2800      	cmp	r0, #0
 801696a:	eb00 0e01 	add.w	lr, r0, r1
 801696e:	da57      	bge.n	8016a20 <__ieee754_sqrt+0x17c>
 8016970:	f1be 0f00 	cmp.w	lr, #0
 8016974:	db54      	blt.n	8016a20 <__ieee754_sqrt+0x17c>
 8016976:	f10c 0801 	add.w	r8, ip, #1
 801697a:	eba3 030c 	sub.w	r3, r3, ip
 801697e:	4290      	cmp	r0, r2
 8016980:	bf88      	it	hi
 8016982:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8016986:	1a12      	subs	r2, r2, r0
 8016988:	440c      	add	r4, r1
 801698a:	46c4      	mov	ip, r8
 801698c:	005b      	lsls	r3, r3, #1
 801698e:	3f01      	subs	r7, #1
 8016990:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8016994:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8016998:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801699c:	d1dd      	bne.n	801695a <__ieee754_sqrt+0xb6>
 801699e:	4313      	orrs	r3, r2
 80169a0:	d01b      	beq.n	80169da <__ieee754_sqrt+0x136>
 80169a2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8016a50 <__ieee754_sqrt+0x1ac>
 80169a6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8016a54 <__ieee754_sqrt+0x1b0>
 80169aa:	e9da 0100 	ldrd	r0, r1, [sl]
 80169ae:	e9db 2300 	ldrd	r2, r3, [fp]
 80169b2:	f7e9 fc69 	bl	8000288 <__aeabi_dsub>
 80169b6:	e9da 8900 	ldrd	r8, r9, [sl]
 80169ba:	4602      	mov	r2, r0
 80169bc:	460b      	mov	r3, r1
 80169be:	4640      	mov	r0, r8
 80169c0:	4649      	mov	r1, r9
 80169c2:	f7ea f895 	bl	8000af0 <__aeabi_dcmple>
 80169c6:	b140      	cbz	r0, 80169da <__ieee754_sqrt+0x136>
 80169c8:	f1b4 3fff 	cmp.w	r4, #4294967295
 80169cc:	e9da 0100 	ldrd	r0, r1, [sl]
 80169d0:	e9db 2300 	ldrd	r2, r3, [fp]
 80169d4:	d126      	bne.n	8016a24 <__ieee754_sqrt+0x180>
 80169d6:	3501      	adds	r5, #1
 80169d8:	463c      	mov	r4, r7
 80169da:	106a      	asrs	r2, r5, #1
 80169dc:	0863      	lsrs	r3, r4, #1
 80169de:	07e9      	lsls	r1, r5, #31
 80169e0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80169e4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80169e8:	bf48      	it	mi
 80169ea:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80169ee:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80169f2:	461c      	mov	r4, r3
 80169f4:	e76d      	b.n	80168d2 <__ieee754_sqrt+0x2e>
 80169f6:	0ad3      	lsrs	r3, r2, #11
 80169f8:	3815      	subs	r0, #21
 80169fa:	0552      	lsls	r2, r2, #21
 80169fc:	2b00      	cmp	r3, #0
 80169fe:	d0fa      	beq.n	80169f6 <__ieee754_sqrt+0x152>
 8016a00:	02dc      	lsls	r4, r3, #11
 8016a02:	d50a      	bpl.n	8016a1a <__ieee754_sqrt+0x176>
 8016a04:	f1c1 0420 	rsb	r4, r1, #32
 8016a08:	fa22 f404 	lsr.w	r4, r2, r4
 8016a0c:	1e4d      	subs	r5, r1, #1
 8016a0e:	408a      	lsls	r2, r1
 8016a10:	4323      	orrs	r3, r4
 8016a12:	1b41      	subs	r1, r0, r5
 8016a14:	e772      	b.n	80168fc <__ieee754_sqrt+0x58>
 8016a16:	4608      	mov	r0, r1
 8016a18:	e7f0      	b.n	80169fc <__ieee754_sqrt+0x158>
 8016a1a:	005b      	lsls	r3, r3, #1
 8016a1c:	3101      	adds	r1, #1
 8016a1e:	e7ef      	b.n	8016a00 <__ieee754_sqrt+0x15c>
 8016a20:	46e0      	mov	r8, ip
 8016a22:	e7aa      	b.n	801697a <__ieee754_sqrt+0xd6>
 8016a24:	f7e9 fc32 	bl	800028c <__adddf3>
 8016a28:	e9da 8900 	ldrd	r8, r9, [sl]
 8016a2c:	4602      	mov	r2, r0
 8016a2e:	460b      	mov	r3, r1
 8016a30:	4640      	mov	r0, r8
 8016a32:	4649      	mov	r1, r9
 8016a34:	f7ea f852 	bl	8000adc <__aeabi_dcmplt>
 8016a38:	b120      	cbz	r0, 8016a44 <__ieee754_sqrt+0x1a0>
 8016a3a:	1ca0      	adds	r0, r4, #2
 8016a3c:	bf08      	it	eq
 8016a3e:	3501      	addeq	r5, #1
 8016a40:	3402      	adds	r4, #2
 8016a42:	e7ca      	b.n	80169da <__ieee754_sqrt+0x136>
 8016a44:	3401      	adds	r4, #1
 8016a46:	f024 0401 	bic.w	r4, r4, #1
 8016a4a:	e7c6      	b.n	80169da <__ieee754_sqrt+0x136>
 8016a4c:	7ff00000 	.word	0x7ff00000
 8016a50:	20000220 	.word	0x20000220
 8016a54:	20000228 	.word	0x20000228

08016a58 <__ieee754_sqrtf>:
 8016a58:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8016a5c:	4770      	bx	lr
	...

08016a60 <__ieee754_pow>:
 8016a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a64:	ed2d 8b06 	vpush	{d8-d10}
 8016a68:	b089      	sub	sp, #36	; 0x24
 8016a6a:	ed8d 1b00 	vstr	d1, [sp]
 8016a6e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016a72:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016a76:	ea58 0102 	orrs.w	r1, r8, r2
 8016a7a:	ec57 6b10 	vmov	r6, r7, d0
 8016a7e:	d115      	bne.n	8016aac <__ieee754_pow+0x4c>
 8016a80:	19b3      	adds	r3, r6, r6
 8016a82:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8016a86:	4152      	adcs	r2, r2
 8016a88:	4299      	cmp	r1, r3
 8016a8a:	4b89      	ldr	r3, [pc, #548]	; (8016cb0 <__ieee754_pow+0x250>)
 8016a8c:	4193      	sbcs	r3, r2
 8016a8e:	f080 84d1 	bcs.w	8017434 <__ieee754_pow+0x9d4>
 8016a92:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016a96:	4630      	mov	r0, r6
 8016a98:	4639      	mov	r1, r7
 8016a9a:	f7e9 fbf7 	bl	800028c <__adddf3>
 8016a9e:	ec41 0b10 	vmov	d0, r0, r1
 8016aa2:	b009      	add	sp, #36	; 0x24
 8016aa4:	ecbd 8b06 	vpop	{d8-d10}
 8016aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aac:	4b81      	ldr	r3, [pc, #516]	; (8016cb4 <__ieee754_pow+0x254>)
 8016aae:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016ab2:	429c      	cmp	r4, r3
 8016ab4:	ee10 aa10 	vmov	sl, s0
 8016ab8:	463d      	mov	r5, r7
 8016aba:	dc06      	bgt.n	8016aca <__ieee754_pow+0x6a>
 8016abc:	d101      	bne.n	8016ac2 <__ieee754_pow+0x62>
 8016abe:	2e00      	cmp	r6, #0
 8016ac0:	d1e7      	bne.n	8016a92 <__ieee754_pow+0x32>
 8016ac2:	4598      	cmp	r8, r3
 8016ac4:	dc01      	bgt.n	8016aca <__ieee754_pow+0x6a>
 8016ac6:	d10f      	bne.n	8016ae8 <__ieee754_pow+0x88>
 8016ac8:	b172      	cbz	r2, 8016ae8 <__ieee754_pow+0x88>
 8016aca:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8016ace:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8016ad2:	ea55 050a 	orrs.w	r5, r5, sl
 8016ad6:	d1dc      	bne.n	8016a92 <__ieee754_pow+0x32>
 8016ad8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016adc:	18db      	adds	r3, r3, r3
 8016ade:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8016ae2:	4152      	adcs	r2, r2
 8016ae4:	429d      	cmp	r5, r3
 8016ae6:	e7d0      	b.n	8016a8a <__ieee754_pow+0x2a>
 8016ae8:	2d00      	cmp	r5, #0
 8016aea:	da3b      	bge.n	8016b64 <__ieee754_pow+0x104>
 8016aec:	4b72      	ldr	r3, [pc, #456]	; (8016cb8 <__ieee754_pow+0x258>)
 8016aee:	4598      	cmp	r8, r3
 8016af0:	dc51      	bgt.n	8016b96 <__ieee754_pow+0x136>
 8016af2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016af6:	4598      	cmp	r8, r3
 8016af8:	f340 84ab 	ble.w	8017452 <__ieee754_pow+0x9f2>
 8016afc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016b00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016b04:	2b14      	cmp	r3, #20
 8016b06:	dd0f      	ble.n	8016b28 <__ieee754_pow+0xc8>
 8016b08:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016b0c:	fa22 f103 	lsr.w	r1, r2, r3
 8016b10:	fa01 f303 	lsl.w	r3, r1, r3
 8016b14:	4293      	cmp	r3, r2
 8016b16:	f040 849c 	bne.w	8017452 <__ieee754_pow+0x9f2>
 8016b1a:	f001 0101 	and.w	r1, r1, #1
 8016b1e:	f1c1 0302 	rsb	r3, r1, #2
 8016b22:	9304      	str	r3, [sp, #16]
 8016b24:	b182      	cbz	r2, 8016b48 <__ieee754_pow+0xe8>
 8016b26:	e05f      	b.n	8016be8 <__ieee754_pow+0x188>
 8016b28:	2a00      	cmp	r2, #0
 8016b2a:	d15b      	bne.n	8016be4 <__ieee754_pow+0x184>
 8016b2c:	f1c3 0314 	rsb	r3, r3, #20
 8016b30:	fa48 f103 	asr.w	r1, r8, r3
 8016b34:	fa01 f303 	lsl.w	r3, r1, r3
 8016b38:	4543      	cmp	r3, r8
 8016b3a:	f040 8487 	bne.w	801744c <__ieee754_pow+0x9ec>
 8016b3e:	f001 0101 	and.w	r1, r1, #1
 8016b42:	f1c1 0302 	rsb	r3, r1, #2
 8016b46:	9304      	str	r3, [sp, #16]
 8016b48:	4b5c      	ldr	r3, [pc, #368]	; (8016cbc <__ieee754_pow+0x25c>)
 8016b4a:	4598      	cmp	r8, r3
 8016b4c:	d132      	bne.n	8016bb4 <__ieee754_pow+0x154>
 8016b4e:	f1b9 0f00 	cmp.w	r9, #0
 8016b52:	f280 8477 	bge.w	8017444 <__ieee754_pow+0x9e4>
 8016b56:	4959      	ldr	r1, [pc, #356]	; (8016cbc <__ieee754_pow+0x25c>)
 8016b58:	4632      	mov	r2, r6
 8016b5a:	463b      	mov	r3, r7
 8016b5c:	2000      	movs	r0, #0
 8016b5e:	f7e9 fe75 	bl	800084c <__aeabi_ddiv>
 8016b62:	e79c      	b.n	8016a9e <__ieee754_pow+0x3e>
 8016b64:	2300      	movs	r3, #0
 8016b66:	9304      	str	r3, [sp, #16]
 8016b68:	2a00      	cmp	r2, #0
 8016b6a:	d13d      	bne.n	8016be8 <__ieee754_pow+0x188>
 8016b6c:	4b51      	ldr	r3, [pc, #324]	; (8016cb4 <__ieee754_pow+0x254>)
 8016b6e:	4598      	cmp	r8, r3
 8016b70:	d1ea      	bne.n	8016b48 <__ieee754_pow+0xe8>
 8016b72:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016b76:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016b7a:	ea53 030a 	orrs.w	r3, r3, sl
 8016b7e:	f000 8459 	beq.w	8017434 <__ieee754_pow+0x9d4>
 8016b82:	4b4f      	ldr	r3, [pc, #316]	; (8016cc0 <__ieee754_pow+0x260>)
 8016b84:	429c      	cmp	r4, r3
 8016b86:	dd08      	ble.n	8016b9a <__ieee754_pow+0x13a>
 8016b88:	f1b9 0f00 	cmp.w	r9, #0
 8016b8c:	f2c0 8456 	blt.w	801743c <__ieee754_pow+0x9dc>
 8016b90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016b94:	e783      	b.n	8016a9e <__ieee754_pow+0x3e>
 8016b96:	2302      	movs	r3, #2
 8016b98:	e7e5      	b.n	8016b66 <__ieee754_pow+0x106>
 8016b9a:	f1b9 0f00 	cmp.w	r9, #0
 8016b9e:	f04f 0000 	mov.w	r0, #0
 8016ba2:	f04f 0100 	mov.w	r1, #0
 8016ba6:	f6bf af7a 	bge.w	8016a9e <__ieee754_pow+0x3e>
 8016baa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016bae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016bb2:	e774      	b.n	8016a9e <__ieee754_pow+0x3e>
 8016bb4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016bb8:	d106      	bne.n	8016bc8 <__ieee754_pow+0x168>
 8016bba:	4632      	mov	r2, r6
 8016bbc:	463b      	mov	r3, r7
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	4639      	mov	r1, r7
 8016bc2:	f7e9 fd19 	bl	80005f8 <__aeabi_dmul>
 8016bc6:	e76a      	b.n	8016a9e <__ieee754_pow+0x3e>
 8016bc8:	4b3e      	ldr	r3, [pc, #248]	; (8016cc4 <__ieee754_pow+0x264>)
 8016bca:	4599      	cmp	r9, r3
 8016bcc:	d10c      	bne.n	8016be8 <__ieee754_pow+0x188>
 8016bce:	2d00      	cmp	r5, #0
 8016bd0:	db0a      	blt.n	8016be8 <__ieee754_pow+0x188>
 8016bd2:	ec47 6b10 	vmov	d0, r6, r7
 8016bd6:	b009      	add	sp, #36	; 0x24
 8016bd8:	ecbd 8b06 	vpop	{d8-d10}
 8016bdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016be0:	f7ff be60 	b.w	80168a4 <__ieee754_sqrt>
 8016be4:	2300      	movs	r3, #0
 8016be6:	9304      	str	r3, [sp, #16]
 8016be8:	ec47 6b10 	vmov	d0, r6, r7
 8016bec:	f000 fc62 	bl	80174b4 <fabs>
 8016bf0:	ec51 0b10 	vmov	r0, r1, d0
 8016bf4:	f1ba 0f00 	cmp.w	sl, #0
 8016bf8:	d129      	bne.n	8016c4e <__ieee754_pow+0x1ee>
 8016bfa:	b124      	cbz	r4, 8016c06 <__ieee754_pow+0x1a6>
 8016bfc:	4b2f      	ldr	r3, [pc, #188]	; (8016cbc <__ieee754_pow+0x25c>)
 8016bfe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016c02:	429a      	cmp	r2, r3
 8016c04:	d123      	bne.n	8016c4e <__ieee754_pow+0x1ee>
 8016c06:	f1b9 0f00 	cmp.w	r9, #0
 8016c0a:	da05      	bge.n	8016c18 <__ieee754_pow+0x1b8>
 8016c0c:	4602      	mov	r2, r0
 8016c0e:	460b      	mov	r3, r1
 8016c10:	2000      	movs	r0, #0
 8016c12:	492a      	ldr	r1, [pc, #168]	; (8016cbc <__ieee754_pow+0x25c>)
 8016c14:	f7e9 fe1a 	bl	800084c <__aeabi_ddiv>
 8016c18:	2d00      	cmp	r5, #0
 8016c1a:	f6bf af40 	bge.w	8016a9e <__ieee754_pow+0x3e>
 8016c1e:	9b04      	ldr	r3, [sp, #16]
 8016c20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016c24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016c28:	431c      	orrs	r4, r3
 8016c2a:	d108      	bne.n	8016c3e <__ieee754_pow+0x1de>
 8016c2c:	4602      	mov	r2, r0
 8016c2e:	460b      	mov	r3, r1
 8016c30:	4610      	mov	r0, r2
 8016c32:	4619      	mov	r1, r3
 8016c34:	f7e9 fb28 	bl	8000288 <__aeabi_dsub>
 8016c38:	4602      	mov	r2, r0
 8016c3a:	460b      	mov	r3, r1
 8016c3c:	e78f      	b.n	8016b5e <__ieee754_pow+0xfe>
 8016c3e:	9b04      	ldr	r3, [sp, #16]
 8016c40:	2b01      	cmp	r3, #1
 8016c42:	f47f af2c 	bne.w	8016a9e <__ieee754_pow+0x3e>
 8016c46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016c4a:	4619      	mov	r1, r3
 8016c4c:	e727      	b.n	8016a9e <__ieee754_pow+0x3e>
 8016c4e:	0feb      	lsrs	r3, r5, #31
 8016c50:	3b01      	subs	r3, #1
 8016c52:	9306      	str	r3, [sp, #24]
 8016c54:	9a06      	ldr	r2, [sp, #24]
 8016c56:	9b04      	ldr	r3, [sp, #16]
 8016c58:	4313      	orrs	r3, r2
 8016c5a:	d102      	bne.n	8016c62 <__ieee754_pow+0x202>
 8016c5c:	4632      	mov	r2, r6
 8016c5e:	463b      	mov	r3, r7
 8016c60:	e7e6      	b.n	8016c30 <__ieee754_pow+0x1d0>
 8016c62:	4b19      	ldr	r3, [pc, #100]	; (8016cc8 <__ieee754_pow+0x268>)
 8016c64:	4598      	cmp	r8, r3
 8016c66:	f340 80fb 	ble.w	8016e60 <__ieee754_pow+0x400>
 8016c6a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016c6e:	4598      	cmp	r8, r3
 8016c70:	4b13      	ldr	r3, [pc, #76]	; (8016cc0 <__ieee754_pow+0x260>)
 8016c72:	dd0c      	ble.n	8016c8e <__ieee754_pow+0x22e>
 8016c74:	429c      	cmp	r4, r3
 8016c76:	dc0f      	bgt.n	8016c98 <__ieee754_pow+0x238>
 8016c78:	f1b9 0f00 	cmp.w	r9, #0
 8016c7c:	da0f      	bge.n	8016c9e <__ieee754_pow+0x23e>
 8016c7e:	2000      	movs	r0, #0
 8016c80:	b009      	add	sp, #36	; 0x24
 8016c82:	ecbd 8b06 	vpop	{d8-d10}
 8016c86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c8a:	f000 bcc2 	b.w	8017612 <__math_oflow>
 8016c8e:	429c      	cmp	r4, r3
 8016c90:	dbf2      	blt.n	8016c78 <__ieee754_pow+0x218>
 8016c92:	4b0a      	ldr	r3, [pc, #40]	; (8016cbc <__ieee754_pow+0x25c>)
 8016c94:	429c      	cmp	r4, r3
 8016c96:	dd19      	ble.n	8016ccc <__ieee754_pow+0x26c>
 8016c98:	f1b9 0f00 	cmp.w	r9, #0
 8016c9c:	dcef      	bgt.n	8016c7e <__ieee754_pow+0x21e>
 8016c9e:	2000      	movs	r0, #0
 8016ca0:	b009      	add	sp, #36	; 0x24
 8016ca2:	ecbd 8b06 	vpop	{d8-d10}
 8016ca6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016caa:	f000 bca9 	b.w	8017600 <__math_uflow>
 8016cae:	bf00      	nop
 8016cb0:	fff00000 	.word	0xfff00000
 8016cb4:	7ff00000 	.word	0x7ff00000
 8016cb8:	433fffff 	.word	0x433fffff
 8016cbc:	3ff00000 	.word	0x3ff00000
 8016cc0:	3fefffff 	.word	0x3fefffff
 8016cc4:	3fe00000 	.word	0x3fe00000
 8016cc8:	41e00000 	.word	0x41e00000
 8016ccc:	4b60      	ldr	r3, [pc, #384]	; (8016e50 <__ieee754_pow+0x3f0>)
 8016cce:	2200      	movs	r2, #0
 8016cd0:	f7e9 fada 	bl	8000288 <__aeabi_dsub>
 8016cd4:	a354      	add	r3, pc, #336	; (adr r3, 8016e28 <__ieee754_pow+0x3c8>)
 8016cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016cda:	4604      	mov	r4, r0
 8016cdc:	460d      	mov	r5, r1
 8016cde:	f7e9 fc8b 	bl	80005f8 <__aeabi_dmul>
 8016ce2:	a353      	add	r3, pc, #332	; (adr r3, 8016e30 <__ieee754_pow+0x3d0>)
 8016ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ce8:	4606      	mov	r6, r0
 8016cea:	460f      	mov	r7, r1
 8016cec:	4620      	mov	r0, r4
 8016cee:	4629      	mov	r1, r5
 8016cf0:	f7e9 fc82 	bl	80005f8 <__aeabi_dmul>
 8016cf4:	4b57      	ldr	r3, [pc, #348]	; (8016e54 <__ieee754_pow+0x3f4>)
 8016cf6:	4682      	mov	sl, r0
 8016cf8:	468b      	mov	fp, r1
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	4620      	mov	r0, r4
 8016cfe:	4629      	mov	r1, r5
 8016d00:	f7e9 fc7a 	bl	80005f8 <__aeabi_dmul>
 8016d04:	4602      	mov	r2, r0
 8016d06:	460b      	mov	r3, r1
 8016d08:	a14b      	add	r1, pc, #300	; (adr r1, 8016e38 <__ieee754_pow+0x3d8>)
 8016d0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016d0e:	f7e9 fabb 	bl	8000288 <__aeabi_dsub>
 8016d12:	4622      	mov	r2, r4
 8016d14:	462b      	mov	r3, r5
 8016d16:	f7e9 fc6f 	bl	80005f8 <__aeabi_dmul>
 8016d1a:	4602      	mov	r2, r0
 8016d1c:	460b      	mov	r3, r1
 8016d1e:	2000      	movs	r0, #0
 8016d20:	494d      	ldr	r1, [pc, #308]	; (8016e58 <__ieee754_pow+0x3f8>)
 8016d22:	f7e9 fab1 	bl	8000288 <__aeabi_dsub>
 8016d26:	4622      	mov	r2, r4
 8016d28:	4680      	mov	r8, r0
 8016d2a:	4689      	mov	r9, r1
 8016d2c:	462b      	mov	r3, r5
 8016d2e:	4620      	mov	r0, r4
 8016d30:	4629      	mov	r1, r5
 8016d32:	f7e9 fc61 	bl	80005f8 <__aeabi_dmul>
 8016d36:	4602      	mov	r2, r0
 8016d38:	460b      	mov	r3, r1
 8016d3a:	4640      	mov	r0, r8
 8016d3c:	4649      	mov	r1, r9
 8016d3e:	f7e9 fc5b 	bl	80005f8 <__aeabi_dmul>
 8016d42:	a33f      	add	r3, pc, #252	; (adr r3, 8016e40 <__ieee754_pow+0x3e0>)
 8016d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d48:	f7e9 fc56 	bl	80005f8 <__aeabi_dmul>
 8016d4c:	4602      	mov	r2, r0
 8016d4e:	460b      	mov	r3, r1
 8016d50:	4650      	mov	r0, sl
 8016d52:	4659      	mov	r1, fp
 8016d54:	f7e9 fa98 	bl	8000288 <__aeabi_dsub>
 8016d58:	4602      	mov	r2, r0
 8016d5a:	460b      	mov	r3, r1
 8016d5c:	4680      	mov	r8, r0
 8016d5e:	4689      	mov	r9, r1
 8016d60:	4630      	mov	r0, r6
 8016d62:	4639      	mov	r1, r7
 8016d64:	f7e9 fa92 	bl	800028c <__adddf3>
 8016d68:	2000      	movs	r0, #0
 8016d6a:	4632      	mov	r2, r6
 8016d6c:	463b      	mov	r3, r7
 8016d6e:	4604      	mov	r4, r0
 8016d70:	460d      	mov	r5, r1
 8016d72:	f7e9 fa89 	bl	8000288 <__aeabi_dsub>
 8016d76:	4602      	mov	r2, r0
 8016d78:	460b      	mov	r3, r1
 8016d7a:	4640      	mov	r0, r8
 8016d7c:	4649      	mov	r1, r9
 8016d7e:	f7e9 fa83 	bl	8000288 <__aeabi_dsub>
 8016d82:	9b04      	ldr	r3, [sp, #16]
 8016d84:	9a06      	ldr	r2, [sp, #24]
 8016d86:	3b01      	subs	r3, #1
 8016d88:	4313      	orrs	r3, r2
 8016d8a:	4682      	mov	sl, r0
 8016d8c:	468b      	mov	fp, r1
 8016d8e:	f040 81e7 	bne.w	8017160 <__ieee754_pow+0x700>
 8016d92:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8016e48 <__ieee754_pow+0x3e8>
 8016d96:	eeb0 8a47 	vmov.f32	s16, s14
 8016d9a:	eef0 8a67 	vmov.f32	s17, s15
 8016d9e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016da2:	2600      	movs	r6, #0
 8016da4:	4632      	mov	r2, r6
 8016da6:	463b      	mov	r3, r7
 8016da8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016dac:	f7e9 fa6c 	bl	8000288 <__aeabi_dsub>
 8016db0:	4622      	mov	r2, r4
 8016db2:	462b      	mov	r3, r5
 8016db4:	f7e9 fc20 	bl	80005f8 <__aeabi_dmul>
 8016db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016dbc:	4680      	mov	r8, r0
 8016dbe:	4689      	mov	r9, r1
 8016dc0:	4650      	mov	r0, sl
 8016dc2:	4659      	mov	r1, fp
 8016dc4:	f7e9 fc18 	bl	80005f8 <__aeabi_dmul>
 8016dc8:	4602      	mov	r2, r0
 8016dca:	460b      	mov	r3, r1
 8016dcc:	4640      	mov	r0, r8
 8016dce:	4649      	mov	r1, r9
 8016dd0:	f7e9 fa5c 	bl	800028c <__adddf3>
 8016dd4:	4632      	mov	r2, r6
 8016dd6:	463b      	mov	r3, r7
 8016dd8:	4680      	mov	r8, r0
 8016dda:	4689      	mov	r9, r1
 8016ddc:	4620      	mov	r0, r4
 8016dde:	4629      	mov	r1, r5
 8016de0:	f7e9 fc0a 	bl	80005f8 <__aeabi_dmul>
 8016de4:	460b      	mov	r3, r1
 8016de6:	4604      	mov	r4, r0
 8016de8:	460d      	mov	r5, r1
 8016dea:	4602      	mov	r2, r0
 8016dec:	4649      	mov	r1, r9
 8016dee:	4640      	mov	r0, r8
 8016df0:	f7e9 fa4c 	bl	800028c <__adddf3>
 8016df4:	4b19      	ldr	r3, [pc, #100]	; (8016e5c <__ieee754_pow+0x3fc>)
 8016df6:	4299      	cmp	r1, r3
 8016df8:	ec45 4b19 	vmov	d9, r4, r5
 8016dfc:	4606      	mov	r6, r0
 8016dfe:	460f      	mov	r7, r1
 8016e00:	468b      	mov	fp, r1
 8016e02:	f340 82f0 	ble.w	80173e6 <__ieee754_pow+0x986>
 8016e06:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016e0a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016e0e:	4303      	orrs	r3, r0
 8016e10:	f000 81e4 	beq.w	80171dc <__ieee754_pow+0x77c>
 8016e14:	ec51 0b18 	vmov	r0, r1, d8
 8016e18:	2200      	movs	r2, #0
 8016e1a:	2300      	movs	r3, #0
 8016e1c:	f7e9 fe5e 	bl	8000adc <__aeabi_dcmplt>
 8016e20:	3800      	subs	r0, #0
 8016e22:	bf18      	it	ne
 8016e24:	2001      	movne	r0, #1
 8016e26:	e72b      	b.n	8016c80 <__ieee754_pow+0x220>
 8016e28:	60000000 	.word	0x60000000
 8016e2c:	3ff71547 	.word	0x3ff71547
 8016e30:	f85ddf44 	.word	0xf85ddf44
 8016e34:	3e54ae0b 	.word	0x3e54ae0b
 8016e38:	55555555 	.word	0x55555555
 8016e3c:	3fd55555 	.word	0x3fd55555
 8016e40:	652b82fe 	.word	0x652b82fe
 8016e44:	3ff71547 	.word	0x3ff71547
 8016e48:	00000000 	.word	0x00000000
 8016e4c:	bff00000 	.word	0xbff00000
 8016e50:	3ff00000 	.word	0x3ff00000
 8016e54:	3fd00000 	.word	0x3fd00000
 8016e58:	3fe00000 	.word	0x3fe00000
 8016e5c:	408fffff 	.word	0x408fffff
 8016e60:	4bd5      	ldr	r3, [pc, #852]	; (80171b8 <__ieee754_pow+0x758>)
 8016e62:	402b      	ands	r3, r5
 8016e64:	2200      	movs	r2, #0
 8016e66:	b92b      	cbnz	r3, 8016e74 <__ieee754_pow+0x414>
 8016e68:	4bd4      	ldr	r3, [pc, #848]	; (80171bc <__ieee754_pow+0x75c>)
 8016e6a:	f7e9 fbc5 	bl	80005f8 <__aeabi_dmul>
 8016e6e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8016e72:	460c      	mov	r4, r1
 8016e74:	1523      	asrs	r3, r4, #20
 8016e76:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016e7a:	4413      	add	r3, r2
 8016e7c:	9305      	str	r3, [sp, #20]
 8016e7e:	4bd0      	ldr	r3, [pc, #832]	; (80171c0 <__ieee754_pow+0x760>)
 8016e80:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8016e84:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8016e88:	429c      	cmp	r4, r3
 8016e8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8016e8e:	dd08      	ble.n	8016ea2 <__ieee754_pow+0x442>
 8016e90:	4bcc      	ldr	r3, [pc, #816]	; (80171c4 <__ieee754_pow+0x764>)
 8016e92:	429c      	cmp	r4, r3
 8016e94:	f340 8162 	ble.w	801715c <__ieee754_pow+0x6fc>
 8016e98:	9b05      	ldr	r3, [sp, #20]
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	9305      	str	r3, [sp, #20]
 8016e9e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8016ea2:	2400      	movs	r4, #0
 8016ea4:	00e3      	lsls	r3, r4, #3
 8016ea6:	9307      	str	r3, [sp, #28]
 8016ea8:	4bc7      	ldr	r3, [pc, #796]	; (80171c8 <__ieee754_pow+0x768>)
 8016eaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8016eae:	ed93 7b00 	vldr	d7, [r3]
 8016eb2:	4629      	mov	r1, r5
 8016eb4:	ec53 2b17 	vmov	r2, r3, d7
 8016eb8:	eeb0 9a47 	vmov.f32	s18, s14
 8016ebc:	eef0 9a67 	vmov.f32	s19, s15
 8016ec0:	4682      	mov	sl, r0
 8016ec2:	f7e9 f9e1 	bl	8000288 <__aeabi_dsub>
 8016ec6:	4652      	mov	r2, sl
 8016ec8:	4606      	mov	r6, r0
 8016eca:	460f      	mov	r7, r1
 8016ecc:	462b      	mov	r3, r5
 8016ece:	ec51 0b19 	vmov	r0, r1, d9
 8016ed2:	f7e9 f9db 	bl	800028c <__adddf3>
 8016ed6:	4602      	mov	r2, r0
 8016ed8:	460b      	mov	r3, r1
 8016eda:	2000      	movs	r0, #0
 8016edc:	49bb      	ldr	r1, [pc, #748]	; (80171cc <__ieee754_pow+0x76c>)
 8016ede:	f7e9 fcb5 	bl	800084c <__aeabi_ddiv>
 8016ee2:	ec41 0b1a 	vmov	d10, r0, r1
 8016ee6:	4602      	mov	r2, r0
 8016ee8:	460b      	mov	r3, r1
 8016eea:	4630      	mov	r0, r6
 8016eec:	4639      	mov	r1, r7
 8016eee:	f7e9 fb83 	bl	80005f8 <__aeabi_dmul>
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ef8:	9302      	str	r3, [sp, #8]
 8016efa:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8016efe:	46ab      	mov	fp, r5
 8016f00:	106d      	asrs	r5, r5, #1
 8016f02:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8016f06:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8016f0a:	ec41 0b18 	vmov	d8, r0, r1
 8016f0e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8016f12:	2200      	movs	r2, #0
 8016f14:	4640      	mov	r0, r8
 8016f16:	4649      	mov	r1, r9
 8016f18:	4614      	mov	r4, r2
 8016f1a:	461d      	mov	r5, r3
 8016f1c:	f7e9 fb6c 	bl	80005f8 <__aeabi_dmul>
 8016f20:	4602      	mov	r2, r0
 8016f22:	460b      	mov	r3, r1
 8016f24:	4630      	mov	r0, r6
 8016f26:	4639      	mov	r1, r7
 8016f28:	f7e9 f9ae 	bl	8000288 <__aeabi_dsub>
 8016f2c:	ec53 2b19 	vmov	r2, r3, d9
 8016f30:	4606      	mov	r6, r0
 8016f32:	460f      	mov	r7, r1
 8016f34:	4620      	mov	r0, r4
 8016f36:	4629      	mov	r1, r5
 8016f38:	f7e9 f9a6 	bl	8000288 <__aeabi_dsub>
 8016f3c:	4602      	mov	r2, r0
 8016f3e:	460b      	mov	r3, r1
 8016f40:	4650      	mov	r0, sl
 8016f42:	4659      	mov	r1, fp
 8016f44:	f7e9 f9a0 	bl	8000288 <__aeabi_dsub>
 8016f48:	4642      	mov	r2, r8
 8016f4a:	464b      	mov	r3, r9
 8016f4c:	f7e9 fb54 	bl	80005f8 <__aeabi_dmul>
 8016f50:	4602      	mov	r2, r0
 8016f52:	460b      	mov	r3, r1
 8016f54:	4630      	mov	r0, r6
 8016f56:	4639      	mov	r1, r7
 8016f58:	f7e9 f996 	bl	8000288 <__aeabi_dsub>
 8016f5c:	ec53 2b1a 	vmov	r2, r3, d10
 8016f60:	f7e9 fb4a 	bl	80005f8 <__aeabi_dmul>
 8016f64:	ec53 2b18 	vmov	r2, r3, d8
 8016f68:	ec41 0b19 	vmov	d9, r0, r1
 8016f6c:	ec51 0b18 	vmov	r0, r1, d8
 8016f70:	f7e9 fb42 	bl	80005f8 <__aeabi_dmul>
 8016f74:	a37c      	add	r3, pc, #496	; (adr r3, 8017168 <__ieee754_pow+0x708>)
 8016f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f7a:	4604      	mov	r4, r0
 8016f7c:	460d      	mov	r5, r1
 8016f7e:	f7e9 fb3b 	bl	80005f8 <__aeabi_dmul>
 8016f82:	a37b      	add	r3, pc, #492	; (adr r3, 8017170 <__ieee754_pow+0x710>)
 8016f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f88:	f7e9 f980 	bl	800028c <__adddf3>
 8016f8c:	4622      	mov	r2, r4
 8016f8e:	462b      	mov	r3, r5
 8016f90:	f7e9 fb32 	bl	80005f8 <__aeabi_dmul>
 8016f94:	a378      	add	r3, pc, #480	; (adr r3, 8017178 <__ieee754_pow+0x718>)
 8016f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f9a:	f7e9 f977 	bl	800028c <__adddf3>
 8016f9e:	4622      	mov	r2, r4
 8016fa0:	462b      	mov	r3, r5
 8016fa2:	f7e9 fb29 	bl	80005f8 <__aeabi_dmul>
 8016fa6:	a376      	add	r3, pc, #472	; (adr r3, 8017180 <__ieee754_pow+0x720>)
 8016fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fac:	f7e9 f96e 	bl	800028c <__adddf3>
 8016fb0:	4622      	mov	r2, r4
 8016fb2:	462b      	mov	r3, r5
 8016fb4:	f7e9 fb20 	bl	80005f8 <__aeabi_dmul>
 8016fb8:	a373      	add	r3, pc, #460	; (adr r3, 8017188 <__ieee754_pow+0x728>)
 8016fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fbe:	f7e9 f965 	bl	800028c <__adddf3>
 8016fc2:	4622      	mov	r2, r4
 8016fc4:	462b      	mov	r3, r5
 8016fc6:	f7e9 fb17 	bl	80005f8 <__aeabi_dmul>
 8016fca:	a371      	add	r3, pc, #452	; (adr r3, 8017190 <__ieee754_pow+0x730>)
 8016fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fd0:	f7e9 f95c 	bl	800028c <__adddf3>
 8016fd4:	4622      	mov	r2, r4
 8016fd6:	4606      	mov	r6, r0
 8016fd8:	460f      	mov	r7, r1
 8016fda:	462b      	mov	r3, r5
 8016fdc:	4620      	mov	r0, r4
 8016fde:	4629      	mov	r1, r5
 8016fe0:	f7e9 fb0a 	bl	80005f8 <__aeabi_dmul>
 8016fe4:	4602      	mov	r2, r0
 8016fe6:	460b      	mov	r3, r1
 8016fe8:	4630      	mov	r0, r6
 8016fea:	4639      	mov	r1, r7
 8016fec:	f7e9 fb04 	bl	80005f8 <__aeabi_dmul>
 8016ff0:	4642      	mov	r2, r8
 8016ff2:	4604      	mov	r4, r0
 8016ff4:	460d      	mov	r5, r1
 8016ff6:	464b      	mov	r3, r9
 8016ff8:	ec51 0b18 	vmov	r0, r1, d8
 8016ffc:	f7e9 f946 	bl	800028c <__adddf3>
 8017000:	ec53 2b19 	vmov	r2, r3, d9
 8017004:	f7e9 faf8 	bl	80005f8 <__aeabi_dmul>
 8017008:	4622      	mov	r2, r4
 801700a:	462b      	mov	r3, r5
 801700c:	f7e9 f93e 	bl	800028c <__adddf3>
 8017010:	4642      	mov	r2, r8
 8017012:	4682      	mov	sl, r0
 8017014:	468b      	mov	fp, r1
 8017016:	464b      	mov	r3, r9
 8017018:	4640      	mov	r0, r8
 801701a:	4649      	mov	r1, r9
 801701c:	f7e9 faec 	bl	80005f8 <__aeabi_dmul>
 8017020:	4b6b      	ldr	r3, [pc, #428]	; (80171d0 <__ieee754_pow+0x770>)
 8017022:	2200      	movs	r2, #0
 8017024:	4606      	mov	r6, r0
 8017026:	460f      	mov	r7, r1
 8017028:	f7e9 f930 	bl	800028c <__adddf3>
 801702c:	4652      	mov	r2, sl
 801702e:	465b      	mov	r3, fp
 8017030:	f7e9 f92c 	bl	800028c <__adddf3>
 8017034:	2000      	movs	r0, #0
 8017036:	4604      	mov	r4, r0
 8017038:	460d      	mov	r5, r1
 801703a:	4602      	mov	r2, r0
 801703c:	460b      	mov	r3, r1
 801703e:	4640      	mov	r0, r8
 8017040:	4649      	mov	r1, r9
 8017042:	f7e9 fad9 	bl	80005f8 <__aeabi_dmul>
 8017046:	4b62      	ldr	r3, [pc, #392]	; (80171d0 <__ieee754_pow+0x770>)
 8017048:	4680      	mov	r8, r0
 801704a:	4689      	mov	r9, r1
 801704c:	2200      	movs	r2, #0
 801704e:	4620      	mov	r0, r4
 8017050:	4629      	mov	r1, r5
 8017052:	f7e9 f919 	bl	8000288 <__aeabi_dsub>
 8017056:	4632      	mov	r2, r6
 8017058:	463b      	mov	r3, r7
 801705a:	f7e9 f915 	bl	8000288 <__aeabi_dsub>
 801705e:	4602      	mov	r2, r0
 8017060:	460b      	mov	r3, r1
 8017062:	4650      	mov	r0, sl
 8017064:	4659      	mov	r1, fp
 8017066:	f7e9 f90f 	bl	8000288 <__aeabi_dsub>
 801706a:	ec53 2b18 	vmov	r2, r3, d8
 801706e:	f7e9 fac3 	bl	80005f8 <__aeabi_dmul>
 8017072:	4622      	mov	r2, r4
 8017074:	4606      	mov	r6, r0
 8017076:	460f      	mov	r7, r1
 8017078:	462b      	mov	r3, r5
 801707a:	ec51 0b19 	vmov	r0, r1, d9
 801707e:	f7e9 fabb 	bl	80005f8 <__aeabi_dmul>
 8017082:	4602      	mov	r2, r0
 8017084:	460b      	mov	r3, r1
 8017086:	4630      	mov	r0, r6
 8017088:	4639      	mov	r1, r7
 801708a:	f7e9 f8ff 	bl	800028c <__adddf3>
 801708e:	4606      	mov	r6, r0
 8017090:	460f      	mov	r7, r1
 8017092:	4602      	mov	r2, r0
 8017094:	460b      	mov	r3, r1
 8017096:	4640      	mov	r0, r8
 8017098:	4649      	mov	r1, r9
 801709a:	f7e9 f8f7 	bl	800028c <__adddf3>
 801709e:	a33e      	add	r3, pc, #248	; (adr r3, 8017198 <__ieee754_pow+0x738>)
 80170a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a4:	2000      	movs	r0, #0
 80170a6:	4604      	mov	r4, r0
 80170a8:	460d      	mov	r5, r1
 80170aa:	f7e9 faa5 	bl	80005f8 <__aeabi_dmul>
 80170ae:	4642      	mov	r2, r8
 80170b0:	ec41 0b18 	vmov	d8, r0, r1
 80170b4:	464b      	mov	r3, r9
 80170b6:	4620      	mov	r0, r4
 80170b8:	4629      	mov	r1, r5
 80170ba:	f7e9 f8e5 	bl	8000288 <__aeabi_dsub>
 80170be:	4602      	mov	r2, r0
 80170c0:	460b      	mov	r3, r1
 80170c2:	4630      	mov	r0, r6
 80170c4:	4639      	mov	r1, r7
 80170c6:	f7e9 f8df 	bl	8000288 <__aeabi_dsub>
 80170ca:	a335      	add	r3, pc, #212	; (adr r3, 80171a0 <__ieee754_pow+0x740>)
 80170cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d0:	f7e9 fa92 	bl	80005f8 <__aeabi_dmul>
 80170d4:	a334      	add	r3, pc, #208	; (adr r3, 80171a8 <__ieee754_pow+0x748>)
 80170d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170da:	4606      	mov	r6, r0
 80170dc:	460f      	mov	r7, r1
 80170de:	4620      	mov	r0, r4
 80170e0:	4629      	mov	r1, r5
 80170e2:	f7e9 fa89 	bl	80005f8 <__aeabi_dmul>
 80170e6:	4602      	mov	r2, r0
 80170e8:	460b      	mov	r3, r1
 80170ea:	4630      	mov	r0, r6
 80170ec:	4639      	mov	r1, r7
 80170ee:	f7e9 f8cd 	bl	800028c <__adddf3>
 80170f2:	9a07      	ldr	r2, [sp, #28]
 80170f4:	4b37      	ldr	r3, [pc, #220]	; (80171d4 <__ieee754_pow+0x774>)
 80170f6:	4413      	add	r3, r2
 80170f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170fc:	f7e9 f8c6 	bl	800028c <__adddf3>
 8017100:	4682      	mov	sl, r0
 8017102:	9805      	ldr	r0, [sp, #20]
 8017104:	468b      	mov	fp, r1
 8017106:	f7e9 fa0d 	bl	8000524 <__aeabi_i2d>
 801710a:	9a07      	ldr	r2, [sp, #28]
 801710c:	4b32      	ldr	r3, [pc, #200]	; (80171d8 <__ieee754_pow+0x778>)
 801710e:	4413      	add	r3, r2
 8017110:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017114:	4606      	mov	r6, r0
 8017116:	460f      	mov	r7, r1
 8017118:	4652      	mov	r2, sl
 801711a:	465b      	mov	r3, fp
 801711c:	ec51 0b18 	vmov	r0, r1, d8
 8017120:	f7e9 f8b4 	bl	800028c <__adddf3>
 8017124:	4642      	mov	r2, r8
 8017126:	464b      	mov	r3, r9
 8017128:	f7e9 f8b0 	bl	800028c <__adddf3>
 801712c:	4632      	mov	r2, r6
 801712e:	463b      	mov	r3, r7
 8017130:	f7e9 f8ac 	bl	800028c <__adddf3>
 8017134:	2000      	movs	r0, #0
 8017136:	4632      	mov	r2, r6
 8017138:	463b      	mov	r3, r7
 801713a:	4604      	mov	r4, r0
 801713c:	460d      	mov	r5, r1
 801713e:	f7e9 f8a3 	bl	8000288 <__aeabi_dsub>
 8017142:	4642      	mov	r2, r8
 8017144:	464b      	mov	r3, r9
 8017146:	f7e9 f89f 	bl	8000288 <__aeabi_dsub>
 801714a:	ec53 2b18 	vmov	r2, r3, d8
 801714e:	f7e9 f89b 	bl	8000288 <__aeabi_dsub>
 8017152:	4602      	mov	r2, r0
 8017154:	460b      	mov	r3, r1
 8017156:	4650      	mov	r0, sl
 8017158:	4659      	mov	r1, fp
 801715a:	e610      	b.n	8016d7e <__ieee754_pow+0x31e>
 801715c:	2401      	movs	r4, #1
 801715e:	e6a1      	b.n	8016ea4 <__ieee754_pow+0x444>
 8017160:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80171b0 <__ieee754_pow+0x750>
 8017164:	e617      	b.n	8016d96 <__ieee754_pow+0x336>
 8017166:	bf00      	nop
 8017168:	4a454eef 	.word	0x4a454eef
 801716c:	3fca7e28 	.word	0x3fca7e28
 8017170:	93c9db65 	.word	0x93c9db65
 8017174:	3fcd864a 	.word	0x3fcd864a
 8017178:	a91d4101 	.word	0xa91d4101
 801717c:	3fd17460 	.word	0x3fd17460
 8017180:	518f264d 	.word	0x518f264d
 8017184:	3fd55555 	.word	0x3fd55555
 8017188:	db6fabff 	.word	0xdb6fabff
 801718c:	3fdb6db6 	.word	0x3fdb6db6
 8017190:	33333303 	.word	0x33333303
 8017194:	3fe33333 	.word	0x3fe33333
 8017198:	e0000000 	.word	0xe0000000
 801719c:	3feec709 	.word	0x3feec709
 80171a0:	dc3a03fd 	.word	0xdc3a03fd
 80171a4:	3feec709 	.word	0x3feec709
 80171a8:	145b01f5 	.word	0x145b01f5
 80171ac:	be3e2fe0 	.word	0xbe3e2fe0
 80171b0:	00000000 	.word	0x00000000
 80171b4:	3ff00000 	.word	0x3ff00000
 80171b8:	7ff00000 	.word	0x7ff00000
 80171bc:	43400000 	.word	0x43400000
 80171c0:	0003988e 	.word	0x0003988e
 80171c4:	000bb679 	.word	0x000bb679
 80171c8:	080182c8 	.word	0x080182c8
 80171cc:	3ff00000 	.word	0x3ff00000
 80171d0:	40080000 	.word	0x40080000
 80171d4:	080182e8 	.word	0x080182e8
 80171d8:	080182d8 	.word	0x080182d8
 80171dc:	a3b3      	add	r3, pc, #716	; (adr r3, 80174ac <__ieee754_pow+0xa4c>)
 80171de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171e2:	4640      	mov	r0, r8
 80171e4:	4649      	mov	r1, r9
 80171e6:	f7e9 f851 	bl	800028c <__adddf3>
 80171ea:	4622      	mov	r2, r4
 80171ec:	ec41 0b1a 	vmov	d10, r0, r1
 80171f0:	462b      	mov	r3, r5
 80171f2:	4630      	mov	r0, r6
 80171f4:	4639      	mov	r1, r7
 80171f6:	f7e9 f847 	bl	8000288 <__aeabi_dsub>
 80171fa:	4602      	mov	r2, r0
 80171fc:	460b      	mov	r3, r1
 80171fe:	ec51 0b1a 	vmov	r0, r1, d10
 8017202:	f7e9 fc89 	bl	8000b18 <__aeabi_dcmpgt>
 8017206:	2800      	cmp	r0, #0
 8017208:	f47f ae04 	bne.w	8016e14 <__ieee754_pow+0x3b4>
 801720c:	4aa2      	ldr	r2, [pc, #648]	; (8017498 <__ieee754_pow+0xa38>)
 801720e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8017212:	4293      	cmp	r3, r2
 8017214:	f340 8107 	ble.w	8017426 <__ieee754_pow+0x9c6>
 8017218:	151b      	asrs	r3, r3, #20
 801721a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801721e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8017222:	fa4a fa03 	asr.w	sl, sl, r3
 8017226:	44da      	add	sl, fp
 8017228:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801722c:	489b      	ldr	r0, [pc, #620]	; (801749c <__ieee754_pow+0xa3c>)
 801722e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017232:	4108      	asrs	r0, r1
 8017234:	ea00 030a 	and.w	r3, r0, sl
 8017238:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801723c:	f1c1 0114 	rsb	r1, r1, #20
 8017240:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017244:	fa4a fa01 	asr.w	sl, sl, r1
 8017248:	f1bb 0f00 	cmp.w	fp, #0
 801724c:	f04f 0200 	mov.w	r2, #0
 8017250:	4620      	mov	r0, r4
 8017252:	4629      	mov	r1, r5
 8017254:	bfb8      	it	lt
 8017256:	f1ca 0a00 	rsblt	sl, sl, #0
 801725a:	f7e9 f815 	bl	8000288 <__aeabi_dsub>
 801725e:	ec41 0b19 	vmov	d9, r0, r1
 8017262:	4642      	mov	r2, r8
 8017264:	464b      	mov	r3, r9
 8017266:	ec51 0b19 	vmov	r0, r1, d9
 801726a:	f7e9 f80f 	bl	800028c <__adddf3>
 801726e:	a37a      	add	r3, pc, #488	; (adr r3, 8017458 <__ieee754_pow+0x9f8>)
 8017270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017274:	2000      	movs	r0, #0
 8017276:	4604      	mov	r4, r0
 8017278:	460d      	mov	r5, r1
 801727a:	f7e9 f9bd 	bl	80005f8 <__aeabi_dmul>
 801727e:	ec53 2b19 	vmov	r2, r3, d9
 8017282:	4606      	mov	r6, r0
 8017284:	460f      	mov	r7, r1
 8017286:	4620      	mov	r0, r4
 8017288:	4629      	mov	r1, r5
 801728a:	f7e8 fffd 	bl	8000288 <__aeabi_dsub>
 801728e:	4602      	mov	r2, r0
 8017290:	460b      	mov	r3, r1
 8017292:	4640      	mov	r0, r8
 8017294:	4649      	mov	r1, r9
 8017296:	f7e8 fff7 	bl	8000288 <__aeabi_dsub>
 801729a:	a371      	add	r3, pc, #452	; (adr r3, 8017460 <__ieee754_pow+0xa00>)
 801729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a0:	f7e9 f9aa 	bl	80005f8 <__aeabi_dmul>
 80172a4:	a370      	add	r3, pc, #448	; (adr r3, 8017468 <__ieee754_pow+0xa08>)
 80172a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172aa:	4680      	mov	r8, r0
 80172ac:	4689      	mov	r9, r1
 80172ae:	4620      	mov	r0, r4
 80172b0:	4629      	mov	r1, r5
 80172b2:	f7e9 f9a1 	bl	80005f8 <__aeabi_dmul>
 80172b6:	4602      	mov	r2, r0
 80172b8:	460b      	mov	r3, r1
 80172ba:	4640      	mov	r0, r8
 80172bc:	4649      	mov	r1, r9
 80172be:	f7e8 ffe5 	bl	800028c <__adddf3>
 80172c2:	4604      	mov	r4, r0
 80172c4:	460d      	mov	r5, r1
 80172c6:	4602      	mov	r2, r0
 80172c8:	460b      	mov	r3, r1
 80172ca:	4630      	mov	r0, r6
 80172cc:	4639      	mov	r1, r7
 80172ce:	f7e8 ffdd 	bl	800028c <__adddf3>
 80172d2:	4632      	mov	r2, r6
 80172d4:	463b      	mov	r3, r7
 80172d6:	4680      	mov	r8, r0
 80172d8:	4689      	mov	r9, r1
 80172da:	f7e8 ffd5 	bl	8000288 <__aeabi_dsub>
 80172de:	4602      	mov	r2, r0
 80172e0:	460b      	mov	r3, r1
 80172e2:	4620      	mov	r0, r4
 80172e4:	4629      	mov	r1, r5
 80172e6:	f7e8 ffcf 	bl	8000288 <__aeabi_dsub>
 80172ea:	4642      	mov	r2, r8
 80172ec:	4606      	mov	r6, r0
 80172ee:	460f      	mov	r7, r1
 80172f0:	464b      	mov	r3, r9
 80172f2:	4640      	mov	r0, r8
 80172f4:	4649      	mov	r1, r9
 80172f6:	f7e9 f97f 	bl	80005f8 <__aeabi_dmul>
 80172fa:	a35d      	add	r3, pc, #372	; (adr r3, 8017470 <__ieee754_pow+0xa10>)
 80172fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017300:	4604      	mov	r4, r0
 8017302:	460d      	mov	r5, r1
 8017304:	f7e9 f978 	bl	80005f8 <__aeabi_dmul>
 8017308:	a35b      	add	r3, pc, #364	; (adr r3, 8017478 <__ieee754_pow+0xa18>)
 801730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801730e:	f7e8 ffbb 	bl	8000288 <__aeabi_dsub>
 8017312:	4622      	mov	r2, r4
 8017314:	462b      	mov	r3, r5
 8017316:	f7e9 f96f 	bl	80005f8 <__aeabi_dmul>
 801731a:	a359      	add	r3, pc, #356	; (adr r3, 8017480 <__ieee754_pow+0xa20>)
 801731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017320:	f7e8 ffb4 	bl	800028c <__adddf3>
 8017324:	4622      	mov	r2, r4
 8017326:	462b      	mov	r3, r5
 8017328:	f7e9 f966 	bl	80005f8 <__aeabi_dmul>
 801732c:	a356      	add	r3, pc, #344	; (adr r3, 8017488 <__ieee754_pow+0xa28>)
 801732e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017332:	f7e8 ffa9 	bl	8000288 <__aeabi_dsub>
 8017336:	4622      	mov	r2, r4
 8017338:	462b      	mov	r3, r5
 801733a:	f7e9 f95d 	bl	80005f8 <__aeabi_dmul>
 801733e:	a354      	add	r3, pc, #336	; (adr r3, 8017490 <__ieee754_pow+0xa30>)
 8017340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017344:	f7e8 ffa2 	bl	800028c <__adddf3>
 8017348:	4622      	mov	r2, r4
 801734a:	462b      	mov	r3, r5
 801734c:	f7e9 f954 	bl	80005f8 <__aeabi_dmul>
 8017350:	4602      	mov	r2, r0
 8017352:	460b      	mov	r3, r1
 8017354:	4640      	mov	r0, r8
 8017356:	4649      	mov	r1, r9
 8017358:	f7e8 ff96 	bl	8000288 <__aeabi_dsub>
 801735c:	4604      	mov	r4, r0
 801735e:	460d      	mov	r5, r1
 8017360:	4602      	mov	r2, r0
 8017362:	460b      	mov	r3, r1
 8017364:	4640      	mov	r0, r8
 8017366:	4649      	mov	r1, r9
 8017368:	f7e9 f946 	bl	80005f8 <__aeabi_dmul>
 801736c:	2200      	movs	r2, #0
 801736e:	ec41 0b19 	vmov	d9, r0, r1
 8017372:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017376:	4620      	mov	r0, r4
 8017378:	4629      	mov	r1, r5
 801737a:	f7e8 ff85 	bl	8000288 <__aeabi_dsub>
 801737e:	4602      	mov	r2, r0
 8017380:	460b      	mov	r3, r1
 8017382:	ec51 0b19 	vmov	r0, r1, d9
 8017386:	f7e9 fa61 	bl	800084c <__aeabi_ddiv>
 801738a:	4632      	mov	r2, r6
 801738c:	4604      	mov	r4, r0
 801738e:	460d      	mov	r5, r1
 8017390:	463b      	mov	r3, r7
 8017392:	4640      	mov	r0, r8
 8017394:	4649      	mov	r1, r9
 8017396:	f7e9 f92f 	bl	80005f8 <__aeabi_dmul>
 801739a:	4632      	mov	r2, r6
 801739c:	463b      	mov	r3, r7
 801739e:	f7e8 ff75 	bl	800028c <__adddf3>
 80173a2:	4602      	mov	r2, r0
 80173a4:	460b      	mov	r3, r1
 80173a6:	4620      	mov	r0, r4
 80173a8:	4629      	mov	r1, r5
 80173aa:	f7e8 ff6d 	bl	8000288 <__aeabi_dsub>
 80173ae:	4642      	mov	r2, r8
 80173b0:	464b      	mov	r3, r9
 80173b2:	f7e8 ff69 	bl	8000288 <__aeabi_dsub>
 80173b6:	460b      	mov	r3, r1
 80173b8:	4602      	mov	r2, r0
 80173ba:	4939      	ldr	r1, [pc, #228]	; (80174a0 <__ieee754_pow+0xa40>)
 80173bc:	2000      	movs	r0, #0
 80173be:	f7e8 ff63 	bl	8000288 <__aeabi_dsub>
 80173c2:	ec41 0b10 	vmov	d0, r0, r1
 80173c6:	ee10 3a90 	vmov	r3, s1
 80173ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80173ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80173d2:	da2b      	bge.n	801742c <__ieee754_pow+0x9cc>
 80173d4:	4650      	mov	r0, sl
 80173d6:	f000 f877 	bl	80174c8 <scalbn>
 80173da:	ec51 0b10 	vmov	r0, r1, d0
 80173de:	ec53 2b18 	vmov	r2, r3, d8
 80173e2:	f7ff bbee 	b.w	8016bc2 <__ieee754_pow+0x162>
 80173e6:	4b2f      	ldr	r3, [pc, #188]	; (80174a4 <__ieee754_pow+0xa44>)
 80173e8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80173ec:	429e      	cmp	r6, r3
 80173ee:	f77f af0d 	ble.w	801720c <__ieee754_pow+0x7ac>
 80173f2:	4b2d      	ldr	r3, [pc, #180]	; (80174a8 <__ieee754_pow+0xa48>)
 80173f4:	440b      	add	r3, r1
 80173f6:	4303      	orrs	r3, r0
 80173f8:	d009      	beq.n	801740e <__ieee754_pow+0x9ae>
 80173fa:	ec51 0b18 	vmov	r0, r1, d8
 80173fe:	2200      	movs	r2, #0
 8017400:	2300      	movs	r3, #0
 8017402:	f7e9 fb6b 	bl	8000adc <__aeabi_dcmplt>
 8017406:	3800      	subs	r0, #0
 8017408:	bf18      	it	ne
 801740a:	2001      	movne	r0, #1
 801740c:	e448      	b.n	8016ca0 <__ieee754_pow+0x240>
 801740e:	4622      	mov	r2, r4
 8017410:	462b      	mov	r3, r5
 8017412:	f7e8 ff39 	bl	8000288 <__aeabi_dsub>
 8017416:	4642      	mov	r2, r8
 8017418:	464b      	mov	r3, r9
 801741a:	f7e9 fb73 	bl	8000b04 <__aeabi_dcmpge>
 801741e:	2800      	cmp	r0, #0
 8017420:	f43f aef4 	beq.w	801720c <__ieee754_pow+0x7ac>
 8017424:	e7e9      	b.n	80173fa <__ieee754_pow+0x99a>
 8017426:	f04f 0a00 	mov.w	sl, #0
 801742a:	e71a      	b.n	8017262 <__ieee754_pow+0x802>
 801742c:	ec51 0b10 	vmov	r0, r1, d0
 8017430:	4619      	mov	r1, r3
 8017432:	e7d4      	b.n	80173de <__ieee754_pow+0x97e>
 8017434:	491a      	ldr	r1, [pc, #104]	; (80174a0 <__ieee754_pow+0xa40>)
 8017436:	2000      	movs	r0, #0
 8017438:	f7ff bb31 	b.w	8016a9e <__ieee754_pow+0x3e>
 801743c:	2000      	movs	r0, #0
 801743e:	2100      	movs	r1, #0
 8017440:	f7ff bb2d 	b.w	8016a9e <__ieee754_pow+0x3e>
 8017444:	4630      	mov	r0, r6
 8017446:	4639      	mov	r1, r7
 8017448:	f7ff bb29 	b.w	8016a9e <__ieee754_pow+0x3e>
 801744c:	9204      	str	r2, [sp, #16]
 801744e:	f7ff bb7b 	b.w	8016b48 <__ieee754_pow+0xe8>
 8017452:	2300      	movs	r3, #0
 8017454:	f7ff bb65 	b.w	8016b22 <__ieee754_pow+0xc2>
 8017458:	00000000 	.word	0x00000000
 801745c:	3fe62e43 	.word	0x3fe62e43
 8017460:	fefa39ef 	.word	0xfefa39ef
 8017464:	3fe62e42 	.word	0x3fe62e42
 8017468:	0ca86c39 	.word	0x0ca86c39
 801746c:	be205c61 	.word	0xbe205c61
 8017470:	72bea4d0 	.word	0x72bea4d0
 8017474:	3e663769 	.word	0x3e663769
 8017478:	c5d26bf1 	.word	0xc5d26bf1
 801747c:	3ebbbd41 	.word	0x3ebbbd41
 8017480:	af25de2c 	.word	0xaf25de2c
 8017484:	3f11566a 	.word	0x3f11566a
 8017488:	16bebd93 	.word	0x16bebd93
 801748c:	3f66c16c 	.word	0x3f66c16c
 8017490:	5555553e 	.word	0x5555553e
 8017494:	3fc55555 	.word	0x3fc55555
 8017498:	3fe00000 	.word	0x3fe00000
 801749c:	fff00000 	.word	0xfff00000
 80174a0:	3ff00000 	.word	0x3ff00000
 80174a4:	4090cbff 	.word	0x4090cbff
 80174a8:	3f6f3400 	.word	0x3f6f3400
 80174ac:	652b82fe 	.word	0x652b82fe
 80174b0:	3c971547 	.word	0x3c971547

080174b4 <fabs>:
 80174b4:	ec51 0b10 	vmov	r0, r1, d0
 80174b8:	ee10 2a10 	vmov	r2, s0
 80174bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80174c0:	ec43 2b10 	vmov	d0, r2, r3
 80174c4:	4770      	bx	lr
	...

080174c8 <scalbn>:
 80174c8:	b570      	push	{r4, r5, r6, lr}
 80174ca:	ec55 4b10 	vmov	r4, r5, d0
 80174ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80174d2:	4606      	mov	r6, r0
 80174d4:	462b      	mov	r3, r5
 80174d6:	b999      	cbnz	r1, 8017500 <scalbn+0x38>
 80174d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80174dc:	4323      	orrs	r3, r4
 80174de:	d03f      	beq.n	8017560 <scalbn+0x98>
 80174e0:	4b35      	ldr	r3, [pc, #212]	; (80175b8 <scalbn+0xf0>)
 80174e2:	4629      	mov	r1, r5
 80174e4:	ee10 0a10 	vmov	r0, s0
 80174e8:	2200      	movs	r2, #0
 80174ea:	f7e9 f885 	bl	80005f8 <__aeabi_dmul>
 80174ee:	4b33      	ldr	r3, [pc, #204]	; (80175bc <scalbn+0xf4>)
 80174f0:	429e      	cmp	r6, r3
 80174f2:	4604      	mov	r4, r0
 80174f4:	460d      	mov	r5, r1
 80174f6:	da10      	bge.n	801751a <scalbn+0x52>
 80174f8:	a327      	add	r3, pc, #156	; (adr r3, 8017598 <scalbn+0xd0>)
 80174fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174fe:	e01f      	b.n	8017540 <scalbn+0x78>
 8017500:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8017504:	4291      	cmp	r1, r2
 8017506:	d10c      	bne.n	8017522 <scalbn+0x5a>
 8017508:	ee10 2a10 	vmov	r2, s0
 801750c:	4620      	mov	r0, r4
 801750e:	4629      	mov	r1, r5
 8017510:	f7e8 febc 	bl	800028c <__adddf3>
 8017514:	4604      	mov	r4, r0
 8017516:	460d      	mov	r5, r1
 8017518:	e022      	b.n	8017560 <scalbn+0x98>
 801751a:	460b      	mov	r3, r1
 801751c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8017520:	3936      	subs	r1, #54	; 0x36
 8017522:	f24c 3250 	movw	r2, #50000	; 0xc350
 8017526:	4296      	cmp	r6, r2
 8017528:	dd0d      	ble.n	8017546 <scalbn+0x7e>
 801752a:	2d00      	cmp	r5, #0
 801752c:	a11c      	add	r1, pc, #112	; (adr r1, 80175a0 <scalbn+0xd8>)
 801752e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017532:	da02      	bge.n	801753a <scalbn+0x72>
 8017534:	a11c      	add	r1, pc, #112	; (adr r1, 80175a8 <scalbn+0xe0>)
 8017536:	e9d1 0100 	ldrd	r0, r1, [r1]
 801753a:	a319      	add	r3, pc, #100	; (adr r3, 80175a0 <scalbn+0xd8>)
 801753c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017540:	f7e9 f85a 	bl	80005f8 <__aeabi_dmul>
 8017544:	e7e6      	b.n	8017514 <scalbn+0x4c>
 8017546:	1872      	adds	r2, r6, r1
 8017548:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801754c:	428a      	cmp	r2, r1
 801754e:	dcec      	bgt.n	801752a <scalbn+0x62>
 8017550:	2a00      	cmp	r2, #0
 8017552:	dd08      	ble.n	8017566 <scalbn+0x9e>
 8017554:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017558:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801755c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017560:	ec45 4b10 	vmov	d0, r4, r5
 8017564:	bd70      	pop	{r4, r5, r6, pc}
 8017566:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801756a:	da08      	bge.n	801757e <scalbn+0xb6>
 801756c:	2d00      	cmp	r5, #0
 801756e:	a10a      	add	r1, pc, #40	; (adr r1, 8017598 <scalbn+0xd0>)
 8017570:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017574:	dac0      	bge.n	80174f8 <scalbn+0x30>
 8017576:	a10e      	add	r1, pc, #56	; (adr r1, 80175b0 <scalbn+0xe8>)
 8017578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801757c:	e7bc      	b.n	80174f8 <scalbn+0x30>
 801757e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017582:	3236      	adds	r2, #54	; 0x36
 8017584:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017588:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801758c:	4620      	mov	r0, r4
 801758e:	4b0c      	ldr	r3, [pc, #48]	; (80175c0 <scalbn+0xf8>)
 8017590:	2200      	movs	r2, #0
 8017592:	e7d5      	b.n	8017540 <scalbn+0x78>
 8017594:	f3af 8000 	nop.w
 8017598:	c2f8f359 	.word	0xc2f8f359
 801759c:	01a56e1f 	.word	0x01a56e1f
 80175a0:	8800759c 	.word	0x8800759c
 80175a4:	7e37e43c 	.word	0x7e37e43c
 80175a8:	8800759c 	.word	0x8800759c
 80175ac:	fe37e43c 	.word	0xfe37e43c
 80175b0:	c2f8f359 	.word	0xc2f8f359
 80175b4:	81a56e1f 	.word	0x81a56e1f
 80175b8:	43500000 	.word	0x43500000
 80175bc:	ffff3cb0 	.word	0xffff3cb0
 80175c0:	3c900000 	.word	0x3c900000

080175c4 <with_errno>:
 80175c4:	b570      	push	{r4, r5, r6, lr}
 80175c6:	4604      	mov	r4, r0
 80175c8:	460d      	mov	r5, r1
 80175ca:	4616      	mov	r6, r2
 80175cc:	f7fc fc2a 	bl	8013e24 <__errno>
 80175d0:	4629      	mov	r1, r5
 80175d2:	6006      	str	r6, [r0, #0]
 80175d4:	4620      	mov	r0, r4
 80175d6:	bd70      	pop	{r4, r5, r6, pc}

080175d8 <xflow>:
 80175d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80175da:	4614      	mov	r4, r2
 80175dc:	461d      	mov	r5, r3
 80175de:	b108      	cbz	r0, 80175e4 <xflow+0xc>
 80175e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80175e4:	e9cd 2300 	strd	r2, r3, [sp]
 80175e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80175ec:	4620      	mov	r0, r4
 80175ee:	4629      	mov	r1, r5
 80175f0:	f7e9 f802 	bl	80005f8 <__aeabi_dmul>
 80175f4:	2222      	movs	r2, #34	; 0x22
 80175f6:	b003      	add	sp, #12
 80175f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175fc:	f7ff bfe2 	b.w	80175c4 <with_errno>

08017600 <__math_uflow>:
 8017600:	b508      	push	{r3, lr}
 8017602:	2200      	movs	r2, #0
 8017604:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017608:	f7ff ffe6 	bl	80175d8 <xflow>
 801760c:	ec41 0b10 	vmov	d0, r0, r1
 8017610:	bd08      	pop	{r3, pc}

08017612 <__math_oflow>:
 8017612:	b508      	push	{r3, lr}
 8017614:	2200      	movs	r2, #0
 8017616:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801761a:	f7ff ffdd 	bl	80175d8 <xflow>
 801761e:	ec41 0b10 	vmov	d0, r0, r1
 8017622:	bd08      	pop	{r3, pc}

08017624 <_init>:
 8017624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017626:	bf00      	nop
 8017628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801762a:	bc08      	pop	{r3}
 801762c:	469e      	mov	lr, r3
 801762e:	4770      	bx	lr

08017630 <_fini>:
 8017630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017632:	bf00      	nop
 8017634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017636:	bc08      	pop	{r3}
 8017638:	469e      	mov	lr, r3
 801763a:	4770      	bx	lr
