
G05_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001aee4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a08  0801b078  0801b078  0002b078  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba80  0801ba80  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba80  0801ba80  0002ba80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba88  0801ba88  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba88  0801ba88  0002ba88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba8c  0801ba8c  0002ba8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0801ba90  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030200  2**0
                  CONTENTS
 10 .bss          00009ebc  20000200  20000200  00030200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000a0bc  2000a0bc  00030200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002fd18  00000000  00000000  00030273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006b35  00000000  00000000  0005ff8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002820  00000000  00000000  00066ac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001f18  00000000  00000000  000692e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002cd28  00000000  00000000  0006b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00034966  00000000  00000000  00097f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f809a  00000000  00000000  000cc886  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c054  00000000  00000000  001c4920  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001d0974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b05c 	.word	0x0801b05c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	0801b05c 	.word	0x0801b05c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295
 8000ca6:	f000 b9f1 	b.w	800108c <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295
 8000d3c:	f000 b9a6 	b.w	800108c <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9e08      	ldr	r6, [sp, #32]
 8000dca:	460d      	mov	r5, r1
 8000dcc:	4604      	mov	r4, r0
 8000dce:	460f      	mov	r7, r1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14a      	bne.n	8000e6a <__udivmoddi4+0xa6>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	4694      	mov	ip, r2
 8000dd8:	d965      	bls.n	8000ea6 <__udivmoddi4+0xe2>
 8000dda:	fab2 f382 	clz	r3, r2
 8000dde:	b143      	cbz	r3, 8000df2 <__udivmoddi4+0x2e>
 8000de0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000de4:	f1c3 0220 	rsb	r2, r3, #32
 8000de8:	409f      	lsls	r7, r3
 8000dea:	fa20 f202 	lsr.w	r2, r0, r2
 8000dee:	4317      	orrs	r7, r2
 8000df0:	409c      	lsls	r4, r3
 8000df2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000df6:	fa1f f58c 	uxth.w	r5, ip
 8000dfa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dfe:	0c22      	lsrs	r2, r4, #16
 8000e00:	fb0e 7711 	mls	r7, lr, r1, r7
 8000e04:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e08:	fb01 f005 	mul.w	r0, r1, r5
 8000e0c:	4290      	cmp	r0, r2
 8000e0e:	d90a      	bls.n	8000e26 <__udivmoddi4+0x62>
 8000e10:	eb1c 0202 	adds.w	r2, ip, r2
 8000e14:	f101 37ff 	add.w	r7, r1, #4294967295
 8000e18:	f080 811c 	bcs.w	8001054 <__udivmoddi4+0x290>
 8000e1c:	4290      	cmp	r0, r2
 8000e1e:	f240 8119 	bls.w	8001054 <__udivmoddi4+0x290>
 8000e22:	3902      	subs	r1, #2
 8000e24:	4462      	add	r2, ip
 8000e26:	1a12      	subs	r2, r2, r0
 8000e28:	b2a4      	uxth	r4, r4
 8000e2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e32:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e36:	fb00 f505 	mul.w	r5, r0, r5
 8000e3a:	42a5      	cmp	r5, r4
 8000e3c:	d90a      	bls.n	8000e54 <__udivmoddi4+0x90>
 8000e3e:	eb1c 0404 	adds.w	r4, ip, r4
 8000e42:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e46:	f080 8107 	bcs.w	8001058 <__udivmoddi4+0x294>
 8000e4a:	42a5      	cmp	r5, r4
 8000e4c:	f240 8104 	bls.w	8001058 <__udivmoddi4+0x294>
 8000e50:	4464      	add	r4, ip
 8000e52:	3802      	subs	r0, #2
 8000e54:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11e      	cbz	r6, 8000e66 <__udivmoddi4+0xa2>
 8000e5e:	40dc      	lsrs	r4, r3
 8000e60:	2300      	movs	r3, #0
 8000e62:	e9c6 4300 	strd	r4, r3, [r6]
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0xbc>
 8000e6e:	2e00      	cmp	r6, #0
 8000e70:	f000 80ed 	beq.w	800104e <__udivmoddi4+0x28a>
 8000e74:	2100      	movs	r1, #0
 8000e76:	e9c6 0500 	strd	r0, r5, [r6]
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e80:	fab3 f183 	clz	r1, r3
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d149      	bne.n	8000f1c <__udivmoddi4+0x158>
 8000e88:	42ab      	cmp	r3, r5
 8000e8a:	d302      	bcc.n	8000e92 <__udivmoddi4+0xce>
 8000e8c:	4282      	cmp	r2, r0
 8000e8e:	f200 80f8 	bhi.w	8001082 <__udivmoddi4+0x2be>
 8000e92:	1a84      	subs	r4, r0, r2
 8000e94:	eb65 0203 	sbc.w	r2, r5, r3
 8000e98:	2001      	movs	r0, #1
 8000e9a:	4617      	mov	r7, r2
 8000e9c:	2e00      	cmp	r6, #0
 8000e9e:	d0e2      	beq.n	8000e66 <__udivmoddi4+0xa2>
 8000ea0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ea4:	e7df      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000ea6:	b902      	cbnz	r2, 8000eaa <__udivmoddi4+0xe6>
 8000ea8:	deff      	udf	#255	; 0xff
 8000eaa:	fab2 f382 	clz	r3, r2
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f040 8090 	bne.w	8000fd4 <__udivmoddi4+0x210>
 8000eb4:	1a8a      	subs	r2, r1, r2
 8000eb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eba:	fa1f fe8c 	uxth.w	lr, ip
 8000ebe:	2101      	movs	r1, #1
 8000ec0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ec4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ec8:	0c22      	lsrs	r2, r4, #16
 8000eca:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ece:	fb0e f005 	mul.w	r0, lr, r5
 8000ed2:	4290      	cmp	r0, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x124>
 8000ed6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eda:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ede:	d202      	bcs.n	8000ee6 <__udivmoddi4+0x122>
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	f200 80cb 	bhi.w	800107c <__udivmoddi4+0x2b8>
 8000ee6:	4645      	mov	r5, r8
 8000ee8:	1a12      	subs	r2, r2, r0
 8000eea:	b2a4      	uxth	r4, r4
 8000eec:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ef0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ef4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ef8:	fb0e fe00 	mul.w	lr, lr, r0
 8000efc:	45a6      	cmp	lr, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x14e>
 8000f00:	eb1c 0404 	adds.w	r4, ip, r4
 8000f04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f08:	d202      	bcs.n	8000f10 <__udivmoddi4+0x14c>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f200 80bb 	bhi.w	8001086 <__udivmoddi4+0x2c2>
 8000f10:	4610      	mov	r0, r2
 8000f12:	eba4 040e 	sub.w	r4, r4, lr
 8000f16:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000f1a:	e79f      	b.n	8000e5c <__udivmoddi4+0x98>
 8000f1c:	f1c1 0720 	rsb	r7, r1, #32
 8000f20:	408b      	lsls	r3, r1
 8000f22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f2a:	fa05 f401 	lsl.w	r4, r5, r1
 8000f2e:	fa20 f307 	lsr.w	r3, r0, r7
 8000f32:	40fd      	lsrs	r5, r7
 8000f34:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f38:	4323      	orrs	r3, r4
 8000f3a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f3e:	fa1f fe8c 	uxth.w	lr, ip
 8000f42:	fb09 5518 	mls	r5, r9, r8, r5
 8000f46:	0c1c      	lsrs	r4, r3, #16
 8000f48:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f4c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f50:	42a5      	cmp	r5, r4
 8000f52:	fa02 f201 	lsl.w	r2, r2, r1
 8000f56:	fa00 f001 	lsl.w	r0, r0, r1
 8000f5a:	d90b      	bls.n	8000f74 <__udivmoddi4+0x1b0>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f64:	f080 8088 	bcs.w	8001078 <__udivmoddi4+0x2b4>
 8000f68:	42a5      	cmp	r5, r4
 8000f6a:	f240 8085 	bls.w	8001078 <__udivmoddi4+0x2b4>
 8000f6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f72:	4464      	add	r4, ip
 8000f74:	1b64      	subs	r4, r4, r5
 8000f76:	b29d      	uxth	r5, r3
 8000f78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f80:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f84:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f88:	45a6      	cmp	lr, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x1da>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f94:	d26c      	bcs.n	8001070 <__udivmoddi4+0x2ac>
 8000f96:	45a6      	cmp	lr, r4
 8000f98:	d96a      	bls.n	8001070 <__udivmoddi4+0x2ac>
 8000f9a:	3b02      	subs	r3, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa2:	fba3 9502 	umull	r9, r5, r3, r2
 8000fa6:	eba4 040e 	sub.w	r4, r4, lr
 8000faa:	42ac      	cmp	r4, r5
 8000fac:	46c8      	mov	r8, r9
 8000fae:	46ae      	mov	lr, r5
 8000fb0:	d356      	bcc.n	8001060 <__udivmoddi4+0x29c>
 8000fb2:	d053      	beq.n	800105c <__udivmoddi4+0x298>
 8000fb4:	b156      	cbz	r6, 8000fcc <__udivmoddi4+0x208>
 8000fb6:	ebb0 0208 	subs.w	r2, r0, r8
 8000fba:	eb64 040e 	sbc.w	r4, r4, lr
 8000fbe:	fa04 f707 	lsl.w	r7, r4, r7
 8000fc2:	40ca      	lsrs	r2, r1
 8000fc4:	40cc      	lsrs	r4, r1
 8000fc6:	4317      	orrs	r7, r2
 8000fc8:	e9c6 7400 	strd	r7, r4, [r6]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fd4:	f1c3 0120 	rsb	r1, r3, #32
 8000fd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000fdc:	fa20 f201 	lsr.w	r2, r0, r1
 8000fe0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fe4:	409d      	lsls	r5, r3
 8000fe6:	432a      	orrs	r2, r5
 8000fe8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fec:	fa1f fe8c 	uxth.w	lr, ip
 8000ff0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ff4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ff8:	0c11      	lsrs	r1, r2, #16
 8000ffa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ffe:	fb00 f50e 	mul.w	r5, r0, lr
 8001002:	428d      	cmp	r5, r1
 8001004:	fa04 f403 	lsl.w	r4, r4, r3
 8001008:	d908      	bls.n	800101c <__udivmoddi4+0x258>
 800100a:	eb1c 0101 	adds.w	r1, ip, r1
 800100e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001012:	d22f      	bcs.n	8001074 <__udivmoddi4+0x2b0>
 8001014:	428d      	cmp	r5, r1
 8001016:	d92d      	bls.n	8001074 <__udivmoddi4+0x2b0>
 8001018:	3802      	subs	r0, #2
 800101a:	4461      	add	r1, ip
 800101c:	1b49      	subs	r1, r1, r5
 800101e:	b292      	uxth	r2, r2
 8001020:	fbb1 f5f7 	udiv	r5, r1, r7
 8001024:	fb07 1115 	mls	r1, r7, r5, r1
 8001028:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800102c:	fb05 f10e 	mul.w	r1, r5, lr
 8001030:	4291      	cmp	r1, r2
 8001032:	d908      	bls.n	8001046 <__udivmoddi4+0x282>
 8001034:	eb1c 0202 	adds.w	r2, ip, r2
 8001038:	f105 38ff 	add.w	r8, r5, #4294967295
 800103c:	d216      	bcs.n	800106c <__udivmoddi4+0x2a8>
 800103e:	4291      	cmp	r1, r2
 8001040:	d914      	bls.n	800106c <__udivmoddi4+0x2a8>
 8001042:	3d02      	subs	r5, #2
 8001044:	4462      	add	r2, ip
 8001046:	1a52      	subs	r2, r2, r1
 8001048:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800104c:	e738      	b.n	8000ec0 <__udivmoddi4+0xfc>
 800104e:	4631      	mov	r1, r6
 8001050:	4630      	mov	r0, r6
 8001052:	e708      	b.n	8000e66 <__udivmoddi4+0xa2>
 8001054:	4639      	mov	r1, r7
 8001056:	e6e6      	b.n	8000e26 <__udivmoddi4+0x62>
 8001058:	4610      	mov	r0, r2
 800105a:	e6fb      	b.n	8000e54 <__udivmoddi4+0x90>
 800105c:	4548      	cmp	r0, r9
 800105e:	d2a9      	bcs.n	8000fb4 <__udivmoddi4+0x1f0>
 8001060:	ebb9 0802 	subs.w	r8, r9, r2
 8001064:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001068:	3b01      	subs	r3, #1
 800106a:	e7a3      	b.n	8000fb4 <__udivmoddi4+0x1f0>
 800106c:	4645      	mov	r5, r8
 800106e:	e7ea      	b.n	8001046 <__udivmoddi4+0x282>
 8001070:	462b      	mov	r3, r5
 8001072:	e794      	b.n	8000f9e <__udivmoddi4+0x1da>
 8001074:	4640      	mov	r0, r8
 8001076:	e7d1      	b.n	800101c <__udivmoddi4+0x258>
 8001078:	46d0      	mov	r8, sl
 800107a:	e77b      	b.n	8000f74 <__udivmoddi4+0x1b0>
 800107c:	3d02      	subs	r5, #2
 800107e:	4462      	add	r2, ip
 8001080:	e732      	b.n	8000ee8 <__udivmoddi4+0x124>
 8001082:	4608      	mov	r0, r1
 8001084:	e70a      	b.n	8000e9c <__udivmoddi4+0xd8>
 8001086:	4464      	add	r4, ip
 8001088:	3802      	subs	r0, #2
 800108a:	e742      	b.n	8000f12 <__udivmoddi4+0x14e>

0800108c <__aeabi_idiv0>:
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop

08001090 <BME280_Delay>:

int16_t  dig_T2, dig_T3,
         dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9, \
		 dig_H2,  dig_H4, dig_H5, dig_H6;

void BME280_Delay(int time) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fdce 	bl	8006c3c <HAL_Delay>
#endif
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <TrimRead>:

// Membaca trimming parameter yang disimpan pada NVM ROM BME
void TrimRead(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Membaca NVM dari 0x88 ke 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, 100);
 80010ae:	2364      	movs	r3, #100	; 0x64
 80010b0:	9302      	str	r3, [sp, #8]
 80010b2:	2319      	movs	r3, #25
 80010b4:	9301      	str	r3, [sp, #4]
 80010b6:	463b      	mov	r3, r7
 80010b8:	9300      	str	r3, [sp, #0]
 80010ba:	2301      	movs	r3, #1
 80010bc:	2288      	movs	r2, #136	; 0x88
 80010be:	21ec      	movs	r1, #236	; 0xec
 80010c0:	4856      	ldr	r0, [pc, #344]	; (800121c <TrimRead+0x174>)
 80010c2:	f007 ffb3 	bl	800902c <HAL_I2C_Mem_Read>

	// Membaca NVM dari 0xE1 ke 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, 100);
 80010c6:	463b      	mov	r3, r7
 80010c8:	3319      	adds	r3, #25
 80010ca:	2264      	movs	r2, #100	; 0x64
 80010cc:	9202      	str	r2, [sp, #8]
 80010ce:	2207      	movs	r2, #7
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	2301      	movs	r3, #1
 80010d6:	22e1      	movs	r2, #225	; 0xe1
 80010d8:	21ec      	movs	r1, #236	; 0xec
 80010da:	4850      	ldr	r0, [pc, #320]	; (800121c <TrimRead+0x174>)
 80010dc:	f007 ffa6 	bl	800902c <HAL_I2C_Mem_Read>

	// Mengatur data sesuai datasheet
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010e0:	787b      	ldrb	r3, [r7, #1]
 80010e2:	021b      	lsls	r3, r3, #8
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	783b      	ldrb	r3, [r7, #0]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	4313      	orrs	r3, r2
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	b29a      	uxth	r2, r3
 80010f0:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <TrimRead+0x178>)
 80010f2:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010f4:	78fb      	ldrb	r3, [r7, #3]
 80010f6:	021b      	lsls	r3, r3, #8
 80010f8:	b21a      	sxth	r2, r3
 80010fa:	78bb      	ldrb	r3, [r7, #2]
 80010fc:	b21b      	sxth	r3, r3
 80010fe:	4313      	orrs	r3, r2
 8001100:	b21a      	sxth	r2, r3
 8001102:	4b48      	ldr	r3, [pc, #288]	; (8001224 <TrimRead+0x17c>)
 8001104:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 8001106:	797b      	ldrb	r3, [r7, #5]
 8001108:	021b      	lsls	r3, r3, #8
 800110a:	b21a      	sxth	r2, r3
 800110c:	793b      	ldrb	r3, [r7, #4]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	b21a      	sxth	r2, r3
 8001114:	4b44      	ldr	r3, [pc, #272]	; (8001228 <TrimRead+0x180>)
 8001116:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	021b      	lsls	r3, r3, #8
 800111c:	b21a      	sxth	r2, r3
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21b      	sxth	r3, r3
 8001126:	b29a      	uxth	r2, r3
 8001128:	4b40      	ldr	r3, [pc, #256]	; (800122c <TrimRead+0x184>)
 800112a:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 800112c:	7a7b      	ldrb	r3, [r7, #9]
 800112e:	021b      	lsls	r3, r3, #8
 8001130:	b21a      	sxth	r2, r3
 8001132:	79bb      	ldrb	r3, [r7, #6]
 8001134:	b21b      	sxth	r3, r3
 8001136:	4313      	orrs	r3, r2
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <TrimRead+0x188>)
 800113c:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 800113e:	7afb      	ldrb	r3, [r7, #11]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b21a      	sxth	r2, r3
 8001144:	7abb      	ldrb	r3, [r7, #10]
 8001146:	b21b      	sxth	r3, r3
 8001148:	4313      	orrs	r3, r2
 800114a:	b21a      	sxth	r2, r3
 800114c:	4b39      	ldr	r3, [pc, #228]	; (8001234 <TrimRead+0x18c>)
 800114e:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001150:	7b7b      	ldrb	r3, [r7, #13]
 8001152:	021b      	lsls	r3, r3, #8
 8001154:	b21a      	sxth	r2, r3
 8001156:	7b3b      	ldrb	r3, [r7, #12]
 8001158:	b21b      	sxth	r3, r3
 800115a:	4313      	orrs	r3, r2
 800115c:	b21a      	sxth	r2, r3
 800115e:	4b36      	ldr	r3, [pc, #216]	; (8001238 <TrimRead+0x190>)
 8001160:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001162:	7bfb      	ldrb	r3, [r7, #15]
 8001164:	021b      	lsls	r3, r3, #8
 8001166:	b21a      	sxth	r2, r3
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21a      	sxth	r2, r3
 8001170:	4b32      	ldr	r3, [pc, #200]	; (800123c <TrimRead+0x194>)
 8001172:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001174:	7c7b      	ldrb	r3, [r7, #17]
 8001176:	021b      	lsls	r3, r3, #8
 8001178:	b21a      	sxth	r2, r3
 800117a:	7c3b      	ldrb	r3, [r7, #16]
 800117c:	b21b      	sxth	r3, r3
 800117e:	4313      	orrs	r3, r2
 8001180:	b21a      	sxth	r2, r3
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <TrimRead+0x198>)
 8001184:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 8001186:	7cfb      	ldrb	r3, [r7, #19]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7cbb      	ldrb	r3, [r7, #18]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	b21a      	sxth	r2, r3
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <TrimRead+0x19c>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 8001198:	7d7b      	ldrb	r3, [r7, #21]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21a      	sxth	r2, r3
 800119e:	7d3b      	ldrb	r3, [r7, #20]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b28      	ldr	r3, [pc, #160]	; (8001248 <TrimRead+0x1a0>)
 80011a8:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80011aa:	7dfb      	ldrb	r3, [r7, #23]
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b21a      	sxth	r2, r3
 80011b0:	7dbb      	ldrb	r3, [r7, #22]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	4b24      	ldr	r3, [pc, #144]	; (800124c <TrimRead+0x1a4>)
 80011ba:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011bc:	7e3b      	ldrb	r3, [r7, #24]
 80011be:	b29a      	uxth	r2, r3
 80011c0:	4b23      	ldr	r3, [pc, #140]	; (8001250 <TrimRead+0x1a8>)
 80011c2:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011c4:	7ebb      	ldrb	r3, [r7, #26]
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b21a      	sxth	r2, r3
 80011ca:	7e7b      	ldrb	r3, [r7, #25]
 80011cc:	b21b      	sxth	r3, r3
 80011ce:	4313      	orrs	r3, r2
 80011d0:	b21a      	sxth	r2, r3
 80011d2:	4b20      	ldr	r3, [pc, #128]	; (8001254 <TrimRead+0x1ac>)
 80011d4:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011d6:	7efb      	ldrb	r3, [r7, #27]
 80011d8:	b29a      	uxth	r2, r3
 80011da:	4b1f      	ldr	r3, [pc, #124]	; (8001258 <TrimRead+0x1b0>)
 80011dc:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011de:	7f3b      	ldrb	r3, [r7, #28]
 80011e0:	011b      	lsls	r3, r3, #4
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	7f7b      	ldrb	r3, [r7, #29]
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	f003 030f 	and.w	r3, r3, #15
 80011ec:	b21b      	sxth	r3, r3
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21a      	sxth	r2, r3
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <TrimRead+0x1b4>)
 80011f4:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011f6:	7fbb      	ldrb	r3, [r7, #30]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	b21a      	sxth	r2, r3
 80011fc:	7f7b      	ldrb	r3, [r7, #29]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	b21b      	sxth	r3, r3
 8001204:	4313      	orrs	r3, r2
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <TrimRead+0x1b8>)
 800120a:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 800120c:	7ffb      	ldrb	r3, [r7, #31]
 800120e:	b21a      	sxth	r2, r3
 8001210:	4b14      	ldr	r3, [pc, #80]	; (8001264 <TrimRead+0x1bc>)
 8001212:	801a      	strh	r2, [r3, #0]
}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000380 	.word	0x20000380
 8001220:	20000228 	.word	0x20000228
 8001224:	20000230 	.word	0x20000230
 8001228:	20000232 	.word	0x20000232
 800122c:	2000022a 	.word	0x2000022a
 8001230:	20000234 	.word	0x20000234
 8001234:	20000236 	.word	0x20000236
 8001238:	20000238 	.word	0x20000238
 800123c:	2000023a 	.word	0x2000023a
 8001240:	2000023c 	.word	0x2000023c
 8001244:	2000023e 	.word	0x2000023e
 8001248:	20000240 	.word	0x20000240
 800124c:	20000242 	.word	0x20000242
 8001250:	2000022c 	.word	0x2000022c
 8001254:	20000244 	.word	0x20000244
 8001258:	2000022e 	.word	0x2000022e
 800125c:	20000246 	.word	0x20000246
 8001260:	20000248 	.word	0x20000248
 8001264:	2000024a 	.word	0x2000024a

08001268 <BME280_Config>:

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001268:	b590      	push	{r4, r7, lr}
 800126a:	b089      	sub	sp, #36	; 0x24
 800126c:	af04      	add	r7, sp, #16
 800126e:	4604      	mov	r4, r0
 8001270:	4608      	mov	r0, r1
 8001272:	4611      	mov	r1, r2
 8001274:	461a      	mov	r2, r3
 8001276:	4623      	mov	r3, r4
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	4603      	mov	r3, r0
 800127c:	71bb      	strb	r3, [r7, #6]
 800127e:	460b      	mov	r3, r1
 8001280:	717b      	strb	r3, [r7, #5]
 8001282:	4613      	mov	r3, r2
 8001284:	713b      	strb	r3, [r7, #4]
	// Membaca Trimming parameters
	TrimRead();
 8001286:	f7ff ff0f 	bl	80010a8 <TrimRead>


	uint8_t datatowrite = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	73bb      	strb	r3, [r7, #14]

	// Reset BME
	datatowrite = 0xB6;  // Reset siklus pembacaan i2c
 8001292:	23b6      	movs	r3, #182	; 0xb6
 8001294:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001296:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129a:	9302      	str	r3, [sp, #8]
 800129c:	2301      	movs	r3, #1
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	f107 030f 	add.w	r3, r7, #15
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	2301      	movs	r3, #1
 80012a8:	22e0      	movs	r2, #224	; 0xe0
 80012aa:	21ec      	movs	r1, #236	; 0xec
 80012ac:	4858      	ldr	r0, [pc, #352]	; (8001410 <BME280_Config+0x1a8>)
 80012ae:	f007 fdc3 	bl	8008e38 <HAL_I2C_Mem_Write>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d002      	beq.n	80012be <BME280_Config+0x56>
	{
		return -1;
 80012b8:	f04f 33ff 	mov.w	r3, #4294967295
 80012bc:	e0a3      	b.n	8001406 <BME280_Config+0x19e>
	}

	BME280_Delay (100);
 80012be:	2064      	movs	r0, #100	; 0x64
 80012c0:	f7ff fee6 	bl	8001090 <BME280_Delay>

	// Memberikan oversampling humidity ke 0xF2
	datatowrite = osrs_h;
 80012c4:	797b      	ldrb	r3, [r7, #5]
 80012c6:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012cc:	9302      	str	r3, [sp, #8]
 80012ce:	2301      	movs	r3, #1
 80012d0:	9301      	str	r3, [sp, #4]
 80012d2:	f107 030f 	add.w	r3, r7, #15
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	22f2      	movs	r2, #242	; 0xf2
 80012dc:	21ec      	movs	r1, #236	; 0xec
 80012de:	484c      	ldr	r0, [pc, #304]	; (8001410 <BME280_Config+0x1a8>)
 80012e0:	f007 fdaa 	bl	8008e38 <HAL_I2C_Mem_Write>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d002      	beq.n	80012f0 <BME280_Config+0x88>
	{
		return -1;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	e08a      	b.n	8001406 <BME280_Config+0x19e>
	}
	BME280_Delay (100);
 80012f0:	2064      	movs	r0, #100	; 0x64
 80012f2:	f7ff fecd 	bl	8001090 <BME280_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	f107 030e 	add.w	r3, r7, #14
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2301      	movs	r3, #1
 8001308:	22f2      	movs	r2, #242	; 0xf2
 800130a:	21ec      	movs	r1, #236	; 0xec
 800130c:	4840      	ldr	r0, [pc, #256]	; (8001410 <BME280_Config+0x1a8>)
 800130e:	f007 fe8d 	bl	800902c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001312:	7bba      	ldrb	r2, [r7, #14]
 8001314:	7bfb      	ldrb	r3, [r7, #15]
 8001316:	429a      	cmp	r2, r3
 8001318:	d002      	beq.n	8001320 <BME280_Config+0xb8>
	{
		return -1;
 800131a:	f04f 33ff 	mov.w	r3, #4294967295
 800131e:	e072      	b.n	8001406 <BME280_Config+0x19e>
	}

	// Memberikan standby time dan koofisien filter IIR di alamat 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001320:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001324:	015b      	lsls	r3, r3, #5
 8001326:	b25a      	sxtb	r2, r3
 8001328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	b25b      	sxtb	r3, r3
 8001330:	4313      	orrs	r3, r2
 8001332:	b25b      	sxtb	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800133c:	9302      	str	r3, [sp, #8]
 800133e:	2301      	movs	r3, #1
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	f107 030f 	add.w	r3, r7, #15
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	2301      	movs	r3, #1
 800134a:	22f5      	movs	r2, #245	; 0xf5
 800134c:	21ec      	movs	r1, #236	; 0xec
 800134e:	4830      	ldr	r0, [pc, #192]	; (8001410 <BME280_Config+0x1a8>)
 8001350:	f007 fd72 	bl	8008e38 <HAL_I2C_Mem_Write>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d002      	beq.n	8001360 <BME280_Config+0xf8>
	{
		return -1;
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	e052      	b.n	8001406 <BME280_Config+0x19e>
	}
	BME280_Delay (100);
 8001360:	2064      	movs	r0, #100	; 0x64
 8001362:	f7ff fe95 	bl	8001090 <BME280_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 8001366:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800136a:	9302      	str	r3, [sp, #8]
 800136c:	2301      	movs	r3, #1
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	f107 030e 	add.w	r3, r7, #14
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2301      	movs	r3, #1
 8001378:	22f5      	movs	r2, #245	; 0xf5
 800137a:	21ec      	movs	r1, #236	; 0xec
 800137c:	4824      	ldr	r0, [pc, #144]	; (8001410 <BME280_Config+0x1a8>)
 800137e:	f007 fe55 	bl	800902c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001382:	7bba      	ldrb	r2, [r7, #14]
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	429a      	cmp	r2, r3
 8001388:	d002      	beq.n	8001390 <BME280_Config+0x128>
	{
		return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e03a      	b.n	8001406 <BME280_Config+0x19e>
	}

	// Memberikan data oversampling tekanan udara dan temperature ke alamat 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	015b      	lsls	r3, r3, #5
 8001394:	b25a      	sxtb	r2, r3
 8001396:	79bb      	ldrb	r3, [r7, #6]
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	b25b      	sxtb	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b25a      	sxtb	r2, r3
 80013a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	b25b      	sxtb	r3, r3
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80013ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b0:	9302      	str	r3, [sp, #8]
 80013b2:	2301      	movs	r3, #1
 80013b4:	9301      	str	r3, [sp, #4]
 80013b6:	f107 030f 	add.w	r3, r7, #15
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	22f4      	movs	r2, #244	; 0xf4
 80013c0:	21ec      	movs	r1, #236	; 0xec
 80013c2:	4813      	ldr	r0, [pc, #76]	; (8001410 <BME280_Config+0x1a8>)
 80013c4:	f007 fd38 	bl	8008e38 <HAL_I2C_Mem_Write>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <BME280_Config+0x16c>
	{
		return -1;
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	e018      	b.n	8001406 <BME280_Config+0x19e>
	}
	BME280_Delay (100);
 80013d4:	2064      	movs	r0, #100	; 0x64
 80013d6:	f7ff fe5b 	bl	8001090 <BME280_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	2301      	movs	r3, #1
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	f107 030e 	add.w	r3, r7, #14
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	22f4      	movs	r2, #244	; 0xf4
 80013ee:	21ec      	movs	r1, #236	; 0xec
 80013f0:	4807      	ldr	r0, [pc, #28]	; (8001410 <BME280_Config+0x1a8>)
 80013f2:	f007 fe1b 	bl	800902c <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013f6:	7bba      	ldrb	r2, [r7, #14]
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d002      	beq.n	8001404 <BME280_Config+0x19c>
	{
		return -1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e000      	b.n	8001406 <BME280_Config+0x19e>
	}

	return 0;
 8001404:	2300      	movs	r3, #0
}
 8001406:	4618      	mov	r0, r3
 8001408:	3714      	adds	r7, #20
 800140a:	46bd      	mov	sp, r7
 800140c:	bd90      	pop	{r4, r7, pc}
 800140e:	bf00      	nop
 8001410:	20000380 	.word	0x20000380

08001414 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Sebelum membaca check sensor ID
	HAL_I2C_Mem_Read(&hi2c3, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800141a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2301      	movs	r3, #1
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <BMEReadRaw+0x80>)
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2301      	movs	r3, #1
 800142a:	22d0      	movs	r2, #208	; 0xd0
 800142c:	21ec      	movs	r1, #236	; 0xec
 800142e:	481a      	ldr	r0, [pc, #104]	; (8001498 <BMEReadRaw+0x84>)
 8001430:	f007 fdfc 	bl	800902c <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001434:	4b17      	ldr	r3, [pc, #92]	; (8001494 <BMEReadRaw+0x80>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	2b60      	cmp	r3, #96	; 0x60
 800143a:	d124      	bne.n	8001486 <BMEReadRaw+0x72>
	{
		// membaca register 0xF7 ke 0xFE
//		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 6, HAL_MAX_DELAY);
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	9302      	str	r3, [sp, #8]
 8001442:	2306      	movs	r3, #6
 8001444:	9301      	str	r3, [sp, #4]
 8001446:	463b      	mov	r3, r7
 8001448:	9300      	str	r3, [sp, #0]
 800144a:	2301      	movs	r3, #1
 800144c:	22f7      	movs	r2, #247	; 0xf7
 800144e:	21ec      	movs	r1, #236	; 0xec
 8001450:	4811      	ldr	r0, [pc, #68]	; (8001498 <BMEReadRaw+0x84>)
 8001452:	f007 fdeb 	bl	800902c <HAL_I2C_Mem_Read>

		/* Kalkulasi data parameter mentah
		 * Data Pressure dan suhu adalah 20 bit sedangkan kelembapan adalah 16 bit
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 8001456:	783b      	ldrb	r3, [r7, #0]
 8001458:	031a      	lsls	r2, r3, #12
 800145a:	787b      	ldrb	r3, [r7, #1]
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	4313      	orrs	r3, r2
 8001460:	78ba      	ldrb	r2, [r7, #2]
 8001462:	0912      	lsrs	r2, r2, #4
 8001464:	b2d2      	uxtb	r2, r2
 8001466:	4313      	orrs	r3, r2
 8001468:	4a0c      	ldr	r2, [pc, #48]	; (800149c <BMEReadRaw+0x88>)
 800146a:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 800146c:	78fb      	ldrb	r3, [r7, #3]
 800146e:	031a      	lsls	r2, r3, #12
 8001470:	793b      	ldrb	r3, [r7, #4]
 8001472:	011b      	lsls	r3, r3, #4
 8001474:	4313      	orrs	r3, r2
 8001476:	797a      	ldrb	r2, [r7, #5]
 8001478:	0912      	lsrs	r2, r2, #4
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	4313      	orrs	r3, r2
 800147e:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <BMEReadRaw+0x8c>)
 8001480:	6013      	str	r3, [r2, #0]
//		hRaw = (RawData[6]<<8)|(RawData[7]);

		return 0;
 8001482:	2300      	movs	r3, #0
 8001484:	e001      	b.n	800148a <BMEReadRaw+0x76>
	}

	else return -1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000021c 	.word	0x2000021c
 8001498:	20000380 	.word	0x20000380
 800149c:	20000224 	.word	0x20000224
 80014a0:	20000220 	.word	0x20000220

080014a4 <BME280_compensate_T_int32>:
/* Menghasilkan suhu dalam DegC, resolusi 0.01 DegC. Output “5123” sama dengan 51.23 DegC.
   t_fine membawa suhu pembacaan yang terkoneksi dengan global variabel.
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	10da      	asrs	r2, r3, #3
 80014b0:	4b19      	ldr	r3, [pc, #100]	; (8001518 <BME280_compensate_T_int32+0x74>)
 80014b2:	881b      	ldrh	r3, [r3, #0]
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	4a18      	ldr	r2, [pc, #96]	; (800151c <BME280_compensate_T_int32+0x78>)
 80014ba:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	12db      	asrs	r3, r3, #11
 80014c4:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	111b      	asrs	r3, r3, #4
 80014ca:	4a13      	ldr	r2, [pc, #76]	; (8001518 <BME280_compensate_T_int32+0x74>)
 80014cc:	8812      	ldrh	r2, [r2, #0]
 80014ce:	1a9b      	subs	r3, r3, r2
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	1112      	asrs	r2, r2, #4
 80014d4:	4910      	ldr	r1, [pc, #64]	; (8001518 <BME280_compensate_T_int32+0x74>)
 80014d6:	8809      	ldrh	r1, [r1, #0]
 80014d8:	1a52      	subs	r2, r2, r1
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	131b      	asrs	r3, r3, #12
 80014e0:	4a0f      	ldr	r2, [pc, #60]	; (8001520 <BME280_compensate_T_int32+0x7c>)
 80014e2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014e6:	fb02 f303 	mul.w	r3, r2, r3
 80014ea:	139b      	asrs	r3, r3, #14
 80014ec:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4413      	add	r3, r2
 80014f4:	4a0b      	ldr	r2, [pc, #44]	; (8001524 <BME280_compensate_T_int32+0x80>)
 80014f6:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <BME280_compensate_T_int32+0x80>)
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4613      	mov	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	3380      	adds	r3, #128	; 0x80
 8001504:	121b      	asrs	r3, r3, #8
 8001506:	60fb      	str	r3, [r7, #12]
	return T;
 8001508:	68fb      	ldr	r3, [r7, #12]
}
 800150a:	4618      	mov	r0, r3
 800150c:	371c      	adds	r7, #28
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	20000228 	.word	0x20000228
 800151c:	20000230 	.word	0x20000230
 8001520:	20000232 	.word	0x20000232
 8001524:	2000024c 	.word	0x2000024c

08001528 <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Mengembalikan tekanan dalam Pa sebagai bilangan bulat 32 bit tidak terkonversi dalam format Q24.8 (24 bit integer dan 8 bit fraksional).
   Nilai output "24674867" mewakili 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 8001528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800152c:	b0ca      	sub	sp, #296	; 0x128
 800152e:	af00      	add	r7, sp, #0
 8001530:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001534:	4baf      	ldr	r3, [pc, #700]	; (80017f4 <BME280_compensate_P_int64+0x2cc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	17da      	asrs	r2, r3, #31
 800153a:	461c      	mov	r4, r3
 800153c:	4615      	mov	r5, r2
 800153e:	f5b4 3afa 	subs.w	sl, r4, #128000	; 0x1f400
 8001542:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001546:	e9c7 ab48 	strd	sl, fp, [r7, #288]	; 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800154a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800154e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001552:	fb03 f102 	mul.w	r1, r3, r2
 8001556:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800155a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800155e:	fb02 f303 	mul.w	r3, r2, r3
 8001562:	18ca      	adds	r2, r1, r3
 8001564:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001568:	fba3 8903 	umull	r8, r9, r3, r3
 800156c:	eb02 0309 	add.w	r3, r2, r9
 8001570:	4699      	mov	r9, r3
 8001572:	4ba1      	ldr	r3, [pc, #644]	; (80017f8 <BME280_compensate_P_int64+0x2d0>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	b21b      	sxth	r3, r3
 800157a:	17da      	asrs	r2, r3, #31
 800157c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001580:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001584:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8001588:	4603      	mov	r3, r0
 800158a:	fb03 f209 	mul.w	r2, r3, r9
 800158e:	460b      	mov	r3, r1
 8001590:	fb08 f303 	mul.w	r3, r8, r3
 8001594:	4413      	add	r3, r2
 8001596:	4602      	mov	r2, r0
 8001598:	fba8 1202 	umull	r1, r2, r8, r2
 800159c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80015a0:	460a      	mov	r2, r1
 80015a2:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80015a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80015aa:	4413      	add	r3, r2
 80015ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80015b0:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80015b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
 80015b8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015bc:	4b8f      	ldr	r3, [pc, #572]	; (80017fc <BME280_compensate_P_int64+0x2d4>)
 80015be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	17da      	asrs	r2, r3, #31
 80015c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80015ca:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80015ce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015d2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	; 0xb0
 80015d6:	462a      	mov	r2, r5
 80015d8:	fb02 f203 	mul.w	r2, r2, r3
 80015dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80015e0:	4621      	mov	r1, r4
 80015e2:	fb01 f303 	mul.w	r3, r1, r3
 80015e6:	441a      	add	r2, r3
 80015e8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80015ec:	4621      	mov	r1, r4
 80015ee:	fba3 1301 	umull	r1, r3, r3, r1
 80015f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80015f6:	460b      	mov	r3, r1
 80015f8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80015fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001600:	18d3      	adds	r3, r2, r3
 8001602:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001606:	f04f 0000 	mov.w	r0, #0
 800160a:	f04f 0100 	mov.w	r1, #0
 800160e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	; 0x100
 8001612:	462b      	mov	r3, r5
 8001614:	0459      	lsls	r1, r3, #17
 8001616:	4623      	mov	r3, r4
 8001618:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800161c:	4623      	mov	r3, r4
 800161e:	0458      	lsls	r0, r3, #17
 8001620:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001624:	1814      	adds	r4, r2, r0
 8001626:	643c      	str	r4, [r7, #64]	; 0x40
 8001628:	414b      	adcs	r3, r1
 800162a:	647b      	str	r3, [r7, #68]	; 0x44
 800162c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001630:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001634:	4b72      	ldr	r3, [pc, #456]	; (8001800 <BME280_compensate_P_int64+0x2d8>)
 8001636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163a:	b21b      	sxth	r3, r3
 800163c:	17da      	asrs	r2, r3, #31
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001642:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001646:	f04f 0000 	mov.w	r0, #0
 800164a:	f04f 0100 	mov.w	r1, #0
 800164e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001652:	00d9      	lsls	r1, r3, #3
 8001654:	2000      	movs	r0, #0
 8001656:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800165a:	1814      	adds	r4, r2, r0
 800165c:	63bc      	str	r4, [r7, #56]	; 0x38
 800165e:	414b      	adcs	r3, r1
 8001660:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001662:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001666:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800166a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800166e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001672:	fb03 f102 	mul.w	r1, r3, r2
 8001676:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800167a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800167e:	fb02 f303 	mul.w	r3, r2, r3
 8001682:	18ca      	adds	r2, r1, r3
 8001684:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001688:	fba3 1303 	umull	r1, r3, r3, r3
 800168c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001690:	460b      	mov	r3, r1
 8001692:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800169a:	18d3      	adds	r3, r2, r3
 800169c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80016a0:	4b58      	ldr	r3, [pc, #352]	; (8001804 <BME280_compensate_P_int64+0x2dc>)
 80016a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a6:	b21b      	sxth	r3, r3
 80016a8:	17da      	asrs	r2, r3, #31
 80016aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80016ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80016b2:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	; 0xf8
 80016b6:	462b      	mov	r3, r5
 80016b8:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80016bc:	4642      	mov	r2, r8
 80016be:	fb02 f203 	mul.w	r2, r2, r3
 80016c2:	464b      	mov	r3, r9
 80016c4:	4621      	mov	r1, r4
 80016c6:	fb01 f303 	mul.w	r3, r1, r3
 80016ca:	4413      	add	r3, r2
 80016cc:	4622      	mov	r2, r4
 80016ce:	4641      	mov	r1, r8
 80016d0:	fba2 1201 	umull	r1, r2, r2, r1
 80016d4:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 80016d8:	460a      	mov	r2, r1
 80016da:	f8c7 20f0 	str.w	r2, [r7, #240]	; 0xf0
 80016de:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80016e2:	4413      	add	r3, r2
 80016e4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80016e8:	f04f 0000 	mov.w	r0, #0
 80016ec:	f04f 0100 	mov.w	r1, #0
 80016f0:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	; 0xf0
 80016f4:	4623      	mov	r3, r4
 80016f6:	0a18      	lsrs	r0, r3, #8
 80016f8:	462b      	mov	r3, r5
 80016fa:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016fe:	462b      	mov	r3, r5
 8001700:	1219      	asrs	r1, r3, #8
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <BME280_compensate_P_int64+0x2e0>)
 8001704:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001708:	b21b      	sxth	r3, r3
 800170a:	17da      	asrs	r2, r3, #31
 800170c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001710:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001714:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001718:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	; 0x98
 800171c:	464a      	mov	r2, r9
 800171e:	fb02 f203 	mul.w	r2, r2, r3
 8001722:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001726:	4644      	mov	r4, r8
 8001728:	fb04 f303 	mul.w	r3, r4, r3
 800172c:	441a      	add	r2, r3
 800172e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001732:	4644      	mov	r4, r8
 8001734:	fba3 4304 	umull	r4, r3, r3, r4
 8001738:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800173c:	4623      	mov	r3, r4
 800173e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001742:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001746:	18d3      	adds	r3, r2, r3
 8001748:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	f04f 0300 	mov.w	r3, #0
 8001754:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001758:	464c      	mov	r4, r9
 800175a:	0323      	lsls	r3, r4, #12
 800175c:	4644      	mov	r4, r8
 800175e:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001762:	4644      	mov	r4, r8
 8001764:	0322      	lsls	r2, r4, #12
 8001766:	1884      	adds	r4, r0, r2
 8001768:	633c      	str	r4, [r7, #48]	; 0x30
 800176a:	eb41 0303 	adc.w	r3, r1, r3
 800176e:	637b      	str	r3, [r7, #52]	; 0x34
 8001770:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001774:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 8001778:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 800177c:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8001780:	f8c7 1094 	str.w	r1, [r7, #148]	; 0x94
 8001784:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <BME280_compensate_P_int64+0x2e4>)
 800178a:	881b      	ldrh	r3, [r3, #0]
 800178c:	b29b      	uxth	r3, r3
 800178e:	2200      	movs	r2, #0
 8001790:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001794:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001798:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800179c:	462b      	mov	r3, r5
 800179e:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80017a2:	4642      	mov	r2, r8
 80017a4:	fb02 f203 	mul.w	r2, r2, r3
 80017a8:	464b      	mov	r3, r9
 80017aa:	4621      	mov	r1, r4
 80017ac:	fb01 f303 	mul.w	r3, r1, r3
 80017b0:	4413      	add	r3, r2
 80017b2:	4622      	mov	r2, r4
 80017b4:	4641      	mov	r1, r8
 80017b6:	fba2 1201 	umull	r1, r2, r2, r1
 80017ba:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80017be:	460a      	mov	r2, r1
 80017c0:	f8c7 20e0 	str.w	r2, [r7, #224]	; 0xe0
 80017c4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80017c8:	4413      	add	r3, r2
 80017ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80017ce:	f04f 0200 	mov.w	r2, #0
 80017d2:	f04f 0300 	mov.w	r3, #0
 80017d6:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 80017da:	4629      	mov	r1, r5
 80017dc:	104a      	asrs	r2, r1, #1
 80017de:	4629      	mov	r1, r5
 80017e0:	17cb      	asrs	r3, r1, #31
 80017e2:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	if (var1 == 0)
 80017e6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80017ea:	4313      	orrs	r3, r2
 80017ec:	d110      	bne.n	8001810 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // menghindari exception yang disebabkan oleh pembagian dengan nol
 80017ee:	2300      	movs	r3, #0
 80017f0:	e154      	b.n	8001a9c <BME280_compensate_P_int64+0x574>
 80017f2:	bf00      	nop
 80017f4:	2000024c 	.word	0x2000024c
 80017f8:	2000023c 	.word	0x2000023c
 80017fc:	2000023a 	.word	0x2000023a
 8001800:	20000238 	.word	0x20000238
 8001804:	20000236 	.word	0x20000236
 8001808:	20000234 	.word	0x20000234
 800180c:	2000022a 	.word	0x2000022a
	}
	p = 1048576-adc_P;
 8001810:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001814:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8001818:	17da      	asrs	r2, r3, #31
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
 800181c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800181e:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001822:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001826:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800182a:	105b      	asrs	r3, r3, #1
 800182c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001830:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001834:	07db      	lsls	r3, r3, #31
 8001836:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800183a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 800183e:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8001842:	4621      	mov	r1, r4
 8001844:	1a89      	subs	r1, r1, r2
 8001846:	67b9      	str	r1, [r7, #120]	; 0x78
 8001848:	4629      	mov	r1, r5
 800184a:	eb61 0303 	sbc.w	r3, r1, r3
 800184e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001850:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001854:	4622      	mov	r2, r4
 8001856:	462b      	mov	r3, r5
 8001858:	1891      	adds	r1, r2, r2
 800185a:	6239      	str	r1, [r7, #32]
 800185c:	415b      	adcs	r3, r3
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
 8001860:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001864:	4621      	mov	r1, r4
 8001866:	1851      	adds	r1, r2, r1
 8001868:	61b9      	str	r1, [r7, #24]
 800186a:	4629      	mov	r1, r5
 800186c:	414b      	adcs	r3, r1
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	f04f 0200 	mov.w	r2, #0
 8001874:	f04f 0300 	mov.w	r3, #0
 8001878:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800187c:	4649      	mov	r1, r9
 800187e:	018b      	lsls	r3, r1, #6
 8001880:	4641      	mov	r1, r8
 8001882:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001886:	4641      	mov	r1, r8
 8001888:	018a      	lsls	r2, r1, #6
 800188a:	4641      	mov	r1, r8
 800188c:	1889      	adds	r1, r1, r2
 800188e:	6139      	str	r1, [r7, #16]
 8001890:	4649      	mov	r1, r9
 8001892:	eb43 0101 	adc.w	r1, r3, r1
 8001896:	6179      	str	r1, [r7, #20]
 8001898:	f04f 0200 	mov.w	r2, #0
 800189c:	f04f 0300 	mov.w	r3, #0
 80018a0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018a4:	4649      	mov	r1, r9
 80018a6:	008b      	lsls	r3, r1, #2
 80018a8:	4641      	mov	r1, r8
 80018aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018ae:	4641      	mov	r1, r8
 80018b0:	008a      	lsls	r2, r1, #2
 80018b2:	4610      	mov	r0, r2
 80018b4:	4619      	mov	r1, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	4622      	mov	r2, r4
 80018ba:	189b      	adds	r3, r3, r2
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	460b      	mov	r3, r1
 80018c0:	462a      	mov	r2, r5
 80018c2:	eb42 0303 	adc.w	r3, r2, r3
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018d4:	4649      	mov	r1, r9
 80018d6:	008b      	lsls	r3, r1, #2
 80018d8:	4641      	mov	r1, r8
 80018da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018de:	4641      	mov	r1, r8
 80018e0:	008a      	lsls	r2, r1, #2
 80018e2:	4610      	mov	r0, r2
 80018e4:	4619      	mov	r1, r3
 80018e6:	4603      	mov	r3, r0
 80018e8:	4622      	mov	r2, r4
 80018ea:	189b      	adds	r3, r3, r2
 80018ec:	673b      	str	r3, [r7, #112]	; 0x70
 80018ee:	462b      	mov	r3, r5
 80018f0:	460a      	mov	r2, r1
 80018f2:	eb42 0303 	adc.w	r3, r2, r3
 80018f6:	677b      	str	r3, [r7, #116]	; 0x74
 80018f8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 80018fc:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001900:	f7ff f9c2 	bl	8000c88 <__aeabi_ldivmod>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 800190c:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <BME280_compensate_P_int64+0x580>)
 800190e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001912:	b21b      	sxth	r3, r3
 8001914:	17da      	asrs	r2, r3, #31
 8001916:	66bb      	str	r3, [r7, #104]	; 0x68
 8001918:	66fa      	str	r2, [r7, #108]	; 0x6c
 800191a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800191e:	f04f 0000 	mov.w	r0, #0
 8001922:	f04f 0100 	mov.w	r1, #0
 8001926:	0b50      	lsrs	r0, r2, #13
 8001928:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800192c:	1359      	asrs	r1, r3, #13
 800192e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	; 0x68
 8001932:	462b      	mov	r3, r5
 8001934:	fb00 f203 	mul.w	r2, r0, r3
 8001938:	4623      	mov	r3, r4
 800193a:	fb03 f301 	mul.w	r3, r3, r1
 800193e:	4413      	add	r3, r2
 8001940:	4622      	mov	r2, r4
 8001942:	fba2 1200 	umull	r1, r2, r2, r0
 8001946:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800194a:	460a      	mov	r2, r1
 800194c:	f8c7 20d8 	str.w	r2, [r7, #216]	; 0xd8
 8001950:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8001954:	4413      	add	r3, r2
 8001956:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800195a:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 800195e:	f04f 0000 	mov.w	r0, #0
 8001962:	f04f 0100 	mov.w	r1, #0
 8001966:	0b50      	lsrs	r0, r2, #13
 8001968:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800196c:	1359      	asrs	r1, r3, #13
 800196e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001972:	462b      	mov	r3, r5
 8001974:	fb00 f203 	mul.w	r2, r0, r3
 8001978:	4623      	mov	r3, r4
 800197a:	fb03 f301 	mul.w	r3, r3, r1
 800197e:	4413      	add	r3, r2
 8001980:	4622      	mov	r2, r4
 8001982:	fba2 1200 	umull	r1, r2, r2, r0
 8001986:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800198a:	460a      	mov	r2, r1
 800198c:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8001990:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8001994:	4413      	add	r3, r2
 8001996:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800199a:	f04f 0200 	mov.w	r2, #0
 800199e:	f04f 0300 	mov.w	r3, #0
 80019a2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80019a6:	4621      	mov	r1, r4
 80019a8:	0e4a      	lsrs	r2, r1, #25
 80019aa:	4629      	mov	r1, r5
 80019ac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019b0:	4629      	mov	r1, r5
 80019b2:	164b      	asrs	r3, r1, #25
 80019b4:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019b8:	4b3c      	ldr	r3, [pc, #240]	; (8001aac <BME280_compensate_P_int64+0x584>)
 80019ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	17da      	asrs	r2, r3, #31
 80019c2:	663b      	str	r3, [r7, #96]	; 0x60
 80019c4:	667a      	str	r2, [r7, #100]	; 0x64
 80019c6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019ca:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80019ce:	462a      	mov	r2, r5
 80019d0:	fb02 f203 	mul.w	r2, r2, r3
 80019d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019d8:	4621      	mov	r1, r4
 80019da:	fb01 f303 	mul.w	r3, r1, r3
 80019de:	4413      	add	r3, r2
 80019e0:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80019e4:	4621      	mov	r1, r4
 80019e6:	fba2 1201 	umull	r1, r2, r2, r1
 80019ea:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 80019ee:	460a      	mov	r2, r1
 80019f0:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80019f4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80019f8:	4413      	add	r3, r2
 80019fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	0cca      	lsrs	r2, r1, #19
 8001a0e:	4629      	mov	r1, r5
 8001a10:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a14:	4629      	mov	r1, r5
 8001a16:	14cb      	asrs	r3, r1, #19
 8001a18:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a1c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8001a20:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8001a24:	1884      	adds	r4, r0, r2
 8001a26:	65bc      	str	r4, [r7, #88]	; 0x58
 8001a28:	eb41 0303 	adc.w	r3, r1, r3
 8001a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001a2e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8001a32:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8001a36:	4621      	mov	r1, r4
 8001a38:	1889      	adds	r1, r1, r2
 8001a3a:	6539      	str	r1, [r7, #80]	; 0x50
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	eb43 0101 	adc.w	r1, r3, r1
 8001a42:	6579      	str	r1, [r7, #84]	; 0x54
 8001a44:	f04f 0000 	mov.w	r0, #0
 8001a48:	f04f 0100 	mov.w	r1, #0
 8001a4c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001a50:	4623      	mov	r3, r4
 8001a52:	0a18      	lsrs	r0, r3, #8
 8001a54:	462b      	mov	r3, r5
 8001a56:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a5a:	462b      	mov	r3, r5
 8001a5c:	1219      	asrs	r1, r3, #8
 8001a5e:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <BME280_compensate_P_int64+0x588>)
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	17da      	asrs	r2, r3, #31
 8001a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8001a6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	f04f 0300 	mov.w	r3, #0
 8001a74:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	; 0x48
 8001a78:	464c      	mov	r4, r9
 8001a7a:	0123      	lsls	r3, r4, #4
 8001a7c:	4644      	mov	r4, r8
 8001a7e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a82:	4644      	mov	r4, r8
 8001a84:	0122      	lsls	r2, r4, #4
 8001a86:	1884      	adds	r4, r0, r2
 8001a88:	603c      	str	r4, [r7, #0]
 8001a8a:	eb41 0303 	adc.w	r3, r1, r3
 8001a8e:	607b      	str	r3, [r7, #4]
 8001a90:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a94:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
	return (uint32_t)p;
 8001a98:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aa8:	20000242 	.word	0x20000242
 8001aac:	20000240 	.word	0x20000240
 8001ab0:	2000023e 	.word	0x2000023e

08001ab4 <BME280_Measure>:

/* Mengukur suhu, tekanan, dan kelembaban
 * Nilai akan disimpan dalam parameter yang diteruskan ke fungsi
 */
void BME280_Measure (void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ab8:	f7ff fcac 	bl	8001414 <BMEReadRaw>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d142      	bne.n	8001b48 <BME280_Measure+0x94>
	{
		  if (tRaw == 0x800000) Temperature = 0; // nilai dalam kasus pengukuran suhu dinonaktifkan
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <BME280_Measure+0xb0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001aca:	d104      	bne.n	8001ad6 <BME280_Measure+0x22>
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <BME280_Measure+0xb4>)
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	e016      	b.n	8001b04 <BME280_Measure+0x50>
		  else
		  {
			  Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // sesuai dengan datasheet, suhu adalah x100
 8001ad6:	4b23      	ldr	r3, [pc, #140]	; (8001b64 <BME280_Measure+0xb0>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fce2 	bl	80014a4 <BME280_compensate_T_int32>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fd1e 	bl	8000524 <__aeabi_i2d>
 8001ae8:	f04f 0200 	mov.w	r2, #0
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <BME280_Measure+0xb8>)
 8001aee:	f7fe fead 	bl	800084c <__aeabi_ddiv>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4610      	mov	r0, r2
 8001af8:	4619      	mov	r1, r3
 8001afa:	f7ff f875 	bl	8000be8 <__aeabi_d2f>
 8001afe:	4603      	mov	r3, r0
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <BME280_Measure+0xb4>)
 8001b02:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) Pressure = 0; // nilai dalam kasus pengukuran tekanan dinonaktifkan
 8001b04:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <BME280_Measure+0xbc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001b0c:	d104      	bne.n	8001b18 <BME280_Measure+0x64>
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <BME280_Measure+0xc0>)
 8001b10:	f04f 0200 	mov.w	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
	// jika perangkat terlepas
	else
	{
		Temperature = Pressure = Humidity = 0;
	}
}
 8001b16:	e023      	b.n	8001b60 <BME280_Measure+0xac>
			  Pressure = (BME280_compensate_P_int64 (pRaw))/256.0;  // sesuai dengan datasheet, tekanan adalah x256
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <BME280_Measure+0xbc>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fd03 	bl	8001528 <BME280_compensate_P_int64>
 8001b22:	4603      	mov	r3, r0
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7fe fced 	bl	8000504 <__aeabi_ui2d>
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <BME280_Measure+0xc4>)
 8001b30:	f7fe fe8c 	bl	800084c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4610      	mov	r0, r2
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7ff f854 	bl	8000be8 <__aeabi_d2f>
 8001b40:	4603      	mov	r3, r0
 8001b42:	4a0c      	ldr	r2, [pc, #48]	; (8001b74 <BME280_Measure+0xc0>)
 8001b44:	6013      	str	r3, [r2, #0]
}
 8001b46:	e00b      	b.n	8001b60 <BME280_Measure+0xac>
		Temperature = Pressure = Humidity = 0;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <BME280_Measure+0xc8>)
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <BME280_Measure+0xc8>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a07      	ldr	r2, [pc, #28]	; (8001b74 <BME280_Measure+0xc0>)
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <BME280_Measure+0xc0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a02      	ldr	r2, [pc, #8]	; (8001b68 <BME280_Measure+0xb4>)
 8001b5e:	6013      	str	r3, [r2, #0]
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000220 	.word	0x20000220
 8001b68:	20000fac 	.word	0x20000fac
 8001b6c:	40590000 	.word	0x40590000
 8001b70:	20000224 	.word	0x20000224
 8001b74:	20000fb0 	.word	0x20000fb0
 8001b78:	40700000 	.word	0x40700000
 8001b7c:	20000fb4 	.word	0x20000fb4

08001b80 <prv_parse_number>:
#define CIHN(x)             (((x) >= '0' && (x) <= '9') || ((x) >= 'a' && (x) <= 'f') || ((x) >= 'A' && (x) <= 'F'))
#define CTN(x)              ((x) - '0')
#define CHTN(x)             (((x) >= '0' && (x) <= '9') ? ((x) - '0') : (((x) >= 'a' && (x) <= 'z') ? ((x) - 'a' + 10) : (((x) >= 'A' && (x) <= 'Z') ? ((x) - 'A' + 10) : 0)))

static int32_t
prv_parse_number(lwgps_t* gh, const char* t) {
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
    int32_t res = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60fb      	str	r3, [r7, #12]
    uint8_t minus;

    if (t == NULL) {
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d106      	bne.n	8001ba2 <prv_parse_number+0x22>
        t = gh->p.term_str;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3371      	adds	r3, #113	; 0x71
 8001b98:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}
 8001b9a:	e002      	b.n	8001ba2 <prv_parse_number+0x22>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <prv_parse_number+0x30>
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d0f5      	beq.n	8001b9c <prv_parse_number+0x1c>

    minus = (*t == '-' ? (++t, 1) : 0);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b2d      	cmp	r3, #45	; 0x2d
 8001bb6:	d104      	bne.n	8001bc2 <prv_parse_number+0x42>
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	603b      	str	r3, [r7, #0]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <prv_parse_number+0x44>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	72fb      	strb	r3, [r7, #11]
    for (; t != NULL && CIN(*t); ++t) {
 8001bc6:	e00d      	b.n	8001be4 <prv_parse_number+0x64>
        res = 10 * res + CTN(*t);
 8001bc8:	68fa      	ldr	r2, [r7, #12]
 8001bca:	4613      	mov	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	4413      	add	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	3b30      	subs	r3, #48	; 0x30
 8001bda:	4413      	add	r3, r2
 8001bdc:	60fb      	str	r3, [r7, #12]
    for (; t != NULL && CIN(*t); ++t) {
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	3301      	adds	r3, #1
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d007      	beq.n	8001bfa <prv_parse_number+0x7a>
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b2f      	cmp	r3, #47	; 0x2f
 8001bf0:	d903      	bls.n	8001bfa <prv_parse_number+0x7a>
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b39      	cmp	r3, #57	; 0x39
 8001bf8:	d9e6      	bls.n	8001bc8 <prv_parse_number+0x48>
    }
    return minus ? -res : res;
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d002      	beq.n	8001c06 <prv_parse_number+0x86>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	425b      	negs	r3, r3
 8001c04:	e000      	b.n	8001c08 <prv_parse_number+0x88>
 8001c06:	68fb      	ldr	r3, [r7, #12]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3714      	adds	r7, #20
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <prv_parse_float_number>:

static lwgps_float_t
prv_parse_float_number(lwgps_t* gh, const char* t) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    lwgps_float_t res;

    if (t == NULL) {
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d106      	bne.n	8001c32 <prv_parse_float_number+0x1e>
        t = gh->p.term_str;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	3371      	adds	r3, #113	; 0x71
 8001c28:	603b      	str	r3, [r7, #0]
    }
    for (; t != NULL && *t == ' '; ++t) {}
 8001c2a:	e002      	b.n	8001c32 <prv_parse_float_number+0x1e>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	603b      	str	r3, [r7, #0]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <prv_parse_float_number+0x2c>
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b20      	cmp	r3, #32
 8001c3e:	d0f5      	beq.n	8001c2c <prv_parse_float_number+0x18>

#if LWGPS_CFG_DOUBLE
    res = strtod(t, NULL);
 8001c40:	2100      	movs	r1, #0
 8001c42:	6838      	ldr	r0, [r7, #0]
 8001c44:	f014 fe98 	bl	8016978 <strtod>
 8001c48:	ed87 0b02 	vstr	d0, [r7, #8]
#else
    res = strtof(t, NULL);
#endif

    return FLT(res);
 8001c4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c50:	ec43 2b17 	vmov	d7, r2, r3
}
 8001c54:	eeb0 0a47 	vmov.f32	s0, s14
 8001c58:	eef0 0a67 	vmov.f32	s1, s15
 8001c5c:	3710      	adds	r7, #16
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
	...

08001c64 <prv_parse_lat_long>:

static lwgps_float_t
prv_parse_lat_long(lwgps_t* gh) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    lwgps_float_t ll, deg, min;

    ll = prv_parse_float_number(gh, NULL);
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffd0 	bl	8001c14 <prv_parse_float_number>
 8001c74:	ed87 0b06 	vstr	d0, [r7, #24]
    deg = FLT((int)((int)ll / 100));
 8001c78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c7c:	f7fe ff6c 	bl	8000b58 <__aeabi_d2iz>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <prv_parse_lat_long+0x94>)
 8001c84:	fb82 1203 	smull	r1, r2, r2, r3
 8001c88:	1152      	asrs	r2, r2, #5
 8001c8a:	17db      	asrs	r3, r3, #31
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc48 	bl	8000524 <__aeabi_i2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    min = ll - (deg * FLT(100));
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	4b16      	ldr	r3, [pc, #88]	; (8001cfc <prv_parse_lat_long+0x98>)
 8001ca2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ca6:	f7fe fca7 	bl	80005f8 <__aeabi_dmul>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cb2:	f7fe fae9 	bl	8000288 <__aeabi_dsub>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	460b      	mov	r3, r1
 8001cba:	e9c7 2302 	strd	r2, r3, [r7, #8]
    ll = deg + (min / FLT(60.0));
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <prv_parse_lat_long+0x9c>)
 8001cc4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001cc8:	f7fe fdc0 	bl	800084c <__aeabi_ddiv>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001cd4:	f7fe fada 	bl	800028c <__adddf3>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	e9c7 2306 	strd	r2, r3, [r7, #24]

    return ll;
 8001ce0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ce4:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ce8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cec:	eef0 0a67 	vmov.f32	s1, s15
 8001cf0:	3720      	adds	r7, #32
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	51eb851f 	.word	0x51eb851f
 8001cfc:	40590000 	.word	0x40590000
 8001d00:	404e0000 	.word	0x404e0000

08001d04 <prv_parse_term>:

static uint8_t
prv_parse_term(lwgps_t* gh) {
 8001d04:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
    if (gh->p.term_num == 0) {
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 8001d14:	2900      	cmp	r1, #0
 8001d16:	d169      	bne.n	8001dec <prv_parse_term+0xe8>
        if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
        } else if (!strncmp(gh->p.term_str, "$GPGGA", 6) || !strncmp(gh->p.term_str, "$GNGGA", 6)) {
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	3371      	adds	r3, #113	; 0x71
 8001d1c:	2206      	movs	r2, #6
 8001d1e:	49ba      	ldr	r1, [pc, #744]	; (8002008 <prv_parse_term+0x304>)
 8001d20:	4618      	mov	r0, r3
 8001d22:	f015 fc54 	bl	80175ce <strncmp>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d009      	beq.n	8001d40 <prv_parse_term+0x3c>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3371      	adds	r3, #113	; 0x71
 8001d30:	2206      	movs	r2, #6
 8001d32:	49b6      	ldr	r1, [pc, #728]	; (800200c <prv_parse_term+0x308>)
 8001d34:	4618      	mov	r0, r3
 8001d36:	f015 fc4a 	bl	80175ce <strncmp>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d104      	bne.n	8001d4a <prv_parse_term+0x46>
            gh->p.stat = STAT_GGA;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001d48:	e04e      	b.n	8001de8 <prv_parse_term+0xe4>
#endif
#if LWGPS_CFG_STATEMENT_GPGSA
        } else if (!strncmp(gh->p.term_str, "$GPGSA", 6) || !strncmp(gh->p.term_str, "$GNGSA", 6)) {
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	3371      	adds	r3, #113	; 0x71
 8001d4e:	2206      	movs	r2, #6
 8001d50:	49af      	ldr	r1, [pc, #700]	; (8002010 <prv_parse_term+0x30c>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f015 fc3b 	bl	80175ce <strncmp>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d009      	beq.n	8001d72 <prv_parse_term+0x6e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3371      	adds	r3, #113	; 0x71
 8001d62:	2206      	movs	r2, #6
 8001d64:	49ab      	ldr	r1, [pc, #684]	; (8002014 <prv_parse_term+0x310>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f015 fc31 	bl	80175ce <strncmp>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d104      	bne.n	8001d7c <prv_parse_term+0x78>
            gh->p.stat = STAT_GSA;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2202      	movs	r2, #2
 8001d76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001d7a:	e035      	b.n	8001de8 <prv_parse_term+0xe4>
#endif
#if LWGPS_CFG_STATEMENT_GPGSV
        } else if (!strncmp(gh->p.term_str, "$GPGSV", 6) || !strncmp(gh->p.term_str, "$GNGSV", 6)) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3371      	adds	r3, #113	; 0x71
 8001d80:	2206      	movs	r2, #6
 8001d82:	49a5      	ldr	r1, [pc, #660]	; (8002018 <prv_parse_term+0x314>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f015 fc22 	bl	80175ce <strncmp>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <prv_parse_term+0xa0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3371      	adds	r3, #113	; 0x71
 8001d94:	2206      	movs	r2, #6
 8001d96:	49a1      	ldr	r1, [pc, #644]	; (800201c <prv_parse_term+0x318>)
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f015 fc18 	bl	80175ce <strncmp>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d104      	bne.n	8001dae <prv_parse_term+0xaa>
            gh->p.stat = STAT_GSV;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2203      	movs	r2, #3
 8001da8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001dac:	e01c      	b.n	8001de8 <prv_parse_term+0xe4>
#endif
#if LWGPS_CFG_STATEMENT_GPRMC
        } else if (!strncmp(gh->p.term_str, "$GPRMC", 6) || !strncmp(gh->p.term_str, "$GNRMC", 6)) {
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	3371      	adds	r3, #113	; 0x71
 8001db2:	2206      	movs	r2, #6
 8001db4:	499a      	ldr	r1, [pc, #616]	; (8002020 <prv_parse_term+0x31c>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f015 fc09 	bl	80175ce <strncmp>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <prv_parse_term+0xd2>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	3371      	adds	r3, #113	; 0x71
 8001dc6:	2206      	movs	r2, #6
 8001dc8:	4996      	ldr	r1, [pc, #600]	; (8002024 <prv_parse_term+0x320>)
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f015 fbff 	bl	80175ce <strncmp>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d104      	bne.n	8001de0 <prv_parse_term+0xdc>
            gh->p.stat = STAT_RMC;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2204      	movs	r2, #4
 8001dda:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
 8001dde:	e003      	b.n	8001de8 <prv_parse_term+0xe4>
#if LWGPS_CFG_STATEMENT_PUBX
        } else if (!strncmp(gh->p.term_str, "$PUBX", 5)) {
            gh->p.stat = STAT_UBX;
#endif
        } else {
            gh->p.stat = STAT_UNKNOWN;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        }
        return 1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e231      	b.n	8002250 <prv_parse_term+0x54c>
    }


    if (gh->p.stat == STAT_UNKNOWN) {
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001df2:	2900      	cmp	r1, #0
 8001df4:	f000 822b 	beq.w	800224e <prv_parse_term+0x54a>
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 8001df8:	6879      	ldr	r1, [r7, #4]
 8001dfa:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001dfe:	2901      	cmp	r1, #1
 8001e00:	f040 80c9 	bne.w	8001f96 <prv_parse_term+0x292>
        switch (gh->p.term_num) {
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	2b0a      	cmp	r3, #10
 8001e0e:	f200 8213 	bhi.w	8002238 <prv_parse_term+0x534>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <prv_parse_term+0x114>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e45 	.word	0x08001e45
 8001e1c:	08001ebf 	.word	0x08001ebf
 8001e20:	08001ed5 	.word	0x08001ed5
 8001e24:	08001eff 	.word	0x08001eff
 8001e28:	08001f15 	.word	0x08001f15
 8001e2c:	08001f3f 	.word	0x08001f3f
 8001e30:	08001f53 	.word	0x08001f53
 8001e34:	08002239 	.word	0x08002239
 8001e38:	08001f67 	.word	0x08001f67
 8001e3c:	08002239 	.word	0x08002239
 8001e40:	08001f7f 	.word	0x08001f7f
            case 1:
                gh->p.data.gga.hours = 10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001e4a:	3b30      	subs	r3, #48	; 0x30
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	461a      	mov	r2, r3
 8001e50:	0092      	lsls	r2, r2, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8001e5e:	4413      	add	r3, r2
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	3b30      	subs	r3, #48	; 0x30
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f883 20aa 	strb.w	r2, [r3, #170]	; 0xaa
                gh->p.data.gga.minutes = 10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8001e72:	3b30      	subs	r3, #48	; 0x30
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	461a      	mov	r2, r3
 8001e78:	0092      	lsls	r2, r2, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001e86:	4413      	add	r3, r2
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	3b30      	subs	r3, #48	; 0x30
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f883 20ab 	strb.w	r2, [r3, #171]	; 0xab
                gh->p.data.gga.seconds = 10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001e9a:	3b30      	subs	r3, #48	; 0x30
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	0092      	lsls	r2, r2, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001eae:	4413      	add	r3, r2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	3b30      	subs	r3, #48	; 0x30
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
                break;
 8001ebc:	e1c7      	b.n	800224e <prv_parse_term+0x54a>
            case 2:
                gh->p.data.gga.latitude = prv_parse_lat_long(gh);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fed0 	bl	8001c64 <prv_parse_lat_long>
 8001ec4:	eeb0 7a40 	vmov.f32	s14, s0
 8001ec8:	eef0 7a60 	vmov.f32	s15, s1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8001ed2:	e1bc      	b.n	800224e <prv_parse_term+0x54a>
            case 3:
                if (gh->p.term_str[0] == 'S' || gh->p.term_str[0] == 's') {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001eda:	2b53      	cmp	r3, #83	; 0x53
 8001edc:	d005      	beq.n	8001eea <prv_parse_term+0x1e6>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001ee4:	2b73      	cmp	r3, #115	; 0x73
 8001ee6:	f040 81a9 	bne.w	800223c <prv_parse_term+0x538>
                    gh->p.data.gga.latitude = -gh->p.data.gga.latitude;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8001ef0:	4690      	mov	r8, r2
 8001ef2:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	e9c3 8922 	strd	r8, r9, [r3, #136]	; 0x88
                }
                break;
 8001efc:	e19e      	b.n	800223c <prv_parse_term+0x538>
            case 4:
                gh->p.data.gga.longitude = prv_parse_lat_long(gh);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff feb0 	bl	8001c64 <prv_parse_lat_long>
 8001f04:	eeb0 7a40 	vmov.f32	s14, s0
 8001f08:	eef0 7a60 	vmov.f32	s15, s1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8001f12:	e19c      	b.n	800224e <prv_parse_term+0x54a>
            case 5:
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001f1a:	2b57      	cmp	r3, #87	; 0x57
 8001f1c:	d005      	beq.n	8001f2a <prv_parse_term+0x226>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8001f24:	2b77      	cmp	r3, #119	; 0x77
 8001f26:	f040 818b 	bne.w	8002240 <prv_parse_term+0x53c>
                    gh->p.data.gga.longitude = -gh->p.data.gga.longitude;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8001f30:	4614      	mov	r4, r2
 8001f32:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	e9c3 4524 	strd	r4, r5, [r3, #144]	; 0x90
                }
                break;
 8001f3c:	e180      	b.n	8002240 <prv_parse_term+0x53c>
            case 6:
                gh->p.data.gga.fix = (uint8_t)prv_parse_number(gh, NULL);
 8001f3e:	2100      	movs	r1, #0
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff fe1d 	bl	8001b80 <prv_parse_number>
 8001f46:	4603      	mov	r3, r0
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
                break;
 8001f50:	e17d      	b.n	800224e <prv_parse_term+0x54a>
            case 7:
                gh->p.data.gga.sats_in_use = (uint8_t)prv_parse_number(gh, NULL);
 8001f52:	2100      	movs	r1, #0
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fe13 	bl	8001b80 <prv_parse_number>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
                break;
 8001f64:	e173      	b.n	800224e <prv_parse_term+0x54a>
            case 9:
                gh->p.data.gga.altitude = prv_parse_float_number(gh, NULL);
 8001f66:	2100      	movs	r1, #0
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff fe53 	bl	8001c14 <prv_parse_float_number>
 8001f6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001f72:	eef0 7a60 	vmov.f32	s15, s1
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 8001f7c:	e167      	b.n	800224e <prv_parse_term+0x54a>
            case 11:
                gh->p.data.gga.geo_sep = prv_parse_float_number(gh, NULL);
 8001f7e:	2100      	movs	r1, #0
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fe47 	bl	8001c14 <prv_parse_float_number>
 8001f86:	eeb0 7a40 	vmov.f32	s14, s0
 8001f8a:	eef0 7a60 	vmov.f32	s15, s1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 8001f94:	e15b      	b.n	800224e <prv_parse_term+0x54a>
            default:
                break;
        }
#endif
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 8001f9c:	2902      	cmp	r1, #2
 8001f9e:	f040 8083 	bne.w	80020a8 <prv_parse_term+0x3a4>
        switch (gh->p.term_num) {
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001fa8:	3b02      	subs	r3, #2
 8001faa:	2b0f      	cmp	r3, #15
 8001fac:	d860      	bhi.n	8002070 <prv_parse_term+0x36c>
 8001fae:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <prv_parse_term+0x2b0>)
 8001fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb4:	08001ff5 	.word	0x08001ff5
 8001fb8:	08002071 	.word	0x08002071
 8001fbc:	08002071 	.word	0x08002071
 8001fc0:	08002071 	.word	0x08002071
 8001fc4:	08002071 	.word	0x08002071
 8001fc8:	08002071 	.word	0x08002071
 8001fcc:	08002071 	.word	0x08002071
 8001fd0:	08002071 	.word	0x08002071
 8001fd4:	08002071 	.word	0x08002071
 8001fd8:	08002071 	.word	0x08002071
 8001fdc:	08002071 	.word	0x08002071
 8001fe0:	08002071 	.word	0x08002071
 8001fe4:	08002071 	.word	0x08002071
 8001fe8:	08002029 	.word	0x08002029
 8001fec:	08002041 	.word	0x08002041
 8001ff0:	08002059 	.word	0x08002059
            case 2:
                gh->p.data.gsa.fix_mode = (uint8_t)prv_parse_number(gh, NULL);
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7ff fdc2 	bl	8001b80 <prv_parse_number>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                break;
 8002006:	e122      	b.n	800224e <prv_parse_term+0x54a>
 8002008:	0801b078 	.word	0x0801b078
 800200c:	0801b080 	.word	0x0801b080
 8002010:	0801b088 	.word	0x0801b088
 8002014:	0801b090 	.word	0x0801b090
 8002018:	0801b098 	.word	0x0801b098
 800201c:	0801b0a0 	.word	0x0801b0a0
 8002020:	0801b0a8 	.word	0x0801b0a8
 8002024:	0801b0b0 	.word	0x0801b0b0
            case 15:
                gh->p.data.gsa.dop_p = prv_parse_float_number(gh, NULL);
 8002028:	2100      	movs	r1, #0
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fdf2 	bl	8001c14 <prv_parse_float_number>
 8002030:	eeb0 7a40 	vmov.f32	s14, s0
 8002034:	eef0 7a60 	vmov.f32	s15, s1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800203e:	e106      	b.n	800224e <prv_parse_term+0x54a>
            case 16:
                gh->p.data.gsa.dop_h = prv_parse_float_number(gh, NULL);
 8002040:	2100      	movs	r1, #0
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fde6 	bl	8001c14 <prv_parse_float_number>
 8002048:	eeb0 7a40 	vmov.f32	s14, s0
 800204c:	eef0 7a60 	vmov.f32	s15, s1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	ed83 7b22 	vstr	d7, [r3, #136]	; 0x88
                break;
 8002056:	e0fa      	b.n	800224e <prv_parse_term+0x54a>
            case 17:
                gh->p.data.gsa.dop_v = prv_parse_float_number(gh, NULL);
 8002058:	2100      	movs	r1, #0
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fdda 	bl	8001c14 <prv_parse_float_number>
 8002060:	eeb0 7a40 	vmov.f32	s14, s0
 8002064:	eef0 7a60 	vmov.f32	s15, s1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 800206e:	e0ee      	b.n	800224e <prv_parse_term+0x54a>
            default:

                if (gh->p.term_num >= 3 && gh->p.term_num <= 14) {
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002076:	2b02      	cmp	r3, #2
 8002078:	f240 80e4 	bls.w	8002244 <prv_parse_term+0x540>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002082:	2b0e      	cmp	r3, #14
 8002084:	f200 80de 	bhi.w	8002244 <prv_parse_term+0x540>
                    gh->p.data.gsa.satellites_ids[gh->p.term_num - 3] = (uint8_t)prv_parse_number(gh, NULL);
 8002088:	2100      	movs	r1, #0
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fd78 	bl	8001b80 <prv_parse_number>
 8002090:	4602      	mov	r2, r0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002098:	3b03      	subs	r3, #3
 800209a:	b2d1      	uxtb	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	4413      	add	r3, r2
 80020a0:	460a      	mov	r2, r1
 80020a2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
                }
                break;
 80020a6:	e0cd      	b.n	8002244 <prv_parse_term+0x540>
        }
#endif
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80020ae:	2903      	cmp	r1, #3
 80020b0:	d11b      	bne.n	80020ea <prv_parse_term+0x3e6>
        switch (gh->p.term_num) {
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d002      	beq.n	80020c2 <prv_parse_term+0x3be>
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d00a      	beq.n	80020d6 <prv_parse_term+0x3d2>
                                break;
                        }
                    }
                }
#endif
                break;
 80020c0:	e0c5      	b.n	800224e <prv_parse_term+0x54a>
                gh->p.data.gsv.stat_num = (uint8_t)prv_parse_number(gh, NULL);
 80020c2:	2100      	movs	r1, #0
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fd5b 	bl	8001b80 <prv_parse_number>
 80020ca:	4603      	mov	r3, r0
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                break;
 80020d4:	e0bb      	b.n	800224e <prv_parse_term+0x54a>
                gh->p.data.gsv.sats_in_view = (uint8_t)prv_parse_number(gh, NULL);
 80020d6:	2100      	movs	r1, #0
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7ff fd51 	bl	8001b80 <prv_parse_number>
 80020de:	4603      	mov	r3, r0
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 80020e8:	e0b1      	b.n	800224e <prv_parse_term+0x54a>
        }
#endif
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	f891 1070 	ldrb.w	r1, [r1, #112]	; 0x70
 80020f0:	2904      	cmp	r1, #4
 80020f2:	f040 80ac 	bne.w	800224e <prv_parse_term+0x54a>
        switch (gh->p.term_num) {
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	f891 107f 	ldrb.w	r1, [r1, #127]	; 0x7f
 80020fc:	3902      	subs	r1, #2
 80020fe:	2909      	cmp	r1, #9
 8002100:	f200 80a2 	bhi.w	8002248 <prv_parse_term+0x544>
 8002104:	a001      	add	r0, pc, #4	; (adr r0, 800210c <prv_parse_term+0x408>)
 8002106:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800210a:	bf00      	nop
 800210c:	08002135 	.word	0x08002135
 8002110:	08002249 	.word	0x08002249
 8002114:	08002249 	.word	0x08002249
 8002118:	08002249 	.word	0x08002249
 800211c:	08002249 	.word	0x08002249
 8002120:	0800214f 	.word	0x0800214f
 8002124:	08002167 	.word	0x08002167
 8002128:	0800217f 	.word	0x0800217f
 800212c:	080021f9 	.word	0x080021f9
 8002130:	08002211 	.word	0x08002211
            case 2:
                gh->p.data.rmc.is_valid = (gh->p.term_str[0] == 'A');
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800213a:	2b41      	cmp	r3, #65	; 0x41
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
                break;
 800214c:	e07f      	b.n	800224e <prv_parse_term+0x54a>
            case 7:
                gh->p.data.rmc.speed = prv_parse_float_number(gh, NULL);
 800214e:	2100      	movs	r1, #0
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fd5f 	bl	8001c14 <prv_parse_float_number>
 8002156:	eeb0 7a40 	vmov.f32	s14, s0
 800215a:	eef0 7a60 	vmov.f32	s15, s1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
                break;
 8002164:	e073      	b.n	800224e <prv_parse_term+0x54a>
            case 8:
                gh->p.data.rmc.course = prv_parse_float_number(gh, NULL);
 8002166:	2100      	movs	r1, #0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff fd53 	bl	8001c14 <prv_parse_float_number>
 800216e:	eeb0 7a40 	vmov.f32	s14, s0
 8002172:	eef0 7a60 	vmov.f32	s15, s1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	ed83 7b26 	vstr	d7, [r3, #152]	; 0x98
                break;
 800217c:	e067      	b.n	800224e <prv_parse_term+0x54a>
            case 9:
                gh->p.data.rmc.date = (uint8_t)(10 * CTN(gh->p.term_str[0]) + CTN(gh->p.term_str[1]));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002184:	3b30      	subs	r3, #48	; 0x30
 8002186:	b2db      	uxtb	r3, r3
 8002188:	461a      	mov	r2, r3
 800218a:	0092      	lsls	r2, r2, #2
 800218c:	4413      	add	r3, r2
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	b2da      	uxtb	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002198:	4413      	add	r3, r2
 800219a:	b2db      	uxtb	r3, r3
 800219c:	3b30      	subs	r3, #48	; 0x30
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
                gh->p.data.rmc.month = (uint8_t)(10 * CTN(gh->p.term_str[2]) + CTN(gh->p.term_str[3]));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80021ac:	3b30      	subs	r3, #48	; 0x30
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
 80021b2:	0092      	lsls	r2, r2, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80021c0:	4413      	add	r3, r2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	3b30      	subs	r3, #48	; 0x30
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f883 208a 	strb.w	r2, [r3, #138]	; 0x8a
                gh->p.data.rmc.year = (uint8_t)(10 * CTN(gh->p.term_str[4]) + CTN(gh->p.term_str[5]));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 80021d4:	3b30      	subs	r3, #48	; 0x30
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	4413      	add	r3, r2
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80021e8:	4413      	add	r3, r2
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	3b30      	subs	r3, #48	; 0x30
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f883 208b 	strb.w	r2, [r3, #139]	; 0x8b
                break;
 80021f6:	e02a      	b.n	800224e <prv_parse_term+0x54a>
            case 10:
                gh->p.data.rmc.variation = prv_parse_float_number(gh, NULL);
 80021f8:	2100      	movs	r1, #0
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff fd0a 	bl	8001c14 <prv_parse_float_number>
 8002200:	eeb0 7a40 	vmov.f32	s14, s0
 8002204:	eef0 7a60 	vmov.f32	s15, s1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	ed83 7b28 	vstr	d7, [r3, #160]	; 0xa0
                break;
 800220e:	e01e      	b.n	800224e <prv_parse_term+0x54a>
            case 11:
                if (gh->p.term_str[0] == 'W' || gh->p.term_str[0] == 'w') {
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002216:	2957      	cmp	r1, #87	; 0x57
 8002218:	d004      	beq.n	8002224 <prv_parse_term+0x520>
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	f891 1071 	ldrb.w	r1, [r1, #113]	; 0x71
 8002220:	2977      	cmp	r1, #119	; 0x77
 8002222:	d113      	bne.n	800224c <prv_parse_term+0x548>
                    gh->p.data.rmc.variation = -gh->p.data.rmc.variation;
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	e9d1 0128 	ldrd	r0, r1, [r1, #160]	; 0xa0
 800222a:	4602      	mov	r2, r0
 800222c:	f081 4300 	eor.w	r3, r1, #2147483648	; 0x80000000
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
                }
                break;
 8002236:	e009      	b.n	800224c <prv_parse_term+0x548>
                break;
 8002238:	bf00      	nop
 800223a:	e008      	b.n	800224e <prv_parse_term+0x54a>
                break;
 800223c:	bf00      	nop
 800223e:	e006      	b.n	800224e <prv_parse_term+0x54a>
                break;
 8002240:	bf00      	nop
 8002242:	e004      	b.n	800224e <prv_parse_term+0x54a>
                break;
 8002244:	bf00      	nop
 8002246:	e002      	b.n	800224e <prv_parse_term+0x54a>
            default:
                break;
 8002248:	bf00      	nop
 800224a:	e000      	b.n	800224e <prv_parse_term+0x54a>
                break;
 800224c:	bf00      	nop
                break;
        }
#endif
#endif
    }
    return 1;
 800224e:	2301      	movs	r3, #1
}
 8002250:	4618      	mov	r0, r3
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800225a:	bf00      	nop

0800225c <prv_check_crc>:

#if LWGPS_CFG_CRC
static uint8_t
prv_check_crc(lwgps_t* gh) {
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
    uint8_t crc;
    crc = (uint8_t)((CHTN(gh->p.term_str[0]) & 0x0F) << 0x04) | (CHTN(gh->p.term_str[1]) & 0x0F);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800226a:	2b2f      	cmp	r3, #47	; 0x2f
 800226c:	d90d      	bls.n	800228a <prv_check_crc+0x2e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002274:	2b39      	cmp	r3, #57	; 0x39
 8002276:	d808      	bhi.n	800228a <prv_check_crc+0x2e>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800227e:	3b30      	subs	r3, #48	; 0x30
 8002280:	b2db      	uxtb	r3, r3
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	b2db      	uxtb	r3, r3
 8002286:	b25a      	sxtb	r2, r3
 8002288:	e026      	b.n	80022d8 <prv_check_crc+0x7c>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8002290:	2b60      	cmp	r3, #96	; 0x60
 8002292:	d90d      	bls.n	80022b0 <prv_check_crc+0x54>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 800229a:	2b7a      	cmp	r3, #122	; 0x7a
 800229c:	d808      	bhi.n	80022b0 <prv_check_crc+0x54>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80022a4:	3b57      	subs	r3, #87	; 0x57
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	011b      	lsls	r3, r3, #4
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	b25a      	sxtb	r2, r3
 80022ae:	e013      	b.n	80022d8 <prv_check_crc+0x7c>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80022b6:	2b40      	cmp	r3, #64	; 0x40
 80022b8:	d90d      	bls.n	80022d6 <prv_check_crc+0x7a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80022c0:	2b5a      	cmp	r3, #90	; 0x5a
 80022c2:	d808      	bhi.n	80022d6 <prv_check_crc+0x7a>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80022ca:	3b37      	subs	r3, #55	; 0x37
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	b25a      	sxtb	r2, r3
 80022d4:	e000      	b.n	80022d8 <prv_check_crc+0x7c>
 80022d6:	2200      	movs	r2, #0
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80022de:	2b2f      	cmp	r3, #47	; 0x2f
 80022e0:	d90c      	bls.n	80022fc <prv_check_crc+0xa0>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80022e8:	2b39      	cmp	r3, #57	; 0x39
 80022ea:	d807      	bhi.n	80022fc <prv_check_crc+0xa0>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80022f2:	b25b      	sxtb	r3, r3
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	b25b      	sxtb	r3, r3
 80022fa:	e028      	b.n	800234e <prv_check_crc+0xf2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002302:	2b60      	cmp	r3, #96	; 0x60
 8002304:	d90e      	bls.n	8002324 <prv_check_crc+0xc8>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800230c:	2b7a      	cmp	r3, #122	; 0x7a
 800230e:	d809      	bhi.n	8002324 <prv_check_crc+0xc8>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002316:	3b57      	subs	r3, #87	; 0x57
 8002318:	b2db      	uxtb	r3, r3
 800231a:	b25b      	sxtb	r3, r3
 800231c:	f003 030f 	and.w	r3, r3, #15
 8002320:	b25b      	sxtb	r3, r3
 8002322:	e014      	b.n	800234e <prv_check_crc+0xf2>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d90e      	bls.n	800234c <prv_check_crc+0xf0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8002334:	2b5a      	cmp	r3, #90	; 0x5a
 8002336:	d809      	bhi.n	800234c <prv_check_crc+0xf0>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 800233e:	3b37      	subs	r3, #55	; 0x37
 8002340:	b2db      	uxtb	r3, r3
 8002342:	b25b      	sxtb	r3, r3
 8002344:	f003 030f 	and.w	r3, r3, #15
 8002348:	b25b      	sxtb	r3, r3
 800234a:	e000      	b.n	800234e <prv_check_crc+0xf2>
 800234c:	2300      	movs	r3, #0
 800234e:	4313      	orrs	r3, r2
 8002350:	b25b      	sxtb	r3, r3
 8002352:	73fb      	strb	r3, [r7, #15]
    return gh->p.crc_calc == crc;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	429a      	cmp	r2, r3
 800235e:	bf0c      	ite	eq
 8002360:	2301      	moveq	r3, #1
 8002362:	2300      	movne	r3, #0
 8002364:	b2db      	uxtb	r3, r3
}
 8002366:	4618      	mov	r0, r3
 8002368:	3714      	adds	r7, #20
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <prv_copy_from_tmp_memory>:
#else
#define prv_check_crc(_gh)              (1)
#endif

static uint8_t
prv_copy_from_tmp_memory(lwgps_t* gh) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
    if (0) {
#if LWGPS_CFG_STATEMENT_GPGGA
    } else if (gh->p.stat == STAT_GGA) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002382:	2b01      	cmp	r3, #1
 8002384:	d171      	bne.n	800246a <prv_copy_from_tmp_memory+0xf6>
        gpslat = gh->latitude = gh->p.data.gga.latitude;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	e9c1 2300 	strd	r2, r3, [r1]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	4610      	mov	r0, r2
 800239a:	4619      	mov	r1, r3
 800239c:	f7fe fc24 	bl	8000be8 <__aeabi_d2f>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4a65      	ldr	r2, [pc, #404]	; (8002538 <prv_copy_from_tmp_memory+0x1c4>)
 80023a4:	6013      	str	r3, [r2, #0]
        gpslong = gh->longitude = gh->p.data.gga.longitude;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80023b8:	4610      	mov	r0, r2
 80023ba:	4619      	mov	r1, r3
 80023bc:	f7fe fc14 	bl	8000be8 <__aeabi_d2f>
 80023c0:	4603      	mov	r3, r0
 80023c2:	4a5e      	ldr	r2, [pc, #376]	; (800253c <prv_copy_from_tmp_memory+0x1c8>)
 80023c4:	6013      	str	r3, [r2, #0]
        gpsalt = gh->altitude = gh->p.data.gga.altitude;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f7fe fc04 	bl	8000be8 <__aeabi_d2f>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4a57      	ldr	r2, [pc, #348]	; (8002540 <prv_copy_from_tmp_memory+0x1cc>)
 80023e4:	6013      	str	r3, [r2, #0]

        gh->geo_sep = gh->p.data.gga.geo_sep;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	e9c1 2306 	strd	r2, r3, [r1, #24]
        gpssat = gh->sats_in_use = gh->p.data.gga.sats_in_use;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <prv_copy_from_tmp_memory+0x1d0>)
 8002406:	701a      	strb	r2, [r3, #0]

        gh->fix = gh->p.data.gga.fix;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 20a9 	ldrb.w	r2, [r3, #169]	; 0xa9
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        gh->hours = gh->p.data.gga.hours;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        sprintf(gpsjam, "%02d", gh->p.data.gga.hours);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8002426:	461a      	mov	r2, r3
 8002428:	4947      	ldr	r1, [pc, #284]	; (8002548 <prv_copy_from_tmp_memory+0x1d4>)
 800242a:	4848      	ldr	r0, [pc, #288]	; (800254c <prv_copy_from_tmp_memory+0x1d8>)
 800242c:	f015 f864 	bl	80174f8 <siprintf>
        gh->minutes = gh->p.data.gga.minutes;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 20ab 	ldrb.w	r2, [r3, #171]	; 0xab
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
        sprintf(gpsmenit, "%02d", gh->p.data.gga.minutes);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 30ab 	ldrb.w	r3, [r3, #171]	; 0xab
 8002442:	461a      	mov	r2, r3
 8002444:	4940      	ldr	r1, [pc, #256]	; (8002548 <prv_copy_from_tmp_memory+0x1d4>)
 8002446:	4842      	ldr	r0, [pc, #264]	; (8002550 <prv_copy_from_tmp_memory+0x1dc>)
 8002448:	f015 f856 	bl	80174f8 <siprintf>
        gh->seconds = gh->p.data.gga.seconds;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f893 20ac 	ldrb.w	r2, [r3, #172]	; 0xac
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        sprintf(gpsdetik, "%02d", gh->p.data.gga.seconds);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 800245e:	461a      	mov	r2, r3
 8002460:	4939      	ldr	r1, [pc, #228]	; (8002548 <prv_copy_from_tmp_memory+0x1d4>)
 8002462:	483c      	ldr	r0, [pc, #240]	; (8002554 <prv_copy_from_tmp_memory+0x1e0>)
 8002464:	f015 f848 	bl	80174f8 <siprintf>
 8002468:	e061      	b.n	800252e <prv_copy_from_tmp_memory+0x1ba>
#endif
#if LWGPS_CFG_STATEMENT_GPGSA
    } else if (gh->p.stat == STAT_GSA) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002470:	2b02      	cmp	r3, #2
 8002472:	d121      	bne.n	80024b8 <prv_copy_from_tmp_memory+0x144>
        gh->dop_h = gh->p.data.gsa.dop_h;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
        gh->dop_p = gh->p.data.gsa.dop_p;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
        gh->dop_v = gh->p.data.gsa.dop_v;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
        gh->fix_mode = gh->p.data.gsa.fix_mode;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 20a0 	ldrb.w	r2, [r3, #160]	; 0xa0
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        memcpy(gh->satellites_ids, gh->p.data.gsa.satellites_ids, sizeof(gh->satellites_ids));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f103 0041 	add.w	r0, r3, #65	; 0x41
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	33a1      	adds	r3, #161	; 0xa1
 80024ae:	220c      	movs	r2, #12
 80024b0:	4619      	mov	r1, r3
 80024b2:	f015 f96c 	bl	801778e <memcpy>
 80024b6:	e03a      	b.n	800252e <prv_copy_from_tmp_memory+0x1ba>
#endif
#if LWGPS_CFG_STATEMENT_GPGSV
    } else if (gh->p.stat == STAT_GSV) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d106      	bne.n	80024d0 <prv_copy_from_tmp_memory+0x15c>
        gh->sats_in_view = gh->p.data.gsv.sats_in_view;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 80024ce:	e02e      	b.n	800252e <prv_copy_from_tmp_memory+0x1ba>
#endif
#if LWGPS_CFG_STATEMENT_GPRMC
    } else if (gh->p.stat == STAT_RMC) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d129      	bne.n	800252e <prv_copy_from_tmp_memory+0x1ba>
        gh->course = gh->p.data.rmc.course;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
        gh->is_valid = gh->p.data.rmc.is_valid;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        gh->speed = gh->p.data.rmc.speed;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80024f8:	6879      	ldr	r1, [r7, #4]
 80024fa:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
        gh->variation = gh->p.data.rmc.variation;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
        gh->date = gh->p.data.rmc.date;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        gh->month = gh->p.data.rmc.month;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 208a 	ldrb.w	r2, [r3, #138]	; 0x8a
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        gh->year = gh->p.data.rmc.year;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 208b 	ldrb.w	r2, [r3, #139]	; 0x8b
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
        gh->clk_bias = gh->p.data.time.clk_bias;
        gh->clk_drift = gh->p.data.time.clk_drift;
        gh->tp_gran = gh->p.data.time.tp_gran;
#endif
    }
    return 1;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200010f0 	.word	0x200010f0
 800253c:	200010f4 	.word	0x200010f4
 8002540:	200010f8 	.word	0x200010f8
 8002544:	200010fc 	.word	0x200010fc
 8002548:	0801b0b8 	.word	0x0801b0b8
 800254c:	20001108 	.word	0x20001108
 8002550:	20001104 	.word	0x20001104
 8002554:	20001100 	.word	0x20001100

08002558 <lwgps_init>:

uint8_t
lwgps_init(lwgps_t* gh) {
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
    memset(gh, 0x00, sizeof(*gh));
 8002560:	22b0      	movs	r2, #176	; 0xb0
 8002562:	2100      	movs	r1, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f015 f82a 	bl	80175be <memset>
    return 1;
 800256a:	2301      	movs	r3, #1
}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <lwgps_process>:

uint8_t
#if LWGPS_CFG_STATUS || __DOXYGEN__
lwgps_process(lwgps_t* gh, const void* data, size_t len, lwgps_process_fn evt_fn) {
#else
lwgps_process(lwgps_t* gh, const void* data, size_t len) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
#endif
    const uint8_t* d = data;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	617b      	str	r3, [r7, #20]

    for (; len > 0; ++d, --len) {
 8002584:	e0ad      	b.n	80026e2 <lwgps_process+0x16e>
        if (*d == '$') {
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	2b24      	cmp	r3, #36	; 0x24
 800258c:	d128      	bne.n	80025e0 <lwgps_process+0x6c>
            memset(&gh->p, 0x00, sizeof(gh->p));
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	3370      	adds	r3, #112	; 0x70
 8002592:	2240      	movs	r2, #64	; 0x40
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f015 f811 	bl	80175be <memset>
            TERM_ADD(gh, *d);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80025a2:	2b0b      	cmp	r3, #11
 80025a4:	f200 8097 	bhi.w	80026d6 <lwgps_process+0x162>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80025ae:	4619      	mov	r1, r3
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	781a      	ldrb	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80025c2:	3301      	adds	r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80025d2:	461a      	mov	r2, r3
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4413      	add	r3, r2
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80025de:	e07a      	b.n	80026d6 <lwgps_process+0x162>
        } else if (*d == ',') {
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b2c      	cmp	r3, #44	; 0x2c
 80025e6:	d11d      	bne.n	8002624 <lwgps_process+0xb0>
            prv_parse_term(gh);
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff fb8b 	bl	8001d04 <prv_parse_term>
            CRC_ADD(gh, *d);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4053      	eors	r3, r2
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            TERM_NEXT(gh);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002618:	3301      	adds	r3, #1
 800261a:	b2da      	uxtb	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8002622:	e058      	b.n	80026d6 <lwgps_process+0x162>
        } else if (*d == '*') {
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b2a      	cmp	r3, #42	; 0x2a
 800262a:	d117      	bne.n	800265c <lwgps_process+0xe8>
            prv_parse_term(gh);
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f7ff fb69 	bl	8001d04 <prv_parse_term>
            gh->p.star = 1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            TERM_NEXT(gh);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002650:	3301      	adds	r3, #1
 8002652:	b2da      	uxtb	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800265a:	e03c      	b.n	80026d6 <lwgps_process+0x162>
        } else if (*d == '\r') {
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b0d      	cmp	r3, #13
 8002662:	d109      	bne.n	8002678 <lwgps_process+0x104>
            if (prv_check_crc(gh)) {
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff fdf9 	bl	800225c <prv_check_crc>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d032      	beq.n	80026d6 <lwgps_process+0x162>
                prv_copy_from_tmp_memory(gh);
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f7ff fe7f 	bl	8002374 <prv_copy_from_tmp_memory>
 8002676:	e02e      	b.n	80026d6 <lwgps_process+0x162>
            } else if (evt_fn != NULL) {
                evt_fn(STAT_CHECKSUM_FAIL);
#endif
            }
        } else {
            if (!gh->p.star) {
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800267e:	2b00      	cmp	r3, #0
 8002680:	d109      	bne.n	8002696 <lwgps_process+0x122>
                CRC_ADD(gh, *d);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	f893 2081 	ldrb.w	r2, [r3, #129]	; 0x81
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	4053      	eors	r3, r2
 800268e:	b2da      	uxtb	r2, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
            }
            TERM_ADD(gh, *d);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800269c:	2b0b      	cmp	r3, #11
 800269e:	d81a      	bhi.n	80026d6 <lwgps_process+0x162>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80026a6:	4619      	mov	r1, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	440b      	add	r3, r1
 80026b0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80026ba:	3301      	adds	r3, #1
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80026ca:	461a      	mov	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4413      	add	r3, r2
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    for (; len > 0; ++d, --len) {
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	3301      	adds	r3, #1
 80026da:	617b      	str	r3, [r7, #20]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3b01      	subs	r3, #1
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f47f af4e 	bne.w	8002586 <lwgps_process+0x12>
        }
    }
    return 1;
 80026ea:	2301      	movs	r3, #1
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <readReg2>:

int32_t _position = 0, _lastPosition = 0;
extern I2C_HandleTypeDef hi2c2;

int16_t readReg2(uint8_t reg)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af04      	add	r7, sp, #16
 80026fa:	4603      	mov	r3, r0
 80026fc:	71fb      	strb	r3, [r7, #7]
    uint8_t data[2];
    HAL_I2C_Mem_Read(&hi2c2, AS5600_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 2, HAL_MAX_DELAY);
 80026fe:	79fb      	ldrb	r3, [r7, #7]
 8002700:	b29a      	uxth	r2, r3
 8002702:	f04f 33ff 	mov.w	r3, #4294967295
 8002706:	9302      	str	r3, [sp, #8]
 8002708:	2302      	movs	r3, #2
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	f107 030c 	add.w	r3, r7, #12
 8002710:	9300      	str	r3, [sp, #0]
 8002712:	2301      	movs	r3, #1
 8002714:	216c      	movs	r1, #108	; 0x6c
 8002716:	4807      	ldr	r0, [pc, #28]	; (8002734 <readReg2+0x40>)
 8002718:	f006 fc88 	bl	800902c <HAL_I2C_Mem_Read>
    return (data[0] << 8) | data[1];
 800271c:	7b3b      	ldrb	r3, [r7, #12]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	b21a      	sxth	r2, r3
 8002722:	7b7b      	ldrb	r3, [r7, #13]
 8002724:	b21b      	sxth	r3, r3
 8002726:	4313      	orrs	r3, r2
 8002728:	b21b      	sxth	r3, r3
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000032c 	.word	0x2000032c

08002738 <getCumulativePosition>:

int32_t getCumulativePosition(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
    int16_t value = readReg2(AS5600_ANGLE) & 0x0FFF;
 800273e:	200e      	movs	r0, #14
 8002740:	f7ff ffd8 	bl	80026f4 <readReg2>
 8002744:	4603      	mov	r3, r0
 8002746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800274a:	80fb      	strh	r3, [r7, #6]

    // Whole rotation CW?
    if ((_lastPosition > 2048) && (value < (_lastPosition - 2048)))
 800274c:	4b23      	ldr	r3, [pc, #140]	; (80027dc <getCumulativePosition+0xa4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002754:	dd14      	ble.n	8002780 <getCumulativePosition+0x48>
 8002756:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800275a:	4b20      	ldr	r3, [pc, #128]	; (80027dc <getCumulativePosition+0xa4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8002762:	429a      	cmp	r2, r3
 8002764:	da0c      	bge.n	8002780 <getCumulativePosition+0x48>
    {
        _position = _position + 4095 - _lastPosition + value;
 8002766:	4b1e      	ldr	r3, [pc, #120]	; (80027e0 <getCumulativePosition+0xa8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f603 72ff 	addw	r2, r3, #4095	; 0xfff
 800276e:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <getCumulativePosition+0xa4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	1ad2      	subs	r2, r2, r3
 8002774:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002778:	4413      	add	r3, r2
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <getCumulativePosition+0xa8>)
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e023      	b.n	80027c8 <getCumulativePosition+0x90>
    }
    // Whole rotation CCW?
    else if ((value > 2048) && (_lastPosition < (value - 2048)))
 8002780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002788:	dd14      	ble.n	80027b4 <getCumulativePosition+0x7c>
 800278a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800278e:	f5a3 6200 	sub.w	r2, r3, #2048	; 0x800
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <getCumulativePosition+0xa4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	dd0c      	ble.n	80027b4 <getCumulativePosition+0x7c>
    {
        _position = _position - 4095 - _lastPosition + value;
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <getCumulativePosition+0xa8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f6a3 72ff 	subw	r2, r3, #4095	; 0xfff
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <getCumulativePosition+0xa4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	1ad2      	subs	r2, r2, r3
 80027a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a0c      	ldr	r2, [pc, #48]	; (80027e0 <getCumulativePosition+0xa8>)
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	e009      	b.n	80027c8 <getCumulativePosition+0x90>
    }
    else
    {
        _position = _position - _lastPosition + value;
 80027b4:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <getCumulativePosition+0xa8>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b08      	ldr	r3, [pc, #32]	; (80027dc <getCumulativePosition+0xa4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	1ad2      	subs	r2, r2, r3
 80027be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c2:	4413      	add	r3, r2
 80027c4:	4a06      	ldr	r2, [pc, #24]	; (80027e0 <getCumulativePosition+0xa8>)
 80027c6:	6013      	str	r3, [r2, #0]
    }
    _lastPosition = value;
 80027c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027cc:	4a03      	ldr	r2, [pc, #12]	; (80027dc <getCumulativePosition+0xa4>)
 80027ce:	6013      	str	r3, [r2, #0]

    return _position;
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <getCumulativePosition+0xa8>)
 80027d2:	681b      	ldr	r3, [r3, #0]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3708      	adds	r7, #8
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	20000254 	.word	0x20000254
 80027e0:	20000250 	.word	0x20000250

080027e4 <resetPosition>:

int32_t resetPosition(int32_t position)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
    int32_t old = _position;
 80027ec:	4b06      	ldr	r3, [pc, #24]	; (8002808 <resetPosition+0x24>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]
    _position = position;
 80027f2:	4a05      	ldr	r2, [pc, #20]	; (8002808 <resetPosition+0x24>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6013      	str	r3, [r2, #0]
    return old;
 80027f8:	68fb      	ldr	r3, [r7, #12]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3714      	adds	r7, #20
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	20000250 	.word	0x20000250

0800280c <resetCumulativePosition>:

int32_t resetCumulativePosition(int32_t position)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
    _lastPosition = readReg2(AS5600_RAW_ANGLE) & 0x0FFF;
 8002814:	200c      	movs	r0, #12
 8002816:	f7ff ff6d 	bl	80026f4 <readReg2>
 800281a:	4603      	mov	r3, r0
 800281c:	b29b      	uxth	r3, r3
 800281e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002822:	4a06      	ldr	r2, [pc, #24]	; (800283c <resetCumulativePosition+0x30>)
 8002824:	6013      	str	r3, [r2, #0]
    int32_t old = _position;
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <resetCumulativePosition+0x34>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60fb      	str	r3, [r7, #12]
    _position = position;
 800282c:	4a04      	ldr	r2, [pc, #16]	; (8002840 <resetCumulativePosition+0x34>)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6013      	str	r3, [r2, #0]
    return old;
 8002832:	68fb      	ldr	r3, [r7, #12]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3710      	adds	r7, #16
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	20000254 	.word	0x20000254
 8002840:	20000250 	.word	0x20000250

08002844 <bno055_assignI2C>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 800284c:	4a04      	ldr	r2, [pc, #16]	; (8002860 <bno055_assignI2C+0x1c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20000258 	.word	0x20000258

08002864 <bno055_delay>:

void bno055_delay(int time) {
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4618      	mov	r0, r3
 8002870:	f00f fc4f 	bl	8012112 <osDelay>
#else
  HAL_Delay(time);
#endif
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af02      	add	r7, sp, #8
 8002882:	4603      	mov	r3, r0
 8002884:	460a      	mov	r2, r1
 8002886:	71fb      	strb	r3, [r7, #7]
 8002888:	4613      	mov	r3, r2
 800288a:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	733b      	strb	r3, [r7, #12]
 8002890:	79bb      	ldrb	r3, [r7, #6]
 8002892:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1,
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <bno055_writeData+0x34>)
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	f107 020c 	add.w	r2, r7, #12
 800289c:	230a      	movs	r3, #10
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2302      	movs	r3, #2
 80028a2:	2150      	movs	r1, #80	; 0x50
 80028a4:	f005 ff98 	bl	80087d8 <HAL_I2C_Master_Transmit>
//  } else if (state == HAL_I2C_STATE_ERROR) {
//    printf("HAL_I2C_STATE_ERROR\r\n");
//  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	20000258 	.word	0x20000258

080028b4 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af02      	add	r7, sp, #8
 80028ba:	4603      	mov	r3, r0
 80028bc:	6039      	str	r1, [r7, #0]
 80028be:	71fb      	strb	r3, [r7, #7]
 80028c0:	4613      	mov	r3, r2
 80028c2:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR << 1, &reg, 1,
 80028c4:	4b0c      	ldr	r3, [pc, #48]	; (80028f8 <bno055_readData+0x44>)
 80028c6:	6818      	ldr	r0, [r3, #0]
 80028c8:	1dfa      	adds	r2, r7, #7
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2301      	movs	r3, #1
 80028d2:	2150      	movs	r1, #80	; 0x50
 80028d4:	f005 ff80 	bl	80087d8 <HAL_I2C_Master_Transmit>
                          HAL_MAX_DELAY);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR << 1, data, len,
 80028d8:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <bno055_readData+0x44>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	79bb      	ldrb	r3, [r7, #6]
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	9200      	str	r2, [sp, #0]
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	2150      	movs	r1, #80	; 0x50
 80028ea:	f006 f873 	bl	80089d4 <HAL_I2C_Master_Receive>
                         HAL_MAX_DELAY);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 80028ee:	bf00      	nop
 80028f0:	3708      	adds	r7, #8
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	20000258 	.word	0x20000258

080028fc <bno055_setPage>:

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	4619      	mov	r1, r3
 800290a:	2007      	movs	r0, #7
 800290c:	f7ff ffb6 	bl	800287c <bno055_writeData>
 8002910:	bf00      	nop
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	4619      	mov	r1, r3
 8002926:	203d      	movs	r0, #61	; 0x3d
 8002928:	f7ff ffa8 	bl	800287c <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <bno055_setOperationMode+0x22>
    bno055_delay(19);
 8002932:	2013      	movs	r0, #19
 8002934:	f7ff ff96 	bl	8002864 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8002938:	e002      	b.n	8002940 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 800293a:	2007      	movs	r0, #7
 800293c:	f7ff ff92 	bl	8002864 <bno055_delay>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 800294c:	2000      	movs	r0, #0
 800294e:	f7ff ffe3 	bl	8002918 <bno055_setOperationMode>
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}

08002956 <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 8002956:	b580      	push	{r7, lr}
 8002958:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 800295a:	200c      	movs	r0, #12
 800295c:	f7ff ffdc 	bl	8002918 <bno055_setOperationMode>
}
 8002960:	bf00      	nop
 8002962:	bd80      	pop	{r7, pc}

08002964 <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8002968:	2120      	movs	r1, #32
 800296a:	203f      	movs	r0, #63	; 0x3f
 800296c:	f7ff ff86 	bl	800287c <bno055_writeData>
  bno055_delay(700);
 8002970:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8002974:	f7ff ff76 	bl	8002864 <bno055_delay>
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}

0800297c <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
  bno055_reset();
 8002982:	f7ff ffef 	bl	8002964 <bno055_reset>

  uint8_t id = 0;
 8002986:	2300      	movs	r3, #0
 8002988:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 800298a:	1dfb      	adds	r3, r7, #7
 800298c:	2201      	movs	r2, #1
 800298e:	4619      	mov	r1, r3
 8002990:	2000      	movs	r0, #0
 8002992:	f7ff ff8f 	bl	80028b4 <bno055_readData>
  if (id != BNO055_ID) {
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	2ba0      	cmp	r3, #160	; 0xa0
 800299a:	d001      	beq.n	80029a0 <bno055_setup+0x24>
    Error_Handler();
 800299c:	f001 ff90 	bl	80048c0 <Error_Handler>
  }
  bno055_writeData(BNO055_PWR_MODE, 0x0);
 80029a0:	2100      	movs	r1, #0
 80029a2:	203e      	movs	r0, #62	; 0x3e
 80029a4:	f7ff ff6a 	bl	800287c <bno055_writeData>
  bno055_delay(10);
 80029a8:	200a      	movs	r0, #10
 80029aa:	f7ff ff5b 	bl	8002864 <bno055_delay>
  bno055_setPage(0);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7ff ffa4 	bl	80028fc <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80029b4:	2100      	movs	r1, #0
 80029b6:	203f      	movs	r0, #63	; 0x3f
 80029b8:	f7ff ff60 	bl	800287c <bno055_writeData>
  bno055_delay(10);
 80029bc:	200a      	movs	r0, #10
 80029be:	f7ff ff51 	bl	8002864 <bno055_delay>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80029c2:	f7ff ffc1 	bl	8002948 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80029c6:	200a      	movs	r0, #10
 80029c8:	f7ff ff4c 	bl	8002864 <bno055_delay>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80029d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029d8:	b09e      	sub	sp, #120	; 0x78
 80029da:	af00      	add	r7, sp, #0
 80029dc:	4603      	mov	r3, r0
 80029de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80029e2:	2000      	movs	r0, #0
 80029e4:	f7ff ff8a 	bl	80028fc <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80029e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029ec:	2b20      	cmp	r3, #32
 80029ee:	d108      	bne.n	8002a02 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80029f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80029f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f8:	2208      	movs	r2, #8
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff5a 	bl	80028b4 <bno055_readData>
 8002a00:	e007      	b.n	8002a12 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8002a02:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a0a:	2206      	movs	r2, #6
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff51 	bl	80028b4 <bno055_readData>

  double scale = 1;
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	4ba1      	ldr	r3, [pc, #644]	; (8002c9c <bno055_getVector+0x2c8>)
 8002a18:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  switch (vec) {
 8002a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a20:	3b01      	subs	r3, #1
 8002a22:	2b1f      	cmp	r3, #31
 8002a24:	d874      	bhi.n	8002b10 <bno055_getVector+0x13c>
 8002a26:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <bno055_getVector+0x58>)
 8002a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2c:	08002ac1 	.word	0x08002ac1
 8002a30:	08002b11 	.word	0x08002b11
 8002a34:	08002b11 	.word	0x08002b11
 8002a38:	08002b11 	.word	0x08002b11
 8002a3c:	08002b11 	.word	0x08002b11
 8002a40:	08002b11 	.word	0x08002b11
 8002a44:	08002b11 	.word	0x08002b11
 8002a48:	08002b11 	.word	0x08002b11
 8002a4c:	08002b11 	.word	0x08002b11
 8002a50:	08002b11 	.word	0x08002b11
 8002a54:	08002b11 	.word	0x08002b11
 8002a58:	08002b11 	.word	0x08002b11
 8002a5c:	08002b11 	.word	0x08002b11
 8002a60:	08002aad 	.word	0x08002aad
 8002a64:	08002b11 	.word	0x08002b11
 8002a68:	08002b11 	.word	0x08002b11
 8002a6c:	08002b11 	.word	0x08002b11
 8002a70:	08002b11 	.word	0x08002b11
 8002a74:	08002b11 	.word	0x08002b11
 8002a78:	08002ad5 	.word	0x08002ad5
 8002a7c:	08002b11 	.word	0x08002b11
 8002a80:	08002b11 	.word	0x08002b11
 8002a84:	08002b11 	.word	0x08002b11
 8002a88:	08002b11 	.word	0x08002b11
 8002a8c:	08002b11 	.word	0x08002b11
 8002a90:	08002ae9 	.word	0x08002ae9
 8002a94:	08002b11 	.word	0x08002b11
 8002a98:	08002b11 	.word	0x08002b11
 8002a9c:	08002b11 	.word	0x08002b11
 8002aa0:	08002b11 	.word	0x08002b11
 8002aa4:	08002b11 	.word	0x08002b11
 8002aa8:	08002afd 	.word	0x08002afd
	case BNO055_VECTOR_MAGNETOMETER:
		scale = magScale;
 8002aac:	4b7c      	ldr	r3, [pc, #496]	; (8002ca0 <bno055_getVector+0x2cc>)
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fd27 	bl	8000504 <__aeabi_ui2d>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	460b      	mov	r3, r1
 8002aba:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002abe:	e027      	b.n	8002b10 <bno055_getVector+0x13c>
	case BNO055_VECTOR_ACCELEROMETER || BNO055_VECTOR_LINEARACCEL || BNO055_VECTOR_GRAVITY:
		scale = accelScale;
 8002ac0:	4b78      	ldr	r3, [pc, #480]	; (8002ca4 <bno055_getVector+0x2d0>)
 8002ac2:	881b      	ldrh	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd1d 	bl	8000504 <__aeabi_ui2d>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002ad2:	e01d      	b.n	8002b10 <bno055_getVector+0x13c>
	case BNO055_VECTOR_GYROSCOPE:
		scale = angularRateScale;
 8002ad4:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <bno055_getVector+0x2d4>)
 8002ad6:	881b      	ldrh	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7fd fd13 	bl	8000504 <__aeabi_ui2d>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002ae6:	e013      	b.n	8002b10 <bno055_getVector+0x13c>
	case BNO055_VECTOR_EULER:
		scale = eulerScale;
 8002ae8:	4b70      	ldr	r3, [pc, #448]	; (8002cac <bno055_getVector+0x2d8>)
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd09 	bl	8000504 <__aeabi_ui2d>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002afa:	e009      	b.n	8002b10 <bno055_getVector+0x13c>
	case BNO055_VECTOR_QUATERNION:
		scale = quaScale;
 8002afc:	4b6c      	ldr	r3, [pc, #432]	; (8002cb0 <bno055_getVector+0x2dc>)
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fcff 	bl	8000504 <__aeabi_ui2d>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		break;
 8002b0e:	bf00      	nop
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 8002b10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002b14:	2220      	movs	r2, #32
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f014 fd50 	bl	80175be <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 8002b1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b22:	2b20      	cmp	r3, #32
 8002b24:	d150      	bne.n	8002bc8 <bno055_getVector+0x1f4>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002b26:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002b2a:	021b      	lsls	r3, r3, #8
 8002b2c:	b21a      	sxth	r2, r3
 8002b2e:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002b32:	b21b      	sxth	r3, r3
 8002b34:	4313      	orrs	r3, r2
 8002b36:	b21b      	sxth	r3, r3
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fcf3 	bl	8000524 <__aeabi_i2d>
 8002b3e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b42:	f7fd fe83 	bl	800084c <__aeabi_ddiv>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002b4e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b52:	021b      	lsls	r3, r3, #8
 8002b54:	b21a      	sxth	r2, r3
 8002b56:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002b5a:	b21b      	sxth	r3, r3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	b21b      	sxth	r3, r3
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7fd fcdf 	bl	8000524 <__aeabi_i2d>
 8002b66:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b6a:	f7fd fe6f 	bl	800084c <__aeabi_ddiv>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002b76:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002b7a:	021b      	lsls	r3, r3, #8
 8002b7c:	b21a      	sxth	r2, r3
 8002b7e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002b82:	b21b      	sxth	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	b21b      	sxth	r3, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fccb 	bl	8000524 <__aeabi_i2d>
 8002b8e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002b92:	f7fd fe5b 	bl	800084c <__aeabi_ddiv>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8002b9e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002ba2:	021b      	lsls	r3, r3, #8
 8002ba4:	b21a      	sxth	r2, r3
 8002ba6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8002baa:	b21b      	sxth	r3, r3
 8002bac:	4313      	orrs	r3, r2
 8002bae:	b21b      	sxth	r3, r3
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fcb7 	bl	8000524 <__aeabi_i2d>
 8002bb6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002bba:	f7fd fe47 	bl	800084c <__aeabi_ddiv>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8002bc6:	e03b      	b.n	8002c40 <bno055_getVector+0x26c>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 8002bc8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	b21a      	sxth	r2, r3
 8002bd0:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8002bd4:	b21b      	sxth	r3, r3
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	b21b      	sxth	r3, r3
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fca2 	bl	8000524 <__aeabi_i2d>
 8002be0:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002be4:	f7fd fe32 	bl	800084c <__aeabi_ddiv>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8002bf0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	b21a      	sxth	r2, r3
 8002bf8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002bfc:	b21b      	sxth	r3, r3
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	b21b      	sxth	r3, r3
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fc8e 	bl	8000524 <__aeabi_i2d>
 8002c08:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c0c:	f7fd fe1e 	bl	800084c <__aeabi_ddiv>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 8002c18:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8002c1c:	021b      	lsls	r3, r3, #8
 8002c1e:	b21a      	sxth	r2, r3
 8002c20:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8002c24:	b21b      	sxth	r3, r3
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b21b      	sxth	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f7fd fc7a 	bl	8000524 <__aeabi_i2d>
 8002c30:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002c34:	f7fd fe0a 	bl	800084c <__aeabi_ddiv>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
  }

  return xyz;
 8002c40:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8002c44:	f107 0528 	add.w	r5, r7, #40	; 0x28
 8002c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c4c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002c50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002c54:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002c58:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8002c5c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002c60:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8002c64:	ec49 8b14 	vmov	d4, r8, r9
 8002c68:	ec45 4b15 	vmov	d5, r4, r5
 8002c6c:	ec41 0b16 	vmov	d6, r0, r1
 8002c70:	ec43 2b17 	vmov	d7, r2, r3
}
 8002c74:	eeb0 0a44 	vmov.f32	s0, s8
 8002c78:	eef0 0a64 	vmov.f32	s1, s9
 8002c7c:	eeb0 1a45 	vmov.f32	s2, s10
 8002c80:	eef0 1a65 	vmov.f32	s3, s11
 8002c84:	eeb0 2a46 	vmov.f32	s4, s12
 8002c88:	eef0 2a66 	vmov.f32	s5, s13
 8002c8c:	eeb0 3a47 	vmov.f32	s6, s14
 8002c90:	eef0 3a67 	vmov.f32	s7, s15
 8002c94:	3778      	adds	r7, #120	; 0x78
 8002c96:	46bd      	mov	sp, r7
 8002c98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c9c:	3ff00000 	.word	0x3ff00000
 8002ca0:	20000006 	.word	0x20000006
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000002 	.word	0x20000002
 8002cac:	20000004 	.word	0x20000004
 8002cb0:	20000008 	.word	0x20000008

08002cb4 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8002cb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002cb8:	b090      	sub	sp, #64	; 0x40
 8002cba:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 8002cbc:	2014      	movs	r0, #20
 8002cbe:	f7ff fe89 	bl	80029d4 <bno055_getVector>
 8002cc2:	eeb0 4a40 	vmov.f32	s8, s0
 8002cc6:	eef0 4a60 	vmov.f32	s9, s1
 8002cca:	eeb0 5a41 	vmov.f32	s10, s2
 8002cce:	eef0 5a61 	vmov.f32	s11, s3
 8002cd2:	eeb0 6a42 	vmov.f32	s12, s4
 8002cd6:	eef0 6a62 	vmov.f32	s13, s5
 8002cda:	eeb0 7a43 	vmov.f32	s14, s6
 8002cde:	eef0 7a63 	vmov.f32	s15, s7
 8002ce2:	ed87 4b08 	vstr	d4, [r7, #32]
 8002ce6:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8002cea:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002cee:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8002cf2:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002cf6:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002cfa:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002cfe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d02:	ec49 8b14 	vmov	d4, r8, r9
 8002d06:	ec45 4b15 	vmov	d5, r4, r5
 8002d0a:	ec41 0b16 	vmov	d6, r0, r1
 8002d0e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d12:	eeb0 0a44 	vmov.f32	s0, s8
 8002d16:	eef0 0a64 	vmov.f32	s1, s9
 8002d1a:	eeb0 1a45 	vmov.f32	s2, s10
 8002d1e:	eef0 1a65 	vmov.f32	s3, s11
 8002d22:	eeb0 2a46 	vmov.f32	s4, s12
 8002d26:	eef0 2a66 	vmov.f32	s5, s13
 8002d2a:	eeb0 3a47 	vmov.f32	s6, s14
 8002d2e:	eef0 3a67 	vmov.f32	s7, s15
 8002d32:	3740      	adds	r7, #64	; 0x40
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002d3a <bno055_getVectorEuler>:
bno055_vector_t bno055_getVectorEuler() {
 8002d3a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d3e:	b090      	sub	sp, #64	; 0x40
 8002d40:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_EULER);
 8002d42:	201a      	movs	r0, #26
 8002d44:	f7ff fe46 	bl	80029d4 <bno055_getVector>
 8002d48:	eeb0 4a40 	vmov.f32	s8, s0
 8002d4c:	eef0 4a60 	vmov.f32	s9, s1
 8002d50:	eeb0 5a41 	vmov.f32	s10, s2
 8002d54:	eef0 5a61 	vmov.f32	s11, s3
 8002d58:	eeb0 6a42 	vmov.f32	s12, s4
 8002d5c:	eef0 6a62 	vmov.f32	s13, s5
 8002d60:	eeb0 7a43 	vmov.f32	s14, s6
 8002d64:	eef0 7a63 	vmov.f32	s15, s7
 8002d68:	ed87 4b08 	vstr	d4, [r7, #32]
 8002d6c:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8002d70:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 8002d74:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8002d78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d7c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002d80:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002d84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002d88:	ec49 8b14 	vmov	d4, r8, r9
 8002d8c:	ec45 4b15 	vmov	d5, r4, r5
 8002d90:	ec41 0b16 	vmov	d6, r0, r1
 8002d94:	ec43 2b17 	vmov	d7, r2, r3
}
 8002d98:	eeb0 0a44 	vmov.f32	s0, s8
 8002d9c:	eef0 0a64 	vmov.f32	s1, s9
 8002da0:	eeb0 1a45 	vmov.f32	s2, s10
 8002da4:	eef0 1a65 	vmov.f32	s3, s11
 8002da8:	eeb0 2a46 	vmov.f32	s4, s12
 8002dac:	eef0 2a66 	vmov.f32	s5, s13
 8002db0:	eeb0 3a47 	vmov.f32	s6, s14
 8002db4:	eef0 3a67 	vmov.f32	s7, s15
 8002db8:	3740      	adds	r7, #64	; 0x40
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002dc0 <kominit>:
uint8_t rxdata, datalkp[30], cmd = 0;
extern UART_HandleTypeDef huart3;
extern osThreadId_t commandTaskHandle;

void kominit(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart3, &rxdata, 1);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	4903      	ldr	r1, [pc, #12]	; (8002dd4 <kominit+0x14>)
 8002dc8:	4803      	ldr	r0, [pc, #12]	; (8002dd8 <kominit+0x18>)
 8002dca:	f00a fb6d 	bl	800d4a8 <HAL_UART_Receive_DMA>
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	2000025c 	.word	0x2000025c
 8002dd8:	200006a0 	.word	0x200006a0

08002ddc <isidata>:

void isidata(uint8_t urutan,char dat_[])
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	71fb      	strb	r3, [r7, #7]
	uint8_t n = 0, k = 0, m = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	2300      	movs	r3, #0
 8002dee:	73bb      	strb	r3, [r7, #14]
 8002df0:	2300      	movs	r3, #0
 8002df2:	737b      	strb	r3, [r7, #13]

	for (int c = 0; c < 28; c++)
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	e007      	b.n	8002e0a <isidata+0x2e>
	{
		dat_[c] = 0;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	683a      	ldr	r2, [r7, #0]
 8002dfe:	4413      	add	r3, r2
 8002e00:	2200      	movs	r2, #0
 8002e02:	701a      	strb	r2, [r3, #0]
	for (int c = 0; c < 28; c++)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b1b      	cmp	r3, #27
 8002e0e:	ddf4      	ble.n	8002dfa <isidata+0x1e>
	}

	while (n < urutan)
 8002e10:	e025      	b.n	8002e5e <isidata+0x82>
	{
		if (datalkp[m] == '\r') n = urutan;
 8002e12:	7b7b      	ldrb	r3, [r7, #13]
 8002e14:	4a17      	ldr	r2, [pc, #92]	; (8002e74 <isidata+0x98>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	2b0d      	cmp	r3, #13
 8002e1a:	d101      	bne.n	8002e20 <isidata+0x44>
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	73fb      	strb	r3, [r7, #15]
		if (datalkp[m] == ',') n++;
 8002e20:	7b7b      	ldrb	r3, [r7, #13]
 8002e22:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <isidata+0x98>)
 8002e24:	5cd3      	ldrb	r3, [r2, r3]
 8002e26:	2b2c      	cmp	r3, #44	; 0x2c
 8002e28:	d102      	bne.n	8002e30 <isidata+0x54>
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	73fb      	strb	r3, [r7, #15]
		if (n == urutan - 1 && datalkp[m] != ',')
 8002e30:	7bfa      	ldrb	r2, [r7, #15]
 8002e32:	79fb      	ldrb	r3, [r7, #7]
 8002e34:	3b01      	subs	r3, #1
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d10e      	bne.n	8002e58 <isidata+0x7c>
 8002e3a:	7b7b      	ldrb	r3, [r7, #13]
 8002e3c:	4a0d      	ldr	r2, [pc, #52]	; (8002e74 <isidata+0x98>)
 8002e3e:	5cd3      	ldrb	r3, [r2, r3]
 8002e40:	2b2c      	cmp	r3, #44	; 0x2c
 8002e42:	d009      	beq.n	8002e58 <isidata+0x7c>
		{
			dat_[k] = datalkp[m];
 8002e44:	7b7a      	ldrb	r2, [r7, #13]
 8002e46:	7bbb      	ldrb	r3, [r7, #14]
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	440b      	add	r3, r1
 8002e4c:	4909      	ldr	r1, [pc, #36]	; (8002e74 <isidata+0x98>)
 8002e4e:	5c8a      	ldrb	r2, [r1, r2]
 8002e50:	701a      	strb	r2, [r3, #0]
			k++;
 8002e52:	7bbb      	ldrb	r3, [r7, #14]
 8002e54:	3301      	adds	r3, #1
 8002e56:	73bb      	strb	r3, [r7, #14]
		}
		m++;
 8002e58:	7b7b      	ldrb	r3, [r7, #13]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	737b      	strb	r3, [r7, #13]
	while (n < urutan)
 8002e5e:	7bfa      	ldrb	r2, [r7, #15]
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d3d5      	bcc.n	8002e12 <isidata+0x36>
	}
}
 8002e66:	bf00      	nop
 8002e68:	bf00      	nop
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	20000260 	.word	0x20000260

08002e78 <cocokan>:

uint8_t cocokan(uint8_t urutan,char dat[])
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	; 0x28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	4603      	mov	r3, r0
 8002e80:	6039      	str	r1, [r7, #0]
 8002e82:	71fb      	strb	r3, [r7, #7]
	char buf[30];
	uint8_t hasil = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	isidata(urutan, buf);
 8002e8a:	f107 0208 	add.w	r2, r7, #8
 8002e8e:	79fb      	ldrb	r3, [r7, #7]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ffa2 	bl	8002ddc <isidata>
	uint8_t k = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	while(buf[k] != '\0')
 8002e9e:	e016      	b.n	8002ece <cocokan+0x56>
	{
		k++;
 8002ea0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if (buf[k] == dat[k]) hasil++;
 8002eaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002eae:	3328      	adds	r3, #40	; 0x28
 8002eb0:	443b      	add	r3, r7
 8002eb2:	f813 2c20 	ldrb.w	r2, [r3, #-32]
 8002eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002eba:	6839      	ldr	r1, [r7, #0]
 8002ebc:	440b      	add	r3, r1
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d104      	bne.n	8002ece <cocokan+0x56>
 8002ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ec8:	3301      	adds	r3, #1
 8002eca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while(buf[k] != '\0')
 8002ece:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ed2:	3328      	adds	r3, #40	; 0x28
 8002ed4:	443b      	add	r3, r7
 8002ed6:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e0      	bne.n	8002ea0 <cocokan+0x28>
	}
	return hasil;
 8002ede:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3728      	adds	r7, #40	; 0x28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
	...

08002eec <checkdata_>:

void checkdata_(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	if (rxdata == 'C')
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <checkdata_+0x98>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b43      	cmp	r3, #67	; 0x43
 8002ef6:	d10d      	bne.n	8002f14 <checkdata_+0x28>
	{
		datalkp[cmd] = rxdata;
 8002ef8:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <checkdata_+0x9c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <checkdata_+0x98>)
 8002f00:	7819      	ldrb	r1, [r3, #0]
 8002f02:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <checkdata_+0xa0>)
 8002f04:	5499      	strb	r1, [r3, r2]
		cmd++;
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <checkdata_+0x9c>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	4b1e      	ldr	r3, [pc, #120]	; (8002f88 <checkdata_+0x9c>)
 8002f10:	701a      	strb	r2, [r3, #0]
		{
			datalkp[cmd] = rxdata;
			cmd++;
		}
	}
}
 8002f12:	e035      	b.n	8002f80 <checkdata_+0x94>
	else if (cmd > 0)
 8002f14:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <checkdata_+0x9c>)
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d031      	beq.n	8002f80 <checkdata_+0x94>
		if (rxdata == ',')
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <checkdata_+0x98>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	2b2c      	cmp	r3, #44	; 0x2c
 8002f22:	d10c      	bne.n	8002f3e <checkdata_+0x52>
			datalkp[cmd] = ',';
 8002f24:	4b18      	ldr	r3, [pc, #96]	; (8002f88 <checkdata_+0x9c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	4b18      	ldr	r3, [pc, #96]	; (8002f8c <checkdata_+0xa0>)
 8002f2c:	212c      	movs	r1, #44	; 0x2c
 8002f2e:	5499      	strb	r1, [r3, r2]
			cmd++;
 8002f30:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <checkdata_+0x9c>)
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <checkdata_+0x9c>)
 8002f3a:	701a      	strb	r2, [r3, #0]
}
 8002f3c:	e020      	b.n	8002f80 <checkdata_+0x94>
		else if (rxdata == '\r')
 8002f3e:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <checkdata_+0x98>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b0d      	cmp	r3, #13
 8002f44:	d10f      	bne.n	8002f66 <checkdata_+0x7a>
			datalkp[cmd] = '\r';
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <checkdata_+0x9c>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4b0f      	ldr	r3, [pc, #60]	; (8002f8c <checkdata_+0xa0>)
 8002f4e:	210d      	movs	r1, #13
 8002f50:	5499      	strb	r1, [r3, r2]
			cmd = 0;
 8002f52:	4b0d      	ldr	r3, [pc, #52]	; (8002f88 <checkdata_+0x9c>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	701a      	strb	r2, [r3, #0]
			osThreadFlagsSet(commandTaskHandle, 1);
 8002f58:	4b0d      	ldr	r3, [pc, #52]	; (8002f90 <checkdata_+0xa4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2101      	movs	r1, #1
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f00f f808 	bl	8011f74 <osThreadFlagsSet>
}
 8002f64:	e00c      	b.n	8002f80 <checkdata_+0x94>
			datalkp[cmd] = rxdata;
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <checkdata_+0x9c>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <checkdata_+0x98>)
 8002f6e:	7819      	ldrb	r1, [r3, #0]
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <checkdata_+0xa0>)
 8002f72:	5499      	strb	r1, [r3, r2]
			cmd++;
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <checkdata_+0x9c>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <checkdata_+0x9c>)
 8002f7e:	701a      	strb	r2, [r3, #0]
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	2000025c 	.word	0x2000025c
 8002f88:	2000027e 	.word	0x2000027e
 8002f8c:	20000260 	.word	0x20000260
 8002f90:	20000830 	.word	0x20000830

08002f94 <map>:
void StartCommandTask(void *argument);
void StartParseTask(void *argument);

/* USER CODE BEGIN PFP */
int map(int value, int from_low, int from_high, int to_low, int to_high)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
    return ((value - from_low) * (to_high - to_low)) / (from_high - from_low) + to_low;
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	69b9      	ldr	r1, [r7, #24]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	1a8a      	subs	r2, r1, r2
 8002fae:	fb03 f202 	mul.w	r2, r3, r2
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	1acb      	subs	r3, r1, r3
 8002fb8:	fb92 f2f3 	sdiv	r2, r2, r3
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4413      	add	r3, r2
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002fd0:	f003 fdf2 	bl	8006bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002fd4:	f000 f848 	bl	8003068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002fd8:	f000 fc08 	bl	80037ec <MX_GPIO_Init>
  MX_DMA_Init();
 8002fdc:	f000 fbb0 	bl	8003740 <MX_DMA_Init>
  MX_I2C2_Init();
 8002fe0:	f000 f900 	bl	80031e4 <MX_I2C2_Init>
  MX_I2C3_Init();
 8002fe4:	f000 f92c 	bl	8003240 <MX_I2C3_Init>
  MX_RTC_Init();
 8002fe8:	f000 f958 	bl	800329c <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8002fec:	f000 f97c 	bl	80032e8 <MX_SDIO_SD_Init>
  MX_USART3_UART_Init();
 8002ff0:	f000 fb7c 	bl	80036ec <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8002ff4:	f000 fb50 	bl	8003698 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8002ff8:	f000 f8a2 	bl	8003140 <MX_ADC1_Init>
  MX_TIM3_Init();
 8002ffc:	f000 fa24 	bl	8003448 <MX_TIM3_Init>
  MX_TIM4_Init();
 8003000:	f000 faa4 	bl	800354c <MX_TIM4_Init>
  MX_TIM10_Init();
 8003004:	f000 fb24 	bl	8003650 <MX_TIM10_Init>
  MX_FATFS_Init();
 8003008:	f00c f890 	bl	800f12c <MX_FATFS_Init>
  MX_TIM1_Init();
 800300c:	f000 f98c 	bl	8003328 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003010:	f00e fe70 	bl	8011cf4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of telemetrySemaphore */
  telemetrySemaphoreHandle = osSemaphoreNew(1, 0, &telemetrySemaphore_attributes);
 8003014:	4a0d      	ldr	r2, [pc, #52]	; (800304c <main+0x80>)
 8003016:	2100      	movs	r1, #0
 8003018:	2001      	movs	r0, #1
 800301a:	f00f f895 	bl	8012148 <osSemaphoreNew>
 800301e:	4603      	mov	r3, r0
 8003020:	4a0b      	ldr	r2, [pc, #44]	; (8003050 <main+0x84>)
 8003022:	6013      	str	r3, [r2, #0]

  /* creation of gimbalSemaphore */
  gimbalSemaphoreHandle = osSemaphoreNew(1, 0, &gimbalSemaphore_attributes);
 8003024:	4a0b      	ldr	r2, [pc, #44]	; (8003054 <main+0x88>)
 8003026:	2100      	movs	r1, #0
 8003028:	2001      	movs	r0, #1
 800302a:	f00f f88d 	bl	8012148 <osSemaphoreNew>
 800302e:	4603      	mov	r3, r0
 8003030:	4a09      	ldr	r2, [pc, #36]	; (8003058 <main+0x8c>)
 8003032:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003034:	4a09      	ldr	r2, [pc, #36]	; (800305c <main+0x90>)
 8003036:	2100      	movs	r1, #0
 8003038:	4809      	ldr	r0, [pc, #36]	; (8003060 <main+0x94>)
 800303a:	f00e fedc 	bl	8011df6 <osThreadNew>
 800303e:	4603      	mov	r3, r0
 8003040:	4a08      	ldr	r2, [pc, #32]	; (8003064 <main+0x98>)
 8003042:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003044:	f00e fe9c 	bl	8011d80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003048:	e7fe      	b.n	8003048 <main+0x7c>
 800304a:	bf00      	nop
 800304c:	0801b550 	.word	0x0801b550
 8003050:	20000838 	.word	0x20000838
 8003054:	0801b560 	.word	0x0801b560
 8003058:	2000083c 	.word	0x2000083c
 800305c:	0801b3a0 	.word	0x0801b3a0
 8003060:	08003979 	.word	0x08003979
 8003064:	20000808 	.word	0x20000808

08003068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b094      	sub	sp, #80	; 0x50
 800306c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800306e:	f107 0320 	add.w	r3, r7, #32
 8003072:	2230      	movs	r2, #48	; 0x30
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f014 faa1 	bl	80175be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800307c:	f107 030c 	add.w	r3, r7, #12
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
 8003084:	605a      	str	r2, [r3, #4]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	60da      	str	r2, [r3, #12]
 800308a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800308c:	2300      	movs	r3, #0
 800308e:	60bb      	str	r3, [r7, #8]
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <SystemClock_Config+0xd0>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003094:	4a28      	ldr	r2, [pc, #160]	; (8003138 <SystemClock_Config+0xd0>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	6413      	str	r3, [r2, #64]	; 0x40
 800309c:	4b26      	ldr	r3, [pc, #152]	; (8003138 <SystemClock_Config+0xd0>)
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030a8:	2300      	movs	r3, #0
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	4b23      	ldr	r3, [pc, #140]	; (800313c <SystemClock_Config+0xd4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a22      	ldr	r2, [pc, #136]	; (800313c <SystemClock_Config+0xd4>)
 80030b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b20      	ldr	r3, [pc, #128]	; (800313c <SystemClock_Config+0xd4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030c0:	607b      	str	r3, [r7, #4]
 80030c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80030c4:	2305      	movs	r3, #5
 80030c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80030ce:	2301      	movs	r3, #1
 80030d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030d2:	2302      	movs	r3, #2
 80030d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030dc:	2304      	movs	r3, #4
 80030de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80030e0:	23a8      	movs	r3, #168	; 0xa8
 80030e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030e4:	2302      	movs	r3, #2
 80030e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80030e8:	2307      	movs	r3, #7
 80030ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030ec:	f107 0320 	add.w	r3, r7, #32
 80030f0:	4618      	mov	r0, r3
 80030f2:	f006 ff0b 	bl	8009f0c <HAL_RCC_OscConfig>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80030fc:	f001 fbe0 	bl	80048c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003100:	230f      	movs	r3, #15
 8003102:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003104:	2302      	movs	r3, #2
 8003106:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003108:	2300      	movs	r3, #0
 800310a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800310c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003110:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003112:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003116:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003118:	f107 030c 	add.w	r3, r7, #12
 800311c:	2105      	movs	r1, #5
 800311e:	4618      	mov	r0, r3
 8003120:	f007 f96c 	bl	800a3fc <HAL_RCC_ClockConfig>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800312a:	f001 fbc9 	bl	80048c0 <Error_Handler>
  }
}
 800312e:	bf00      	nop
 8003130:	3750      	adds	r7, #80	; 0x50
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023800 	.word	0x40023800
 800313c:	40007000 	.word	0x40007000

08003140 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003146:	463b      	mov	r3, r7
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	609a      	str	r2, [r3, #8]
 8003150:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003152:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <MX_ADC1_Init+0x98>)
 8003154:	4a21      	ldr	r2, [pc, #132]	; (80031dc <MX_ADC1_Init+0x9c>)
 8003156:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003158:	4b1f      	ldr	r3, [pc, #124]	; (80031d8 <MX_ADC1_Init+0x98>)
 800315a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800315e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003160:	4b1d      	ldr	r3, [pc, #116]	; (80031d8 <MX_ADC1_Init+0x98>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003166:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <MX_ADC1_Init+0x98>)
 8003168:	2201      	movs	r2, #1
 800316a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800316c:	4b1a      	ldr	r3, [pc, #104]	; (80031d8 <MX_ADC1_Init+0x98>)
 800316e:	2201      	movs	r2, #1
 8003170:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003172:	4b19      	ldr	r3, [pc, #100]	; (80031d8 <MX_ADC1_Init+0x98>)
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800317a:	4b17      	ldr	r3, [pc, #92]	; (80031d8 <MX_ADC1_Init+0x98>)
 800317c:	2200      	movs	r2, #0
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003180:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <MX_ADC1_Init+0x98>)
 8003182:	4a17      	ldr	r2, [pc, #92]	; (80031e0 <MX_ADC1_Init+0xa0>)
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003186:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <MX_ADC1_Init+0x98>)
 8003188:	2200      	movs	r2, #0
 800318a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800318c:	4b12      	ldr	r3, [pc, #72]	; (80031d8 <MX_ADC1_Init+0x98>)
 800318e:	2201      	movs	r2, #1
 8003190:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003192:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <MX_ADC1_Init+0x98>)
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800319a:	4b0f      	ldr	r3, [pc, #60]	; (80031d8 <MX_ADC1_Init+0x98>)
 800319c:	2201      	movs	r2, #1
 800319e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80031a0:	480d      	ldr	r0, [pc, #52]	; (80031d8 <MX_ADC1_Init+0x98>)
 80031a2:	f003 fd6f 	bl	8006c84 <HAL_ADC_Init>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80031ac:	f001 fb88 	bl	80048c0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80031b0:	230a      	movs	r3, #10
 80031b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80031b4:	2301      	movs	r3, #1
 80031b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80031b8:	2307      	movs	r3, #7
 80031ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80031bc:	463b      	mov	r3, r7
 80031be:	4619      	mov	r1, r3
 80031c0:	4805      	ldr	r0, [pc, #20]	; (80031d8 <MX_ADC1_Init+0x98>)
 80031c2:	f004 f865 	bl	8007290 <HAL_ADC_ConfigChannel>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80031cc:	f001 fb78 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000284 	.word	0x20000284
 80031dc:	40012000 	.word	0x40012000
 80031e0:	0f000001 	.word	0x0f000001

080031e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80031e8:	4b12      	ldr	r3, [pc, #72]	; (8003234 <MX_I2C2_Init+0x50>)
 80031ea:	4a13      	ldr	r2, [pc, #76]	; (8003238 <MX_I2C2_Init+0x54>)
 80031ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80031ee:	4b11      	ldr	r3, [pc, #68]	; (8003234 <MX_I2C2_Init+0x50>)
 80031f0:	4a12      	ldr	r2, [pc, #72]	; (800323c <MX_I2C2_Init+0x58>)
 80031f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80031f4:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <MX_I2C2_Init+0x50>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <MX_I2C2_Init+0x50>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003200:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <MX_I2C2_Init+0x50>)
 8003202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003206:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003208:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <MX_I2C2_Init+0x50>)
 800320a:	2200      	movs	r2, #0
 800320c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800320e:	4b09      	ldr	r3, [pc, #36]	; (8003234 <MX_I2C2_Init+0x50>)
 8003210:	2200      	movs	r2, #0
 8003212:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003214:	4b07      	ldr	r3, [pc, #28]	; (8003234 <MX_I2C2_Init+0x50>)
 8003216:	2200      	movs	r2, #0
 8003218:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800321a:	4b06      	ldr	r3, [pc, #24]	; (8003234 <MX_I2C2_Init+0x50>)
 800321c:	2200      	movs	r2, #0
 800321e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003220:	4804      	ldr	r0, [pc, #16]	; (8003234 <MX_I2C2_Init+0x50>)
 8003222:	f005 f995 	bl	8008550 <HAL_I2C_Init>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800322c:	f001 fb48 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003230:	bf00      	nop
 8003232:	bd80      	pop	{r7, pc}
 8003234:	2000032c 	.word	0x2000032c
 8003238:	40005800 	.word	0x40005800
 800323c:	000186a0 	.word	0x000186a0

08003240 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003244:	4b12      	ldr	r3, [pc, #72]	; (8003290 <MX_I2C3_Init+0x50>)
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <MX_I2C3_Init+0x54>)
 8003248:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800324a:	4b11      	ldr	r3, [pc, #68]	; (8003290 <MX_I2C3_Init+0x50>)
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <MX_I2C3_Init+0x58>)
 800324e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003250:	4b0f      	ldr	r3, [pc, #60]	; (8003290 <MX_I2C3_Init+0x50>)
 8003252:	2200      	movs	r2, #0
 8003254:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003256:	4b0e      	ldr	r3, [pc, #56]	; (8003290 <MX_I2C3_Init+0x50>)
 8003258:	2200      	movs	r2, #0
 800325a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800325c:	4b0c      	ldr	r3, [pc, #48]	; (8003290 <MX_I2C3_Init+0x50>)
 800325e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003262:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <MX_I2C3_Init+0x50>)
 8003266:	2200      	movs	r2, #0
 8003268:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <MX_I2C3_Init+0x50>)
 800326c:	2200      	movs	r2, #0
 800326e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003270:	4b07      	ldr	r3, [pc, #28]	; (8003290 <MX_I2C3_Init+0x50>)
 8003272:	2200      	movs	r2, #0
 8003274:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <MX_I2C3_Init+0x50>)
 8003278:	2200      	movs	r2, #0
 800327a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800327c:	4804      	ldr	r0, [pc, #16]	; (8003290 <MX_I2C3_Init+0x50>)
 800327e:	f005 f967 	bl	8008550 <HAL_I2C_Init>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003288:	f001 fb1a 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800328c:	bf00      	nop
 800328e:	bd80      	pop	{r7, pc}
 8003290:	20000380 	.word	0x20000380
 8003294:	40005c00 	.word	0x40005c00
 8003298:	00061a80 	.word	0x00061a80

0800329c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80032a0:	4b0f      	ldr	r3, [pc, #60]	; (80032e0 <MX_RTC_Init+0x44>)
 80032a2:	4a10      	ldr	r2, [pc, #64]	; (80032e4 <MX_RTC_Init+0x48>)
 80032a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <MX_RTC_Init+0x44>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <MX_RTC_Init+0x44>)
 80032ae:	227f      	movs	r2, #127	; 0x7f
 80032b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <MX_RTC_Init+0x44>)
 80032b4:	22ff      	movs	r2, #255	; 0xff
 80032b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <MX_RTC_Init+0x44>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <MX_RTC_Init+0x44>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <MX_RTC_Init+0x44>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_RTC_Init+0x44>)
 80032cc:	f007 fbca 	bl	800aa64 <HAL_RTC_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80032d6:	f001 faf3 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200003d4 	.word	0x200003d4
 80032e4:	40002800 	.word	0x40002800

080032e8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <MX_SDIO_SD_Init+0x38>)
 80032ee:	4a0d      	ldr	r2, [pc, #52]	; (8003324 <MX_SDIO_SD_Init+0x3c>)
 80032f0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80032f2:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <MX_SDIO_SD_Init+0x38>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80032f8:	4b09      	ldr	r3, [pc, #36]	; (8003320 <MX_SDIO_SD_Init+0x38>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80032fe:	4b08      	ldr	r3, [pc, #32]	; (8003320 <MX_SDIO_SD_Init+0x38>)
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003304:	4b06      	ldr	r3, [pc, #24]	; (8003320 <MX_SDIO_SD_Init+0x38>)
 8003306:	2200      	movs	r2, #0
 8003308:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800330a:	4b05      	ldr	r3, [pc, #20]	; (8003320 <MX_SDIO_SD_Init+0x38>)
 800330c:	2200      	movs	r2, #0
 800330e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 12;
 8003310:	4b03      	ldr	r3, [pc, #12]	; (8003320 <MX_SDIO_SD_Init+0x38>)
 8003312:	220c      	movs	r2, #12
 8003314:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003316:	bf00      	nop
 8003318:	46bd      	mov	sp, r7
 800331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331e:	4770      	bx	lr
 8003320:	200003f4 	.word	0x200003f4
 8003324:	40012c00 	.word	0x40012c00

08003328 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b092      	sub	sp, #72	; 0x48
 800332c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800332e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003338:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	605a      	str	r2, [r3, #4]
 8003342:	609a      	str	r2, [r3, #8]
 8003344:	60da      	str	r2, [r3, #12]
 8003346:	611a      	str	r2, [r3, #16]
 8003348:	615a      	str	r2, [r3, #20]
 800334a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800334c:	1d3b      	adds	r3, r7, #4
 800334e:	2220      	movs	r2, #32
 8003350:	2100      	movs	r1, #0
 8003352:	4618      	mov	r0, r3
 8003354:	f014 f933 	bl	80175be <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003358:	4b39      	ldr	r3, [pc, #228]	; (8003440 <MX_TIM1_Init+0x118>)
 800335a:	4a3a      	ldr	r2, [pc, #232]	; (8003444 <MX_TIM1_Init+0x11c>)
 800335c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 6588-1;
 800335e:	4b38      	ldr	r3, [pc, #224]	; (8003440 <MX_TIM1_Init+0x118>)
 8003360:	f641 12bb 	movw	r2, #6587	; 0x19bb
 8003364:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <MX_TIM1_Init+0x118>)
 8003368:	2200      	movs	r2, #0
 800336a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800336c:	4b34      	ldr	r3, [pc, #208]	; (8003440 <MX_TIM1_Init+0x118>)
 800336e:	22ff      	movs	r2, #255	; 0xff
 8003370:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <MX_TIM1_Init+0x118>)
 8003374:	2200      	movs	r2, #0
 8003376:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003378:	4b31      	ldr	r3, [pc, #196]	; (8003440 <MX_TIM1_Init+0x118>)
 800337a:	2200      	movs	r2, #0
 800337c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337e:	4b30      	ldr	r3, [pc, #192]	; (8003440 <MX_TIM1_Init+0x118>)
 8003380:	2200      	movs	r2, #0
 8003382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003384:	482e      	ldr	r0, [pc, #184]	; (8003440 <MX_TIM1_Init+0x118>)
 8003386:	f009 f817 	bl	800c3b8 <HAL_TIM_PWM_Init>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003390:	f001 fa96 	bl	80048c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003398:	2300      	movs	r3, #0
 800339a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800339c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80033a0:	4619      	mov	r1, r3
 80033a2:	4827      	ldr	r0, [pc, #156]	; (8003440 <MX_TIM1_Init+0x118>)
 80033a4:	f009 fede 	bl	800d164 <HAL_TIMEx_MasterConfigSynchronization>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80033ae:	f001 fa87 	bl	80048c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033b2:	2360      	movs	r3, #96	; 0x60
 80033b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033ba:	2300      	movs	r3, #0
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033be:	2300      	movs	r3, #0
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033c6:	2300      	movs	r3, #0
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033ca:	2300      	movs	r3, #0
 80033cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033d2:	2204      	movs	r2, #4
 80033d4:	4619      	mov	r1, r3
 80033d6:	481a      	ldr	r0, [pc, #104]	; (8003440 <MX_TIM1_Init+0x118>)
 80033d8:	f009 f9f6 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80033e2:	f001 fa6d 	bl	80048c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80033e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033ea:	2208      	movs	r2, #8
 80033ec:	4619      	mov	r1, r3
 80033ee:	4814      	ldr	r0, [pc, #80]	; (8003440 <MX_TIM1_Init+0x118>)
 80033f0:	f009 f9ea 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80033fa:	f001 fa61 	bl	80048c0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003416:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003418:	2300      	movs	r3, #0
 800341a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800341c:	1d3b      	adds	r3, r7, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4807      	ldr	r0, [pc, #28]	; (8003440 <MX_TIM1_Init+0x118>)
 8003422:	f009 ff1b 	bl	800d25c <HAL_TIMEx_ConfigBreakDeadTime>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800342c:	f001 fa48 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003430:	4803      	ldr	r0, [pc, #12]	; (8003440 <MX_TIM1_Init+0x118>)
 8003432:	f002 f8cb 	bl	80055cc <HAL_TIM_MspPostInit>

}
 8003436:	bf00      	nop
 8003438:	3748      	adds	r7, #72	; 0x48
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	20000538 	.word	0x20000538
 8003444:	40010000 	.word	0x40010000

08003448 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08e      	sub	sp, #56	; 0x38
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800344e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800345c:	f107 0320 	add.w	r3, r7, #32
 8003460:	2200      	movs	r2, #0
 8003462:	601a      	str	r2, [r3, #0]
 8003464:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003466:	1d3b      	adds	r3, r7, #4
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	605a      	str	r2, [r3, #4]
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	611a      	str	r2, [r3, #16]
 8003474:	615a      	str	r2, [r3, #20]
 8003476:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003478:	4b32      	ldr	r3, [pc, #200]	; (8003544 <MX_TIM3_Init+0xfc>)
 800347a:	4a33      	ldr	r2, [pc, #204]	; (8003548 <MX_TIM3_Init+0x100>)
 800347c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800347e:	4b31      	ldr	r3, [pc, #196]	; (8003544 <MX_TIM3_Init+0xfc>)
 8003480:	2253      	movs	r2, #83	; 0x53
 8003482:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003484:	4b2f      	ldr	r3, [pc, #188]	; (8003544 <MX_TIM3_Init+0xfc>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <MX_TIM3_Init+0xfc>)
 800348c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003490:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003492:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <MX_TIM3_Init+0xfc>)
 8003494:	2200      	movs	r2, #0
 8003496:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <MX_TIM3_Init+0xfc>)
 800349a:	2200      	movs	r2, #0
 800349c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800349e:	4829      	ldr	r0, [pc, #164]	; (8003544 <MX_TIM3_Init+0xfc>)
 80034a0:	f008 feca 	bl	800c238 <HAL_TIM_Base_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80034aa:	f001 fa09 	bl	80048c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034b2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034b8:	4619      	mov	r1, r3
 80034ba:	4822      	ldr	r0, [pc, #136]	; (8003544 <MX_TIM3_Init+0xfc>)
 80034bc:	f009 fa46 	bl	800c94c <HAL_TIM_ConfigClockSource>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80034c6:	f001 f9fb 	bl	80048c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034ca:	481e      	ldr	r0, [pc, #120]	; (8003544 <MX_TIM3_Init+0xfc>)
 80034cc:	f008 ff74 	bl	800c3b8 <HAL_TIM_PWM_Init>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80034d6:	f001 f9f3 	bl	80048c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034da:	2300      	movs	r3, #0
 80034dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034de:	2300      	movs	r3, #0
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034e2:	f107 0320 	add.w	r3, r7, #32
 80034e6:	4619      	mov	r1, r3
 80034e8:	4816      	ldr	r0, [pc, #88]	; (8003544 <MX_TIM3_Init+0xfc>)
 80034ea:	f009 fe3b 	bl	800d164 <HAL_TIMEx_MasterConfigSynchronization>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d001      	beq.n	80034f8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80034f4:	f001 f9e4 	bl	80048c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034f8:	2360      	movs	r3, #96	; 0x60
 80034fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003504:	2300      	movs	r3, #0
 8003506:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003508:	1d3b      	adds	r3, r7, #4
 800350a:	2200      	movs	r2, #0
 800350c:	4619      	mov	r1, r3
 800350e:	480d      	ldr	r0, [pc, #52]	; (8003544 <MX_TIM3_Init+0xfc>)
 8003510:	f009 f95a 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800351a:	f001 f9d1 	bl	80048c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800351e:	1d3b      	adds	r3, r7, #4
 8003520:	2208      	movs	r2, #8
 8003522:	4619      	mov	r1, r3
 8003524:	4807      	ldr	r0, [pc, #28]	; (8003544 <MX_TIM3_Init+0xfc>)
 8003526:	f009 f94f 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8003530:	f001 f9c6 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003534:	4803      	ldr	r0, [pc, #12]	; (8003544 <MX_TIM3_Init+0xfc>)
 8003536:	f002 f849 	bl	80055cc <HAL_TIM_MspPostInit>

}
 800353a:	bf00      	nop
 800353c:	3738      	adds	r7, #56	; 0x38
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000580 	.word	0x20000580
 8003548:	40000400 	.word	0x40000400

0800354c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b08e      	sub	sp, #56	; 0x38
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003552:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]
 800355a:	605a      	str	r2, [r3, #4]
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003560:	f107 0320 	add.w	r3, r7, #32
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800356a:	1d3b      	adds	r3, r7, #4
 800356c:	2200      	movs	r2, #0
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	60da      	str	r2, [r3, #12]
 8003576:	611a      	str	r2, [r3, #16]
 8003578:	615a      	str	r2, [r3, #20]
 800357a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800357c:	4b32      	ldr	r3, [pc, #200]	; (8003648 <MX_TIM4_Init+0xfc>)
 800357e:	4a33      	ldr	r2, [pc, #204]	; (800364c <MX_TIM4_Init+0x100>)
 8003580:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8003582:	4b31      	ldr	r3, [pc, #196]	; (8003648 <MX_TIM4_Init+0xfc>)
 8003584:	2253      	movs	r2, #83	; 0x53
 8003586:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003588:	4b2f      	ldr	r3, [pc, #188]	; (8003648 <MX_TIM4_Init+0xfc>)
 800358a:	2200      	movs	r2, #0
 800358c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 800358e:	4b2e      	ldr	r3, [pc, #184]	; (8003648 <MX_TIM4_Init+0xfc>)
 8003590:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8003594:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003596:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <MX_TIM4_Init+0xfc>)
 8003598:	2200      	movs	r2, #0
 800359a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800359c:	4b2a      	ldr	r3, [pc, #168]	; (8003648 <MX_TIM4_Init+0xfc>)
 800359e:	2200      	movs	r2, #0
 80035a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80035a2:	4829      	ldr	r0, [pc, #164]	; (8003648 <MX_TIM4_Init+0xfc>)
 80035a4:	f008 fe48 	bl	800c238 <HAL_TIM_Base_Init>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80035ae:	f001 f987 	bl	80048c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80035b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035bc:	4619      	mov	r1, r3
 80035be:	4822      	ldr	r0, [pc, #136]	; (8003648 <MX_TIM4_Init+0xfc>)
 80035c0:	f009 f9c4 	bl	800c94c <HAL_TIM_ConfigClockSource>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80035ca:	f001 f979 	bl	80048c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80035ce:	481e      	ldr	r0, [pc, #120]	; (8003648 <MX_TIM4_Init+0xfc>)
 80035d0:	f008 fef2 	bl	800c3b8 <HAL_TIM_PWM_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80035da:	f001 f971 	bl	80048c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80035e6:	f107 0320 	add.w	r3, r7, #32
 80035ea:	4619      	mov	r1, r3
 80035ec:	4816      	ldr	r0, [pc, #88]	; (8003648 <MX_TIM4_Init+0xfc>)
 80035ee:	f009 fdb9 	bl	800d164 <HAL_TIMEx_MasterConfigSynchronization>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d001      	beq.n	80035fc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80035f8:	f001 f962 	bl	80048c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035fc:	2360      	movs	r3, #96	; 0x60
 80035fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003600:	2300      	movs	r3, #0
 8003602:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	2200      	movs	r2, #0
 8003610:	4619      	mov	r1, r3
 8003612:	480d      	ldr	r0, [pc, #52]	; (8003648 <MX_TIM4_Init+0xfc>)
 8003614:	f009 f8d8 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800361e:	f001 f94f 	bl	80048c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003622:	1d3b      	adds	r3, r7, #4
 8003624:	2208      	movs	r2, #8
 8003626:	4619      	mov	r1, r3
 8003628:	4807      	ldr	r0, [pc, #28]	; (8003648 <MX_TIM4_Init+0xfc>)
 800362a:	f009 f8cd 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8003634:	f001 f944 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003638:	4803      	ldr	r0, [pc, #12]	; (8003648 <MX_TIM4_Init+0xfc>)
 800363a:	f001 ffc7 	bl	80055cc <HAL_TIM_MspPostInit>

}
 800363e:	bf00      	nop
 8003640:	3738      	adds	r7, #56	; 0x38
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	200005c8 	.word	0x200005c8
 800364c:	40000800 	.word	0x40000800

08003650 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003654:	4b0e      	ldr	r3, [pc, #56]	; (8003690 <MX_TIM10_Init+0x40>)
 8003656:	4a0f      	ldr	r2, [pc, #60]	; (8003694 <MX_TIM10_Init+0x44>)
 8003658:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 16800-1;
 800365a:	4b0d      	ldr	r3, [pc, #52]	; (8003690 <MX_TIM10_Init+0x40>)
 800365c:	f244 129f 	movw	r2, #16799	; 0x419f
 8003660:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <MX_TIM10_Init+0x40>)
 8003664:	2200      	movs	r2, #0
 8003666:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10000-1;
 8003668:	4b09      	ldr	r3, [pc, #36]	; (8003690 <MX_TIM10_Init+0x40>)
 800366a:	f242 720f 	movw	r2, #9999	; 0x270f
 800366e:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003670:	4b07      	ldr	r3, [pc, #28]	; (8003690 <MX_TIM10_Init+0x40>)
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003676:	4b06      	ldr	r3, [pc, #24]	; (8003690 <MX_TIM10_Init+0x40>)
 8003678:	2200      	movs	r2, #0
 800367a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800367c:	4804      	ldr	r0, [pc, #16]	; (8003690 <MX_TIM10_Init+0x40>)
 800367e:	f008 fddb 	bl	800c238 <HAL_TIM_Base_Init>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8003688:	f001 f91a 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800368c:	bf00      	nop
 800368e:	bd80      	pop	{r7, pc}
 8003690:	20000610 	.word	0x20000610
 8003694:	40014400 	.word	0x40014400

08003698 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <MX_USART2_UART_Init+0x50>)
 80036a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80036aa:	4b0e      	ldr	r3, [pc, #56]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80036b0:	4b0c      	ldr	r3, [pc, #48]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80036b6:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80036bc:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036be:	220c      	movs	r2, #12
 80036c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036c2:	4b08      	ldr	r3, [pc, #32]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80036c8:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80036ce:	4805      	ldr	r0, [pc, #20]	; (80036e4 <MX_USART2_UART_Init+0x4c>)
 80036d0:	f009 fe2a 	bl	800d328 <HAL_UART_Init>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80036da:	f001 f8f1 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80036de:	bf00      	nop
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000658 	.word	0x20000658
 80036e8:	40004400 	.word	0x40004400

080036ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80036f0:	4b11      	ldr	r3, [pc, #68]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 80036f2:	4a12      	ldr	r2, [pc, #72]	; (800373c <MX_USART3_UART_Init+0x50>)
 80036f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 19200;
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 80036f8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80036fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003700:	2200      	movs	r2, #0
 8003702:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003706:	2200      	movs	r2, #0
 8003708:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 800370c:	2200      	movs	r2, #0
 800370e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003712:	220c      	movs	r2, #12
 8003714:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003718:	2200      	movs	r2, #0
 800371a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 800371e:	2200      	movs	r2, #0
 8003720:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <MX_USART3_UART_Init+0x4c>)
 8003724:	f009 fe00 	bl	800d328 <HAL_UART_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800372e:	f001 f8c7 	bl	80048c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200006a0 	.word	0x200006a0
 800373c:	40004800 	.word	0x40004800

08003740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	607b      	str	r3, [r7, #4]
 800374a:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <MX_DMA_Init+0xa8>)
 800374c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374e:	4a26      	ldr	r2, [pc, #152]	; (80037e8 <MX_DMA_Init+0xa8>)
 8003750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003754:	6313      	str	r3, [r2, #48]	; 0x30
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <MX_DMA_Init+0xa8>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800375e:	607b      	str	r3, [r7, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <MX_DMA_Init+0xa8>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a1f      	ldr	r2, [pc, #124]	; (80037e8 <MX_DMA_Init+0xa8>)
 800376c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b1d      	ldr	r3, [pc, #116]	; (80037e8 <MX_DMA_Init+0xa8>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2105      	movs	r1, #5
 8003782:	200c      	movs	r0, #12
 8003784:	f004 f8dc 	bl	8007940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003788:	200c      	movs	r0, #12
 800378a:	f004 f8f5 	bl	8007978 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 800378e:	2200      	movs	r2, #0
 8003790:	2105      	movs	r1, #5
 8003792:	200e      	movs	r0, #14
 8003794:	f004 f8d4 	bl	8007940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003798:	200e      	movs	r0, #14
 800379a:	f004 f8ed 	bl	8007978 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800379e:	2200      	movs	r2, #0
 80037a0:	2105      	movs	r1, #5
 80037a2:	2010      	movs	r0, #16
 80037a4:	f004 f8cc 	bl	8007940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80037a8:	2010      	movs	r0, #16
 80037aa:	f004 f8e5 	bl	8007978 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80037ae:	2200      	movs	r2, #0
 80037b0:	2105      	movs	r1, #5
 80037b2:	2038      	movs	r0, #56	; 0x38
 80037b4:	f004 f8c4 	bl	8007940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80037b8:	2038      	movs	r0, #56	; 0x38
 80037ba:	f004 f8dd 	bl	8007978 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80037be:	2200      	movs	r2, #0
 80037c0:	2105      	movs	r1, #5
 80037c2:	203b      	movs	r0, #59	; 0x3b
 80037c4:	f004 f8bc 	bl	8007940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80037c8:	203b      	movs	r0, #59	; 0x3b
 80037ca:	f004 f8d5 	bl	8007978 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80037ce:	2200      	movs	r2, #0
 80037d0:	2105      	movs	r1, #5
 80037d2:	2045      	movs	r0, #69	; 0x45
 80037d4:	f004 f8b4 	bl	8007940 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80037d8:	2045      	movs	r0, #69	; 0x45
 80037da:	f004 f8cd 	bl	8007978 <HAL_NVIC_EnableIRQ>

}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800

080037ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f2:	f107 031c 	add.w	r3, r7, #28
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	609a      	str	r2, [r3, #8]
 80037fe:	60da      	str	r2, [r3, #12]
 8003800:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	61bb      	str	r3, [r7, #24]
 8003806:	4b40      	ldr	r3, [pc, #256]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a3f      	ldr	r2, [pc, #252]	; (8003908 <MX_GPIO_Init+0x11c>)
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	61bb      	str	r3, [r7, #24]
 800381c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	4b39      	ldr	r3, [pc, #228]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a38      	ldr	r2, [pc, #224]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b36      	ldr	r3, [pc, #216]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
 800383e:	4b32      	ldr	r3, [pc, #200]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003842:	4a31      	ldr	r2, [pc, #196]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6313      	str	r3, [r2, #48]	; 0x30
 800384a:	4b2f      	ldr	r3, [pc, #188]	; (8003908 <MX_GPIO_Init+0x11c>)
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	613b      	str	r3, [r7, #16]
 8003854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	4b2b      	ldr	r3, [pc, #172]	; (8003908 <MX_GPIO_Init+0x11c>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a2a      	ldr	r2, [pc, #168]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003860:	f043 0302 	orr.w	r3, r3, #2
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b28      	ldr	r3, [pc, #160]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	60fb      	str	r3, [r7, #12]
 8003870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	4b24      	ldr	r3, [pc, #144]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a23      	ldr	r2, [pc, #140]	; (8003908 <MX_GPIO_Init+0x11c>)
 800387c:	f043 0310 	orr.w	r3, r3, #16
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b21      	ldr	r3, [pc, #132]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	60bb      	str	r3, [r7, #8]
 800388c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	607b      	str	r3, [r7, #4]
 8003892:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	4a1c      	ldr	r2, [pc, #112]	; (8003908 <MX_GPIO_Init+0x11c>)
 8003898:	f043 0308 	orr.w	r3, r3, #8
 800389c:	6313      	str	r3, [r2, #48]	; 0x30
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <MX_GPIO_Init+0x11c>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80038aa:	2200      	movs	r2, #0
 80038ac:	f44f 51f0 	mov.w	r1, #7680	; 0x1e00
 80038b0:	4816      	ldr	r0, [pc, #88]	; (800390c <MX_GPIO_Init+0x120>)
 80038b2:	f004 fe19 	bl	80084e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BUZZER_Pin|CAM1_Pin|CAM2_Pin, GPIO_PIN_RESET);
 80038b6:	2200      	movs	r2, #0
 80038b8:	f44f 5183 	mov.w	r1, #4192	; 0x1060
 80038bc:	4814      	ldr	r0, [pc, #80]	; (8003910 <MX_GPIO_Init+0x124>)
 80038be:	f004 fe13 	bl	80084e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED4_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED4_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 80038c2:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80038c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038c8:	2301      	movs	r3, #1
 80038ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d0:	2300      	movs	r3, #0
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038d4:	f107 031c 	add.w	r3, r7, #28
 80038d8:	4619      	mov	r1, r3
 80038da:	480c      	ldr	r0, [pc, #48]	; (800390c <MX_GPIO_Init+0x120>)
 80038dc:	f004 fc68 	bl	80081b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUZZER_Pin CAM1_Pin CAM2_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin|CAM1_Pin|CAM2_Pin;
 80038e0:	f44f 5383 	mov.w	r3, #4192	; 0x1060
 80038e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038e6:	2301      	movs	r3, #1
 80038e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038ea:	2300      	movs	r3, #0
 80038ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038f2:	f107 031c 	add.w	r3, r7, #28
 80038f6:	4619      	mov	r1, r3
 80038f8:	4805      	ldr	r0, [pc, #20]	; (8003910 <MX_GPIO_Init+0x124>)
 80038fa:	f004 fc59 	bl	80081b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038fe:	bf00      	nop
 8003900:	3730      	adds	r7, #48	; 0x30
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	40023800 	.word	0x40023800
 800390c:	40021000 	.word	0x40021000
 8003910:	40020400 	.word	0x40020400

08003914 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	ADC_measure();
 800391c:	f002 fc48 	bl	80061b0 <ADC_measure>
}
 8003920:	bf00      	nop
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
	if (huart == &huart2)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <HAL_UART_RxCpltCallback+0x30>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d101      	bne.n	800393c <HAL_UART_RxCpltCallback+0x14>
	{
		parsegpsdata();
 8003938:	f002 fc18 	bl	800616c <parsegpsdata>
	}

	if (huart == &huart3)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a07      	ldr	r2, [pc, #28]	; (800395c <HAL_UART_RxCpltCallback+0x34>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d105      	bne.n	8003950 <HAL_UART_RxCpltCallback+0x28>
	{
		osThreadFlagsSet(parseTaskHandle, 1);
 8003944:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_UART_RxCpltCallback+0x38>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2101      	movs	r1, #1
 800394a:	4618      	mov	r0, r3
 800394c:	f00e fb12 	bl	8011f74 <osThreadFlagsSet>
	}
}
 8003950:	bf00      	nop
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	20000658 	.word	0x20000658
 800395c:	200006a0 	.word	0x200006a0
 8003960:	20000834 	.word	0x20000834

08003964 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	TM_BKPSRAM_Init();
 8003980:	f002 f9de 	bl	8005d40 <TM_BKPSRAM_Init>
	init();
 8003984:	f002 fa12 	bl	8005dac <init>
	rtcbackup();
 8003988:	f002 fe1e 	bl	80065c8 <rtcbackup>
	if (f_mount(&fs, (const TCHAR *)SDPath, 1) == FR_OK)
 800398c:	2201      	movs	r2, #1
 800398e:	4972      	ldr	r1, [pc, #456]	; (8003b58 <StartDefaultTask+0x1e0>)
 8003990:	4872      	ldr	r0, [pc, #456]	; (8003b5c <StartDefaultTask+0x1e4>)
 8003992:	f00d fc03 	bl	801119c <f_mount>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10f      	bne.n	80039bc <StartDefaultTask+0x44>
	{
		if (f_stat("2032.txt", &fno) != FR_OK)
 800399c:	4970      	ldr	r1, [pc, #448]	; (8003b60 <StartDefaultTask+0x1e8>)
 800399e:	4871      	ldr	r0, [pc, #452]	; (8003b64 <StartDefaultTask+0x1ec>)
 80039a0:	f00e f881 	bl	8011aa6 <f_stat>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d00a      	beq.n	80039c0 <StartDefaultTask+0x48>
		{
			f_open(&fil, "2032.txt", FA_CREATE_ALWAYS | FA_READ | FA_WRITE);
 80039aa:	220b      	movs	r2, #11
 80039ac:	496d      	ldr	r1, [pc, #436]	; (8003b64 <StartDefaultTask+0x1ec>)
 80039ae:	486e      	ldr	r0, [pc, #440]	; (8003b68 <StartDefaultTask+0x1f0>)
 80039b0:	f00d fc58 	bl	8011264 <f_open>
			f_close(&fil);
 80039b4:	486c      	ldr	r0, [pc, #432]	; (8003b68 <StartDefaultTask+0x1f0>)
 80039b6:	f00e f847 	bl	8011a48 <f_close>
 80039ba:	e001      	b.n	80039c0 <StartDefaultTask+0x48>
		}
	}
	else
	{
		Error_Handler();
 80039bc:	f000 ff80 	bl	80048c0 <Error_Handler>
	}

	bno055_init();
 80039c0:	f002 fb8c 	bl	80060dc <bno055_init>

	if (BME280_Config(OSRS_2, OSRS_16, OSRS_OFF, MODE_NORMAL, T_SB_0p5, IIR_16) == 0)
 80039c4:	2304      	movs	r3, #4
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	2300      	movs	r3, #0
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	2303      	movs	r3, #3
 80039ce:	2200      	movs	r2, #0
 80039d0:	2105      	movs	r1, #5
 80039d2:	2002      	movs	r0, #2
 80039d4:	f7fd fc48 	bl	8001268 <BME280_Config>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d106      	bne.n	80039ec <StartDefaultTask+0x74>
	{
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80039de:	2201      	movs	r2, #1
 80039e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80039e4:	4861      	ldr	r0, [pc, #388]	; (8003b6c <StartDefaultTask+0x1f4>)
 80039e6:	f004 fd7f 	bl	80084e8 <HAL_GPIO_WritePin>
 80039ea:	e001      	b.n	80039f0 <StartDefaultTask+0x78>
	}
	else
	{
		Error_Handler();
 80039ec:	f000 ff68 	bl	80048c0 <Error_Handler>

#ifdef USE_SERVO_GIMBAL
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
#else
	PID(&_PID, &input, &output, &Setpoint, 11, 0, 0, _PID_P_ON_E, _PID_CD_DIRECT);
 80039f0:	2300      	movs	r3, #0
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2301      	movs	r3, #1
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	ed9f 2b4f 	vldr	d2, [pc, #316]	; 8003b38 <StartDefaultTask+0x1c0>
 80039fc:	ed9f 1b4e 	vldr	d1, [pc, #312]	; 8003b38 <StartDefaultTask+0x1c0>
 8003a00:	ed9f 0b4f 	vldr	d0, [pc, #316]	; 8003b40 <StartDefaultTask+0x1c8>
 8003a04:	4b5a      	ldr	r3, [pc, #360]	; (8003b70 <StartDefaultTask+0x1f8>)
 8003a06:	4a5b      	ldr	r2, [pc, #364]	; (8003b74 <StartDefaultTask+0x1fc>)
 8003a08:	495b      	ldr	r1, [pc, #364]	; (8003b78 <StartDefaultTask+0x200>)
 8003a0a:	485c      	ldr	r0, [pc, #368]	; (8003b7c <StartDefaultTask+0x204>)
 8003a0c:	f000 ff98 	bl	8004940 <PID>
	PID_SetMode(&_PID, _PID_MODE_AUTOMATIC);
 8003a10:	2101      	movs	r1, #1
 8003a12:	485a      	ldr	r0, [pc, #360]	; (8003b7c <StartDefaultTask+0x204>)
 8003a14:	f001 f8ca 	bl	8004bac <PID_SetMode>
	PID_SetSampleTime(&_PID, 1);
 8003a18:	2101      	movs	r1, #1
 8003a1a:	4858      	ldr	r0, [pc, #352]	; (8003b7c <StartDefaultTask+0x204>)
 8003a1c:	f001 fa3a 	bl	8004e94 <PID_SetSampleTime>
	PID_SetOutputLimits(&_PID, -255, 255);
 8003a20:	ed9f 1b49 	vldr	d1, [pc, #292]	; 8003b48 <StartDefaultTask+0x1d0>
 8003a24:	ed9f 0b4a 	vldr	d0, [pc, #296]	; 8003b50 <StartDefaultTask+0x1d8>
 8003a28:	4854      	ldr	r0, [pc, #336]	; (8003b7c <StartDefaultTask+0x204>)
 8003a2a:	f001 f8dd 	bl	8004be8 <PID_SetOutputLimits>
	resetPosition(0);
 8003a2e:	2000      	movs	r0, #0
 8003a30:	f7fe fed8 	bl	80027e4 <resetPosition>
	resetCumulativePosition(0);
 8003a34:	2000      	movs	r0, #0
 8003a36:	f7fe fee9 	bl	800280c <resetCumulativePosition>
	TIM1->CCR2 = 0;
 8003a3a:	4b51      	ldr	r3, [pc, #324]	; (8003b80 <StartDefaultTask+0x208>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 8003a40:	4b4f      	ldr	r3, [pc, #316]	; (8003b80 <StartDefaultTask+0x208>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003a46:	2108      	movs	r1, #8
 8003a48:	484e      	ldr	r0, [pc, #312]	; (8003b84 <StartDefaultTask+0x20c>)
 8003a4a:	f008 fd05 	bl	800c458 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003a4e:	2104      	movs	r1, #4
 8003a50:	484c      	ldr	r0, [pc, #304]	; (8003b84 <StartDefaultTask+0x20c>)
 8003a52:	f008 fd01 	bl	800c458 <HAL_TIM_PWM_Start>
#endif

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003a56:	2100      	movs	r1, #0
 8003a58:	484b      	ldr	r0, [pc, #300]	; (8003b88 <StartDefaultTask+0x210>)
 8003a5a:	f008 fcfd 	bl	800c458 <HAL_TIM_PWM_Start>

	/* creation of gimbalTask */
	gimbalTaskHandle = osThreadNew(StartGimbalTask, NULL, &gimbalTask_attributes);
 8003a5e:	4a4b      	ldr	r2, [pc, #300]	; (8003b8c <StartDefaultTask+0x214>)
 8003a60:	2100      	movs	r1, #0
 8003a62:	484b      	ldr	r0, [pc, #300]	; (8003b90 <StartDefaultTask+0x218>)
 8003a64:	f00e f9c7 	bl	8011df6 <osThreadNew>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	4a4a      	ldr	r2, [pc, #296]	; (8003b94 <StartDefaultTask+0x21c>)
 8003a6c:	6013      	str	r3, [r2, #0]

	/* creation of gyroscopeTask */
	gyroscopeTaskHandle = osThreadNew(StartGyroscopeTask, NULL, &gyroscopeTask_attributes);
 8003a6e:	4a4a      	ldr	r2, [pc, #296]	; (8003b98 <StartDefaultTask+0x220>)
 8003a70:	2100      	movs	r1, #0
 8003a72:	484a      	ldr	r0, [pc, #296]	; (8003b9c <StartDefaultTask+0x224>)
 8003a74:	f00e f9bf 	bl	8011df6 <osThreadNew>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	4a49      	ldr	r2, [pc, #292]	; (8003ba0 <StartDefaultTask+0x228>)
 8003a7c:	6013      	str	r3, [r2, #0]

	/* creation of eulerTask */
	eulerTaskHandle = osThreadNew(StartEulerTask, NULL, &eulerTask_attributes);
 8003a7e:	4a49      	ldr	r2, [pc, #292]	; (8003ba4 <StartDefaultTask+0x22c>)
 8003a80:	2100      	movs	r1, #0
 8003a82:	4849      	ldr	r0, [pc, #292]	; (8003ba8 <StartDefaultTask+0x230>)
 8003a84:	f00e f9b7 	bl	8011df6 <osThreadNew>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4a48      	ldr	r2, [pc, #288]	; (8003bac <StartDefaultTask+0x234>)
 8003a8c:	6013      	str	r3, [r2, #0]

	/* creation of rtcTask */
	rtcTaskHandle = osThreadNew(StartRTCTask, NULL, &rtcTask_attributes);
 8003a8e:	4a48      	ldr	r2, [pc, #288]	; (8003bb0 <StartDefaultTask+0x238>)
 8003a90:	2100      	movs	r1, #0
 8003a92:	4848      	ldr	r0, [pc, #288]	; (8003bb4 <StartDefaultTask+0x23c>)
 8003a94:	f00e f9af 	bl	8011df6 <osThreadNew>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	4a47      	ldr	r2, [pc, #284]	; (8003bb8 <StartDefaultTask+0x240>)
 8003a9c:	6013      	str	r3, [r2, #0]

	/* creation of barometerTask */
	barometerTaskHandle = osThreadNew(StartBarometerTask, NULL, &barometerTask_attributes);
 8003a9e:	4a47      	ldr	r2, [pc, #284]	; (8003bbc <StartDefaultTask+0x244>)
 8003aa0:	2100      	movs	r1, #0
 8003aa2:	4847      	ldr	r0, [pc, #284]	; (8003bc0 <StartDefaultTask+0x248>)
 8003aa4:	f00e f9a7 	bl	8011df6 <osThreadNew>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	4a46      	ldr	r2, [pc, #280]	; (8003bc4 <StartDefaultTask+0x24c>)
 8003aac:	6013      	str	r3, [r2, #0]

	/* creation of stateTask */
	stateTaskHandle = osThreadNew(StartStateTask, NULL, &stateTask_attributes);
 8003aae:	4a46      	ldr	r2, [pc, #280]	; (8003bc8 <StartDefaultTask+0x250>)
 8003ab0:	2100      	movs	r1, #0
 8003ab2:	4846      	ldr	r0, [pc, #280]	; (8003bcc <StartDefaultTask+0x254>)
 8003ab4:	f00e f99f 	bl	8011df6 <osThreadNew>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4a45      	ldr	r2, [pc, #276]	; (8003bd0 <StartDefaultTask+0x258>)
 8003abc:	6013      	str	r3, [r2, #0]

	/* creation of getdataTask */
	getdataTaskHandle = osThreadNew(StartGetDataTask, NULL, &getdataTask_attributes);
 8003abe:	4a45      	ldr	r2, [pc, #276]	; (8003bd4 <StartDefaultTask+0x25c>)
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	4845      	ldr	r0, [pc, #276]	; (8003bd8 <StartDefaultTask+0x260>)
 8003ac4:	f00e f997 	bl	8011df6 <osThreadNew>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	4a44      	ldr	r2, [pc, #272]	; (8003bdc <StartDefaultTask+0x264>)
 8003acc:	6013      	str	r3, [r2, #0]

	/* creation of telemetryTask */
	telemetryTaskHandle = osThreadNew(StartTelemetryTask, NULL, &telemetryTask_attributes);
 8003ace:	4a44      	ldr	r2, [pc, #272]	; (8003be0 <StartDefaultTask+0x268>)
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4844      	ldr	r0, [pc, #272]	; (8003be4 <StartDefaultTask+0x26c>)
 8003ad4:	f00e f98f 	bl	8011df6 <osThreadNew>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	4a43      	ldr	r2, [pc, #268]	; (8003be8 <StartDefaultTask+0x270>)
 8003adc:	6013      	str	r3, [r2, #0]

	/* creation of cameraTask */
	cameraTaskHandle = osThreadNew(StartCameraTask, NULL, &cameraTask_attributes);
 8003ade:	4a43      	ldr	r2, [pc, #268]	; (8003bec <StartDefaultTask+0x274>)
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	4843      	ldr	r0, [pc, #268]	; (8003bf0 <StartDefaultTask+0x278>)
 8003ae4:	f00e f987 	bl	8011df6 <osThreadNew>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	4a42      	ldr	r2, [pc, #264]	; (8003bf4 <StartDefaultTask+0x27c>)
 8003aec:	6013      	str	r3, [r2, #0]

	/* creation of commandTask */
	commandTaskHandle = osThreadNew(StartCommandTask, NULL, &commandTask_attributes);
 8003aee:	4a42      	ldr	r2, [pc, #264]	; (8003bf8 <StartDefaultTask+0x280>)
 8003af0:	2100      	movs	r1, #0
 8003af2:	4842      	ldr	r0, [pc, #264]	; (8003bfc <StartDefaultTask+0x284>)
 8003af4:	f00e f97f 	bl	8011df6 <osThreadNew>
 8003af8:	4603      	mov	r3, r0
 8003afa:	4a41      	ldr	r2, [pc, #260]	; (8003c00 <StartDefaultTask+0x288>)
 8003afc:	6013      	str	r3, [r2, #0]

	/* creation of parseTask */
	parseTaskHandle = osThreadNew(StartParseTask, NULL, &parseTask_attributes);
 8003afe:	4a41      	ldr	r2, [pc, #260]	; (8003c04 <StartDefaultTask+0x28c>)
 8003b00:	2100      	movs	r1, #0
 8003b02:	4841      	ldr	r0, [pc, #260]	; (8003c08 <StartDefaultTask+0x290>)
 8003b04:	f00e f977 	bl	8011df6 <osThreadNew>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4a40      	ldr	r2, [pc, #256]	; (8003c0c <StartDefaultTask+0x294>)
 8003b0c:	6013      	str	r3, [r2, #0]

	if (flagtel)
 8003b0e:	4b40      	ldr	r3, [pc, #256]	; (8003c10 <StartDefaultTask+0x298>)
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d004      	beq.n	8003b20 <StartDefaultTask+0x1a8>
	{
		osSemaphoreRelease(telemetrySemaphoreHandle);
 8003b16:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <StartDefaultTask+0x29c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f00e fbf0 	bl	8012300 <osSemaphoreRelease>
	}

	adcinit();
 8003b20:	f002 fa68 	bl	8005ff4 <adcinit>
	gpsinit();
 8003b24:	f002 fb10 	bl	8006148 <gpsinit>
	kominit();
 8003b28:	f7ff f94a 	bl	8002dc0 <kominit>

	osThreadTerminate(defaultTaskHandle);
 8003b2c:	4b3a      	ldr	r3, [pc, #232]	; (8003c18 <StartDefaultTask+0x2a0>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4618      	mov	r0, r3
 8003b32:	f00e f9f2 	bl	8011f1a <osThreadTerminate>
  /* Infinite loop */
  for(;;)
 8003b36:	e7fe      	b.n	8003b36 <StartDefaultTask+0x1be>
	...
 8003b44:	40260000 	.word	0x40260000
 8003b48:	00000000 	.word	0x00000000
 8003b4c:	406fe000 	.word	0x406fe000
 8003b50:	00000000 	.word	0x00000000
 8003b54:	c06fe000 	.word	0xc06fe000
 8003b58:	2000114c 	.word	0x2000114c
 8003b5c:	20000840 	.word	0x20000840
 8003b60:	20000ca4 	.word	0x20000ca4
 8003b64:	0801b17c 	.word	0x0801b17c
 8003b68:	20000a74 	.word	0x20000a74
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	20000d90 	.word	0x20000d90
 8003b74:	20000d88 	.word	0x20000d88
 8003b78:	20000da0 	.word	0x20000da0
 8003b7c:	20000d00 	.word	0x20000d00
 8003b80:	40010000 	.word	0x40010000
 8003b84:	20000538 	.word	0x20000538
 8003b88:	200005c8 	.word	0x200005c8
 8003b8c:	0801b3c4 	.word	0x0801b3c4
 8003b90:	08003c1d 	.word	0x08003c1d
 8003b94:	2000080c 	.word	0x2000080c
 8003b98:	0801b3e8 	.word	0x0801b3e8
 8003b9c:	08003dc1 	.word	0x08003dc1
 8003ba0:	20000810 	.word	0x20000810
 8003ba4:	0801b40c 	.word	0x0801b40c
 8003ba8:	08003e0d 	.word	0x08003e0d
 8003bac:	20000814 	.word	0x20000814
 8003bb0:	0801b430 	.word	0x0801b430
 8003bb4:	08003e59 	.word	0x08003e59
 8003bb8:	20000818 	.word	0x20000818
 8003bbc:	0801b454 	.word	0x0801b454
 8003bc0:	08003eb5 	.word	0x08003eb5
 8003bc4:	2000081c 	.word	0x2000081c
 8003bc8:	0801b478 	.word	0x0801b478
 8003bcc:	08003ec9 	.word	0x08003ec9
 8003bd0:	20000820 	.word	0x20000820
 8003bd4:	0801b49c 	.word	0x0801b49c
 8003bd8:	08004181 	.word	0x08004181
 8003bdc:	20000824 	.word	0x20000824
 8003be0:	0801b4c0 	.word	0x0801b4c0
 8003be4:	08004531 	.word	0x08004531
 8003be8:	20000828 	.word	0x20000828
 8003bec:	0801b4e4 	.word	0x0801b4e4
 8003bf0:	080045ed 	.word	0x080045ed
 8003bf4:	2000082c 	.word	0x2000082c
 8003bf8:	0801b508 	.word	0x0801b508
 8003bfc:	080046e9 	.word	0x080046e9
 8003c00:	20000830 	.word	0x20000830
 8003c04:	0801b52c 	.word	0x0801b52c
 8003c08:	08004881 	.word	0x08004881
 8003c0c:	20000834 	.word	0x20000834
 8003c10:	20000df4 	.word	0x20000df4
 8003c14:	20000838 	.word	0x20000838
 8003c18:	20000808 	.word	0x20000808

08003c1c <StartGimbalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGimbalTask */
void StartGimbalTask(void *argument)
{
 8003c1c:	b590      	push	{r4, r7, lr}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af02      	add	r7, sp, #8
 8003c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGimbalTask */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreAcquire(gimbalSemaphoreHandle, osWaitForever);
 8003c24:	4b58      	ldr	r3, [pc, #352]	; (8003d88 <StartGimbalTask+0x16c>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f04f 31ff 	mov.w	r1, #4294967295
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f00e fb15 	bl	801225c <osSemaphoreAcquire>
	  {
		  servogerak(&htim3, TIM_CHANNEL_1, 180);
		  servogerak(&htim3, TIM_CHANNEL_3, bno055_euler.x - 180);
	  }
#else
	  CountENC = getCumulativePosition();
 8003c32:	f7fe fd81 	bl	8002738 <getCumulativePosition>
 8003c36:	4603      	mov	r3, r0
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <StartGimbalTask+0x170>)
 8003c3a:	6013      	str	r3, [r2, #0]
	  Rev = CountENC % 4095;
 8003c3c:	4b53      	ldr	r3, [pc, #332]	; (8003d8c <StartGimbalTask+0x170>)
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	4b53      	ldr	r3, [pc, #332]	; (8003d90 <StartGimbalTask+0x174>)
 8003c42:	fb83 1302 	smull	r1, r3, r3, r2
 8003c46:	4413      	add	r3, r2
 8003c48:	12d9      	asrs	r1, r3, #11
 8003c4a:	17d3      	asrs	r3, r2, #31
 8003c4c:	1ac9      	subs	r1, r1, r3
 8003c4e:	460b      	mov	r3, r1
 8003c50:	031b      	lsls	r3, r3, #12
 8003c52:	1a5b      	subs	r3, r3, r1
 8003c54:	1ad1      	subs	r1, r2, r3
 8003c56:	4b4f      	ldr	r3, [pc, #316]	; (8003d94 <StartGimbalTask+0x178>)
 8003c58:	6019      	str	r1, [r3, #0]
	  Current_Angle = map(Rev, 0, 4095, 0, 359);
 8003c5a:	4b4e      	ldr	r3, [pc, #312]	; (8003d94 <StartGimbalTask+0x178>)
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	f240 1367 	movw	r3, #359	; 0x167
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	2300      	movs	r3, #0
 8003c66:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f7ff f992 	bl	8002f94 <map>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a49      	ldr	r2, [pc, #292]	; (8003d98 <StartGimbalTask+0x17c>)
 8003c74:	6013      	str	r3, [r2, #0]
	  CW = ((int)bno055_euler.x - Current_Angle+360) % 360;
 8003c76:	4b49      	ldr	r3, [pc, #292]	; (8003d9c <StartGimbalTask+0x180>)
 8003c78:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f7fc ff6a 	bl	8000b58 <__aeabi_d2iz>
 8003c84:	4602      	mov	r2, r0
 8003c86:	4b44      	ldr	r3, [pc, #272]	; (8003d98 <StartGimbalTask+0x17c>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003c90:	4a43      	ldr	r2, [pc, #268]	; (8003da0 <StartGimbalTask+0x184>)
 8003c92:	fb82 1203 	smull	r1, r2, r2, r3
 8003c96:	441a      	add	r2, r3
 8003c98:	1211      	asrs	r1, r2, #8
 8003c9a:	17da      	asrs	r2, r3, #31
 8003c9c:	1a8a      	subs	r2, r1, r2
 8003c9e:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003ca2:	fb01 f202 	mul.w	r2, r1, r2
 8003ca6:	1a9a      	subs	r2, r3, r2
 8003ca8:	4b3e      	ldr	r3, [pc, #248]	; (8003da4 <StartGimbalTask+0x188>)
 8003caa:	601a      	str	r2, [r3, #0]
	  CCW = ((Current_Angle - (int)bno055_euler.x+360) % 360);
 8003cac:	4b3a      	ldr	r3, [pc, #232]	; (8003d98 <StartGimbalTask+0x17c>)
 8003cae:	681c      	ldr	r4, [r3, #0]
 8003cb0:	4b3a      	ldr	r3, [pc, #232]	; (8003d9c <StartGimbalTask+0x180>)
 8003cb2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f7fc ff4d 	bl	8000b58 <__aeabi_d2iz>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	1ae3      	subs	r3, r4, r3
 8003cc2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003cc6:	4a36      	ldr	r2, [pc, #216]	; (8003da0 <StartGimbalTask+0x184>)
 8003cc8:	fb82 1203 	smull	r1, r2, r2, r3
 8003ccc:	441a      	add	r2, r3
 8003cce:	1211      	asrs	r1, r2, #8
 8003cd0:	17da      	asrs	r2, r3, #31
 8003cd2:	1a8a      	subs	r2, r1, r2
 8003cd4:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003cd8:	fb01 f202 	mul.w	r2, r1, r2
 8003cdc:	1a9a      	subs	r2, r3, r2
 8003cde:	4b32      	ldr	r3, [pc, #200]	; (8003da8 <StartGimbalTask+0x18c>)
 8003ce0:	601a      	str	r2, [r3, #0]

	  if (CW < CCW)
 8003ce2:	4b30      	ldr	r3, [pc, #192]	; (8003da4 <StartGimbalTask+0x188>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b30      	ldr	r3, [pc, #192]	; (8003da8 <StartGimbalTask+0x18c>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	da0a      	bge.n	8003d04 <StartGimbalTask+0xe8>
		  jarak_min = CW;
 8003cee:	4b2d      	ldr	r3, [pc, #180]	; (8003da4 <StartGimbalTask+0x188>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fc16 	bl	8000524 <__aeabi_i2d>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	492b      	ldr	r1, [pc, #172]	; (8003dac <StartGimbalTask+0x190>)
 8003cfe:	e9c1 2300 	strd	r2, r3, [r1]
 8003d02:	e00a      	b.n	8003d1a <StartGimbalTask+0xfe>
	  else
		  jarak_min = -CCW;
 8003d04:	4b28      	ldr	r3, [pc, #160]	; (8003da8 <StartGimbalTask+0x18c>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	425b      	negs	r3, r3
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fc fc0a 	bl	8000524 <__aeabi_i2d>
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	4925      	ldr	r1, [pc, #148]	; (8003dac <StartGimbalTask+0x190>)
 8003d16:	e9c1 2300 	strd	r2, r3, [r1]

	  input = jarak_min;
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <StartGimbalTask+0x190>)
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	4923      	ldr	r1, [pc, #140]	; (8003db0 <StartGimbalTask+0x194>)
 8003d22:	e9c1 2300 	strd	r2, r3, [r1]
	  PID_Compute(&_PID);
 8003d26:	4823      	ldr	r0, [pc, #140]	; (8003db4 <StartGimbalTask+0x198>)
 8003d28:	f000 fe56 	bl	80049d8 <PID_Compute>

	  if (output > 0)
 8003d2c:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <StartGimbalTask+0x19c>)
 8003d2e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	f7fc feed 	bl	8000b18 <__aeabi_dcmpgt>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <StartGimbalTask+0x13e>
		  TIM1->CCR3 = (uint32_t)output;
 8003d44:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <StartGimbalTask+0x19c>)
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	4c1c      	ldr	r4, [pc, #112]	; (8003dbc <StartGimbalTask+0x1a0>)
 8003d4c:	4610      	mov	r0, r2
 8003d4e:	4619      	mov	r1, r3
 8003d50:	f7fc ff2a 	bl	8000ba8 <__aeabi_d2uiz>
 8003d54:	4603      	mov	r3, r0
 8003d56:	63e3      	str	r3, [r4, #60]	; 0x3c
 8003d58:	e00d      	b.n	8003d76 <StartGimbalTask+0x15a>
	  else
		  TIM1->CCR2 = (uint32_t)abs(output);
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <StartGimbalTask+0x19c>)
 8003d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f7fc fef8 	bl	8000b58 <__aeabi_d2iz>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003d6e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003d72:	4b12      	ldr	r3, [pc, #72]	; (8003dbc <StartGimbalTask+0x1a0>)
 8003d74:	639a      	str	r2, [r3, #56]	; 0x38
#endif

	  osSemaphoreRelease(gimbalSemaphoreHandle);
 8003d76:	4b04      	ldr	r3, [pc, #16]	; (8003d88 <StartGimbalTask+0x16c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f00e fac0 	bl	8012300 <osSemaphoreRelease>

	  osDelay(SAMPLE_TIME_GIMBAL_MS);
 8003d80:	2001      	movs	r0, #1
 8003d82:	f00e f9c6 	bl	8012112 <osDelay>
	  osSemaphoreAcquire(gimbalSemaphoreHandle, osWaitForever);
 8003d86:	e74d      	b.n	8003c24 <StartGimbalTask+0x8>
 8003d88:	2000083c 	.word	0x2000083c
 8003d8c:	20000d70 	.word	0x20000d70
 8003d90:	80080081 	.word	0x80080081
 8003d94:	20000d74 	.word	0x20000d74
 8003d98:	20000d78 	.word	0x20000d78
 8003d9c:	20000cc0 	.word	0x20000cc0
 8003da0:	b60b60b7 	.word	0xb60b60b7
 8003da4:	20000d7c 	.word	0x20000d7c
 8003da8:	20000d80 	.word	0x20000d80
 8003dac:	20000d98 	.word	0x20000d98
 8003db0:	20000da0 	.word	0x20000da0
 8003db4:	20000d00 	.word	0x20000d00
 8003db8:	20000d88 	.word	0x20000d88
 8003dbc:	40010000 	.word	0x40010000

08003dc0 <StartGyroscopeTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGyroscopeTask */
void StartGyroscopeTask(void *argument)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGyroscopeTask */
  /* Infinite loop */
  for(;;)
  {
	  bno055_gyro = bno055_getVectorGyroscope();
 8003dc8:	f7fe ff74 	bl	8002cb4 <bno055_getVectorGyroscope>
 8003dcc:	eeb0 4a40 	vmov.f32	s8, s0
 8003dd0:	eef0 4a60 	vmov.f32	s9, s1
 8003dd4:	eeb0 5a41 	vmov.f32	s10, s2
 8003dd8:	eef0 5a61 	vmov.f32	s11, s3
 8003ddc:	eeb0 6a42 	vmov.f32	s12, s4
 8003de0:	eef0 6a62 	vmov.f32	s13, s5
 8003de4:	eeb0 7a43 	vmov.f32	s14, s6
 8003de8:	eef0 7a63 	vmov.f32	s15, s7
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <StartGyroscopeTask+0x48>)
 8003dee:	ed83 4b00 	vstr	d4, [r3]
 8003df2:	ed83 5b02 	vstr	d5, [r3, #8]
 8003df6:	ed83 6b04 	vstr	d6, [r3, #16]
 8003dfa:	ed83 7b06 	vstr	d7, [r3, #24]

	  osDelay(SAMPLE_TIME_GYRO_MS);
 8003dfe:	200a      	movs	r0, #10
 8003e00:	f00e f987 	bl	8012112 <osDelay>
	  bno055_gyro = bno055_getVectorGyroscope();
 8003e04:	e7e0      	b.n	8003dc8 <StartGyroscopeTask+0x8>
 8003e06:	bf00      	nop
 8003e08:	20000ce0 	.word	0x20000ce0

08003e0c <StartEulerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartEulerTask */
void StartEulerTask(void *argument)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartEulerTask */
  /* Infinite loop */
  for(;;)
  {
	  bno055_euler = bno055_getVectorEuler();
 8003e14:	f7fe ff91 	bl	8002d3a <bno055_getVectorEuler>
 8003e18:	eeb0 4a40 	vmov.f32	s8, s0
 8003e1c:	eef0 4a60 	vmov.f32	s9, s1
 8003e20:	eeb0 5a41 	vmov.f32	s10, s2
 8003e24:	eef0 5a61 	vmov.f32	s11, s3
 8003e28:	eeb0 6a42 	vmov.f32	s12, s4
 8003e2c:	eef0 6a62 	vmov.f32	s13, s5
 8003e30:	eeb0 7a43 	vmov.f32	s14, s6
 8003e34:	eef0 7a63 	vmov.f32	s15, s7
 8003e38:	4b06      	ldr	r3, [pc, #24]	; (8003e54 <StartEulerTask+0x48>)
 8003e3a:	ed83 4b00 	vstr	d4, [r3]
 8003e3e:	ed83 5b02 	vstr	d5, [r3, #8]
 8003e42:	ed83 6b04 	vstr	d6, [r3, #16]
 8003e46:	ed83 7b06 	vstr	d7, [r3, #24]

	  osDelay(SAMPLE_TIME_EULER_MS);
 8003e4a:	200a      	movs	r0, #10
 8003e4c:	f00e f961 	bl	8012112 <osDelay>
	  bno055_euler = bno055_getVectorEuler();
 8003e50:	e7e0      	b.n	8003e14 <StartEulerTask+0x8>
 8003e52:	bf00      	nop
 8003e54:	20000cc0 	.word	0x20000cc0

08003e58 <StartRTCTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRTCTask */
void StartRTCTask(void *argument)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b088      	sub	sp, #32
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  RTC_TimeTypeDef gTime;
	  RTC_DateTypeDef gDate;

	  HAL_RTC_GetTime(&hrtc, &gTime, RTC_FORMAT_BIN);
 8003e60:	f107 030c 	add.w	r3, r7, #12
 8003e64:	2200      	movs	r2, #0
 8003e66:	4619      	mov	r1, r3
 8003e68:	480e      	ldr	r0, [pc, #56]	; (8003ea4 <StartRTCTask+0x4c>)
 8003e6a:	f006 ff18 	bl	800ac9e <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &gDate, RTC_FORMAT_BIN);
 8003e6e:	f107 0308 	add.w	r3, r7, #8
 8003e72:	2200      	movs	r2, #0
 8003e74:	4619      	mov	r1, r3
 8003e76:	480b      	ldr	r0, [pc, #44]	; (8003ea4 <StartRTCTask+0x4c>)
 8003e78:	f006 ff6f 	bl	800ad5a <HAL_RTC_GetDate>

	  wakturtc(gTime.Hours,datatelemetri.jam);
 8003e7c:	7b3b      	ldrb	r3, [r7, #12]
 8003e7e:	490a      	ldr	r1, [pc, #40]	; (8003ea8 <StartRTCTask+0x50>)
 8003e80:	4618      	mov	r0, r3
 8003e82:	f002 fb4f 	bl	8006524 <wakturtc>
	  wakturtc(gTime.Minutes,datatelemetri.menit);
 8003e86:	7b7b      	ldrb	r3, [r7, #13]
 8003e88:	4908      	ldr	r1, [pc, #32]	; (8003eac <StartRTCTask+0x54>)
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f002 fb4a 	bl	8006524 <wakturtc>
	  wakturtc(gTime.Seconds,datatelemetri.detik);
 8003e90:	7bbb      	ldrb	r3, [r7, #14]
 8003e92:	4907      	ldr	r1, [pc, #28]	; (8003eb0 <StartRTCTask+0x58>)
 8003e94:	4618      	mov	r0, r3
 8003e96:	f002 fb45 	bl	8006524 <wakturtc>

	  osDelay(SAMPLE_TIME_RTC_MS);
 8003e9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e9e:	f00e f938 	bl	8012112 <osDelay>
  {
 8003ea2:	e7dd      	b.n	8003e60 <StartRTCTask+0x8>
 8003ea4:	200003d4 	.word	0x200003d4
 8003ea8:	20000f51 	.word	0x20000f51
 8003eac:	20000f53 	.word	0x20000f53
 8003eb0:	20000f55 	.word	0x20000f55

08003eb4 <StartBarometerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBarometerTask */
void StartBarometerTask(void *argument)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBarometerTask */
  /* Infinite loop */
  for(;;)
  {
	  BME280_Measure();
 8003ebc:	f7fd fdfa 	bl	8001ab4 <BME280_Measure>

	  osDelay(SAMPLE_TIME_BARO_MS);
 8003ec0:	2028      	movs	r0, #40	; 0x28
 8003ec2:	f00e f926 	bl	8012112 <osDelay>
	  BME280_Measure();
 8003ec6:	e7f9      	b.n	8003ebc <StartBarometerTask+0x8>

08003ec8 <StartStateTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStateTask */
void StartStateTask(void *argument)
{
 8003ec8:	b5b0      	push	{r4, r5, r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStateTask */
  /* Infinite loop */
  for(;;)
  {
	  uint8_t valid = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	73fb      	strb	r3, [r7, #15]
	  switch (cansatState)
 8003ed4:	4b93      	ldr	r3, [pc, #588]	; (8004124 <StartStateTask+0x25c>)
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	f200 811f 	bhi.w	800411c <StartStateTask+0x254>
 8003ede:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <StartStateTask+0x1c>)
 8003ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee4:	08003efd 	.word	0x08003efd
 8003ee8:	08003f31 	.word	0x08003f31
 8003eec:	08003fbb 	.word	0x08003fbb
 8003ef0:	0800401b 	.word	0x0800401b
 8003ef4:	0800408f 	.word	0x0800408f
 8003ef8:	080040c7 	.word	0x080040c7
	  {
	  	  case LAUNCH_WAIT:
	  		  strcpy(datatelemetri.state, "LAUNCH_WAIT");
 8003efc:	4a8a      	ldr	r2, [pc, #552]	; (8004128 <StartStateTask+0x260>)
 8003efe:	4b8b      	ldr	r3, [pc, #556]	; (800412c <StartStateTask+0x264>)
 8003f00:	4614      	mov	r4, r2
 8003f02:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003f04:	6020      	str	r0, [r4, #0]
 8003f06:	6061      	str	r1, [r4, #4]
 8003f08:	60a2      	str	r2, [r4, #8]
			  if (datatelemetri.alt > 100)
 8003f0a:	4b89      	ldr	r3, [pc, #548]	; (8004130 <StartStateTask+0x268>)
 8003f0c:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8003f10:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8004134 <StartStateTask+0x26c>
 8003f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f1c:	dc00      	bgt.n	8003f20 <StartStateTask+0x58>
			  {
				  cansatState = ASCENT;
				  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
			  }
			  break;
 8003f1e:	e0fd      	b.n	800411c <StartStateTask+0x254>
				  cansatState = ASCENT;
 8003f20:	4b80      	ldr	r3, [pc, #512]	; (8004124 <StartStateTask+0x25c>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	701a      	strb	r2, [r3, #0]
				  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
 8003f26:	4b84      	ldr	r3, [pc, #528]	; (8004138 <StartStateTask+0x270>)
 8003f28:	4a7e      	ldr	r2, [pc, #504]	; (8004124 <StartStateTask+0x25c>)
 8003f2a:	7812      	ldrb	r2, [r2, #0]
 8003f2c:	701a      	strb	r2, [r3, #0]
			  break;
 8003f2e:	e0f5      	b.n	800411c <StartStateTask+0x254>

		  case ASCENT:
			  strcpy(datatelemetri.state, "ASCENT");
 8003f30:	4b7d      	ldr	r3, [pc, #500]	; (8004128 <StartStateTask+0x260>)
 8003f32:	4a82      	ldr	r2, [pc, #520]	; (800413c <StartStateTask+0x274>)
 8003f34:	6810      	ldr	r0, [r2, #0]
 8003f36:	6018      	str	r0, [r3, #0]
 8003f38:	8891      	ldrh	r1, [r2, #4]
 8003f3a:	7992      	ldrb	r2, [r2, #6]
 8003f3c:	8099      	strh	r1, [r3, #4]
 8003f3e:	719a      	strb	r2, [r3, #6]
			  if ((datatelemetri.alt - tempalt) < 0)
 8003f40:	4b7b      	ldr	r3, [pc, #492]	; (8004130 <StartStateTask+0x268>)
 8003f42:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 8003f46:	4b7e      	ldr	r3, [pc, #504]	; (8004140 <StartStateTask+0x278>)
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f58:	d400      	bmi.n	8003f5c <StartStateTask+0x94>

					  cansatState = ROCKET_SEPARATION;
					  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
				  }
			  }
			  break;
 8003f5a:	e0de      	b.n	800411a <StartStateTask+0x252>
				  valid++;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	73fb      	strb	r3, [r7, #15]
				  if (valid > 4)
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	f240 80d8 	bls.w	800411a <StartStateTask+0x252>
					  valid = 0;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
					  datatelemetri.hsdeploy = 'P';
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <StartStateTask+0x268>)
 8003f70:	2250      	movs	r2, #80	; 0x50
 8003f72:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
					  datatelemetri.pcdeploy = 'N';
 8003f76:	4b6e      	ldr	r3, [pc, #440]	; (8004130 <StartStateTask+0x268>)
 8003f78:	224e      	movs	r2, #78	; 0x4e
 8003f7a:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
					  TM_BKPSRAM_Write8(HSDEPLOY_ADR, datatelemetri.hsdeploy);
 8003f7e:	4b71      	ldr	r3, [pc, #452]	; (8004144 <StartStateTask+0x27c>)
 8003f80:	4a6b      	ldr	r2, [pc, #428]	; (8004130 <StartStateTask+0x268>)
 8003f82:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 8003f86:	701a      	strb	r2, [r3, #0]
					  TM_BKPSRAM_Write8(PCDEPLOY_ADR, datatelemetri.pcdeploy);
 8003f88:	4b6f      	ldr	r3, [pc, #444]	; (8004148 <StartStateTask+0x280>)
 8003f8a:	4a69      	ldr	r2, [pc, #420]	; (8004130 <StartStateTask+0x268>)
 8003f8c:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 8003f90:	701a      	strb	r2, [r3, #0]
					  osThreadFlagsSet(cameraTaskHandle, 1);
 8003f92:	4b6e      	ldr	r3, [pc, #440]	; (800414c <StartStateTask+0x284>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2101      	movs	r1, #1
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f00d ffeb 	bl	8011f74 <osThreadFlagsSet>
					  osThreadFlagsSet(gimbalTaskHandle, 1);
 8003f9e:	4b6c      	ldr	r3, [pc, #432]	; (8004150 <StartStateTask+0x288>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f00d ffe5 	bl	8011f74 <osThreadFlagsSet>
					  cansatState = ROCKET_SEPARATION;
 8003faa:	4b5e      	ldr	r3, [pc, #376]	; (8004124 <StartStateTask+0x25c>)
 8003fac:	2202      	movs	r2, #2
 8003fae:	701a      	strb	r2, [r3, #0]
					  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
 8003fb0:	4b61      	ldr	r3, [pc, #388]	; (8004138 <StartStateTask+0x270>)
 8003fb2:	4a5c      	ldr	r2, [pc, #368]	; (8004124 <StartStateTask+0x25c>)
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	701a      	strb	r2, [r3, #0]
			  break;
 8003fb8:	e0af      	b.n	800411a <StartStateTask+0x252>

		  case ROCKET_SEPARATION:
			  strcpy(datatelemetri.state, "ROCKET_SEPARATION");
 8003fba:	4a5b      	ldr	r2, [pc, #364]	; (8004128 <StartStateTask+0x260>)
 8003fbc:	4b65      	ldr	r3, [pc, #404]	; (8004154 <StartStateTask+0x28c>)
 8003fbe:	4615      	mov	r5, r2
 8003fc0:	461c      	mov	r4, r3
 8003fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc4:	6028      	str	r0, [r5, #0]
 8003fc6:	6069      	str	r1, [r5, #4]
 8003fc8:	60aa      	str	r2, [r5, #8]
 8003fca:	60eb      	str	r3, [r5, #12]
 8003fcc:	8823      	ldrh	r3, [r4, #0]
 8003fce:	822b      	strh	r3, [r5, #16]
			  if (datatelemetri.alt <= 700)
 8003fd0:	4b57      	ldr	r3, [pc, #348]	; (8004130 <StartStateTask+0x268>)
 8003fd2:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8003fd6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004158 <StartStateTask+0x290>
 8003fda:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe2:	d900      	bls.n	8003fe6 <StartStateTask+0x11e>
				  TM_BKPSRAM_Write8(PCDEPLOY_ADR, datatelemetri.pcdeploy);

				  cansatState = DESCENT;
				  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
			  }
			  break;
 8003fe4:	e09a      	b.n	800411c <StartStateTask+0x254>
				  datatelemetri.hsdeploy = 'P';
 8003fe6:	4b52      	ldr	r3, [pc, #328]	; (8004130 <StartStateTask+0x268>)
 8003fe8:	2250      	movs	r2, #80	; 0x50
 8003fea:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
				  datatelemetri.pcdeploy = 'N';
 8003fee:	4b50      	ldr	r3, [pc, #320]	; (8004130 <StartStateTask+0x268>)
 8003ff0:	224e      	movs	r2, #78	; 0x4e
 8003ff2:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
				  TM_BKPSRAM_Write8(HSDEPLOY_ADR, datatelemetri.hsdeploy);
 8003ff6:	4b53      	ldr	r3, [pc, #332]	; (8004144 <StartStateTask+0x27c>)
 8003ff8:	4a4d      	ldr	r2, [pc, #308]	; (8004130 <StartStateTask+0x268>)
 8003ffa:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 8003ffe:	701a      	strb	r2, [r3, #0]
				  TM_BKPSRAM_Write8(PCDEPLOY_ADR, datatelemetri.pcdeploy);
 8004000:	4b51      	ldr	r3, [pc, #324]	; (8004148 <StartStateTask+0x280>)
 8004002:	4a4b      	ldr	r2, [pc, #300]	; (8004130 <StartStateTask+0x268>)
 8004004:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 8004008:	701a      	strb	r2, [r3, #0]
				  cansatState = DESCENT;
 800400a:	4b46      	ldr	r3, [pc, #280]	; (8004124 <StartStateTask+0x25c>)
 800400c:	2203      	movs	r2, #3
 800400e:	701a      	strb	r2, [r3, #0]
				  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
 8004010:	4b49      	ldr	r3, [pc, #292]	; (8004138 <StartStateTask+0x270>)
 8004012:	4a44      	ldr	r2, [pc, #272]	; (8004124 <StartStateTask+0x25c>)
 8004014:	7812      	ldrb	r2, [r2, #0]
 8004016:	701a      	strb	r2, [r3, #0]
			  break;
 8004018:	e080      	b.n	800411c <StartStateTask+0x254>

		  case DESCENT:
			  strcpy(datatelemetri.state, "DESCENT");
 800401a:	4a43      	ldr	r2, [pc, #268]	; (8004128 <StartStateTask+0x260>)
 800401c:	4b4f      	ldr	r3, [pc, #316]	; (800415c <StartStateTask+0x294>)
 800401e:	cb03      	ldmia	r3!, {r0, r1}
 8004020:	6010      	str	r0, [r2, #0]
 8004022:	6051      	str	r1, [r2, #4]
			  if (datatelemetri.alt <= 150)
 8004024:	4b42      	ldr	r3, [pc, #264]	; (8004130 <StartStateTask+0x268>)
 8004026:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 800402a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8004160 <StartStateTask+0x298>
 800402e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004036:	d805      	bhi.n	8004044 <StartStateTask+0x17c>
			  {
				  servogerak(&htim4, TIM_CHANNEL_1, 135);
 8004038:	2287      	movs	r2, #135	; 0x87
 800403a:	2100      	movs	r1, #0
 800403c:	4849      	ldr	r0, [pc, #292]	; (8004164 <StartStateTask+0x29c>)
 800403e:	f000 ff67 	bl	8004f10 <servogerak>
				  TM_BKPSRAM_Write8(PCDEPLOY_ADR, datatelemetri.pcdeploy);

				  cansatState = HS_RELEASE;
				  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
			  }
			  break;
 8004042:	e06b      	b.n	800411c <StartStateTask+0x254>
			  else if (datatelemetri.alt <= 100)
 8004044:	4b3a      	ldr	r3, [pc, #232]	; (8004130 <StartStateTask+0x268>)
 8004046:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 800404a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8004134 <StartStateTask+0x26c>
 800404e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004056:	d900      	bls.n	800405a <StartStateTask+0x192>
			  break;
 8004058:	e060      	b.n	800411c <StartStateTask+0x254>
				  datatelemetri.hsdeploy = 'P';
 800405a:	4b35      	ldr	r3, [pc, #212]	; (8004130 <StartStateTask+0x268>)
 800405c:	2250      	movs	r2, #80	; 0x50
 800405e:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
				  datatelemetri.pcdeploy = 'C';
 8004062:	4b33      	ldr	r3, [pc, #204]	; (8004130 <StartStateTask+0x268>)
 8004064:	2243      	movs	r2, #67	; 0x43
 8004066:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
				  TM_BKPSRAM_Write8(HSDEPLOY_ADR, datatelemetri.hsdeploy);
 800406a:	4b36      	ldr	r3, [pc, #216]	; (8004144 <StartStateTask+0x27c>)
 800406c:	4a30      	ldr	r2, [pc, #192]	; (8004130 <StartStateTask+0x268>)
 800406e:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 8004072:	701a      	strb	r2, [r3, #0]
				  TM_BKPSRAM_Write8(PCDEPLOY_ADR, datatelemetri.pcdeploy);
 8004074:	4b34      	ldr	r3, [pc, #208]	; (8004148 <StartStateTask+0x280>)
 8004076:	4a2e      	ldr	r2, [pc, #184]	; (8004130 <StartStateTask+0x268>)
 8004078:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 800407c:	701a      	strb	r2, [r3, #0]
				  cansatState = HS_RELEASE;
 800407e:	4b29      	ldr	r3, [pc, #164]	; (8004124 <StartStateTask+0x25c>)
 8004080:	2204      	movs	r2, #4
 8004082:	701a      	strb	r2, [r3, #0]
				  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
 8004084:	4b2c      	ldr	r3, [pc, #176]	; (8004138 <StartStateTask+0x270>)
 8004086:	4a27      	ldr	r2, [pc, #156]	; (8004124 <StartStateTask+0x25c>)
 8004088:	7812      	ldrb	r2, [r2, #0]
 800408a:	701a      	strb	r2, [r3, #0]
			  break;
 800408c:	e046      	b.n	800411c <StartStateTask+0x254>

		  case HS_RELEASE:
			  strcpy(datatelemetri.state, "HS_RELEASE");
 800408e:	4a26      	ldr	r2, [pc, #152]	; (8004128 <StartStateTask+0x260>)
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <StartStateTask+0x2a0>)
 8004092:	cb03      	ldmia	r3!, {r0, r1}
 8004094:	6010      	str	r0, [r2, #0]
 8004096:	6051      	str	r1, [r2, #4]
 8004098:	8819      	ldrh	r1, [r3, #0]
 800409a:	789b      	ldrb	r3, [r3, #2]
 800409c:	8111      	strh	r1, [r2, #8]
 800409e:	7293      	strb	r3, [r2, #10]
			  if (datatelemetri.alt < 13)
 80040a0:	4b23      	ldr	r3, [pc, #140]	; (8004130 <StartStateTask+0x268>)
 80040a2:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 80040a6:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80040aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80040ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b2:	d400      	bmi.n	80040b6 <StartStateTask+0x1ee>
			  {
				  cansatState = LANDED;
				  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
			  }
			  break;
 80040b4:	e032      	b.n	800411c <StartStateTask+0x254>
				  cansatState = LANDED;
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <StartStateTask+0x25c>)
 80040b8:	2205      	movs	r2, #5
 80040ba:	701a      	strb	r2, [r3, #0]
				  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
 80040bc:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <StartStateTask+0x270>)
 80040be:	4a19      	ldr	r2, [pc, #100]	; (8004124 <StartStateTask+0x25c>)
 80040c0:	7812      	ldrb	r2, [r2, #0]
 80040c2:	701a      	strb	r2, [r3, #0]
			  break;
 80040c4:	e02a      	b.n	800411c <StartStateTask+0x254>

		  case LANDED:
			  osSemaphoreAcquire(gimbalSemaphoreHandle, osWaitForever);
 80040c6:	4b29      	ldr	r3, [pc, #164]	; (800416c <StartStateTask+0x2a4>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f04f 31ff 	mov.w	r1, #4294967295
 80040ce:	4618      	mov	r0, r3
 80040d0:	f00e f8c4 	bl	801225c <osSemaphoreAcquire>
			  osSemaphoreAcquire(telemetryTaskHandle, osWaitForever);
 80040d4:	4b26      	ldr	r3, [pc, #152]	; (8004170 <StartStateTask+0x2a8>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f04f 31ff 	mov.w	r1, #4294967295
 80040dc:	4618      	mov	r0, r3
 80040de:	f00e f8bd 	bl	801225c <osSemaphoreAcquire>

			  camera = CAM_OFF;
 80040e2:	4b24      	ldr	r3, [pc, #144]	; (8004174 <StartStateTask+0x2ac>)
 80040e4:	2203      	movs	r2, #3
 80040e6:	701a      	strb	r2, [r3, #0]
			  osThreadFlagsSet(cameraTaskHandle, 1);
 80040e8:	4b18      	ldr	r3, [pc, #96]	; (800414c <StartStateTask+0x284>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2101      	movs	r1, #1
 80040ee:	4618      	mov	r0, r3
 80040f0:	f00d ff40 	bl	8011f74 <osThreadFlagsSet>

			  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 80040f4:	2201      	movs	r2, #1
 80040f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040fa:	481f      	ldr	r0, [pc, #124]	; (8004178 <StartStateTask+0x2b0>)
 80040fc:	f004 f9f4 	bl	80084e8 <HAL_GPIO_WritePin>

			  strcpy(datatelemetri.state, "LANDED");
 8004100:	4b09      	ldr	r3, [pc, #36]	; (8004128 <StartStateTask+0x260>)
 8004102:	4a1e      	ldr	r2, [pc, #120]	; (800417c <StartStateTask+0x2b4>)
 8004104:	6810      	ldr	r0, [r2, #0]
 8004106:	6018      	str	r0, [r3, #0]
 8004108:	8891      	ldrh	r1, [r2, #4]
 800410a:	7992      	ldrb	r2, [r2, #6]
 800410c:	8099      	strh	r1, [r3, #4]
 800410e:	719a      	strb	r2, [r3, #6]
			  TM_BKPSRAM_Write8(STATEIND_ADR, cansatState);
 8004110:	4b09      	ldr	r3, [pc, #36]	; (8004138 <StartStateTask+0x270>)
 8004112:	4a04      	ldr	r2, [pc, #16]	; (8004124 <StartStateTask+0x25c>)
 8004114:	7812      	ldrb	r2, [r2, #0]
 8004116:	701a      	strb	r2, [r3, #0]
			  break;
 8004118:	e000      	b.n	800411c <StartStateTask+0x254>
			  break;
 800411a:	bf00      	nop
	  }

	  osDelay(SAMPLE_TIME_STATE_MS);
 800411c:	2032      	movs	r0, #50	; 0x32
 800411e:	f00d fff8 	bl	8012112 <osDelay>
  {
 8004122:	e6d5      	b.n	8003ed0 <StartStateTask+0x8>
 8004124:	2000027f 	.word	0x2000027f
 8004128:	20000f5b 	.word	0x20000f5b
 800412c:	0801b188 	.word	0x0801b188
 8004130:	20000df8 	.word	0x20000df8
 8004134:	42c80000 	.word	0x42c80000
 8004138:	40024096 	.word	0x40024096
 800413c:	0801b194 	.word	0x0801b194
 8004140:	20000fbc 	.word	0x20000fbc
 8004144:	400240fa 	.word	0x400240fa
 8004148:	4002412c 	.word	0x4002412c
 800414c:	2000082c 	.word	0x2000082c
 8004150:	2000080c 	.word	0x2000080c
 8004154:	0801b19c 	.word	0x0801b19c
 8004158:	442f0000 	.word	0x442f0000
 800415c:	0801b1b0 	.word	0x0801b1b0
 8004160:	43160000 	.word	0x43160000
 8004164:	200005c8 	.word	0x200005c8
 8004168:	0801b1b8 	.word	0x0801b1b8
 800416c:	2000083c 	.word	0x2000083c
 8004170:	20000828 	.word	0x20000828
 8004174:	20000280 	.word	0x20000280
 8004178:	40020400 	.word	0x40020400
 800417c:	0801b1c4 	.word	0x0801b1c4

08004180 <StartGetDataTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetDataTask */
void StartGetDataTask(void *argument)
{
 8004180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	b0d1      	sub	sp, #324	; 0x144
 8004186:	af2c      	add	r7, sp, #176	; 0xb0
 8004188:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
  /* USER CODE BEGIN StartGetDataTask */
  /* Infinite loop */
  for(;;)
  {
	  datatelemetri.packetcount = counting;
 800418c:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <StartGetDataTask+0x80>)
 800418e:	881a      	ldrh	r2, [r3, #0]
 8004190:	4b1c      	ldr	r3, [pc, #112]	; (8004204 <StartGetDataTask+0x84>)
 8004192:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
	  datatelemetri.temp = Temperature;
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <StartGetDataTask+0x88>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <StartGetDataTask+0x84>)
 800419c:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184
	  tempalt = datatelemetri.alt;
 80041a0:	4b18      	ldr	r3, [pc, #96]	; (8004204 <StartGetDataTask+0x84>)
 80041a2:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80041a6:	4a19      	ldr	r2, [pc, #100]	; (800420c <StartGetDataTask+0x8c>)
 80041a8:	6013      	str	r3, [r2, #0]
	  switch (flagsim)
 80041aa:	4b19      	ldr	r3, [pc, #100]	; (8004210 <StartGetDataTask+0x90>)
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d138      	bne.n	8004224 <StartGetDataTask+0xa4>
	  {
	  	  case 2:
	  		  datatelemetri.alt = pressuretoalt(Spressure / 100);
 80041b2:	4b18      	ldr	r3, [pc, #96]	; (8004214 <StartGetDataTask+0x94>)
 80041b4:	edd3 7a00 	vldr	s15, [r3]
 80041b8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8004218 <StartGetDataTask+0x98>
 80041bc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80041c0:	eeb0 0a47 	vmov.f32	s0, s14
 80041c4:	f002 f95c 	bl	8006480 <pressuretoalt>
 80041c8:	eef0 7a40 	vmov.f32	s15, s0
 80041cc:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <StartGetDataTask+0x84>)
 80041ce:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
	  		  datatelemetri.barpress = Spressure / 1000;
 80041d2:	4b10      	ldr	r3, [pc, #64]	; (8004214 <StartGetDataTask+0x94>)
 80041d4:	ed93 7a00 	vldr	s14, [r3]
 80041d8:	eddf 6a10 	vldr	s13, [pc, #64]	; 800421c <StartGetDataTask+0x9c>
 80041dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80041e0:	4b08      	ldr	r3, [pc, #32]	; (8004204 <StartGetDataTask+0x84>)
 80041e2:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	  		  datatelemetri.alt -= refalt;
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <StartGetDataTask+0x84>)
 80041e8:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 80041ec:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <StartGetDataTask+0xa0>)
 80041ee:	edd3 7a00 	vldr	s15, [r3]
 80041f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80041f6:	4b03      	ldr	r3, [pc, #12]	; (8004204 <StartGetDataTask+0x84>)
 80041f8:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
	  		  break;
 80041fc:	e038      	b.n	8004270 <StartGetDataTask+0xf0>
 80041fe:	bf00      	nop
 8004200:	20000010 	.word	0x20000010
 8004204:	20000df8 	.word	0x20000df8
 8004208:	20000fac 	.word	0x20000fac
 800420c:	20000fbc 	.word	0x20000fbc
 8004210:	20000df5 	.word	0x20000df5
 8004214:	20000014 	.word	0x20000014
 8004218:	42c80000 	.word	0x42c80000
 800421c:	447a0000 	.word	0x447a0000
 8004220:	20000fb8 	.word	0x20000fb8
	  	  default:
	  		  datatelemetri.alt = pressuretoalt(Pressure / 100);
 8004224:	4bad      	ldr	r3, [pc, #692]	; (80044dc <StartGetDataTask+0x35c>)
 8004226:	edd3 7a00 	vldr	s15, [r3]
 800422a:	eddf 6aad 	vldr	s13, [pc, #692]	; 80044e0 <StartGetDataTask+0x360>
 800422e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004232:	eeb0 0a47 	vmov.f32	s0, s14
 8004236:	f002 f923 	bl	8006480 <pressuretoalt>
 800423a:	eef0 7a40 	vmov.f32	s15, s0
 800423e:	4ba9      	ldr	r3, [pc, #676]	; (80044e4 <StartGetDataTask+0x364>)
 8004240:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
	  		  datatelemetri.barpress = Pressure / 1000;
 8004244:	4ba5      	ldr	r3, [pc, #660]	; (80044dc <StartGetDataTask+0x35c>)
 8004246:	ed93 7a00 	vldr	s14, [r3]
 800424a:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80044e8 <StartGetDataTask+0x368>
 800424e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004252:	4ba4      	ldr	r3, [pc, #656]	; (80044e4 <StartGetDataTask+0x364>)
 8004254:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	  		  datatelemetri.alt -= refalt;
 8004258:	4ba2      	ldr	r3, [pc, #648]	; (80044e4 <StartGetDataTask+0x364>)
 800425a:	ed93 7a5e 	vldr	s14, [r3, #376]	; 0x178
 800425e:	4ba3      	ldr	r3, [pc, #652]	; (80044ec <StartGetDataTask+0x36c>)
 8004260:	edd3 7a00 	vldr	s15, [r3]
 8004264:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004268:	4b9e      	ldr	r3, [pc, #632]	; (80044e4 <StartGetDataTask+0x364>)
 800426a:	edc3 7a5e 	vstr	s15, [r3, #376]	; 0x178
	  		  break;
 800426e:	bf00      	nop
	  }
	  if (datatelemetri.alt < 0)
 8004270:	4b9c      	ldr	r3, [pc, #624]	; (80044e4 <StartGetDataTask+0x364>)
 8004272:	edd3 7a5e 	vldr	s15, [r3, #376]	; 0x178
 8004276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800427a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427e:	d504      	bpl.n	800428a <StartGetDataTask+0x10a>
	  {
		  datatelemetri.alt = 0;
 8004280:	4b98      	ldr	r3, [pc, #608]	; (80044e4 <StartGetDataTask+0x364>)
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178
	  }
	  datatelemetri.tilt_x = bno055_euler.y;
 800428a:	4b99      	ldr	r3, [pc, #612]	; (80044f0 <StartGetDataTask+0x370>)
 800428c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	f7fc fca8 	bl	8000be8 <__aeabi_d2f>
 8004298:	4603      	mov	r3, r0
 800429a:	4a92      	ldr	r2, [pc, #584]	; (80044e4 <StartGetDataTask+0x364>)
 800429c:	f8c2 3194 	str.w	r3, [r2, #404]	; 0x194
	  datatelemetri.tilt_y = bno055_euler.z;
 80042a0:	4b93      	ldr	r3, [pc, #588]	; (80044f0 <StartGetDataTask+0x370>)
 80042a2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	f7fc fc9d 	bl	8000be8 <__aeabi_d2f>
 80042ae:	4603      	mov	r3, r0
 80042b0:	4a8c      	ldr	r2, [pc, #560]	; (80044e4 <StartGetDataTask+0x364>)
 80042b2:	f8c2 3198 	str.w	r3, [r2, #408]	; 0x198
	  datatelemetri.heading = bno055_euler.x;
 80042b6:	4b8e      	ldr	r3, [pc, #568]	; (80044f0 <StartGetDataTask+0x370>)
 80042b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80042bc:	4610      	mov	r0, r2
 80042be:	4619      	mov	r1, r3
 80042c0:	f7fc fc92 	bl	8000be8 <__aeabi_d2f>
 80042c4:	4603      	mov	r3, r0
 80042c6:	4a87      	ldr	r2, [pc, #540]	; (80044e4 <StartGetDataTask+0x364>)
 80042c8:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
	  datatelemetri.rot_z = bno055_gyro.z;
 80042cc:	4b89      	ldr	r3, [pc, #548]	; (80044f4 <StartGetDataTask+0x374>)
 80042ce:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	f7fc fc87 	bl	8000be8 <__aeabi_d2f>
 80042da:	4603      	mov	r3, r0
 80042dc:	4a81      	ldr	r2, [pc, #516]	; (80044e4 <StartGetDataTask+0x364>)
 80042de:	f8c2 319c 	str.w	r3, [r2, #412]	; 0x19c
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
			  datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80042e2:	4b80      	ldr	r3, [pc, #512]	; (80044e4 <StartGetDataTask+0x364>)
 80042e4:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80042e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
			  datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80042ec:	4b7d      	ldr	r3, [pc, #500]	; (80044e4 <StartGetDataTask+0x364>)
 80042ee:	f893 315a 	ldrb.w	r3, [r3, #346]	; 0x15a
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80042f2:	67fb      	str	r3, [r7, #124]	; 0x7c
			  datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80042f4:	4b7b      	ldr	r3, [pc, #492]	; (80044e4 <StartGetDataTask+0x364>)
 80042f6:	f893 315b 	ldrb.w	r3, [r3, #347]	; 0x15b
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80042fa:	67bb      	str	r3, [r7, #120]	; 0x78
			  datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 80042fc:	4b79      	ldr	r3, [pc, #484]	; (80044e4 <StartGetDataTask+0x364>)
 80042fe:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8004302:	677b      	str	r3, [r7, #116]	; 0x74
			  datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 8004304:	4b77      	ldr	r3, [pc, #476]	; (80044e4 <StartGetDataTask+0x364>)
 8004306:	f893 315d 	ldrb.w	r3, [r3, #349]	; 0x15d
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800430a:	673b      	str	r3, [r7, #112]	; 0x70
			  datatelemetri.jam[0], datatelemetri.jam[1], datatelemetri.menit[0], datatelemetri.menit[1], datatelemetri.detik[0], datatelemetri.detik[1],
 800430c:	4b75      	ldr	r3, [pc, #468]	; (80044e4 <StartGetDataTask+0x364>)
 800430e:	f893 315e 	ldrb.w	r3, [r3, #350]	; 0x15e
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8004312:	66fb      	str	r3, [r7, #108]	; 0x6c
			  datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 8004314:	4b73      	ldr	r3, [pc, #460]	; (80044e4 <StartGetDataTask+0x364>)
 8004316:	f8b3 3160 	ldrh.w	r3, [r3, #352]	; 0x160
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800431a:	66bb      	str	r3, [r7, #104]	; 0x68
			  datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 800431c:	4b71      	ldr	r3, [pc, #452]	; (80044e4 <StartGetDataTask+0x364>)
 800431e:	f893 3162 	ldrb.w	r3, [r3, #354]	; 0x162
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8004322:	667b      	str	r3, [r7, #100]	; 0x64
			  datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 8004324:	4b6f      	ldr	r3, [pc, #444]	; (80044e4 <StartGetDataTask+0x364>)
 8004326:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800432a:	4618      	mov	r0, r3
 800432c:	f7fc f90c 	bl	8000548 <__aeabi_f2d>
 8004330:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
			  datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 8004334:	4b6b      	ldr	r3, [pc, #428]	; (80044e4 <StartGetDataTask+0x364>)
 8004336:	f8d3 318c 	ldr.w	r3, [r3, #396]	; 0x18c
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc f904 	bl	8000548 <__aeabi_f2d>
 8004340:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
			  datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 8004344:	4b67      	ldr	r3, [pc, #412]	; (80044e4 <StartGetDataTask+0x364>)
 8004346:	f893 3180 	ldrb.w	r3, [r3, #384]	; 0x180
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800434a:	663b      	str	r3, [r7, #96]	; 0x60
			  datatelemetri.packetcount, datatelemetri.fmode, datatelemetri.state, datatelemetri.alt, datatelemetri.airspeed, datatelemetri.hsdeploy, datatelemetri.pcdeploy,
 800434c:	4b65      	ldr	r3, [pc, #404]	; (80044e4 <StartGetDataTask+0x364>)
 800434e:	f893 3181 	ldrb.w	r3, [r3, #385]	; 0x181
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8004352:	64fb      	str	r3, [r7, #76]	; 0x4c
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8004354:	4b63      	ldr	r3, [pc, #396]	; (80044e4 <StartGetDataTask+0x364>)
 8004356:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800435a:	4618      	mov	r0, r3
 800435c:	f7fc f8f4 	bl	8000548 <__aeabi_f2d>
 8004360:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8004364:	4b5f      	ldr	r3, [pc, #380]	; (80044e4 <StartGetDataTask+0x364>)
 8004366:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800436a:	4618      	mov	r0, r3
 800436c:	f7fc f8ec 	bl	8000548 <__aeabi_f2d>
 8004370:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8004374:	4b5b      	ldr	r3, [pc, #364]	; (80044e4 <StartGetDataTask+0x364>)
 8004376:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800437a:	4618      	mov	r0, r3
 800437c:	f7fc f8e4 	bl	8000548 <__aeabi_f2d>
 8004380:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8004384:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <StartGetDataTask+0x378>)
 8004386:	781b      	ldrb	r3, [r3, #0]
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8004388:	64bb      	str	r3, [r7, #72]	; 0x48
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 800438a:	4b5b      	ldr	r3, [pc, #364]	; (80044f8 <StartGetDataTask+0x378>)
 800438c:	785b      	ldrb	r3, [r3, #1]
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800438e:	62fb      	str	r3, [r7, #44]	; 0x2c
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8004390:	4b5a      	ldr	r3, [pc, #360]	; (80044fc <StartGetDataTask+0x37c>)
 8004392:	781b      	ldrb	r3, [r3, #0]
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 8004394:	62bb      	str	r3, [r7, #40]	; 0x28
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 8004396:	4b59      	ldr	r3, [pc, #356]	; (80044fc <StartGetDataTask+0x37c>)
 8004398:	785b      	ldrb	r3, [r3, #1]
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 800439c:	4b58      	ldr	r3, [pc, #352]	; (8004500 <StartGetDataTask+0x380>)
 800439e:	781b      	ldrb	r3, [r3, #0]
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80043a0:	623b      	str	r3, [r7, #32]
			  datatelemetri.temp, datatelemetri.voltage, datatelemetri.barpress, gpsjam[0], gpsjam[1], gpsmenit[0], gpsmenit[1], gpsdetik[0], gpsdetik[1],
 80043a2:	4b57      	ldr	r3, [pc, #348]	; (8004500 <StartGetDataTask+0x380>)
 80043a4:	785b      	ldrb	r3, [r3, #1]
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	4b56      	ldr	r3, [pc, #344]	; (8004504 <StartGetDataTask+0x384>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7fc f8cb 	bl	8000548 <__aeabi_f2d>
 80043b2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80043b6:	4b54      	ldr	r3, [pc, #336]	; (8004508 <StartGetDataTask+0x388>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7fc f8c4 	bl	8000548 <__aeabi_f2d>
 80043c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80043c4:	4b51      	ldr	r3, [pc, #324]	; (800450c <StartGetDataTask+0x38c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc f8bd 	bl	8000548 <__aeabi_f2d>
 80043ce:	e9c7 0100 	strd	r0, r1, [r7]
 80043d2:	4b4f      	ldr	r3, [pc, #316]	; (8004510 <StartGetDataTask+0x390>)
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	461e      	mov	r6, r3
			  gpsalt, gpslat, gpslong, gpssat, datatelemetri.tilt_x, datatelemetri.tilt_y, datatelemetri.rot_z, datatelemetri.echocmd, datatelemetri.heading);
 80043d8:	4b42      	ldr	r3, [pc, #264]	; (80044e4 <StartGetDataTask+0x364>)
 80043da:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fc f8b2 	bl	8000548 <__aeabi_f2d>
 80043e4:	4682      	mov	sl, r0
 80043e6:	468b      	mov	fp, r1
			  gpsalt, gpslat, gpslong, gpssat, datatelemetri.tilt_x, datatelemetri.tilt_y, datatelemetri.rot_z, datatelemetri.echocmd, datatelemetri.heading);
 80043e8:	4b3e      	ldr	r3, [pc, #248]	; (80044e4 <StartGetDataTask+0x364>)
 80043ea:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fc f8aa 	bl	8000548 <__aeabi_f2d>
 80043f4:	4680      	mov	r8, r0
 80043f6:	4689      	mov	r9, r1
			  gpsalt, gpslat, gpslong, gpssat, datatelemetri.tilt_x, datatelemetri.tilt_y, datatelemetri.rot_z, datatelemetri.echocmd, datatelemetri.heading);
 80043f8:	4b3a      	ldr	r3, [pc, #232]	; (80044e4 <StartGetDataTask+0x364>)
 80043fa:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc f8a2 	bl	8000548 <__aeabi_f2d>
 8004404:	4604      	mov	r4, r0
 8004406:	460d      	mov	r5, r1
			  gpsalt, gpslat, gpslong, gpssat, datatelemetri.tilt_x, datatelemetri.tilt_y, datatelemetri.rot_z, datatelemetri.echocmd, datatelemetri.heading);
 8004408:	4b36      	ldr	r3, [pc, #216]	; (80044e4 <StartGetDataTask+0x364>)
 800440a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
	  sprintf(datatelemetri.telemetribuff, "2032,%c%c:%c%c:%c%c,%d,%c,%s,%.1f,%.2f,%c,%c,%.1f,%.1f,%.1f,%c%c:%c%c:%c%c,%.1f,%.4f,%.4f,%d,%.2f,%.2f,%.1f,%s,,%.1f,",
 800440e:	4618      	mov	r0, r3
 8004410:	f7fc f89a 	bl	8000548 <__aeabi_f2d>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	e9cd 232a 	strd	r2, r3, [sp, #168]	; 0xa8
 800441c:	4b3d      	ldr	r3, [pc, #244]	; (8004514 <StartGetDataTask+0x394>)
 800441e:	9328      	str	r3, [sp, #160]	; 0xa0
 8004420:	e9cd 4526 	strd	r4, r5, [sp, #152]	; 0x98
 8004424:	e9cd 8924 	strd	r8, r9, [sp, #144]	; 0x90
 8004428:	e9cd ab22 	strd	sl, fp, [sp, #136]	; 0x88
 800442c:	9620      	str	r6, [sp, #128]	; 0x80
 800442e:	ed97 7b00 	vldr	d7, [r7]
 8004432:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8004436:	ed97 7b02 	vldr	d7, [r7, #8]
 800443a:	ed8d 7b1c 	vstr	d7, [sp, #112]	; 0x70
 800443e:	ed97 7b04 	vldr	d7, [r7, #16]
 8004442:	ed8d 7b1a 	vstr	d7, [sp, #104]	; 0x68
 8004446:	69f9      	ldr	r1, [r7, #28]
 8004448:	9119      	str	r1, [sp, #100]	; 0x64
 800444a:	6a39      	ldr	r1, [r7, #32]
 800444c:	9118      	str	r1, [sp, #96]	; 0x60
 800444e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004450:	9117      	str	r1, [sp, #92]	; 0x5c
 8004452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004454:	9116      	str	r1, [sp, #88]	; 0x58
 8004456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004458:	9115      	str	r1, [sp, #84]	; 0x54
 800445a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800445c:	9114      	str	r1, [sp, #80]	; 0x50
 800445e:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004462:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8004466:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 800446a:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800446e:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004472:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004476:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004478:	910d      	str	r1, [sp, #52]	; 0x34
 800447a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800447c:	910c      	str	r1, [sp, #48]	; 0x30
 800447e:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8004482:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004486:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800448a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800448e:	4b22      	ldr	r3, [pc, #136]	; (8004518 <StartGetDataTask+0x398>)
 8004490:	9306      	str	r3, [sp, #24]
 8004492:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004494:	9105      	str	r1, [sp, #20]
 8004496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004498:	9104      	str	r1, [sp, #16]
 800449a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800449c:	9103      	str	r1, [sp, #12]
 800449e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80044a0:	9102      	str	r1, [sp, #8]
 80044a2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80044a4:	9101      	str	r1, [sp, #4]
 80044a6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80044a8:	9100      	str	r1, [sp, #0]
 80044aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80044b0:	491a      	ldr	r1, [pc, #104]	; (800451c <StartGetDataTask+0x39c>)
 80044b2:	480c      	ldr	r0, [pc, #48]	; (80044e4 <StartGetDataTask+0x364>)
 80044b4:	f013 f820 	bl	80174f8 <siprintf>
	  uint8_t csh = ~buatcs(datatelemetri.telemetribuff);
 80044b8:	480a      	ldr	r0, [pc, #40]	; (80044e4 <StartGetDataTask+0x364>)
 80044ba:	f001 ffab 	bl	8006414 <buatcs>
 80044be:	4603      	mov	r3, r0
 80044c0:	43db      	mvns	r3, r3
 80044c2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
	  sprintf(datatelemetri.telemetritotal,"%s%d\r\n", datatelemetri.telemetribuff, csh);
 80044c6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80044ca:	4a06      	ldr	r2, [pc, #24]	; (80044e4 <StartGetDataTask+0x364>)
 80044cc:	4914      	ldr	r1, [pc, #80]	; (8004520 <StartGetDataTask+0x3a0>)
 80044ce:	4815      	ldr	r0, [pc, #84]	; (8004524 <StartGetDataTask+0x3a4>)
 80044d0:	f013 f812 	bl	80174f8 <siprintf>

	  osDelay(SAMPLE_TIME_DATA_MS);
 80044d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80044d8:	e026      	b.n	8004528 <StartGetDataTask+0x3a8>
 80044da:	bf00      	nop
 80044dc:	20000fb0 	.word	0x20000fb0
 80044e0:	42c80000 	.word	0x42c80000
 80044e4:	20000df8 	.word	0x20000df8
 80044e8:	447a0000 	.word	0x447a0000
 80044ec:	20000fb8 	.word	0x20000fb8
 80044f0:	20000cc0 	.word	0x20000cc0
 80044f4:	20000ce0 	.word	0x20000ce0
 80044f8:	20001108 	.word	0x20001108
 80044fc:	20001104 	.word	0x20001104
 8004500:	20001100 	.word	0x20001100
 8004504:	200010f8 	.word	0x200010f8
 8004508:	200010f0 	.word	0x200010f0
 800450c:	200010f4 	.word	0x200010f4
 8004510:	200010fc 	.word	0x200010fc
 8004514:	20000f98 	.word	0x20000f98
 8004518:	20000f5b 	.word	0x20000f5b
 800451c:	0801b1cc 	.word	0x0801b1cc
 8004520:	0801b244 	.word	0x0801b244
 8004524:	20000ea2 	.word	0x20000ea2
 8004528:	f00d fdf3 	bl	8012112 <osDelay>
  {
 800452c:	e62e      	b.n	800418c <StartGetDataTask+0xc>
 800452e:	bf00      	nop

08004530 <StartTelemetryTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTelemetryTask */
void StartTelemetryTask(void *argument)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTelemetryTask */
  /* Infinite loop */
  for(;;)
  {
	  if (f_mount(&fs, (const TCHAR *)SDPath, 1) == FR_OK)
 8004538:	2201      	movs	r2, #1
 800453a:	4921      	ldr	r1, [pc, #132]	; (80045c0 <StartTelemetryTask+0x90>)
 800453c:	4821      	ldr	r0, [pc, #132]	; (80045c4 <StartTelemetryTask+0x94>)
 800453e:	f00c fe2d 	bl	801119c <f_mount>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d110      	bne.n	800456a <StartTelemetryTask+0x3a>
	  {
		  f_open(&fil, "2032.txt", FA_OPEN_APPEND | FA_WRITE);
 8004548:	2232      	movs	r2, #50	; 0x32
 800454a:	491f      	ldr	r1, [pc, #124]	; (80045c8 <StartTelemetryTask+0x98>)
 800454c:	481f      	ldr	r0, [pc, #124]	; (80045cc <StartTelemetryTask+0x9c>)
 800454e:	f00c fe89 	bl	8011264 <f_open>
		  f_write(&fil, datatelemetri.telemetritotal, strlen(datatelemetri.telemetritotal), &bw);
 8004552:	481f      	ldr	r0, [pc, #124]	; (80045d0 <StartTelemetryTask+0xa0>)
 8004554:	f7fb fe8c 	bl	8000270 <strlen>
 8004558:	4602      	mov	r2, r0
 800455a:	4b1e      	ldr	r3, [pc, #120]	; (80045d4 <StartTelemetryTask+0xa4>)
 800455c:	491c      	ldr	r1, [pc, #112]	; (80045d0 <StartTelemetryTask+0xa0>)
 800455e:	481b      	ldr	r0, [pc, #108]	; (80045cc <StartTelemetryTask+0x9c>)
 8004560:	f00d f845 	bl	80115ee <f_write>
		  f_close(&fil);
 8004564:	4819      	ldr	r0, [pc, #100]	; (80045cc <StartTelemetryTask+0x9c>)
 8004566:	f00d fa6f 	bl	8011a48 <f_close>
	  }

	  osSemaphoreAcquire(telemetrySemaphoreHandle, osWaitForever);
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <StartTelemetryTask+0xa8>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f04f 31ff 	mov.w	r1, #4294967295
 8004572:	4618      	mov	r0, r3
 8004574:	f00d fe72 	bl	801225c <osSemaphoreAcquire>

	  counting++;
 8004578:	4b18      	ldr	r3, [pc, #96]	; (80045dc <StartTelemetryTask+0xac>)
 800457a:	881b      	ldrh	r3, [r3, #0]
 800457c:	3301      	adds	r3, #1
 800457e:	b29a      	uxth	r2, r3
 8004580:	4b16      	ldr	r3, [pc, #88]	; (80045dc <StartTelemetryTask+0xac>)
 8004582:	801a      	strh	r2, [r3, #0]
	  TM_BKPSRAM_Write16(PACKETCOUNT_ADR, counting);
 8004584:	4b16      	ldr	r3, [pc, #88]	; (80045e0 <StartTelemetryTask+0xb0>)
 8004586:	4a15      	ldr	r2, [pc, #84]	; (80045dc <StartTelemetryTask+0xac>)
 8004588:	8812      	ldrh	r2, [r2, #0]
 800458a:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit_DMA(&huart3, (uint8_t *)datatelemetri.telemetritotal, strlen(datatelemetri.telemetritotal));
 800458c:	4810      	ldr	r0, [pc, #64]	; (80045d0 <StartTelemetryTask+0xa0>)
 800458e:	f7fb fe6f 	bl	8000270 <strlen>
 8004592:	4603      	mov	r3, r0
 8004594:	b29b      	uxth	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	490d      	ldr	r1, [pc, #52]	; (80045d0 <StartTelemetryTask+0xa0>)
 800459a:	4812      	ldr	r0, [pc, #72]	; (80045e4 <StartTelemetryTask+0xb4>)
 800459c:	f008 ff14 	bl	800d3c8 <HAL_UART_Transmit_DMA>
	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80045a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80045a4:	4810      	ldr	r0, [pc, #64]	; (80045e8 <StartTelemetryTask+0xb8>)
 80045a6:	f003 ffb8 	bl	800851a <HAL_GPIO_TogglePin>

	  osSemaphoreRelease(telemetrySemaphoreHandle);
 80045aa:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <StartTelemetryTask+0xa8>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f00d fea6 	bl	8012300 <osSemaphoreRelease>

	  osDelay(SAMPLE_TIME_TELEMETRY_MS);
 80045b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045b8:	f00d fdab 	bl	8012112 <osDelay>
	  if (f_mount(&fs, (const TCHAR *)SDPath, 1) == FR_OK)
 80045bc:	e7bc      	b.n	8004538 <StartTelemetryTask+0x8>
 80045be:	bf00      	nop
 80045c0:	2000114c 	.word	0x2000114c
 80045c4:	20000840 	.word	0x20000840
 80045c8:	0801b17c 	.word	0x0801b17c
 80045cc:	20000a74 	.word	0x20000a74
 80045d0:	20000ea2 	.word	0x20000ea2
 80045d4:	20000cbc 	.word	0x20000cbc
 80045d8:	20000838 	.word	0x20000838
 80045dc:	20000010 	.word	0x20000010
 80045e0:	40024000 	.word	0x40024000
 80045e4:	200006a0 	.word	0x200006a0
 80045e8:	40021000 	.word	0x40021000

080045ec <StartCameraTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCameraTask */
void StartCameraTask(void *argument)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCameraTask */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80045f4:	f04f 32ff 	mov.w	r2, #4294967295
 80045f8:	2100      	movs	r1, #0
 80045fa:	2001      	movs	r0, #1
 80045fc:	f00d fd08 	bl	8012010 <osThreadFlagsWait>

	  switch (camera)
 8004600:	4b37      	ldr	r3, [pc, #220]	; (80046e0 <StartCameraTask+0xf4>)
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b03      	cmp	r3, #3
 8004606:	d048      	beq.n	800469a <StartCameraTask+0xae>
 8004608:	2b03      	cmp	r3, #3
 800460a:	dcf3      	bgt.n	80045f4 <StartCameraTask+0x8>
 800460c:	2b01      	cmp	r3, #1
 800460e:	d002      	beq.n	8004616 <StartCameraTask+0x2a>
 8004610:	2b02      	cmp	r3, #2
 8004612:	d021      	beq.n	8004658 <StartCameraTask+0x6c>
 8004614:	e062      	b.n	80046dc <StartCameraTask+0xf0>
	  {
	  	  case MAIN_CAM:
			  HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin, SET);
 8004616:	2201      	movs	r2, #1
 8004618:	2120      	movs	r1, #32
 800461a:	4832      	ldr	r0, [pc, #200]	; (80046e4 <StartCameraTask+0xf8>)
 800461c:	f003 ff64 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(4000);
 8004620:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004624:	f00d fd75 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin, RESET);
 8004628:	2200      	movs	r2, #0
 800462a:	2120      	movs	r1, #32
 800462c:	482d      	ldr	r0, [pc, #180]	; (80046e4 <StartCameraTask+0xf8>)
 800462e:	f003 ff5b 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(2000);
 8004632:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004636:	f00d fd6c 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin, SET);
 800463a:	2201      	movs	r2, #1
 800463c:	2120      	movs	r1, #32
 800463e:	4829      	ldr	r0, [pc, #164]	; (80046e4 <StartCameraTask+0xf8>)
 8004640:	f003 ff52 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(1000);
 8004644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004648:	f00d fd63 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin, RESET);
 800464c:	2200      	movs	r2, #0
 800464e:	2120      	movs	r1, #32
 8004650:	4824      	ldr	r0, [pc, #144]	; (80046e4 <StartCameraTask+0xf8>)
 8004652:	f003 ff49 	bl	80084e8 <HAL_GPIO_WritePin>
			  break;
 8004656:	e041      	b.n	80046dc <StartCameraTask+0xf0>

	  	  case BONUS_CAM:
			  HAL_GPIO_WritePin(CAM2_GPIO_Port, CAM2_Pin, SET);
 8004658:	2201      	movs	r2, #1
 800465a:	2140      	movs	r1, #64	; 0x40
 800465c:	4821      	ldr	r0, [pc, #132]	; (80046e4 <StartCameraTask+0xf8>)
 800465e:	f003 ff43 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(4000);
 8004662:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8004666:	f00d fd54 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM2_GPIO_Port, CAM2_Pin, RESET);
 800466a:	2200      	movs	r2, #0
 800466c:	2140      	movs	r1, #64	; 0x40
 800466e:	481d      	ldr	r0, [pc, #116]	; (80046e4 <StartCameraTask+0xf8>)
 8004670:	f003 ff3a 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(2000);
 8004674:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004678:	f00d fd4b 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM2_GPIO_Port, CAM2_Pin, SET);
 800467c:	2201      	movs	r2, #1
 800467e:	2140      	movs	r1, #64	; 0x40
 8004680:	4818      	ldr	r0, [pc, #96]	; (80046e4 <StartCameraTask+0xf8>)
 8004682:	f003 ff31 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(1000);
 8004686:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800468a:	f00d fd42 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM2_GPIO_Port, CAM2_Pin, RESET);
 800468e:	2200      	movs	r2, #0
 8004690:	2140      	movs	r1, #64	; 0x40
 8004692:	4814      	ldr	r0, [pc, #80]	; (80046e4 <StartCameraTask+0xf8>)
 8004694:	f003 ff28 	bl	80084e8 <HAL_GPIO_WritePin>
			  break;
 8004698:	e020      	b.n	80046dc <StartCameraTask+0xf0>

	  	  case CAM_OFF:
			  HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin | CAM2_Pin, SET);
 800469a:	2201      	movs	r2, #1
 800469c:	2160      	movs	r1, #96	; 0x60
 800469e:	4811      	ldr	r0, [pc, #68]	; (80046e4 <StartCameraTask+0xf8>)
 80046a0:	f003 ff22 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(1000);
 80046a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046a8:	f00d fd33 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin | CAM2_Pin, RESET);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2160      	movs	r1, #96	; 0x60
 80046b0:	480c      	ldr	r0, [pc, #48]	; (80046e4 <StartCameraTask+0xf8>)
 80046b2:	f003 ff19 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(750);
 80046b6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80046ba:	f00d fd2a 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin | CAM2_Pin, SET);
 80046be:	2201      	movs	r2, #1
 80046c0:	2160      	movs	r1, #96	; 0x60
 80046c2:	4808      	ldr	r0, [pc, #32]	; (80046e4 <StartCameraTask+0xf8>)
 80046c4:	f003 ff10 	bl	80084e8 <HAL_GPIO_WritePin>
			  osDelay(5000);
 80046c8:	f241 3088 	movw	r0, #5000	; 0x1388
 80046cc:	f00d fd21 	bl	8012112 <osDelay>
			  HAL_GPIO_WritePin(CAM1_GPIO_Port, CAM1_Pin | CAM2_Pin, RESET);
 80046d0:	2200      	movs	r2, #0
 80046d2:	2160      	movs	r1, #96	; 0x60
 80046d4:	4803      	ldr	r0, [pc, #12]	; (80046e4 <StartCameraTask+0xf8>)
 80046d6:	f003 ff07 	bl	80084e8 <HAL_GPIO_WritePin>
			  break;
 80046da:	bf00      	nop
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80046dc:	e78a      	b.n	80045f4 <StartCameraTask+0x8>
 80046de:	bf00      	nop
 80046e0:	20000280 	.word	0x20000280
 80046e4:	40020400 	.word	0x40020400

080046e8 <StartCommandTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommandTask */
void StartCommandTask(void *argument)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommandTask */
  /* Infinite loop */
  for (;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 80046f0:	f04f 32ff 	mov.w	r2, #4294967295
 80046f4:	2100      	movs	r1, #0
 80046f6:	2001      	movs	r0, #1
 80046f8:	f00d fc8a 	bl	8012010 <osThreadFlagsWait>

	  if ((cocokan(3, "CX") == 2) && (cocokan(2, "2032") == 4)) CX();
 80046fc:	4955      	ldr	r1, [pc, #340]	; (8004854 <StartCommandTask+0x16c>)
 80046fe:	2003      	movs	r0, #3
 8004700:	f7fe fbba 	bl	8002e78 <cocokan>
 8004704:	4603      	mov	r3, r0
 8004706:	2b02      	cmp	r3, #2
 8004708:	d109      	bne.n	800471e <StartCommandTask+0x36>
 800470a:	4953      	ldr	r1, [pc, #332]	; (8004858 <StartCommandTask+0x170>)
 800470c:	2002      	movs	r0, #2
 800470e:	f7fe fbb3 	bl	8002e78 <cocokan>
 8004712:	4603      	mov	r3, r0
 8004714:	2b04      	cmp	r3, #4
 8004716:	d102      	bne.n	800471e <StartCommandTask+0x36>
 8004718:	f001 ff6a 	bl	80065f0 <CX>
 800471c:	e099      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "SIM") == 3) && (cocokan(2,"2032") == 4)) SIM();
 800471e:	494f      	ldr	r1, [pc, #316]	; (800485c <StartCommandTask+0x174>)
 8004720:	2003      	movs	r0, #3
 8004722:	f7fe fba9 	bl	8002e78 <cocokan>
 8004726:	4603      	mov	r3, r0
 8004728:	2b03      	cmp	r3, #3
 800472a:	d109      	bne.n	8004740 <StartCommandTask+0x58>
 800472c:	494a      	ldr	r1, [pc, #296]	; (8004858 <StartCommandTask+0x170>)
 800472e:	2002      	movs	r0, #2
 8004730:	f7fe fba2 	bl	8002e78 <cocokan>
 8004734:	4603      	mov	r3, r0
 8004736:	2b04      	cmp	r3, #4
 8004738:	d102      	bne.n	8004740 <StartCommandTask+0x58>
 800473a:	f002 f8c1 	bl	80068c0 <SIM>
 800473e:	e088      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "SIMP") == 4) && (cocokan(2,"2032") == 4)) SIMP();
 8004740:	4947      	ldr	r1, [pc, #284]	; (8004860 <StartCommandTask+0x178>)
 8004742:	2003      	movs	r0, #3
 8004744:	f7fe fb98 	bl	8002e78 <cocokan>
 8004748:	4603      	mov	r3, r0
 800474a:	2b04      	cmp	r3, #4
 800474c:	d109      	bne.n	8004762 <StartCommandTask+0x7a>
 800474e:	4942      	ldr	r1, [pc, #264]	; (8004858 <StartCommandTask+0x170>)
 8004750:	2002      	movs	r0, #2
 8004752:	f7fe fb91 	bl	8002e78 <cocokan>
 8004756:	4603      	mov	r3, r0
 8004758:	2b04      	cmp	r3, #4
 800475a:	d102      	bne.n	8004762 <StartCommandTask+0x7a>
 800475c:	f002 f912 	bl	8006984 <SIMP>
 8004760:	e077      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "CAL") == 3) && (cocokan(2,"2032") == 4)) CAL();
 8004762:	4940      	ldr	r1, [pc, #256]	; (8004864 <StartCommandTask+0x17c>)
 8004764:	2003      	movs	r0, #3
 8004766:	f7fe fb87 	bl	8002e78 <cocokan>
 800476a:	4603      	mov	r3, r0
 800476c:	2b03      	cmp	r3, #3
 800476e:	d109      	bne.n	8004784 <StartCommandTask+0x9c>
 8004770:	4939      	ldr	r1, [pc, #228]	; (8004858 <StartCommandTask+0x170>)
 8004772:	2002      	movs	r0, #2
 8004774:	f7fe fb80 	bl	8002e78 <cocokan>
 8004778:	4603      	mov	r3, r0
 800477a:	2b04      	cmp	r3, #4
 800477c:	d102      	bne.n	8004784 <StartCommandTask+0x9c>
 800477e:	f001 ff8b 	bl	8006698 <CAL>
 8004782:	e066      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "ST") == 2) && (cocokan(2,"2032") == 4)) ST();
 8004784:	4938      	ldr	r1, [pc, #224]	; (8004868 <StartCommandTask+0x180>)
 8004786:	2003      	movs	r0, #3
 8004788:	f7fe fb76 	bl	8002e78 <cocokan>
 800478c:	4603      	mov	r3, r0
 800478e:	2b02      	cmp	r3, #2
 8004790:	d109      	bne.n	80047a6 <StartCommandTask+0xbe>
 8004792:	4931      	ldr	r1, [pc, #196]	; (8004858 <StartCommandTask+0x170>)
 8004794:	2002      	movs	r0, #2
 8004796:	f7fe fb6f 	bl	8002e78 <cocokan>
 800479a:	4603      	mov	r3, r0
 800479c:	2b04      	cmp	r3, #4
 800479e:	d102      	bne.n	80047a6 <StartCommandTask+0xbe>
 80047a0:	f001 fff8 	bl	8006794 <ST>
 80047a4:	e055      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "CR") == 2) && (cocokan(2,"2032") == 4)) CR();
 80047a6:	4931      	ldr	r1, [pc, #196]	; (800486c <StartCommandTask+0x184>)
 80047a8:	2003      	movs	r0, #3
 80047aa:	f7fe fb65 	bl	8002e78 <cocokan>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d109      	bne.n	80047c8 <StartCommandTask+0xe0>
 80047b4:	4928      	ldr	r1, [pc, #160]	; (8004858 <StartCommandTask+0x170>)
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7fe fb5e 	bl	8002e78 <cocokan>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b04      	cmp	r3, #4
 80047c0:	d102      	bne.n	80047c8 <StartCommandTask+0xe0>
 80047c2:	f002 f9cb 	bl	8006b5c <CR>
 80047c6:	e044      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "BCN") == 3) && (cocokan(2,"2032") == 4)) BCN();
 80047c8:	4929      	ldr	r1, [pc, #164]	; (8004870 <StartCommandTask+0x188>)
 80047ca:	2003      	movs	r0, #3
 80047cc:	f7fe fb54 	bl	8002e78 <cocokan>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d109      	bne.n	80047ea <StartCommandTask+0x102>
 80047d6:	4920      	ldr	r1, [pc, #128]	; (8004858 <StartCommandTask+0x170>)
 80047d8:	2002      	movs	r0, #2
 80047da:	f7fe fb4d 	bl	8002e78 <cocokan>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d102      	bne.n	80047ea <StartCommandTask+0x102>
 80047e4:	f002 f94e 	bl	8006a84 <BCN>
 80047e8:	e033      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "GB") == 2) && (cocokan(2,"2032") == 4)) GB();
 80047ea:	4922      	ldr	r1, [pc, #136]	; (8004874 <StartCommandTask+0x18c>)
 80047ec:	2003      	movs	r0, #3
 80047ee:	f7fe fb43 	bl	8002e78 <cocokan>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d109      	bne.n	800480c <StartCommandTask+0x124>
 80047f8:	4917      	ldr	r1, [pc, #92]	; (8004858 <StartCommandTask+0x170>)
 80047fa:	2002      	movs	r0, #2
 80047fc:	f7fe fb3c 	bl	8002e78 <cocokan>
 8004800:	4603      	mov	r3, r0
 8004802:	2b04      	cmp	r3, #4
 8004804:	d102      	bne.n	800480c <StartCommandTask+0x124>
 8004806:	f002 f907 	bl	8006a18 <GB>
 800480a:	e022      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "HS") == 2) && (cocokan(2,"2032") == 4)) HS();
 800480c:	491a      	ldr	r1, [pc, #104]	; (8004878 <StartCommandTask+0x190>)
 800480e:	2003      	movs	r0, #3
 8004810:	f7fe fb32 	bl	8002e78 <cocokan>
 8004814:	4603      	mov	r3, r0
 8004816:	2b02      	cmp	r3, #2
 8004818:	d109      	bne.n	800482e <StartCommandTask+0x146>
 800481a:	490f      	ldr	r1, [pc, #60]	; (8004858 <StartCommandTask+0x170>)
 800481c:	2002      	movs	r0, #2
 800481e:	f7fe fb2b 	bl	8002e78 <cocokan>
 8004822:	4603      	mov	r3, r0
 8004824:	2b04      	cmp	r3, #4
 8004826:	d102      	bne.n	800482e <StartCommandTask+0x146>
 8004828:	f002 f920 	bl	8006a6c <HS>
 800482c:	e011      	b.n	8004852 <StartCommandTask+0x16a>
	  else if ((cocokan(3, "CAM") == 3) && (cocokan(2,"2032") == 4)) CAM();
 800482e:	4913      	ldr	r1, [pc, #76]	; (800487c <StartCommandTask+0x194>)
 8004830:	2003      	movs	r0, #3
 8004832:	f7fe fb21 	bl	8002e78 <cocokan>
 8004836:	4603      	mov	r3, r0
 8004838:	2b03      	cmp	r3, #3
 800483a:	f47f af59 	bne.w	80046f0 <StartCommandTask+0x8>
 800483e:	4906      	ldr	r1, [pc, #24]	; (8004858 <StartCommandTask+0x170>)
 8004840:	2002      	movs	r0, #2
 8004842:	f7fe fb19 	bl	8002e78 <cocokan>
 8004846:	4603      	mov	r3, r0
 8004848:	2b04      	cmp	r3, #4
 800484a:	f47f af51 	bne.w	80046f0 <StartCommandTask+0x8>
 800484e:	f002 f959 	bl	8006b04 <CAM>
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8004852:	e74d      	b.n	80046f0 <StartCommandTask+0x8>
 8004854:	0801b24c 	.word	0x0801b24c
 8004858:	0801b250 	.word	0x0801b250
 800485c:	0801b258 	.word	0x0801b258
 8004860:	0801b25c 	.word	0x0801b25c
 8004864:	0801b264 	.word	0x0801b264
 8004868:	0801b268 	.word	0x0801b268
 800486c:	0801b26c 	.word	0x0801b26c
 8004870:	0801b270 	.word	0x0801b270
 8004874:	0801b274 	.word	0x0801b274
 8004878:	0801b278 	.word	0x0801b278
 800487c:	0801b27c 	.word	0x0801b27c

08004880 <StartParseTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartParseTask */
void StartParseTask(void *argument)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartParseTask */
  /* Infinite loop */
  for(;;)
  {
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	2100      	movs	r1, #0
 800488e:	2001      	movs	r0, #1
 8004890:	f00d fbbe 	bl	8012010 <osThreadFlagsWait>

	  checkdata_();
 8004894:	f7fe fb2a 	bl	8002eec <checkdata_>
	  osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8004898:	e7f6      	b.n	8004888 <StartParseTask+0x8>
	...

0800489c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a04      	ldr	r2, [pc, #16]	; (80048bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80048ae:	f002 f9a5 	bl	8006bfc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	40001000 	.word	0x40001000

080048c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80048c4:	b672      	cpsid	i
}
 80048c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80048c8:	e7fe      	b.n	80048c8 <Error_Handler+0x8>

080048ca <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	6879      	ldr	r1, [r7, #4]
 80048dc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80048fa:	f7fc f90d 	bl	8000b18 <__aeabi_dcmpgt>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d006      	beq.n	8004912 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800490a:	6879      	ldr	r1, [r7, #4]
 800490c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8004910:	e011      	b.n	8004936 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800491e:	f7fc f8dd 	bl	8000adc <__aeabi_dcmplt>
 8004922:	4603      	mov	r3, r0
 8004924:	2b00      	cmp	r3, #0
 8004926:	d100      	bne.n	800492a <PID_Init+0x60>
}
 8004928:	e005      	b.n	8004936 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8004936:	bf00      	nop
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6278      	str	r0, [r7, #36]	; 0x24
 8004948:	6239      	str	r1, [r7, #32]
 800494a:	61fa      	str	r2, [r7, #28]
 800494c:	61bb      	str	r3, [r7, #24]
 800494e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004952:	ed87 1b02 	vstr	d1, [r7, #8]
 8004956:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800495a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	6a3a      	ldr	r2, [r7, #32]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	69ba      	ldr	r2, [r7, #24]
 800496a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800496c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496e:	2200      	movs	r2, #0
 8004970:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8004972:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80049c8 <PID+0x88>
 8004976:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80049d0 <PID+0x90>
 800497a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800497c:	f000 f934 	bl	8004be8 <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	2264      	movs	r2, #100	; 0x64
 8004984:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 8004986:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800498a:	4619      	mov	r1, r3
 800498c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800498e:	f000 fa41 	bl	8004e14 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8004992:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004996:	4619      	mov	r1, r3
 8004998:	ed97 2b00 	vldr	d2, [r7]
 800499c:	ed97 1b02 	vldr	d1, [r7, #8]
 80049a0:	ed97 0b04 	vldr	d0, [r7, #16]
 80049a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80049a6:	f000 f98d 	bl	8004cc4 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80049aa:	f002 f93b 	bl	8006c24 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	1ad2      	subs	r2, r2, r3
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	605a      	str	r2, [r3, #4]
	
}
 80049ba:	bf00      	nop
 80049bc:	3728      	adds	r7, #40	; 0x28
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	f3af 8000 	nop.w
 80049c8:	00000000 	.word	0x00000000
 80049cc:	406fe000 	.word	0x406fe000
	...

080049d8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80049d8:	b5b0      	push	{r4, r5, r7, lr}
 80049da:	b08c      	sub	sp, #48	; 0x30
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	785b      	ldrb	r3, [r3, #1]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <PID_Compute+0x14>
	{
		return _FALSE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e0db      	b.n	8004ba4 <PID_Compute+0x1cc>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 80049ec:	f002 f91a 	bl	8006c24 <HAL_GetTick>
 80049f0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	6a3a      	ldr	r2, [r7, #32]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f0c0 80cd 	bcc.w	8004ba2 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a10:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a20:	f7fb fc32 	bl	8000288 <__aeabi_dsub>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 8004a32:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004a36:	f7fb fc27 	bl	8000288 <__aeabi_dsub>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004a4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004a52:	f7fb fdd1 	bl	80005f8 <__aeabi_dmul>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	4629      	mov	r1, r5
 8004a5e:	f7fb fc15 	bl	800028c <__adddf3>
 8004a62:	4602      	mov	r2, r0
 8004a64:	460b      	mov	r3, r1
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	781b      	ldrb	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d114      	bne.n	8004a9e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004a80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a84:	f7fb fdb8 	bl	80005f8 <__aeabi_dmul>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	4629      	mov	r1, r5
 8004a90:	f7fb fbfa 	bl	8000288 <__aeabi_dsub>
 8004a94:	4602      	mov	r2, r0
 8004a96:	460b      	mov	r3, r1
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004aaa:	f7fc f835 	bl	8000b18 <__aeabi_dcmpgt>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d006      	beq.n	8004ac2 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004aba:	6879      	ldr	r1, [r7, #4]
 8004abc:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004ac0:	e010      	b.n	8004ae4 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004ace:	f7fc f805 	bl	8000adc <__aeabi_dcmplt>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d005      	beq.n	8004ae4 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00b      	beq.n	8004b04 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004af2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004af6:	f7fb fd7f 	bl	80005f8 <__aeabi_dmul>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004b02:	e005      	b.n	8004b10 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 8004b04:	f04f 0200 	mov.w	r2, #0
 8004b08:	f04f 0300 	mov.w	r3, #0
 8004b0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004b1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b20:	f7fb fd6a 	bl	80005f8 <__aeabi_dmul>
 8004b24:	4602      	mov	r2, r0
 8004b26:	460b      	mov	r3, r1
 8004b28:	4620      	mov	r0, r4
 8004b2a:	4629      	mov	r1, r5
 8004b2c:	f7fb fbac 	bl	8000288 <__aeabi_dsub>
 8004b30:	4602      	mov	r2, r0
 8004b32:	460b      	mov	r3, r1
 8004b34:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b38:	f7fb fba8 	bl	800028c <__adddf3>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		
		if (output > uPID->OutMax)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004b4a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b4e:	f7fb ffe3 	bl	8000b18 <__aeabi_dcmpgt>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d005      	beq.n	8004b64 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004b5e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004b62:	e00e      	b.n	8004b82 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004b6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b6e:	f7fb ffb5 	bl	8000adc <__aeabi_dcmplt>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d004      	beq.n	8004b82 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004b7e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004b86:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b8a:	e9c1 2300 	strd	r2, r3, [r1]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b94:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9c:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <PID_Compute+0x1cc>
		
	}
	else
	{
		return _FALSE;
 8004ba2:	2300      	movs	r3, #0
	}
	
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3730      	adds	r7, #48	; 0x30
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bdb0      	pop	{r4, r5, r7, pc}

08004bac <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	70fb      	strb	r3, [r7, #3]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8004bb8:	78fb      	ldrb	r3, [r7, #3]
 8004bba:	2b01      	cmp	r3, #1
 8004bbc:	bf0c      	ite	eq
 8004bbe:	2301      	moveq	r3, #1
 8004bc0:	2300      	movne	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	73fb      	strb	r3, [r7, #15]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8004bc6:	7bfb      	ldrb	r3, [r7, #15]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d006      	beq.n	8004bda <PID_SetMode+0x2e>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	785b      	ldrb	r3, [r3, #1]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f7ff fe78 	bl	80048ca <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	7bfa      	ldrb	r2, [r7, #15]
 8004bde:	705a      	strb	r2, [r3, #1]
	
}
 8004be0:	bf00      	nop
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6178      	str	r0, [r7, #20]
 8004bf0:	ed87 0b02 	vstr	d0, [r7, #8]
 8004bf4:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8004bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004bfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c00:	f7fb ff80 	bl	8000b04 <__aeabi_dcmpge>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d158      	bne.n	8004cbc <PID_SetOutputLimits+0xd4>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8004c0a:	6979      	ldr	r1, [r7, #20]
 8004c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c10:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 8004c14:	6979      	ldr	r1, [r7, #20]
 8004c16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c1a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	785b      	ldrb	r3, [r3, #1]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d04b      	beq.n	8004cbe <PID_SetOutputLimits+0xd6>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004c34:	f7fb ff70 	bl	8000b18 <__aeabi_dcmpgt>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d007      	beq.n	8004c4e <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004c48:	e9c1 2300 	strd	r2, r3, [r1]
 8004c4c:	e012      	b.n	8004c74 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004c5c:	f7fb ff3e 	bl	8000adc <__aeabi_dcmplt>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d006      	beq.n	8004c74 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004c70:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004c80:	f7fb ff4a 	bl	8000b18 <__aeabi_dcmpgt>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d006      	beq.n	8004c98 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8004c90:	6979      	ldr	r1, [r7, #20]
 8004c92:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004c96:	e012      	b.n	8004cbe <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004ca4:	f7fb ff1a 	bl	8000adc <__aeabi_dcmplt>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d007      	beq.n	8004cbe <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8004cba:	e000      	b.n	8004cbe <PID_SetOutputLimits+0xd6>
		return;
 8004cbc:	bf00      	nop
		}
		else { }
		
	}
	
}
 8004cbe:	3718      	adds	r7, #24
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08a      	sub	sp, #40	; 0x28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	61f8      	str	r0, [r7, #28]
 8004ccc:	ed87 0b04 	vstr	d0, [r7, #16]
 8004cd0:	ed87 1b02 	vstr	d1, [r7, #8]
 8004cd4:	ed87 2b00 	vstr	d2, [r7]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	76fb      	strb	r3, [r7, #27]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004ce8:	f7fb fef8 	bl	8000adc <__aeabi_dcmplt>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f040 8089 	bne.w	8004e06 <PID_SetTunings2+0x142>
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	f04f 0300 	mov.w	r3, #0
 8004cfc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d00:	f7fb feec 	bl	8000adc <__aeabi_dcmplt>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d17d      	bne.n	8004e06 <PID_SetTunings2+0x142>
 8004d0a:	f04f 0200 	mov.w	r2, #0
 8004d0e:	f04f 0300 	mov.w	r3, #0
 8004d12:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d16:	f7fb fee1 	bl	8000adc <__aeabi_dcmplt>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d172      	bne.n	8004e06 <PID_SetTunings2+0x142>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	7efa      	ldrb	r2, [r7, #27]
 8004d24:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8004d26:	7efb      	ldrb	r3, [r7, #27]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	bf0c      	ite	eq
 8004d2c:	2301      	moveq	r3, #1
 8004d2e:	2300      	movne	r3, #0
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8004d38:	69f9      	ldr	r1, [r7, #28]
 8004d3a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8004d42:	69f9      	ldr	r1, [r7, #28]
 8004d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d48:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8004d4c:	69f9      	ldr	r1, [r7, #28]
 8004d4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d52:	e9c1 2308 	strd	r2, r3, [r1, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fbd2 	bl	8000504 <__aeabi_ui2d>
 8004d60:	f04f 0200 	mov.w	r2, #0
 8004d64:	4b2a      	ldr	r3, [pc, #168]	; (8004e10 <PID_SetTunings2+0x14c>)
 8004d66:	f7fb fd71 	bl	800084c <__aeabi_ddiv>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	
	uPID->Kp = Kp;
 8004d72:	69f9      	ldr	r1, [r7, #28]
 8004d74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004d78:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8004d7c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d80:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d84:	f7fb fc38 	bl	80005f8 <__aeabi_dmul>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	460b      	mov	r3, r1
 8004d8c:	69f9      	ldr	r1, [r7, #28]
 8004d8e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8004d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d96:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d9a:	f7fb fd57 	bl	800084c <__aeabi_ddiv>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	69f9      	ldr	r1, [r7, #28]
 8004da4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	78db      	ldrb	r3, [r3, #3]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d12b      	bne.n	8004e08 <PID_SetTunings2+0x144>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004db6:	f04f 0000 	mov.w	r0, #0
 8004dba:	f04f 0100 	mov.w	r1, #0
 8004dbe:	f7fb fa63 	bl	8000288 <__aeabi_dsub>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	69f9      	ldr	r1, [r7, #28]
 8004dc8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004dd2:	f04f 0000 	mov.w	r0, #0
 8004dd6:	f04f 0100 	mov.w	r1, #0
 8004dda:	f7fb fa55 	bl	8000288 <__aeabi_dsub>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	69f9      	ldr	r1, [r7, #28]
 8004de4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004dee:	f04f 0000 	mov.w	r0, #0
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	f7fb fa47 	bl	8000288 <__aeabi_dsub>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	69f9      	ldr	r1, [r7, #28]
 8004e00:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8004e04:	e000      	b.n	8004e08 <PID_SetTunings2+0x144>
		return;
 8004e06:	bf00      	nop
		
	}
	
}
 8004e08:	3728      	adds	r7, #40	; 0x28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	408f4000 	.word	0x408f4000

08004e14 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	785b      	ldrb	r3, [r3, #1]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d02e      	beq.n	8004e86 <PID_SetControllerDirection+0x72>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	78db      	ldrb	r3, [r3, #3]
 8004e2c:	78fa      	ldrb	r2, [r7, #3]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d029      	beq.n	8004e86 <PID_SetControllerDirection+0x72>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8004e38:	f04f 0000 	mov.w	r0, #0
 8004e3c:	f04f 0100 	mov.w	r1, #0
 8004e40:	f7fb fa22 	bl	8000288 <__aeabi_dsub>
 8004e44:	4602      	mov	r2, r0
 8004e46:	460b      	mov	r3, r1
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f04f 0100 	mov.w	r1, #0
 8004e5c:	f7fb fa14 	bl	8000288 <__aeabi_dsub>
 8004e60:	4602      	mov	r2, r0
 8004e62:	460b      	mov	r3, r1
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004e70:	f04f 0000 	mov.w	r0, #0
 8004e74:	f04f 0100 	mov.w	r1, #0
 8004e78:	f7fb fa06 	bl	8000288 <__aeabi_dsub>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	460b      	mov	r3, r1
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	70da      	strb	r2, [r3, #3]
	
}
 8004e8c:	bf00      	nop
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8004e94:	b5b0      	push	{r4, r5, r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	dd2e      	ble.n	8004f02 <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8004ea4:	6838      	ldr	r0, [r7, #0]
 8004ea6:	f7fb fb3d 	bl	8000524 <__aeabi_i2d>
 8004eaa:	4604      	mov	r4, r0
 8004eac:	460d      	mov	r5, r1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fb fb26 	bl	8000504 <__aeabi_ui2d>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	4629      	mov	r1, r5
 8004ec0:	f7fb fcc4 	bl	800084c <__aeabi_ddiv>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		
		uPID->Ki *= ratio;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004ed2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ed6:	f7fb fb8f 	bl	80005f8 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004eea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004eee:	f7fb fcad 	bl	800084c <__aeabi_ddiv>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	609a      	str	r2, [r3, #8]
		
	}
	
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bdb0      	pop	{r4, r5, r7, pc}
 8004f0a:	0000      	movs	r0, r0
 8004f0c:	0000      	movs	r0, r0
	...

08004f10 <servogerak>:
#include "servo.h"

void servogerak(TIM_HandleTypeDef *htim, uint32_t channel, uint16_t sudut)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b086      	sub	sp, #24
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	80fb      	strh	r3, [r7, #6]
	uint16_t regisval;
	if (sudut == 0)
 8004f1e:	88fb      	ldrh	r3, [r7, #6]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <servogerak+0x1c>
	{
		regisval = 500;
 8004f24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004f28:	82fb      	strh	r3, [r7, #22]
 8004f2a:	e019      	b.n	8004f60 <servogerak+0x50>
	}
	else
	{
		regisval = 11.17*sudut + 490.7;
 8004f2c:	88fb      	ldrh	r3, [r7, #6]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fb faf8 	bl	8000524 <__aeabi_i2d>
 8004f34:	a326      	add	r3, pc, #152	; (adr r3, 8004fd0 <servogerak+0xc0>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f7fb fb5d 	bl	80005f8 <__aeabi_dmul>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4610      	mov	r0, r2
 8004f44:	4619      	mov	r1, r3
 8004f46:	a324      	add	r3, pc, #144	; (adr r3, 8004fd8 <servogerak+0xc8>)
 8004f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4c:	f7fb f99e 	bl	800028c <__adddf3>
 8004f50:	4602      	mov	r2, r0
 8004f52:	460b      	mov	r3, r1
 8004f54:	4610      	mov	r0, r2
 8004f56:	4619      	mov	r1, r3
 8004f58:	f7fb fe26 	bl	8000ba8 <__aeabi_d2uiz>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	82fb      	strh	r3, [r7, #22]
	}

	switch (channel)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d830      	bhi.n	8004fc8 <servogerak+0xb8>
 8004f66:	a201      	add	r2, pc, #4	; (adr r2, 8004f6c <servogerak+0x5c>)
 8004f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fc9 	.word	0x08004fc9
 8004f74:	08004fc9 	.word	0x08004fc9
 8004f78:	08004fc9 	.word	0x08004fc9
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fc9 	.word	0x08004fc9
 8004f84:	08004fc9 	.word	0x08004fc9
 8004f88:	08004fc9 	.word	0x08004fc9
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fc9 	.word	0x08004fc9
 8004f94:	08004fc9 	.word	0x08004fc9
 8004f98:	08004fc9 	.word	0x08004fc9
 8004f9c:	08004fbf 	.word	0x08004fbf
	{
		case TIM_CHANNEL_1:
			htim->Instance->CCR1 = regisval;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	8afa      	ldrh	r2, [r7, #22]
 8004fa6:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 8004fa8:	e00e      	b.n	8004fc8 <servogerak+0xb8>
		case TIM_CHANNEL_2:
			htim->Instance->CCR2 = regisval;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	8afa      	ldrh	r2, [r7, #22]
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
			break;
 8004fb2:	e009      	b.n	8004fc8 <servogerak+0xb8>
		case TIM_CHANNEL_3:
			htim->Instance->CCR3 = regisval;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	8afa      	ldrh	r2, [r7, #22]
 8004fba:	63da      	str	r2, [r3, #60]	; 0x3c
			break;
 8004fbc:	e004      	b.n	8004fc8 <servogerak+0xb8>
		case TIM_CHANNEL_4:
			htim->Instance->CCR4 = regisval;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	8afa      	ldrh	r2, [r7, #22]
 8004fc4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8004fc6:	bf00      	nop
	}
}
 8004fc8:	bf00      	nop
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	3d70a3d7 	.word	0x3d70a3d7
 8004fd4:	4026570a 	.word	0x4026570a
 8004fd8:	33333333 	.word	0x33333333
 8004fdc:	407eab33 	.word	0x407eab33

08004fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <HAL_MspInit+0x54>)
 8004fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fee:	4a11      	ldr	r2, [pc, #68]	; (8005034 <HAL_MspInit+0x54>)
 8004ff0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ff6:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <HAL_MspInit+0x54>)
 8004ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ffe:	607b      	str	r3, [r7, #4]
 8005000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005002:	2300      	movs	r3, #0
 8005004:	603b      	str	r3, [r7, #0]
 8005006:	4b0b      	ldr	r3, [pc, #44]	; (8005034 <HAL_MspInit+0x54>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	4a0a      	ldr	r2, [pc, #40]	; (8005034 <HAL_MspInit+0x54>)
 800500c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005010:	6413      	str	r3, [r2, #64]	; 0x40
 8005012:	4b08      	ldr	r3, [pc, #32]	; (8005034 <HAL_MspInit+0x54>)
 8005014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800501e:	2200      	movs	r2, #0
 8005020:	210f      	movs	r1, #15
 8005022:	f06f 0001 	mvn.w	r0, #1
 8005026:	f002 fc8b 	bl	8007940 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800502a:	bf00      	nop
 800502c:	3708      	adds	r7, #8
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	40023800 	.word	0x40023800

08005038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08a      	sub	sp, #40	; 0x28
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005040:	f107 0314 	add.w	r3, r7, #20
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <HAL_ADC_MspInit+0x110>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d171      	bne.n	800513e <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800505a:	2300      	movs	r3, #0
 800505c:	613b      	str	r3, [r7, #16]
 800505e:	4b3b      	ldr	r3, [pc, #236]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005062:	4a3a      	ldr	r2, [pc, #232]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005068:	6453      	str	r3, [r2, #68]	; 0x44
 800506a:	4b38      	ldr	r3, [pc, #224]	; (800514c <HAL_ADC_MspInit+0x114>)
 800506c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005072:	613b      	str	r3, [r7, #16]
 8005074:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	4b34      	ldr	r3, [pc, #208]	; (800514c <HAL_ADC_MspInit+0x114>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	4a33      	ldr	r2, [pc, #204]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005080:	f043 0304 	orr.w	r3, r3, #4
 8005084:	6313      	str	r3, [r2, #48]	; 0x30
 8005086:	4b31      	ldr	r3, [pc, #196]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005092:	2300      	movs	r3, #0
 8005094:	60bb      	str	r3, [r7, #8]
 8005096:	4b2d      	ldr	r3, [pc, #180]	; (800514c <HAL_ADC_MspInit+0x114>)
 8005098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800509a:	4a2c      	ldr	r2, [pc, #176]	; (800514c <HAL_ADC_MspInit+0x114>)
 800509c:	f043 0302 	orr.w	r3, r3, #2
 80050a0:	6313      	str	r3, [r2, #48]	; 0x30
 80050a2:	4b2a      	ldr	r3, [pc, #168]	; (800514c <HAL_ADC_MspInit+0x114>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a6:	f003 0302 	and.w	r3, r3, #2
 80050aa:	60bb      	str	r3, [r7, #8]
 80050ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80050ae:	2301      	movs	r3, #1
 80050b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050b2:	2303      	movs	r3, #3
 80050b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b6:	2300      	movs	r3, #0
 80050b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050ba:	f107 0314 	add.w	r3, r7, #20
 80050be:	4619      	mov	r1, r3
 80050c0:	4823      	ldr	r0, [pc, #140]	; (8005150 <HAL_ADC_MspInit+0x118>)
 80050c2:	f003 f875 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80050c6:	2302      	movs	r3, #2
 80050c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050ca:	2303      	movs	r3, #3
 80050cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050d2:	f107 0314 	add.w	r3, r7, #20
 80050d6:	4619      	mov	r1, r3
 80050d8:	481e      	ldr	r0, [pc, #120]	; (8005154 <HAL_ADC_MspInit+0x11c>)
 80050da:	f003 f869 	bl	80081b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80050de:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050e0:	4a1e      	ldr	r2, [pc, #120]	; (800515c <HAL_ADC_MspInit+0x124>)
 80050e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80050e4:	4b1c      	ldr	r3, [pc, #112]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050e6:	2200      	movs	r2, #0
 80050e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050ea:	4b1b      	ldr	r3, [pc, #108]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050ec:	2200      	movs	r2, #0
 80050ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80050f6:	4b18      	ldr	r3, [pc, #96]	; (8005158 <HAL_ADC_MspInit+0x120>)
 80050f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80050fe:	4b16      	ldr	r3, [pc, #88]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005104:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005108:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800510c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800510e:	4b12      	ldr	r3, [pc, #72]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005110:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005114:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005118:	2200      	movs	r2, #0
 800511a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800511c:	4b0e      	ldr	r3, [pc, #56]	; (8005158 <HAL_ADC_MspInit+0x120>)
 800511e:	2200      	movs	r2, #0
 8005120:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005122:	480d      	ldr	r0, [pc, #52]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005124:	f002 fc36 	bl	8007994 <HAL_DMA_Init>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d001      	beq.n	8005132 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800512e:	f7ff fbc7 	bl	80048c0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a08      	ldr	r2, [pc, #32]	; (8005158 <HAL_ADC_MspInit+0x120>)
 8005136:	639a      	str	r2, [r3, #56]	; 0x38
 8005138:	4a07      	ldr	r2, [pc, #28]	; (8005158 <HAL_ADC_MspInit+0x120>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800513e:	bf00      	nop
 8005140:	3728      	adds	r7, #40	; 0x28
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40012000 	.word	0x40012000
 800514c:	40023800 	.word	0x40023800
 8005150:	40020800 	.word	0x40020800
 8005154:	40020400 	.word	0x40020400
 8005158:	200002cc 	.word	0x200002cc
 800515c:	40026410 	.word	0x40026410

08005160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08c      	sub	sp, #48	; 0x30
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005168:	f107 031c 	add.w	r3, r7, #28
 800516c:	2200      	movs	r2, #0
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	609a      	str	r2, [r3, #8]
 8005174:	60da      	str	r2, [r3, #12]
 8005176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a42      	ldr	r2, [pc, #264]	; (8005288 <HAL_I2C_MspInit+0x128>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d12d      	bne.n	80051de <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	4b41      	ldr	r3, [pc, #260]	; (800528c <HAL_I2C_MspInit+0x12c>)
 8005188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518a:	4a40      	ldr	r2, [pc, #256]	; (800528c <HAL_I2C_MspInit+0x12c>)
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	6313      	str	r3, [r2, #48]	; 0x30
 8005192:	4b3e      	ldr	r3, [pc, #248]	; (800528c <HAL_I2C_MspInit+0x12c>)
 8005194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	69bb      	ldr	r3, [r7, #24]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800519e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80051a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80051a4:	2312      	movs	r3, #18
 80051a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051a8:	2300      	movs	r3, #0
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ac:	2303      	movs	r3, #3
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80051b0:	2304      	movs	r3, #4
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051b4:	f107 031c 	add.w	r3, r7, #28
 80051b8:	4619      	mov	r1, r3
 80051ba:	4835      	ldr	r0, [pc, #212]	; (8005290 <HAL_I2C_MspInit+0x130>)
 80051bc:	f002 fff8 	bl	80081b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	4b31      	ldr	r3, [pc, #196]	; (800528c <HAL_I2C_MspInit+0x12c>)
 80051c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c8:	4a30      	ldr	r2, [pc, #192]	; (800528c <HAL_I2C_MspInit+0x12c>)
 80051ca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051ce:	6413      	str	r3, [r2, #64]	; 0x40
 80051d0:	4b2e      	ldr	r3, [pc, #184]	; (800528c <HAL_I2C_MspInit+0x12c>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80051dc:	e050      	b.n	8005280 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a2c      	ldr	r2, [pc, #176]	; (8005294 <HAL_I2C_MspInit+0x134>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d14b      	bne.n	8005280 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80051e8:	2300      	movs	r3, #0
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	4b27      	ldr	r3, [pc, #156]	; (800528c <HAL_I2C_MspInit+0x12c>)
 80051ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f0:	4a26      	ldr	r2, [pc, #152]	; (800528c <HAL_I2C_MspInit+0x12c>)
 80051f2:	f043 0304 	orr.w	r3, r3, #4
 80051f6:	6313      	str	r3, [r2, #48]	; 0x30
 80051f8:	4b24      	ldr	r3, [pc, #144]	; (800528c <HAL_I2C_MspInit+0x12c>)
 80051fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	613b      	str	r3, [r7, #16]
 8005202:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_I2C_MspInit+0x12c>)
 800520a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800520c:	4a1f      	ldr	r2, [pc, #124]	; (800528c <HAL_I2C_MspInit+0x12c>)
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6313      	str	r3, [r2, #48]	; 0x30
 8005214:	4b1d      	ldr	r3, [pc, #116]	; (800528c <HAL_I2C_MspInit+0x12c>)
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005220:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005226:	2312      	movs	r3, #18
 8005228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800522a:	2300      	movs	r3, #0
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800522e:	2303      	movs	r3, #3
 8005230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005232:	2304      	movs	r3, #4
 8005234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005236:	f107 031c 	add.w	r3, r7, #28
 800523a:	4619      	mov	r1, r3
 800523c:	4816      	ldr	r0, [pc, #88]	; (8005298 <HAL_I2C_MspInit+0x138>)
 800523e:	f002 ffb7 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8005242:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005248:	2312      	movs	r3, #18
 800524a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005250:	2303      	movs	r3, #3
 8005252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005254:	2304      	movs	r3, #4
 8005256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005258:	f107 031c 	add.w	r3, r7, #28
 800525c:	4619      	mov	r1, r3
 800525e:	480f      	ldr	r0, [pc, #60]	; (800529c <HAL_I2C_MspInit+0x13c>)
 8005260:	f002 ffa6 	bl	80081b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005264:	2300      	movs	r3, #0
 8005266:	60bb      	str	r3, [r7, #8]
 8005268:	4b08      	ldr	r3, [pc, #32]	; (800528c <HAL_I2C_MspInit+0x12c>)
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	4a07      	ldr	r2, [pc, #28]	; (800528c <HAL_I2C_MspInit+0x12c>)
 800526e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005272:	6413      	str	r3, [r2, #64]	; 0x40
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <HAL_I2C_MspInit+0x12c>)
 8005276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	68bb      	ldr	r3, [r7, #8]
}
 8005280:	bf00      	nop
 8005282:	3730      	adds	r7, #48	; 0x30
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}
 8005288:	40005800 	.word	0x40005800
 800528c:	40023800 	.word	0x40023800
 8005290:	40020400 	.word	0x40020400
 8005294:	40005c00 	.word	0x40005c00
 8005298:	40020800 	.word	0x40020800
 800529c:	40020000 	.word	0x40020000

080052a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80052a8:	f107 0308 	add.w	r3, r7, #8
 80052ac:	2200      	movs	r2, #0
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	605a      	str	r2, [r3, #4]
 80052b2:	609a      	str	r2, [r3, #8]
 80052b4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a0c      	ldr	r2, [pc, #48]	; (80052ec <HAL_RTC_MspInit+0x4c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d111      	bne.n	80052e4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80052c0:	2302      	movs	r3, #2
 80052c2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80052c4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052ca:	f107 0308 	add.w	r3, r7, #8
 80052ce:	4618      	mov	r0, r3
 80052d0:	f005 fae6 	bl	800a8a0 <HAL_RCCEx_PeriphCLKConfig>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d001      	beq.n	80052de <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80052da:	f7ff faf1 	bl	80048c0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80052de:	4b04      	ldr	r3, [pc, #16]	; (80052f0 <HAL_RTC_MspInit+0x50>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80052e4:	bf00      	nop
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	40002800 	.word	0x40002800
 80052f0:	42470e3c 	.word	0x42470e3c

080052f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	; 0x28
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052fc:	f107 0314 	add.w	r3, r7, #20
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
 8005304:	605a      	str	r2, [r3, #4]
 8005306:	609a      	str	r2, [r3, #8]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a68      	ldr	r2, [pc, #416]	; (80054b4 <HAL_SD_MspInit+0x1c0>)
 8005312:	4293      	cmp	r3, r2
 8005314:	f040 80c9 	bne.w	80054aa <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
 800531c:	4b66      	ldr	r3, [pc, #408]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 800531e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005320:	4a65      	ldr	r2, [pc, #404]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 8005322:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005326:	6453      	str	r3, [r2, #68]	; 0x44
 8005328:	4b63      	ldr	r3, [pc, #396]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 800532a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800532c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005330:	613b      	str	r3, [r7, #16]
 8005332:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005334:	2300      	movs	r3, #0
 8005336:	60fb      	str	r3, [r7, #12]
 8005338:	4b5f      	ldr	r3, [pc, #380]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	4a5e      	ldr	r2, [pc, #376]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 800533e:	f043 0304 	orr.w	r3, r3, #4
 8005342:	6313      	str	r3, [r2, #48]	; 0x30
 8005344:	4b5c      	ldr	r3, [pc, #368]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 8005346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	60fb      	str	r3, [r7, #12]
 800534e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005350:	2300      	movs	r3, #0
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	4b58      	ldr	r3, [pc, #352]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	4a57      	ldr	r2, [pc, #348]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 800535a:	f043 0308 	orr.w	r3, r3, #8
 800535e:	6313      	str	r3, [r2, #48]	; 0x30
 8005360:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <HAL_SD_MspInit+0x1c4>)
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 800536c:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8005370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005372:	2302      	movs	r3, #2
 8005374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005376:	2300      	movs	r3, #0
 8005378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537a:	2303      	movs	r3, #3
 800537c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800537e:	230c      	movs	r3, #12
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005382:	f107 0314 	add.w	r3, r7, #20
 8005386:	4619      	mov	r1, r3
 8005388:	484c      	ldr	r0, [pc, #304]	; (80054bc <HAL_SD_MspInit+0x1c8>)
 800538a:	f002 ff11 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800538e:	2304      	movs	r3, #4
 8005390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005392:	2302      	movs	r3, #2
 8005394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005396:	2300      	movs	r3, #0
 8005398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539a:	2303      	movs	r3, #3
 800539c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800539e:	230c      	movs	r3, #12
 80053a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80053a2:	f107 0314 	add.w	r3, r7, #20
 80053a6:	4619      	mov	r1, r3
 80053a8:	4845      	ldr	r0, [pc, #276]	; (80054c0 <HAL_SD_MspInit+0x1cc>)
 80053aa:	f002 ff01 	bl	80081b0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80053ae:	4b45      	ldr	r3, [pc, #276]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053b0:	4a45      	ldr	r2, [pc, #276]	; (80054c8 <HAL_SD_MspInit+0x1d4>)
 80053b2:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80053b4:	4b43      	ldr	r3, [pc, #268]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80053ba:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053bc:	4b41      	ldr	r3, [pc, #260]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053be:	2200      	movs	r2, #0
 80053c0:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c2:	4b40      	ldr	r3, [pc, #256]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053c8:	4b3e      	ldr	r3, [pc, #248]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ce:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80053d0:	4b3c      	ldr	r3, [pc, #240]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053d2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80053d6:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80053d8:	4b3a      	ldr	r3, [pc, #232]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80053de:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80053e0:	4b38      	ldr	r3, [pc, #224]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053e2:	2220      	movs	r2, #32
 80053e4:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053e6:	4b37      	ldr	r3, [pc, #220]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053e8:	2200      	movs	r2, #0
 80053ea:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80053ec:	4b35      	ldr	r3, [pc, #212]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053ee:	2204      	movs	r2, #4
 80053f0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80053f2:	4b34      	ldr	r3, [pc, #208]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053f4:	2203      	movs	r2, #3
 80053f6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 80053fa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80053fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005400:	4b30      	ldr	r3, [pc, #192]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 8005402:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005406:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8005408:	482e      	ldr	r0, [pc, #184]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 800540a:	f002 fac3 	bl	8007994 <HAL_DMA_Init>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8005414:	f7ff fa54 	bl	80048c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a2a      	ldr	r2, [pc, #168]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
 800541e:	4a29      	ldr	r2, [pc, #164]	; (80054c4 <HAL_SD_MspInit+0x1d0>)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8005424:	4b29      	ldr	r3, [pc, #164]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005426:	4a2a      	ldr	r2, [pc, #168]	; (80054d0 <HAL_SD_MspInit+0x1dc>)
 8005428:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 800542a:	4b28      	ldr	r3, [pc, #160]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 800542c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005430:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005432:	4b26      	ldr	r3, [pc, #152]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005434:	2240      	movs	r2, #64	; 0x40
 8005436:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005438:	4b24      	ldr	r3, [pc, #144]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 800543a:	2200      	movs	r2, #0
 800543c:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 800543e:	4b23      	ldr	r3, [pc, #140]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005440:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005444:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005446:	4b21      	ldr	r3, [pc, #132]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800544c:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800544e:	4b1f      	ldr	r3, [pc, #124]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005450:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005454:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005458:	2220      	movs	r2, #32
 800545a:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 800545c:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 800545e:	2200      	movs	r2, #0
 8005460:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005462:	4b1a      	ldr	r3, [pc, #104]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005464:	2204      	movs	r2, #4
 8005466:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005468:	4b18      	ldr	r3, [pc, #96]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 800546a:	2203      	movs	r2, #3
 800546c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005470:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005474:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005476:	4b15      	ldr	r3, [pc, #84]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005478:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800547c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800547e:	4813      	ldr	r0, [pc, #76]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005480:	f002 fa88 	bl	8007994 <HAL_DMA_Init>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800548a:	f7ff fa19 	bl	80048c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a0e      	ldr	r2, [pc, #56]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005492:	63da      	str	r2, [r3, #60]	; 0x3c
 8005494:	4a0d      	ldr	r2, [pc, #52]	; (80054cc <HAL_SD_MspInit+0x1d8>)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 800549a:	2200      	movs	r2, #0
 800549c:	2105      	movs	r1, #5
 800549e:	2031      	movs	r0, #49	; 0x31
 80054a0:	f002 fa4e 	bl	8007940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80054a4:	2031      	movs	r0, #49	; 0x31
 80054a6:	f002 fa67 	bl	8007978 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80054aa:	bf00      	nop
 80054ac:	3728      	adds	r7, #40	; 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	40012c00 	.word	0x40012c00
 80054b8:	40023800 	.word	0x40023800
 80054bc:	40020800 	.word	0x40020800
 80054c0:	40020c00 	.word	0x40020c00
 80054c4:	20000478 	.word	0x20000478
 80054c8:	40026458 	.word	0x40026458
 80054cc:	200004d8 	.word	0x200004d8
 80054d0:	400264a0 	.word	0x400264a0

080054d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a0e      	ldr	r2, [pc, #56]	; (800551c <HAL_TIM_PWM_MspInit+0x48>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d115      	bne.n	8005512 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054e6:	2300      	movs	r3, #0
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <HAL_TIM_PWM_MspInit+0x4c>)
 80054ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ee:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <HAL_TIM_PWM_MspInit+0x4c>)
 80054f0:	f043 0301 	orr.w	r3, r3, #1
 80054f4:	6453      	str	r3, [r2, #68]	; 0x44
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <HAL_TIM_PWM_MspInit+0x4c>)
 80054f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8005502:	2200      	movs	r2, #0
 8005504:	2105      	movs	r1, #5
 8005506:	2019      	movs	r0, #25
 8005508:	f002 fa1a 	bl	8007940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800550c:	2019      	movs	r0, #25
 800550e:	f002 fa33 	bl	8007978 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8005512:	bf00      	nop
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	40010000 	.word	0x40010000
 8005520:	40023800 	.word	0x40023800

08005524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a22      	ldr	r2, [pc, #136]	; (80055bc <HAL_TIM_Base_MspInit+0x98>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10e      	bne.n	8005554 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553e:	4a20      	ldr	r2, [pc, #128]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005540:	f043 0302 	orr.w	r3, r3, #2
 8005544:	6413      	str	r3, [r2, #64]	; 0x40
 8005546:	4b1e      	ldr	r3, [pc, #120]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554a:	f003 0302 	and.w	r3, r3, #2
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8005552:	e02e      	b.n	80055b2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a1a      	ldr	r2, [pc, #104]	; (80055c4 <HAL_TIM_Base_MspInit+0xa0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d10e      	bne.n	800557c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800555e:	2300      	movs	r3, #0
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	4b17      	ldr	r3, [pc, #92]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	4a16      	ldr	r2, [pc, #88]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005568:	f043 0304 	orr.w	r3, r3, #4
 800556c:	6413      	str	r3, [r2, #64]	; 0x40
 800556e:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	693b      	ldr	r3, [r7, #16]
}
 800557a:	e01a      	b.n	80055b2 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM10)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a11      	ldr	r2, [pc, #68]	; (80055c8 <HAL_TIM_Base_MspInit+0xa4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d115      	bne.n	80055b2 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 800558c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800558e:	4a0c      	ldr	r2, [pc, #48]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005594:	6453      	str	r3, [r2, #68]	; 0x44
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <HAL_TIM_Base_MspInit+0x9c>)
 8005598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80055a2:	2200      	movs	r2, #0
 80055a4:	2105      	movs	r1, #5
 80055a6:	2019      	movs	r0, #25
 80055a8:	f002 f9ca 	bl	8007940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80055ac:	2019      	movs	r0, #25
 80055ae:	f002 f9e3 	bl	8007978 <HAL_NVIC_EnableIRQ>
}
 80055b2:	bf00      	nop
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	40000400 	.word	0x40000400
 80055c0:	40023800 	.word	0x40023800
 80055c4:	40000800 	.word	0x40000800
 80055c8:	40014400 	.word	0x40014400

080055cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08c      	sub	sp, #48	; 0x30
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055d4:	f107 031c 	add.w	r3, r7, #28
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	605a      	str	r2, [r3, #4]
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	60da      	str	r2, [r3, #12]
 80055e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a55      	ldr	r2, [pc, #340]	; (8005740 <HAL_TIM_MspPostInit+0x174>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d13e      	bne.n	800566c <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80055ee:	2300      	movs	r3, #0
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	4b54      	ldr	r3, [pc, #336]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 80055f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f6:	4a53      	ldr	r2, [pc, #332]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 80055f8:	f043 0310 	orr.w	r3, r3, #16
 80055fc:	6313      	str	r3, [r2, #48]	; 0x30
 80055fe:	4b51      	ldr	r3, [pc, #324]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 8005600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005602:	f003 0310 	and.w	r3, r3, #16
 8005606:	61bb      	str	r3, [r7, #24]
 8005608:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	617b      	str	r3, [r7, #20]
 800560e:	4b4d      	ldr	r3, [pc, #308]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 8005610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005612:	4a4c      	ldr	r2, [pc, #304]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	6313      	str	r3, [r2, #48]	; 0x30
 800561a:	4b4a      	ldr	r3, [pc, #296]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 800561c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005626:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800562a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800562c:	2302      	movs	r3, #2
 800562e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005630:	2300      	movs	r3, #0
 8005632:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005634:	2300      	movs	r3, #0
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005638:	2301      	movs	r3, #1
 800563a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800563c:	f107 031c 	add.w	r3, r7, #28
 8005640:	4619      	mov	r1, r3
 8005642:	4841      	ldr	r0, [pc, #260]	; (8005748 <HAL_TIM_MspPostInit+0x17c>)
 8005644:	f002 fdb4 	bl	80081b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800564c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800564e:	2302      	movs	r3, #2
 8005650:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005652:	2300      	movs	r3, #0
 8005654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005656:	2300      	movs	r3, #0
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800565a:	2301      	movs	r3, #1
 800565c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800565e:	f107 031c 	add.w	r3, r7, #28
 8005662:	4619      	mov	r1, r3
 8005664:	4839      	ldr	r0, [pc, #228]	; (800574c <HAL_TIM_MspPostInit+0x180>)
 8005666:	f002 fda3 	bl	80081b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800566a:	e065      	b.n	8005738 <HAL_TIM_MspPostInit+0x16c>
  else if(htim->Instance==TIM3)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a37      	ldr	r2, [pc, #220]	; (8005750 <HAL_TIM_MspPostInit+0x184>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d13c      	bne.n	80056f0 <HAL_TIM_MspPostInit+0x124>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
 800567a:	4b32      	ldr	r3, [pc, #200]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 800567c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567e:	4a31      	ldr	r2, [pc, #196]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 8005680:	f043 0301 	orr.w	r3, r3, #1
 8005684:	6313      	str	r3, [r2, #48]	; 0x30
 8005686:	4b2f      	ldr	r3, [pc, #188]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	613b      	str	r3, [r7, #16]
 8005690:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	4a2a      	ldr	r2, [pc, #168]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 800569c:	f043 0302 	orr.w	r3, r3, #2
 80056a0:	6313      	str	r3, [r2, #48]	; 0x30
 80056a2:	4b28      	ldr	r3, [pc, #160]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 80056a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80056ae:	2340      	movs	r3, #64	; 0x40
 80056b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b2:	2302      	movs	r3, #2
 80056b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056ba:	2300      	movs	r3, #0
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056be:	2302      	movs	r3, #2
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056c2:	f107 031c 	add.w	r3, r7, #28
 80056c6:	4619      	mov	r1, r3
 80056c8:	4820      	ldr	r0, [pc, #128]	; (800574c <HAL_TIM_MspPostInit+0x180>)
 80056ca:	f002 fd71 	bl	80081b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80056ce:	2301      	movs	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d2:	2302      	movs	r3, #2
 80056d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d6:	2300      	movs	r3, #0
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056da:	2300      	movs	r3, #0
 80056dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80056de:	2302      	movs	r3, #2
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056e2:	f107 031c 	add.w	r3, r7, #28
 80056e6:	4619      	mov	r1, r3
 80056e8:	481a      	ldr	r0, [pc, #104]	; (8005754 <HAL_TIM_MspPostInit+0x188>)
 80056ea:	f002 fd61 	bl	80081b0 <HAL_GPIO_Init>
}
 80056ee:	e023      	b.n	8005738 <HAL_TIM_MspPostInit+0x16c>
  else if(htim->Instance==TIM4)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a18      	ldr	r2, [pc, #96]	; (8005758 <HAL_TIM_MspPostInit+0x18c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d11e      	bne.n	8005738 <HAL_TIM_MspPostInit+0x16c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80056fa:	2300      	movs	r3, #0
 80056fc:	60bb      	str	r3, [r7, #8]
 80056fe:	4b11      	ldr	r3, [pc, #68]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	4a10      	ldr	r2, [pc, #64]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 8005704:	f043 0308 	orr.w	r3, r3, #8
 8005708:	6313      	str	r3, [r2, #48]	; 0x30
 800570a:	4b0e      	ldr	r3, [pc, #56]	; (8005744 <HAL_TIM_MspPostInit+0x178>)
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	60bb      	str	r3, [r7, #8]
 8005714:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8005716:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800571a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571c:	2302      	movs	r3, #2
 800571e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005720:	2300      	movs	r3, #0
 8005722:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005724:	2300      	movs	r3, #0
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005728:	2302      	movs	r3, #2
 800572a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800572c:	f107 031c 	add.w	r3, r7, #28
 8005730:	4619      	mov	r1, r3
 8005732:	480a      	ldr	r0, [pc, #40]	; (800575c <HAL_TIM_MspPostInit+0x190>)
 8005734:	f002 fd3c 	bl	80081b0 <HAL_GPIO_Init>
}
 8005738:	bf00      	nop
 800573a:	3730      	adds	r7, #48	; 0x30
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40010000 	.word	0x40010000
 8005744:	40023800 	.word	0x40023800
 8005748:	40021000 	.word	0x40021000
 800574c:	40020000 	.word	0x40020000
 8005750:	40000400 	.word	0x40000400
 8005754:	40020400 	.word	0x40020400
 8005758:	40000800 	.word	0x40000800
 800575c:	40020c00 	.word	0x40020c00

08005760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08c      	sub	sp, #48	; 0x30
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005768:	f107 031c 	add.w	r3, r7, #28
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	605a      	str	r2, [r3, #4]
 8005772:	609a      	str	r2, [r3, #8]
 8005774:	60da      	str	r2, [r3, #12]
 8005776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a7c      	ldr	r2, [pc, #496]	; (8005970 <HAL_UART_MspInit+0x210>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d15a      	bne.n	8005838 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005782:	2300      	movs	r3, #0
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	4b7b      	ldr	r3, [pc, #492]	; (8005974 <HAL_UART_MspInit+0x214>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578a:	4a7a      	ldr	r2, [pc, #488]	; (8005974 <HAL_UART_MspInit+0x214>)
 800578c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005790:	6413      	str	r3, [r2, #64]	; 0x40
 8005792:	4b78      	ldr	r3, [pc, #480]	; (8005974 <HAL_UART_MspInit+0x214>)
 8005794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800579a:	61bb      	str	r3, [r7, #24]
 800579c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800579e:	2300      	movs	r3, #0
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	4b74      	ldr	r3, [pc, #464]	; (8005974 <HAL_UART_MspInit+0x214>)
 80057a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a6:	4a73      	ldr	r2, [pc, #460]	; (8005974 <HAL_UART_MspInit+0x214>)
 80057a8:	f043 0301 	orr.w	r3, r3, #1
 80057ac:	6313      	str	r3, [r2, #48]	; 0x30
 80057ae:	4b71      	ldr	r3, [pc, #452]	; (8005974 <HAL_UART_MspInit+0x214>)
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	617b      	str	r3, [r7, #20]
 80057b8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80057ba:	230c      	movs	r3, #12
 80057bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057be:	2302      	movs	r3, #2
 80057c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057c6:	2303      	movs	r3, #3
 80057c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057ca:	2307      	movs	r3, #7
 80057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ce:	f107 031c 	add.w	r3, r7, #28
 80057d2:	4619      	mov	r1, r3
 80057d4:	4868      	ldr	r0, [pc, #416]	; (8005978 <HAL_UART_MspInit+0x218>)
 80057d6:	f002 fceb 	bl	80081b0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80057da:	4b68      	ldr	r3, [pc, #416]	; (800597c <HAL_UART_MspInit+0x21c>)
 80057dc:	4a68      	ldr	r2, [pc, #416]	; (8005980 <HAL_UART_MspInit+0x220>)
 80057de:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80057e0:	4b66      	ldr	r3, [pc, #408]	; (800597c <HAL_UART_MspInit+0x21c>)
 80057e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057e6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057e8:	4b64      	ldr	r3, [pc, #400]	; (800597c <HAL_UART_MspInit+0x21c>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057ee:	4b63      	ldr	r3, [pc, #396]	; (800597c <HAL_UART_MspInit+0x21c>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057f4:	4b61      	ldr	r3, [pc, #388]	; (800597c <HAL_UART_MspInit+0x21c>)
 80057f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057fa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057fc:	4b5f      	ldr	r3, [pc, #380]	; (800597c <HAL_UART_MspInit+0x21c>)
 80057fe:	2200      	movs	r2, #0
 8005800:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005802:	4b5e      	ldr	r3, [pc, #376]	; (800597c <HAL_UART_MspInit+0x21c>)
 8005804:	2200      	movs	r2, #0
 8005806:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005808:	4b5c      	ldr	r3, [pc, #368]	; (800597c <HAL_UART_MspInit+0x21c>)
 800580a:	2200      	movs	r2, #0
 800580c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800580e:	4b5b      	ldr	r3, [pc, #364]	; (800597c <HAL_UART_MspInit+0x21c>)
 8005810:	2200      	movs	r2, #0
 8005812:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005814:	4b59      	ldr	r3, [pc, #356]	; (800597c <HAL_UART_MspInit+0x21c>)
 8005816:	2200      	movs	r2, #0
 8005818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800581a:	4858      	ldr	r0, [pc, #352]	; (800597c <HAL_UART_MspInit+0x21c>)
 800581c:	f002 f8ba 	bl	8007994 <HAL_DMA_Init>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d001      	beq.n	800582a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8005826:	f7ff f84b 	bl	80048c0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	4a53      	ldr	r2, [pc, #332]	; (800597c <HAL_UART_MspInit+0x21c>)
 800582e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005830:	4a52      	ldr	r2, [pc, #328]	; (800597c <HAL_UART_MspInit+0x21c>)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005836:	e097      	b.n	8005968 <HAL_UART_MspInit+0x208>
  else if(huart->Instance==USART3)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a51      	ldr	r2, [pc, #324]	; (8005984 <HAL_UART_MspInit+0x224>)
 800583e:	4293      	cmp	r3, r2
 8005840:	f040 8092 	bne.w	8005968 <HAL_UART_MspInit+0x208>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	4b4a      	ldr	r3, [pc, #296]	; (8005974 <HAL_UART_MspInit+0x214>)
 800584a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584c:	4a49      	ldr	r2, [pc, #292]	; (8005974 <HAL_UART_MspInit+0x214>)
 800584e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005852:	6413      	str	r3, [r2, #64]	; 0x40
 8005854:	4b47      	ldr	r3, [pc, #284]	; (8005974 <HAL_UART_MspInit+0x214>)
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005860:	2300      	movs	r3, #0
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	4b43      	ldr	r3, [pc, #268]	; (8005974 <HAL_UART_MspInit+0x214>)
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	4a42      	ldr	r2, [pc, #264]	; (8005974 <HAL_UART_MspInit+0x214>)
 800586a:	f043 0308 	orr.w	r3, r3, #8
 800586e:	6313      	str	r3, [r2, #48]	; 0x30
 8005870:	4b40      	ldr	r3, [pc, #256]	; (8005974 <HAL_UART_MspInit+0x214>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	f003 0308 	and.w	r3, r3, #8
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800587c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005880:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005882:	2302      	movs	r3, #2
 8005884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005886:	2300      	movs	r3, #0
 8005888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800588a:	2303      	movs	r3, #3
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800588e:	2307      	movs	r3, #7
 8005890:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005892:	f107 031c 	add.w	r3, r7, #28
 8005896:	4619      	mov	r1, r3
 8005898:	483b      	ldr	r0, [pc, #236]	; (8005988 <HAL_UART_MspInit+0x228>)
 800589a:	f002 fc89 	bl	80081b0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800589e:	4b3b      	ldr	r3, [pc, #236]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058a0:	4a3b      	ldr	r2, [pc, #236]	; (8005990 <HAL_UART_MspInit+0x230>)
 80058a2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80058a4:	4b39      	ldr	r3, [pc, #228]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058a6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058aa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058ac:	4b37      	ldr	r3, [pc, #220]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058b2:	4b36      	ldr	r3, [pc, #216]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058b8:	4b34      	ldr	r3, [pc, #208]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058be:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058c0:	4b32      	ldr	r3, [pc, #200]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058c6:	4b31      	ldr	r3, [pc, #196]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80058cc:	4b2f      	ldr	r3, [pc, #188]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058d2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80058d4:	4b2d      	ldr	r3, [pc, #180]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058d6:	2200      	movs	r2, #0
 80058d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058da:	4b2c      	ldr	r3, [pc, #176]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058dc:	2200      	movs	r2, #0
 80058de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80058e0:	482a      	ldr	r0, [pc, #168]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058e2:	f002 f857 	bl	8007994 <HAL_DMA_Init>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_UART_MspInit+0x190>
      Error_Handler();
 80058ec:	f7fe ffe8 	bl	80048c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a26      	ldr	r2, [pc, #152]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80058f6:	4a25      	ldr	r2, [pc, #148]	; (800598c <HAL_UART_MspInit+0x22c>)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80058fc:	4b25      	ldr	r3, [pc, #148]	; (8005994 <HAL_UART_MspInit+0x234>)
 80058fe:	4a26      	ldr	r2, [pc, #152]	; (8005998 <HAL_UART_MspInit+0x238>)
 8005900:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005908:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800590a:	4b22      	ldr	r3, [pc, #136]	; (8005994 <HAL_UART_MspInit+0x234>)
 800590c:	2240      	movs	r2, #64	; 0x40
 800590e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005910:	4b20      	ldr	r3, [pc, #128]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005912:	2200      	movs	r2, #0
 8005914:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005916:	4b1f      	ldr	r3, [pc, #124]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800591c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005920:	2200      	movs	r2, #0
 8005922:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005926:	2200      	movs	r2, #0
 8005928:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <HAL_UART_MspInit+0x234>)
 800592c:	2200      	movs	r2, #0
 800592e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005930:	4b18      	ldr	r3, [pc, #96]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005932:	2200      	movs	r2, #0
 8005934:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005936:	4b17      	ldr	r3, [pc, #92]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005938:	2200      	movs	r2, #0
 800593a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800593c:	4815      	ldr	r0, [pc, #84]	; (8005994 <HAL_UART_MspInit+0x234>)
 800593e:	f002 f829 	bl	8007994 <HAL_DMA_Init>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <HAL_UART_MspInit+0x1ec>
      Error_Handler();
 8005948:	f7fe ffba 	bl	80048c0 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a11      	ldr	r2, [pc, #68]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005950:	639a      	str	r2, [r3, #56]	; 0x38
 8005952:	4a10      	ldr	r2, [pc, #64]	; (8005994 <HAL_UART_MspInit+0x234>)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8005958:	2200      	movs	r2, #0
 800595a:	2105      	movs	r1, #5
 800595c:	2027      	movs	r0, #39	; 0x27
 800595e:	f001 ffef 	bl	8007940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005962:	2027      	movs	r0, #39	; 0x27
 8005964:	f002 f808 	bl	8007978 <HAL_NVIC_EnableIRQ>
}
 8005968:	bf00      	nop
 800596a:	3730      	adds	r7, #48	; 0x30
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40004400 	.word	0x40004400
 8005974:	40023800 	.word	0x40023800
 8005978:	40020000 	.word	0x40020000
 800597c:	200006e8 	.word	0x200006e8
 8005980:	40026088 	.word	0x40026088
 8005984:	40004800 	.word	0x40004800
 8005988:	40020c00 	.word	0x40020c00
 800598c:	20000748 	.word	0x20000748
 8005990:	40026028 	.word	0x40026028
 8005994:	200007a8 	.word	0x200007a8
 8005998:	40026058 	.word	0x40026058

0800599c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08e      	sub	sp, #56	; 0x38
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
 80059b0:	4b33      	ldr	r3, [pc, #204]	; (8005a80 <HAL_InitTick+0xe4>)
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	4a32      	ldr	r2, [pc, #200]	; (8005a80 <HAL_InitTick+0xe4>)
 80059b6:	f043 0310 	orr.w	r3, r3, #16
 80059ba:	6413      	str	r3, [r2, #64]	; 0x40
 80059bc:	4b30      	ldr	r3, [pc, #192]	; (8005a80 <HAL_InitTick+0xe4>)
 80059be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059c8:	f107 0210 	add.w	r2, r7, #16
 80059cc:	f107 0314 	add.w	r3, r7, #20
 80059d0:	4611      	mov	r1, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f004 ff32 	bl	800a83c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80059d8:	6a3b      	ldr	r3, [r7, #32]
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80059dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d103      	bne.n	80059ea <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80059e2:	f004 ff03 	bl	800a7ec <HAL_RCC_GetPCLK1Freq>
 80059e6:	6378      	str	r0, [r7, #52]	; 0x34
 80059e8:	e004      	b.n	80059f4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80059ea:	f004 feff 	bl	800a7ec <HAL_RCC_GetPCLK1Freq>
 80059ee:	4603      	mov	r3, r0
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	4a23      	ldr	r2, [pc, #140]	; (8005a84 <HAL_InitTick+0xe8>)
 80059f8:	fba2 2303 	umull	r2, r3, r2, r3
 80059fc:	0c9b      	lsrs	r3, r3, #18
 80059fe:	3b01      	subs	r3, #1
 8005a00:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005a02:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <HAL_InitTick+0xec>)
 8005a04:	4a21      	ldr	r2, [pc, #132]	; (8005a8c <HAL_InitTick+0xf0>)
 8005a06:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <HAL_InitTick+0xec>)
 8005a0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005a0e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005a10:	4a1d      	ldr	r2, [pc, #116]	; (8005a88 <HAL_InitTick+0xec>)
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005a16:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <HAL_InitTick+0xec>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005a1c:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <HAL_InitTick+0xec>)
 8005a1e:	2200      	movs	r2, #0
 8005a20:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a22:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_InitTick+0xec>)
 8005a24:	2200      	movs	r2, #0
 8005a26:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8005a28:	4817      	ldr	r0, [pc, #92]	; (8005a88 <HAL_InitTick+0xec>)
 8005a2a:	f006 fc05 	bl	800c238 <HAL_TIM_Base_Init>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8005a34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d11b      	bne.n	8005a74 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8005a3c:	4812      	ldr	r0, [pc, #72]	; (8005a88 <HAL_InitTick+0xec>)
 8005a3e:	f006 fc4b 	bl	800c2d8 <HAL_TIM_Base_Start_IT>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8005a48:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d111      	bne.n	8005a74 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005a50:	2036      	movs	r0, #54	; 0x36
 8005a52:	f001 ff91 	bl	8007978 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2b0f      	cmp	r3, #15
 8005a5a:	d808      	bhi.n	8005a6e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	2036      	movs	r0, #54	; 0x36
 8005a62:	f001 ff6d 	bl	8007940 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <HAL_InitTick+0xf4>)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6013      	str	r3, [r2, #0]
 8005a6c:	e002      	b.n	8005a74 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8005a74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3738      	adds	r7, #56	; 0x38
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40023800 	.word	0x40023800
 8005a84:	431bde83 	.word	0x431bde83
 8005a88:	20000da8 	.word	0x20000da8
 8005a8c:	40001000 	.word	0x40001000
 8005a90:	20000018 	.word	0x20000018

08005a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a94:	b480      	push	{r7}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005a98:	e7fe      	b.n	8005a98 <NMI_Handler+0x4>

08005a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a9e:	e7fe      	b.n	8005a9e <HardFault_Handler+0x4>

08005aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005aa4:	e7fe      	b.n	8005aa4 <MemManage_Handler+0x4>

08005aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005aaa:	e7fe      	b.n	8005aaa <BusFault_Handler+0x4>

08005aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005aac:	b480      	push	{r7}
 8005aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005ab0:	e7fe      	b.n	8005ab0 <UsageFault_Handler+0x4>

08005ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005ac4:	4802      	ldr	r0, [pc, #8]	; (8005ad0 <DMA1_Stream1_IRQHandler+0x10>)
 8005ac6:	f002 f8fd 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005aca:	bf00      	nop
 8005acc:	bd80      	pop	{r7, pc}
 8005ace:	bf00      	nop
 8005ad0:	20000748 	.word	0x20000748

08005ad4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005ad8:	4802      	ldr	r0, [pc, #8]	; (8005ae4 <DMA1_Stream3_IRQHandler+0x10>)
 8005ada:	f002 f8f3 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005ade:	bf00      	nop
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	bf00      	nop
 8005ae4:	200007a8 	.word	0x200007a8

08005ae8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005aec:	4802      	ldr	r0, [pc, #8]	; (8005af8 <DMA1_Stream5_IRQHandler+0x10>)
 8005aee:	f002 f8e9 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005af2:	bf00      	nop
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	200006e8 	.word	0x200006e8

08005afc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005b00:	4803      	ldr	r0, [pc, #12]	; (8005b10 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005b02:	f006 fd71 	bl	800c5e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005b06:	4803      	ldr	r0, [pc, #12]	; (8005b14 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005b08:	f006 fd6e 	bl	800c5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005b0c:	bf00      	nop
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000538 	.word	0x20000538
 8005b14:	20000610 	.word	0x20000610

08005b18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005b1c:	4802      	ldr	r0, [pc, #8]	; (8005b28 <USART3_IRQHandler+0x10>)
 8005b1e:	f007 fce9 	bl	800d4f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005b22:	bf00      	nop
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200006a0 	.word	0x200006a0

08005b2c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8005b30:	4802      	ldr	r0, [pc, #8]	; (8005b3c <SDIO_IRQHandler+0x10>)
 8005b32:	f005 fcc9 	bl	800b4c8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8005b36:	bf00      	nop
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	200003f4 	.word	0x200003f4

08005b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005b44:	4802      	ldr	r0, [pc, #8]	; (8005b50 <TIM6_DAC_IRQHandler+0x10>)
 8005b46:	f006 fd4f 	bl	800c5e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005b4a:	bf00      	nop
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000da8 	.word	0x20000da8

08005b54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b58:	4802      	ldr	r0, [pc, #8]	; (8005b64 <DMA2_Stream0_IRQHandler+0x10>)
 8005b5a:	f002 f8b3 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005b5e:	bf00      	nop
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200002cc 	.word	0x200002cc

08005b68 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8005b6c:	4802      	ldr	r0, [pc, #8]	; (8005b78 <DMA2_Stream3_IRQHandler+0x10>)
 8005b6e:	f002 f8a9 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005b72:	bf00      	nop
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000478 	.word	0x20000478

08005b7c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8005b80:	4802      	ldr	r0, [pc, #8]	; (8005b8c <DMA2_Stream6_IRQHandler+0x10>)
 8005b82:	f002 f89f 	bl	8007cc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005b86:	bf00      	nop
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	200004d8 	.word	0x200004d8

08005b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  return 1;
 8005b94:	2301      	movs	r3, #1
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <_kill>:

int _kill(int pid, int sig)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b082      	sub	sp, #8
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005baa:	f011 fdc3 	bl	8017734 <__errno>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2216      	movs	r2, #22
 8005bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8005bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <_exit>:

void _exit (int status)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff ffe7 	bl	8005ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005bd2:	e7fe      	b.n	8005bd2 <_exit+0x12>

08005bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	60f8      	str	r0, [r7, #12]
 8005bdc:	60b9      	str	r1, [r7, #8]
 8005bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	e00a      	b.n	8005bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005be6:	f3af 8000 	nop.w
 8005bea:	4601      	mov	r1, r0
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	1c5a      	adds	r2, r3, #1
 8005bf0:	60ba      	str	r2, [r7, #8]
 8005bf2:	b2ca      	uxtb	r2, r1
 8005bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	697a      	ldr	r2, [r7, #20]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	dbf0      	blt.n	8005be6 <_read+0x12>
  }

  return len;
 8005c04:	687b      	ldr	r3, [r7, #4]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b086      	sub	sp, #24
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
 8005c1e:	e009      	b.n	8005c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	60ba      	str	r2, [r7, #8]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	3301      	adds	r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	dbf1      	blt.n	8005c20 <_write+0x12>
  }
  return len;
 8005c3c:	687b      	ldr	r3, [r7, #4]
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <_close>:

int _close(int file)
{
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	370c      	adds	r7, #12
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr

08005c7e <_isatty>:

int _isatty(int file)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005c86:	2301      	movs	r3, #1
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b085      	sub	sp, #20
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005cb8:	4a14      	ldr	r2, [pc, #80]	; (8005d0c <_sbrk+0x5c>)
 8005cba:	4b15      	ldr	r3, [pc, #84]	; (8005d10 <_sbrk+0x60>)
 8005cbc:	1ad3      	subs	r3, r2, r3
 8005cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005cc4:	4b13      	ldr	r3, [pc, #76]	; (8005d14 <_sbrk+0x64>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ccc:	4b11      	ldr	r3, [pc, #68]	; (8005d14 <_sbrk+0x64>)
 8005cce:	4a12      	ldr	r2, [pc, #72]	; (8005d18 <_sbrk+0x68>)
 8005cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005cd2:	4b10      	ldr	r3, [pc, #64]	; (8005d14 <_sbrk+0x64>)
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4413      	add	r3, r2
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d207      	bcs.n	8005cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005ce0:	f011 fd28 	bl	8017734 <__errno>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	220c      	movs	r2, #12
 8005ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005cea:	f04f 33ff 	mov.w	r3, #4294967295
 8005cee:	e009      	b.n	8005d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005cf0:	4b08      	ldr	r3, [pc, #32]	; (8005d14 <_sbrk+0x64>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005cf6:	4b07      	ldr	r3, [pc, #28]	; (8005d14 <_sbrk+0x64>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	4a05      	ldr	r2, [pc, #20]	; (8005d14 <_sbrk+0x64>)
 8005d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005d02:	68fb      	ldr	r3, [r7, #12]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3718      	adds	r7, #24
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	20020000 	.word	0x20020000
 8005d10:	00000400 	.word	0x00000400
 8005d14:	20000df0 	.word	0x20000df0
 8005d18:	2000a0c0 	.word	0x2000a0c0

08005d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005d20:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <SystemInit+0x20>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	4a05      	ldr	r2, [pc, #20]	; (8005d3c <SystemInit+0x20>)
 8005d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005d30:	bf00      	nop
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	e000ed00 	.word	0xe000ed00

08005d40 <TM_BKPSRAM_Init>:
 * | along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * |----------------------------------------------------------------------
 */
#include "tm_stm32f4_bkpsram.h"

void TM_BKPSRAM_Init(void) {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
	/* Enable PWR clock */
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <TM_BKPSRAM_Init+0x38>)
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	4a0b      	ldr	r2, [pc, #44]	; (8005d78 <TM_BKPSRAM_Init+0x38>)
 8005d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d4e:	6413      	str	r3, [r2, #64]	; 0x40
	
	/* Enable backup SRAM Clock */
	RCC->AHB1ENR |= RCC_AHB1ENR_BKPSRAMEN;
 8005d50:	4b09      	ldr	r3, [pc, #36]	; (8005d78 <TM_BKPSRAM_Init+0x38>)
 8005d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d54:	4a08      	ldr	r2, [pc, #32]	; (8005d78 <TM_BKPSRAM_Init+0x38>)
 8005d56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d5a:	6313      	str	r3, [r2, #48]	; 0x30
	
	/* Allow access to backup domain */
	HAL_PWR_EnableBkUpAccess();
 8005d5c:	f004 f89c 	bl	8009e98 <HAL_PWR_EnableBkUpAccess>
	
	/* Enable the Backup SRAM low power Regulator */
	/* This will allow data to stay when using VBat mode */
	HAL_PWREx_EnableBkUpReg();
 8005d60:	f004 f8ae 	bl	8009ec0 <HAL_PWREx_EnableBkUpReg>
	
	/* Wait for backup regulator to be ready  */
	while (!(PWR->CSR & (PWR_FLAG_BRR)));
 8005d64:	bf00      	nop
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <TM_BKPSRAM_Init+0x3c>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0f9      	beq.n	8005d66 <TM_BKPSRAM_Init+0x26>
}
 8005d72:	bf00      	nop
 8005d74:	bf00      	nop
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	40023800 	.word	0x40023800
 8005d7c:	40007000 	.word	0x40007000

08005d80 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005d84:	f3bf 8f4f 	dsb	sy
}
 8005d88:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <__NVIC_SystemReset+0x24>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005d92:	4904      	ldr	r1, [pc, #16]	; (8005da4 <__NVIC_SystemReset+0x24>)
 8005d94:	4b04      	ldr	r3, [pc, #16]	; (8005da8 <__NVIC_SystemReset+0x28>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d9a:	f3bf 8f4f 	dsb	sy
}
 8005d9e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <__NVIC_SystemReset+0x20>
 8005da4:	e000ed00 	.word	0xe000ed00
 8005da8:	05fa0004 	.word	0x05fa0004

08005dac <init>:
uint32_t dataadc[2];

char commandbuff[15];

void init()
{
 8005dac:	b598      	push	{r3, r4, r7, lr}
 8005dae:	af00      	add	r7, sp, #0
    strcpy(datatelemetri.state, "LAUNCH_WAIT");
 8005db0:	4a25      	ldr	r2, [pc, #148]	; (8005e48 <init+0x9c>)
 8005db2:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <init+0xa0>)
 8005db4:	4614      	mov	r4, r2
 8005db6:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005db8:	6020      	str	r0, [r4, #0]
 8005dba:	6061      	str	r1, [r4, #4]
 8005dbc:	60a2      	str	r2, [r4, #8]
    READRAM();
 8005dbe:	f000 f861 	bl	8005e84 <READRAM>
    datatelemetri.fmode = 'F';
 8005dc2:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <init+0xa4>)
 8005dc4:	2246      	movs	r2, #70	; 0x46
 8005dc6:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
    strcpy(datatelemetri.echocmd, "CXON");
 8005dca:	4b22      	ldr	r3, [pc, #136]	; (8005e54 <init+0xa8>)
 8005dcc:	4a22      	ldr	r2, [pc, #136]	; (8005e58 <init+0xac>)
 8005dce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dd2:	6018      	str	r0, [r3, #0]
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	7019      	strb	r1, [r3, #0]
    gpslat = 0.0000;
 8005dd8:	4b20      	ldr	r3, [pc, #128]	; (8005e5c <init+0xb0>)
 8005dda:	f04f 0200 	mov.w	r2, #0
 8005dde:	601a      	str	r2, [r3, #0]
    gpslong = 0.0000;
 8005de0:	4b1f      	ldr	r3, [pc, #124]	; (8005e60 <init+0xb4>)
 8005de2:	f04f 0200 	mov.w	r2, #0
 8005de6:	601a      	str	r2, [r3, #0]
    gpsalt = 0.0;
 8005de8:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <init+0xb8>)
 8005dea:	f04f 0200 	mov.w	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
    gpssat = 0;
 8005df0:	4b1d      	ldr	r3, [pc, #116]	; (8005e68 <init+0xbc>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
    strcpy(gpsjam, "00");
 8005df6:	4b1d      	ldr	r3, [pc, #116]	; (8005e6c <init+0xc0>)
 8005df8:	4a1d      	ldr	r2, [pc, #116]	; (8005e70 <init+0xc4>)
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	4611      	mov	r1, r2
 8005dfe:	8019      	strh	r1, [r3, #0]
 8005e00:	3302      	adds	r3, #2
 8005e02:	0c12      	lsrs	r2, r2, #16
 8005e04:	701a      	strb	r2, [r3, #0]
    strcpy(gpsmenit, "00");
 8005e06:	4b1b      	ldr	r3, [pc, #108]	; (8005e74 <init+0xc8>)
 8005e08:	4a19      	ldr	r2, [pc, #100]	; (8005e70 <init+0xc4>)
 8005e0a:	6812      	ldr	r2, [r2, #0]
 8005e0c:	4611      	mov	r1, r2
 8005e0e:	8019      	strh	r1, [r3, #0]
 8005e10:	3302      	adds	r3, #2
 8005e12:	0c12      	lsrs	r2, r2, #16
 8005e14:	701a      	strb	r2, [r3, #0]
    strcpy(gpsdetik, "00");
 8005e16:	4b18      	ldr	r3, [pc, #96]	; (8005e78 <init+0xcc>)
 8005e18:	4a15      	ldr	r2, [pc, #84]	; (8005e70 <init+0xc4>)
 8005e1a:	6812      	ldr	r2, [r2, #0]
 8005e1c:	4611      	mov	r1, r2
 8005e1e:	8019      	strh	r1, [r3, #0]
 8005e20:	3302      	adds	r3, #2
 8005e22:	0c12      	lsrs	r2, r2, #16
 8005e24:	701a      	strb	r2, [r3, #0]
    servogerak(&htim3, TIM_CHANNEL_1, 0);
 8005e26:	2200      	movs	r2, #0
 8005e28:	2100      	movs	r1, #0
 8005e2a:	4814      	ldr	r0, [pc, #80]	; (8005e7c <init+0xd0>)
 8005e2c:	f7ff f870 	bl	8004f10 <servogerak>
	servogerak(&htim3, TIM_CHANNEL_3, 0);
 8005e30:	2200      	movs	r2, #0
 8005e32:	2108      	movs	r1, #8
 8005e34:	4811      	ldr	r0, [pc, #68]	; (8005e7c <init+0xd0>)
 8005e36:	f7ff f86b 	bl	8004f10 <servogerak>
    servogerak(&htim4, TIM_CHANNEL_1, 0);
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	4810      	ldr	r0, [pc, #64]	; (8005e80 <init+0xd4>)
 8005e40:	f7ff f866 	bl	8004f10 <servogerak>
}
 8005e44:	bf00      	nop
 8005e46:	bd98      	pop	{r3, r4, r7, pc}
 8005e48:	20000f5b 	.word	0x20000f5b
 8005e4c:	0801b280 	.word	0x0801b280
 8005e50:	20000df8 	.word	0x20000df8
 8005e54:	20000f98 	.word	0x20000f98
 8005e58:	0801b28c 	.word	0x0801b28c
 8005e5c:	200010f0 	.word	0x200010f0
 8005e60:	200010f4 	.word	0x200010f4
 8005e64:	200010f8 	.word	0x200010f8
 8005e68:	200010fc 	.word	0x200010fc
 8005e6c:	20001108 	.word	0x20001108
 8005e70:	0801b294 	.word	0x0801b294
 8005e74:	20001104 	.word	0x20001104
 8005e78:	20001100 	.word	0x20001100
 8005e7c:	20000580 	.word	0x20000580
 8005e80:	200005c8 	.word	0x200005c8

08005e84 <READRAM>:

void READRAM()
{
 8005e84:	b4b0      	push	{r4, r5, r7}
 8005e86:	af00      	add	r7, sp, #0
    counting = TM_BKPSRAM_Read16(PACKETCOUNT_ADR);
 8005e88:	4b31      	ldr	r3, [pc, #196]	; (8005f50 <READRAM+0xcc>)
 8005e8a:	881b      	ldrh	r3, [r3, #0]
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <READRAM+0xd0>)
 8005e90:	801a      	strh	r2, [r3, #0]
    switch(TM_BKPSRAM_Read8(STATEIND_ADR))
 8005e92:	4b31      	ldr	r3, [pc, #196]	; (8005f58 <READRAM+0xd4>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d83b      	bhi.n	8005f14 <READRAM+0x90>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <READRAM+0x20>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08005eb9 	.word	0x08005eb9
 8005ea8:	08005ecb 	.word	0x08005ecb
 8005eac:	08005ee3 	.word	0x08005ee3
 8005eb0:	08005eef 	.word	0x08005eef
 8005eb4:	08005f03 	.word	0x08005f03
    {
		case 0:
			strcpy(datatelemetri.state, "ASCENT");
 8005eb8:	4b28      	ldr	r3, [pc, #160]	; (8005f5c <READRAM+0xd8>)
 8005eba:	4a29      	ldr	r2, [pc, #164]	; (8005f60 <READRAM+0xdc>)
 8005ebc:	6810      	ldr	r0, [r2, #0]
 8005ebe:	6018      	str	r0, [r3, #0]
 8005ec0:	8891      	ldrh	r1, [r2, #4]
 8005ec2:	7992      	ldrb	r2, [r2, #6]
 8005ec4:	8099      	strh	r1, [r3, #4]
 8005ec6:	719a      	strb	r2, [r3, #6]
			break;
 8005ec8:	e024      	b.n	8005f14 <READRAM+0x90>
		case 1:
			strcpy(datatelemetri.state, "ROCKET_SEPARATION");
 8005eca:	4a24      	ldr	r2, [pc, #144]	; (8005f5c <READRAM+0xd8>)
 8005ecc:	4b25      	ldr	r3, [pc, #148]	; (8005f64 <READRAM+0xe0>)
 8005ece:	4615      	mov	r5, r2
 8005ed0:	461c      	mov	r4, r3
 8005ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ed4:	6028      	str	r0, [r5, #0]
 8005ed6:	6069      	str	r1, [r5, #4]
 8005ed8:	60aa      	str	r2, [r5, #8]
 8005eda:	60eb      	str	r3, [r5, #12]
 8005edc:	8823      	ldrh	r3, [r4, #0]
 8005ede:	822b      	strh	r3, [r5, #16]
			break;
 8005ee0:	e018      	b.n	8005f14 <READRAM+0x90>
		case 2:
			strcpy(datatelemetri.state, "DESCENT");
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	; (8005f5c <READRAM+0xd8>)
 8005ee4:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <READRAM+0xe4>)
 8005ee6:	cb03      	ldmia	r3!, {r0, r1}
 8005ee8:	6010      	str	r0, [r2, #0]
 8005eea:	6051      	str	r1, [r2, #4]
			break;
 8005eec:	e012      	b.n	8005f14 <READRAM+0x90>
		case 3:
			strcpy(datatelemetri.state, "HS_RELEASE");
 8005eee:	4a1b      	ldr	r2, [pc, #108]	; (8005f5c <READRAM+0xd8>)
 8005ef0:	4b1e      	ldr	r3, [pc, #120]	; (8005f6c <READRAM+0xe8>)
 8005ef2:	cb03      	ldmia	r3!, {r0, r1}
 8005ef4:	6010      	str	r0, [r2, #0]
 8005ef6:	6051      	str	r1, [r2, #4]
 8005ef8:	8819      	ldrh	r1, [r3, #0]
 8005efa:	789b      	ldrb	r3, [r3, #2]
 8005efc:	8111      	strh	r1, [r2, #8]
 8005efe:	7293      	strb	r3, [r2, #10]
			break;
 8005f00:	e008      	b.n	8005f14 <READRAM+0x90>
		case 4:
			strcpy(datatelemetri.state, "LANDED");
 8005f02:	4b16      	ldr	r3, [pc, #88]	; (8005f5c <READRAM+0xd8>)
 8005f04:	4a1a      	ldr	r2, [pc, #104]	; (8005f70 <READRAM+0xec>)
 8005f06:	6810      	ldr	r0, [r2, #0]
 8005f08:	6018      	str	r0, [r3, #0]
 8005f0a:	8891      	ldrh	r1, [r2, #4]
 8005f0c:	7992      	ldrb	r2, [r2, #6]
 8005f0e:	8099      	strh	r1, [r3, #4]
 8005f10:	719a      	strb	r2, [r3, #6]
			break;
 8005f12:	bf00      	nop
    }
    refalt = TM_BKPSRAM_ReadFloat(REFALT_ADR);
 8005f14:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <READRAM+0xf0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a17      	ldr	r2, [pc, #92]	; (8005f78 <READRAM+0xf4>)
 8005f1a:	6013      	str	r3, [r2, #0]
    cansatState = TM_BKPSRAM_Read8(STATEIND_ADR);
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <READRAM+0xd4>)
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	4b16      	ldr	r3, [pc, #88]	; (8005f7c <READRAM+0xf8>)
 8005f24:	701a      	strb	r2, [r3, #0]
    flagtel = TM_BKPSRAM_Read8(FLAGTEL_ADR);
 8005f26:	4b16      	ldr	r3, [pc, #88]	; (8005f80 <READRAM+0xfc>)
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	4b15      	ldr	r3, [pc, #84]	; (8005f84 <READRAM+0x100>)
 8005f2e:	701a      	strb	r2, [r3, #0]
    datatelemetri.hsdeploy = TM_BKPSRAM_Read8(HSDEPLOY_ADR);
 8005f30:	4b15      	ldr	r3, [pc, #84]	; (8005f88 <READRAM+0x104>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4b15      	ldr	r3, [pc, #84]	; (8005f8c <READRAM+0x108>)
 8005f38:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    datatelemetri.pcdeploy = TM_BKPSRAM_Read8(PCDEPLOY_ADR);
 8005f3c:	4b14      	ldr	r3, [pc, #80]	; (8005f90 <READRAM+0x10c>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <READRAM+0x108>)
 8005f44:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
}
 8005f48:	bf00      	nop
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bcb0      	pop	{r4, r5, r7}
 8005f4e:	4770      	bx	lr
 8005f50:	40024000 	.word	0x40024000
 8005f54:	20000010 	.word	0x20000010
 8005f58:	40024096 	.word	0x40024096
 8005f5c:	20000f5b 	.word	0x20000f5b
 8005f60:	0801b298 	.word	0x0801b298
 8005f64:	0801b2a0 	.word	0x0801b2a0
 8005f68:	0801b2b4 	.word	0x0801b2b4
 8005f6c:	0801b2bc 	.word	0x0801b2bc
 8005f70:	0801b2c8 	.word	0x0801b2c8
 8005f74:	40024032 	.word	0x40024032
 8005f78:	20000fb8 	.word	0x20000fb8
 8005f7c:	2000027f 	.word	0x2000027f
 8005f80:	400240c8 	.word	0x400240c8
 8005f84:	20000df4 	.word	0x20000df4
 8005f88:	400240fa 	.word	0x400240fa
 8005f8c:	20000df8 	.word	0x20000df8
 8005f90:	4002412c 	.word	0x4002412c

08005f94 <RESETSRAM>:

void RESETSRAM()
{
 8005f94:	b480      	push	{r7}
 8005f96:	af00      	add	r7, sp, #0
    TM_BKPSRAM_Write16(PACKETCOUNT_ADR, counting);
 8005f98:	4b0d      	ldr	r3, [pc, #52]	; (8005fd0 <RESETSRAM+0x3c>)
 8005f9a:	4a0e      	ldr	r2, [pc, #56]	; (8005fd4 <RESETSRAM+0x40>)
 8005f9c:	8812      	ldrh	r2, [r2, #0]
 8005f9e:	801a      	strh	r2, [r3, #0]
    TM_BKPSRAM_WriteFloat(REFALT_ADR, refalt);
 8005fa0:	4a0d      	ldr	r2, [pc, #52]	; (8005fd8 <RESETSRAM+0x44>)
 8005fa2:	4b0e      	ldr	r3, [pc, #56]	; (8005fdc <RESETSRAM+0x48>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6013      	str	r3, [r2, #0]
    TM_BKPSRAM_Write8(STATEIND_ADR, (uint8_t)cansatState);
 8005fa8:	4b0d      	ldr	r3, [pc, #52]	; (8005fe0 <RESETSRAM+0x4c>)
 8005faa:	4a0e      	ldr	r2, [pc, #56]	; (8005fe4 <RESETSRAM+0x50>)
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	701a      	strb	r2, [r3, #0]
    TM_BKPSRAM_Write8(HSDEPLOY_ADR, datatelemetri.hsdeploy);
 8005fb0:	4b0d      	ldr	r3, [pc, #52]	; (8005fe8 <RESETSRAM+0x54>)
 8005fb2:	4a0e      	ldr	r2, [pc, #56]	; (8005fec <RESETSRAM+0x58>)
 8005fb4:	f892 2180 	ldrb.w	r2, [r2, #384]	; 0x180
 8005fb8:	701a      	strb	r2, [r3, #0]
    TM_BKPSRAM_Write8(PCDEPLOY_ADR, datatelemetri.pcdeploy);
 8005fba:	4b0d      	ldr	r3, [pc, #52]	; (8005ff0 <RESETSRAM+0x5c>)
 8005fbc:	4a0b      	ldr	r2, [pc, #44]	; (8005fec <RESETSRAM+0x58>)
 8005fbe:	f892 2181 	ldrb.w	r2, [r2, #385]	; 0x181
 8005fc2:	701a      	strb	r2, [r3, #0]
}
 8005fc4:	bf00      	nop
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	40024000 	.word	0x40024000
 8005fd4:	20000010 	.word	0x20000010
 8005fd8:	40024032 	.word	0x40024032
 8005fdc:	20000fb8 	.word	0x20000fb8
 8005fe0:	40024096 	.word	0x40024096
 8005fe4:	2000027f 	.word	0x2000027f
 8005fe8:	400240fa 	.word	0x400240fa
 8005fec:	20000df8 	.word	0x20000df8
 8005ff0:	4002412c 	.word	0x4002412c

08005ff4 <adcinit>:

void adcinit()
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
	// Air speed calibration
	uint32_t adc_data = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]
	HAL_ADC_Start(&hadc1);
 8005ffe:	4833      	ldr	r0, [pc, #204]	; (80060cc <adcinit+0xd8>)
 8006000:	f000 fe84 	bl	8006d0c <HAL_ADC_Start>
	for (int i = 0; i < VELOCITY_OFFSET_SIZE; ++i)
 8006004:	2300      	movs	r3, #0
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e015      	b.n	8006036 <adcinit+0x42>
	{
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800600a:	f04f 31ff 	mov.w	r1, #4294967295
 800600e:	482f      	ldr	r0, [pc, #188]	; (80060cc <adcinit+0xd8>)
 8006010:	f000 ff81 	bl	8006f16 <HAL_ADC_PollForConversion>
		adc_data = HAL_ADC_GetValue(&hadc1);
 8006014:	482d      	ldr	r0, [pc, #180]	; (80060cc <adcinit+0xd8>)
 8006016:	f001 f919 	bl	800724c <HAL_ADC_GetValue>
 800601a:	6138      	str	r0, [r7, #16]
		velocity_offset += adc_data - 2048;
 800601c:	4b2c      	ldr	r3, [pc, #176]	; (80060d0 <adcinit+0xdc>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	461a      	mov	r2, r3
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	4413      	add	r3, r2
 8006026:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800602a:	461a      	mov	r2, r3
 800602c:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <adcinit+0xdc>)
 800602e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < VELOCITY_OFFSET_SIZE; ++i)
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	3301      	adds	r3, #1
 8006034:	617b      	str	r3, [r7, #20]
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	2b13      	cmp	r3, #19
 800603a:	dde6      	ble.n	800600a <adcinit+0x16>
	}
	HAL_ADC_Stop(&hadc1);
 800603c:	4823      	ldr	r0, [pc, #140]	; (80060cc <adcinit+0xd8>)
 800603e:	f000 ff37 	bl	8006eb0 <HAL_ADC_Stop>
	velocity_offset /= VELOCITY_OFFSET_SIZE;
 8006042:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <adcinit+0xdc>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a23      	ldr	r2, [pc, #140]	; (80060d4 <adcinit+0xe0>)
 8006048:	fb82 1203 	smull	r1, r2, r2, r3
 800604c:	10d2      	asrs	r2, r2, #3
 800604e:	17db      	asrs	r3, r3, #31
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	4a1f      	ldr	r2, [pc, #124]	; (80060d0 <adcinit+0xdc>)
 8006054:	6013      	str	r3, [r2, #0]

	// Reinitialize ADC for multiple channel reading
	ADC_ChannelConfTypeDef sConfig = {0};
 8006056:	463b      	mov	r3, r7
 8006058:	2200      	movs	r2, #0
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	605a      	str	r2, [r3, #4]
 800605e:	609a      	str	r2, [r3, #8]
 8006060:	60da      	str	r2, [r3, #12]

	hadc1.Init.NbrOfConversion = 2;
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <adcinit+0xd8>)
 8006064:	2202      	movs	r2, #2
 8006066:	61da      	str	r2, [r3, #28]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006068:	4818      	ldr	r0, [pc, #96]	; (80060cc <adcinit+0xd8>)
 800606a:	f000 fe0b 	bl	8006c84 <HAL_ADC_Init>
 800606e:	4603      	mov	r3, r0
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <adcinit+0x84>
	{
		Error_Handler();
 8006074:	f7fe fc24 	bl	80048c0 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_9;
 8006078:	2309      	movs	r3, #9
 800607a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800607c:	2301      	movs	r3, #1
 800607e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8006080:	2305      	movs	r3, #5
 8006082:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006084:	463b      	mov	r3, r7
 8006086:	4619      	mov	r1, r3
 8006088:	4810      	ldr	r0, [pc, #64]	; (80060cc <adcinit+0xd8>)
 800608a:	f001 f901 	bl	8007290 <HAL_ADC_ConfigChannel>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <adcinit+0xa4>
	{
		Error_Handler();
 8006094:	f7fe fc14 	bl	80048c0 <Error_Handler>
	}

	sConfig.Channel = ADC_CHANNEL_10;
 8006098:	230a      	movs	r3, #10
 800609a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 800609c:	2302      	movs	r3, #2
 800609e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80060a0:	2307      	movs	r3, #7
 80060a2:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80060a4:	463b      	mov	r3, r7
 80060a6:	4619      	mov	r1, r3
 80060a8:	4808      	ldr	r0, [pc, #32]	; (80060cc <adcinit+0xd8>)
 80060aa:	f001 f8f1 	bl	8007290 <HAL_ADC_ConfigChannel>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <adcinit+0xc4>
	{
		Error_Handler();
 80060b4:	f7fe fc04 	bl	80048c0 <Error_Handler>
	}

	// Start ADC DMA
	HAL_ADC_Start_DMA(&hadc1, dataadc, 2);
 80060b8:	2202      	movs	r2, #2
 80060ba:	4907      	ldr	r1, [pc, #28]	; (80060d8 <adcinit+0xe4>)
 80060bc:	4803      	ldr	r0, [pc, #12]	; (80060cc <adcinit+0xd8>)
 80060be:	f000 ffb5 	bl	800702c <HAL_ADC_Start_DMA>
}
 80060c2:	bf00      	nop
 80060c4:	3718      	adds	r7, #24
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	20000284 	.word	0x20000284
 80060d0:	20001124 	.word	0x20001124
 80060d4:	66666667 	.word	0x66666667
 80060d8:	2000112c 	.word	0x2000112c

080060dc <bno055_init>:

void bno055_init()
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
    bno055_assignI2C(&hi2c2);
 80060e0:	4817      	ldr	r0, [pc, #92]	; (8006140 <bno055_init+0x64>)
 80060e2:	f7fc fbaf 	bl	8002844 <bno055_assignI2C>
    bno055_setup();
 80060e6:	f7fc fc49 	bl	800297c <bno055_setup>
    bno055_setOperationModeNDOF();
 80060ea:	f7fc fc34 	bl	8002956 <bno055_setOperationModeNDOF>
//			bno055_setCalibrationData(calData);
//			break;
//		}
//    }

    osDelay(500);
 80060ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80060f2:	f00c f80e 	bl	8012112 <osDelay>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 80060f6:	2200      	movs	r2, #0
 80060f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80060fc:	4811      	ldr	r0, [pc, #68]	; (8006144 <bno055_init+0x68>)
 80060fe:	f002 f9f3 	bl	80084e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8006102:	2200      	movs	r2, #0
 8006104:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006108:	480e      	ldr	r0, [pc, #56]	; (8006144 <bno055_init+0x68>)
 800610a:	f002 f9ed 	bl	80084e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800610e:	2200      	movs	r2, #0
 8006110:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006114:	480b      	ldr	r0, [pc, #44]	; (8006144 <bno055_init+0x68>)
 8006116:	f002 f9e7 	bl	80084e8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 800611a:	2200      	movs	r2, #0
 800611c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006120:	4808      	ldr	r0, [pc, #32]	; (8006144 <bno055_init+0x68>)
 8006122:	f002 f9e1 	bl	80084e8 <HAL_GPIO_WritePin>
    osDelay(500);
 8006126:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800612a:	f00b fff2 	bl	8012112 <osDelay>

    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 800612e:	2201      	movs	r2, #1
 8006130:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006134:	4803      	ldr	r0, [pc, #12]	; (8006144 <bno055_init+0x68>)
 8006136:	f002 f9d7 	bl	80084e8 <HAL_GPIO_WritePin>
}
 800613a:	bf00      	nop
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	2000032c 	.word	0x2000032c
 8006144:	40021000 	.word	0x40021000

08006148 <gpsinit>:

void gpsinit()
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
	lwgps_init(&gps);
 800614c:	4804      	ldr	r0, [pc, #16]	; (8006160 <gpsinit+0x18>)
 800614e:	f7fc fa03 	bl	8002558 <lwgps_init>
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxgps, sizeof(rxgps));
 8006152:	2280      	movs	r2, #128	; 0x80
 8006154:	4903      	ldr	r1, [pc, #12]	; (8006164 <gpsinit+0x1c>)
 8006156:	4804      	ldr	r0, [pc, #16]	; (8006168 <gpsinit+0x20>)
 8006158:	f007 f9a6 	bl	800d4a8 <HAL_UART_Receive_DMA>
}
 800615c:	bf00      	nop
 800615e:	bd80      	pop	{r7, pc}
 8006160:	20000fc0 	.word	0x20000fc0
 8006164:	20001070 	.word	0x20001070
 8006168:	20000658 	.word	0x20000658

0800616c <parsegpsdata>:

void parsegpsdata()
{
 800616c:	b580      	push	{r7, lr}
 800616e:	af00      	add	r7, sp, #0
	if (lwgps_process(&gps, rxgps, strlen(rxgps)))
 8006170:	480b      	ldr	r0, [pc, #44]	; (80061a0 <parsegpsdata+0x34>)
 8006172:	f7fa f87d 	bl	8000270 <strlen>
 8006176:	4603      	mov	r3, r0
 8006178:	461a      	mov	r2, r3
 800617a:	4909      	ldr	r1, [pc, #36]	; (80061a0 <parsegpsdata+0x34>)
 800617c:	4809      	ldr	r0, [pc, #36]	; (80061a4 <parsegpsdata+0x38>)
 800617e:	f7fc f9f9 	bl	8002574 <lwgps_process>
 8006182:	4603      	mov	r3, r0
 8006184:	2b00      	cmp	r3, #0
 8006186:	d004      	beq.n	8006192 <parsegpsdata+0x26>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8006188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800618c:	4806      	ldr	r0, [pc, #24]	; (80061a8 <parsegpsdata+0x3c>)
 800618e:	f002 f9c4 	bl	800851a <HAL_GPIO_TogglePin>
	HAL_UART_Receive_DMA(&huart2, (uint8_t *)rxgps, sizeof(rxgps));
 8006192:	2280      	movs	r2, #128	; 0x80
 8006194:	4902      	ldr	r1, [pc, #8]	; (80061a0 <parsegpsdata+0x34>)
 8006196:	4805      	ldr	r0, [pc, #20]	; (80061ac <parsegpsdata+0x40>)
 8006198:	f007 f986 	bl	800d4a8 <HAL_UART_Receive_DMA>
}
 800619c:	bf00      	nop
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	20001070 	.word	0x20001070
 80061a4:	20000fc0 	.word	0x20000fc0
 80061a8:	40021000 	.word	0x40021000
 80061ac:	20000658 	.word	0x20000658

080061b0 <ADC_measure>:

void ADC_measure()
{
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
	adc_avg = 0;
 80061b6:	4b8c      	ldr	r3, [pc, #560]	; (80063e8 <ADC_measure+0x238>)
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
	 * 
	 * NOTE: R1 is 10k, R2 is 4k7 and the battery voltage is 8.4 V
	 * here we use 2.69 as ADC_Ref since the highest possible output of
	 * voltage divider is ± 2.68 V while the actual ADC_Ref voltage is 3.3 V
	 */
	float sum = 0;
 80061be:	f04f 0300 	mov.w	r3, #0
 80061c2:	607b      	str	r3, [r7, #4]
	readings[ind_] = ((2.68 / 3333.5) * dataadc[0]) * (14.7 / 4.7);
 80061c4:	4b89      	ldr	r3, [pc, #548]	; (80063ec <ADC_measure+0x23c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fa f99b 	bl	8000504 <__aeabi_ui2d>
 80061ce:	a37c      	add	r3, pc, #496	; (adr r3, 80063c0 <ADC_measure+0x210>)
 80061d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d4:	f7fa fa10 	bl	80005f8 <__aeabi_dmul>
 80061d8:	4602      	mov	r2, r0
 80061da:	460b      	mov	r3, r1
 80061dc:	4610      	mov	r0, r2
 80061de:	4619      	mov	r1, r3
 80061e0:	a379      	add	r3, pc, #484	; (adr r3, 80063c8 <ADC_measure+0x218>)
 80061e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061e6:	f7fa fa07 	bl	80005f8 <__aeabi_dmul>
 80061ea:	4602      	mov	r2, r0
 80061ec:	460b      	mov	r3, r1
 80061ee:	4980      	ldr	r1, [pc, #512]	; (80063f0 <ADC_measure+0x240>)
 80061f0:	680c      	ldr	r4, [r1, #0]
 80061f2:	4610      	mov	r0, r2
 80061f4:	4619      	mov	r1, r3
 80061f6:	f7fa fcf7 	bl	8000be8 <__aeabi_d2f>
 80061fa:	4602      	mov	r2, r0
 80061fc:	497d      	ldr	r1, [pc, #500]	; (80063f4 <ADC_measure+0x244>)
 80061fe:	00a3      	lsls	r3, r4, #2
 8006200:	440b      	add	r3, r1
 8006202:	601a      	str	r2, [r3, #0]
	ind_ = (ind_ + 1) % FILTER_SIZE;
 8006204:	4b7a      	ldr	r3, [pc, #488]	; (80063f0 <ADC_measure+0x240>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	4b7b      	ldr	r3, [pc, #492]	; (80063f8 <ADC_measure+0x248>)
 800620c:	fb83 2301 	smull	r2, r3, r3, r1
 8006210:	105a      	asrs	r2, r3, #1
 8006212:	17cb      	asrs	r3, r1, #31
 8006214:	1ad2      	subs	r2, r2, r3
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	1aca      	subs	r2, r1, r3
 800621e:	4b74      	ldr	r3, [pc, #464]	; (80063f0 <ADC_measure+0x240>)
 8006220:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < FILTER_SIZE; i++)
 8006222:	2300      	movs	r3, #0
 8006224:	603b      	str	r3, [r7, #0]
 8006226:	e01f      	b.n	8006268 <ADC_measure+0xb8>
	{
		sum += readings[i];
 8006228:	4a72      	ldr	r2, [pc, #456]	; (80063f4 <ADC_measure+0x244>)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	4413      	add	r3, r2
 8006230:	edd3 7a00 	vldr	s15, [r3]
 8006234:	ed97 7a01 	vldr	s14, [r7, #4]
 8006238:	ee77 7a27 	vadd.f32	s15, s14, s15
 800623c:	edc7 7a01 	vstr	s15, [r7, #4]
		adc_avg += dataadc[1] - velocity_offset;
 8006240:	4b6a      	ldr	r3, [pc, #424]	; (80063ec <ADC_measure+0x23c>)
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a6d      	ldr	r2, [pc, #436]	; (80063fc <ADC_measure+0x24c>)
 8006246:	6812      	ldr	r2, [r2, #0]
 8006248:	1a9b      	subs	r3, r3, r2
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006252:	4b65      	ldr	r3, [pc, #404]	; (80063e8 <ADC_measure+0x238>)
 8006254:	edd3 7a00 	vldr	s15, [r3]
 8006258:	ee77 7a27 	vadd.f32	s15, s14, s15
 800625c:	4b62      	ldr	r3, [pc, #392]	; (80063e8 <ADC_measure+0x238>)
 800625e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < FILTER_SIZE; i++)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	3301      	adds	r3, #1
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	2b04      	cmp	r3, #4
 800626c:	dddc      	ble.n	8006228 <ADC_measure+0x78>
	}
	datatelemetri.voltage = sum / FILTER_SIZE;
 800626e:	ed97 7a01 	vldr	s14, [r7, #4]
 8006272:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8006276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800627a:	4b61      	ldr	r3, [pc, #388]	; (8006400 <ADC_measure+0x250>)
 800627c:	edc3 7a62 	vstr	s15, [r3, #392]	; 0x188
	adc_avg /= FILTER_SIZE;
 8006280:	4b59      	ldr	r3, [pc, #356]	; (80063e8 <ADC_measure+0x238>)
 8006282:	ed93 7a00 	vldr	s14, [r3]
 8006286:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800628a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800628e:	4b56      	ldr	r3, [pc, #344]	; (80063e8 <ADC_measure+0x238>)
 8006290:	edc3 7a00 	vstr	s15, [r3]
	 *
	 * Indicated Airspeed (IAS) in m/s, Air density (RHO) = 1.204
	 * v = sqrt(2 * P / RHO)
	 * v = sqrt(10000 * (Vout / Vs - 0.5) / RHO)
	 */
	if (adc_avg >= (2048 - ZERO_SPAN) && adc_avg <= (2048 + ZERO_SPAN))
 8006294:	4b54      	ldr	r3, [pc, #336]	; (80063e8 <ADC_measure+0x238>)
 8006296:	edd3 7a00 	vldr	s15, [r3]
 800629a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8006404 <ADC_measure+0x254>
 800629e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062a6:	db0f      	blt.n	80062c8 <ADC_measure+0x118>
 80062a8:	4b4f      	ldr	r3, [pc, #316]	; (80063e8 <ADC_measure+0x238>)
 80062aa:	edd3 7a00 	vldr	s15, [r3]
 80062ae:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8006408 <ADC_measure+0x258>
 80062b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	d805      	bhi.n	80062c8 <ADC_measure+0x118>
	{
		datatelemetri.airspeed = 0;
 80062bc:	4b50      	ldr	r3, [pc, #320]	; (8006400 <ADC_measure+0x250>)
 80062be:	f04f 0200 	mov.w	r2, #0
 80062c2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
		else
		{
			datatelemetri.airspeed = sqrtf((10000.0 * (adc_avg / 4096.0 - 0.5)) / RHO);
		}
	}
}
 80062c6:	e074      	b.n	80063b2 <ADC_measure+0x202>
		if (adc_avg < 2048 - ZERO_SPAN)
 80062c8:	4b47      	ldr	r3, [pc, #284]	; (80063e8 <ADC_measure+0x238>)
 80062ca:	edd3 7a00 	vldr	s15, [r3]
 80062ce:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8006404 <ADC_measure+0x254>
 80062d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80062d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062da:	d535      	bpl.n	8006348 <ADC_measure+0x198>
			datatelemetri.airspeed = sqrtf((-10000.0 * (adc_avg / 4096.0 - 0.5)) / RHO);
 80062dc:	4b42      	ldr	r3, [pc, #264]	; (80063e8 <ADC_measure+0x238>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fa f931 	bl	8000548 <__aeabi_f2d>
 80062e6:	f04f 0200 	mov.w	r2, #0
 80062ea:	4b48      	ldr	r3, [pc, #288]	; (800640c <ADC_measure+0x25c>)
 80062ec:	f7fa faae 	bl	800084c <__aeabi_ddiv>
 80062f0:	4602      	mov	r2, r0
 80062f2:	460b      	mov	r3, r1
 80062f4:	4610      	mov	r0, r2
 80062f6:	4619      	mov	r1, r3
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	4b44      	ldr	r3, [pc, #272]	; (8006410 <ADC_measure+0x260>)
 80062fe:	f7f9 ffc3 	bl	8000288 <__aeabi_dsub>
 8006302:	4602      	mov	r2, r0
 8006304:	460b      	mov	r3, r1
 8006306:	4610      	mov	r0, r2
 8006308:	4619      	mov	r1, r3
 800630a:	a331      	add	r3, pc, #196	; (adr r3, 80063d0 <ADC_measure+0x220>)
 800630c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006310:	f7fa f972 	bl	80005f8 <__aeabi_dmul>
 8006314:	4602      	mov	r2, r0
 8006316:	460b      	mov	r3, r1
 8006318:	4610      	mov	r0, r2
 800631a:	4619      	mov	r1, r3
 800631c:	a32e      	add	r3, pc, #184	; (adr r3, 80063d8 <ADC_measure+0x228>)
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f7fa fa93 	bl	800084c <__aeabi_ddiv>
 8006326:	4602      	mov	r2, r0
 8006328:	460b      	mov	r3, r1
 800632a:	4610      	mov	r0, r2
 800632c:	4619      	mov	r1, r3
 800632e:	f7fa fc5b 	bl	8000be8 <__aeabi_d2f>
 8006332:	4603      	mov	r3, r0
 8006334:	ee00 3a10 	vmov	s0, r3
 8006338:	f013 ffa6 	bl	801a288 <sqrtf>
 800633c:	eef0 7a40 	vmov.f32	s15, s0
 8006340:	4b2f      	ldr	r3, [pc, #188]	; (8006400 <ADC_measure+0x250>)
 8006342:	edc3 7a63 	vstr	s15, [r3, #396]	; 0x18c
}
 8006346:	e034      	b.n	80063b2 <ADC_measure+0x202>
			datatelemetri.airspeed = sqrtf((10000.0 * (adc_avg / 4096.0 - 0.5)) / RHO);
 8006348:	4b27      	ldr	r3, [pc, #156]	; (80063e8 <ADC_measure+0x238>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4618      	mov	r0, r3
 800634e:	f7fa f8fb 	bl	8000548 <__aeabi_f2d>
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	4b2d      	ldr	r3, [pc, #180]	; (800640c <ADC_measure+0x25c>)
 8006358:	f7fa fa78 	bl	800084c <__aeabi_ddiv>
 800635c:	4602      	mov	r2, r0
 800635e:	460b      	mov	r3, r1
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	f04f 0200 	mov.w	r2, #0
 8006368:	4b29      	ldr	r3, [pc, #164]	; (8006410 <ADC_measure+0x260>)
 800636a:	f7f9 ff8d 	bl	8000288 <__aeabi_dsub>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4610      	mov	r0, r2
 8006374:	4619      	mov	r1, r3
 8006376:	a31a      	add	r3, pc, #104	; (adr r3, 80063e0 <ADC_measure+0x230>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f7fa f93c 	bl	80005f8 <__aeabi_dmul>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4610      	mov	r0, r2
 8006386:	4619      	mov	r1, r3
 8006388:	a313      	add	r3, pc, #76	; (adr r3, 80063d8 <ADC_measure+0x228>)
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f7fa fa5d 	bl	800084c <__aeabi_ddiv>
 8006392:	4602      	mov	r2, r0
 8006394:	460b      	mov	r3, r1
 8006396:	4610      	mov	r0, r2
 8006398:	4619      	mov	r1, r3
 800639a:	f7fa fc25 	bl	8000be8 <__aeabi_d2f>
 800639e:	4603      	mov	r3, r0
 80063a0:	ee00 3a10 	vmov	s0, r3
 80063a4:	f013 ff70 	bl	801a288 <sqrtf>
 80063a8:	eef0 7a40 	vmov.f32	s15, s0
 80063ac:	4b14      	ldr	r3, [pc, #80]	; (8006400 <ADC_measure+0x250>)
 80063ae:	edc3 7a63 	vstr	s15, [r3, #396]	; 0x18c
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd90      	pop	{r4, r7, pc}
 80063ba:	bf00      	nop
 80063bc:	f3af 8000 	nop.w
 80063c0:	87498522 	.word	0x87498522
 80063c4:	3f4a581a 	.word	0x3f4a581a
 80063c8:	620ae4c3 	.word	0x620ae4c3
 80063cc:	40090572 	.word	0x40090572
 80063d0:	00000000 	.word	0x00000000
 80063d4:	c0c38800 	.word	0xc0c38800
 80063d8:	9999999a 	.word	0x9999999a
 80063dc:	3ff39999 	.word	0x3ff39999
 80063e0:	00000000 	.word	0x00000000
 80063e4:	40c38800 	.word	0x40c38800
 80063e8:	20001128 	.word	0x20001128
 80063ec:	2000112c 	.word	0x2000112c
 80063f0:	20001120 	.word	0x20001120
 80063f4:	2000110c 	.word	0x2000110c
 80063f8:	66666667 	.word	0x66666667
 80063fc:	20001124 	.word	0x20001124
 8006400:	20000df8 	.word	0x20000df8
 8006404:	44fe2000 	.word	0x44fe2000
 8006408:	4500f000 	.word	0x4500f000
 800640c:	40b00000 	.word	0x40b00000
 8006410:	3fe00000 	.word	0x3fe00000

08006414 <buatcs>:

uint8_t buatcs(char dat_[])
{
 8006414:	b480      	push	{r7}
 8006416:	b087      	sub	sp, #28
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
    uint8_t hasil = 0, temp = 0;
 800641c:	2300      	movs	r3, #0
 800641e:	73fb      	strb	r3, [r7, #15]
 8006420:	2300      	movs	r3, #0
 8006422:	73bb      	strb	r3, [r7, #14]
    uint16_t buffhasil = 0;
 8006424:	2300      	movs	r3, #0
 8006426:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < sizeof(datatelemetri.telemetritotal); i++)
 8006428:	2300      	movs	r3, #0
 800642a:	613b      	str	r3, [r7, #16]
 800642c:	e010      	b.n	8006450 <buatcs+0x3c>
    {
        if (dat_[i]== '\0')
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00e      	beq.n	8006458 <buatcs+0x44>
        {
            break;
        }
        else
        {
            buffhasil += dat_[i];
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	4413      	add	r3, r2
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	b29a      	uxth	r2, r3
 8006444:	8afb      	ldrh	r3, [r7, #22]
 8006446:	4413      	add	r3, r2
 8006448:	82fb      	strh	r3, [r7, #22]
    for (int i = 0; i < sizeof(datatelemetri.telemetritotal); i++)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	3301      	adds	r3, #1
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	2bae      	cmp	r3, #174	; 0xae
 8006454:	d9eb      	bls.n	800642e <buatcs+0x1a>
 8006456:	e000      	b.n	800645a <buatcs+0x46>
            break;
 8006458:	bf00      	nop
        }
    }
    hasil = buffhasil;
 800645a:	8afb      	ldrh	r3, [r7, #22]
 800645c:	73fb      	strb	r3, [r7, #15]
    temp = buffhasil >> 8;
 800645e:	8afb      	ldrh	r3, [r7, #22]
 8006460:	0a1b      	lsrs	r3, r3, #8
 8006462:	b29b      	uxth	r3, r3
 8006464:	73bb      	strb	r3, [r7, #14]
    hasil += temp;
 8006466:	7bfa      	ldrb	r2, [r7, #15]
 8006468:	7bbb      	ldrb	r3, [r7, #14]
 800646a:	4413      	add	r3, r2
 800646c:	73fb      	strb	r3, [r7, #15]
    return hasil;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006470:	4618      	mov	r0, r3
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	0000      	movs	r0, r0
	...

08006480 <pressuretoalt>:

float pressuretoalt(float press)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b084      	sub	sp, #16
 8006484:	af00      	add	r7, sp, #0
 8006486:	ed87 0a01 	vstr	s0, [r7, #4]
    float hasil;
    if (press != 0)
 800648a:	edd7 7a01 	vldr	s15, [r7, #4]
 800648e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006496:	d02c      	beq.n	80064f2 <pressuretoalt+0x72>
    {
    	hasil = 44330.0 * (1.0 - pow((press / 1013.25), 1 / 5.255));
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7fa f855 	bl	8000548 <__aeabi_f2d>
 800649e:	a31f      	add	r3, pc, #124	; (adr r3, 800651c <pressuretoalt+0x9c>)
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f9d2 	bl	800084c <__aeabi_ddiv>
 80064a8:	4602      	mov	r2, r0
 80064aa:	460b      	mov	r3, r1
 80064ac:	ec43 2b17 	vmov	d7, r2, r3
 80064b0:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8006508 <pressuretoalt+0x88>
 80064b4:	eeb0 0a47 	vmov.f32	s0, s14
 80064b8:	eef0 0a67 	vmov.f32	s1, s15
 80064bc:	f013 fe74 	bl	801a1a8 <pow>
 80064c0:	ec53 2b10 	vmov	r2, r3, d0
 80064c4:	f04f 0000 	mov.w	r0, #0
 80064c8:	4913      	ldr	r1, [pc, #76]	; (8006518 <pressuretoalt+0x98>)
 80064ca:	f7f9 fedd 	bl	8000288 <__aeabi_dsub>
 80064ce:	4602      	mov	r2, r0
 80064d0:	460b      	mov	r3, r1
 80064d2:	4610      	mov	r0, r2
 80064d4:	4619      	mov	r1, r3
 80064d6:	a30e      	add	r3, pc, #56	; (adr r3, 8006510 <pressuretoalt+0x90>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	f7fa f88c 	bl	80005f8 <__aeabi_dmul>
 80064e0:	4602      	mov	r2, r0
 80064e2:	460b      	mov	r3, r1
 80064e4:	4610      	mov	r0, r2
 80064e6:	4619      	mov	r1, r3
 80064e8:	f7fa fb7e 	bl	8000be8 <__aeabi_d2f>
 80064ec:	4603      	mov	r3, r0
 80064ee:	60fb      	str	r3, [r7, #12]
 80064f0:	e002      	b.n	80064f8 <pressuretoalt+0x78>
    }
    else
    {
    	hasil = 0;
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	60fb      	str	r3, [r7, #12]
    }
    return hasil;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	ee07 3a90 	vmov	s15, r3
}
 80064fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	ccd9456c 	.word	0xccd9456c
 800650c:	3fc85b95 	.word	0x3fc85b95
 8006510:	00000000 	.word	0x00000000
 8006514:	40e5a540 	.word	0x40e5a540
 8006518:	3ff00000 	.word	0x3ff00000
 800651c:	00000000 	.word	0x00000000
 8006520:	408faa00 	.word	0x408faa00

08006524 <wakturtc>:

void wakturtc(uint8_t timebuff, char datat[])
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	4603      	mov	r3, r0
 800652c:	6039      	str	r1, [r7, #0]
 800652e:	71fb      	strb	r3, [r7, #7]
    if (timebuff < 10)
 8006530:	79fb      	ldrb	r3, [r7, #7]
 8006532:	2b09      	cmp	r3, #9
 8006534:	d806      	bhi.n	8006544 <wakturtc+0x20>
    {
    	sprintf(datat,"0%d",timebuff);
 8006536:	79fb      	ldrb	r3, [r7, #7]
 8006538:	461a      	mov	r2, r3
 800653a:	4907      	ldr	r1, [pc, #28]	; (8006558 <wakturtc+0x34>)
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f010 ffdb 	bl	80174f8 <siprintf>
    }
    else
    {
    	sprintf(datat,"%d",timebuff);
    }
}
 8006542:	e005      	b.n	8006550 <wakturtc+0x2c>
    	sprintf(datat,"%d",timebuff);
 8006544:	79fb      	ldrb	r3, [r7, #7]
 8006546:	461a      	mov	r2, r3
 8006548:	4904      	ldr	r1, [pc, #16]	; (800655c <wakturtc+0x38>)
 800654a:	6838      	ldr	r0, [r7, #0]
 800654c:	f010 ffd4 	bl	80174f8 <siprintf>
}
 8006550:	bf00      	nop
 8006552:	3708      	adds	r7, #8
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	0801b2d0 	.word	0x0801b2d0
 800655c:	0801b2d4 	.word	0x0801b2d4

08006560 <Settime>:

void Settime(uint8_t jam_, uint8_t menit_, uint8_t detik_)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	4603      	mov	r3, r0
 8006568:	71fb      	strb	r3, [r7, #7]
 800656a:	460b      	mov	r3, r1
 800656c:	71bb      	strb	r3, [r7, #6]
 800656e:	4613      	mov	r3, r2
 8006570:	717b      	strb	r3, [r7, #5]
    RTC_TimeTypeDef sTime = {0};
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	2200      	movs	r2, #0
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	605a      	str	r2, [r3, #4]
 800657c:	609a      	str	r2, [r3, #8]
 800657e:	60da      	str	r2, [r3, #12]
 8006580:	611a      	str	r2, [r3, #16]

    sTime.Hours = jam_;
 8006582:	79fb      	ldrb	r3, [r7, #7]
 8006584:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = menit_;
 8006586:	79bb      	ldrb	r3, [r7, #6]
 8006588:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = detik_;
 800658a:	797b      	ldrb	r3, [r7, #5]
 800658c:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800658e:	2300      	movs	r3, #0
 8006590:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006592:	2300      	movs	r3, #0
 8006594:	61fb      	str	r3, [r7, #28]

    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8006596:	f107 030c 	add.w	r3, r7, #12
 800659a:	2200      	movs	r2, #0
 800659c:	4619      	mov	r1, r3
 800659e:	4809      	ldr	r0, [pc, #36]	; (80065c4 <Settime+0x64>)
 80065a0:	f004 fae3 	bl	800ab6a <HAL_RTC_SetTime>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <Settime+0x4e>
    {
    	Error_Handler();
 80065aa:	f7fe f989 	bl	80048c0 <Error_Handler>
    }

    HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, 0x32F2);
 80065ae:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80065b2:	2101      	movs	r1, #1
 80065b4:	4803      	ldr	r0, [pc, #12]	; (80065c4 <Settime+0x64>)
 80065b6:	f004 fcdd 	bl	800af74 <HAL_RTCEx_BKUPWrite>
}
 80065ba:	bf00      	nop
 80065bc:	3720      	adds	r7, #32
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	200003d4 	.word	0x200003d4

080065c8 <rtcbackup>:

void rtcbackup()
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
    if (HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1)!= 0x32F2)
 80065cc:	2101      	movs	r1, #1
 80065ce:	4807      	ldr	r0, [pc, #28]	; (80065ec <rtcbackup+0x24>)
 80065d0:	f004 fcea 	bl	800afa8 <HAL_RTCEx_BKUPRead>
 80065d4:	4603      	mov	r3, r0
 80065d6:	f243 22f2 	movw	r2, #13042	; 0x32f2
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <rtcbackup+0x20>
    {
    	Settime(0,0,0);
 80065de:	2200      	movs	r2, #0
 80065e0:	2100      	movs	r1, #0
 80065e2:	2000      	movs	r0, #0
 80065e4:	f7ff ffbc 	bl	8006560 <Settime>
    }
}
 80065e8:	bf00      	nop
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	200003d4 	.word	0x200003d4

080065f0 <CX>:

void CX()
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
    isidata(4, commandbuff);
 80065f4:	4920      	ldr	r1, [pc, #128]	; (8006678 <CX+0x88>)
 80065f6:	2004      	movs	r0, #4
 80065f8:	f7fc fbf0 	bl	8002ddc <isidata>
    if ((commandbuff[0] == 'O') && (commandbuff[1] == 'N'))
 80065fc:	4b1e      	ldr	r3, [pc, #120]	; (8006678 <CX+0x88>)
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b4f      	cmp	r3, #79	; 0x4f
 8006602:	d113      	bne.n	800662c <CX+0x3c>
 8006604:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <CX+0x88>)
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b4e      	cmp	r3, #78	; 0x4e
 800660a:	d10f      	bne.n	800662c <CX+0x3c>
    {
    	osSemaphoreRelease(telemetrySemaphoreHandle);
 800660c:	4b1b      	ldr	r3, [pc, #108]	; (800667c <CX+0x8c>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f00b fe75 	bl	8012300 <osSemaphoreRelease>
    	flagtel = 1;
 8006616:	4b1a      	ldr	r3, [pc, #104]	; (8006680 <CX+0x90>)
 8006618:	2201      	movs	r2, #1
 800661a:	701a      	strb	r2, [r3, #0]
		strcpy(datatelemetri.echocmd, "CXON");
 800661c:	4b19      	ldr	r3, [pc, #100]	; (8006684 <CX+0x94>)
 800661e:	4a1a      	ldr	r2, [pc, #104]	; (8006688 <CX+0x98>)
 8006620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006624:	6018      	str	r0, [r3, #0]
 8006626:	3304      	adds	r3, #4
 8006628:	7019      	strb	r1, [r3, #0]
 800662a:	e01e      	b.n	800666a <CX+0x7a>
    }
    else if ((commandbuff[0] == 'O') && (commandbuff[1] == 'F'))
 800662c:	4b12      	ldr	r3, [pc, #72]	; (8006678 <CX+0x88>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b4f      	cmp	r3, #79	; 0x4f
 8006632:	d11a      	bne.n	800666a <CX+0x7a>
 8006634:	4b10      	ldr	r3, [pc, #64]	; (8006678 <CX+0x88>)
 8006636:	785b      	ldrb	r3, [r3, #1]
 8006638:	2b46      	cmp	r3, #70	; 0x46
 800663a:	d116      	bne.n	800666a <CX+0x7a>
    {
    	HAL_GPIO_WritePin(LED4_GPIO_Port, LED4_Pin, RESET);
 800663c:	2200      	movs	r2, #0
 800663e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006642:	4812      	ldr	r0, [pc, #72]	; (800668c <CX+0x9c>)
 8006644:	f001 ff50 	bl	80084e8 <HAL_GPIO_WritePin>
    	osSemaphoreAcquire(telemetrySemaphoreHandle, osWaitForever);
 8006648:	4b0c      	ldr	r3, [pc, #48]	; (800667c <CX+0x8c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f04f 31ff 	mov.w	r1, #4294967295
 8006650:	4618      	mov	r0, r3
 8006652:	f00b fe03 	bl	801225c <osSemaphoreAcquire>
		flagtel = 0;
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <CX+0x90>)
 8006658:	2200      	movs	r2, #0
 800665a:	701a      	strb	r2, [r3, #0]
		strcpy(datatelemetri.echocmd, "CXOFF");
 800665c:	4b09      	ldr	r3, [pc, #36]	; (8006684 <CX+0x94>)
 800665e:	4a0c      	ldr	r2, [pc, #48]	; (8006690 <CX+0xa0>)
 8006660:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006664:	6018      	str	r0, [r3, #0]
 8006666:	3304      	adds	r3, #4
 8006668:	8019      	strh	r1, [r3, #0]
    }
	TM_BKPSRAM_Write8(FLAGTEL_ADR, flagtel);
 800666a:	4b0a      	ldr	r3, [pc, #40]	; (8006694 <CX+0xa4>)
 800666c:	4a04      	ldr	r2, [pc, #16]	; (8006680 <CX+0x90>)
 800666e:	7812      	ldrb	r2, [r2, #0]
 8006670:	701a      	strb	r2, [r3, #0]
}
 8006672:	bf00      	nop
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20001134 	.word	0x20001134
 800667c:	20000838 	.word	0x20000838
 8006680:	20000df4 	.word	0x20000df4
 8006684:	20000f98 	.word	0x20000f98
 8006688:	0801b28c 	.word	0x0801b28c
 800668c:	40021000 	.word	0x40021000
 8006690:	0801b2d8 	.word	0x0801b2d8
 8006694:	400240c8 	.word	0x400240c8

08006698 <CAL>:

void CAL()
{
 8006698:	b598      	push	{r3, r4, r7, lr}
 800669a:	af00      	add	r7, sp, #0
    if (flagsim == 0)
 800669c:	4b2d      	ldr	r3, [pc, #180]	; (8006754 <CAL+0xbc>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10f      	bne.n	80066c4 <CAL+0x2c>
    {
    	refalt = pressuretoalt(Pressure / 100);
 80066a4:	4b2c      	ldr	r3, [pc, #176]	; (8006758 <CAL+0xc0>)
 80066a6:	edd3 7a00 	vldr	s15, [r3]
 80066aa:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800675c <CAL+0xc4>
 80066ae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80066b2:	eeb0 0a47 	vmov.f32	s0, s14
 80066b6:	f7ff fee3 	bl	8006480 <pressuretoalt>
 80066ba:	eef0 7a40 	vmov.f32	s15, s0
 80066be:	4b28      	ldr	r3, [pc, #160]	; (8006760 <CAL+0xc8>)
 80066c0:	edc3 7a00 	vstr	s15, [r3]
    }
    flagsim = 0;
 80066c4:	4b23      	ldr	r3, [pc, #140]	; (8006754 <CAL+0xbc>)
 80066c6:	2200      	movs	r2, #0
 80066c8:	701a      	strb	r2, [r3, #0]
    flagrefalt = 0;
 80066ca:	4b26      	ldr	r3, [pc, #152]	; (8006764 <CAL+0xcc>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
    counting  = 0;
 80066d0:	4b25      	ldr	r3, [pc, #148]	; (8006768 <CAL+0xd0>)
 80066d2:	2200      	movs	r2, #0
 80066d4:	801a      	strh	r2, [r3, #0]
    datatelemetri.packetcount = counting;
 80066d6:	4b24      	ldr	r3, [pc, #144]	; (8006768 <CAL+0xd0>)
 80066d8:	881a      	ldrh	r2, [r3, #0]
 80066da:	4b24      	ldr	r3, [pc, #144]	; (800676c <CAL+0xd4>)
 80066dc:	f8a3 2160 	strh.w	r2, [r3, #352]	; 0x160
    datatelemetri.hsdeploy = 'N';
 80066e0:	4b22      	ldr	r3, [pc, #136]	; (800676c <CAL+0xd4>)
 80066e2:	224e      	movs	r2, #78	; 0x4e
 80066e4:	f883 2180 	strb.w	r2, [r3, #384]	; 0x180
    datatelemetri.pcdeploy = 'N';
 80066e8:	4b20      	ldr	r3, [pc, #128]	; (800676c <CAL+0xd4>)
 80066ea:	224e      	movs	r2, #78	; 0x4e
 80066ec:	f883 2181 	strb.w	r2, [r3, #385]	; 0x181
    cansatState = LAUNCH_WAIT;
 80066f0:	4b1f      	ldr	r3, [pc, #124]	; (8006770 <CAL+0xd8>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	701a      	strb	r2, [r3, #0]
    strcpy(datatelemetri.state, "LAUNCH_WAIT");
 80066f6:	4a1f      	ldr	r2, [pc, #124]	; (8006774 <CAL+0xdc>)
 80066f8:	4b1f      	ldr	r3, [pc, #124]	; (8006778 <CAL+0xe0>)
 80066fa:	4614      	mov	r4, r2
 80066fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80066fe:	6020      	str	r0, [r4, #0]
 8006700:	6061      	str	r1, [r4, #4]
 8006702:	60a2      	str	r2, [r4, #8]
    strcpy(datatelemetri.echocmd, "CAL");
 8006704:	4b1d      	ldr	r3, [pc, #116]	; (800677c <CAL+0xe4>)
 8006706:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <CAL+0xe8>)
 8006708:	601a      	str	r2, [r3, #0]

    RESETSRAM();
 800670a:	f7ff fc43 	bl	8005f94 <RESETSRAM>

    HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 800670e:	2200      	movs	r2, #0
 8006710:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006714:	481b      	ldr	r0, [pc, #108]	; (8006784 <CAL+0xec>)
 8006716:	f001 fee7 	bl	80084e8 <HAL_GPIO_WritePin>
    resetPosition(0);
 800671a:	2000      	movs	r0, #0
 800671c:	f7fc f862 	bl	80027e4 <resetPosition>
	resetCumulativePosition(0);
 8006720:	2000      	movs	r0, #0
 8006722:	f7fc f873 	bl	800280c <resetCumulativePosition>
	TIM1->CCR2 = 0;
 8006726:	4b18      	ldr	r3, [pc, #96]	; (8006788 <CAL+0xf0>)
 8006728:	2200      	movs	r2, #0
 800672a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800672c:	4b16      	ldr	r3, [pc, #88]	; (8006788 <CAL+0xf0>)
 800672e:	2200      	movs	r2, #0
 8006730:	63da      	str	r2, [r3, #60]	; 0x3c
    servogerak(&htim3, TIM_CHANNEL_1, 0);
 8006732:	2200      	movs	r2, #0
 8006734:	2100      	movs	r1, #0
 8006736:	4815      	ldr	r0, [pc, #84]	; (800678c <CAL+0xf4>)
 8006738:	f7fe fbea 	bl	8004f10 <servogerak>
	servogerak(&htim3, TIM_CHANNEL_3, 0);
 800673c:	2200      	movs	r2, #0
 800673e:	2108      	movs	r1, #8
 8006740:	4812      	ldr	r0, [pc, #72]	; (800678c <CAL+0xf4>)
 8006742:	f7fe fbe5 	bl	8004f10 <servogerak>
    servogerak(&htim4, TIM_CHANNEL_1, 0);
 8006746:	2200      	movs	r2, #0
 8006748:	2100      	movs	r1, #0
 800674a:	4811      	ldr	r0, [pc, #68]	; (8006790 <CAL+0xf8>)
 800674c:	f7fe fbe0 	bl	8004f10 <servogerak>
}
 8006750:	bf00      	nop
 8006752:	bd98      	pop	{r3, r4, r7, pc}
 8006754:	20000df5 	.word	0x20000df5
 8006758:	20000fb0 	.word	0x20000fb0
 800675c:	42c80000 	.word	0x42c80000
 8006760:	20000fb8 	.word	0x20000fb8
 8006764:	20000fa8 	.word	0x20000fa8
 8006768:	20000010 	.word	0x20000010
 800676c:	20000df8 	.word	0x20000df8
 8006770:	2000027f 	.word	0x2000027f
 8006774:	20000f5b 	.word	0x20000f5b
 8006778:	0801b280 	.word	0x0801b280
 800677c:	20000f98 	.word	0x20000f98
 8006780:	004c4143 	.word	0x004c4143
 8006784:	40020400 	.word	0x40020400
 8006788:	40010000 	.word	0x40010000
 800678c:	20000580 	.word	0x20000580
 8006790:	200005c8 	.word	0x200005c8

08006794 <ST>:

void ST()
{
 8006794:	b5b0      	push	{r4, r5, r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af04      	add	r7, sp, #16
    isidata(4, commandbuff);
 800679a:	4941      	ldr	r1, [pc, #260]	; (80068a0 <ST+0x10c>)
 800679c:	2004      	movs	r0, #4
 800679e:	f7fc fb1d 	bl	8002ddc <isidata>
    uint8_t bufjam, bufmenit, bufdetik;
    char bufjam_[3], bufmenit_[3], bufdetik_[3];
    if (commandbuff[0] == 'G')
 80067a2:	4b3f      	ldr	r3, [pc, #252]	; (80068a0 <ST+0x10c>)
 80067a4:	781b      	ldrb	r3, [r3, #0]
 80067a6:	2b47      	cmp	r3, #71	; 0x47
 80067a8:	d11c      	bne.n	80067e4 <ST+0x50>
    {
		bufjam = (uint8_t)atoi(gpsjam);
 80067aa:	483e      	ldr	r0, [pc, #248]	; (80068a4 <ST+0x110>)
 80067ac:	f00f fad1 	bl	8015d52 <atoi>
 80067b0:	4603      	mov	r3, r0
 80067b2:	73fb      	strb	r3, [r7, #15]
		bufmenit = (uint8_t)atoi(gpsmenit);
 80067b4:	483c      	ldr	r0, [pc, #240]	; (80068a8 <ST+0x114>)
 80067b6:	f00f facc 	bl	8015d52 <atoi>
 80067ba:	4603      	mov	r3, r0
 80067bc:	73bb      	strb	r3, [r7, #14]
		bufdetik = (uint8_t)atoi(gpsdetik);
 80067be:	483b      	ldr	r0, [pc, #236]	; (80068ac <ST+0x118>)
 80067c0:	f00f fac7 	bl	8015d52 <atoi>
 80067c4:	4603      	mov	r3, r0
 80067c6:	737b      	strb	r3, [r7, #13]
		Settime(bufjam, bufmenit, bufdetik);
 80067c8:	7b7a      	ldrb	r2, [r7, #13]
 80067ca:	7bb9      	ldrb	r1, [r7, #14]
 80067cc:	7bfb      	ldrb	r3, [r7, #15]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fec6 	bl	8006560 <Settime>
		strcpy(datatelemetri.echocmd, "STGPS");
 80067d4:	4b36      	ldr	r3, [pc, #216]	; (80068b0 <ST+0x11c>)
 80067d6:	4a37      	ldr	r2, [pc, #220]	; (80068b4 <ST+0x120>)
 80067d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80067dc:	6018      	str	r0, [r3, #0]
 80067de:	3304      	adds	r3, #4
 80067e0:	8019      	strh	r1, [r3, #0]
		wakturtc(bufjam, bufjam_);
		wakturtc(bufmenit, bufmenit_);
		wakturtc(bufdetik, bufdetik_);
		sprintf(datatelemetri.echocmd, "ST%c%c:%c%c:%c%c", bufjam_[0], bufjam_[1], bufmenit_[0], bufmenit_[1], bufdetik_[0], bufdetik_[1]);
    }
}
 80067e2:	e059      	b.n	8006898 <ST+0x104>
		sprintf(bufjam_, "%c%c", commandbuff[0], commandbuff[1]);
 80067e4:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <ST+0x10c>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	461a      	mov	r2, r3
 80067ea:	4b2d      	ldr	r3, [pc, #180]	; (80068a0 <ST+0x10c>)
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	f107 0008 	add.w	r0, r7, #8
 80067f2:	4931      	ldr	r1, [pc, #196]	; (80068b8 <ST+0x124>)
 80067f4:	f010 fe80 	bl	80174f8 <siprintf>
		bufjam = (uint8_t)atoi(bufjam_);
 80067f8:	f107 0308 	add.w	r3, r7, #8
 80067fc:	4618      	mov	r0, r3
 80067fe:	f00f faa8 	bl	8015d52 <atoi>
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
		sprintf(bufmenit_, "%c%c", commandbuff[3], commandbuff[4]);
 8006806:	4b26      	ldr	r3, [pc, #152]	; (80068a0 <ST+0x10c>)
 8006808:	78db      	ldrb	r3, [r3, #3]
 800680a:	461a      	mov	r2, r3
 800680c:	4b24      	ldr	r3, [pc, #144]	; (80068a0 <ST+0x10c>)
 800680e:	791b      	ldrb	r3, [r3, #4]
 8006810:	1d38      	adds	r0, r7, #4
 8006812:	4929      	ldr	r1, [pc, #164]	; (80068b8 <ST+0x124>)
 8006814:	f010 fe70 	bl	80174f8 <siprintf>
		bufmenit = (uint8_t)atoi(bufmenit_);
 8006818:	1d3b      	adds	r3, r7, #4
 800681a:	4618      	mov	r0, r3
 800681c:	f00f fa99 	bl	8015d52 <atoi>
 8006820:	4603      	mov	r3, r0
 8006822:	73bb      	strb	r3, [r7, #14]
		sprintf(bufdetik_, "%c%c", commandbuff[6], commandbuff[7]);
 8006824:	4b1e      	ldr	r3, [pc, #120]	; (80068a0 <ST+0x10c>)
 8006826:	799b      	ldrb	r3, [r3, #6]
 8006828:	461a      	mov	r2, r3
 800682a:	4b1d      	ldr	r3, [pc, #116]	; (80068a0 <ST+0x10c>)
 800682c:	79db      	ldrb	r3, [r3, #7]
 800682e:	4638      	mov	r0, r7
 8006830:	4921      	ldr	r1, [pc, #132]	; (80068b8 <ST+0x124>)
 8006832:	f010 fe61 	bl	80174f8 <siprintf>
		bufdetik = (uint8_t)atoi(bufdetik_);
 8006836:	463b      	mov	r3, r7
 8006838:	4618      	mov	r0, r3
 800683a:	f00f fa8a 	bl	8015d52 <atoi>
 800683e:	4603      	mov	r3, r0
 8006840:	737b      	strb	r3, [r7, #13]
		Settime(bufjam, bufmenit, bufdetik);
 8006842:	7b7a      	ldrb	r2, [r7, #13]
 8006844:	7bb9      	ldrb	r1, [r7, #14]
 8006846:	7bfb      	ldrb	r3, [r7, #15]
 8006848:	4618      	mov	r0, r3
 800684a:	f7ff fe89 	bl	8006560 <Settime>
		wakturtc(bufjam, bufjam_);
 800684e:	f107 0208 	add.w	r2, r7, #8
 8006852:	7bfb      	ldrb	r3, [r7, #15]
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f7ff fe64 	bl	8006524 <wakturtc>
		wakturtc(bufmenit, bufmenit_);
 800685c:	1d3a      	adds	r2, r7, #4
 800685e:	7bbb      	ldrb	r3, [r7, #14]
 8006860:	4611      	mov	r1, r2
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fe5e 	bl	8006524 <wakturtc>
		wakturtc(bufdetik, bufdetik_);
 8006868:	463a      	mov	r2, r7
 800686a:	7b7b      	ldrb	r3, [r7, #13]
 800686c:	4611      	mov	r1, r2
 800686e:	4618      	mov	r0, r3
 8006870:	f7ff fe58 	bl	8006524 <wakturtc>
		sprintf(datatelemetri.echocmd, "ST%c%c:%c%c:%c%c", bufjam_[0], bufjam_[1], bufmenit_[0], bufmenit_[1], bufdetik_[0], bufdetik_[1]);
 8006874:	7a3b      	ldrb	r3, [r7, #8]
 8006876:	461c      	mov	r4, r3
 8006878:	7a7b      	ldrb	r3, [r7, #9]
 800687a:	461d      	mov	r5, r3
 800687c:	793b      	ldrb	r3, [r7, #4]
 800687e:	797a      	ldrb	r2, [r7, #5]
 8006880:	7839      	ldrb	r1, [r7, #0]
 8006882:	7878      	ldrb	r0, [r7, #1]
 8006884:	9003      	str	r0, [sp, #12]
 8006886:	9102      	str	r1, [sp, #8]
 8006888:	9201      	str	r2, [sp, #4]
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	462b      	mov	r3, r5
 800688e:	4622      	mov	r2, r4
 8006890:	490a      	ldr	r1, [pc, #40]	; (80068bc <ST+0x128>)
 8006892:	4807      	ldr	r0, [pc, #28]	; (80068b0 <ST+0x11c>)
 8006894:	f010 fe30 	bl	80174f8 <siprintf>
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bdb0      	pop	{r4, r5, r7, pc}
 80068a0:	20001134 	.word	0x20001134
 80068a4:	20001108 	.word	0x20001108
 80068a8:	20001104 	.word	0x20001104
 80068ac:	20001100 	.word	0x20001100
 80068b0:	20000f98 	.word	0x20000f98
 80068b4:	0801b2e0 	.word	0x0801b2e0
 80068b8:	0801b2e8 	.word	0x0801b2e8
 80068bc:	0801b2f0 	.word	0x0801b2f0

080068c0 <SIM>:

void SIM()
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
    isidata(4, commandbuff);
 80068c4:	4927      	ldr	r1, [pc, #156]	; (8006964 <SIM+0xa4>)
 80068c6:	2004      	movs	r0, #4
 80068c8:	f7fc fa88 	bl	8002ddc <isidata>
    if (flagsim == 0 && commandbuff[0] == 'E' && commandbuff[1] == 'N')
 80068cc:	4b26      	ldr	r3, [pc, #152]	; (8006968 <SIM+0xa8>)
 80068ce:	781b      	ldrb	r3, [r3, #0]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d110      	bne.n	80068f6 <SIM+0x36>
 80068d4:	4b23      	ldr	r3, [pc, #140]	; (8006964 <SIM+0xa4>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b45      	cmp	r3, #69	; 0x45
 80068da:	d10c      	bne.n	80068f6 <SIM+0x36>
 80068dc:	4b21      	ldr	r3, [pc, #132]	; (8006964 <SIM+0xa4>)
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b4e      	cmp	r3, #78	; 0x4e
 80068e2:	d108      	bne.n	80068f6 <SIM+0x36>
    {
		flagsim = 1;
 80068e4:	4b20      	ldr	r3, [pc, #128]	; (8006968 <SIM+0xa8>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	701a      	strb	r2, [r3, #0]
		strcpy(datatelemetri.echocmd, "SIMENABLE");
 80068ea:	4b20      	ldr	r3, [pc, #128]	; (800696c <SIM+0xac>)
 80068ec:	4a20      	ldr	r2, [pc, #128]	; (8006970 <SIM+0xb0>)
 80068ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80068f0:	c303      	stmia	r3!, {r0, r1}
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e033      	b.n	800695e <SIM+0x9e>
    }
    else if (flagsim == 1 && commandbuff[0] == 'A' && commandbuff[1] == 'C')
 80068f6:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <SIM+0xa8>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d114      	bne.n	8006928 <SIM+0x68>
 80068fe:	4b19      	ldr	r3, [pc, #100]	; (8006964 <SIM+0xa4>)
 8006900:	781b      	ldrb	r3, [r3, #0]
 8006902:	2b41      	cmp	r3, #65	; 0x41
 8006904:	d110      	bne.n	8006928 <SIM+0x68>
 8006906:	4b17      	ldr	r3, [pc, #92]	; (8006964 <SIM+0xa4>)
 8006908:	785b      	ldrb	r3, [r3, #1]
 800690a:	2b43      	cmp	r3, #67	; 0x43
 800690c:	d10c      	bne.n	8006928 <SIM+0x68>
    {
		flagsim = 2;
 800690e:	4b16      	ldr	r3, [pc, #88]	; (8006968 <SIM+0xa8>)
 8006910:	2202      	movs	r2, #2
 8006912:	701a      	strb	r2, [r3, #0]
		datatelemetri.fmode = 'S';
 8006914:	4b17      	ldr	r3, [pc, #92]	; (8006974 <SIM+0xb4>)
 8006916:	2253      	movs	r2, #83	; 0x53
 8006918:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		strcpy(datatelemetri.echocmd, "SIMACTIVATE");
 800691c:	4b13      	ldr	r3, [pc, #76]	; (800696c <SIM+0xac>)
 800691e:	4a16      	ldr	r2, [pc, #88]	; (8006978 <SIM+0xb8>)
 8006920:	ca07      	ldmia	r2, {r0, r1, r2}
 8006922:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006926:	e01a      	b.n	800695e <SIM+0x9e>
    }
    else if (commandbuff[0] == 'D' && commandbuff[1] == 'I')
 8006928:	4b0e      	ldr	r3, [pc, #56]	; (8006964 <SIM+0xa4>)
 800692a:	781b      	ldrb	r3, [r3, #0]
 800692c:	2b44      	cmp	r3, #68	; 0x44
 800692e:	d116      	bne.n	800695e <SIM+0x9e>
 8006930:	4b0c      	ldr	r3, [pc, #48]	; (8006964 <SIM+0xa4>)
 8006932:	785b      	ldrb	r3, [r3, #1]
 8006934:	2b49      	cmp	r3, #73	; 0x49
 8006936:	d112      	bne.n	800695e <SIM+0x9e>
    {
		flagrefalt = 0;
 8006938:	4b10      	ldr	r3, [pc, #64]	; (800697c <SIM+0xbc>)
 800693a:	2200      	movs	r2, #0
 800693c:	701a      	strb	r2, [r3, #0]
		flagsim = 0;
 800693e:	4b0a      	ldr	r3, [pc, #40]	; (8006968 <SIM+0xa8>)
 8006940:	2200      	movs	r2, #0
 8006942:	701a      	strb	r2, [r3, #0]
		datatelemetri.fmode = 'F';
 8006944:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <SIM+0xb4>)
 8006946:	2246      	movs	r2, #70	; 0x46
 8006948:	f883 2162 	strb.w	r2, [r3, #354]	; 0x162
		strcpy(datatelemetri.echocmd, "SIMDISABLE");
 800694c:	4b07      	ldr	r3, [pc, #28]	; (800696c <SIM+0xac>)
 800694e:	4a0c      	ldr	r2, [pc, #48]	; (8006980 <SIM+0xc0>)
 8006950:	ca07      	ldmia	r2, {r0, r1, r2}
 8006952:	c303      	stmia	r3!, {r0, r1}
 8006954:	801a      	strh	r2, [r3, #0]
 8006956:	3302      	adds	r3, #2
 8006958:	0c12      	lsrs	r2, r2, #16
 800695a:	701a      	strb	r2, [r3, #0]
    }
}
 800695c:	e7ff      	b.n	800695e <SIM+0x9e>
 800695e:	bf00      	nop
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	20001134 	.word	0x20001134
 8006968:	20000df5 	.word	0x20000df5
 800696c:	20000f98 	.word	0x20000f98
 8006970:	0801b304 	.word	0x0801b304
 8006974:	20000df8 	.word	0x20000df8
 8006978:	0801b310 	.word	0x0801b310
 800697c:	20000fa8 	.word	0x20000fa8
 8006980:	0801b31c 	.word	0x0801b31c

08006984 <SIMP>:

void SIMP()
{
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
    if (flagsim == 2)
 8006988:	4b1b      	ldr	r3, [pc, #108]	; (80069f8 <SIMP+0x74>)
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b02      	cmp	r3, #2
 800698e:	d131      	bne.n	80069f4 <SIMP+0x70>
    {
		isidata(4, commandbuff);
 8006990:	491a      	ldr	r1, [pc, #104]	; (80069fc <SIMP+0x78>)
 8006992:	2004      	movs	r0, #4
 8006994:	f7fc fa22 	bl	8002ddc <isidata>
		Spressure = atof(commandbuff);
 8006998:	4818      	ldr	r0, [pc, #96]	; (80069fc <SIMP+0x78>)
 800699a:	f00f f9d7 	bl	8015d4c <atof>
 800699e:	ec53 2b10 	vmov	r2, r3, d0
 80069a2:	4610      	mov	r0, r2
 80069a4:	4619      	mov	r1, r3
 80069a6:	f7fa f91f 	bl	8000be8 <__aeabi_d2f>
 80069aa:	4603      	mov	r3, r0
 80069ac:	4a14      	ldr	r2, [pc, #80]	; (8006a00 <SIMP+0x7c>)
 80069ae:	6013      	str	r3, [r2, #0]
		sprintf(datatelemetri.echocmd, "SIMP%.2f", Spressure);
 80069b0:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <SIMP+0x7c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7f9 fdc7 	bl	8000548 <__aeabi_f2d>
 80069ba:	4602      	mov	r2, r0
 80069bc:	460b      	mov	r3, r1
 80069be:	4911      	ldr	r1, [pc, #68]	; (8006a04 <SIMP+0x80>)
 80069c0:	4811      	ldr	r0, [pc, #68]	; (8006a08 <SIMP+0x84>)
 80069c2:	f010 fd99 	bl	80174f8 <siprintf>
		if (!flagrefalt)
 80069c6:	4b11      	ldr	r3, [pc, #68]	; (8006a0c <SIMP+0x88>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d112      	bne.n	80069f4 <SIMP+0x70>
		{
			refalt = pressuretoalt(Spressure / 100);
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <SIMP+0x7c>)
 80069d0:	edd3 7a00 	vldr	s15, [r3]
 80069d4:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8006a10 <SIMP+0x8c>
 80069d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80069dc:	eeb0 0a47 	vmov.f32	s0, s14
 80069e0:	f7ff fd4e 	bl	8006480 <pressuretoalt>
 80069e4:	eef0 7a40 	vmov.f32	s15, s0
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <SIMP+0x90>)
 80069ea:	edc3 7a00 	vstr	s15, [r3]
			flagrefalt = 1;
 80069ee:	4b07      	ldr	r3, [pc, #28]	; (8006a0c <SIMP+0x88>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	701a      	strb	r2, [r3, #0]
		}
    }
}
 80069f4:	bf00      	nop
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000df5 	.word	0x20000df5
 80069fc:	20001134 	.word	0x20001134
 8006a00:	20000014 	.word	0x20000014
 8006a04:	0801b328 	.word	0x0801b328
 8006a08:	20000f98 	.word	0x20000f98
 8006a0c:	20000fa8 	.word	0x20000fa8
 8006a10:	42c80000 	.word	0x42c80000
 8006a14:	20000fb8 	.word	0x20000fb8

08006a18 <GB>:

void GB()
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	af00      	add	r7, sp, #0
	isidata(4, commandbuff);
 8006a1c:	4911      	ldr	r1, [pc, #68]	; (8006a64 <GB+0x4c>)
 8006a1e:	2004      	movs	r0, #4
 8006a20:	f7fc f9dc 	bl	8002ddc <isidata>
	if ((commandbuff[0] == 'O') && (commandbuff[1] == 'N'))
 8006a24:	4b0f      	ldr	r3, [pc, #60]	; (8006a64 <GB+0x4c>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	2b4f      	cmp	r3, #79	; 0x4f
 8006a2a:	d109      	bne.n	8006a40 <GB+0x28>
 8006a2c:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <GB+0x4c>)
 8006a2e:	785b      	ldrb	r3, [r3, #1]
 8006a30:	2b4e      	cmp	r3, #78	; 0x4e
 8006a32:	d105      	bne.n	8006a40 <GB+0x28>
	{
		osSemaphoreRelease(gimbalSemaphoreHandle);
 8006a34:	4b0c      	ldr	r3, [pc, #48]	; (8006a68 <GB+0x50>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f00b fc61 	bl	8012300 <osSemaphoreRelease>
	}
	else if ((commandbuff[0] == 'O') && (commandbuff[1] == 'F'))
	{
		osSemaphoreAcquire(gimbalSemaphoreHandle, osWaitForever);
	}
}
 8006a3e:	e00e      	b.n	8006a5e <GB+0x46>
	else if ((commandbuff[0] == 'O') && (commandbuff[1] == 'F'))
 8006a40:	4b08      	ldr	r3, [pc, #32]	; (8006a64 <GB+0x4c>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b4f      	cmp	r3, #79	; 0x4f
 8006a46:	d10a      	bne.n	8006a5e <GB+0x46>
 8006a48:	4b06      	ldr	r3, [pc, #24]	; (8006a64 <GB+0x4c>)
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b46      	cmp	r3, #70	; 0x46
 8006a4e:	d106      	bne.n	8006a5e <GB+0x46>
		osSemaphoreAcquire(gimbalSemaphoreHandle, osWaitForever);
 8006a50:	4b05      	ldr	r3, [pc, #20]	; (8006a68 <GB+0x50>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f04f 31ff 	mov.w	r1, #4294967295
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f00b fbff 	bl	801225c <osSemaphoreAcquire>
}
 8006a5e:	bf00      	nop
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20001134 	.word	0x20001134
 8006a68:	2000083c 	.word	0x2000083c

08006a6c <HS>:

void HS()
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
	servogerak(&htim4, TIM_CHANNEL_1, 135);
 8006a70:	2287      	movs	r2, #135	; 0x87
 8006a72:	2100      	movs	r1, #0
 8006a74:	4802      	ldr	r0, [pc, #8]	; (8006a80 <HS+0x14>)
 8006a76:	f7fe fa4b 	bl	8004f10 <servogerak>
}
 8006a7a:	bf00      	nop
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	200005c8 	.word	0x200005c8

08006a84 <BCN>:

void BCN()
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
    isidata(4, commandbuff);
 8006a88:	4919      	ldr	r1, [pc, #100]	; (8006af0 <BCN+0x6c>)
 8006a8a:	2004      	movs	r0, #4
 8006a8c:	f7fc f9a6 	bl	8002ddc <isidata>
    if ((commandbuff[0] == 'O')&&(commandbuff[1] == 'N'))
 8006a90:	4b17      	ldr	r3, [pc, #92]	; (8006af0 <BCN+0x6c>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b4f      	cmp	r3, #79	; 0x4f
 8006a96:	d111      	bne.n	8006abc <BCN+0x38>
 8006a98:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <BCN+0x6c>)
 8006a9a:	785b      	ldrb	r3, [r3, #1]
 8006a9c:	2b4e      	cmp	r3, #78	; 0x4e
 8006a9e:	d10d      	bne.n	8006abc <BCN+0x38>
    {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, SET);
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006aa6:	4813      	ldr	r0, [pc, #76]	; (8006af4 <BCN+0x70>)
 8006aa8:	f001 fd1e 	bl	80084e8 <HAL_GPIO_WritePin>
		strcpy(datatelemetri.echocmd, "BCNON");
 8006aac:	4b12      	ldr	r3, [pc, #72]	; (8006af8 <BCN+0x74>)
 8006aae:	4a13      	ldr	r2, [pc, #76]	; (8006afc <BCN+0x78>)
 8006ab0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ab4:	6018      	str	r0, [r3, #0]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	8019      	strh	r1, [r3, #0]
    else if ((commandbuff[0] == 'O')&&(commandbuff[1] == 'F'))
    {
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
		strcpy(datatelemetri.echocmd, "BCNOFF");
    }
}
 8006aba:	e017      	b.n	8006aec <BCN+0x68>
    else if ((commandbuff[0] == 'O')&&(commandbuff[1] == 'F'))
 8006abc:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <BCN+0x6c>)
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	2b4f      	cmp	r3, #79	; 0x4f
 8006ac2:	d113      	bne.n	8006aec <BCN+0x68>
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <BCN+0x6c>)
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b46      	cmp	r3, #70	; 0x46
 8006aca:	d10f      	bne.n	8006aec <BCN+0x68>
		HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, RESET);
 8006acc:	2200      	movs	r2, #0
 8006ace:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ad2:	4808      	ldr	r0, [pc, #32]	; (8006af4 <BCN+0x70>)
 8006ad4:	f001 fd08 	bl	80084e8 <HAL_GPIO_WritePin>
		strcpy(datatelemetri.echocmd, "BCNOFF");
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <BCN+0x74>)
 8006ada:	4a09      	ldr	r2, [pc, #36]	; (8006b00 <BCN+0x7c>)
 8006adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ae0:	6018      	str	r0, [r3, #0]
 8006ae2:	3304      	adds	r3, #4
 8006ae4:	8019      	strh	r1, [r3, #0]
 8006ae6:	3302      	adds	r3, #2
 8006ae8:	0c0a      	lsrs	r2, r1, #16
 8006aea:	701a      	strb	r2, [r3, #0]
}
 8006aec:	bf00      	nop
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20001134 	.word	0x20001134
 8006af4:	40020400 	.word	0x40020400
 8006af8:	20000f98 	.word	0x20000f98
 8006afc:	0801b334 	.word	0x0801b334
 8006b00:	0801b33c 	.word	0x0801b33c

08006b04 <CAM>:

void CAM()
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
	isidata(4, commandbuff);
 8006b08:	4911      	ldr	r1, [pc, #68]	; (8006b50 <CAM+0x4c>)
 8006b0a:	2004      	movs	r0, #4
 8006b0c:	f7fc f966 	bl	8002ddc <isidata>
	switch (commandbuff[0])
 8006b10:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <CAM+0x4c>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	2b4f      	cmp	r3, #79	; 0x4f
 8006b16:	d00e      	beq.n	8006b36 <CAM+0x32>
 8006b18:	2b4f      	cmp	r3, #79	; 0x4f
 8006b1a:	dc10      	bgt.n	8006b3e <CAM+0x3a>
 8006b1c:	2b31      	cmp	r3, #49	; 0x31
 8006b1e:	d002      	beq.n	8006b26 <CAM+0x22>
 8006b20:	2b32      	cmp	r3, #50	; 0x32
 8006b22:	d004      	beq.n	8006b2e <CAM+0x2a>
 8006b24:	e00b      	b.n	8006b3e <CAM+0x3a>
	{
		case '1':
			camera = MAIN_CAM;
 8006b26:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <CAM+0x50>)
 8006b28:	2201      	movs	r2, #1
 8006b2a:	701a      	strb	r2, [r3, #0]
			break;
 8006b2c:	e007      	b.n	8006b3e <CAM+0x3a>
		case '2':
			camera = BONUS_CAM;
 8006b2e:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <CAM+0x50>)
 8006b30:	2202      	movs	r2, #2
 8006b32:	701a      	strb	r2, [r3, #0]
			break;
 8006b34:	e003      	b.n	8006b3e <CAM+0x3a>
		case 'O':
			camera = CAM_OFF;
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <CAM+0x50>)
 8006b38:	2203      	movs	r2, #3
 8006b3a:	701a      	strb	r2, [r3, #0]
			break;
 8006b3c:	bf00      	nop
	}
	osThreadFlagsSet(cameraTaskHandle, 1);
 8006b3e:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <CAM+0x54>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	2101      	movs	r1, #1
 8006b44:	4618      	mov	r0, r3
 8006b46:	f00b fa15 	bl	8011f74 <osThreadFlagsSet>
}
 8006b4a:	bf00      	nop
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20001134 	.word	0x20001134
 8006b54:	20000280 	.word	0x20000280
 8006b58:	2000082c 	.word	0x2000082c

08006b5c <CR>:

void CR()
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	af00      	add	r7, sp, #0
    NVIC_SystemReset();
 8006b60:	f7ff f90e 	bl	8005d80 <__NVIC_SystemReset>

08006b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006b9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006b68:	f7ff f8d8 	bl	8005d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006b6c:	480c      	ldr	r0, [pc, #48]	; (8006ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006b6e:	490d      	ldr	r1, [pc, #52]	; (8006ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006b70:	4a0d      	ldr	r2, [pc, #52]	; (8006ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006b74:	e002      	b.n	8006b7c <LoopCopyDataInit>

08006b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006b7a:	3304      	adds	r3, #4

08006b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006b80:	d3f9      	bcc.n	8006b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006b82:	4a0a      	ldr	r2, [pc, #40]	; (8006bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006b84:	4c0a      	ldr	r4, [pc, #40]	; (8006bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006b88:	e001      	b.n	8006b8e <LoopFillZerobss>

08006b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006b8c:	3204      	adds	r2, #4

08006b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006b90:	d3fb      	bcc.n	8006b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006b92:	f010 fdd5 	bl	8017740 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006b96:	f7fc fa19 	bl	8002fcc <main>
  bx  lr    
 8006b9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006b9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006ba4:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8006ba8:	0801ba90 	.word	0x0801ba90
  ldr r2, =_sbss
 8006bac:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8006bb0:	2000a0bc 	.word	0x2000a0bc

08006bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006bb4:	e7fe      	b.n	8006bb4 <ADC_IRQHandler>
	...

08006bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bbc:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <HAL_Init+0x40>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a0d      	ldr	r2, [pc, #52]	; (8006bf8 <HAL_Init+0x40>)
 8006bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bc8:	4b0b      	ldr	r3, [pc, #44]	; (8006bf8 <HAL_Init+0x40>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a0a      	ldr	r2, [pc, #40]	; (8006bf8 <HAL_Init+0x40>)
 8006bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006bd4:	4b08      	ldr	r3, [pc, #32]	; (8006bf8 <HAL_Init+0x40>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a07      	ldr	r2, [pc, #28]	; (8006bf8 <HAL_Init+0x40>)
 8006bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006be0:	2003      	movs	r0, #3
 8006be2:	f000 fea2 	bl	800792a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006be6:	200f      	movs	r0, #15
 8006be8:	f7fe fed8 	bl	800599c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006bec:	f7fe f9f8 	bl	8004fe0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	40023c00 	.word	0x40023c00

08006bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006c00:	4b06      	ldr	r3, [pc, #24]	; (8006c1c <HAL_IncTick+0x20>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	461a      	mov	r2, r3
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_IncTick+0x24>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	4a04      	ldr	r2, [pc, #16]	; (8006c20 <HAL_IncTick+0x24>)
 8006c0e:	6013      	str	r3, [r2, #0]
}
 8006c10:	bf00      	nop
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	2000001c 	.word	0x2000001c
 8006c20:	20001144 	.word	0x20001144

08006c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  return uwTick;
 8006c28:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <HAL_GetTick+0x14>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
 8006c36:	bf00      	nop
 8006c38:	20001144 	.word	0x20001144

08006c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006c44:	f7ff ffee 	bl	8006c24 <HAL_GetTick>
 8006c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c54:	d005      	beq.n	8006c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c56:	4b0a      	ldr	r3, [pc, #40]	; (8006c80 <HAL_Delay+0x44>)
 8006c58:	781b      	ldrb	r3, [r3, #0]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006c62:	bf00      	nop
 8006c64:	f7ff ffde 	bl	8006c24 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d8f7      	bhi.n	8006c64 <HAL_Delay+0x28>
  {
  }
}
 8006c74:	bf00      	nop
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	2000001c 	.word	0x2000001c

08006c84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d101      	bne.n	8006c9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006c96:	2301      	movs	r3, #1
 8006c98:	e033      	b.n	8006d02 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d109      	bne.n	8006cb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7fe f9c8 	bl	8005038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cba:	f003 0310 	and.w	r3, r3, #16
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d118      	bne.n	8006cf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006cca:	f023 0302 	bic.w	r3, r3, #2
 8006cce:	f043 0202 	orr.w	r2, r3, #2
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fbfc 	bl	80074d4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f023 0303 	bic.w	r3, r3, #3
 8006cea:	f043 0201 	orr.w	r2, r3, #1
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8006cf2:	e001      	b.n	8006cf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3710      	adds	r7, #16
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}
	...

08006d0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8006d14:	2300      	movs	r3, #0
 8006d16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d1e:	2b01      	cmp	r3, #1
 8006d20:	d101      	bne.n	8006d26 <HAL_ADC_Start+0x1a>
 8006d22:	2302      	movs	r3, #2
 8006d24:	e0b2      	b.n	8006e8c <HAL_ADC_Start+0x180>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	f003 0301 	and.w	r3, r3, #1
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d018      	beq.n	8006d6e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	689a      	ldr	r2, [r3, #8]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006d4c:	4b52      	ldr	r3, [pc, #328]	; (8006e98 <HAL_ADC_Start+0x18c>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a52      	ldr	r2, [pc, #328]	; (8006e9c <HAL_ADC_Start+0x190>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	0c9a      	lsrs	r2, r3, #18
 8006d58:	4613      	mov	r3, r2
 8006d5a:	005b      	lsls	r3, r3, #1
 8006d5c:	4413      	add	r3, r2
 8006d5e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006d60:	e002      	b.n	8006d68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	3b01      	subs	r3, #1
 8006d66:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1f9      	bne.n	8006d62 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0301 	and.w	r3, r3, #1
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d17a      	bne.n	8006e72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006d84:	f023 0301 	bic.w	r3, r3, #1
 8006d88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006da6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dba:	d106      	bne.n	8006dca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc0:	f023 0206 	bic.w	r2, r3, #6
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	645a      	str	r2, [r3, #68]	; 0x44
 8006dc8:	e002      	b.n	8006dd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006dd8:	4b31      	ldr	r3, [pc, #196]	; (8006ea0 <HAL_ADC_Start+0x194>)
 8006dda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006de4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	f003 031f 	and.w	r3, r3, #31
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d12a      	bne.n	8006e48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a2b      	ldr	r2, [pc, #172]	; (8006ea4 <HAL_ADC_Start+0x198>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d015      	beq.n	8006e28 <HAL_ADC_Start+0x11c>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a29      	ldr	r2, [pc, #164]	; (8006ea8 <HAL_ADC_Start+0x19c>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d105      	bne.n	8006e12 <HAL_ADC_Start+0x106>
 8006e06:	4b26      	ldr	r3, [pc, #152]	; (8006ea0 <HAL_ADC_Start+0x194>)
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f003 031f 	and.w	r3, r3, #31
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a25      	ldr	r2, [pc, #148]	; (8006eac <HAL_ADC_Start+0x1a0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d136      	bne.n	8006e8a <HAL_ADC_Start+0x17e>
 8006e1c:	4b20      	ldr	r3, [pc, #128]	; (8006ea0 <HAL_ADC_Start+0x194>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	f003 0310 	and.w	r3, r3, #16
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d130      	bne.n	8006e8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d129      	bne.n	8006e8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006e44:	609a      	str	r2, [r3, #8]
 8006e46:	e020      	b.n	8006e8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <HAL_ADC_Start+0x198>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d11b      	bne.n	8006e8a <HAL_ADC_Start+0x17e>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d114      	bne.n	8006e8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689a      	ldr	r2, [r3, #8]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006e6e:	609a      	str	r2, [r3, #8]
 8006e70:	e00b      	b.n	8006e8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e76:	f043 0210 	orr.w	r2, r3, #16
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e82:	f043 0201 	orr.w	r2, r3, #1
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	2000000c 	.word	0x2000000c
 8006e9c:	431bde83 	.word	0x431bde83
 8006ea0:	40012300 	.word	0x40012300
 8006ea4:	40012000 	.word	0x40012000
 8006ea8:	40012100 	.word	0x40012100
 8006eac:	40012200 	.word	0x40012200

08006eb0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b083      	sub	sp, #12
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d101      	bne.n	8006ec6 <HAL_ADC_Stop+0x16>
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	e021      	b.n	8006f0a <HAL_ADC_Stop+0x5a>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2201      	movs	r2, #1
 8006eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689a      	ldr	r2, [r3, #8]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0201 	bic.w	r2, r2, #1
 8006edc:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d109      	bne.n	8006f00 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ef0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006ef4:	f023 0301 	bic.w	r3, r3, #1
 8006ef8:	f043 0201 	orr.w	r2, r3, #1
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	370c      	adds	r7, #12
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr

08006f16 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8006f16:	b580      	push	{r7, lr}
 8006f18:	b084      	sub	sp, #16
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f32:	d113      	bne.n	8006f5c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8006f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f42:	d10b      	bne.n	8006f5c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f48:	f043 0220 	orr.w	r2, r3, #32
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e063      	b.n	8007024 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f5c:	f7ff fe62 	bl	8006c24 <HAL_GetTick>
 8006f60:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006f62:	e021      	b.n	8006fa8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f6a:	d01d      	beq.n	8006fa8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <HAL_ADC_PollForConversion+0x6c>
 8006f72:	f7ff fe57 	bl	8006c24 <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	1ad3      	subs	r3, r2, r3
 8006f7c:	683a      	ldr	r2, [r7, #0]
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d212      	bcs.n	8006fa8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0302 	and.w	r3, r3, #2
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d00b      	beq.n	8006fa8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	f043 0204 	orr.w	r2, r3, #4
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006fa4:	2303      	movs	r3, #3
 8006fa6:	e03d      	b.n	8007024 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d1d6      	bne.n	8006f64 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f06f 0212 	mvn.w	r2, #18
 8006fbe:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d123      	bne.n	8007022 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d11f      	bne.n	8007022 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d006      	beq.n	8006ffe <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d111      	bne.n	8007022 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007002:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d105      	bne.n	8007022 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	f043 0201 	orr.w	r2, r3, #1
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	60f8      	str	r0, [r7, #12]
 8007034:	60b9      	str	r1, [r7, #8]
 8007036:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007042:	2b01      	cmp	r3, #1
 8007044:	d101      	bne.n	800704a <HAL_ADC_Start_DMA+0x1e>
 8007046:	2302      	movs	r3, #2
 8007048:	e0e9      	b.n	800721e <HAL_ADC_Start_DMA+0x1f2>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 0301 	and.w	r3, r3, #1
 800705c:	2b01      	cmp	r3, #1
 800705e:	d018      	beq.n	8007092 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f042 0201 	orr.w	r2, r2, #1
 800706e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007070:	4b6d      	ldr	r3, [pc, #436]	; (8007228 <HAL_ADC_Start_DMA+0x1fc>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a6d      	ldr	r2, [pc, #436]	; (800722c <HAL_ADC_Start_DMA+0x200>)
 8007076:	fba2 2303 	umull	r2, r3, r2, r3
 800707a:	0c9a      	lsrs	r2, r3, #18
 800707c:	4613      	mov	r3, r2
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	4413      	add	r3, r2
 8007082:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8007084:	e002      	b.n	800708c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	3b01      	subs	r3, #1
 800708a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d1f9      	bne.n	8007086 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800709c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070a0:	d107      	bne.n	80070b2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070b0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 0301 	and.w	r3, r3, #1
 80070bc:	2b01      	cmp	r3, #1
 80070be:	f040 80a1 	bne.w	8007204 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80070ca:	f023 0301 	bic.w	r3, r3, #1
 80070ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80070fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007100:	d106      	bne.n	8007110 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007106:	f023 0206 	bic.w	r2, r3, #6
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	645a      	str	r2, [r3, #68]	; 0x44
 800710e:	e002      	b.n	8007116 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800711e:	4b44      	ldr	r3, [pc, #272]	; (8007230 <HAL_ADC_Start_DMA+0x204>)
 8007120:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007126:	4a43      	ldr	r2, [pc, #268]	; (8007234 <HAL_ADC_Start_DMA+0x208>)
 8007128:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712e:	4a42      	ldr	r2, [pc, #264]	; (8007238 <HAL_ADC_Start_DMA+0x20c>)
 8007130:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007136:	4a41      	ldr	r2, [pc, #260]	; (800723c <HAL_ADC_Start_DMA+0x210>)
 8007138:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8007142:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	685a      	ldr	r2, [r3, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007152:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007162:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	334c      	adds	r3, #76	; 0x4c
 800716e:	4619      	mov	r1, r3
 8007170:	68ba      	ldr	r2, [r7, #8]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f000 fcbc 	bl	8007af0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 031f 	and.w	r3, r3, #31
 8007180:	2b00      	cmp	r3, #0
 8007182:	d12a      	bne.n	80071da <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a2d      	ldr	r2, [pc, #180]	; (8007240 <HAL_ADC_Start_DMA+0x214>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d015      	beq.n	80071ba <HAL_ADC_Start_DMA+0x18e>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a2c      	ldr	r2, [pc, #176]	; (8007244 <HAL_ADC_Start_DMA+0x218>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d105      	bne.n	80071a4 <HAL_ADC_Start_DMA+0x178>
 8007198:	4b25      	ldr	r3, [pc, #148]	; (8007230 <HAL_ADC_Start_DMA+0x204>)
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	f003 031f 	and.w	r3, r3, #31
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00a      	beq.n	80071ba <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a27      	ldr	r2, [pc, #156]	; (8007248 <HAL_ADC_Start_DMA+0x21c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d136      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
 80071ae:	4b20      	ldr	r3, [pc, #128]	; (8007230 <HAL_ADC_Start_DMA+0x204>)
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	f003 0310 	and.w	r3, r3, #16
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d130      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d129      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689a      	ldr	r2, [r3, #8]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80071d6:	609a      	str	r2, [r3, #8]
 80071d8:	e020      	b.n	800721c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a18      	ldr	r2, [pc, #96]	; (8007240 <HAL_ADC_Start_DMA+0x214>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d11b      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d114      	bne.n	800721c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007200:	609a      	str	r2, [r3, #8]
 8007202:	e00b      	b.n	800721c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007208:	f043 0210 	orr.w	r2, r3, #16
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007214:	f043 0201 	orr.w	r2, r3, #1
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3718      	adds	r7, #24
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
 8007226:	bf00      	nop
 8007228:	2000000c 	.word	0x2000000c
 800722c:	431bde83 	.word	0x431bde83
 8007230:	40012300 	.word	0x40012300
 8007234:	080076cd 	.word	0x080076cd
 8007238:	08007787 	.word	0x08007787
 800723c:	080077a3 	.word	0x080077a3
 8007240:	40012000 	.word	0x40012000
 8007244:	40012100 	.word	0x40012100
 8007248:	40012200 	.word	0x40012200

0800724c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800726e:	bf00      	nop
 8007270:	370c      	adds	r7, #12
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr

0800727a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007282:	bf00      	nop
 8007284:	370c      	adds	r7, #12
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
	...

08007290 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800729a:	2300      	movs	r3, #0
 800729c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d101      	bne.n	80072ac <HAL_ADC_ConfigChannel+0x1c>
 80072a8:	2302      	movs	r3, #2
 80072aa:	e105      	b.n	80074b8 <HAL_ADC_ConfigChannel+0x228>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2b09      	cmp	r3, #9
 80072ba:	d925      	bls.n	8007308 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68d9      	ldr	r1, [r3, #12]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	461a      	mov	r2, r3
 80072ca:	4613      	mov	r3, r2
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	4413      	add	r3, r2
 80072d0:	3b1e      	subs	r3, #30
 80072d2:	2207      	movs	r2, #7
 80072d4:	fa02 f303 	lsl.w	r3, r2, r3
 80072d8:	43da      	mvns	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	400a      	ands	r2, r1
 80072e0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68d9      	ldr	r1, [r3, #12]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	689a      	ldr	r2, [r3, #8]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	b29b      	uxth	r3, r3
 80072f2:	4618      	mov	r0, r3
 80072f4:	4603      	mov	r3, r0
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	4403      	add	r3, r0
 80072fa:	3b1e      	subs	r3, #30
 80072fc:	409a      	lsls	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	60da      	str	r2, [r3, #12]
 8007306:	e022      	b.n	800734e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	6919      	ldr	r1, [r3, #16]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	461a      	mov	r2, r3
 8007316:	4613      	mov	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	4413      	add	r3, r2
 800731c:	2207      	movs	r2, #7
 800731e:	fa02 f303 	lsl.w	r3, r2, r3
 8007322:	43da      	mvns	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	400a      	ands	r2, r1
 800732a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6919      	ldr	r1, [r3, #16]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	4618      	mov	r0, r3
 800733e:	4603      	mov	r3, r0
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	4403      	add	r3, r0
 8007344:	409a      	lsls	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b06      	cmp	r3, #6
 8007354:	d824      	bhi.n	80073a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	3b05      	subs	r3, #5
 8007368:	221f      	movs	r2, #31
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	43da      	mvns	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	400a      	ands	r2, r1
 8007376:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	b29b      	uxth	r3, r3
 8007384:	4618      	mov	r0, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	4613      	mov	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	4413      	add	r3, r2
 8007390:	3b05      	subs	r3, #5
 8007392:	fa00 f203 	lsl.w	r2, r0, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	430a      	orrs	r2, r1
 800739c:	635a      	str	r2, [r3, #52]	; 0x34
 800739e:	e04c      	b.n	800743a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2b0c      	cmp	r3, #12
 80073a6:	d824      	bhi.n	80073f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	009b      	lsls	r3, r3, #2
 80073b6:	4413      	add	r3, r2
 80073b8:	3b23      	subs	r3, #35	; 0x23
 80073ba:	221f      	movs	r2, #31
 80073bc:	fa02 f303 	lsl.w	r3, r2, r3
 80073c0:	43da      	mvns	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	400a      	ands	r2, r1
 80073c8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	4618      	mov	r0, r3
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	4613      	mov	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	4413      	add	r3, r2
 80073e2:	3b23      	subs	r3, #35	; 0x23
 80073e4:	fa00 f203 	lsl.w	r2, r0, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	631a      	str	r2, [r3, #48]	; 0x30
 80073f0:	e023      	b.n	800743a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	4613      	mov	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4413      	add	r3, r2
 8007402:	3b41      	subs	r3, #65	; 0x41
 8007404:	221f      	movs	r2, #31
 8007406:	fa02 f303 	lsl.w	r3, r2, r3
 800740a:	43da      	mvns	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	400a      	ands	r2, r1
 8007412:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	b29b      	uxth	r3, r3
 8007420:	4618      	mov	r0, r3
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685a      	ldr	r2, [r3, #4]
 8007426:	4613      	mov	r3, r2
 8007428:	009b      	lsls	r3, r3, #2
 800742a:	4413      	add	r3, r2
 800742c:	3b41      	subs	r3, #65	; 0x41
 800742e:	fa00 f203 	lsl.w	r2, r0, r3
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	430a      	orrs	r2, r1
 8007438:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800743a:	4b22      	ldr	r3, [pc, #136]	; (80074c4 <HAL_ADC_ConfigChannel+0x234>)
 800743c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a21      	ldr	r2, [pc, #132]	; (80074c8 <HAL_ADC_ConfigChannel+0x238>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d109      	bne.n	800745c <HAL_ADC_ConfigChannel+0x1cc>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2b12      	cmp	r3, #18
 800744e:	d105      	bne.n	800745c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a19      	ldr	r2, [pc, #100]	; (80074c8 <HAL_ADC_ConfigChannel+0x238>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d123      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x21e>
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2b10      	cmp	r3, #16
 800746c:	d003      	beq.n	8007476 <HAL_ADC_ConfigChannel+0x1e6>
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b11      	cmp	r3, #17
 8007474:	d11b      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b10      	cmp	r3, #16
 8007488:	d111      	bne.n	80074ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800748a:	4b10      	ldr	r3, [pc, #64]	; (80074cc <HAL_ADC_ConfigChannel+0x23c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a10      	ldr	r2, [pc, #64]	; (80074d0 <HAL_ADC_ConfigChannel+0x240>)
 8007490:	fba2 2303 	umull	r2, r3, r2, r3
 8007494:	0c9a      	lsrs	r2, r3, #18
 8007496:	4613      	mov	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	005b      	lsls	r3, r3, #1
 800749e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80074a0:	e002      	b.n	80074a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d1f9      	bne.n	80074a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	40012300 	.word	0x40012300
 80074c8:	40012000 	.word	0x40012000
 80074cc:	2000000c 	.word	0x2000000c
 80074d0:	431bde83 	.word	0x431bde83

080074d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80074dc:	4b79      	ldr	r3, [pc, #484]	; (80076c4 <ADC_Init+0x1f0>)
 80074de:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	431a      	orrs	r2, r3
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007508:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6859      	ldr	r1, [r3, #4]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	021a      	lsls	r2, r3, #8
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800752c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6859      	ldr	r1, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	689a      	ldr	r2, [r3, #8]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	430a      	orrs	r2, r1
 800753e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	689a      	ldr	r2, [r3, #8]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800754e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6899      	ldr	r1, [r3, #8]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	68da      	ldr	r2, [r3, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	430a      	orrs	r2, r1
 8007560:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	4a58      	ldr	r2, [pc, #352]	; (80076c8 <ADC_Init+0x1f4>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d022      	beq.n	80075b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	689a      	ldr	r2, [r3, #8]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800757a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	6899      	ldr	r1, [r3, #8]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	430a      	orrs	r2, r1
 800758c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	689a      	ldr	r2, [r3, #8]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800759c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	6899      	ldr	r1, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	609a      	str	r2, [r3, #8]
 80075b0:	e00f      	b.n	80075d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	689a      	ldr	r2, [r3, #8]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80075d0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f022 0202 	bic.w	r2, r2, #2
 80075e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6899      	ldr	r1, [r3, #8]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	7e1b      	ldrb	r3, [r3, #24]
 80075ec:	005a      	lsls	r2, r3, #1
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	430a      	orrs	r2, r1
 80075f4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01b      	beq.n	8007638 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800760e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685a      	ldr	r2, [r3, #4]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800761e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6859      	ldr	r1, [r3, #4]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762a:	3b01      	subs	r3, #1
 800762c:	035a      	lsls	r2, r3, #13
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	430a      	orrs	r2, r1
 8007634:	605a      	str	r2, [r3, #4]
 8007636:	e007      	b.n	8007648 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007646:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	3b01      	subs	r3, #1
 8007664:	051a      	lsls	r2, r3, #20
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	689a      	ldr	r2, [r3, #8]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800767c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6899      	ldr	r1, [r3, #8]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800768a:	025a      	lsls	r2, r3, #9
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	430a      	orrs	r2, r1
 8007692:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	6899      	ldr	r1, [r3, #8]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	695b      	ldr	r3, [r3, #20]
 80076ae:	029a      	lsls	r2, r3, #10
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	609a      	str	r2, [r3, #8]
}
 80076b8:	bf00      	nop
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	40012300 	.word	0x40012300
 80076c8:	0f000001 	.word	0x0f000001

080076cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076d8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d13c      	bne.n	8007760 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d12b      	bne.n	8007758 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007704:	2b00      	cmp	r3, #0
 8007706:	d127      	bne.n	8007758 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007712:	2b00      	cmp	r3, #0
 8007714:	d006      	beq.n	8007724 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007720:	2b00      	cmp	r3, #0
 8007722:	d119      	bne.n	8007758 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	685a      	ldr	r2, [r3, #4]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f022 0220 	bic.w	r2, r2, #32
 8007732:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007738:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d105      	bne.n	8007758 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007750:	f043 0201 	orr.w	r2, r3, #1
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f7fc f8db 	bl	8003914 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800775e:	e00e      	b.n	800777e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007764:	f003 0310 	and.w	r3, r3, #16
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800776c:	68f8      	ldr	r0, [r7, #12]
 800776e:	f7ff fd84 	bl	800727a <HAL_ADC_ErrorCallback>
}
 8007772:	e004      	b.n	800777e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	4798      	blx	r3
}
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007786:	b580      	push	{r7, lr}
 8007788:	b084      	sub	sp, #16
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007792:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007794:	68f8      	ldr	r0, [r7, #12]
 8007796:	f7ff fd66 	bl	8007266 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800779a:	bf00      	nop
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}

080077a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b084      	sub	sp, #16
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ae:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2240      	movs	r2, #64	; 0x40
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ba:	f043 0204 	orr.w	r2, r3, #4
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f7ff fd59 	bl	800727a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077c8:	bf00      	nop
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <__NVIC_SetPriorityGrouping>:
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80077e0:	4b0c      	ldr	r3, [pc, #48]	; (8007814 <__NVIC_SetPriorityGrouping+0x44>)
 80077e2:	68db      	ldr	r3, [r3, #12]
 80077e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80077ec:	4013      	ands	r3, r2
 80077ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80077f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80077fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007800:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007802:	4a04      	ldr	r2, [pc, #16]	; (8007814 <__NVIC_SetPriorityGrouping+0x44>)
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	60d3      	str	r3, [r2, #12]
}
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	e000ed00 	.word	0xe000ed00

08007818 <__NVIC_GetPriorityGrouping>:
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800781c:	4b04      	ldr	r3, [pc, #16]	; (8007830 <__NVIC_GetPriorityGrouping+0x18>)
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	0a1b      	lsrs	r3, r3, #8
 8007822:	f003 0307 	and.w	r3, r3, #7
}
 8007826:	4618      	mov	r0, r3
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	e000ed00 	.word	0xe000ed00

08007834 <__NVIC_EnableIRQ>:
{
 8007834:	b480      	push	{r7}
 8007836:	b083      	sub	sp, #12
 8007838:	af00      	add	r7, sp, #0
 800783a:	4603      	mov	r3, r0
 800783c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800783e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007842:	2b00      	cmp	r3, #0
 8007844:	db0b      	blt.n	800785e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007846:	79fb      	ldrb	r3, [r7, #7]
 8007848:	f003 021f 	and.w	r2, r3, #31
 800784c:	4907      	ldr	r1, [pc, #28]	; (800786c <__NVIC_EnableIRQ+0x38>)
 800784e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007852:	095b      	lsrs	r3, r3, #5
 8007854:	2001      	movs	r0, #1
 8007856:	fa00 f202 	lsl.w	r2, r0, r2
 800785a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	e000e100 	.word	0xe000e100

08007870 <__NVIC_SetPriority>:
{
 8007870:	b480      	push	{r7}
 8007872:	b083      	sub	sp, #12
 8007874:	af00      	add	r7, sp, #0
 8007876:	4603      	mov	r3, r0
 8007878:	6039      	str	r1, [r7, #0]
 800787a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800787c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007880:	2b00      	cmp	r3, #0
 8007882:	db0a      	blt.n	800789a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	b2da      	uxtb	r2, r3
 8007888:	490c      	ldr	r1, [pc, #48]	; (80078bc <__NVIC_SetPriority+0x4c>)
 800788a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800788e:	0112      	lsls	r2, r2, #4
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	440b      	add	r3, r1
 8007894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007898:	e00a      	b.n	80078b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	b2da      	uxtb	r2, r3
 800789e:	4908      	ldr	r1, [pc, #32]	; (80078c0 <__NVIC_SetPriority+0x50>)
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	3b04      	subs	r3, #4
 80078a8:	0112      	lsls	r2, r2, #4
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	440b      	add	r3, r1
 80078ae:	761a      	strb	r2, [r3, #24]
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr
 80078bc:	e000e100 	.word	0xe000e100
 80078c0:	e000ed00 	.word	0xe000ed00

080078c4 <NVIC_EncodePriority>:
{
 80078c4:	b480      	push	{r7}
 80078c6:	b089      	sub	sp, #36	; 0x24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078d8:	69fb      	ldr	r3, [r7, #28]
 80078da:	f1c3 0307 	rsb	r3, r3, #7
 80078de:	2b04      	cmp	r3, #4
 80078e0:	bf28      	it	cs
 80078e2:	2304      	movcs	r3, #4
 80078e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078e6:	69fb      	ldr	r3, [r7, #28]
 80078e8:	3304      	adds	r3, #4
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d902      	bls.n	80078f4 <NVIC_EncodePriority+0x30>
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	3b03      	subs	r3, #3
 80078f2:	e000      	b.n	80078f6 <NVIC_EncodePriority+0x32>
 80078f4:	2300      	movs	r3, #0
 80078f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078f8:	f04f 32ff 	mov.w	r2, #4294967295
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007902:	43da      	mvns	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	401a      	ands	r2, r3
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800790c:	f04f 31ff 	mov.w	r1, #4294967295
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	fa01 f303 	lsl.w	r3, r1, r3
 8007916:	43d9      	mvns	r1, r3
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800791c:	4313      	orrs	r3, r2
}
 800791e:	4618      	mov	r0, r3
 8007920:	3724      	adds	r7, #36	; 0x24
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b082      	sub	sp, #8
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7ff ff4c 	bl	80077d0 <__NVIC_SetPriorityGrouping>
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800794e:	2300      	movs	r3, #0
 8007950:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007952:	f7ff ff61 	bl	8007818 <__NVIC_GetPriorityGrouping>
 8007956:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	68b9      	ldr	r1, [r7, #8]
 800795c:	6978      	ldr	r0, [r7, #20]
 800795e:	f7ff ffb1 	bl	80078c4 <NVIC_EncodePriority>
 8007962:	4602      	mov	r2, r0
 8007964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007968:	4611      	mov	r1, r2
 800796a:	4618      	mov	r0, r3
 800796c:	f7ff ff80 	bl	8007870 <__NVIC_SetPriority>
}
 8007970:	bf00      	nop
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007986:	4618      	mov	r0, r3
 8007988:	f7ff ff54 	bl	8007834 <__NVIC_EnableIRQ>
}
 800798c:	bf00      	nop
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80079a0:	f7ff f940 	bl	8006c24 <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e099      	b.n	8007ae4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2202      	movs	r2, #2
 80079b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f022 0201 	bic.w	r2, r2, #1
 80079ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079d0:	e00f      	b.n	80079f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80079d2:	f7ff f927 	bl	8006c24 <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b05      	cmp	r3, #5
 80079de:	d908      	bls.n	80079f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2220      	movs	r2, #32
 80079e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2203      	movs	r2, #3
 80079ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e078      	b.n	8007ae4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d1e8      	bne.n	80079d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4b38      	ldr	r3, [pc, #224]	; (8007aec <HAL_DMA_Init+0x158>)
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	685a      	ldr	r2, [r3, #4]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a1b      	ldr	r3, [r3, #32]
 8007a3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007a3e:	697a      	ldr	r2, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	d107      	bne.n	8007a5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a54:	4313      	orrs	r3, r2
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	695b      	ldr	r3, [r3, #20]
 8007a6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f023 0307 	bic.w	r3, r3, #7
 8007a72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a78:	697a      	ldr	r2, [r7, #20]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	2b04      	cmp	r3, #4
 8007a84:	d117      	bne.n	8007ab6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00e      	beq.n	8007ab6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fb0d 	bl	80080b8 <DMA_CheckFifoParam>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d008      	beq.n	8007ab6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2240      	movs	r2, #64	; 0x40
 8007aa8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e016      	b.n	8007ae4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	697a      	ldr	r2, [r7, #20]
 8007abc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f000 fac4 	bl	800804c <DMA_CalcBaseAndBitshift>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007acc:	223f      	movs	r2, #63	; 0x3f
 8007ace:	409a      	lsls	r2, r3
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	f010803f 	.word	0xf010803f

08007af0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b086      	sub	sp, #24
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	607a      	str	r2, [r7, #4]
 8007afc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b0e:	2b01      	cmp	r3, #1
 8007b10:	d101      	bne.n	8007b16 <HAL_DMA_Start_IT+0x26>
 8007b12:	2302      	movs	r3, #2
 8007b14:	e040      	b.n	8007b98 <HAL_DMA_Start_IT+0xa8>
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2201      	movs	r2, #1
 8007b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d12f      	bne.n	8007b8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	687a      	ldr	r2, [r7, #4]
 8007b3c:	68b9      	ldr	r1, [r7, #8]
 8007b3e:	68f8      	ldr	r0, [r7, #12]
 8007b40:	f000 fa56 	bl	8007ff0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b48:	223f      	movs	r2, #63	; 0x3f
 8007b4a:	409a      	lsls	r2, r3
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0216 	orr.w	r2, r2, #22
 8007b5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d007      	beq.n	8007b78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f042 0208 	orr.w	r2, r2, #8
 8007b76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f042 0201 	orr.w	r2, r2, #1
 8007b86:	601a      	str	r2, [r3, #0]
 8007b88:	e005      	b.n	8007b96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007b92:	2302      	movs	r3, #2
 8007b94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3718      	adds	r7, #24
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007bae:	f7ff f839 	bl	8006c24 <HAL_GetTick>
 8007bb2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d008      	beq.n	8007bd2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2280      	movs	r2, #128	; 0x80
 8007bc4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e052      	b.n	8007c78 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0216 	bic.w	r2, r2, #22
 8007be0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	695a      	ldr	r2, [r3, #20]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bf0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d103      	bne.n	8007c02 <HAL_DMA_Abort+0x62>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d007      	beq.n	8007c12 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f022 0208 	bic.w	r2, r2, #8
 8007c10:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	681a      	ldr	r2, [r3, #0]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f022 0201 	bic.w	r2, r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c22:	e013      	b.n	8007c4c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007c24:	f7fe fffe 	bl	8006c24 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b05      	cmp	r3, #5
 8007c30:	d90c      	bls.n	8007c4c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e015      	b.n	8007c78 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e4      	bne.n	8007c24 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c5e:	223f      	movs	r2, #63	; 0x3f
 8007c60:	409a      	lsls	r2, r3
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d004      	beq.n	8007c9e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2280      	movs	r2, #128	; 0x80
 8007c98:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e00c      	b.n	8007cb8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2205      	movs	r2, #5
 8007ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f022 0201 	bic.w	r2, r2, #1
 8007cb4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007cd0:	4b8e      	ldr	r3, [pc, #568]	; (8007f0c <HAL_DMA_IRQHandler+0x248>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a8e      	ldr	r2, [pc, #568]	; (8007f10 <HAL_DMA_IRQHandler+0x24c>)
 8007cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cda:	0a9b      	lsrs	r3, r3, #10
 8007cdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ce2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cee:	2208      	movs	r2, #8
 8007cf0:	409a      	lsls	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	4013      	ands	r3, r2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d01a      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d013      	beq.n	8007d30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0204 	bic.w	r2, r2, #4
 8007d16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	409a      	lsls	r2, r3
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d28:	f043 0201 	orr.w	r2, r3, #1
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d34:	2201      	movs	r2, #1
 8007d36:	409a      	lsls	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d012      	beq.n	8007d66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d00b      	beq.n	8007d66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d52:	2201      	movs	r2, #1
 8007d54:	409a      	lsls	r2, r3
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d5e:	f043 0202 	orr.w	r2, r3, #2
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d6a:	2204      	movs	r2, #4
 8007d6c:	409a      	lsls	r2, r3
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	4013      	ands	r3, r2
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d012      	beq.n	8007d9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00b      	beq.n	8007d9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d88:	2204      	movs	r2, #4
 8007d8a:	409a      	lsls	r2, r3
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d94:	f043 0204 	orr.w	r2, r3, #4
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da0:	2210      	movs	r2, #16
 8007da2:	409a      	lsls	r2, r3
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	4013      	ands	r3, r2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d043      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 0308 	and.w	r3, r3, #8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d03c      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbe:	2210      	movs	r2, #16
 8007dc0:	409a      	lsls	r2, r3
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d018      	beq.n	8007e06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d108      	bne.n	8007df4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d024      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	4798      	blx	r3
 8007df2:	e01f      	b.n	8007e34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01b      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
 8007e04:	e016      	b.n	8007e34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d107      	bne.n	8007e24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	681a      	ldr	r2, [r3, #0]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f022 0208 	bic.w	r2, r2, #8
 8007e22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d003      	beq.n	8007e34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e38:	2220      	movs	r2, #32
 8007e3a:	409a      	lsls	r2, r3
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	4013      	ands	r3, r2
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	f000 808f 	beq.w	8007f64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f003 0310 	and.w	r3, r3, #16
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	f000 8087 	beq.w	8007f64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	d136      	bne.n	8007edc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f022 0216 	bic.w	r2, r2, #22
 8007e7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	695a      	ldr	r2, [r3, #20]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d103      	bne.n	8007e9e <HAL_DMA_IRQHandler+0x1da>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d007      	beq.n	8007eae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f022 0208 	bic.w	r2, r2, #8
 8007eac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb2:	223f      	movs	r2, #63	; 0x3f
 8007eb4:	409a      	lsls	r2, r3
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d07e      	beq.n	8007fd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	4798      	blx	r3
        }
        return;
 8007eda:	e079      	b.n	8007fd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d01d      	beq.n	8007f26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d10d      	bne.n	8007f14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d031      	beq.n	8007f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	4798      	blx	r3
 8007f08:	e02c      	b.n	8007f64 <HAL_DMA_IRQHandler+0x2a0>
 8007f0a:	bf00      	nop
 8007f0c:	2000000c 	.word	0x2000000c
 8007f10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d023      	beq.n	8007f64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	4798      	blx	r3
 8007f24:	e01e      	b.n	8007f64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10f      	bne.n	8007f54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f022 0210 	bic.w	r2, r2, #16
 8007f42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d032      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d022      	beq.n	8007fbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2205      	movs	r2, #5
 8007f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	681a      	ldr	r2, [r3, #0]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f022 0201 	bic.w	r2, r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	3301      	adds	r3, #1
 8007f94:	60bb      	str	r3, [r7, #8]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d307      	bcc.n	8007fac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0301 	and.w	r3, r3, #1
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1f2      	bne.n	8007f90 <HAL_DMA_IRQHandler+0x2cc>
 8007faa:	e000      	b.n	8007fae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8007fac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d005      	beq.n	8007fd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	4798      	blx	r3
 8007fce:	e000      	b.n	8007fd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007fd0:	bf00      	nop
    }
  }
}
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
 8007ffc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800800c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	2b40      	cmp	r3, #64	; 0x40
 800801c:	d108      	bne.n	8008030 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800802e:	e007      	b.n	8008040 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	60da      	str	r2, [r3, #12]
}
 8008040:	bf00      	nop
 8008042:	3714      	adds	r7, #20
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	b2db      	uxtb	r3, r3
 800805a:	3b10      	subs	r3, #16
 800805c:	4a14      	ldr	r2, [pc, #80]	; (80080b0 <DMA_CalcBaseAndBitshift+0x64>)
 800805e:	fba2 2303 	umull	r2, r3, r2, r3
 8008062:	091b      	lsrs	r3, r3, #4
 8008064:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008066:	4a13      	ldr	r2, [pc, #76]	; (80080b4 <DMA_CalcBaseAndBitshift+0x68>)
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	4413      	add	r3, r2
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b03      	cmp	r3, #3
 8008078:	d909      	bls.n	800808e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008082:	f023 0303 	bic.w	r3, r3, #3
 8008086:	1d1a      	adds	r2, r3, #4
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	659a      	str	r2, [r3, #88]	; 0x58
 800808c:	e007      	b.n	800809e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008096:	f023 0303 	bic.w	r3, r3, #3
 800809a:	687a      	ldr	r2, [r7, #4]
 800809c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3714      	adds	r7, #20
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	aaaaaaab 	.word	0xaaaaaaab
 80080b4:	0801b588 	.word	0x0801b588

080080b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080c0:	2300      	movs	r3, #0
 80080c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d11f      	bne.n	8008112 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b03      	cmp	r3, #3
 80080d6:	d856      	bhi.n	8008186 <DMA_CheckFifoParam+0xce>
 80080d8:	a201      	add	r2, pc, #4	; (adr r2, 80080e0 <DMA_CheckFifoParam+0x28>)
 80080da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080de:	bf00      	nop
 80080e0:	080080f1 	.word	0x080080f1
 80080e4:	08008103 	.word	0x08008103
 80080e8:	080080f1 	.word	0x080080f1
 80080ec:	08008187 	.word	0x08008187
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d046      	beq.n	800818a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008100:	e043      	b.n	800818a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008106:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800810a:	d140      	bne.n	800818e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008110:	e03d      	b.n	800818e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	699b      	ldr	r3, [r3, #24]
 8008116:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811a:	d121      	bne.n	8008160 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	2b03      	cmp	r3, #3
 8008120:	d837      	bhi.n	8008192 <DMA_CheckFifoParam+0xda>
 8008122:	a201      	add	r2, pc, #4	; (adr r2, 8008128 <DMA_CheckFifoParam+0x70>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	08008139 	.word	0x08008139
 800812c:	0800813f 	.word	0x0800813f
 8008130:	08008139 	.word	0x08008139
 8008134:	08008151 	.word	0x08008151
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008138:	2301      	movs	r3, #1
 800813a:	73fb      	strb	r3, [r7, #15]
      break;
 800813c:	e030      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008142:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008146:	2b00      	cmp	r3, #0
 8008148:	d025      	beq.n	8008196 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800814e:	e022      	b.n	8008196 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008154:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008158:	d11f      	bne.n	800819a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800815e:	e01c      	b.n	800819a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	2b02      	cmp	r3, #2
 8008164:	d903      	bls.n	800816e <DMA_CheckFifoParam+0xb6>
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d003      	beq.n	8008174 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800816c:	e018      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	73fb      	strb	r3, [r7, #15]
      break;
 8008172:	e015      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008178:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d00e      	beq.n	800819e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	73fb      	strb	r3, [r7, #15]
      break;
 8008184:	e00b      	b.n	800819e <DMA_CheckFifoParam+0xe6>
      break;
 8008186:	bf00      	nop
 8008188:	e00a      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
      break;
 800818a:	bf00      	nop
 800818c:	e008      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
      break;
 800818e:	bf00      	nop
 8008190:	e006      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
      break;
 8008192:	bf00      	nop
 8008194:	e004      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
      break;
 8008196:	bf00      	nop
 8008198:	e002      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800819a:	bf00      	nop
 800819c:	e000      	b.n	80081a0 <DMA_CheckFifoParam+0xe8>
      break;
 800819e:	bf00      	nop
    }
  } 
  
  return status; 
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop

080081b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b089      	sub	sp, #36	; 0x24
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80081ba:	2300      	movs	r3, #0
 80081bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80081be:	2300      	movs	r3, #0
 80081c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80081c6:	2300      	movs	r3, #0
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	e16b      	b.n	80084a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80081cc:	2201      	movs	r2, #1
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	697a      	ldr	r2, [r7, #20]
 80081dc:	4013      	ands	r3, r2
 80081de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	f040 815a 	bne.w	800849e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	f003 0303 	and.w	r3, r3, #3
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d005      	beq.n	8008202 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	685b      	ldr	r3, [r3, #4]
 80081fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081fe:	2b02      	cmp	r3, #2
 8008200:	d130      	bne.n	8008264 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	005b      	lsls	r3, r3, #1
 800820c:	2203      	movs	r2, #3
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	43db      	mvns	r3, r3
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4013      	ands	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	69fb      	ldr	r3, [r7, #28]
 8008220:	005b      	lsls	r3, r3, #1
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	4313      	orrs	r3, r2
 800822a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008238:	2201      	movs	r2, #1
 800823a:	69fb      	ldr	r3, [r7, #28]
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	43db      	mvns	r3, r3
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	4013      	ands	r3, r2
 8008246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	091b      	lsrs	r3, r3, #4
 800824e:	f003 0201 	and.w	r2, r3, #1
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	69ba      	ldr	r2, [r7, #24]
 800825a:	4313      	orrs	r3, r2
 800825c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	69ba      	ldr	r2, [r7, #24]
 8008262:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	2b03      	cmp	r3, #3
 800826e:	d017      	beq.n	80082a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008276:	69fb      	ldr	r3, [r7, #28]
 8008278:	005b      	lsls	r3, r3, #1
 800827a:	2203      	movs	r2, #3
 800827c:	fa02 f303 	lsl.w	r3, r2, r3
 8008280:	43db      	mvns	r3, r3
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	4013      	ands	r3, r2
 8008286:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008288:	683b      	ldr	r3, [r7, #0]
 800828a:	689a      	ldr	r2, [r3, #8]
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	69ba      	ldr	r2, [r7, #24]
 8008296:	4313      	orrs	r3, r2
 8008298:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69ba      	ldr	r2, [r7, #24]
 800829e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f003 0303 	and.w	r3, r3, #3
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d123      	bne.n	80082f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	08da      	lsrs	r2, r3, #3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	3208      	adds	r2, #8
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	f003 0307 	and.w	r3, r3, #7
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	220f      	movs	r2, #15
 80082c4:	fa02 f303 	lsl.w	r3, r2, r3
 80082c8:	43db      	mvns	r3, r3
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	4013      	ands	r3, r2
 80082ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	691a      	ldr	r2, [r3, #16]
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	f003 0307 	and.w	r3, r3, #7
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	08da      	lsrs	r2, r3, #3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3208      	adds	r2, #8
 80082ee:	69b9      	ldr	r1, [r7, #24]
 80082f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082fa:	69fb      	ldr	r3, [r7, #28]
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	2203      	movs	r2, #3
 8008300:	fa02 f303 	lsl.w	r3, r2, r3
 8008304:	43db      	mvns	r3, r3
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	4013      	ands	r3, r2
 800830a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f003 0203 	and.w	r2, r3, #3
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	005b      	lsls	r3, r3, #1
 8008318:	fa02 f303 	lsl.w	r3, r2, r3
 800831c:	69ba      	ldr	r2, [r7, #24]
 800831e:	4313      	orrs	r3, r2
 8008320:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	69ba      	ldr	r2, [r7, #24]
 8008326:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008330:	2b00      	cmp	r3, #0
 8008332:	f000 80b4 	beq.w	800849e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008336:	2300      	movs	r3, #0
 8008338:	60fb      	str	r3, [r7, #12]
 800833a:	4b60      	ldr	r3, [pc, #384]	; (80084bc <HAL_GPIO_Init+0x30c>)
 800833c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833e:	4a5f      	ldr	r2, [pc, #380]	; (80084bc <HAL_GPIO_Init+0x30c>)
 8008340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008344:	6453      	str	r3, [r2, #68]	; 0x44
 8008346:	4b5d      	ldr	r3, [pc, #372]	; (80084bc <HAL_GPIO_Init+0x30c>)
 8008348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800834a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800834e:	60fb      	str	r3, [r7, #12]
 8008350:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008352:	4a5b      	ldr	r2, [pc, #364]	; (80084c0 <HAL_GPIO_Init+0x310>)
 8008354:	69fb      	ldr	r3, [r7, #28]
 8008356:	089b      	lsrs	r3, r3, #2
 8008358:	3302      	adds	r3, #2
 800835a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800835e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	220f      	movs	r2, #15
 800836a:	fa02 f303 	lsl.w	r3, r2, r3
 800836e:	43db      	mvns	r3, r3
 8008370:	69ba      	ldr	r2, [r7, #24]
 8008372:	4013      	ands	r3, r2
 8008374:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	4a52      	ldr	r2, [pc, #328]	; (80084c4 <HAL_GPIO_Init+0x314>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d02b      	beq.n	80083d6 <HAL_GPIO_Init+0x226>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	4a51      	ldr	r2, [pc, #324]	; (80084c8 <HAL_GPIO_Init+0x318>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d025      	beq.n	80083d2 <HAL_GPIO_Init+0x222>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	4a50      	ldr	r2, [pc, #320]	; (80084cc <HAL_GPIO_Init+0x31c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d01f      	beq.n	80083ce <HAL_GPIO_Init+0x21e>
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	4a4f      	ldr	r2, [pc, #316]	; (80084d0 <HAL_GPIO_Init+0x320>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d019      	beq.n	80083ca <HAL_GPIO_Init+0x21a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	4a4e      	ldr	r2, [pc, #312]	; (80084d4 <HAL_GPIO_Init+0x324>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d013      	beq.n	80083c6 <HAL_GPIO_Init+0x216>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	4a4d      	ldr	r2, [pc, #308]	; (80084d8 <HAL_GPIO_Init+0x328>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d00d      	beq.n	80083c2 <HAL_GPIO_Init+0x212>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a4c      	ldr	r2, [pc, #304]	; (80084dc <HAL_GPIO_Init+0x32c>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d007      	beq.n	80083be <HAL_GPIO_Init+0x20e>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	4a4b      	ldr	r2, [pc, #300]	; (80084e0 <HAL_GPIO_Init+0x330>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d101      	bne.n	80083ba <HAL_GPIO_Init+0x20a>
 80083b6:	2307      	movs	r3, #7
 80083b8:	e00e      	b.n	80083d8 <HAL_GPIO_Init+0x228>
 80083ba:	2308      	movs	r3, #8
 80083bc:	e00c      	b.n	80083d8 <HAL_GPIO_Init+0x228>
 80083be:	2306      	movs	r3, #6
 80083c0:	e00a      	b.n	80083d8 <HAL_GPIO_Init+0x228>
 80083c2:	2305      	movs	r3, #5
 80083c4:	e008      	b.n	80083d8 <HAL_GPIO_Init+0x228>
 80083c6:	2304      	movs	r3, #4
 80083c8:	e006      	b.n	80083d8 <HAL_GPIO_Init+0x228>
 80083ca:	2303      	movs	r3, #3
 80083cc:	e004      	b.n	80083d8 <HAL_GPIO_Init+0x228>
 80083ce:	2302      	movs	r3, #2
 80083d0:	e002      	b.n	80083d8 <HAL_GPIO_Init+0x228>
 80083d2:	2301      	movs	r3, #1
 80083d4:	e000      	b.n	80083d8 <HAL_GPIO_Init+0x228>
 80083d6:	2300      	movs	r3, #0
 80083d8:	69fa      	ldr	r2, [r7, #28]
 80083da:	f002 0203 	and.w	r2, r2, #3
 80083de:	0092      	lsls	r2, r2, #2
 80083e0:	4093      	lsls	r3, r2
 80083e2:	69ba      	ldr	r2, [r7, #24]
 80083e4:	4313      	orrs	r3, r2
 80083e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083e8:	4935      	ldr	r1, [pc, #212]	; (80084c0 <HAL_GPIO_Init+0x310>)
 80083ea:	69fb      	ldr	r3, [r7, #28]
 80083ec:	089b      	lsrs	r3, r3, #2
 80083ee:	3302      	adds	r3, #2
 80083f0:	69ba      	ldr	r2, [r7, #24]
 80083f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80083f6:	4b3b      	ldr	r3, [pc, #236]	; (80084e4 <HAL_GPIO_Init+0x334>)
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	43db      	mvns	r3, r3
 8008400:	69ba      	ldr	r2, [r7, #24]
 8008402:	4013      	ands	r3, r2
 8008404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800840e:	2b00      	cmp	r3, #0
 8008410:	d003      	beq.n	800841a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008412:	69ba      	ldr	r2, [r7, #24]
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	4313      	orrs	r3, r2
 8008418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800841a:	4a32      	ldr	r2, [pc, #200]	; (80084e4 <HAL_GPIO_Init+0x334>)
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008420:	4b30      	ldr	r3, [pc, #192]	; (80084e4 <HAL_GPIO_Init+0x334>)
 8008422:	68db      	ldr	r3, [r3, #12]
 8008424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	43db      	mvns	r3, r3
 800842a:	69ba      	ldr	r2, [r7, #24]
 800842c:	4013      	ands	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008438:	2b00      	cmp	r3, #0
 800843a:	d003      	beq.n	8008444 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800843c:	69ba      	ldr	r2, [r7, #24]
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	4313      	orrs	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008444:	4a27      	ldr	r2, [pc, #156]	; (80084e4 <HAL_GPIO_Init+0x334>)
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800844a:	4b26      	ldr	r3, [pc, #152]	; (80084e4 <HAL_GPIO_Init+0x334>)
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	43db      	mvns	r3, r3
 8008454:	69ba      	ldr	r2, [r7, #24]
 8008456:	4013      	ands	r3, r2
 8008458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	685b      	ldr	r3, [r3, #4]
 800845e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d003      	beq.n	800846e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008466:	69ba      	ldr	r2, [r7, #24]
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	4313      	orrs	r3, r2
 800846c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800846e:	4a1d      	ldr	r2, [pc, #116]	; (80084e4 <HAL_GPIO_Init+0x334>)
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008474:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <HAL_GPIO_Init+0x334>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	43db      	mvns	r3, r3
 800847e:	69ba      	ldr	r2, [r7, #24]
 8008480:	4013      	ands	r3, r2
 8008482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800848c:	2b00      	cmp	r3, #0
 800848e:	d003      	beq.n	8008498 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	4313      	orrs	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008498:	4a12      	ldr	r2, [pc, #72]	; (80084e4 <HAL_GPIO_Init+0x334>)
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	3301      	adds	r3, #1
 80084a2:	61fb      	str	r3, [r7, #28]
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	2b0f      	cmp	r3, #15
 80084a8:	f67f ae90 	bls.w	80081cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80084ac:	bf00      	nop
 80084ae:	bf00      	nop
 80084b0:	3724      	adds	r7, #36	; 0x24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	40023800 	.word	0x40023800
 80084c0:	40013800 	.word	0x40013800
 80084c4:	40020000 	.word	0x40020000
 80084c8:	40020400 	.word	0x40020400
 80084cc:	40020800 	.word	0x40020800
 80084d0:	40020c00 	.word	0x40020c00
 80084d4:	40021000 	.word	0x40021000
 80084d8:	40021400 	.word	0x40021400
 80084dc:	40021800 	.word	0x40021800
 80084e0:	40021c00 	.word	0x40021c00
 80084e4:	40013c00 	.word	0x40013c00

080084e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b083      	sub	sp, #12
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
 80084f0:	460b      	mov	r3, r1
 80084f2:	807b      	strh	r3, [r7, #2]
 80084f4:	4613      	mov	r3, r2
 80084f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084f8:	787b      	ldrb	r3, [r7, #1]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084fe:	887a      	ldrh	r2, [r7, #2]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008504:	e003      	b.n	800850e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008506:	887b      	ldrh	r3, [r7, #2]
 8008508:	041a      	lsls	r2, r3, #16
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	619a      	str	r2, [r3, #24]
}
 800850e:	bf00      	nop
 8008510:	370c      	adds	r7, #12
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr

0800851a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800851a:	b480      	push	{r7}
 800851c:	b085      	sub	sp, #20
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
 8008522:	460b      	mov	r3, r1
 8008524:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	695b      	ldr	r3, [r3, #20]
 800852a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800852c:	887a      	ldrh	r2, [r7, #2]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	4013      	ands	r3, r2
 8008532:	041a      	lsls	r2, r3, #16
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	43d9      	mvns	r1, r3
 8008538:	887b      	ldrh	r3, [r7, #2]
 800853a:	400b      	ands	r3, r1
 800853c:	431a      	orrs	r2, r3
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	619a      	str	r2, [r3, #24]
}
 8008542:	bf00      	nop
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d101      	bne.n	8008562 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e12b      	b.n	80087ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008568:	b2db      	uxtb	r3, r3
 800856a:	2b00      	cmp	r3, #0
 800856c:	d106      	bne.n	800857c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fc fdf2 	bl	8005160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2224      	movs	r2, #36	; 0x24
 8008580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0201 	bic.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80085a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80085b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80085b4:	f002 f91a 	bl	800a7ec <HAL_RCC_GetPCLK1Freq>
 80085b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	4a81      	ldr	r2, [pc, #516]	; (80087c4 <HAL_I2C_Init+0x274>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d807      	bhi.n	80085d4 <HAL_I2C_Init+0x84>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	4a80      	ldr	r2, [pc, #512]	; (80087c8 <HAL_I2C_Init+0x278>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	bf94      	ite	ls
 80085cc:	2301      	movls	r3, #1
 80085ce:	2300      	movhi	r3, #0
 80085d0:	b2db      	uxtb	r3, r3
 80085d2:	e006      	b.n	80085e2 <HAL_I2C_Init+0x92>
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4a7d      	ldr	r2, [pc, #500]	; (80087cc <HAL_I2C_Init+0x27c>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	bf94      	ite	ls
 80085dc:	2301      	movls	r3, #1
 80085de:	2300      	movhi	r3, #0
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e0e7      	b.n	80087ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	4a78      	ldr	r2, [pc, #480]	; (80087d0 <HAL_I2C_Init+0x280>)
 80085ee:	fba2 2303 	umull	r2, r3, r2, r3
 80085f2:	0c9b      	lsrs	r3, r3, #18
 80085f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	4a6a      	ldr	r2, [pc, #424]	; (80087c4 <HAL_I2C_Init+0x274>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d802      	bhi.n	8008624 <HAL_I2C_Init+0xd4>
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	3301      	adds	r3, #1
 8008622:	e009      	b.n	8008638 <HAL_I2C_Init+0xe8>
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800862a:	fb02 f303 	mul.w	r3, r2, r3
 800862e:	4a69      	ldr	r2, [pc, #420]	; (80087d4 <HAL_I2C_Init+0x284>)
 8008630:	fba2 2303 	umull	r2, r3, r2, r3
 8008634:	099b      	lsrs	r3, r3, #6
 8008636:	3301      	adds	r3, #1
 8008638:	687a      	ldr	r2, [r7, #4]
 800863a:	6812      	ldr	r2, [r2, #0]
 800863c:	430b      	orrs	r3, r1
 800863e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	69db      	ldr	r3, [r3, #28]
 8008646:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800864a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	495c      	ldr	r1, [pc, #368]	; (80087c4 <HAL_I2C_Init+0x274>)
 8008654:	428b      	cmp	r3, r1
 8008656:	d819      	bhi.n	800868c <HAL_I2C_Init+0x13c>
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	1e59      	subs	r1, r3, #1
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	fbb1 f3f3 	udiv	r3, r1, r3
 8008666:	1c59      	adds	r1, r3, #1
 8008668:	f640 73fc 	movw	r3, #4092	; 0xffc
 800866c:	400b      	ands	r3, r1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <HAL_I2C_Init+0x138>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	1e59      	subs	r1, r3, #1
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008680:	3301      	adds	r3, #1
 8008682:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008686:	e051      	b.n	800872c <HAL_I2C_Init+0x1dc>
 8008688:	2304      	movs	r3, #4
 800868a:	e04f      	b.n	800872c <HAL_I2C_Init+0x1dc>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d111      	bne.n	80086b8 <HAL_I2C_Init+0x168>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	1e58      	subs	r0, r3, #1
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6859      	ldr	r1, [r3, #4]
 800869c:	460b      	mov	r3, r1
 800869e:	005b      	lsls	r3, r3, #1
 80086a0:	440b      	add	r3, r1
 80086a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80086a6:	3301      	adds	r3, #1
 80086a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	bf0c      	ite	eq
 80086b0:	2301      	moveq	r3, #1
 80086b2:	2300      	movne	r3, #0
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	e012      	b.n	80086de <HAL_I2C_Init+0x18e>
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	1e58      	subs	r0, r3, #1
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6859      	ldr	r1, [r3, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	440b      	add	r3, r1
 80086c6:	0099      	lsls	r1, r3, #2
 80086c8:	440b      	add	r3, r1
 80086ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80086ce:	3301      	adds	r3, #1
 80086d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	bf0c      	ite	eq
 80086d8:	2301      	moveq	r3, #1
 80086da:	2300      	movne	r3, #0
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d001      	beq.n	80086e6 <HAL_I2C_Init+0x196>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e022      	b.n	800872c <HAL_I2C_Init+0x1dc>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d10e      	bne.n	800870c <HAL_I2C_Init+0x1bc>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	1e58      	subs	r0, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6859      	ldr	r1, [r3, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	005b      	lsls	r3, r3, #1
 80086fa:	440b      	add	r3, r1
 80086fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8008700:	3301      	adds	r3, #1
 8008702:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800870a:	e00f      	b.n	800872c <HAL_I2C_Init+0x1dc>
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	1e58      	subs	r0, r3, #1
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6859      	ldr	r1, [r3, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	0099      	lsls	r1, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008722:	3301      	adds	r3, #1
 8008724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008728:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800872c:	6879      	ldr	r1, [r7, #4]
 800872e:	6809      	ldr	r1, [r1, #0]
 8008730:	4313      	orrs	r3, r2
 8008732:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	69da      	ldr	r2, [r3, #28]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6a1b      	ldr	r3, [r3, #32]
 8008746:	431a      	orrs	r2, r3
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	430a      	orrs	r2, r1
 800874e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800875a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	6911      	ldr	r1, [r2, #16]
 8008762:	687a      	ldr	r2, [r7, #4]
 8008764:	68d2      	ldr	r2, [r2, #12]
 8008766:	4311      	orrs	r1, r2
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	6812      	ldr	r2, [r2, #0]
 800876c:	430b      	orrs	r3, r1
 800876e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695a      	ldr	r2, [r3, #20]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	699b      	ldr	r3, [r3, #24]
 8008782:	431a      	orrs	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	681a      	ldr	r2, [r3, #0]
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f042 0201 	orr.w	r2, r2, #1
 800879a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2220      	movs	r2, #32
 80087a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	000186a0 	.word	0x000186a0
 80087c8:	001e847f 	.word	0x001e847f
 80087cc:	003d08ff 	.word	0x003d08ff
 80087d0:	431bde83 	.word	0x431bde83
 80087d4:	10624dd3 	.word	0x10624dd3

080087d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b088      	sub	sp, #32
 80087dc:	af02      	add	r7, sp, #8
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	607a      	str	r2, [r7, #4]
 80087e2:	461a      	mov	r2, r3
 80087e4:	460b      	mov	r3, r1
 80087e6:	817b      	strh	r3, [r7, #10]
 80087e8:	4613      	mov	r3, r2
 80087ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80087ec:	f7fe fa1a 	bl	8006c24 <HAL_GetTick>
 80087f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b20      	cmp	r3, #32
 80087fc:	f040 80e0 	bne.w	80089c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	9300      	str	r3, [sp, #0]
 8008804:	2319      	movs	r3, #25
 8008806:	2201      	movs	r2, #1
 8008808:	4970      	ldr	r1, [pc, #448]	; (80089cc <HAL_I2C_Master_Transmit+0x1f4>)
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f001 f90e 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008816:	2302      	movs	r3, #2
 8008818:	e0d3      	b.n	80089c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008820:	2b01      	cmp	r3, #1
 8008822:	d101      	bne.n	8008828 <HAL_I2C_Master_Transmit+0x50>
 8008824:	2302      	movs	r3, #2
 8008826:	e0cc      	b.n	80089c2 <HAL_I2C_Master_Transmit+0x1ea>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b01      	cmp	r3, #1
 800883c:	d007      	beq.n	800884e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f042 0201 	orr.w	r2, r2, #1
 800884c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800885c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2221      	movs	r2, #33	; 0x21
 8008862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2210      	movs	r2, #16
 800886a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	893a      	ldrh	r2, [r7, #8]
 800887e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008884:	b29a      	uxth	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	4a50      	ldr	r2, [pc, #320]	; (80089d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800888e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008890:	8979      	ldrh	r1, [r7, #10]
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	6a3a      	ldr	r2, [r7, #32]
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 fdfa 	bl	8009490 <I2C_MasterRequestWrite>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e08d      	b.n	80089c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80088a6:	2300      	movs	r3, #0
 80088a8:	613b      	str	r3, [r7, #16]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	695b      	ldr	r3, [r3, #20]
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	699b      	ldr	r3, [r3, #24]
 80088b8:	613b      	str	r3, [r7, #16]
 80088ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80088bc:	e066      	b.n	800898c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	6a39      	ldr	r1, [r7, #32]
 80088c2:	68f8      	ldr	r0, [r7, #12]
 80088c4:	f001 f9cc 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80088c8:	4603      	mov	r3, r0
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00d      	beq.n	80088ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	2b04      	cmp	r3, #4
 80088d4:	d107      	bne.n	80088e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	e06b      	b.n	80089c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	781a      	ldrb	r2, [r3, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088fa:	1c5a      	adds	r2, r3, #1
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008904:	b29b      	uxth	r3, r3
 8008906:	3b01      	subs	r3, #1
 8008908:	b29a      	uxth	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008912:	3b01      	subs	r3, #1
 8008914:	b29a      	uxth	r2, r3
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	695b      	ldr	r3, [r3, #20]
 8008920:	f003 0304 	and.w	r3, r3, #4
 8008924:	2b04      	cmp	r3, #4
 8008926:	d11b      	bne.n	8008960 <HAL_I2C_Master_Transmit+0x188>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800892c:	2b00      	cmp	r3, #0
 800892e:	d017      	beq.n	8008960 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008934:	781a      	ldrb	r2, [r3, #0]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	1c5a      	adds	r2, r3, #1
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800894a:	b29b      	uxth	r3, r3
 800894c:	3b01      	subs	r3, #1
 800894e:	b29a      	uxth	r2, r3
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008958:	3b01      	subs	r3, #1
 800895a:	b29a      	uxth	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	6a39      	ldr	r1, [r7, #32]
 8008964:	68f8      	ldr	r0, [r7, #12]
 8008966:	f001 f9c3 	bl	8009cf0 <I2C_WaitOnBTFFlagUntilTimeout>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00d      	beq.n	800898c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008974:	2b04      	cmp	r3, #4
 8008976:	d107      	bne.n	8008988 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008986:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e01a      	b.n	80089c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008990:	2b00      	cmp	r3, #0
 8008992:	d194      	bne.n	80088be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	681a      	ldr	r2, [r3, #0]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2220      	movs	r2, #32
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2200      	movs	r2, #0
 80089b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80089bc:	2300      	movs	r3, #0
 80089be:	e000      	b.n	80089c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80089c0:	2302      	movs	r3, #2
  }
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3718      	adds	r7, #24
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}
 80089ca:	bf00      	nop
 80089cc:	00100002 	.word	0x00100002
 80089d0:	ffff0000 	.word	0xffff0000

080089d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b08c      	sub	sp, #48	; 0x30
 80089d8:	af02      	add	r7, sp, #8
 80089da:	60f8      	str	r0, [r7, #12]
 80089dc:	607a      	str	r2, [r7, #4]
 80089de:	461a      	mov	r2, r3
 80089e0:	460b      	mov	r3, r1
 80089e2:	817b      	strh	r3, [r7, #10]
 80089e4:	4613      	mov	r3, r2
 80089e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80089e8:	f7fe f91c 	bl	8006c24 <HAL_GetTick>
 80089ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	f040 8217 	bne.w	8008e2a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80089fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	2319      	movs	r3, #25
 8008a02:	2201      	movs	r2, #1
 8008a04:	497c      	ldr	r1, [pc, #496]	; (8008bf8 <HAL_I2C_Master_Receive+0x224>)
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	f001 f810 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d001      	beq.n	8008a16 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008a12:	2302      	movs	r3, #2
 8008a14:	e20a      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d101      	bne.n	8008a24 <HAL_I2C_Master_Receive+0x50>
 8008a20:	2302      	movs	r3, #2
 8008a22:	e203      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2201      	movs	r2, #1
 8008a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d007      	beq.n	8008a4a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0201 	orr.w	r2, r2, #1
 8008a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2222      	movs	r2, #34	; 0x22
 8008a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2210      	movs	r2, #16
 8008a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	893a      	ldrh	r2, [r7, #8]
 8008a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a80:	b29a      	uxth	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	4a5c      	ldr	r2, [pc, #368]	; (8008bfc <HAL_I2C_Master_Receive+0x228>)
 8008a8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008a8c:	8979      	ldrh	r1, [r7, #10]
 8008a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fd7e 	bl	8009594 <I2C_MasterRequestRead>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d001      	beq.n	8008aa2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	e1c4      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d113      	bne.n	8008ad2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aaa:	2300      	movs	r3, #0
 8008aac:	623b      	str	r3, [r7, #32]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	623b      	str	r3, [r7, #32]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	623b      	str	r3, [r7, #32]
 8008abe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	681a      	ldr	r2, [r3, #0]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ace:	601a      	str	r2, [r3, #0]
 8008ad0:	e198      	b.n	8008e04 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d11b      	bne.n	8008b12 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	681a      	ldr	r2, [r3, #0]
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ae8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008aea:	2300      	movs	r3, #0
 8008aec:	61fb      	str	r3, [r7, #28]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	61fb      	str	r3, [r7, #28]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	681a      	ldr	r2, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008b0e:	601a      	str	r2, [r3, #0]
 8008b10:	e178      	b.n	8008e04 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b16:	2b02      	cmp	r3, #2
 8008b18:	d11b      	bne.n	8008b52 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b28:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	61bb      	str	r3, [r7, #24]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	69bb      	ldr	r3, [r7, #24]
 8008b50:	e158      	b.n	8008e04 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b62:	2300      	movs	r3, #0
 8008b64:	617b      	str	r3, [r7, #20]
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	699b      	ldr	r3, [r3, #24]
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008b78:	e144      	b.n	8008e04 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	f200 80f1 	bhi.w	8008d66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d123      	bne.n	8008bd4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f001 f8f5 	bl	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d001      	beq.n	8008ba0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008b9c:	2301      	movs	r3, #1
 8008b9e:	e145      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	691a      	ldr	r2, [r3, #16]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008baa:	b2d2      	uxtb	r2, r2
 8008bac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb2:	1c5a      	adds	r2, r3, #1
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bbc:	3b01      	subs	r3, #1
 8008bbe:	b29a      	uxth	r2, r3
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bc8:	b29b      	uxth	r3, r3
 8008bca:	3b01      	subs	r3, #1
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008bd2:	e117      	b.n	8008e04 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d14e      	bne.n	8008c7a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be2:	2200      	movs	r2, #0
 8008be4:	4906      	ldr	r1, [pc, #24]	; (8008c00 <HAL_I2C_Master_Receive+0x22c>)
 8008be6:	68f8      	ldr	r0, [r7, #12]
 8008be8:	f000 ff20 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8008bec:	4603      	mov	r3, r0
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d008      	beq.n	8008c04 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e11a      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
 8008bf6:	bf00      	nop
 8008bf8:	00100002 	.word	0x00100002
 8008bfc:	ffff0000 	.word	0xffff0000
 8008c00:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	691a      	ldr	r2, [r3, #16]
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c26:	1c5a      	adds	r2, r3, #1
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c30:	3b01      	subs	r3, #1
 8008c32:	b29a      	uxth	r2, r3
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c3c:	b29b      	uxth	r3, r3
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	b29a      	uxth	r2, r3
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691a      	ldr	r2, [r3, #16]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c50:	b2d2      	uxtb	r2, r2
 8008c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c58:	1c5a      	adds	r2, r3, #1
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c62:	3b01      	subs	r3, #1
 8008c64:	b29a      	uxth	r2, r3
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b29a      	uxth	r2, r3
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008c78:	e0c4      	b.n	8008e04 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7c:	9300      	str	r3, [sp, #0]
 8008c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c80:	2200      	movs	r2, #0
 8008c82:	496c      	ldr	r1, [pc, #432]	; (8008e34 <HAL_I2C_Master_Receive+0x460>)
 8008c84:	68f8      	ldr	r0, [r7, #12]
 8008c86:	f000 fed1 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d001      	beq.n	8008c94 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008c90:	2301      	movs	r3, #1
 8008c92:	e0cb      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ca2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	691a      	ldr	r2, [r3, #16]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	b2d2      	uxtb	r2, r2
 8008cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	b29a      	uxth	r2, r3
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cdc:	2200      	movs	r2, #0
 8008cde:	4955      	ldr	r1, [pc, #340]	; (8008e34 <HAL_I2C_Master_Receive+0x460>)
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f000 fea3 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8008cec:	2301      	movs	r3, #1
 8008cee:	e09d      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	691a      	ldr	r2, [r3, #16]
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	b2d2      	uxtb	r2, r2
 8008d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d1c:	3b01      	subs	r3, #1
 8008d1e:	b29a      	uxth	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d28:	b29b      	uxth	r3, r3
 8008d2a:	3b01      	subs	r3, #1
 8008d2c:	b29a      	uxth	r2, r3
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d3c:	b2d2      	uxtb	r2, r2
 8008d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d44:	1c5a      	adds	r2, r3, #1
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	b29a      	uxth	r2, r3
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d5a:	b29b      	uxth	r3, r3
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	b29a      	uxth	r2, r3
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008d64:	e04e      	b.n	8008e04 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d6a:	68f8      	ldr	r0, [r7, #12]
 8008d6c:	f001 f808 	bl	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8008d76:	2301      	movs	r3, #1
 8008d78:	e058      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	691a      	ldr	r2, [r3, #16]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	b2d2      	uxtb	r2, r2
 8008d86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	1c5a      	adds	r2, r3, #1
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008d96:	3b01      	subs	r3, #1
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	3b01      	subs	r3, #1
 8008da6:	b29a      	uxth	r2, r3
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f003 0304 	and.w	r3, r3, #4
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d124      	bne.n	8008e04 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dbe:	2b03      	cmp	r3, #3
 8008dc0:	d107      	bne.n	8008dd2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	681a      	ldr	r2, [r3, #0]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008dd0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	691a      	ldr	r2, [r3, #16]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ddc:	b2d2      	uxtb	r2, r2
 8008dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008de4:	1c5a      	adds	r2, r3, #1
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dee:	3b01      	subs	r3, #1
 8008df0:	b29a      	uxth	r2, r3
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dfa:	b29b      	uxth	r3, r3
 8008dfc:	3b01      	subs	r3, #1
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f47f aeb6 	bne.w	8008b7a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008e26:	2300      	movs	r3, #0
 8008e28:	e000      	b.n	8008e2c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8008e2a:	2302      	movs	r3, #2
  }
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3728      	adds	r7, #40	; 0x28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}
 8008e34:	00010004 	.word	0x00010004

08008e38 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af02      	add	r7, sp, #8
 8008e3e:	60f8      	str	r0, [r7, #12]
 8008e40:	4608      	mov	r0, r1
 8008e42:	4611      	mov	r1, r2
 8008e44:	461a      	mov	r2, r3
 8008e46:	4603      	mov	r3, r0
 8008e48:	817b      	strh	r3, [r7, #10]
 8008e4a:	460b      	mov	r3, r1
 8008e4c:	813b      	strh	r3, [r7, #8]
 8008e4e:	4613      	mov	r3, r2
 8008e50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008e52:	f7fd fee7 	bl	8006c24 <HAL_GetTick>
 8008e56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b20      	cmp	r3, #32
 8008e62:	f040 80d9 	bne.w	8009018 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	9300      	str	r3, [sp, #0]
 8008e6a:	2319      	movs	r3, #25
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	496d      	ldr	r1, [pc, #436]	; (8009024 <HAL_I2C_Mem_Write+0x1ec>)
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 fddb 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008e7c:	2302      	movs	r3, #2
 8008e7e:	e0cc      	b.n	800901a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e86:	2b01      	cmp	r3, #1
 8008e88:	d101      	bne.n	8008e8e <HAL_I2C_Mem_Write+0x56>
 8008e8a:	2302      	movs	r3, #2
 8008e8c:	e0c5      	b.n	800901a <HAL_I2C_Mem_Write+0x1e2>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2201      	movs	r2, #1
 8008e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d007      	beq.n	8008eb4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	681a      	ldr	r2, [r3, #0]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0201 	orr.w	r2, r2, #1
 8008eb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ec2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2221      	movs	r2, #33	; 0x21
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2240      	movs	r2, #64	; 0x40
 8008ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	6a3a      	ldr	r2, [r7, #32]
 8008ede:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eea:	b29a      	uxth	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4a4d      	ldr	r2, [pc, #308]	; (8009028 <HAL_I2C_Mem_Write+0x1f0>)
 8008ef4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008ef6:	88f8      	ldrh	r0, [r7, #6]
 8008ef8:	893a      	ldrh	r2, [r7, #8]
 8008efa:	8979      	ldrh	r1, [r7, #10]
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	9301      	str	r3, [sp, #4]
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	9300      	str	r3, [sp, #0]
 8008f04:	4603      	mov	r3, r0
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 fc12 	bl	8009730 <I2C_RequestMemoryWrite>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d052      	beq.n	8008fb8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e081      	b.n	800901a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f1a:	68f8      	ldr	r0, [r7, #12]
 8008f1c:	f000 fea0 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8008f20:	4603      	mov	r3, r0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00d      	beq.n	8008f42 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f2a:	2b04      	cmp	r3, #4
 8008f2c:	d107      	bne.n	8008f3e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f3c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e06b      	b.n	800901a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f46:	781a      	ldrb	r2, [r3, #0]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f52:	1c5a      	adds	r2, r3, #1
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	b29a      	uxth	r2, r3
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	f003 0304 	and.w	r3, r3, #4
 8008f7c:	2b04      	cmp	r3, #4
 8008f7e:	d11b      	bne.n	8008fb8 <HAL_I2C_Mem_Write+0x180>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d017      	beq.n	8008fb8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f8c:	781a      	ldrb	r2, [r3, #0]
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	1c5a      	adds	r2, r3, #1
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	b29a      	uxth	r2, r3
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	3b01      	subs	r3, #1
 8008fb2:	b29a      	uxth	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d1aa      	bne.n	8008f16 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f000 fe93 	bl	8009cf0 <I2C_WaitOnBTFFlagUntilTimeout>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00d      	beq.n	8008fec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	d107      	bne.n	8008fe8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008fe6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e016      	b.n	800901a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ffa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2220      	movs	r2, #32
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009014:	2300      	movs	r3, #0
 8009016:	e000      	b.n	800901a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009018:	2302      	movs	r3, #2
  }
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	00100002 	.word	0x00100002
 8009028:	ffff0000 	.word	0xffff0000

0800902c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b08c      	sub	sp, #48	; 0x30
 8009030:	af02      	add	r7, sp, #8
 8009032:	60f8      	str	r0, [r7, #12]
 8009034:	4608      	mov	r0, r1
 8009036:	4611      	mov	r1, r2
 8009038:	461a      	mov	r2, r3
 800903a:	4603      	mov	r3, r0
 800903c:	817b      	strh	r3, [r7, #10]
 800903e:	460b      	mov	r3, r1
 8009040:	813b      	strh	r3, [r7, #8]
 8009042:	4613      	mov	r3, r2
 8009044:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009046:	f7fd fded 	bl	8006c24 <HAL_GetTick>
 800904a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009052:	b2db      	uxtb	r3, r3
 8009054:	2b20      	cmp	r3, #32
 8009056:	f040 8214 	bne.w	8009482 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800905a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	2319      	movs	r3, #25
 8009060:	2201      	movs	r2, #1
 8009062:	497b      	ldr	r1, [pc, #492]	; (8009250 <HAL_I2C_Mem_Read+0x224>)
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 fce1 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 800906a:	4603      	mov	r3, r0
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8009070:	2302      	movs	r3, #2
 8009072:	e207      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800907a:	2b01      	cmp	r3, #1
 800907c:	d101      	bne.n	8009082 <HAL_I2C_Mem_Read+0x56>
 800907e:	2302      	movs	r3, #2
 8009080:	e200      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0301 	and.w	r3, r3, #1
 8009094:	2b01      	cmp	r3, #1
 8009096:	d007      	beq.n	80090a8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f042 0201 	orr.w	r2, r2, #1
 80090a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2222      	movs	r2, #34	; 0x22
 80090bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2240      	movs	r2, #64	; 0x40
 80090c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80090d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090de:	b29a      	uxth	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	4a5b      	ldr	r2, [pc, #364]	; (8009254 <HAL_I2C_Mem_Read+0x228>)
 80090e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80090ea:	88f8      	ldrh	r0, [r7, #6]
 80090ec:	893a      	ldrh	r2, [r7, #8]
 80090ee:	8979      	ldrh	r1, [r7, #10]
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	9301      	str	r3, [sp, #4]
 80090f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f6:	9300      	str	r3, [sp, #0]
 80090f8:	4603      	mov	r3, r0
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 fbae 	bl	800985c <I2C_RequestMemoryRead>
 8009100:	4603      	mov	r3, r0
 8009102:	2b00      	cmp	r3, #0
 8009104:	d001      	beq.n	800910a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e1bc      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800910e:	2b00      	cmp	r3, #0
 8009110:	d113      	bne.n	800913a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009112:	2300      	movs	r3, #0
 8009114:	623b      	str	r3, [r7, #32]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	695b      	ldr	r3, [r3, #20]
 800911c:	623b      	str	r3, [r7, #32]
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	623b      	str	r3, [r7, #32]
 8009126:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009136:	601a      	str	r2, [r3, #0]
 8009138:	e190      	b.n	800945c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800913e:	2b01      	cmp	r3, #1
 8009140:	d11b      	bne.n	800917a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009150:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009152:	2300      	movs	r3, #0
 8009154:	61fb      	str	r3, [r7, #28]
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	695b      	ldr	r3, [r3, #20]
 800915c:	61fb      	str	r3, [r7, #28]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	61fb      	str	r3, [r7, #28]
 8009166:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	e170      	b.n	800945c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800917e:	2b02      	cmp	r3, #2
 8009180:	d11b      	bne.n	80091ba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009190:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091a2:	2300      	movs	r3, #0
 80091a4:	61bb      	str	r3, [r7, #24]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	61bb      	str	r3, [r7, #24]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	699b      	ldr	r3, [r3, #24]
 80091b4:	61bb      	str	r3, [r7, #24]
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	e150      	b.n	800945c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80091ba:	2300      	movs	r3, #0
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	695b      	ldr	r3, [r3, #20]
 80091c4:	617b      	str	r3, [r7, #20]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80091d0:	e144      	b.n	800945c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d6:	2b03      	cmp	r3, #3
 80091d8:	f200 80f1 	bhi.w	80093be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e0:	2b01      	cmp	r3, #1
 80091e2:	d123      	bne.n	800922c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f000 fdc9 	bl	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d001      	beq.n	80091f8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e145      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	691a      	ldr	r2, [r3, #16]
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009202:	b2d2      	uxtb	r2, r2
 8009204:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800920a:	1c5a      	adds	r2, r3, #1
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009214:	3b01      	subs	r3, #1
 8009216:	b29a      	uxth	r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009220:	b29b      	uxth	r3, r3
 8009222:	3b01      	subs	r3, #1
 8009224:	b29a      	uxth	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	855a      	strh	r2, [r3, #42]	; 0x2a
 800922a:	e117      	b.n	800945c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009230:	2b02      	cmp	r3, #2
 8009232:	d14e      	bne.n	80092d2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	9300      	str	r3, [sp, #0]
 8009238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923a:	2200      	movs	r2, #0
 800923c:	4906      	ldr	r1, [pc, #24]	; (8009258 <HAL_I2C_Mem_Read+0x22c>)
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f000 fbf4 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d008      	beq.n	800925c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
 800924c:	e11a      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
 800924e:	bf00      	nop
 8009250:	00100002 	.word	0x00100002
 8009254:	ffff0000 	.word	0xffff0000
 8009258:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	681a      	ldr	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800926a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	691a      	ldr	r2, [r3, #16]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009276:	b2d2      	uxtb	r2, r2
 8009278:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	1c5a      	adds	r2, r3, #1
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009288:	3b01      	subs	r3, #1
 800928a:	b29a      	uxth	r2, r3
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009294:	b29b      	uxth	r3, r3
 8009296:	3b01      	subs	r3, #1
 8009298:	b29a      	uxth	r2, r3
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	691a      	ldr	r2, [r3, #16]
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a8:	b2d2      	uxtb	r2, r2
 80092aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b0:	1c5a      	adds	r2, r3, #1
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092ba:	3b01      	subs	r3, #1
 80092bc:	b29a      	uxth	r2, r3
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	3b01      	subs	r3, #1
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	855a      	strh	r2, [r3, #42]	; 0x2a
 80092d0:	e0c4      	b.n	800945c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80092d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d4:	9300      	str	r3, [sp, #0]
 80092d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d8:	2200      	movs	r2, #0
 80092da:	496c      	ldr	r1, [pc, #432]	; (800948c <HAL_I2C_Mem_Read+0x460>)
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 fba5 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	e0cb      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	681a      	ldr	r2, [r3, #0]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	691a      	ldr	r2, [r3, #16]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	b2d2      	uxtb	r2, r2
 8009308:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	1c5a      	adds	r2, r3, #1
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009318:	3b01      	subs	r3, #1
 800931a:	b29a      	uxth	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009324:	b29b      	uxth	r3, r3
 8009326:	3b01      	subs	r3, #1
 8009328:	b29a      	uxth	r2, r3
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800932e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	2200      	movs	r2, #0
 8009336:	4955      	ldr	r1, [pc, #340]	; (800948c <HAL_I2C_Mem_Read+0x460>)
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f000 fb77 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 800933e:	4603      	mov	r3, r0
 8009340:	2b00      	cmp	r3, #0
 8009342:	d001      	beq.n	8009348 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009344:	2301      	movs	r3, #1
 8009346:	e09d      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691a      	ldr	r2, [r3, #16]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009362:	b2d2      	uxtb	r2, r2
 8009364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936a:	1c5a      	adds	r2, r3, #1
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009374:	3b01      	subs	r3, #1
 8009376:	b29a      	uxth	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009380:	b29b      	uxth	r3, r3
 8009382:	3b01      	subs	r3, #1
 8009384:	b29a      	uxth	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009394:	b2d2      	uxtb	r2, r2
 8009396:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800939c:	1c5a      	adds	r2, r3, #1
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093a6:	3b01      	subs	r3, #1
 80093a8:	b29a      	uxth	r2, r3
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	3b01      	subs	r3, #1
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093bc:	e04e      	b.n	800945c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80093be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80093c2:	68f8      	ldr	r0, [r7, #12]
 80093c4:	f000 fcdc 	bl	8009d80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80093c8:	4603      	mov	r3, r0
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d001      	beq.n	80093d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80093ce:	2301      	movs	r3, #1
 80093d0:	e058      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	691a      	ldr	r2, [r3, #16]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	b2d2      	uxtb	r2, r2
 80093de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	f003 0304 	and.w	r3, r3, #4
 800940e:	2b04      	cmp	r3, #4
 8009410:	d124      	bne.n	800945c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009416:	2b03      	cmp	r3, #3
 8009418:	d107      	bne.n	800942a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009428:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	691a      	ldr	r2, [r3, #16]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009434:	b2d2      	uxtb	r2, r2
 8009436:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943c:	1c5a      	adds	r2, r3, #1
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009446:	3b01      	subs	r3, #1
 8009448:	b29a      	uxth	r2, r3
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009452:	b29b      	uxth	r3, r3
 8009454:	3b01      	subs	r3, #1
 8009456:	b29a      	uxth	r2, r3
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009460:	2b00      	cmp	r3, #0
 8009462:	f47f aeb6 	bne.w	80091d2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2220      	movs	r2, #32
 800946a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2200      	movs	r2, #0
 800947a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800947e:	2300      	movs	r3, #0
 8009480:	e000      	b.n	8009484 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009482:	2302      	movs	r3, #2
  }
}
 8009484:	4618      	mov	r0, r3
 8009486:	3728      	adds	r7, #40	; 0x28
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}
 800948c:	00010004 	.word	0x00010004

08009490 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b088      	sub	sp, #32
 8009494:	af02      	add	r7, sp, #8
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	607a      	str	r2, [r7, #4]
 800949a:	603b      	str	r3, [r7, #0]
 800949c:	460b      	mov	r3, r1
 800949e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	2b08      	cmp	r3, #8
 80094aa:	d006      	beq.n	80094ba <I2C_MasterRequestWrite+0x2a>
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d003      	beq.n	80094ba <I2C_MasterRequestWrite+0x2a>
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80094b8:	d108      	bne.n	80094cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	e00b      	b.n	80094e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	2b12      	cmp	r3, #18
 80094d2:	d107      	bne.n	80094e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80094e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	9300      	str	r3, [sp, #0]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2200      	movs	r2, #0
 80094ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80094f0:	68f8      	ldr	r0, [r7, #12]
 80094f2:	f000 fa9b 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00d      	beq.n	8009518 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d103      	bne.n	8009514 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009512:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e035      	b.n	8009584 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	691b      	ldr	r3, [r3, #16]
 800951c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009520:	d108      	bne.n	8009534 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009522:	897b      	ldrh	r3, [r7, #10]
 8009524:	b2db      	uxtb	r3, r3
 8009526:	461a      	mov	r2, r3
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009530:	611a      	str	r2, [r3, #16]
 8009532:	e01b      	b.n	800956c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009534:	897b      	ldrh	r3, [r7, #10]
 8009536:	11db      	asrs	r3, r3, #7
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0306 	and.w	r3, r3, #6
 800953e:	b2db      	uxtb	r3, r3
 8009540:	f063 030f 	orn	r3, r3, #15
 8009544:	b2da      	uxtb	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	490e      	ldr	r1, [pc, #56]	; (800958c <I2C_MasterRequestWrite+0xfc>)
 8009552:	68f8      	ldr	r0, [r7, #12]
 8009554:	f000 fae4 	bl	8009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009558:	4603      	mov	r3, r0
 800955a:	2b00      	cmp	r3, #0
 800955c:	d001      	beq.n	8009562 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e010      	b.n	8009584 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009562:	897b      	ldrh	r3, [r7, #10]
 8009564:	b2da      	uxtb	r2, r3
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	4907      	ldr	r1, [pc, #28]	; (8009590 <I2C_MasterRequestWrite+0x100>)
 8009572:	68f8      	ldr	r0, [r7, #12]
 8009574:	f000 fad4 	bl	8009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009578:	4603      	mov	r3, r0
 800957a:	2b00      	cmp	r3, #0
 800957c:	d001      	beq.n	8009582 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e000      	b.n	8009584 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	00010008 	.word	0x00010008
 8009590:	00010002 	.word	0x00010002

08009594 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b088      	sub	sp, #32
 8009598:	af02      	add	r7, sp, #8
 800959a:	60f8      	str	r0, [r7, #12]
 800959c:	607a      	str	r2, [r7, #4]
 800959e:	603b      	str	r3, [r7, #0]
 80095a0:	460b      	mov	r3, r1
 80095a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	681a      	ldr	r2, [r3, #0]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	2b08      	cmp	r3, #8
 80095be:	d006      	beq.n	80095ce <I2C_MasterRequestRead+0x3a>
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	2b01      	cmp	r3, #1
 80095c4:	d003      	beq.n	80095ce <I2C_MasterRequestRead+0x3a>
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80095cc:	d108      	bne.n	80095e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e00b      	b.n	80095f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095e4:	2b11      	cmp	r3, #17
 80095e6:	d107      	bne.n	80095f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	681a      	ldr	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80095f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2200      	movs	r2, #0
 8009600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	f000 fa11 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d00d      	beq.n	800962c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800961a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961e:	d103      	bne.n	8009628 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009628:	2303      	movs	r3, #3
 800962a:	e079      	b.n	8009720 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009634:	d108      	bne.n	8009648 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009636:	897b      	ldrh	r3, [r7, #10]
 8009638:	b2db      	uxtb	r3, r3
 800963a:	f043 0301 	orr.w	r3, r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	611a      	str	r2, [r3, #16]
 8009646:	e05f      	b.n	8009708 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009648:	897b      	ldrh	r3, [r7, #10]
 800964a:	11db      	asrs	r3, r3, #7
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f003 0306 	and.w	r3, r3, #6
 8009652:	b2db      	uxtb	r3, r3
 8009654:	f063 030f 	orn	r3, r3, #15
 8009658:	b2da      	uxtb	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	687a      	ldr	r2, [r7, #4]
 8009664:	4930      	ldr	r1, [pc, #192]	; (8009728 <I2C_MasterRequestRead+0x194>)
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 fa5a 	bl	8009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009672:	2301      	movs	r3, #1
 8009674:	e054      	b.n	8009720 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009676:	897b      	ldrh	r3, [r7, #10]
 8009678:	b2da      	uxtb	r2, r3
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	687a      	ldr	r2, [r7, #4]
 8009684:	4929      	ldr	r1, [pc, #164]	; (800972c <I2C_MasterRequestRead+0x198>)
 8009686:	68f8      	ldr	r0, [r7, #12]
 8009688:	f000 fa4a 	bl	8009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009692:	2301      	movs	r3, #1
 8009694:	e044      	b.n	8009720 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009696:	2300      	movs	r3, #0
 8009698:	613b      	str	r3, [r7, #16]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	613b      	str	r3, [r7, #16]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	699b      	ldr	r3, [r3, #24]
 80096a8:	613b      	str	r3, [r7, #16]
 80096aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	9300      	str	r3, [sp, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80096c8:	68f8      	ldr	r0, [r7, #12]
 80096ca:	f000 f9af 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00d      	beq.n	80096f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096e2:	d103      	bne.n	80096ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e017      	b.n	8009720 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80096f0:	897b      	ldrh	r3, [r7, #10]
 80096f2:	11db      	asrs	r3, r3, #7
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	f003 0306 	and.w	r3, r3, #6
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	f063 030e 	orn	r3, r3, #14
 8009700:	b2da      	uxtb	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	4907      	ldr	r1, [pc, #28]	; (800972c <I2C_MasterRequestRead+0x198>)
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 fa06 	bl	8009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	00010008 	.word	0x00010008
 800972c:	00010002 	.word	0x00010002

08009730 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b088      	sub	sp, #32
 8009734:	af02      	add	r7, sp, #8
 8009736:	60f8      	str	r0, [r7, #12]
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	461a      	mov	r2, r3
 800973e:	4603      	mov	r3, r0
 8009740:	817b      	strh	r3, [r7, #10]
 8009742:	460b      	mov	r3, r1
 8009744:	813b      	strh	r3, [r7, #8]
 8009746:	4613      	mov	r3, r2
 8009748:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009758:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800975a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975c:	9300      	str	r3, [sp, #0]
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	2200      	movs	r2, #0
 8009762:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 f960 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00d      	beq.n	800978e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009780:	d103      	bne.n	800978a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009788:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800978a:	2303      	movs	r3, #3
 800978c:	e05f      	b.n	800984e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800978e:	897b      	ldrh	r3, [r7, #10]
 8009790:	b2db      	uxtb	r3, r3
 8009792:	461a      	mov	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800979c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800979e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a0:	6a3a      	ldr	r2, [r7, #32]
 80097a2:	492d      	ldr	r1, [pc, #180]	; (8009858 <I2C_RequestMemoryWrite+0x128>)
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 f9bb 	bl	8009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e04c      	b.n	800984e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097b4:	2300      	movs	r3, #0
 80097b6:	617b      	str	r3, [r7, #20]
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	617b      	str	r3, [r7, #20]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	699b      	ldr	r3, [r3, #24]
 80097c6:	617b      	str	r3, [r7, #20]
 80097c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097cc:	6a39      	ldr	r1, [r7, #32]
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 fa46 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00d      	beq.n	80097f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097de:	2b04      	cmp	r3, #4
 80097e0:	d107      	bne.n	80097f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e02b      	b.n	800984e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80097f6:	88fb      	ldrh	r3, [r7, #6]
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d105      	bne.n	8009808 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80097fc:	893b      	ldrh	r3, [r7, #8]
 80097fe:	b2da      	uxtb	r2, r3
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	611a      	str	r2, [r3, #16]
 8009806:	e021      	b.n	800984c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009808:	893b      	ldrh	r3, [r7, #8]
 800980a:	0a1b      	lsrs	r3, r3, #8
 800980c:	b29b      	uxth	r3, r3
 800980e:	b2da      	uxtb	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009818:	6a39      	ldr	r1, [r7, #32]
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 fa20 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009820:	4603      	mov	r3, r0
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00d      	beq.n	8009842 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800982a:	2b04      	cmp	r3, #4
 800982c:	d107      	bne.n	800983e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800983c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800983e:	2301      	movs	r3, #1
 8009840:	e005      	b.n	800984e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009842:	893b      	ldrh	r3, [r7, #8]
 8009844:	b2da      	uxtb	r2, r3
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800984c:	2300      	movs	r3, #0
}
 800984e:	4618      	mov	r0, r3
 8009850:	3718      	adds	r7, #24
 8009852:	46bd      	mov	sp, r7
 8009854:	bd80      	pop	{r7, pc}
 8009856:	bf00      	nop
 8009858:	00010002 	.word	0x00010002

0800985c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b088      	sub	sp, #32
 8009860:	af02      	add	r7, sp, #8
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	4608      	mov	r0, r1
 8009866:	4611      	mov	r1, r2
 8009868:	461a      	mov	r2, r3
 800986a:	4603      	mov	r3, r0
 800986c:	817b      	strh	r3, [r7, #10]
 800986e:	460b      	mov	r3, r1
 8009870:	813b      	strh	r3, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681a      	ldr	r2, [r3, #0]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009884:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	6a3b      	ldr	r3, [r7, #32]
 800989c:	2200      	movs	r2, #0
 800989e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f8c2 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 80098a8:	4603      	mov	r3, r0
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00d      	beq.n	80098ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098bc:	d103      	bne.n	80098c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e0aa      	b.n	8009a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098ca:	897b      	ldrh	r3, [r7, #10]
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	461a      	mov	r2, r3
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	6a3a      	ldr	r2, [r7, #32]
 80098de:	4952      	ldr	r1, [pc, #328]	; (8009a28 <I2C_RequestMemoryRead+0x1cc>)
 80098e0:	68f8      	ldr	r0, [r7, #12]
 80098e2:	f000 f91d 	bl	8009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098e6:	4603      	mov	r3, r0
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d001      	beq.n	80098f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80098ec:	2301      	movs	r3, #1
 80098ee:	e097      	b.n	8009a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	695b      	ldr	r3, [r3, #20]
 80098fa:	617b      	str	r3, [r7, #20]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	699b      	ldr	r3, [r3, #24]
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009908:	6a39      	ldr	r1, [r7, #32]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 f9a8 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00d      	beq.n	8009932 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	2b04      	cmp	r3, #4
 800991c:	d107      	bne.n	800992e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800992c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800992e:	2301      	movs	r3, #1
 8009930:	e076      	b.n	8009a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009932:	88fb      	ldrh	r3, [r7, #6]
 8009934:	2b01      	cmp	r3, #1
 8009936:	d105      	bne.n	8009944 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009938:	893b      	ldrh	r3, [r7, #8]
 800993a:	b2da      	uxtb	r2, r3
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	611a      	str	r2, [r3, #16]
 8009942:	e021      	b.n	8009988 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009944:	893b      	ldrh	r3, [r7, #8]
 8009946:	0a1b      	lsrs	r3, r3, #8
 8009948:	b29b      	uxth	r3, r3
 800994a:	b2da      	uxtb	r2, r3
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009954:	6a39      	ldr	r1, [r7, #32]
 8009956:	68f8      	ldr	r0, [r7, #12]
 8009958:	f000 f982 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00d      	beq.n	800997e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009966:	2b04      	cmp	r3, #4
 8009968:	d107      	bne.n	800997a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800997a:	2301      	movs	r3, #1
 800997c:	e050      	b.n	8009a20 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800997e:	893b      	ldrh	r3, [r7, #8]
 8009980:	b2da      	uxtb	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998a:	6a39      	ldr	r1, [r7, #32]
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f967 	bl	8009c60 <I2C_WaitOnTXEFlagUntilTimeout>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00d      	beq.n	80099b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800999c:	2b04      	cmp	r3, #4
 800999e:	d107      	bne.n	80099b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	681a      	ldr	r2, [r3, #0]
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099b0:	2301      	movs	r3, #1
 80099b2:	e035      	b.n	8009a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681a      	ldr	r2, [r3, #0]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	6a3b      	ldr	r3, [r7, #32]
 80099ca:	2200      	movs	r2, #0
 80099cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099d0:	68f8      	ldr	r0, [r7, #12]
 80099d2:	f000 f82b 	bl	8009a2c <I2C_WaitOnFlagUntilTimeout>
 80099d6:	4603      	mov	r3, r0
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00d      	beq.n	80099f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099ea:	d103      	bne.n	80099f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e013      	b.n	8009a20 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80099f8:	897b      	ldrh	r3, [r7, #10]
 80099fa:	b2db      	uxtb	r3, r3
 80099fc:	f043 0301 	orr.w	r3, r3, #1
 8009a00:	b2da      	uxtb	r2, r3
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a0a:	6a3a      	ldr	r2, [r7, #32]
 8009a0c:	4906      	ldr	r1, [pc, #24]	; (8009a28 <I2C_RequestMemoryRead+0x1cc>)
 8009a0e:	68f8      	ldr	r0, [r7, #12]
 8009a10:	f000 f886 	bl	8009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a14:	4603      	mov	r3, r0
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d001      	beq.n	8009a1e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	e000      	b.n	8009a20 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009a1e:	2300      	movs	r3, #0
}
 8009a20:	4618      	mov	r0, r3
 8009a22:	3718      	adds	r7, #24
 8009a24:	46bd      	mov	sp, r7
 8009a26:	bd80      	pop	{r7, pc}
 8009a28:	00010002 	.word	0x00010002

08009a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	603b      	str	r3, [r7, #0]
 8009a38:	4613      	mov	r3, r2
 8009a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a3c:	e048      	b.n	8009ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a44:	d044      	beq.n	8009ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a46:	f7fd f8ed 	bl	8006c24 <HAL_GetTick>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	1ad3      	subs	r3, r2, r3
 8009a50:	683a      	ldr	r2, [r7, #0]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d302      	bcc.n	8009a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d139      	bne.n	8009ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a5c:	68bb      	ldr	r3, [r7, #8]
 8009a5e:	0c1b      	lsrs	r3, r3, #16
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d10d      	bne.n	8009a82 <I2C_WaitOnFlagUntilTimeout+0x56>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	695b      	ldr	r3, [r3, #20]
 8009a6c:	43da      	mvns	r2, r3
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	4013      	ands	r3, r2
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	bf0c      	ite	eq
 8009a78:	2301      	moveq	r3, #1
 8009a7a:	2300      	movne	r3, #0
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	461a      	mov	r2, r3
 8009a80:	e00c      	b.n	8009a9c <I2C_WaitOnFlagUntilTimeout+0x70>
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	43da      	mvns	r2, r3
 8009a8a:	68bb      	ldr	r3, [r7, #8]
 8009a8c:	4013      	ands	r3, r2
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bf0c      	ite	eq
 8009a94:	2301      	moveq	r3, #1
 8009a96:	2300      	movne	r3, #0
 8009a98:	b2db      	uxtb	r3, r3
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	79fb      	ldrb	r3, [r7, #7]
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d116      	bne.n	8009ad0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009abc:	f043 0220 	orr.w	r2, r3, #32
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	e023      	b.n	8009b18 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	0c1b      	lsrs	r3, r3, #16
 8009ad4:	b2db      	uxtb	r3, r3
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d10d      	bne.n	8009af6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	43da      	mvns	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	4013      	ands	r3, r2
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bf0c      	ite	eq
 8009aec:	2301      	moveq	r3, #1
 8009aee:	2300      	movne	r3, #0
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	461a      	mov	r2, r3
 8009af4:	e00c      	b.n	8009b10 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	43da      	mvns	r2, r3
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	4013      	ands	r3, r2
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	bf0c      	ite	eq
 8009b08:	2301      	moveq	r3, #1
 8009b0a:	2300      	movne	r3, #0
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	461a      	mov	r2, r3
 8009b10:	79fb      	ldrb	r3, [r7, #7]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	d093      	beq.n	8009a3e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b084      	sub	sp, #16
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	60f8      	str	r0, [r7, #12]
 8009b28:	60b9      	str	r1, [r7, #8]
 8009b2a:	607a      	str	r2, [r7, #4]
 8009b2c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b2e:	e071      	b.n	8009c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	695b      	ldr	r3, [r3, #20]
 8009b36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b3e:	d123      	bne.n	8009b88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b4e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b74:	f043 0204 	orr.w	r2, r3, #4
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b84:	2301      	movs	r3, #1
 8009b86:	e067      	b.n	8009c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b8e:	d041      	beq.n	8009c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b90:	f7fd f848 	bl	8006c24 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d302      	bcc.n	8009ba6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d136      	bne.n	8009c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	0c1b      	lsrs	r3, r3, #16
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	2b01      	cmp	r3, #1
 8009bae:	d10c      	bne.n	8009bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	43da      	mvns	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	4013      	ands	r3, r2
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	bf14      	ite	ne
 8009bc2:	2301      	movne	r3, #1
 8009bc4:	2300      	moveq	r3, #0
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	e00b      	b.n	8009be2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	43da      	mvns	r2, r3
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	bf14      	ite	ne
 8009bdc:	2301      	movne	r3, #1
 8009bde:	2300      	moveq	r3, #0
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d016      	beq.n	8009c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	2200      	movs	r2, #0
 8009bea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c00:	f043 0220 	orr.w	r2, r3, #32
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e021      	b.n	8009c58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	0c1b      	lsrs	r3, r3, #16
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d10c      	bne.n	8009c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	695b      	ldr	r3, [r3, #20]
 8009c24:	43da      	mvns	r2, r3
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	4013      	ands	r3, r2
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	bf14      	ite	ne
 8009c30:	2301      	movne	r3, #1
 8009c32:	2300      	moveq	r3, #0
 8009c34:	b2db      	uxtb	r3, r3
 8009c36:	e00b      	b.n	8009c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	699b      	ldr	r3, [r3, #24]
 8009c3e:	43da      	mvns	r2, r3
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	4013      	ands	r3, r2
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	bf14      	ite	ne
 8009c4a:	2301      	movne	r3, #1
 8009c4c:	2300      	moveq	r3, #0
 8009c4e:	b2db      	uxtb	r3, r3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f47f af6d 	bne.w	8009b30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c6c:	e034      	b.n	8009cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c6e:	68f8      	ldr	r0, [r7, #12]
 8009c70:	f000 f8e3 	bl	8009e3a <I2C_IsAcknowledgeFailed>
 8009c74:	4603      	mov	r3, r0
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d001      	beq.n	8009c7e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e034      	b.n	8009ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c84:	d028      	beq.n	8009cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c86:	f7fc ffcd 	bl	8006c24 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	68ba      	ldr	r2, [r7, #8]
 8009c92:	429a      	cmp	r2, r3
 8009c94:	d302      	bcc.n	8009c9c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d11d      	bne.n	8009cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	695b      	ldr	r3, [r3, #20]
 8009ca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ca6:	2b80      	cmp	r3, #128	; 0x80
 8009ca8:	d016      	beq.n	8009cd8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	2200      	movs	r2, #0
 8009cae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2220      	movs	r2, #32
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cc4:	f043 0220 	orr.w	r2, r3, #32
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e007      	b.n	8009ce8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	695b      	ldr	r3, [r3, #20]
 8009cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ce2:	2b80      	cmp	r3, #128	; 0x80
 8009ce4:	d1c3      	bne.n	8009c6e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009cfc:	e034      	b.n	8009d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009cfe:	68f8      	ldr	r0, [r7, #12]
 8009d00:	f000 f89b 	bl	8009e3a <I2C_IsAcknowledgeFailed>
 8009d04:	4603      	mov	r3, r0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d001      	beq.n	8009d0e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d0a:	2301      	movs	r3, #1
 8009d0c:	e034      	b.n	8009d78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d14:	d028      	beq.n	8009d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d16:	f7fc ff85 	bl	8006c24 <HAL_GetTick>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d302      	bcc.n	8009d2c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d11d      	bne.n	8009d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	2b04      	cmp	r3, #4
 8009d38:	d016      	beq.n	8009d68 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2220      	movs	r2, #32
 8009d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d54:	f043 0220 	orr.w	r2, r3, #32
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e007      	b.n	8009d78 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	695b      	ldr	r3, [r3, #20]
 8009d6e:	f003 0304 	and.w	r3, r3, #4
 8009d72:	2b04      	cmp	r3, #4
 8009d74:	d1c3      	bne.n	8009cfe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}

08009d80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b084      	sub	sp, #16
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d8c:	e049      	b.n	8009e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	695b      	ldr	r3, [r3, #20]
 8009d94:	f003 0310 	and.w	r3, r3, #16
 8009d98:	2b10      	cmp	r3, #16
 8009d9a:	d119      	bne.n	8009dd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f06f 0210 	mvn.w	r2, #16
 8009da4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	2200      	movs	r2, #0
 8009daa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	2220      	movs	r2, #32
 8009db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2200      	movs	r2, #0
 8009db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e030      	b.n	8009e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009dd0:	f7fc ff28 	bl	8006c24 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	68ba      	ldr	r2, [r7, #8]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d302      	bcc.n	8009de6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d11d      	bne.n	8009e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	695b      	ldr	r3, [r3, #20]
 8009dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009df0:	2b40      	cmp	r3, #64	; 0x40
 8009df2:	d016      	beq.n	8009e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	2200      	movs	r2, #0
 8009df8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2220      	movs	r2, #32
 8009dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	f043 0220 	orr.w	r2, r3, #32
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e1e:	2301      	movs	r3, #1
 8009e20:	e007      	b.n	8009e32 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	695b      	ldr	r3, [r3, #20]
 8009e28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e2c:	2b40      	cmp	r3, #64	; 0x40
 8009e2e:	d1ae      	bne.n	8009d8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b083      	sub	sp, #12
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	695b      	ldr	r3, [r3, #20]
 8009e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e50:	d11b      	bne.n	8009e8a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e5a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2220      	movs	r2, #32
 8009e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	f043 0204 	orr.w	r2, r3, #4
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	e000      	b.n	8009e8c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009e8a:	2300      	movs	r3, #0
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	370c      	adds	r7, #12
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8009e9e:	4b06      	ldr	r3, [pc, #24]	; (8009eb8 <HAL_PWR_EnableBkUpAccess+0x20>)
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8009ea4:	4b05      	ldr	r3, [pc, #20]	; (8009ebc <HAL_PWR_EnableBkUpAccess+0x24>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8009eaa:	687b      	ldr	r3, [r7, #4]
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	420e0020 	.word	0x420e0020
 8009ebc:	40007000 	.word	0x40007000

08009ec0 <HAL_PWREx_EnableBkUpReg>:
/**
  * @brief Enables the Backup Regulator.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableBkUpReg(void)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	607b      	str	r3, [r7, #4]

  *(__IO uint32_t *) CSR_BRE_BB = (uint32_t)ENABLE;
 8009eca:	4b0e      	ldr	r3, [pc, #56]	; (8009f04 <HAL_PWREx_EnableBkUpReg+0x44>)
 8009ecc:	2201      	movs	r2, #1
 8009ece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009ed0:	f7fc fea8 	bl	8006c24 <HAL_GetTick>
 8009ed4:	6078      	str	r0, [r7, #4]

  /* Wait till Backup regulator ready flag is set */  
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8009ed6:	e009      	b.n	8009eec <HAL_PWREx_EnableBkUpReg+0x2c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_BKPREG_TIMEOUT_VALUE)
 8009ed8:	f7fc fea4 	bl	8006c24 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ee6:	d901      	bls.n	8009eec <HAL_PWREx_EnableBkUpReg+0x2c>
    {
      return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e006      	b.n	8009efa <HAL_PWREx_EnableBkUpReg+0x3a>
  while(__HAL_PWR_GET_FLAG(PWR_FLAG_BRR) == RESET)
 8009eec:	4b06      	ldr	r3, [pc, #24]	; (8009f08 <HAL_PWREx_EnableBkUpReg+0x48>)
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f003 0308 	and.w	r3, r3, #8
 8009ef4:	2b08      	cmp	r3, #8
 8009ef6:	d1ef      	bne.n	8009ed8 <HAL_PWREx_EnableBkUpReg+0x18>
    } 
  }
  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3708      	adds	r7, #8
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	420e00a4 	.word	0x420e00a4
 8009f08:	40007000 	.word	0x40007000

08009f0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b086      	sub	sp, #24
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d101      	bne.n	8009f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	e267      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f003 0301 	and.w	r3, r3, #1
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d075      	beq.n	800a016 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f2a:	4b88      	ldr	r3, [pc, #544]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f2c:	689b      	ldr	r3, [r3, #8]
 8009f2e:	f003 030c 	and.w	r3, r3, #12
 8009f32:	2b04      	cmp	r3, #4
 8009f34:	d00c      	beq.n	8009f50 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f36:	4b85      	ldr	r3, [pc, #532]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f38:	689b      	ldr	r3, [r3, #8]
 8009f3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009f3e:	2b08      	cmp	r3, #8
 8009f40:	d112      	bne.n	8009f68 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f42:	4b82      	ldr	r3, [pc, #520]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f44:	685b      	ldr	r3, [r3, #4]
 8009f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f4e:	d10b      	bne.n	8009f68 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009f50:	4b7e      	ldr	r3, [pc, #504]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d05b      	beq.n	800a014 <HAL_RCC_OscConfig+0x108>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d157      	bne.n	800a014 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009f64:	2301      	movs	r3, #1
 8009f66:	e242      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f70:	d106      	bne.n	8009f80 <HAL_RCC_OscConfig+0x74>
 8009f72:	4b76      	ldr	r3, [pc, #472]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a75      	ldr	r2, [pc, #468]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f7c:	6013      	str	r3, [r2, #0]
 8009f7e:	e01d      	b.n	8009fbc <HAL_RCC_OscConfig+0xb0>
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f88:	d10c      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x98>
 8009f8a:	4b70      	ldr	r3, [pc, #448]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	4a6f      	ldr	r2, [pc, #444]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f94:	6013      	str	r3, [r2, #0]
 8009f96:	4b6d      	ldr	r3, [pc, #436]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a6c      	ldr	r2, [pc, #432]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	e00b      	b.n	8009fbc <HAL_RCC_OscConfig+0xb0>
 8009fa4:	4b69      	ldr	r3, [pc, #420]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a68      	ldr	r2, [pc, #416]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	4b66      	ldr	r3, [pc, #408]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	4a65      	ldr	r2, [pc, #404]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d013      	beq.n	8009fec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fc4:	f7fc fe2e 	bl	8006c24 <HAL_GetTick>
 8009fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fca:	e008      	b.n	8009fde <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009fcc:	f7fc fe2a 	bl	8006c24 <HAL_GetTick>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	693b      	ldr	r3, [r7, #16]
 8009fd4:	1ad3      	subs	r3, r2, r3
 8009fd6:	2b64      	cmp	r3, #100	; 0x64
 8009fd8:	d901      	bls.n	8009fde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009fda:	2303      	movs	r3, #3
 8009fdc:	e207      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009fde:	4b5b      	ldr	r3, [pc, #364]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d0f0      	beq.n	8009fcc <HAL_RCC_OscConfig+0xc0>
 8009fea:	e014      	b.n	800a016 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fec:	f7fc fe1a 	bl	8006c24 <HAL_GetTick>
 8009ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ff2:	e008      	b.n	800a006 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ff4:	f7fc fe16 	bl	8006c24 <HAL_GetTick>
 8009ff8:	4602      	mov	r2, r0
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	1ad3      	subs	r3, r2, r3
 8009ffe:	2b64      	cmp	r3, #100	; 0x64
 800a000:	d901      	bls.n	800a006 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a002:	2303      	movs	r3, #3
 800a004:	e1f3      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a006:	4b51      	ldr	r3, [pc, #324]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d1f0      	bne.n	8009ff4 <HAL_RCC_OscConfig+0xe8>
 800a012:	e000      	b.n	800a016 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	f003 0302 	and.w	r3, r3, #2
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d063      	beq.n	800a0ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a022:	4b4a      	ldr	r3, [pc, #296]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a024:	689b      	ldr	r3, [r3, #8]
 800a026:	f003 030c 	and.w	r3, r3, #12
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00b      	beq.n	800a046 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a02e:	4b47      	ldr	r3, [pc, #284]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a036:	2b08      	cmp	r3, #8
 800a038:	d11c      	bne.n	800a074 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a03a:	4b44      	ldr	r3, [pc, #272]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a042:	2b00      	cmp	r3, #0
 800a044:	d116      	bne.n	800a074 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a046:	4b41      	ldr	r3, [pc, #260]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0302 	and.w	r3, r3, #2
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d005      	beq.n	800a05e <HAL_RCC_OscConfig+0x152>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	68db      	ldr	r3, [r3, #12]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d001      	beq.n	800a05e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	e1c7      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a05e:	4b3b      	ldr	r3, [pc, #236]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	00db      	lsls	r3, r3, #3
 800a06c:	4937      	ldr	r1, [pc, #220]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a06e:	4313      	orrs	r3, r2
 800a070:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a072:	e03a      	b.n	800a0ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d020      	beq.n	800a0be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a07c:	4b34      	ldr	r3, [pc, #208]	; (800a150 <HAL_RCC_OscConfig+0x244>)
 800a07e:	2201      	movs	r2, #1
 800a080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a082:	f7fc fdcf 	bl	8006c24 <HAL_GetTick>
 800a086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a088:	e008      	b.n	800a09c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a08a:	f7fc fdcb 	bl	8006c24 <HAL_GetTick>
 800a08e:	4602      	mov	r2, r0
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	1ad3      	subs	r3, r2, r3
 800a094:	2b02      	cmp	r3, #2
 800a096:	d901      	bls.n	800a09c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a098:	2303      	movs	r3, #3
 800a09a:	e1a8      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a09c:	4b2b      	ldr	r3, [pc, #172]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f003 0302 	and.w	r3, r3, #2
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d0f0      	beq.n	800a08a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0a8:	4b28      	ldr	r3, [pc, #160]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	00db      	lsls	r3, r3, #3
 800a0b6:	4925      	ldr	r1, [pc, #148]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	600b      	str	r3, [r1, #0]
 800a0bc:	e015      	b.n	800a0ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a0be:	4b24      	ldr	r3, [pc, #144]	; (800a150 <HAL_RCC_OscConfig+0x244>)
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0c4:	f7fc fdae 	bl	8006c24 <HAL_GetTick>
 800a0c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0ca:	e008      	b.n	800a0de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a0cc:	f7fc fdaa 	bl	8006c24 <HAL_GetTick>
 800a0d0:	4602      	mov	r2, r0
 800a0d2:	693b      	ldr	r3, [r7, #16]
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d901      	bls.n	800a0de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a0da:	2303      	movs	r3, #3
 800a0dc:	e187      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a0de:	4b1b      	ldr	r3, [pc, #108]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0302 	and.w	r3, r3, #2
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1f0      	bne.n	800a0cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d036      	beq.n	800a164 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d016      	beq.n	800a12c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0fe:	4b15      	ldr	r3, [pc, #84]	; (800a154 <HAL_RCC_OscConfig+0x248>)
 800a100:	2201      	movs	r2, #1
 800a102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a104:	f7fc fd8e 	bl	8006c24 <HAL_GetTick>
 800a108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a10a:	e008      	b.n	800a11e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a10c:	f7fc fd8a 	bl	8006c24 <HAL_GetTick>
 800a110:	4602      	mov	r2, r0
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	1ad3      	subs	r3, r2, r3
 800a116:	2b02      	cmp	r3, #2
 800a118:	d901      	bls.n	800a11e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a11a:	2303      	movs	r3, #3
 800a11c:	e167      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a11e:	4b0b      	ldr	r3, [pc, #44]	; (800a14c <HAL_RCC_OscConfig+0x240>)
 800a120:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a122:	f003 0302 	and.w	r3, r3, #2
 800a126:	2b00      	cmp	r3, #0
 800a128:	d0f0      	beq.n	800a10c <HAL_RCC_OscConfig+0x200>
 800a12a:	e01b      	b.n	800a164 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a12c:	4b09      	ldr	r3, [pc, #36]	; (800a154 <HAL_RCC_OscConfig+0x248>)
 800a12e:	2200      	movs	r2, #0
 800a130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a132:	f7fc fd77 	bl	8006c24 <HAL_GetTick>
 800a136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a138:	e00e      	b.n	800a158 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a13a:	f7fc fd73 	bl	8006c24 <HAL_GetTick>
 800a13e:	4602      	mov	r2, r0
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	1ad3      	subs	r3, r2, r3
 800a144:	2b02      	cmp	r3, #2
 800a146:	d907      	bls.n	800a158 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a148:	2303      	movs	r3, #3
 800a14a:	e150      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
 800a14c:	40023800 	.word	0x40023800
 800a150:	42470000 	.word	0x42470000
 800a154:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a158:	4b88      	ldr	r3, [pc, #544]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a15a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b00      	cmp	r3, #0
 800a162:	d1ea      	bne.n	800a13a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0304 	and.w	r3, r3, #4
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	f000 8097 	beq.w	800a2a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a172:	2300      	movs	r3, #0
 800a174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a176:	4b81      	ldr	r3, [pc, #516]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d10f      	bne.n	800a1a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a182:	2300      	movs	r3, #0
 800a184:	60bb      	str	r3, [r7, #8]
 800a186:	4b7d      	ldr	r3, [pc, #500]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a18a:	4a7c      	ldr	r2, [pc, #496]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a18c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a190:	6413      	str	r3, [r2, #64]	; 0x40
 800a192:	4b7a      	ldr	r3, [pc, #488]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a19a:	60bb      	str	r3, [r7, #8]
 800a19c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a19e:	2301      	movs	r3, #1
 800a1a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1a2:	4b77      	ldr	r3, [pc, #476]	; (800a380 <HAL_RCC_OscConfig+0x474>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d118      	bne.n	800a1e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a1ae:	4b74      	ldr	r3, [pc, #464]	; (800a380 <HAL_RCC_OscConfig+0x474>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a73      	ldr	r2, [pc, #460]	; (800a380 <HAL_RCC_OscConfig+0x474>)
 800a1b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a1ba:	f7fc fd33 	bl	8006c24 <HAL_GetTick>
 800a1be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1c0:	e008      	b.n	800a1d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a1c2:	f7fc fd2f 	bl	8006c24 <HAL_GetTick>
 800a1c6:	4602      	mov	r2, r0
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	1ad3      	subs	r3, r2, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d901      	bls.n	800a1d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	e10c      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a1d4:	4b6a      	ldr	r3, [pc, #424]	; (800a380 <HAL_RCC_OscConfig+0x474>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d0f0      	beq.n	800a1c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d106      	bne.n	800a1f6 <HAL_RCC_OscConfig+0x2ea>
 800a1e8:	4b64      	ldr	r3, [pc, #400]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1ec:	4a63      	ldr	r2, [pc, #396]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a1ee:	f043 0301 	orr.w	r3, r3, #1
 800a1f2:	6713      	str	r3, [r2, #112]	; 0x70
 800a1f4:	e01c      	b.n	800a230 <HAL_RCC_OscConfig+0x324>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	2b05      	cmp	r3, #5
 800a1fc:	d10c      	bne.n	800a218 <HAL_RCC_OscConfig+0x30c>
 800a1fe:	4b5f      	ldr	r3, [pc, #380]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a202:	4a5e      	ldr	r2, [pc, #376]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a204:	f043 0304 	orr.w	r3, r3, #4
 800a208:	6713      	str	r3, [r2, #112]	; 0x70
 800a20a:	4b5c      	ldr	r3, [pc, #368]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a20c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a20e:	4a5b      	ldr	r2, [pc, #364]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a210:	f043 0301 	orr.w	r3, r3, #1
 800a214:	6713      	str	r3, [r2, #112]	; 0x70
 800a216:	e00b      	b.n	800a230 <HAL_RCC_OscConfig+0x324>
 800a218:	4b58      	ldr	r3, [pc, #352]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a21a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a21c:	4a57      	ldr	r2, [pc, #348]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a21e:	f023 0301 	bic.w	r3, r3, #1
 800a222:	6713      	str	r3, [r2, #112]	; 0x70
 800a224:	4b55      	ldr	r3, [pc, #340]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a228:	4a54      	ldr	r2, [pc, #336]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a22a:	f023 0304 	bic.w	r3, r3, #4
 800a22e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d015      	beq.n	800a264 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a238:	f7fc fcf4 	bl	8006c24 <HAL_GetTick>
 800a23c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a23e:	e00a      	b.n	800a256 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a240:	f7fc fcf0 	bl	8006c24 <HAL_GetTick>
 800a244:	4602      	mov	r2, r0
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a24e:	4293      	cmp	r3, r2
 800a250:	d901      	bls.n	800a256 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e0cb      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a256:	4b49      	ldr	r3, [pc, #292]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25a:	f003 0302 	and.w	r3, r3, #2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d0ee      	beq.n	800a240 <HAL_RCC_OscConfig+0x334>
 800a262:	e014      	b.n	800a28e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a264:	f7fc fcde 	bl	8006c24 <HAL_GetTick>
 800a268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a26a:	e00a      	b.n	800a282 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a26c:	f7fc fcda 	bl	8006c24 <HAL_GetTick>
 800a270:	4602      	mov	r2, r0
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	1ad3      	subs	r3, r2, r3
 800a276:	f241 3288 	movw	r2, #5000	; 0x1388
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d901      	bls.n	800a282 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e0b5      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a282:	4b3e      	ldr	r3, [pc, #248]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a286:	f003 0302 	and.w	r3, r3, #2
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d1ee      	bne.n	800a26c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a28e:	7dfb      	ldrb	r3, [r7, #23]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d105      	bne.n	800a2a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a294:	4b39      	ldr	r3, [pc, #228]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a298:	4a38      	ldr	r2, [pc, #224]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a29a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a29e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	699b      	ldr	r3, [r3, #24]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f000 80a1 	beq.w	800a3ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a2aa:	4b34      	ldr	r3, [pc, #208]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	f003 030c 	and.w	r3, r3, #12
 800a2b2:	2b08      	cmp	r3, #8
 800a2b4:	d05c      	beq.n	800a370 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d141      	bne.n	800a342 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2be:	4b31      	ldr	r3, [pc, #196]	; (800a384 <HAL_RCC_OscConfig+0x478>)
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2c4:	f7fc fcae 	bl	8006c24 <HAL_GetTick>
 800a2c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2ca:	e008      	b.n	800a2de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a2cc:	f7fc fcaa 	bl	8006c24 <HAL_GetTick>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	1ad3      	subs	r3, r2, r3
 800a2d6:	2b02      	cmp	r3, #2
 800a2d8:	d901      	bls.n	800a2de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800a2da:	2303      	movs	r3, #3
 800a2dc:	e087      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a2de:	4b27      	ldr	r3, [pc, #156]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1f0      	bne.n	800a2cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69da      	ldr	r2, [r3, #28]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6a1b      	ldr	r3, [r3, #32]
 800a2f2:	431a      	orrs	r2, r3
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	019b      	lsls	r3, r3, #6
 800a2fa:	431a      	orrs	r2, r3
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a300:	085b      	lsrs	r3, r3, #1
 800a302:	3b01      	subs	r3, #1
 800a304:	041b      	lsls	r3, r3, #16
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a30c:	061b      	lsls	r3, r3, #24
 800a30e:	491b      	ldr	r1, [pc, #108]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a310:	4313      	orrs	r3, r2
 800a312:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a314:	4b1b      	ldr	r3, [pc, #108]	; (800a384 <HAL_RCC_OscConfig+0x478>)
 800a316:	2201      	movs	r2, #1
 800a318:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a31a:	f7fc fc83 	bl	8006c24 <HAL_GetTick>
 800a31e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a320:	e008      	b.n	800a334 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a322:	f7fc fc7f 	bl	8006c24 <HAL_GetTick>
 800a326:	4602      	mov	r2, r0
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	1ad3      	subs	r3, r2, r3
 800a32c:	2b02      	cmp	r3, #2
 800a32e:	d901      	bls.n	800a334 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a330:	2303      	movs	r3, #3
 800a332:	e05c      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a334:	4b11      	ldr	r3, [pc, #68]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d0f0      	beq.n	800a322 <HAL_RCC_OscConfig+0x416>
 800a340:	e054      	b.n	800a3ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a342:	4b10      	ldr	r3, [pc, #64]	; (800a384 <HAL_RCC_OscConfig+0x478>)
 800a344:	2200      	movs	r2, #0
 800a346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a348:	f7fc fc6c 	bl	8006c24 <HAL_GetTick>
 800a34c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a34e:	e008      	b.n	800a362 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a350:	f7fc fc68 	bl	8006c24 <HAL_GetTick>
 800a354:	4602      	mov	r2, r0
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	1ad3      	subs	r3, r2, r3
 800a35a:	2b02      	cmp	r3, #2
 800a35c:	d901      	bls.n	800a362 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800a35e:	2303      	movs	r3, #3
 800a360:	e045      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <HAL_RCC_OscConfig+0x470>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d1f0      	bne.n	800a350 <HAL_RCC_OscConfig+0x444>
 800a36e:	e03d      	b.n	800a3ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	699b      	ldr	r3, [r3, #24]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d107      	bne.n	800a388 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800a378:	2301      	movs	r3, #1
 800a37a:	e038      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
 800a37c:	40023800 	.word	0x40023800
 800a380:	40007000 	.word	0x40007000
 800a384:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a388:	4b1b      	ldr	r3, [pc, #108]	; (800a3f8 <HAL_RCC_OscConfig+0x4ec>)
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d028      	beq.n	800a3e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d121      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d11a      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a3b2:	68fa      	ldr	r2, [r7, #12]
 800a3b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a3b8:	4013      	ands	r3, r2
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d111      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ce:	085b      	lsrs	r3, r3, #1
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d107      	bne.n	800a3e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d001      	beq.n	800a3ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e000      	b.n	800a3ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800a3ec:	2300      	movs	r3, #0
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3718      	adds	r7, #24
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	40023800 	.word	0x40023800

0800a3fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b084      	sub	sp, #16
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d101      	bne.n	800a410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a40c:	2301      	movs	r3, #1
 800a40e:	e0cc      	b.n	800a5aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a410:	4b68      	ldr	r3, [pc, #416]	; (800a5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0307 	and.w	r3, r3, #7
 800a418:	683a      	ldr	r2, [r7, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d90c      	bls.n	800a438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a41e:	4b65      	ldr	r3, [pc, #404]	; (800a5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a420:	683a      	ldr	r2, [r7, #0]
 800a422:	b2d2      	uxtb	r2, r2
 800a424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a426:	4b63      	ldr	r3, [pc, #396]	; (800a5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0307 	and.w	r3, r3, #7
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d001      	beq.n	800a438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e0b8      	b.n	800a5aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0302 	and.w	r3, r3, #2
 800a440:	2b00      	cmp	r3, #0
 800a442:	d020      	beq.n	800a486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0304 	and.w	r3, r3, #4
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d005      	beq.n	800a45c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a450:	4b59      	ldr	r3, [pc, #356]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a452:	689b      	ldr	r3, [r3, #8]
 800a454:	4a58      	ldr	r2, [pc, #352]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a45a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	f003 0308 	and.w	r3, r3, #8
 800a464:	2b00      	cmp	r3, #0
 800a466:	d005      	beq.n	800a474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a468:	4b53      	ldr	r3, [pc, #332]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a46a:	689b      	ldr	r3, [r3, #8]
 800a46c:	4a52      	ldr	r2, [pc, #328]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a46e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a474:	4b50      	ldr	r3, [pc, #320]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	689b      	ldr	r3, [r3, #8]
 800a480:	494d      	ldr	r1, [pc, #308]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a482:	4313      	orrs	r3, r2
 800a484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d044      	beq.n	800a51c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2b01      	cmp	r3, #1
 800a498:	d107      	bne.n	800a4aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a49a:	4b47      	ldr	r3, [pc, #284]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d119      	bne.n	800a4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e07f      	b.n	800a5aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	2b02      	cmp	r3, #2
 800a4b0:	d003      	beq.n	800a4ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a4b6:	2b03      	cmp	r3, #3
 800a4b8:	d107      	bne.n	800a4ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a4ba:	4b3f      	ldr	r3, [pc, #252]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d109      	bne.n	800a4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e06f      	b.n	800a5aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a4ca:	4b3b      	ldr	r3, [pc, #236]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0302 	and.w	r3, r3, #2
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d101      	bne.n	800a4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e067      	b.n	800a5aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a4da:	4b37      	ldr	r3, [pc, #220]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	f023 0203 	bic.w	r2, r3, #3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	4934      	ldr	r1, [pc, #208]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a4ec:	f7fc fb9a 	bl	8006c24 <HAL_GetTick>
 800a4f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4f2:	e00a      	b.n	800a50a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4f4:	f7fc fb96 	bl	8006c24 <HAL_GetTick>
 800a4f8:	4602      	mov	r2, r0
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	1ad3      	subs	r3, r2, r3
 800a4fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800a502:	4293      	cmp	r3, r2
 800a504:	d901      	bls.n	800a50a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e04f      	b.n	800a5aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a50a:	4b2b      	ldr	r3, [pc, #172]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a50c:	689b      	ldr	r3, [r3, #8]
 800a50e:	f003 020c 	and.w	r2, r3, #12
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	429a      	cmp	r2, r3
 800a51a:	d1eb      	bne.n	800a4f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a51c:	4b25      	ldr	r3, [pc, #148]	; (800a5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f003 0307 	and.w	r3, r3, #7
 800a524:	683a      	ldr	r2, [r7, #0]
 800a526:	429a      	cmp	r2, r3
 800a528:	d20c      	bcs.n	800a544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a52a:	4b22      	ldr	r3, [pc, #136]	; (800a5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a52c:	683a      	ldr	r2, [r7, #0]
 800a52e:	b2d2      	uxtb	r2, r2
 800a530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a532:	4b20      	ldr	r3, [pc, #128]	; (800a5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d001      	beq.n	800a544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a540:	2301      	movs	r3, #1
 800a542:	e032      	b.n	800a5aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d008      	beq.n	800a562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a550:	4b19      	ldr	r3, [pc, #100]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	4916      	ldr	r1, [pc, #88]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a55e:	4313      	orrs	r3, r2
 800a560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f003 0308 	and.w	r3, r3, #8
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d009      	beq.n	800a582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a56e:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	691b      	ldr	r3, [r3, #16]
 800a57a:	00db      	lsls	r3, r3, #3
 800a57c:	490e      	ldr	r1, [pc, #56]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a57e:	4313      	orrs	r3, r2
 800a580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a582:	f000 f821 	bl	800a5c8 <HAL_RCC_GetSysClockFreq>
 800a586:	4602      	mov	r2, r0
 800a588:	4b0b      	ldr	r3, [pc, #44]	; (800a5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	091b      	lsrs	r3, r3, #4
 800a58e:	f003 030f 	and.w	r3, r3, #15
 800a592:	490a      	ldr	r1, [pc, #40]	; (800a5bc <HAL_RCC_ClockConfig+0x1c0>)
 800a594:	5ccb      	ldrb	r3, [r1, r3]
 800a596:	fa22 f303 	lsr.w	r3, r2, r3
 800a59a:	4a09      	ldr	r2, [pc, #36]	; (800a5c0 <HAL_RCC_ClockConfig+0x1c4>)
 800a59c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a59e:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <HAL_RCC_ClockConfig+0x1c8>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7fb f9fa 	bl	800599c <HAL_InitTick>

  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
 800a5b2:	bf00      	nop
 800a5b4:	40023c00 	.word	0x40023c00
 800a5b8:	40023800 	.word	0x40023800
 800a5bc:	0801b570 	.word	0x0801b570
 800a5c0:	2000000c 	.word	0x2000000c
 800a5c4:	20000018 	.word	0x20000018

0800a5c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5cc:	b094      	sub	sp, #80	; 0x50
 800a5ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	647b      	str	r3, [r7, #68]	; 0x44
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5d8:	2300      	movs	r3, #0
 800a5da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800a5dc:	2300      	movs	r3, #0
 800a5de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5e0:	4b79      	ldr	r3, [pc, #484]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a5e2:	689b      	ldr	r3, [r3, #8]
 800a5e4:	f003 030c 	and.w	r3, r3, #12
 800a5e8:	2b08      	cmp	r3, #8
 800a5ea:	d00d      	beq.n	800a608 <HAL_RCC_GetSysClockFreq+0x40>
 800a5ec:	2b08      	cmp	r3, #8
 800a5ee:	f200 80e1 	bhi.w	800a7b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d002      	beq.n	800a5fc <HAL_RCC_GetSysClockFreq+0x34>
 800a5f6:	2b04      	cmp	r3, #4
 800a5f8:	d003      	beq.n	800a602 <HAL_RCC_GetSysClockFreq+0x3a>
 800a5fa:	e0db      	b.n	800a7b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a5fc:	4b73      	ldr	r3, [pc, #460]	; (800a7cc <HAL_RCC_GetSysClockFreq+0x204>)
 800a5fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800a600:	e0db      	b.n	800a7ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a602:	4b73      	ldr	r3, [pc, #460]	; (800a7d0 <HAL_RCC_GetSysClockFreq+0x208>)
 800a604:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a606:	e0d8      	b.n	800a7ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a608:	4b6f      	ldr	r3, [pc, #444]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a610:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a612:	4b6d      	ldr	r3, [pc, #436]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d063      	beq.n	800a6e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a61e:	4b6a      	ldr	r3, [pc, #424]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	099b      	lsrs	r3, r3, #6
 800a624:	2200      	movs	r2, #0
 800a626:	63bb      	str	r3, [r7, #56]	; 0x38
 800a628:	63fa      	str	r2, [r7, #60]	; 0x3c
 800a62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a62c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a630:	633b      	str	r3, [r7, #48]	; 0x30
 800a632:	2300      	movs	r3, #0
 800a634:	637b      	str	r3, [r7, #52]	; 0x34
 800a636:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800a63a:	4622      	mov	r2, r4
 800a63c:	462b      	mov	r3, r5
 800a63e:	f04f 0000 	mov.w	r0, #0
 800a642:	f04f 0100 	mov.w	r1, #0
 800a646:	0159      	lsls	r1, r3, #5
 800a648:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a64c:	0150      	lsls	r0, r2, #5
 800a64e:	4602      	mov	r2, r0
 800a650:	460b      	mov	r3, r1
 800a652:	4621      	mov	r1, r4
 800a654:	1a51      	subs	r1, r2, r1
 800a656:	6139      	str	r1, [r7, #16]
 800a658:	4629      	mov	r1, r5
 800a65a:	eb63 0301 	sbc.w	r3, r3, r1
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	f04f 0200 	mov.w	r2, #0
 800a664:	f04f 0300 	mov.w	r3, #0
 800a668:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a66c:	4659      	mov	r1, fp
 800a66e:	018b      	lsls	r3, r1, #6
 800a670:	4651      	mov	r1, sl
 800a672:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800a676:	4651      	mov	r1, sl
 800a678:	018a      	lsls	r2, r1, #6
 800a67a:	4651      	mov	r1, sl
 800a67c:	ebb2 0801 	subs.w	r8, r2, r1
 800a680:	4659      	mov	r1, fp
 800a682:	eb63 0901 	sbc.w	r9, r3, r1
 800a686:	f04f 0200 	mov.w	r2, #0
 800a68a:	f04f 0300 	mov.w	r3, #0
 800a68e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a69a:	4690      	mov	r8, r2
 800a69c:	4699      	mov	r9, r3
 800a69e:	4623      	mov	r3, r4
 800a6a0:	eb18 0303 	adds.w	r3, r8, r3
 800a6a4:	60bb      	str	r3, [r7, #8]
 800a6a6:	462b      	mov	r3, r5
 800a6a8:	eb49 0303 	adc.w	r3, r9, r3
 800a6ac:	60fb      	str	r3, [r7, #12]
 800a6ae:	f04f 0200 	mov.w	r2, #0
 800a6b2:	f04f 0300 	mov.w	r3, #0
 800a6b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800a6ba:	4629      	mov	r1, r5
 800a6bc:	024b      	lsls	r3, r1, #9
 800a6be:	4621      	mov	r1, r4
 800a6c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800a6c4:	4621      	mov	r1, r4
 800a6c6:	024a      	lsls	r2, r1, #9
 800a6c8:	4610      	mov	r0, r2
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a6d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a6d8:	f7f6 fb26 	bl	8000d28 <__aeabi_uldivmod>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	460b      	mov	r3, r1
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6e4:	e058      	b.n	800a798 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6e6:	4b38      	ldr	r3, [pc, #224]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	099b      	lsrs	r3, r3, #6
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	4611      	mov	r1, r2
 800a6f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800a6f6:	623b      	str	r3, [r7, #32]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	627b      	str	r3, [r7, #36]	; 0x24
 800a6fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800a700:	4642      	mov	r2, r8
 800a702:	464b      	mov	r3, r9
 800a704:	f04f 0000 	mov.w	r0, #0
 800a708:	f04f 0100 	mov.w	r1, #0
 800a70c:	0159      	lsls	r1, r3, #5
 800a70e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800a712:	0150      	lsls	r0, r2, #5
 800a714:	4602      	mov	r2, r0
 800a716:	460b      	mov	r3, r1
 800a718:	4641      	mov	r1, r8
 800a71a:	ebb2 0a01 	subs.w	sl, r2, r1
 800a71e:	4649      	mov	r1, r9
 800a720:	eb63 0b01 	sbc.w	fp, r3, r1
 800a724:	f04f 0200 	mov.w	r2, #0
 800a728:	f04f 0300 	mov.w	r3, #0
 800a72c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800a730:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800a734:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800a738:	ebb2 040a 	subs.w	r4, r2, sl
 800a73c:	eb63 050b 	sbc.w	r5, r3, fp
 800a740:	f04f 0200 	mov.w	r2, #0
 800a744:	f04f 0300 	mov.w	r3, #0
 800a748:	00eb      	lsls	r3, r5, #3
 800a74a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a74e:	00e2      	lsls	r2, r4, #3
 800a750:	4614      	mov	r4, r2
 800a752:	461d      	mov	r5, r3
 800a754:	4643      	mov	r3, r8
 800a756:	18e3      	adds	r3, r4, r3
 800a758:	603b      	str	r3, [r7, #0]
 800a75a:	464b      	mov	r3, r9
 800a75c:	eb45 0303 	adc.w	r3, r5, r3
 800a760:	607b      	str	r3, [r7, #4]
 800a762:	f04f 0200 	mov.w	r2, #0
 800a766:	f04f 0300 	mov.w	r3, #0
 800a76a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800a76e:	4629      	mov	r1, r5
 800a770:	028b      	lsls	r3, r1, #10
 800a772:	4621      	mov	r1, r4
 800a774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800a778:	4621      	mov	r1, r4
 800a77a:	028a      	lsls	r2, r1, #10
 800a77c:	4610      	mov	r0, r2
 800a77e:	4619      	mov	r1, r3
 800a780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a782:	2200      	movs	r2, #0
 800a784:	61bb      	str	r3, [r7, #24]
 800a786:	61fa      	str	r2, [r7, #28]
 800a788:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a78c:	f7f6 facc 	bl	8000d28 <__aeabi_uldivmod>
 800a790:	4602      	mov	r2, r0
 800a792:	460b      	mov	r3, r1
 800a794:	4613      	mov	r3, r2
 800a796:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a798:	4b0b      	ldr	r3, [pc, #44]	; (800a7c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	0c1b      	lsrs	r3, r3, #16
 800a79e:	f003 0303 	and.w	r3, r3, #3
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800a7a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7b0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a7b2:	e002      	b.n	800a7ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a7b4:	4b05      	ldr	r3, [pc, #20]	; (800a7cc <HAL_RCC_GetSysClockFreq+0x204>)
 800a7b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800a7b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a7ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3750      	adds	r7, #80	; 0x50
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7c6:	bf00      	nop
 800a7c8:	40023800 	.word	0x40023800
 800a7cc:	00f42400 	.word	0x00f42400
 800a7d0:	007a1200 	.word	0x007a1200

0800a7d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a7d8:	4b03      	ldr	r3, [pc, #12]	; (800a7e8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a7da:	681b      	ldr	r3, [r3, #0]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	2000000c 	.word	0x2000000c

0800a7ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a7f0:	f7ff fff0 	bl	800a7d4 <HAL_RCC_GetHCLKFreq>
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	4b05      	ldr	r3, [pc, #20]	; (800a80c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	0a9b      	lsrs	r3, r3, #10
 800a7fc:	f003 0307 	and.w	r3, r3, #7
 800a800:	4903      	ldr	r1, [pc, #12]	; (800a810 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a802:	5ccb      	ldrb	r3, [r1, r3]
 800a804:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a808:	4618      	mov	r0, r3
 800a80a:	bd80      	pop	{r7, pc}
 800a80c:	40023800 	.word	0x40023800
 800a810:	0801b580 	.word	0x0801b580

0800a814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a814:	b580      	push	{r7, lr}
 800a816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a818:	f7ff ffdc 	bl	800a7d4 <HAL_RCC_GetHCLKFreq>
 800a81c:	4602      	mov	r2, r0
 800a81e:	4b05      	ldr	r3, [pc, #20]	; (800a834 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	0b5b      	lsrs	r3, r3, #13
 800a824:	f003 0307 	and.w	r3, r3, #7
 800a828:	4903      	ldr	r1, [pc, #12]	; (800a838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a82a:	5ccb      	ldrb	r3, [r1, r3]
 800a82c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a830:	4618      	mov	r0, r3
 800a832:	bd80      	pop	{r7, pc}
 800a834:	40023800 	.word	0x40023800
 800a838:	0801b580 	.word	0x0801b580

0800a83c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b083      	sub	sp, #12
 800a840:	af00      	add	r7, sp, #0
 800a842:	6078      	str	r0, [r7, #4]
 800a844:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	220f      	movs	r2, #15
 800a84a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a84c:	4b12      	ldr	r3, [pc, #72]	; (800a898 <HAL_RCC_GetClockConfig+0x5c>)
 800a84e:	689b      	ldr	r3, [r3, #8]
 800a850:	f003 0203 	and.w	r2, r3, #3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a858:	4b0f      	ldr	r3, [pc, #60]	; (800a898 <HAL_RCC_GetClockConfig+0x5c>)
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a864:	4b0c      	ldr	r3, [pc, #48]	; (800a898 <HAL_RCC_GetClockConfig+0x5c>)
 800a866:	689b      	ldr	r3, [r3, #8]
 800a868:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a870:	4b09      	ldr	r3, [pc, #36]	; (800a898 <HAL_RCC_GetClockConfig+0x5c>)
 800a872:	689b      	ldr	r3, [r3, #8]
 800a874:	08db      	lsrs	r3, r3, #3
 800a876:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a87e:	4b07      	ldr	r3, [pc, #28]	; (800a89c <HAL_RCC_GetClockConfig+0x60>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f003 0207 	and.w	r2, r3, #7
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	601a      	str	r2, [r3, #0]
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	40023800 	.word	0x40023800
 800a89c:	40023c00 	.word	0x40023c00

0800a8a0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	f003 0301 	and.w	r3, r3, #1
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d105      	bne.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d035      	beq.n	800a934 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a8c8:	4b62      	ldr	r3, [pc, #392]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a8ce:	f7fc f9a9 	bl	8006c24 <HAL_GetTick>
 800a8d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a8d4:	e008      	b.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a8d6:	f7fc f9a5 	bl	8006c24 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d901      	bls.n	800a8e8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	e0b0      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a8e8:	4b5b      	ldr	r3, [pc, #364]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d1f0      	bne.n	800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	019a      	lsls	r2, r3, #6
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	071b      	lsls	r3, r3, #28
 800a900:	4955      	ldr	r1, [pc, #340]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a902:	4313      	orrs	r3, r2
 800a904:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a908:	4b52      	ldr	r3, [pc, #328]	; (800aa54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a90a:	2201      	movs	r2, #1
 800a90c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a90e:	f7fc f989 	bl	8006c24 <HAL_GetTick>
 800a912:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a914:	e008      	b.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a916:	f7fc f985 	bl	8006c24 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	2b02      	cmp	r3, #2
 800a922:	d901      	bls.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a924:	2303      	movs	r3, #3
 800a926:	e090      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a928:	4b4b      	ldr	r3, [pc, #300]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a930:	2b00      	cmp	r3, #0
 800a932:	d0f0      	beq.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0302 	and.w	r3, r3, #2
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 8083 	beq.w	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a942:	2300      	movs	r3, #0
 800a944:	60fb      	str	r3, [r7, #12]
 800a946:	4b44      	ldr	r3, [pc, #272]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94a:	4a43      	ldr	r2, [pc, #268]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a94c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a950:	6413      	str	r3, [r2, #64]	; 0x40
 800a952:	4b41      	ldr	r3, [pc, #260]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a95a:	60fb      	str	r3, [r7, #12]
 800a95c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a95e:	4b3f      	ldr	r3, [pc, #252]	; (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	4a3e      	ldr	r2, [pc, #248]	; (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a968:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a96a:	f7fc f95b 	bl	8006c24 <HAL_GetTick>
 800a96e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a970:	e008      	b.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a972:	f7fc f957 	bl	8006c24 <HAL_GetTick>
 800a976:	4602      	mov	r2, r0
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	2b02      	cmp	r3, #2
 800a97e:	d901      	bls.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a980:	2303      	movs	r3, #3
 800a982:	e062      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a984:	4b35      	ldr	r3, [pc, #212]	; (800aa5c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0f0      	beq.n	800a972 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a990:	4b31      	ldr	r3, [pc, #196]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a998:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d02f      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68db      	ldr	r3, [r3, #12]
 800a9a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a9a8:	693a      	ldr	r2, [r7, #16]
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d028      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a9ae:	4b2a      	ldr	r3, [pc, #168]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9b6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a9b8:	4b29      	ldr	r3, [pc, #164]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a9ba:	2201      	movs	r2, #1
 800a9bc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a9be:	4b28      	ldr	r3, [pc, #160]	; (800aa60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a9c4:	4a24      	ldr	r2, [pc, #144]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a9c6:	693b      	ldr	r3, [r7, #16]
 800a9c8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a9ca:	4b23      	ldr	r3, [pc, #140]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a9cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b01      	cmp	r3, #1
 800a9d4:	d114      	bne.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a9d6:	f7fc f925 	bl	8006c24 <HAL_GetTick>
 800a9da:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9dc:	e00a      	b.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a9de:	f7fc f921 	bl	8006c24 <HAL_GetTick>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e02a      	b.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a9f4:	4b18      	ldr	r3, [pc, #96]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a9f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9f8:	f003 0302 	and.w	r3, r3, #2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0ee      	beq.n	800a9de <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa0c:	d10d      	bne.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800aa0e:	4b12      	ldr	r3, [pc, #72]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	68db      	ldr	r3, [r3, #12]
 800aa1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800aa1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa22:	490d      	ldr	r1, [pc, #52]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa24:	4313      	orrs	r3, r2
 800aa26:	608b      	str	r3, [r1, #8]
 800aa28:	e005      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800aa2a:	4b0b      	ldr	r3, [pc, #44]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	4a0a      	ldr	r2, [pc, #40]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa30:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800aa34:	6093      	str	r3, [r2, #8]
 800aa36:	4b08      	ldr	r3, [pc, #32]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa38:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	68db      	ldr	r3, [r3, #12]
 800aa3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aa42:	4905      	ldr	r1, [pc, #20]	; (800aa58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800aa44:	4313      	orrs	r3, r2
 800aa46:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3718      	adds	r7, #24
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	42470068 	.word	0x42470068
 800aa58:	40023800 	.word	0x40023800
 800aa5c:	40007000 	.word	0x40007000
 800aa60:	42470e40 	.word	0x42470e40

0800aa64 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b084      	sub	sp, #16
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d101      	bne.n	800aa7a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	e073      	b.n	800ab62 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	7f5b      	ldrb	r3, [r3, #29]
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d105      	bne.n	800aa90 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2200      	movs	r2, #0
 800aa88:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f7fa fc08 	bl	80052a0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2202      	movs	r2, #2
 800aa94:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	68db      	ldr	r3, [r3, #12]
 800aa9c:	f003 0310 	and.w	r3, r3, #16
 800aaa0:	2b10      	cmp	r3, #16
 800aaa2:	d055      	beq.n	800ab50 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	22ca      	movs	r2, #202	; 0xca
 800aaaa:	625a      	str	r2, [r3, #36]	; 0x24
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	2253      	movs	r2, #83	; 0x53
 800aab2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f9c5 	bl	800ae44 <RTC_EnterInitMode>
 800aaba:	4603      	mov	r3, r0
 800aabc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800aabe:	7bfb      	ldrb	r3, [r7, #15]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d12c      	bne.n	800ab1e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	687a      	ldr	r2, [r7, #4]
 800aacc:	6812      	ldr	r2, [r2, #0]
 800aace:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800aad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aad6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	6899      	ldr	r1, [r3, #8]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	685a      	ldr	r2, [r3, #4]
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	431a      	orrs	r2, r3
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	695b      	ldr	r3, [r3, #20]
 800aaec:	431a      	orrs	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	68d2      	ldr	r2, [r2, #12]
 800aafe:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	6919      	ldr	r1, [r3, #16]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	689b      	ldr	r3, [r3, #8]
 800ab0a:	041a      	lsls	r2, r3, #16
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	430a      	orrs	r2, r1
 800ab12:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f9cc 	bl	800aeb2 <RTC_ExitInitMode>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800ab1e:	7bfb      	ldrb	r3, [r7, #15]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d110      	bne.n	800ab46 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ab32:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	699a      	ldr	r2, [r3, #24]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	430a      	orrs	r2, r1
 800ab44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	22ff      	movs	r2, #255	; 0xff
 800ab4c:	625a      	str	r2, [r3, #36]	; 0x24
 800ab4e:	e001      	b.n	800ab54 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d102      	bne.n	800ab60 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2201      	movs	r2, #1
 800ab5e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800ab60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}

0800ab6a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ab6a:	b590      	push	{r4, r7, lr}
 800ab6c:	b087      	sub	sp, #28
 800ab6e:	af00      	add	r7, sp, #0
 800ab70:	60f8      	str	r0, [r7, #12]
 800ab72:	60b9      	str	r1, [r7, #8]
 800ab74:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800ab76:	2300      	movs	r3, #0
 800ab78:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	7f1b      	ldrb	r3, [r3, #28]
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d101      	bne.n	800ab86 <HAL_RTC_SetTime+0x1c>
 800ab82:	2302      	movs	r3, #2
 800ab84:	e087      	b.n	800ac96 <HAL_RTC_SetTime+0x12c>
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2201      	movs	r2, #1
 800ab8a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d126      	bne.n	800abe6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d102      	bne.n	800abac <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	2200      	movs	r2, #0
 800abaa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	4618      	mov	r0, r3
 800abb2:	f000 f9a3 	bl	800aefc <RTC_ByteToBcd2>
 800abb6:	4603      	mov	r3, r0
 800abb8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abba:	68bb      	ldr	r3, [r7, #8]
 800abbc:	785b      	ldrb	r3, [r3, #1]
 800abbe:	4618      	mov	r0, r3
 800abc0:	f000 f99c 	bl	800aefc <RTC_ByteToBcd2>
 800abc4:	4603      	mov	r3, r0
 800abc6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800abc8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	789b      	ldrb	r3, [r3, #2]
 800abce:	4618      	mov	r0, r3
 800abd0:	f000 f994 	bl	800aefc <RTC_ByteToBcd2>
 800abd4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800abd6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	78db      	ldrb	r3, [r3, #3]
 800abde:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800abe0:	4313      	orrs	r3, r2
 800abe2:	617b      	str	r3, [r7, #20]
 800abe4:	e018      	b.n	800ac18 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d102      	bne.n	800abfa <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2200      	movs	r2, #0
 800abf8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ac00:	68bb      	ldr	r3, [r7, #8]
 800ac02:	785b      	ldrb	r3, [r3, #1]
 800ac04:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ac06:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ac0c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	78db      	ldrb	r3, [r3, #3]
 800ac12:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ac14:	4313      	orrs	r3, r2
 800ac16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	22ca      	movs	r2, #202	; 0xca
 800ac1e:	625a      	str	r2, [r3, #36]	; 0x24
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2253      	movs	r2, #83	; 0x53
 800ac26:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ac28:	68f8      	ldr	r0, [r7, #12]
 800ac2a:	f000 f90b 	bl	800ae44 <RTC_EnterInitMode>
 800ac2e:	4603      	mov	r3, r0
 800ac30:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ac32:	7cfb      	ldrb	r3, [r7, #19]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d120      	bne.n	800ac7a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ac42:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ac46:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689a      	ldr	r2, [r3, #8]
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac56:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	6899      	ldr	r1, [r3, #8]
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	68da      	ldr	r2, [r3, #12]
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	431a      	orrs	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	430a      	orrs	r2, r1
 800ac6e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	f000 f91e 	bl	800aeb2 <RTC_ExitInitMode>
 800ac76:	4603      	mov	r3, r0
 800ac78:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ac7a:	7cfb      	ldrb	r3, [r7, #19]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d102      	bne.n	800ac86 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2201      	movs	r2, #1
 800ac84:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	22ff      	movs	r2, #255	; 0xff
 800ac8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	2200      	movs	r2, #0
 800ac92:	771a      	strb	r2, [r3, #28]

  return status;
 800ac94:	7cfb      	ldrb	r3, [r7, #19]
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	371c      	adds	r7, #28
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd90      	pop	{r4, r7, pc}

0800ac9e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800ac9e:	b580      	push	{r7, lr}
 800aca0:	b086      	sub	sp, #24
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800acaa:	2300      	movs	r3, #0
 800acac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800acd0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800acd4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	0c1b      	lsrs	r3, r3, #16
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ace0:	b2da      	uxtb	r2, r3
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	0a1b      	lsrs	r3, r3, #8
 800acea:	b2db      	uxtb	r3, r3
 800acec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acf0:	b2da      	uxtb	r2, r3
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800acfe:	b2da      	uxtb	r2, r3
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	0d9b      	lsrs	r3, r3, #22
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f003 0301 	and.w	r3, r3, #1
 800ad0e:	b2da      	uxtb	r2, r3
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d11a      	bne.n	800ad50 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	781b      	ldrb	r3, [r3, #0]
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f000 f90a 	bl	800af38 <RTC_Bcd2ToByte>
 800ad24:	4603      	mov	r3, r0
 800ad26:	461a      	mov	r2, r3
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	785b      	ldrb	r3, [r3, #1]
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 f901 	bl	800af38 <RTC_Bcd2ToByte>
 800ad36:	4603      	mov	r3, r0
 800ad38:	461a      	mov	r2, r3
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	789b      	ldrb	r3, [r3, #2]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f000 f8f8 	bl	800af38 <RTC_Bcd2ToByte>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	68bb      	ldr	r3, [r7, #8]
 800ad4e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3718      	adds	r7, #24
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b086      	sub	sp, #24
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	60f8      	str	r0, [r7, #12]
 800ad62:	60b9      	str	r1, [r7, #8]
 800ad64:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800ad66:	2300      	movs	r3, #0
 800ad68:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ad74:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800ad78:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	0c1b      	lsrs	r3, r3, #16
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	0a1b      	lsrs	r3, r3, #8
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	f003 031f 	and.w	r3, r3, #31
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad9c:	b2da      	uxtb	r2, r3
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	0b5b      	lsrs	r3, r3, #13
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	f003 0307 	and.w	r3, r3, #7
 800adac:	b2da      	uxtb	r2, r3
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d11a      	bne.n	800adee <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	78db      	ldrb	r3, [r3, #3]
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 f8bb 	bl	800af38 <RTC_Bcd2ToByte>
 800adc2:	4603      	mov	r3, r0
 800adc4:	461a      	mov	r2, r3
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	785b      	ldrb	r3, [r3, #1]
 800adce:	4618      	mov	r0, r3
 800add0:	f000 f8b2 	bl	800af38 <RTC_Bcd2ToByte>
 800add4:	4603      	mov	r3, r0
 800add6:	461a      	mov	r2, r3
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	789b      	ldrb	r3, [r3, #2]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 f8a9 	bl	800af38 <RTC_Bcd2ToByte>
 800ade6:	4603      	mov	r3, r0
 800ade8:	461a      	mov	r2, r3
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3718      	adds	r7, #24
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae00:	2300      	movs	r3, #0
 800ae02:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4a0d      	ldr	r2, [pc, #52]	; (800ae40 <HAL_RTC_WaitForSynchro+0x48>)
 800ae0a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ae0c:	f7fb ff0a 	bl	8006c24 <HAL_GetTick>
 800ae10:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ae12:	e009      	b.n	800ae28 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae14:	f7fb ff06 	bl	8006c24 <HAL_GetTick>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	1ad3      	subs	r3, r2, r3
 800ae1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae22:	d901      	bls.n	800ae28 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e007      	b.n	800ae38 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	f003 0320 	and.w	r3, r3, #32
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d0ee      	beq.n	800ae14 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800ae36:	2300      	movs	r3, #0
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}
 800ae40:	00017f5f 	.word	0x00017f5f

0800ae44 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	68db      	ldr	r3, [r3, #12]
 800ae5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d122      	bne.n	800aea8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68da      	ldr	r2, [r3, #12]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ae70:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ae72:	f7fb fed7 	bl	8006c24 <HAL_GetTick>
 800ae76:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ae78:	e00c      	b.n	800ae94 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ae7a:	f7fb fed3 	bl	8006c24 <HAL_GetTick>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae88:	d904      	bls.n	800ae94 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2204      	movs	r2, #4
 800ae8e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d102      	bne.n	800aea8 <RTC_EnterInitMode+0x64>
 800aea2:	7bfb      	ldrb	r3, [r7, #15]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d1e8      	bne.n	800ae7a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800aeb2:	b580      	push	{r7, lr}
 800aeb4:	b084      	sub	sp, #16
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aeba:	2300      	movs	r3, #0
 800aebc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	68da      	ldr	r2, [r3, #12]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aecc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	689b      	ldr	r3, [r3, #8]
 800aed4:	f003 0320 	and.w	r3, r3, #32
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d10a      	bne.n	800aef2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7ff ff8b 	bl	800adf8 <HAL_RTC_WaitForSynchro>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d004      	beq.n	800aef2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2204      	movs	r2, #4
 800aeec:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800aef2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	4603      	mov	r3, r0
 800af04:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800af06:	2300      	movs	r3, #0
 800af08:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800af0a:	e005      	b.n	800af18 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3301      	adds	r3, #1
 800af10:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	3b0a      	subs	r3, #10
 800af16:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800af18:	79fb      	ldrb	r3, [r7, #7]
 800af1a:	2b09      	cmp	r3, #9
 800af1c:	d8f6      	bhi.n	800af0c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	011b      	lsls	r3, r3, #4
 800af24:	b2da      	uxtb	r2, r3
 800af26:	79fb      	ldrb	r3, [r7, #7]
 800af28:	4313      	orrs	r3, r2
 800af2a:	b2db      	uxtb	r3, r3
}
 800af2c:	4618      	mov	r0, r3
 800af2e:	3714      	adds	r7, #20
 800af30:	46bd      	mov	sp, r7
 800af32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af36:	4770      	bx	lr

0800af38 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800af38:	b480      	push	{r7}
 800af3a:	b085      	sub	sp, #20
 800af3c:	af00      	add	r7, sp, #0
 800af3e:	4603      	mov	r3, r0
 800af40:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800af42:	2300      	movs	r3, #0
 800af44:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800af46:	79fb      	ldrb	r3, [r7, #7]
 800af48:	091b      	lsrs	r3, r3, #4
 800af4a:	b2db      	uxtb	r3, r3
 800af4c:	461a      	mov	r2, r3
 800af4e:	4613      	mov	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4413      	add	r3, r2
 800af54:	005b      	lsls	r3, r3, #1
 800af56:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	79fb      	ldrb	r3, [r7, #7]
 800af5e:	f003 030f 	and.w	r3, r3, #15
 800af62:	b2db      	uxtb	r3, r3
 800af64:	4413      	add	r3, r2
 800af66:	b2db      	uxtb	r3, r3
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af72:	4770      	bx	lr

0800af74 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800af74:	b480      	push	{r7}
 800af76:	b087      	sub	sp, #28
 800af78:	af00      	add	r7, sp, #0
 800af7a:	60f8      	str	r0, [r7, #12]
 800af7c:	60b9      	str	r1, [r7, #8]
 800af7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800af80:	2300      	movs	r3, #0
 800af82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	3350      	adds	r3, #80	; 0x50
 800af8a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800af8c:	68bb      	ldr	r3, [r7, #8]
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	697a      	ldr	r2, [r7, #20]
 800af92:	4413      	add	r3, r2
 800af94:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800af96:	697b      	ldr	r3, [r7, #20]
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	601a      	str	r2, [r3, #0]
}
 800af9c:	bf00      	nop
 800af9e:	371c      	adds	r7, #28
 800afa0:	46bd      	mov	sp, r7
 800afa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa6:	4770      	bx	lr

0800afa8 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
 800afb0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	3350      	adds	r3, #80	; 0x50
 800afbc:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	68fa      	ldr	r2, [r7, #12]
 800afc4:	4413      	add	r3, r2
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3714      	adds	r7, #20
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d101      	bne.n	800afea <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	e022      	b.n	800b030 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d105      	bne.n	800b002 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2200      	movs	r2, #0
 800affa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7fa f979 	bl	80052f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2203      	movs	r2, #3
 800b006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f000 f814 	bl	800b038 <HAL_SD_InitCard>
 800b010:	4603      	mov	r3, r0
 800b012:	2b00      	cmp	r3, #0
 800b014:	d001      	beq.n	800b01a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b016:	2301      	movs	r3, #1
 800b018:	e00a      	b.n	800b030 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2200      	movs	r2, #0
 800b01e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2201      	movs	r2, #1
 800b02a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b02e:	2300      	movs	r3, #0
}
 800b030:	4618      	mov	r0, r3
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}

0800b038 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b038:	b5b0      	push	{r4, r5, r7, lr}
 800b03a:	b08e      	sub	sp, #56	; 0x38
 800b03c:	af04      	add	r7, sp, #16
 800b03e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b040:	2300      	movs	r3, #0
 800b042:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b044:	2300      	movs	r3, #0
 800b046:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b048:	2300      	movs	r3, #0
 800b04a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b04c:	2300      	movs	r3, #0
 800b04e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b050:	2300      	movs	r3, #0
 800b052:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b054:	2376      	movs	r3, #118	; 0x76
 800b056:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681d      	ldr	r5, [r3, #0]
 800b05c:	466c      	mov	r4, sp
 800b05e:	f107 0314 	add.w	r3, r7, #20
 800b062:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b066:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b06a:	f107 0308 	add.w	r3, r7, #8
 800b06e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b070:	4628      	mov	r0, r5
 800b072:	f003 fb29 	bl	800e6c8 <SDIO_Init>
 800b076:	4603      	mov	r3, r0
 800b078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b080:	2b00      	cmp	r3, #0
 800b082:	d001      	beq.n	800b088 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b084:	2301      	movs	r3, #1
 800b086:	e04f      	b.n	800b128 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b088:	4b29      	ldr	r3, [pc, #164]	; (800b130 <HAL_SD_InitCard+0xf8>)
 800b08a:	2200      	movs	r2, #0
 800b08c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	4618      	mov	r0, r3
 800b094:	f003 fb61 	bl	800e75a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b098:	4b25      	ldr	r3, [pc, #148]	; (800b130 <HAL_SD_InitCard+0xf8>)
 800b09a:	2201      	movs	r2, #1
 800b09c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800b09e:	2002      	movs	r0, #2
 800b0a0:	f7fb fdcc 	bl	8006c3c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 ff6b 	bl	800bf80 <SD_PowerON>
 800b0aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0ac:	6a3b      	ldr	r3, [r7, #32]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d00b      	beq.n	800b0ca <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	431a      	orrs	r2, r3
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e02e      	b.n	800b128 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fe8a 	bl	800bde4 <SD_InitCard>
 800b0d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00b      	beq.n	800b0f0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2201      	movs	r2, #1
 800b0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0e4:	6a3b      	ldr	r3, [r7, #32]
 800b0e6:	431a      	orrs	r2, r3
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e01b      	b.n	800b128 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f003 fbc0 	bl	800e87e <SDMMC_CmdBlockLength>
 800b0fe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b100:	6a3b      	ldr	r3, [r7, #32]
 800b102:	2b00      	cmp	r3, #0
 800b104:	d00f      	beq.n	800b126 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	4a0a      	ldr	r2, [pc, #40]	; (800b134 <HAL_SD_InitCard+0xfc>)
 800b10c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b112:	6a3b      	ldr	r3, [r7, #32]
 800b114:	431a      	orrs	r2, r3
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2201      	movs	r2, #1
 800b11e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b122:	2301      	movs	r3, #1
 800b124:	e000      	b.n	800b128 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800b126:	2300      	movs	r3, #0
}
 800b128:	4618      	mov	r0, r3
 800b12a:	3728      	adds	r7, #40	; 0x28
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bdb0      	pop	{r4, r5, r7, pc}
 800b130:	422580a0 	.word	0x422580a0
 800b134:	004005ff 	.word	0x004005ff

0800b138 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08c      	sub	sp, #48	; 0x30
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
 800b144:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d107      	bne.n	800b160 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b154:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b15c:	2301      	movs	r3, #1
 800b15e:	e0c0      	b.n	800b2e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b166:	b2db      	uxtb	r3, r3
 800b168:	2b01      	cmp	r3, #1
 800b16a:	f040 80b9 	bne.w	800b2e0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	441a      	add	r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b17e:	429a      	cmp	r2, r3
 800b180:	d907      	bls.n	800b192 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b186:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b18e:	2301      	movs	r3, #1
 800b190:	e0a7      	b.n	800b2e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	2203      	movs	r2, #3
 800b196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a8:	68fa      	ldr	r2, [r7, #12]
 800b1aa:	6812      	ldr	r2, [r2, #0]
 800b1ac:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800b1b0:	f043 0302 	orr.w	r3, r3, #2
 800b1b4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ba:	4a4c      	ldr	r2, [pc, #304]	; (800b2ec <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800b1bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1c2:	4a4b      	ldr	r2, [pc, #300]	; (800b2f0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800b1c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	430a      	orrs	r2, r1
 800b1f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	3380      	adds	r3, #128	; 0x80
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	025b      	lsls	r3, r3, #9
 800b204:	089b      	lsrs	r3, r3, #2
 800b206:	f7fc fc73 	bl	8007af0 <HAL_DMA_Start_IT>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d017      	beq.n	800b240 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b21e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a33      	ldr	r2, [pc, #204]	; (800b2f4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b226:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2201      	movs	r2, #1
 800b238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	e050      	b.n	800b2e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b240:	4b2d      	ldr	r3, [pc, #180]	; (800b2f8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b242:	2201      	movs	r2, #1
 800b244:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d002      	beq.n	800b254 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800b24e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b250:	025b      	lsls	r3, r3, #9
 800b252:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b254:	f04f 33ff 	mov.w	r3, #4294967295
 800b258:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	025b      	lsls	r3, r3, #9
 800b25e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b260:	2390      	movs	r3, #144	; 0x90
 800b262:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b264:	2302      	movs	r3, #2
 800b266:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b268:	2300      	movs	r3, #0
 800b26a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b26c:	2301      	movs	r3, #1
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f107 0210 	add.w	r2, r7, #16
 800b278:	4611      	mov	r1, r2
 800b27a:	4618      	mov	r0, r3
 800b27c:	f003 fad3 	bl	800e826 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d90a      	bls.n	800b29c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	2282      	movs	r2, #130	; 0x82
 800b28a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b292:	4618      	mov	r0, r3
 800b294:	f003 fb37 	bl	800e906 <SDMMC_CmdReadMultiBlock>
 800b298:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b29a:	e009      	b.n	800b2b0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	2281      	movs	r2, #129	; 0x81
 800b2a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f003 fb0a 	bl	800e8c2 <SDMMC_CmdReadSingleBlock>
 800b2ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b2b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d012      	beq.n	800b2dc <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a0e      	ldr	r2, [pc, #56]	; (800b2f4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800b2bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c4:	431a      	orrs	r2, r3
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	e002      	b.n	800b2e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	e000      	b.n	800b2e2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800b2e0:	2302      	movs	r3, #2
  }
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3730      	adds	r7, #48	; 0x30
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	0800bbf3 	.word	0x0800bbf3
 800b2f0:	0800bc65 	.word	0x0800bc65
 800b2f4:	004005ff 	.word	0x004005ff
 800b2f8:	4225858c 	.word	0x4225858c

0800b2fc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08c      	sub	sp, #48	; 0x30
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
 800b308:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d107      	bne.n	800b324 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b318:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e0c5      	b.n	800b4b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b32a:	b2db      	uxtb	r3, r3
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	f040 80be 	bne.w	800b4ae <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	2200      	movs	r2, #0
 800b336:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	441a      	add	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b342:	429a      	cmp	r2, r3
 800b344:	d907      	bls.n	800b356 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b34a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b352:	2301      	movs	r3, #1
 800b354:	e0ac      	b.n	800b4b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	2203      	movs	r2, #3
 800b35a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2200      	movs	r2, #0
 800b364:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	6812      	ldr	r2, [r2, #0]
 800b370:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800b374:	f043 0302 	orr.w	r3, r3, #2
 800b378:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b37e:	4a4e      	ldr	r2, [pc, #312]	; (800b4b8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800b380:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b386:	4a4d      	ldr	r2, [pc, #308]	; (800b4bc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800b388:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b38e:	2200      	movs	r2, #0
 800b390:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b396:	2b01      	cmp	r3, #1
 800b398:	d002      	beq.n	800b3a0 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800b39a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39c:	025b      	lsls	r3, r3, #9
 800b39e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d90a      	bls.n	800b3bc <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	22a0      	movs	r2, #160	; 0xa0
 800b3aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f003 faeb 	bl	800e98e <SDMMC_CmdWriteMultiBlock>
 800b3b8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b3ba:	e009      	b.n	800b3d0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	2290      	movs	r2, #144	; 0x90
 800b3c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f003 fabe 	bl	800e94a <SDMMC_CmdWriteSingleBlock>
 800b3ce:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d012      	beq.n	800b3fc <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a39      	ldr	r2, [pc, #228]	; (800b4c0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b3dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	2201      	movs	r2, #1
 800b3ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e059      	b.n	800b4b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b3fc:	4b31      	ldr	r3, [pc, #196]	; (800b4c4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b3fe:	2201      	movs	r2, #1
 800b400:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b406:	2240      	movs	r2, #64	; 0x40
 800b408:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b41a:	689a      	ldr	r2, [r3, #8]
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	430a      	orrs	r2, r1
 800b424:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b42a:	68b9      	ldr	r1, [r7, #8]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3380      	adds	r3, #128	; 0x80
 800b432:	461a      	mov	r2, r3
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	025b      	lsls	r3, r3, #9
 800b438:	089b      	lsrs	r3, r3, #2
 800b43a:	f7fc fb59 	bl	8007af0 <HAL_DMA_Start_IT>
 800b43e:	4603      	mov	r3, r0
 800b440:	2b00      	cmp	r3, #0
 800b442:	d01c      	beq.n	800b47e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b44a:	68fa      	ldr	r2, [r7, #12]
 800b44c:	6812      	ldr	r2, [r2, #0]
 800b44e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800b452:	f023 0302 	bic.w	r3, r3, #2
 800b456:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a18      	ldr	r2, [pc, #96]	; (800b4c0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800b45e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b464:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2201      	movs	r2, #1
 800b470:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2200      	movs	r2, #0
 800b478:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e018      	b.n	800b4b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b47e:	f04f 33ff 	mov.w	r3, #4294967295
 800b482:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	025b      	lsls	r3, r3, #9
 800b488:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b48a:	2390      	movs	r3, #144	; 0x90
 800b48c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800b48e:	2300      	movs	r3, #0
 800b490:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b492:	2300      	movs	r3, #0
 800b494:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b496:	2301      	movs	r3, #1
 800b498:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f107 0210 	add.w	r2, r7, #16
 800b4a2:	4611      	mov	r1, r2
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f003 f9be 	bl	800e826 <SDIO_ConfigData>

      return HAL_OK;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	e000      	b.n	800b4b0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800b4ae:	2302      	movs	r3, #2
  }
}
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	3730      	adds	r7, #48	; 0x30
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	0800bbc9 	.word	0x0800bbc9
 800b4bc:	0800bc65 	.word	0x0800bc65
 800b4c0:	004005ff 	.word	0x004005ff
 800b4c4:	4225858c 	.word	0x4225858c

0800b4c8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d008      	beq.n	800b4f6 <HAL_SD_IRQHandler+0x2e>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f003 0308 	and.w	r3, r3, #8
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d003      	beq.n	800b4f6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fdfc 	bl	800c0ec <SD_Read_IT>
 800b4f4:	e165      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b500:	2b00      	cmp	r3, #0
 800b502:	f000 808f 	beq.w	800b624 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b50e:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	6812      	ldr	r2, [r2, #0]
 800b51a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800b51e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800b522:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f022 0201 	bic.w	r2, r2, #1
 800b532:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	f003 0308 	and.w	r3, r3, #8
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d039      	beq.n	800b5b2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	f003 0302 	and.w	r3, r3, #2
 800b544:	2b00      	cmp	r3, #0
 800b546:	d104      	bne.n	800b552 <HAL_SD_IRQHandler+0x8a>
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	f003 0320 	and.w	r3, r3, #32
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d011      	beq.n	800b576 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4618      	mov	r0, r3
 800b558:	f003 fa3c 	bl	800e9d4 <SDMMC_CmdStopTransfer>
 800b55c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d008      	beq.n	800b576 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	431a      	orrs	r2, r3
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f92f 	bl	800b7d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f240 523a 	movw	r2, #1338	; 0x53a
 800b57e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2200      	movs	r2, #0
 800b58c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	f003 0301 	and.w	r3, r3, #1
 800b594:	2b00      	cmp	r3, #0
 800b596:	d104      	bne.n	800b5a2 <HAL_SD_IRQHandler+0xda>
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f003 0302 	and.w	r3, r3, #2
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d003      	beq.n	800b5aa <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f003 fe5a 	bl	800f25c <HAL_SD_RxCpltCallback>
 800b5a8:	e10b      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f003 fe4c 	bl	800f248 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b5b0:	e107      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 8102 	beq.w	800b7c2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	f003 0320 	and.w	r3, r3, #32
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d011      	beq.n	800b5ec <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	f003 fa01 	bl	800e9d4 <SDMMC_CmdStopTransfer>
 800b5d2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d008      	beq.n	800b5ec <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	431a      	orrs	r2, r3
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 f8f4 	bl	800b7d4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f003 0301 	and.w	r3, r3, #1
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f040 80e5 	bne.w	800b7c2 <HAL_SD_IRQHandler+0x2fa>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f003 0302 	and.w	r3, r3, #2
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f040 80df 	bne.w	800b7c2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f022 0208 	bic.w	r2, r2, #8
 800b612:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	2201      	movs	r2, #1
 800b618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f003 fe13 	bl	800f248 <HAL_SD_TxCpltCallback>
}
 800b622:	e0ce      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b62a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d008      	beq.n	800b644 <HAL_SD_IRQHandler+0x17c>
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f003 0308 	and.w	r3, r3, #8
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d003      	beq.n	800b644 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 fda6 	bl	800c18e <SD_Write_IT>
 800b642:	e0be      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b64a:	f240 233a 	movw	r3, #570	; 0x23a
 800b64e:	4013      	ands	r3, r2
 800b650:	2b00      	cmp	r3, #0
 800b652:	f000 80b6 	beq.w	800b7c2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b65c:	f003 0302 	and.w	r3, r3, #2
 800b660:	2b00      	cmp	r3, #0
 800b662:	d005      	beq.n	800b670 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b668:	f043 0202 	orr.w	r2, r3, #2
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b676:	f003 0308 	and.w	r3, r3, #8
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d005      	beq.n	800b68a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b682:	f043 0208 	orr.w	r2, r3, #8
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b690:	f003 0320 	and.w	r3, r3, #32
 800b694:	2b00      	cmp	r3, #0
 800b696:	d005      	beq.n	800b6a4 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69c:	f043 0220 	orr.w	r2, r3, #32
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6aa:	f003 0310 	and.w	r3, r3, #16
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d005      	beq.n	800b6be <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b6:	f043 0210 	orr.w	r2, r3, #16
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d005      	beq.n	800b6d8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d0:	f043 0208 	orr.w	r2, r3, #8
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f240 723a 	movw	r2, #1850	; 0x73a
 800b6e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	6812      	ldr	r2, [r2, #0]
 800b6ec:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800b6f0:	f023 0302 	bic.w	r3, r3, #2
 800b6f4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f003 f96a 	bl	800e9d4 <SDMMC_CmdStopTransfer>
 800b700:	4602      	mov	r2, r0
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b706:	431a      	orrs	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f003 0308 	and.w	r3, r3, #8
 800b712:	2b00      	cmp	r3, #0
 800b714:	d00a      	beq.n	800b72c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2201      	movs	r2, #1
 800b71a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f000 f855 	bl	800b7d4 <HAL_SD_ErrorCallback>
}
 800b72a:	e04a      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b732:	2b00      	cmp	r3, #0
 800b734:	d045      	beq.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d104      	bne.n	800b74a <HAL_SD_IRQHandler+0x282>
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	f003 0320 	and.w	r3, r3, #32
 800b746:	2b00      	cmp	r3, #0
 800b748:	d011      	beq.n	800b76e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b74e:	4a1f      	ldr	r2, [pc, #124]	; (800b7cc <HAL_SD_IRQHandler+0x304>)
 800b750:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b756:	4618      	mov	r0, r3
 800b758:	f7fc fa92 	bl	8007c80 <HAL_DMA_Abort_IT>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d02f      	beq.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b766:	4618      	mov	r0, r3
 800b768:	f000 face 	bl	800bd08 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b76c:	e029      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	f003 0301 	and.w	r3, r3, #1
 800b774:	2b00      	cmp	r3, #0
 800b776:	d104      	bne.n	800b782 <HAL_SD_IRQHandler+0x2ba>
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f003 0302 	and.w	r3, r3, #2
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d011      	beq.n	800b7a6 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b786:	4a12      	ldr	r2, [pc, #72]	; (800b7d0 <HAL_SD_IRQHandler+0x308>)
 800b788:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78e:	4618      	mov	r0, r3
 800b790:	f7fc fa76 	bl	8007c80 <HAL_DMA_Abort_IT>
 800b794:	4603      	mov	r3, r0
 800b796:	2b00      	cmp	r3, #0
 800b798:	d013      	beq.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b79e:	4618      	mov	r0, r3
 800b7a0:	f000 fae9 	bl	800bd76 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b7a4:	e00d      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f003 fd3a 	bl	800f234 <HAL_SD_AbortCallback>
}
 800b7c0:	e7ff      	b.n	800b7c2 <HAL_SD_IRQHandler+0x2fa>
 800b7c2:	bf00      	nop
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	0800bd09 	.word	0x0800bd09
 800b7d0:	0800bd77 	.word	0x0800bd77

0800b7d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b7d4:	b480      	push	{r7}
 800b7d6:	b083      	sub	sp, #12
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b7f6:	0f9b      	lsrs	r3, r3, #30
 800b7f8:	b2da      	uxtb	r2, r3
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b802:	0e9b      	lsrs	r3, r3, #26
 800b804:	b2db      	uxtb	r3, r3
 800b806:	f003 030f 	and.w	r3, r3, #15
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b814:	0e1b      	lsrs	r3, r3, #24
 800b816:	b2db      	uxtb	r3, r3
 800b818:	f003 0303 	and.w	r3, r3, #3
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b826:	0c1b      	lsrs	r3, r3, #16
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	683b      	ldr	r3, [r7, #0]
 800b82c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b832:	0a1b      	lsrs	r3, r3, #8
 800b834:	b2da      	uxtb	r2, r3
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b83e:	b2da      	uxtb	r2, r3
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b848:	0d1b      	lsrs	r3, r3, #20
 800b84a:	b29a      	uxth	r2, r3
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b854:	0c1b      	lsrs	r3, r3, #16
 800b856:	b2db      	uxtb	r3, r3
 800b858:	f003 030f 	and.w	r3, r3, #15
 800b85c:	b2da      	uxtb	r2, r3
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b866:	0bdb      	lsrs	r3, r3, #15
 800b868:	b2db      	uxtb	r3, r3
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b878:	0b9b      	lsrs	r3, r3, #14
 800b87a:	b2db      	uxtb	r3, r3
 800b87c:	f003 0301 	and.w	r3, r3, #1
 800b880:	b2da      	uxtb	r2, r3
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b88a:	0b5b      	lsrs	r3, r3, #13
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	f003 0301 	and.w	r3, r3, #1
 800b892:	b2da      	uxtb	r2, r3
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b89c:	0b1b      	lsrs	r3, r3, #12
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	f003 0301 	and.w	r3, r3, #1
 800b8a4:	b2da      	uxtb	r2, r3
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d163      	bne.n	800b980 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8bc:	009a      	lsls	r2, r3, #2
 800b8be:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b8c2:	4013      	ands	r3, r2
 800b8c4:	687a      	ldr	r2, [r7, #4]
 800b8c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b8c8:	0f92      	lsrs	r2, r2, #30
 800b8ca:	431a      	orrs	r2, r3
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8d4:	0edb      	lsrs	r3, r3, #27
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f003 0307 	and.w	r3, r3, #7
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8e6:	0e1b      	lsrs	r3, r3, #24
 800b8e8:	b2db      	uxtb	r3, r3
 800b8ea:	f003 0307 	and.w	r3, r3, #7
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8f8:	0d5b      	lsrs	r3, r3, #21
 800b8fa:	b2db      	uxtb	r3, r3
 800b8fc:	f003 0307 	and.w	r3, r3, #7
 800b900:	b2da      	uxtb	r2, r3
 800b902:	683b      	ldr	r3, [r7, #0]
 800b904:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b90a:	0c9b      	lsrs	r3, r3, #18
 800b90c:	b2db      	uxtb	r3, r3
 800b90e:	f003 0307 	and.w	r3, r3, #7
 800b912:	b2da      	uxtb	r2, r3
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b91c:	0bdb      	lsrs	r3, r3, #15
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	f003 0307 	and.w	r3, r3, #7
 800b924:	b2da      	uxtb	r2, r3
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	691b      	ldr	r3, [r3, #16]
 800b92e:	1c5a      	adds	r2, r3, #1
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	7e1b      	ldrb	r3, [r3, #24]
 800b938:	b2db      	uxtb	r3, r3
 800b93a:	f003 0307 	and.w	r3, r3, #7
 800b93e:	3302      	adds	r3, #2
 800b940:	2201      	movs	r2, #1
 800b942:	fa02 f303 	lsl.w	r3, r2, r3
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b94a:	fb03 f202 	mul.w	r2, r3, r2
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	7a1b      	ldrb	r3, [r3, #8]
 800b956:	b2db      	uxtb	r3, r3
 800b958:	f003 030f 	and.w	r3, r3, #15
 800b95c:	2201      	movs	r2, #1
 800b95e:	409a      	lsls	r2, r3
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b968:	687a      	ldr	r2, [r7, #4]
 800b96a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b96c:	0a52      	lsrs	r2, r2, #9
 800b96e:	fb03 f202 	mul.w	r2, r3, r2
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b97c:	661a      	str	r2, [r3, #96]	; 0x60
 800b97e:	e031      	b.n	800b9e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b984:	2b01      	cmp	r3, #1
 800b986:	d11d      	bne.n	800b9c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b98c:	041b      	lsls	r3, r3, #16
 800b98e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b996:	0c1b      	lsrs	r3, r3, #16
 800b998:	431a      	orrs	r2, r3
 800b99a:	683b      	ldr	r3, [r7, #0]
 800b99c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	029a      	lsls	r2, r3, #10
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	661a      	str	r2, [r3, #96]	; 0x60
 800b9c2:	e00f      	b.n	800b9e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4a58      	ldr	r2, [pc, #352]	; (800bb2c <HAL_SD_GetCardCSD+0x344>)
 800b9ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e09d      	b.n	800bb20 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e8:	0b9b      	lsrs	r3, r3, #14
 800b9ea:	b2db      	uxtb	r3, r3
 800b9ec:	f003 0301 	and.w	r3, r3, #1
 800b9f0:	b2da      	uxtb	r2, r3
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9fa:	09db      	lsrs	r3, r3, #7
 800b9fc:	b2db      	uxtb	r3, r3
 800b9fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba02:	b2da      	uxtb	r2, r3
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba0c:	b2db      	uxtb	r3, r3
 800ba0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba1c:	0fdb      	lsrs	r3, r3, #31
 800ba1e:	b2da      	uxtb	r2, r3
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba28:	0f5b      	lsrs	r3, r3, #29
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	f003 0303 	and.w	r3, r3, #3
 800ba30:	b2da      	uxtb	r2, r3
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba3a:	0e9b      	lsrs	r3, r3, #26
 800ba3c:	b2db      	uxtb	r3, r3
 800ba3e:	f003 0307 	and.w	r3, r3, #7
 800ba42:	b2da      	uxtb	r2, r3
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba4c:	0d9b      	lsrs	r3, r3, #22
 800ba4e:	b2db      	uxtb	r3, r3
 800ba50:	f003 030f 	and.w	r3, r3, #15
 800ba54:	b2da      	uxtb	r2, r3
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba5e:	0d5b      	lsrs	r3, r3, #21
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	2200      	movs	r2, #0
 800ba72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7a:	0c1b      	lsrs	r3, r3, #16
 800ba7c:	b2db      	uxtb	r3, r3
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	b2da      	uxtb	r2, r3
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba8e:	0bdb      	lsrs	r3, r3, #15
 800ba90:	b2db      	uxtb	r3, r3
 800ba92:	f003 0301 	and.w	r3, r3, #1
 800ba96:	b2da      	uxtb	r2, r3
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa2:	0b9b      	lsrs	r3, r3, #14
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	f003 0301 	and.w	r3, r3, #1
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bab6:	0b5b      	lsrs	r3, r3, #13
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	b2da      	uxtb	r2, r3
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baca:	0b1b      	lsrs	r3, r3, #12
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	f003 0301 	and.w	r3, r3, #1
 800bad2:	b2da      	uxtb	r2, r3
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bade:	0a9b      	lsrs	r3, r3, #10
 800bae0:	b2db      	uxtb	r3, r3
 800bae2:	f003 0303 	and.w	r3, r3, #3
 800bae6:	b2da      	uxtb	r2, r3
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf2:	0a1b      	lsrs	r3, r3, #8
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	f003 0303 	and.w	r3, r3, #3
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb06:	085b      	lsrs	r3, r3, #1
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb0e:	b2da      	uxtb	r2, r3
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2201      	movs	r2, #1
 800bb1a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr
 800bb2c:	004005ff 	.word	0x004005ff

0800bb30 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b083      	sub	sp, #12
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bb7a:	2300      	movs	r3, #0
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	370c      	adds	r7, #12
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b086      	sub	sp, #24
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bb90:	2300      	movs	r3, #0
 800bb92:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bb94:	f107 030c 	add.w	r3, r7, #12
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fa7e 	bl	800c09c <SD_SendStatus>
 800bba0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d005      	beq.n	800bbb4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	431a      	orrs	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	0a5b      	lsrs	r3, r3, #9
 800bbb8:	f003 030f 	and.w	r3, r3, #15
 800bbbc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bbbe:	693b      	ldr	r3, [r7, #16]
}
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	3718      	adds	r7, #24
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	bd80      	pop	{r7, pc}

0800bbc8 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bbc8:	b480      	push	{r7}
 800bbca:	b085      	sub	sp, #20
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bbe4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bbe6:	bf00      	nop
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b084      	sub	sp, #16
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfe:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc04:	2b82      	cmp	r3, #130	; 0x82
 800bc06:	d111      	bne.n	800bc2c <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	f002 fee1 	bl	800e9d4 <SDMMC_CmdStopTransfer>
 800bc12:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d008      	beq.n	800bc2c <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc1e:	68bb      	ldr	r3, [r7, #8]
 800bc20:	431a      	orrs	r2, r3
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800bc26:	68f8      	ldr	r0, [r7, #12]
 800bc28:	f7ff fdd4 	bl	800b7d4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f022 0208 	bic.w	r2, r2, #8
 800bc3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f240 523a 	movw	r2, #1338	; 0x53a
 800bc44:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800bc54:	68f8      	ldr	r0, [r7, #12]
 800bc56:	f003 fb01 	bl	800f25c <HAL_SD_RxCpltCallback>
#endif
}
 800bc5a:	bf00      	nop
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b086      	sub	sp, #24
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc70:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f7fc f9b0 	bl	8007fd8 <HAL_DMA_GetError>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d03e      	beq.n	800bcfc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800bc7e:	697b      	ldr	r3, [r7, #20]
 800bc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc84:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc8c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800bc8e:	693b      	ldr	r3, [r7, #16]
 800bc90:	2b01      	cmp	r3, #1
 800bc92:	d002      	beq.n	800bc9a <SD_DMAError+0x36>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d12d      	bne.n	800bcf6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a19      	ldr	r2, [pc, #100]	; (800bd04 <SD_DMAError+0xa0>)
 800bca0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bca2:	697b      	ldr	r3, [r7, #20]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bcb0:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800bcbe:	6978      	ldr	r0, [r7, #20]
 800bcc0:	f7ff ff62 	bl	800bb88 <HAL_SD_GetCardState>
 800bcc4:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	2b06      	cmp	r3, #6
 800bcca:	d002      	beq.n	800bcd2 <SD_DMAError+0x6e>
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2b05      	cmp	r3, #5
 800bcd0:	d10a      	bne.n	800bce8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f002 fe7c 	bl	800e9d4 <SDMMC_CmdStopTransfer>
 800bcdc:	4602      	mov	r2, r0
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce2:	431a      	orrs	r2, r3
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800bce8:	697b      	ldr	r3, [r7, #20]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bcf0:	697b      	ldr	r3, [r7, #20]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800bcf6:	6978      	ldr	r0, [r7, #20]
 800bcf8:	f7ff fd6c 	bl	800b7d4 <HAL_SD_ErrorCallback>
#endif
  }
}
 800bcfc:	bf00      	nop
 800bcfe:	3718      	adds	r7, #24
 800bd00:	46bd      	mov	sp, r7
 800bd02:	bd80      	pop	{r7, pc}
 800bd04:	004005ff 	.word	0x004005ff

0800bd08 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b084      	sub	sp, #16
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd14:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f240 523a 	movw	r2, #1338	; 0x53a
 800bd1e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bd20:	68f8      	ldr	r0, [r7, #12]
 800bd22:	f7ff ff31 	bl	800bb88 <HAL_SD_GetCardState>
 800bd26:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	2200      	movs	r2, #0
 800bd34:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	2b06      	cmp	r3, #6
 800bd3a:	d002      	beq.n	800bd42 <SD_DMATxAbort+0x3a>
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	2b05      	cmp	r3, #5
 800bd40:	d10a      	bne.n	800bd58 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	4618      	mov	r0, r3
 800bd48:	f002 fe44 	bl	800e9d4 <SDMMC_CmdStopTransfer>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd52:	431a      	orrs	r2, r3
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d103      	bne.n	800bd68 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bd60:	68f8      	ldr	r0, [r7, #12]
 800bd62:	f003 fa67 	bl	800f234 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bd66:	e002      	b.n	800bd6e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f7ff fd33 	bl	800b7d4 <HAL_SD_ErrorCallback>
}
 800bd6e:	bf00      	nop
 800bd70:	3710      	adds	r7, #16
 800bd72:	46bd      	mov	sp, r7
 800bd74:	bd80      	pop	{r7, pc}

0800bd76 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b084      	sub	sp, #16
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd82:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	f240 523a 	movw	r2, #1338	; 0x53a
 800bd8c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7ff fefa 	bl	800bb88 <HAL_SD_GetCardState>
 800bd94:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	2201      	movs	r2, #1
 800bd9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2200      	movs	r2, #0
 800bda2:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	2b06      	cmp	r3, #6
 800bda8:	d002      	beq.n	800bdb0 <SD_DMARxAbort+0x3a>
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	2b05      	cmp	r3, #5
 800bdae:	d10a      	bne.n	800bdc6 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f002 fe0d 	bl	800e9d4 <SDMMC_CmdStopTransfer>
 800bdba:	4602      	mov	r2, r0
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc0:	431a      	orrs	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d103      	bne.n	800bdd6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f003 fa30 	bl	800f234 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bdd4:	e002      	b.n	800bddc <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f7ff fcfc 	bl	800b7d4 <HAL_SD_ErrorCallback>
}
 800bddc:	bf00      	nop
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bde4:	b5b0      	push	{r4, r5, r7, lr}
 800bde6:	b094      	sub	sp, #80	; 0x50
 800bde8:	af04      	add	r7, sp, #16
 800bdea:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bdec:	2301      	movs	r3, #1
 800bdee:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f002 fcbe 	bl	800e776 <SDIO_GetPowerState>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d102      	bne.n	800be06 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800be00:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800be04:	e0b8      	b.n	800bf78 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d02f      	beq.n	800be6e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4618      	mov	r0, r3
 800be14:	f002 fea5 	bl	800eb62 <SDMMC_CmdSendCID>
 800be18:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800be1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d001      	beq.n	800be24 <SD_InitCard+0x40>
    {
      return errorstate;
 800be20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be22:	e0a9      	b.n	800bf78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	2100      	movs	r1, #0
 800be2a:	4618      	mov	r0, r3
 800be2c:	f002 fce8 	bl	800e800 <SDIO_GetResponse>
 800be30:	4602      	mov	r2, r0
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2104      	movs	r1, #4
 800be3c:	4618      	mov	r0, r3
 800be3e:	f002 fcdf 	bl	800e800 <SDIO_GetResponse>
 800be42:	4602      	mov	r2, r0
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2108      	movs	r1, #8
 800be4e:	4618      	mov	r0, r3
 800be50:	f002 fcd6 	bl	800e800 <SDIO_GetResponse>
 800be54:	4602      	mov	r2, r0
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	210c      	movs	r1, #12
 800be60:	4618      	mov	r0, r3
 800be62:	f002 fccd 	bl	800e800 <SDIO_GetResponse>
 800be66:	4602      	mov	r2, r0
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be72:	2b03      	cmp	r3, #3
 800be74:	d00d      	beq.n	800be92 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	f107 020e 	add.w	r2, r7, #14
 800be7e:	4611      	mov	r1, r2
 800be80:	4618      	mov	r0, r3
 800be82:	f002 feab 	bl	800ebdc <SDMMC_CmdSetRelAdd>
 800be86:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800be88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d001      	beq.n	800be92 <SD_InitCard+0xae>
    {
      return errorstate;
 800be8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be90:	e072      	b.n	800bf78 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be96:	2b03      	cmp	r3, #3
 800be98:	d036      	beq.n	800bf08 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800be9a:	89fb      	ldrh	r3, [r7, #14]
 800be9c:	461a      	mov	r2, r3
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681a      	ldr	r2, [r3, #0]
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beaa:	041b      	lsls	r3, r3, #16
 800beac:	4619      	mov	r1, r3
 800beae:	4610      	mov	r0, r2
 800beb0:	f002 fe75 	bl	800eb9e <SDMMC_CmdSendCSD>
 800beb4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800beb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d001      	beq.n	800bec0 <SD_InitCard+0xdc>
    {
      return errorstate;
 800bebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bebe:	e05b      	b.n	800bf78 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	2100      	movs	r1, #0
 800bec6:	4618      	mov	r0, r3
 800bec8:	f002 fc9a 	bl	800e800 <SDIO_GetResponse>
 800becc:	4602      	mov	r2, r0
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2104      	movs	r1, #4
 800bed8:	4618      	mov	r0, r3
 800beda:	f002 fc91 	bl	800e800 <SDIO_GetResponse>
 800bede:	4602      	mov	r2, r0
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	2108      	movs	r1, #8
 800beea:	4618      	mov	r0, r3
 800beec:	f002 fc88 	bl	800e800 <SDIO_GetResponse>
 800bef0:	4602      	mov	r2, r0
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	210c      	movs	r1, #12
 800befc:	4618      	mov	r0, r3
 800befe:	f002 fc7f 	bl	800e800 <SDIO_GetResponse>
 800bf02:	4602      	mov	r2, r0
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	2104      	movs	r1, #4
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f002 fc76 	bl	800e800 <SDIO_GetResponse>
 800bf14:	4603      	mov	r3, r0
 800bf16:	0d1a      	lsrs	r2, r3, #20
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800bf1c:	f107 0310 	add.w	r3, r7, #16
 800bf20:	4619      	mov	r1, r3
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f7ff fc60 	bl	800b7e8 <HAL_SD_GetCardCSD>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d002      	beq.n	800bf34 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bf32:	e021      	b.n	800bf78 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6819      	ldr	r1, [r3, #0]
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf3c:	041b      	lsls	r3, r3, #16
 800bf3e:	2200      	movs	r2, #0
 800bf40:	461c      	mov	r4, r3
 800bf42:	4615      	mov	r5, r2
 800bf44:	4622      	mov	r2, r4
 800bf46:	462b      	mov	r3, r5
 800bf48:	4608      	mov	r0, r1
 800bf4a:	f002 fd65 	bl	800ea18 <SDMMC_CmdSelDesel>
 800bf4e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d001      	beq.n	800bf5a <SD_InitCard+0x176>
  {
    return errorstate;
 800bf56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf58:	e00e      	b.n	800bf78 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681d      	ldr	r5, [r3, #0]
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	466c      	mov	r4, sp
 800bf62:	f103 0210 	add.w	r2, r3, #16
 800bf66:	ca07      	ldmia	r2, {r0, r1, r2}
 800bf68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bf6c:	3304      	adds	r3, #4
 800bf6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bf70:	4628      	mov	r0, r5
 800bf72:	f002 fba9 	bl	800e6c8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3740      	adds	r7, #64	; 0x40
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bdb0      	pop	{r4, r5, r7, pc}

0800bf80 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	617b      	str	r3, [r7, #20]
 800bf90:	2300      	movs	r3, #0
 800bf92:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f002 fd60 	bl	800ea5e <SDMMC_CmdGoIdleState>
 800bf9e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <SD_PowerON+0x2a>
  {
    return errorstate;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	e072      	b.n	800c090 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f002 fd73 	bl	800ea9a <SDMMC_CmdOperCond>
 800bfb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00d      	beq.n	800bfd8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	681b      	ldr	r3, [r3, #0]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f002 fd49 	bl	800ea5e <SDMMC_CmdGoIdleState>
 800bfcc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d004      	beq.n	800bfde <SD_PowerON+0x5e>
    {
      return errorstate;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	e05b      	b.n	800c090 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d137      	bne.n	800c056 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	2100      	movs	r1, #0
 800bfec:	4618      	mov	r0, r3
 800bfee:	f002 fd73 	bl	800ead8 <SDMMC_CmdAppCommand>
 800bff2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d02d      	beq.n	800c056 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bffa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bffe:	e047      	b.n	800c090 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	2100      	movs	r1, #0
 800c006:	4618      	mov	r0, r3
 800c008:	f002 fd66 	bl	800ead8 <SDMMC_CmdAppCommand>
 800c00c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <SD_PowerON+0x98>
    {
      return errorstate;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	e03b      	b.n	800c090 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	491e      	ldr	r1, [pc, #120]	; (800c098 <SD_PowerON+0x118>)
 800c01e:	4618      	mov	r0, r3
 800c020:	f002 fd7c 	bl	800eb1c <SDMMC_CmdAppOperCommand>
 800c024:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d002      	beq.n	800c032 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c02c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c030:	e02e      	b.n	800c090 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	2100      	movs	r1, #0
 800c038:	4618      	mov	r0, r3
 800c03a:	f002 fbe1 	bl	800e800 <SDIO_GetResponse>
 800c03e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	0fdb      	lsrs	r3, r3, #31
 800c044:	2b01      	cmp	r3, #1
 800c046:	d101      	bne.n	800c04c <SD_PowerON+0xcc>
 800c048:	2301      	movs	r3, #1
 800c04a:	e000      	b.n	800c04e <SD_PowerON+0xce>
 800c04c:	2300      	movs	r3, #0
 800c04e:	613b      	str	r3, [r7, #16]

    count++;
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	3301      	adds	r3, #1
 800c054:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c05c:	4293      	cmp	r3, r2
 800c05e:	d802      	bhi.n	800c066 <SD_PowerON+0xe6>
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d0cc      	beq.n	800c000 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c06c:	4293      	cmp	r3, r2
 800c06e:	d902      	bls.n	800c076 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c070:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c074:	e00c      	b.n	800c090 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d003      	beq.n	800c088 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2201      	movs	r2, #1
 800c084:	645a      	str	r2, [r3, #68]	; 0x44
 800c086:	e002      	b.n	800c08e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2200      	movs	r2, #0
 800c08c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c08e:	2300      	movs	r3, #0
}
 800c090:	4618      	mov	r0, r3
 800c092:	3718      	adds	r7, #24
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}
 800c098:	c1100000 	.word	0xc1100000

0800c09c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c09c:	b580      	push	{r7, lr}
 800c09e:	b084      	sub	sp, #16
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	6078      	str	r0, [r7, #4]
 800c0a4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d102      	bne.n	800c0b2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c0ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c0b0:	e018      	b.n	800c0e4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681a      	ldr	r2, [r3, #0]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ba:	041b      	lsls	r3, r3, #16
 800c0bc:	4619      	mov	r1, r3
 800c0be:	4610      	mov	r0, r2
 800c0c0:	f002 fdad 	bl	800ec1e <SDMMC_CmdSendStatus>
 800c0c4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	e009      	b.n	800c0e4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2100      	movs	r1, #0
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	f002 fb92 	bl	800e800 <SDIO_GetResponse>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c0e2:	2300      	movs	r3, #0
}
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	3710      	adds	r7, #16
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	bd80      	pop	{r7, pc}

0800c0ec <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0f8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d03f      	beq.n	800c186 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c106:	2300      	movs	r3, #0
 800c108:	617b      	str	r3, [r7, #20]
 800c10a:	e033      	b.n	800c174 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	4618      	mov	r0, r3
 800c112:	f002 fb04 	bl	800e71e <SDIO_ReadFIFO>
 800c116:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	b2da      	uxtb	r2, r3
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	3301      	adds	r3, #1
 800c124:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	3b01      	subs	r3, #1
 800c12a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c12c:	68bb      	ldr	r3, [r7, #8]
 800c12e:	0a1b      	lsrs	r3, r3, #8
 800c130:	b2da      	uxtb	r2, r3
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	3301      	adds	r3, #1
 800c13a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	3b01      	subs	r3, #1
 800c140:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c142:	68bb      	ldr	r3, [r7, #8]
 800c144:	0c1b      	lsrs	r3, r3, #16
 800c146:	b2da      	uxtb	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	3301      	adds	r3, #1
 800c150:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	3b01      	subs	r3, #1
 800c156:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	0e1b      	lsrs	r3, r3, #24
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3301      	adds	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	3b01      	subs	r3, #1
 800c16c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	3301      	adds	r3, #1
 800c172:	617b      	str	r3, [r7, #20]
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	2b07      	cmp	r3, #7
 800c178:	d9c8      	bls.n	800c10c <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	693a      	ldr	r2, [r7, #16]
 800c184:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c186:	bf00      	nop
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c18e:	b580      	push	{r7, lr}
 800c190:	b086      	sub	sp, #24
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	6a1b      	ldr	r3, [r3, #32]
 800c19a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1a0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d043      	beq.n	800c230 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	617b      	str	r3, [r7, #20]
 800c1ac:	e037      	b.n	800c21e <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3301      	adds	r3, #1
 800c1b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1ba:	693b      	ldr	r3, [r7, #16]
 800c1bc:	3b01      	subs	r3, #1
 800c1be:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	021a      	lsls	r2, r3, #8
 800c1c6:	68bb      	ldr	r3, [r7, #8]
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	3b01      	subs	r3, #1
 800c1d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	041a      	lsls	r2, r3, #16
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	4313      	orrs	r3, r2
 800c1e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	3b01      	subs	r3, #1
 800c1ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	061a      	lsls	r2, r3, #24
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	3301      	adds	r3, #1
 800c200:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	3b01      	subs	r3, #1
 800c206:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f107 0208 	add.w	r2, r7, #8
 800c210:	4611      	mov	r1, r2
 800c212:	4618      	mov	r0, r3
 800c214:	f002 fa90 	bl	800e738 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	3301      	adds	r3, #1
 800c21c:	617b      	str	r3, [r7, #20]
 800c21e:	697b      	ldr	r3, [r7, #20]
 800c220:	2b07      	cmp	r3, #7
 800c222:	d9c4      	bls.n	800c1ae <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	68fa      	ldr	r2, [r7, #12]
 800c228:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c230:	bf00      	nop
 800c232:	3718      	adds	r7, #24
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}

0800c238 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b082      	sub	sp, #8
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c246:	2301      	movs	r3, #1
 800c248:	e041      	b.n	800c2ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c250:	b2db      	uxtb	r3, r3
 800c252:	2b00      	cmp	r3, #0
 800c254:	d106      	bne.n	800c264 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	2200      	movs	r2, #0
 800c25a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c25e:	6878      	ldr	r0, [r7, #4]
 800c260:	f7f9 f960 	bl	8005524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2202      	movs	r2, #2
 800c268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3304      	adds	r3, #4
 800c274:	4619      	mov	r1, r3
 800c276:	4610      	mov	r0, r2
 800c278:	f000 fc58 	bl	800cb2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2201      	movs	r2, #1
 800c280:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	2201      	movs	r2, #1
 800c290:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2201      	movs	r2, #1
 800c298:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2201      	movs	r2, #1
 800c2a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2201      	movs	r2, #1
 800c2a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	2201      	movs	r2, #1
 800c2b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3708      	adds	r7, #8
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
	...

0800c2d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c2d8:	b480      	push	{r7}
 800c2da:	b085      	sub	sp, #20
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d001      	beq.n	800c2f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e04e      	b.n	800c38e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2202      	movs	r2, #2
 800c2f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	68da      	ldr	r2, [r3, #12]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f042 0201 	orr.w	r2, r2, #1
 800c306:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	4a23      	ldr	r2, [pc, #140]	; (800c39c <HAL_TIM_Base_Start_IT+0xc4>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d022      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c31a:	d01d      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4a1f      	ldr	r2, [pc, #124]	; (800c3a0 <HAL_TIM_Base_Start_IT+0xc8>)
 800c322:	4293      	cmp	r3, r2
 800c324:	d018      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4a1e      	ldr	r2, [pc, #120]	; (800c3a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d013      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	4a1c      	ldr	r2, [pc, #112]	; (800c3a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d00e      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	4a1b      	ldr	r2, [pc, #108]	; (800c3ac <HAL_TIM_Base_Start_IT+0xd4>)
 800c340:	4293      	cmp	r3, r2
 800c342:	d009      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a19      	ldr	r2, [pc, #100]	; (800c3b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d004      	beq.n	800c358 <HAL_TIM_Base_Start_IT+0x80>
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	4a18      	ldr	r2, [pc, #96]	; (800c3b4 <HAL_TIM_Base_Start_IT+0xdc>)
 800c354:	4293      	cmp	r3, r2
 800c356:	d111      	bne.n	800c37c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	689b      	ldr	r3, [r3, #8]
 800c35e:	f003 0307 	and.w	r3, r3, #7
 800c362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	2b06      	cmp	r3, #6
 800c368:	d010      	beq.n	800c38c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681a      	ldr	r2, [r3, #0]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f042 0201 	orr.w	r2, r2, #1
 800c378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c37a:	e007      	b.n	800c38c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f042 0201 	orr.w	r2, r2, #1
 800c38a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c38c:	2300      	movs	r3, #0
}
 800c38e:	4618      	mov	r0, r3
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	40010000 	.word	0x40010000
 800c3a0:	40000400 	.word	0x40000400
 800c3a4:	40000800 	.word	0x40000800
 800c3a8:	40000c00 	.word	0x40000c00
 800c3ac:	40010400 	.word	0x40010400
 800c3b0:	40014000 	.word	0x40014000
 800c3b4:	40001800 	.word	0x40001800

0800c3b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b082      	sub	sp, #8
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d101      	bne.n	800c3ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	e041      	b.n	800c44e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d106      	bne.n	800c3e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2200      	movs	r2, #0
 800c3da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f7f9 f878 	bl	80054d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2202      	movs	r2, #2
 800c3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	4619      	mov	r1, r3
 800c3f6:	4610      	mov	r0, r2
 800c3f8:	f000 fb98 	bl	800cb2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2201      	movs	r2, #1
 800c408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2201      	movs	r2, #1
 800c410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2201      	movs	r2, #1
 800c418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2201      	movs	r2, #1
 800c428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2201      	movs	r2, #1
 800c430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c44c:	2300      	movs	r3, #0
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3708      	adds	r7, #8
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
	...

0800c458 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b084      	sub	sp, #16
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	6078      	str	r0, [r7, #4]
 800c460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c462:	683b      	ldr	r3, [r7, #0]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d109      	bne.n	800c47c <HAL_TIM_PWM_Start+0x24>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c46e:	b2db      	uxtb	r3, r3
 800c470:	2b01      	cmp	r3, #1
 800c472:	bf14      	ite	ne
 800c474:	2301      	movne	r3, #1
 800c476:	2300      	moveq	r3, #0
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	e022      	b.n	800c4c2 <HAL_TIM_PWM_Start+0x6a>
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	2b04      	cmp	r3, #4
 800c480:	d109      	bne.n	800c496 <HAL_TIM_PWM_Start+0x3e>
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b01      	cmp	r3, #1
 800c48c:	bf14      	ite	ne
 800c48e:	2301      	movne	r3, #1
 800c490:	2300      	moveq	r3, #0
 800c492:	b2db      	uxtb	r3, r3
 800c494:	e015      	b.n	800c4c2 <HAL_TIM_PWM_Start+0x6a>
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	2b08      	cmp	r3, #8
 800c49a:	d109      	bne.n	800c4b0 <HAL_TIM_PWM_Start+0x58>
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c4a2:	b2db      	uxtb	r3, r3
 800c4a4:	2b01      	cmp	r3, #1
 800c4a6:	bf14      	ite	ne
 800c4a8:	2301      	movne	r3, #1
 800c4aa:	2300      	moveq	r3, #0
 800c4ac:	b2db      	uxtb	r3, r3
 800c4ae:	e008      	b.n	800c4c2 <HAL_TIM_PWM_Start+0x6a>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b01      	cmp	r3, #1
 800c4ba:	bf14      	ite	ne
 800c4bc:	2301      	movne	r3, #1
 800c4be:	2300      	moveq	r3, #0
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d001      	beq.n	800c4ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e07c      	b.n	800c5c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d104      	bne.n	800c4da <HAL_TIM_PWM_Start+0x82>
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	2202      	movs	r2, #2
 800c4d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c4d8:	e013      	b.n	800c502 <HAL_TIM_PWM_Start+0xaa>
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	2b04      	cmp	r3, #4
 800c4de:	d104      	bne.n	800c4ea <HAL_TIM_PWM_Start+0x92>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c4e8:	e00b      	b.n	800c502 <HAL_TIM_PWM_Start+0xaa>
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	2b08      	cmp	r3, #8
 800c4ee:	d104      	bne.n	800c4fa <HAL_TIM_PWM_Start+0xa2>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2202      	movs	r2, #2
 800c4f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c4f8:	e003      	b.n	800c502 <HAL_TIM_PWM_Start+0xaa>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2202      	movs	r2, #2
 800c4fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2201      	movs	r2, #1
 800c508:	6839      	ldr	r1, [r7, #0]
 800c50a:	4618      	mov	r0, r3
 800c50c:	f000 fe04 	bl	800d118 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4a2d      	ldr	r2, [pc, #180]	; (800c5cc <HAL_TIM_PWM_Start+0x174>)
 800c516:	4293      	cmp	r3, r2
 800c518:	d004      	beq.n	800c524 <HAL_TIM_PWM_Start+0xcc>
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4a2c      	ldr	r2, [pc, #176]	; (800c5d0 <HAL_TIM_PWM_Start+0x178>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d101      	bne.n	800c528 <HAL_TIM_PWM_Start+0xd0>
 800c524:	2301      	movs	r3, #1
 800c526:	e000      	b.n	800c52a <HAL_TIM_PWM_Start+0xd2>
 800c528:	2300      	movs	r3, #0
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d007      	beq.n	800c53e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c53c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	4a22      	ldr	r2, [pc, #136]	; (800c5cc <HAL_TIM_PWM_Start+0x174>)
 800c544:	4293      	cmp	r3, r2
 800c546:	d022      	beq.n	800c58e <HAL_TIM_PWM_Start+0x136>
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c550:	d01d      	beq.n	800c58e <HAL_TIM_PWM_Start+0x136>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	681b      	ldr	r3, [r3, #0]
 800c556:	4a1f      	ldr	r2, [pc, #124]	; (800c5d4 <HAL_TIM_PWM_Start+0x17c>)
 800c558:	4293      	cmp	r3, r2
 800c55a:	d018      	beq.n	800c58e <HAL_TIM_PWM_Start+0x136>
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	4a1d      	ldr	r2, [pc, #116]	; (800c5d8 <HAL_TIM_PWM_Start+0x180>)
 800c562:	4293      	cmp	r3, r2
 800c564:	d013      	beq.n	800c58e <HAL_TIM_PWM_Start+0x136>
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a1c      	ldr	r2, [pc, #112]	; (800c5dc <HAL_TIM_PWM_Start+0x184>)
 800c56c:	4293      	cmp	r3, r2
 800c56e:	d00e      	beq.n	800c58e <HAL_TIM_PWM_Start+0x136>
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	4a16      	ldr	r2, [pc, #88]	; (800c5d0 <HAL_TIM_PWM_Start+0x178>)
 800c576:	4293      	cmp	r3, r2
 800c578:	d009      	beq.n	800c58e <HAL_TIM_PWM_Start+0x136>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a18      	ldr	r2, [pc, #96]	; (800c5e0 <HAL_TIM_PWM_Start+0x188>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d004      	beq.n	800c58e <HAL_TIM_PWM_Start+0x136>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	4a16      	ldr	r2, [pc, #88]	; (800c5e4 <HAL_TIM_PWM_Start+0x18c>)
 800c58a:	4293      	cmp	r3, r2
 800c58c:	d111      	bne.n	800c5b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	689b      	ldr	r3, [r3, #8]
 800c594:	f003 0307 	and.w	r3, r3, #7
 800c598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b06      	cmp	r3, #6
 800c59e:	d010      	beq.n	800c5c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f042 0201 	orr.w	r2, r2, #1
 800c5ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c5b0:	e007      	b.n	800c5c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	f042 0201 	orr.w	r2, r2, #1
 800c5c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c5c2:	2300      	movs	r3, #0
}
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	3710      	adds	r7, #16
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	bd80      	pop	{r7, pc}
 800c5cc:	40010000 	.word	0x40010000
 800c5d0:	40010400 	.word	0x40010400
 800c5d4:	40000400 	.word	0x40000400
 800c5d8:	40000800 	.word	0x40000800
 800c5dc:	40000c00 	.word	0x40000c00
 800c5e0:	40014000 	.word	0x40014000
 800c5e4:	40001800 	.word	0x40001800

0800c5e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	68db      	ldr	r3, [r3, #12]
 800c5f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	691b      	ldr	r3, [r3, #16]
 800c5fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	f003 0302 	and.w	r3, r3, #2
 800c606:	2b00      	cmp	r3, #0
 800c608:	d020      	beq.n	800c64c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c60a:	68fb      	ldr	r3, [r7, #12]
 800c60c:	f003 0302 	and.w	r3, r3, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d01b      	beq.n	800c64c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f06f 0202 	mvn.w	r2, #2
 800c61c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	f003 0303 	and.w	r3, r3, #3
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d003      	beq.n	800c63a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f000 fa5b 	bl	800caee <HAL_TIM_IC_CaptureCallback>
 800c638:	e005      	b.n	800c646 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f000 fa4d 	bl	800cada <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 fa5e 	bl	800cb02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2200      	movs	r2, #0
 800c64a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	f003 0304 	and.w	r3, r3, #4
 800c652:	2b00      	cmp	r3, #0
 800c654:	d020      	beq.n	800c698 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	f003 0304 	and.w	r3, r3, #4
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d01b      	beq.n	800c698 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f06f 0204 	mvn.w	r2, #4
 800c668:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d003      	beq.n	800c686 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fa35 	bl	800caee <HAL_TIM_IC_CaptureCallback>
 800c684:	e005      	b.n	800c692 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f000 fa27 	bl	800cada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 fa38 	bl	800cb02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	2200      	movs	r2, #0
 800c696:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c698:	68bb      	ldr	r3, [r7, #8]
 800c69a:	f003 0308 	and.w	r3, r3, #8
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d020      	beq.n	800c6e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c6a2:	68fb      	ldr	r3, [r7, #12]
 800c6a4:	f003 0308 	and.w	r3, r3, #8
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d01b      	beq.n	800c6e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f06f 0208 	mvn.w	r2, #8
 800c6b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2204      	movs	r2, #4
 800c6ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	69db      	ldr	r3, [r3, #28]
 800c6c2:	f003 0303 	and.w	r3, r3, #3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d003      	beq.n	800c6d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 fa0f 	bl	800caee <HAL_TIM_IC_CaptureCallback>
 800c6d0:	e005      	b.n	800c6de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 fa01 	bl	800cada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6d8:	6878      	ldr	r0, [r7, #4]
 800c6da:	f000 fa12 	bl	800cb02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	f003 0310 	and.w	r3, r3, #16
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d020      	beq.n	800c730 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f003 0310 	and.w	r3, r3, #16
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d01b      	beq.n	800c730 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f06f 0210 	mvn.w	r2, #16
 800c700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2208      	movs	r2, #8
 800c706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c712:	2b00      	cmp	r3, #0
 800c714:	d003      	beq.n	800c71e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f9e9 	bl	800caee <HAL_TIM_IC_CaptureCallback>
 800c71c:	e005      	b.n	800c72a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f9db 	bl	800cada <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 f9ec 	bl	800cb02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2200      	movs	r2, #0
 800c72e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c730:	68bb      	ldr	r3, [r7, #8]
 800c732:	f003 0301 	and.w	r3, r3, #1
 800c736:	2b00      	cmp	r3, #0
 800c738:	d00c      	beq.n	800c754 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	f003 0301 	and.w	r3, r3, #1
 800c740:	2b00      	cmp	r3, #0
 800c742:	d007      	beq.n	800c754 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f06f 0201 	mvn.w	r2, #1
 800c74c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f7f8 f8a4 	bl	800489c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800c754:	68bb      	ldr	r3, [r7, #8]
 800c756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00c      	beq.n	800c778 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c764:	2b00      	cmp	r3, #0
 800c766:	d007      	beq.n	800c778 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c772:	6878      	ldr	r0, [r7, #4]
 800c774:	f000 fdce 	bl	800d314 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d00c      	beq.n	800c79c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d007      	beq.n	800c79c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f9bd 	bl	800cb16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	f003 0320 	and.w	r3, r3, #32
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d00c      	beq.n	800c7c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f003 0320 	and.w	r3, r3, #32
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d007      	beq.n	800c7c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f06f 0220 	mvn.w	r2, #32
 800c7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fda0 	bl	800d300 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7c0:	bf00      	nop
 800c7c2:	3710      	adds	r7, #16
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b086      	sub	sp, #24
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7de:	2b01      	cmp	r3, #1
 800c7e0:	d101      	bne.n	800c7e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c7e2:	2302      	movs	r3, #2
 800c7e4:	e0ae      	b.n	800c944 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b0c      	cmp	r3, #12
 800c7f2:	f200 809f 	bhi.w	800c934 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800c7f6:	a201      	add	r2, pc, #4	; (adr r2, 800c7fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7fc:	0800c831 	.word	0x0800c831
 800c800:	0800c935 	.word	0x0800c935
 800c804:	0800c935 	.word	0x0800c935
 800c808:	0800c935 	.word	0x0800c935
 800c80c:	0800c871 	.word	0x0800c871
 800c810:	0800c935 	.word	0x0800c935
 800c814:	0800c935 	.word	0x0800c935
 800c818:	0800c935 	.word	0x0800c935
 800c81c:	0800c8b3 	.word	0x0800c8b3
 800c820:	0800c935 	.word	0x0800c935
 800c824:	0800c935 	.word	0x0800c935
 800c828:	0800c935 	.word	0x0800c935
 800c82c:	0800c8f3 	.word	0x0800c8f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	68b9      	ldr	r1, [r7, #8]
 800c836:	4618      	mov	r0, r3
 800c838:	f000 fa24 	bl	800cc84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	699a      	ldr	r2, [r3, #24]
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	f042 0208 	orr.w	r2, r2, #8
 800c84a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	699a      	ldr	r2, [r3, #24]
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	f022 0204 	bic.w	r2, r2, #4
 800c85a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	6999      	ldr	r1, [r3, #24]
 800c862:	68bb      	ldr	r3, [r7, #8]
 800c864:	691a      	ldr	r2, [r3, #16]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	430a      	orrs	r2, r1
 800c86c:	619a      	str	r2, [r3, #24]
      break;
 800c86e:	e064      	b.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	68b9      	ldr	r1, [r7, #8]
 800c876:	4618      	mov	r0, r3
 800c878:	f000 fa74 	bl	800cd64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	699a      	ldr	r2, [r3, #24]
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c88a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	699a      	ldr	r2, [r3, #24]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c89a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	6999      	ldr	r1, [r3, #24]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	691b      	ldr	r3, [r3, #16]
 800c8a6:	021a      	lsls	r2, r3, #8
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	430a      	orrs	r2, r1
 800c8ae:	619a      	str	r2, [r3, #24]
      break;
 800c8b0:	e043      	b.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 fac9 	bl	800ce50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	69da      	ldr	r2, [r3, #28]
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f042 0208 	orr.w	r2, r2, #8
 800c8cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	69da      	ldr	r2, [r3, #28]
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f022 0204 	bic.w	r2, r2, #4
 800c8dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	69d9      	ldr	r1, [r3, #28]
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	691a      	ldr	r2, [r3, #16]
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	430a      	orrs	r2, r1
 800c8ee:	61da      	str	r2, [r3, #28]
      break;
 800c8f0:	e023      	b.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	68b9      	ldr	r1, [r7, #8]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f000 fb1d 	bl	800cf38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	69da      	ldr	r2, [r3, #28]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c90c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	69da      	ldr	r2, [r3, #28]
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c91c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	69d9      	ldr	r1, [r3, #28]
 800c924:	68bb      	ldr	r3, [r7, #8]
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	021a      	lsls	r2, r3, #8
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	430a      	orrs	r2, r1
 800c930:	61da      	str	r2, [r3, #28]
      break;
 800c932:	e002      	b.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800c934:	2301      	movs	r3, #1
 800c936:	75fb      	strb	r3, [r7, #23]
      break;
 800c938:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2200      	movs	r2, #0
 800c93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c942:	7dfb      	ldrb	r3, [r7, #23]
}
 800c944:	4618      	mov	r0, r3
 800c946:	3718      	adds	r7, #24
 800c948:	46bd      	mov	sp, r7
 800c94a:	bd80      	pop	{r7, pc}

0800c94c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c956:	2300      	movs	r3, #0
 800c958:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c960:	2b01      	cmp	r3, #1
 800c962:	d101      	bne.n	800c968 <HAL_TIM_ConfigClockSource+0x1c>
 800c964:	2302      	movs	r3, #2
 800c966:	e0b4      	b.n	800cad2 <HAL_TIM_ConfigClockSource+0x186>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2201      	movs	r2, #1
 800c96c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2202      	movs	r2, #2
 800c974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c986:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c988:	68bb      	ldr	r3, [r7, #8]
 800c98a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c98e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68ba      	ldr	r2, [r7, #8]
 800c996:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9a0:	d03e      	beq.n	800ca20 <HAL_TIM_ConfigClockSource+0xd4>
 800c9a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9a6:	f200 8087 	bhi.w	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9ae:	f000 8086 	beq.w	800cabe <HAL_TIM_ConfigClockSource+0x172>
 800c9b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9b6:	d87f      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9b8:	2b70      	cmp	r3, #112	; 0x70
 800c9ba:	d01a      	beq.n	800c9f2 <HAL_TIM_ConfigClockSource+0xa6>
 800c9bc:	2b70      	cmp	r3, #112	; 0x70
 800c9be:	d87b      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9c0:	2b60      	cmp	r3, #96	; 0x60
 800c9c2:	d050      	beq.n	800ca66 <HAL_TIM_ConfigClockSource+0x11a>
 800c9c4:	2b60      	cmp	r3, #96	; 0x60
 800c9c6:	d877      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9c8:	2b50      	cmp	r3, #80	; 0x50
 800c9ca:	d03c      	beq.n	800ca46 <HAL_TIM_ConfigClockSource+0xfa>
 800c9cc:	2b50      	cmp	r3, #80	; 0x50
 800c9ce:	d873      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9d0:	2b40      	cmp	r3, #64	; 0x40
 800c9d2:	d058      	beq.n	800ca86 <HAL_TIM_ConfigClockSource+0x13a>
 800c9d4:	2b40      	cmp	r3, #64	; 0x40
 800c9d6:	d86f      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9d8:	2b30      	cmp	r3, #48	; 0x30
 800c9da:	d064      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9dc:	2b30      	cmp	r3, #48	; 0x30
 800c9de:	d86b      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9e0:	2b20      	cmp	r3, #32
 800c9e2:	d060      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9e4:	2b20      	cmp	r3, #32
 800c9e6:	d867      	bhi.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d05c      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9ec:	2b10      	cmp	r3, #16
 800c9ee:	d05a      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x15a>
 800c9f0:	e062      	b.n	800cab8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca02:	f000 fb69 	bl	800d0d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	689b      	ldr	r3, [r3, #8]
 800ca0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68ba      	ldr	r2, [r7, #8]
 800ca1c:	609a      	str	r2, [r3, #8]
      break;
 800ca1e:	e04f      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ca30:	f000 fb52 	bl	800d0d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	689a      	ldr	r2, [r3, #8]
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca42:	609a      	str	r2, [r3, #8]
      break;
 800ca44:	e03c      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca52:	461a      	mov	r2, r3
 800ca54:	f000 fac6 	bl	800cfe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	2150      	movs	r1, #80	; 0x50
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 fb1f 	bl	800d0a2 <TIM_ITRx_SetConfig>
      break;
 800ca64:	e02c      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca72:	461a      	mov	r2, r3
 800ca74:	f000 fae5 	bl	800d042 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	2160      	movs	r1, #96	; 0x60
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f000 fb0f 	bl	800d0a2 <TIM_ITRx_SetConfig>
      break;
 800ca84:	e01c      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca92:	461a      	mov	r2, r3
 800ca94:	f000 faa6 	bl	800cfe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	2140      	movs	r1, #64	; 0x40
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f000 faff 	bl	800d0a2 <TIM_ITRx_SetConfig>
      break;
 800caa4:	e00c      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	683b      	ldr	r3, [r7, #0]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4619      	mov	r1, r3
 800cab0:	4610      	mov	r0, r2
 800cab2:	f000 faf6 	bl	800d0a2 <TIM_ITRx_SetConfig>
      break;
 800cab6:	e003      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800cab8:	2301      	movs	r3, #1
 800caba:	73fb      	strb	r3, [r7, #15]
      break;
 800cabc:	e000      	b.n	800cac0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800cabe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2201      	movs	r2, #1
 800cac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cada:	b480      	push	{r7}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cae2:	bf00      	nop
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800caee:	b480      	push	{r7}
 800caf0:	b083      	sub	sp, #12
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800caf6:	bf00      	nop
 800caf8:	370c      	adds	r7, #12
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b083      	sub	sp, #12
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cb0a:	bf00      	nop
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cb16:	b480      	push	{r7}
 800cb18:	b083      	sub	sp, #12
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb1e:	bf00      	nop
 800cb20:	370c      	adds	r7, #12
 800cb22:	46bd      	mov	sp, r7
 800cb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb28:	4770      	bx	lr
	...

0800cb2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800cb2c:	b480      	push	{r7}
 800cb2e:	b085      	sub	sp, #20
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a46      	ldr	r2, [pc, #280]	; (800cc58 <TIM_Base_SetConfig+0x12c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d013      	beq.n	800cb6c <TIM_Base_SetConfig+0x40>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb4a:	d00f      	beq.n	800cb6c <TIM_Base_SetConfig+0x40>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a43      	ldr	r2, [pc, #268]	; (800cc5c <TIM_Base_SetConfig+0x130>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d00b      	beq.n	800cb6c <TIM_Base_SetConfig+0x40>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	4a42      	ldr	r2, [pc, #264]	; (800cc60 <TIM_Base_SetConfig+0x134>)
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d007      	beq.n	800cb6c <TIM_Base_SetConfig+0x40>
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	4a41      	ldr	r2, [pc, #260]	; (800cc64 <TIM_Base_SetConfig+0x138>)
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d003      	beq.n	800cb6c <TIM_Base_SetConfig+0x40>
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	4a40      	ldr	r2, [pc, #256]	; (800cc68 <TIM_Base_SetConfig+0x13c>)
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d108      	bne.n	800cb7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	68fa      	ldr	r2, [r7, #12]
 800cb7a:	4313      	orrs	r3, r2
 800cb7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a35      	ldr	r2, [pc, #212]	; (800cc58 <TIM_Base_SetConfig+0x12c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d02b      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb8c:	d027      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a32      	ldr	r2, [pc, #200]	; (800cc5c <TIM_Base_SetConfig+0x130>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d023      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a31      	ldr	r2, [pc, #196]	; (800cc60 <TIM_Base_SetConfig+0x134>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d01f      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a30      	ldr	r2, [pc, #192]	; (800cc64 <TIM_Base_SetConfig+0x138>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d01b      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a2f      	ldr	r2, [pc, #188]	; (800cc68 <TIM_Base_SetConfig+0x13c>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d017      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a2e      	ldr	r2, [pc, #184]	; (800cc6c <TIM_Base_SetConfig+0x140>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d013      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a2d      	ldr	r2, [pc, #180]	; (800cc70 <TIM_Base_SetConfig+0x144>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d00f      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a2c      	ldr	r2, [pc, #176]	; (800cc74 <TIM_Base_SetConfig+0x148>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d00b      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	4a2b      	ldr	r2, [pc, #172]	; (800cc78 <TIM_Base_SetConfig+0x14c>)
 800cbca:	4293      	cmp	r3, r2
 800cbcc:	d007      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	4a2a      	ldr	r2, [pc, #168]	; (800cc7c <TIM_Base_SetConfig+0x150>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d003      	beq.n	800cbde <TIM_Base_SetConfig+0xb2>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	4a29      	ldr	r2, [pc, #164]	; (800cc80 <TIM_Base_SetConfig+0x154>)
 800cbda:	4293      	cmp	r3, r2
 800cbdc:	d108      	bne.n	800cbf0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	4313      	orrs	r3, r2
 800cbee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	695b      	ldr	r3, [r3, #20]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	68fa      	ldr	r2, [r7, #12]
 800cc02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	689a      	ldr	r2, [r3, #8]
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	681a      	ldr	r2, [r3, #0]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	4a10      	ldr	r2, [pc, #64]	; (800cc58 <TIM_Base_SetConfig+0x12c>)
 800cc18:	4293      	cmp	r3, r2
 800cc1a:	d003      	beq.n	800cc24 <TIM_Base_SetConfig+0xf8>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	4a12      	ldr	r2, [pc, #72]	; (800cc68 <TIM_Base_SetConfig+0x13c>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d103      	bne.n	800cc2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	691a      	ldr	r2, [r3, #16]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	691b      	ldr	r3, [r3, #16]
 800cc36:	f003 0301 	and.w	r3, r3, #1
 800cc3a:	2b01      	cmp	r3, #1
 800cc3c:	d105      	bne.n	800cc4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	691b      	ldr	r3, [r3, #16]
 800cc42:	f023 0201 	bic.w	r2, r3, #1
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	611a      	str	r2, [r3, #16]
  }
}
 800cc4a:	bf00      	nop
 800cc4c:	3714      	adds	r7, #20
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop
 800cc58:	40010000 	.word	0x40010000
 800cc5c:	40000400 	.word	0x40000400
 800cc60:	40000800 	.word	0x40000800
 800cc64:	40000c00 	.word	0x40000c00
 800cc68:	40010400 	.word	0x40010400
 800cc6c:	40014000 	.word	0x40014000
 800cc70:	40014400 	.word	0x40014400
 800cc74:	40014800 	.word	0x40014800
 800cc78:	40001800 	.word	0x40001800
 800cc7c:	40001c00 	.word	0x40001c00
 800cc80:	40002000 	.word	0x40002000

0800cc84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b087      	sub	sp, #28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
 800cc8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	6a1b      	ldr	r3, [r3, #32]
 800cc92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	6a1b      	ldr	r3, [r3, #32]
 800cc98:	f023 0201 	bic.w	r2, r3, #1
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	699b      	ldr	r3, [r3, #24]
 800ccaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ccb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	f023 0303 	bic.w	r3, r3, #3
 800ccba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ccbc:	683b      	ldr	r3, [r7, #0]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	4313      	orrs	r3, r2
 800ccc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	f023 0302 	bic.w	r3, r3, #2
 800cccc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	689b      	ldr	r3, [r3, #8]
 800ccd2:	697a      	ldr	r2, [r7, #20]
 800ccd4:	4313      	orrs	r3, r2
 800ccd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a20      	ldr	r2, [pc, #128]	; (800cd5c <TIM_OC1_SetConfig+0xd8>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d003      	beq.n	800cce8 <TIM_OC1_SetConfig+0x64>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a1f      	ldr	r2, [pc, #124]	; (800cd60 <TIM_OC1_SetConfig+0xdc>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d10c      	bne.n	800cd02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	f023 0308 	bic.w	r3, r3, #8
 800ccee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	697a      	ldr	r2, [r7, #20]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f023 0304 	bic.w	r3, r3, #4
 800cd00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	4a15      	ldr	r2, [pc, #84]	; (800cd5c <TIM_OC1_SetConfig+0xd8>)
 800cd06:	4293      	cmp	r3, r2
 800cd08:	d003      	beq.n	800cd12 <TIM_OC1_SetConfig+0x8e>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a14      	ldr	r2, [pc, #80]	; (800cd60 <TIM_OC1_SetConfig+0xdc>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d111      	bne.n	800cd36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cd12:	693b      	ldr	r3, [r7, #16]
 800cd14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800cd20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	695b      	ldr	r3, [r3, #20]
 800cd26:	693a      	ldr	r2, [r7, #16]
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	699b      	ldr	r3, [r3, #24]
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	4313      	orrs	r3, r2
 800cd34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	693a      	ldr	r2, [r7, #16]
 800cd3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	685a      	ldr	r2, [r3, #4]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	697a      	ldr	r2, [r7, #20]
 800cd4e:	621a      	str	r2, [r3, #32]
}
 800cd50:	bf00      	nop
 800cd52:	371c      	adds	r7, #28
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr
 800cd5c:	40010000 	.word	0x40010000
 800cd60:	40010400 	.word	0x40010400

0800cd64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cd64:	b480      	push	{r7}
 800cd66:	b087      	sub	sp, #28
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	6078      	str	r0, [r7, #4]
 800cd6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6a1b      	ldr	r3, [r3, #32]
 800cd72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	6a1b      	ldr	r3, [r3, #32]
 800cd78:	f023 0210 	bic.w	r2, r3, #16
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	021b      	lsls	r3, r3, #8
 800cda2:	68fa      	ldr	r2, [r7, #12]
 800cda4:	4313      	orrs	r3, r2
 800cda6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cda8:	697b      	ldr	r3, [r7, #20]
 800cdaa:	f023 0320 	bic.w	r3, r3, #32
 800cdae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	689b      	ldr	r3, [r3, #8]
 800cdb4:	011b      	lsls	r3, r3, #4
 800cdb6:	697a      	ldr	r2, [r7, #20]
 800cdb8:	4313      	orrs	r3, r2
 800cdba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	4a22      	ldr	r2, [pc, #136]	; (800ce48 <TIM_OC2_SetConfig+0xe4>)
 800cdc0:	4293      	cmp	r3, r2
 800cdc2:	d003      	beq.n	800cdcc <TIM_OC2_SetConfig+0x68>
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	4a21      	ldr	r2, [pc, #132]	; (800ce4c <TIM_OC2_SetConfig+0xe8>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d10d      	bne.n	800cde8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cdd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	68db      	ldr	r3, [r3, #12]
 800cdd8:	011b      	lsls	r3, r3, #4
 800cdda:	697a      	ldr	r2, [r7, #20]
 800cddc:	4313      	orrs	r3, r2
 800cdde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cde6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4a17      	ldr	r2, [pc, #92]	; (800ce48 <TIM_OC2_SetConfig+0xe4>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d003      	beq.n	800cdf8 <TIM_OC2_SetConfig+0x94>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	4a16      	ldr	r2, [pc, #88]	; (800ce4c <TIM_OC2_SetConfig+0xe8>)
 800cdf4:	4293      	cmp	r3, r2
 800cdf6:	d113      	bne.n	800ce20 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdfe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce06:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	693a      	ldr	r2, [r7, #16]
 800ce10:	4313      	orrs	r3, r2
 800ce12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	699b      	ldr	r3, [r3, #24]
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	693a      	ldr	r2, [r7, #16]
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	693a      	ldr	r2, [r7, #16]
 800ce24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	685a      	ldr	r2, [r3, #4]
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	697a      	ldr	r2, [r7, #20]
 800ce38:	621a      	str	r2, [r3, #32]
}
 800ce3a:	bf00      	nop
 800ce3c:	371c      	adds	r7, #28
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
 800ce46:	bf00      	nop
 800ce48:	40010000 	.word	0x40010000
 800ce4c:	40010400 	.word	0x40010400

0800ce50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ce50:	b480      	push	{r7}
 800ce52:	b087      	sub	sp, #28
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6a1b      	ldr	r3, [r3, #32]
 800ce5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6a1b      	ldr	r3, [r3, #32]
 800ce64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	69db      	ldr	r3, [r3, #28]
 800ce76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f023 0303 	bic.w	r3, r3, #3
 800ce86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	68fa      	ldr	r2, [r7, #12]
 800ce8e:	4313      	orrs	r3, r2
 800ce90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce92:	697b      	ldr	r3, [r7, #20]
 800ce94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	689b      	ldr	r3, [r3, #8]
 800ce9e:	021b      	lsls	r3, r3, #8
 800cea0:	697a      	ldr	r2, [r7, #20]
 800cea2:	4313      	orrs	r3, r2
 800cea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	4a21      	ldr	r2, [pc, #132]	; (800cf30 <TIM_OC3_SetConfig+0xe0>)
 800ceaa:	4293      	cmp	r3, r2
 800ceac:	d003      	beq.n	800ceb6 <TIM_OC3_SetConfig+0x66>
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	4a20      	ldr	r2, [pc, #128]	; (800cf34 <TIM_OC3_SetConfig+0xe4>)
 800ceb2:	4293      	cmp	r3, r2
 800ceb4:	d10d      	bne.n	800ced2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cebc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	021b      	lsls	r3, r3, #8
 800cec4:	697a      	ldr	r2, [r7, #20]
 800cec6:	4313      	orrs	r3, r2
 800cec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ced0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	4a16      	ldr	r2, [pc, #88]	; (800cf30 <TIM_OC3_SetConfig+0xe0>)
 800ced6:	4293      	cmp	r3, r2
 800ced8:	d003      	beq.n	800cee2 <TIM_OC3_SetConfig+0x92>
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	4a15      	ldr	r2, [pc, #84]	; (800cf34 <TIM_OC3_SetConfig+0xe4>)
 800cede:	4293      	cmp	r3, r2
 800cee0:	d113      	bne.n	800cf0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	011b      	lsls	r3, r3, #4
 800cef8:	693a      	ldr	r2, [r7, #16]
 800cefa:	4313      	orrs	r3, r2
 800cefc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	699b      	ldr	r3, [r3, #24]
 800cf02:	011b      	lsls	r3, r3, #4
 800cf04:	693a      	ldr	r2, [r7, #16]
 800cf06:	4313      	orrs	r3, r2
 800cf08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	693a      	ldr	r2, [r7, #16]
 800cf0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	685a      	ldr	r2, [r3, #4]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	697a      	ldr	r2, [r7, #20]
 800cf22:	621a      	str	r2, [r3, #32]
}
 800cf24:	bf00      	nop
 800cf26:	371c      	adds	r7, #28
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2e:	4770      	bx	lr
 800cf30:	40010000 	.word	0x40010000
 800cf34:	40010400 	.word	0x40010400

0800cf38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b087      	sub	sp, #28
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6a1b      	ldr	r3, [r3, #32]
 800cf46:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6a1b      	ldr	r3, [r3, #32]
 800cf4c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	685b      	ldr	r3, [r3, #4]
 800cf58:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	69db      	ldr	r3, [r3, #28]
 800cf5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf70:	683b      	ldr	r3, [r7, #0]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	021b      	lsls	r3, r3, #8
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	689b      	ldr	r3, [r3, #8]
 800cf88:	031b      	lsls	r3, r3, #12
 800cf8a:	693a      	ldr	r2, [r7, #16]
 800cf8c:	4313      	orrs	r3, r2
 800cf8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a12      	ldr	r2, [pc, #72]	; (800cfdc <TIM_OC4_SetConfig+0xa4>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d003      	beq.n	800cfa0 <TIM_OC4_SetConfig+0x68>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4a11      	ldr	r2, [pc, #68]	; (800cfe0 <TIM_OC4_SetConfig+0xa8>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d109      	bne.n	800cfb4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cfa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cfa8:	683b      	ldr	r3, [r7, #0]
 800cfaa:	695b      	ldr	r3, [r3, #20]
 800cfac:	019b      	lsls	r3, r3, #6
 800cfae:	697a      	ldr	r2, [r7, #20]
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	697a      	ldr	r2, [r7, #20]
 800cfb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	68fa      	ldr	r2, [r7, #12]
 800cfbe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cfc0:	683b      	ldr	r3, [r7, #0]
 800cfc2:	685a      	ldr	r2, [r3, #4]
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	693a      	ldr	r2, [r7, #16]
 800cfcc:	621a      	str	r2, [r3, #32]
}
 800cfce:	bf00      	nop
 800cfd0:	371c      	adds	r7, #28
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	40010000 	.word	0x40010000
 800cfe0:	40010400 	.word	0x40010400

0800cfe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfe4:	b480      	push	{r7}
 800cfe6:	b087      	sub	sp, #28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	6a1b      	ldr	r3, [r3, #32]
 800cff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	6a1b      	ldr	r3, [r3, #32]
 800cffa:	f023 0201 	bic.w	r2, r3, #1
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	699b      	ldr	r3, [r3, #24]
 800d006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d008:	693b      	ldr	r3, [r7, #16]
 800d00a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d00e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	011b      	lsls	r3, r3, #4
 800d014:	693a      	ldr	r2, [r7, #16]
 800d016:	4313      	orrs	r3, r2
 800d018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d01a:	697b      	ldr	r3, [r7, #20]
 800d01c:	f023 030a 	bic.w	r3, r3, #10
 800d020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d022:	697a      	ldr	r2, [r7, #20]
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	4313      	orrs	r3, r2
 800d028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	693a      	ldr	r2, [r7, #16]
 800d02e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	697a      	ldr	r2, [r7, #20]
 800d034:	621a      	str	r2, [r3, #32]
}
 800d036:	bf00      	nop
 800d038:	371c      	adds	r7, #28
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr

0800d042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d042:	b480      	push	{r7}
 800d044:	b087      	sub	sp, #28
 800d046:	af00      	add	r7, sp, #0
 800d048:	60f8      	str	r0, [r7, #12]
 800d04a:	60b9      	str	r1, [r7, #8]
 800d04c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6a1b      	ldr	r3, [r3, #32]
 800d058:	f023 0210 	bic.w	r2, r3, #16
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	699b      	ldr	r3, [r3, #24]
 800d064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d066:	693b      	ldr	r3, [r7, #16]
 800d068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d06c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	031b      	lsls	r3, r3, #12
 800d072:	693a      	ldr	r2, [r7, #16]
 800d074:	4313      	orrs	r3, r2
 800d076:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d07e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	011b      	lsls	r3, r3, #4
 800d084:	697a      	ldr	r2, [r7, #20]
 800d086:	4313      	orrs	r3, r2
 800d088:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	693a      	ldr	r2, [r7, #16]
 800d08e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	697a      	ldr	r2, [r7, #20]
 800d094:	621a      	str	r2, [r3, #32]
}
 800d096:	bf00      	nop
 800d098:	371c      	adds	r7, #28
 800d09a:	46bd      	mov	sp, r7
 800d09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a0:	4770      	bx	lr

0800d0a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d0a2:	b480      	push	{r7}
 800d0a4:	b085      	sub	sp, #20
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d0ba:	683a      	ldr	r2, [r7, #0]
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	4313      	orrs	r3, r2
 800d0c0:	f043 0307 	orr.w	r3, r3, #7
 800d0c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	68fa      	ldr	r2, [r7, #12]
 800d0ca:	609a      	str	r2, [r3, #8]
}
 800d0cc:	bf00      	nop
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b087      	sub	sp, #28
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
 800d0e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	021a      	lsls	r2, r3, #8
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	431a      	orrs	r2, r3
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	4313      	orrs	r3, r2
 800d100:	697a      	ldr	r2, [r7, #20]
 800d102:	4313      	orrs	r3, r2
 800d104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	697a      	ldr	r2, [r7, #20]
 800d10a:	609a      	str	r2, [r3, #8]
}
 800d10c:	bf00      	nop
 800d10e:	371c      	adds	r7, #28
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d118:	b480      	push	{r7}
 800d11a:	b087      	sub	sp, #28
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	f003 031f 	and.w	r3, r3, #31
 800d12a:	2201      	movs	r2, #1
 800d12c:	fa02 f303 	lsl.w	r3, r2, r3
 800d130:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6a1a      	ldr	r2, [r3, #32]
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	43db      	mvns	r3, r3
 800d13a:	401a      	ands	r2, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6a1a      	ldr	r2, [r3, #32]
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f003 031f 	and.w	r3, r3, #31
 800d14a:	6879      	ldr	r1, [r7, #4]
 800d14c:	fa01 f303 	lsl.w	r3, r1, r3
 800d150:	431a      	orrs	r2, r3
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	621a      	str	r2, [r3, #32]
}
 800d156:	bf00      	nop
 800d158:	371c      	adds	r7, #28
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
	...

0800d164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d174:	2b01      	cmp	r3, #1
 800d176:	d101      	bne.n	800d17c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d178:	2302      	movs	r3, #2
 800d17a:	e05a      	b.n	800d232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2201      	movs	r2, #1
 800d180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2202      	movs	r2, #2
 800d188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d1a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d1a4:	683b      	ldr	r3, [r7, #0]
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	68fa      	ldr	r2, [r7, #12]
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a21      	ldr	r2, [pc, #132]	; (800d240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d022      	beq.n	800d206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1c8:	d01d      	beq.n	800d206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	4a1d      	ldr	r2, [pc, #116]	; (800d244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d018      	beq.n	800d206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	4a1b      	ldr	r2, [pc, #108]	; (800d248 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800d1da:	4293      	cmp	r3, r2
 800d1dc:	d013      	beq.n	800d206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a1a      	ldr	r2, [pc, #104]	; (800d24c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d00e      	beq.n	800d206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	4a18      	ldr	r2, [pc, #96]	; (800d250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800d1ee:	4293      	cmp	r3, r2
 800d1f0:	d009      	beq.n	800d206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a17      	ldr	r2, [pc, #92]	; (800d254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d004      	beq.n	800d206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	4a15      	ldr	r2, [pc, #84]	; (800d258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d202:	4293      	cmp	r3, r2
 800d204:	d10c      	bne.n	800d220 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d20c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	68ba      	ldr	r2, [r7, #8]
 800d214:	4313      	orrs	r3, r2
 800d216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68ba      	ldr	r2, [r7, #8]
 800d21e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2200      	movs	r2, #0
 800d22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	3714      	adds	r7, #20
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr
 800d23e:	bf00      	nop
 800d240:	40010000 	.word	0x40010000
 800d244:	40000400 	.word	0x40000400
 800d248:	40000800 	.word	0x40000800
 800d24c:	40000c00 	.word	0x40000c00
 800d250:	40010400 	.word	0x40010400
 800d254:	40014000 	.word	0x40014000
 800d258:	40001800 	.word	0x40001800

0800d25c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d25c:	b480      	push	{r7}
 800d25e:	b085      	sub	sp, #20
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d266:	2300      	movs	r3, #0
 800d268:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d270:	2b01      	cmp	r3, #1
 800d272:	d101      	bne.n	800d278 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d274:	2302      	movs	r3, #2
 800d276:	e03d      	b.n	800d2f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2201      	movs	r2, #1
 800d27c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	68db      	ldr	r3, [r3, #12]
 800d28a:	4313      	orrs	r3, r2
 800d28c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	689b      	ldr	r3, [r3, #8]
 800d298:	4313      	orrs	r3, r2
 800d29a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	685b      	ldr	r3, [r3, #4]
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	4313      	orrs	r3, r2
 800d2b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2be:	683b      	ldr	r3, [r7, #0]
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	695b      	ldr	r3, [r3, #20]
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	69db      	ldr	r3, [r3, #28]
 800d2de:	4313      	orrs	r3, r2
 800d2e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2200      	movs	r2, #0
 800d2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3714      	adds	r7, #20
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2fe:	4770      	bx	lr

0800d300 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d308:	bf00      	nop
 800d30a:	370c      	adds	r7, #12
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d314:	b480      	push	{r7}
 800d316:	b083      	sub	sp, #12
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr

0800d328 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d328:	b580      	push	{r7, lr}
 800d32a:	b082      	sub	sp, #8
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d101      	bne.n	800d33a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d336:	2301      	movs	r3, #1
 800d338:	e042      	b.n	800d3c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d340:	b2db      	uxtb	r3, r3
 800d342:	2b00      	cmp	r3, #0
 800d344:	d106      	bne.n	800d354 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f7f8 fa06 	bl	8005760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2224      	movs	r2, #36	; 0x24
 800d358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	68da      	ldr	r2, [r3, #12]
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d36a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 ff37 	bl	800e1e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	691a      	ldr	r2, [r3, #16]
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d380:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	695a      	ldr	r2, [r3, #20]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d390:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	68da      	ldr	r2, [r3, #12]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2220      	movs	r2, #32
 800d3ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2220      	movs	r2, #32
 800d3b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d3be:	2300      	movs	r3, #0
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3708      	adds	r7, #8
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}

0800d3c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08c      	sub	sp, #48	; 0x30
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	4613      	mov	r3, r2
 800d3d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b20      	cmp	r3, #32
 800d3e0:	d156      	bne.n	800d490 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d002      	beq.n	800d3ee <HAL_UART_Transmit_DMA+0x26>
 800d3e8:	88fb      	ldrh	r3, [r7, #6]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d101      	bne.n	800d3f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e04f      	b.n	800d492 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	88fa      	ldrh	r2, [r7, #6]
 800d3fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	88fa      	ldrh	r2, [r7, #6]
 800d402:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	2221      	movs	r2, #33	; 0x21
 800d40e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d416:	4a21      	ldr	r2, [pc, #132]	; (800d49c <HAL_UART_Transmit_DMA+0xd4>)
 800d418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d41e:	4a20      	ldr	r2, [pc, #128]	; (800d4a0 <HAL_UART_Transmit_DMA+0xd8>)
 800d420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d426:	4a1f      	ldr	r2, [pc, #124]	; (800d4a4 <HAL_UART_Transmit_DMA+0xdc>)
 800d428:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d42e:	2200      	movs	r2, #0
 800d430:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800d432:	f107 0308 	add.w	r3, r7, #8
 800d436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43e:	6819      	ldr	r1, [r3, #0]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3304      	adds	r3, #4
 800d446:	461a      	mov	r2, r3
 800d448:	88fb      	ldrh	r3, [r7, #6]
 800d44a:	f7fa fb51 	bl	8007af0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d456:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	3314      	adds	r3, #20
 800d45e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	e853 3f00 	ldrex	r3, [r3]
 800d466:	617b      	str	r3, [r7, #20]
   return(result);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d46e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3314      	adds	r3, #20
 800d476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d478:	627a      	str	r2, [r7, #36]	; 0x24
 800d47a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d47c:	6a39      	ldr	r1, [r7, #32]
 800d47e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d480:	e841 2300 	strex	r3, r2, [r1]
 800d484:	61fb      	str	r3, [r7, #28]
   return(result);
 800d486:	69fb      	ldr	r3, [r7, #28]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1e5      	bne.n	800d458 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800d48c:	2300      	movs	r3, #0
 800d48e:	e000      	b.n	800d492 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800d490:	2302      	movs	r3, #2
  }
}
 800d492:	4618      	mov	r0, r3
 800d494:	3730      	adds	r7, #48	; 0x30
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}
 800d49a:	bf00      	nop
 800d49c:	0800da6d 	.word	0x0800da6d
 800d4a0:	0800db07 	.word	0x0800db07
 800d4a4:	0800dc8b 	.word	0x0800dc8b

0800d4a8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	60f8      	str	r0, [r7, #12]
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	4613      	mov	r3, r2
 800d4b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d4bc:	b2db      	uxtb	r3, r3
 800d4be:	2b20      	cmp	r3, #32
 800d4c0:	d112      	bne.n	800d4e8 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800d4c2:	68bb      	ldr	r3, [r7, #8]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <HAL_UART_Receive_DMA+0x26>
 800d4c8:	88fb      	ldrh	r3, [r7, #6]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d101      	bne.n	800d4d2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d4ce:	2301      	movs	r3, #1
 800d4d0:	e00b      	b.n	800d4ea <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d4d8:	88fb      	ldrh	r3, [r7, #6]
 800d4da:	461a      	mov	r2, r3
 800d4dc:	68b9      	ldr	r1, [r7, #8]
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f000 fc1e 	bl	800dd20 <UART_Start_Receive_DMA>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	e000      	b.n	800d4ea <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800d4e8:	2302      	movs	r3, #2
  }
}
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	3710      	adds	r7, #16
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	bd80      	pop	{r7, pc}
	...

0800d4f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b0ba      	sub	sp, #232	; 0xe8
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	681b      	ldr	r3, [r3, #0]
 800d502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68db      	ldr	r3, [r3, #12]
 800d50c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800d51a:	2300      	movs	r3, #0
 800d51c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800d520:	2300      	movs	r3, #0
 800d522:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d52a:	f003 030f 	and.w	r3, r3, #15
 800d52e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800d532:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d536:	2b00      	cmp	r3, #0
 800d538:	d10f      	bne.n	800d55a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d53a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d53e:	f003 0320 	and.w	r3, r3, #32
 800d542:	2b00      	cmp	r3, #0
 800d544:	d009      	beq.n	800d55a <HAL_UART_IRQHandler+0x66>
 800d546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d54a:	f003 0320 	and.w	r3, r3, #32
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 fd85 	bl	800e062 <UART_Receive_IT>
      return;
 800d558:	e25b      	b.n	800da12 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800d55a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800d55e:	2b00      	cmp	r3, #0
 800d560:	f000 80de 	beq.w	800d720 <HAL_UART_IRQHandler+0x22c>
 800d564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d568:	f003 0301 	and.w	r3, r3, #1
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d106      	bne.n	800d57e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d570:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d574:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 80d1 	beq.w	800d720 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d57e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d582:	f003 0301 	and.w	r3, r3, #1
 800d586:	2b00      	cmp	r3, #0
 800d588:	d00b      	beq.n	800d5a2 <HAL_UART_IRQHandler+0xae>
 800d58a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d58e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d592:	2b00      	cmp	r3, #0
 800d594:	d005      	beq.n	800d5a2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d59a:	f043 0201 	orr.w	r2, r3, #1
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d5a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5a6:	f003 0304 	and.w	r3, r3, #4
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00b      	beq.n	800d5c6 <HAL_UART_IRQHandler+0xd2>
 800d5ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5b2:	f003 0301 	and.w	r3, r3, #1
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d005      	beq.n	800d5c6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5be:	f043 0202 	orr.w	r2, r3, #2
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d5c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ca:	f003 0302 	and.w	r3, r3, #2
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00b      	beq.n	800d5ea <HAL_UART_IRQHandler+0xf6>
 800d5d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d5d6:	f003 0301 	and.w	r3, r3, #1
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d005      	beq.n	800d5ea <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5e2:	f043 0204 	orr.w	r2, r3, #4
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800d5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d5ee:	f003 0308 	and.w	r3, r3, #8
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d011      	beq.n	800d61a <HAL_UART_IRQHandler+0x126>
 800d5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d5fa:	f003 0320 	and.w	r3, r3, #32
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d105      	bne.n	800d60e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800d602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d606:	f003 0301 	and.w	r3, r3, #1
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d005      	beq.n	800d61a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d612:	f043 0208 	orr.w	r2, r3, #8
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d61e:	2b00      	cmp	r3, #0
 800d620:	f000 81f2 	beq.w	800da08 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d624:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d628:	f003 0320 	and.w	r3, r3, #32
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d008      	beq.n	800d642 <HAL_UART_IRQHandler+0x14e>
 800d630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d634:	f003 0320 	and.w	r3, r3, #32
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d002      	beq.n	800d642 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 fd10 	bl	800e062 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	695b      	ldr	r3, [r3, #20]
 800d648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d64c:	2b40      	cmp	r3, #64	; 0x40
 800d64e:	bf0c      	ite	eq
 800d650:	2301      	moveq	r3, #1
 800d652:	2300      	movne	r3, #0
 800d654:	b2db      	uxtb	r3, r3
 800d656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d65e:	f003 0308 	and.w	r3, r3, #8
 800d662:	2b00      	cmp	r3, #0
 800d664:	d103      	bne.n	800d66e <HAL_UART_IRQHandler+0x17a>
 800d666:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d04f      	beq.n	800d70e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d66e:	6878      	ldr	r0, [r7, #4]
 800d670:	f000 fc18 	bl	800dea4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	695b      	ldr	r3, [r3, #20]
 800d67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d67e:	2b40      	cmp	r3, #64	; 0x40
 800d680:	d141      	bne.n	800d706 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	3314      	adds	r3, #20
 800d688:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d68c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d690:	e853 3f00 	ldrex	r3, [r3]
 800d694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800d698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d69c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d6a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3314      	adds	r3, #20
 800d6aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800d6ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800d6b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d6b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800d6ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800d6be:	e841 2300 	strex	r3, r2, [r1]
 800d6c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800d6c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d1d9      	bne.n	800d682 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d013      	beq.n	800d6fe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6da:	4a7e      	ldr	r2, [pc, #504]	; (800d8d4 <HAL_UART_IRQHandler+0x3e0>)
 800d6dc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	f7fa facc 	bl	8007c80 <HAL_DMA_Abort_IT>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d016      	beq.n	800d71c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6f4:	687a      	ldr	r2, [r7, #4]
 800d6f6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800d6f8:	4610      	mov	r0, r2
 800d6fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d6fc:	e00e      	b.n	800d71c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f99e 	bl	800da40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d704:	e00a      	b.n	800d71c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f99a 	bl	800da40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d70c:	e006      	b.n	800d71c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f000 f996 	bl	800da40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800d71a:	e175      	b.n	800da08 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d71c:	bf00      	nop
    return;
 800d71e:	e173      	b.n	800da08 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d724:	2b01      	cmp	r3, #1
 800d726:	f040 814f 	bne.w	800d9c8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800d72a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d72e:	f003 0310 	and.w	r3, r3, #16
 800d732:	2b00      	cmp	r3, #0
 800d734:	f000 8148 	beq.w	800d9c8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800d738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d73c:	f003 0310 	and.w	r3, r3, #16
 800d740:	2b00      	cmp	r3, #0
 800d742:	f000 8141 	beq.w	800d9c8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800d746:	2300      	movs	r3, #0
 800d748:	60bb      	str	r3, [r7, #8]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	60bb      	str	r3, [r7, #8]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	685b      	ldr	r3, [r3, #4]
 800d758:	60bb      	str	r3, [r7, #8]
 800d75a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	695b      	ldr	r3, [r3, #20]
 800d762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d766:	2b40      	cmp	r3, #64	; 0x40
 800d768:	f040 80b6 	bne.w	800d8d8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d778:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	f000 8145 	beq.w	800da0c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800d786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d78a:	429a      	cmp	r2, r3
 800d78c:	f080 813e 	bcs.w	800da0c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d796:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79c:	69db      	ldr	r3, [r3, #28]
 800d79e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7a2:	f000 8088 	beq.w	800d8b6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	330c      	adds	r3, #12
 800d7ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d7b4:	e853 3f00 	ldrex	r3, [r3]
 800d7b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d7bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d7c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d7c4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	330c      	adds	r3, #12
 800d7ce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800d7d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800d7d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7da:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d7de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d7e2:	e841 2300 	strex	r3, r2, [r1]
 800d7e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d7ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d1d9      	bne.n	800d7a6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	3314      	adds	r3, #20
 800d7f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d7fc:	e853 3f00 	ldrex	r3, [r3]
 800d800:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d804:	f023 0301 	bic.w	r3, r3, #1
 800d808:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	3314      	adds	r3, #20
 800d812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d816:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d81a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d81e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d822:	e841 2300 	strex	r3, r2, [r1]
 800d826:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d1e1      	bne.n	800d7f2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	3314      	adds	r3, #20
 800d834:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d836:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d838:	e853 3f00 	ldrex	r3, [r3]
 800d83c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d83e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d844:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	3314      	adds	r3, #20
 800d84e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d852:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d854:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d856:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d858:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d85a:	e841 2300 	strex	r3, r2, [r1]
 800d85e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d862:	2b00      	cmp	r3, #0
 800d864:	d1e3      	bne.n	800d82e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	2220      	movs	r2, #32
 800d86a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2200      	movs	r2, #0
 800d872:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	330c      	adds	r3, #12
 800d87a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d87c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d87e:	e853 3f00 	ldrex	r3, [r3]
 800d882:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d886:	f023 0310 	bic.w	r3, r3, #16
 800d88a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	330c      	adds	r3, #12
 800d894:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d898:	65ba      	str	r2, [r7, #88]	; 0x58
 800d89a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d89e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d8a0:	e841 2300 	strex	r3, r2, [r1]
 800d8a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d8a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1e3      	bne.n	800d874 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f7fa f975 	bl	8007ba0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2202      	movs	r2, #2
 800d8ba:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d8c4:	b29b      	uxth	r3, r3
 800d8c6:	1ad3      	subs	r3, r2, r3
 800d8c8:	b29b      	uxth	r3, r3
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f8c1 	bl	800da54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d8d2:	e09b      	b.n	800da0c <HAL_UART_IRQHandler+0x518>
 800d8d4:	0800df6b 	.word	0x0800df6b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d8e0:	b29b      	uxth	r3, r3
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d8ec:	b29b      	uxth	r3, r3
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	f000 808e 	beq.w	800da10 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800d8f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	f000 8089 	beq.w	800da10 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	330c      	adds	r3, #12
 800d904:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d908:	e853 3f00 	ldrex	r3, [r3]
 800d90c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d90e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d910:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	330c      	adds	r3, #12
 800d91e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800d922:	647a      	str	r2, [r7, #68]	; 0x44
 800d924:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d926:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d928:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d92a:	e841 2300 	strex	r3, r2, [r1]
 800d92e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d932:	2b00      	cmp	r3, #0
 800d934:	d1e3      	bne.n	800d8fe <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	3314      	adds	r3, #20
 800d93c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d940:	e853 3f00 	ldrex	r3, [r3]
 800d944:	623b      	str	r3, [r7, #32]
   return(result);
 800d946:	6a3b      	ldr	r3, [r7, #32]
 800d948:	f023 0301 	bic.w	r3, r3, #1
 800d94c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3314      	adds	r3, #20
 800d956:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d95a:	633a      	str	r2, [r7, #48]	; 0x30
 800d95c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d95e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d960:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d962:	e841 2300 	strex	r3, r2, [r1]
 800d966:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1e3      	bne.n	800d936 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2220      	movs	r2, #32
 800d972:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	330c      	adds	r3, #12
 800d982:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d984:	693b      	ldr	r3, [r7, #16]
 800d986:	e853 3f00 	ldrex	r3, [r3]
 800d98a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f023 0310 	bic.w	r3, r3, #16
 800d992:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	330c      	adds	r3, #12
 800d99c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800d9a0:	61fa      	str	r2, [r7, #28]
 800d9a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a4:	69b9      	ldr	r1, [r7, #24]
 800d9a6:	69fa      	ldr	r2, [r7, #28]
 800d9a8:	e841 2300 	strex	r3, r2, [r1]
 800d9ac:	617b      	str	r3, [r7, #20]
   return(result);
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d1e3      	bne.n	800d97c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	2202      	movs	r2, #2
 800d9b8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d9ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d9be:	4619      	mov	r1, r3
 800d9c0:	6878      	ldr	r0, [r7, #4]
 800d9c2:	f000 f847 	bl	800da54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800d9c6:	e023      	b.n	800da10 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d9c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d009      	beq.n	800d9e8 <HAL_UART_IRQHandler+0x4f4>
 800d9d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d003      	beq.n	800d9e8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 fad6 	bl	800df92 <UART_Transmit_IT>
    return;
 800d9e6:	e014      	b.n	800da12 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d9e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d00e      	beq.n	800da12 <HAL_UART_IRQHandler+0x51e>
 800d9f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d9f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d008      	beq.n	800da12 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fb16 	bl	800e032 <UART_EndTransmit_IT>
    return;
 800da06:	e004      	b.n	800da12 <HAL_UART_IRQHandler+0x51e>
    return;
 800da08:	bf00      	nop
 800da0a:	e002      	b.n	800da12 <HAL_UART_IRQHandler+0x51e>
      return;
 800da0c:	bf00      	nop
 800da0e:	e000      	b.n	800da12 <HAL_UART_IRQHandler+0x51e>
      return;
 800da10:	bf00      	nop
  }
}
 800da12:	37e8      	adds	r7, #232	; 0xe8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800da20:	bf00      	nop
 800da22:	370c      	adds	r7, #12
 800da24:	46bd      	mov	sp, r7
 800da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2a:	4770      	bx	lr

0800da2c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800da2c:	b480      	push	{r7}
 800da2e:	b083      	sub	sp, #12
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800da34:	bf00      	nop
 800da36:	370c      	adds	r7, #12
 800da38:	46bd      	mov	sp, r7
 800da3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3e:	4770      	bx	lr

0800da40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800da40:	b480      	push	{r7}
 800da42:	b083      	sub	sp, #12
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800da54:	b480      	push	{r7}
 800da56:	b083      	sub	sp, #12
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	460b      	mov	r3, r1
 800da5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800da60:	bf00      	nop
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b090      	sub	sp, #64	; 0x40
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da78:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	681b      	ldr	r3, [r3, #0]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da84:	2b00      	cmp	r3, #0
 800da86:	d137      	bne.n	800daf8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800da88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da8a:	2200      	movs	r2, #0
 800da8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800da8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	3314      	adds	r3, #20
 800da94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da98:	e853 3f00 	ldrex	r3, [r3]
 800da9c:	623b      	str	r3, [r7, #32]
   return(result);
 800da9e:	6a3b      	ldr	r3, [r7, #32]
 800daa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800daa4:	63bb      	str	r3, [r7, #56]	; 0x38
 800daa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	3314      	adds	r3, #20
 800daac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800daae:	633a      	str	r2, [r7, #48]	; 0x30
 800dab0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dab4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dab6:	e841 2300 	strex	r3, r2, [r1]
 800daba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d1e5      	bne.n	800da8e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	330c      	adds	r3, #12
 800dac8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daca:	693b      	ldr	r3, [r7, #16]
 800dacc:	e853 3f00 	ldrex	r3, [r3]
 800dad0:	60fb      	str	r3, [r7, #12]
   return(result);
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dad8:	637b      	str	r3, [r7, #52]	; 0x34
 800dada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	330c      	adds	r3, #12
 800dae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dae2:	61fa      	str	r2, [r7, #28]
 800dae4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae6:	69b9      	ldr	r1, [r7, #24]
 800dae8:	69fa      	ldr	r2, [r7, #28]
 800daea:	e841 2300 	strex	r3, r2, [r1]
 800daee:	617b      	str	r3, [r7, #20]
   return(result);
 800daf0:	697b      	ldr	r3, [r7, #20]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d1e5      	bne.n	800dac2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800daf6:	e002      	b.n	800dafe <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800daf8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dafa:	f7f5 ff33 	bl	8003964 <HAL_UART_TxCpltCallback>
}
 800dafe:	bf00      	nop
 800db00:	3740      	adds	r7, #64	; 0x40
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b084      	sub	sp, #16
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db12:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800db14:	68f8      	ldr	r0, [r7, #12]
 800db16:	f7ff ff7f 	bl	800da18 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db1a:	bf00      	nop
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}

0800db22 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800db22:	b580      	push	{r7, lr}
 800db24:	b09c      	sub	sp, #112	; 0x70
 800db26:	af00      	add	r7, sp, #0
 800db28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db2e:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d172      	bne.n	800dc24 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800db3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db40:	2200      	movs	r2, #0
 800db42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800db44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	330c      	adds	r3, #12
 800db4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db4e:	e853 3f00 	ldrex	r3, [r3]
 800db52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800db54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800db5a:	66bb      	str	r3, [r7, #104]	; 0x68
 800db5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	330c      	adds	r3, #12
 800db62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db64:	65ba      	str	r2, [r7, #88]	; 0x58
 800db66:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db68:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800db6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800db6c:	e841 2300 	strex	r3, r2, [r1]
 800db70:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800db72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db74:	2b00      	cmp	r3, #0
 800db76:	d1e5      	bne.n	800db44 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	3314      	adds	r3, #20
 800db7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db82:	e853 3f00 	ldrex	r3, [r3]
 800db86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800db88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db8a:	f023 0301 	bic.w	r3, r3, #1
 800db8e:	667b      	str	r3, [r7, #100]	; 0x64
 800db90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	3314      	adds	r3, #20
 800db96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800db98:	647a      	str	r2, [r7, #68]	; 0x44
 800db9a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800db9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dba0:	e841 2300 	strex	r3, r2, [r1]
 800dba4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d1e5      	bne.n	800db78 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dbac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	e853 3f00 	ldrex	r3, [r3]
 800dbba:	623b      	str	r3, [r7, #32]
   return(result);
 800dbbc:	6a3b      	ldr	r3, [r7, #32]
 800dbbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbc2:	663b      	str	r3, [r7, #96]	; 0x60
 800dbc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3314      	adds	r3, #20
 800dbca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dbcc:	633a      	str	r2, [r7, #48]	; 0x30
 800dbce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dbd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbd4:	e841 2300 	strex	r3, r2, [r1]
 800dbd8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d1e5      	bne.n	800dbac <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dbe0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbe2:	2220      	movs	r2, #32
 800dbe4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dbe8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d119      	bne.n	800dc24 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dbf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	330c      	adds	r3, #12
 800dbf6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	e853 3f00 	ldrex	r3, [r3]
 800dbfe:	60fb      	str	r3, [r7, #12]
   return(result);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f023 0310 	bic.w	r3, r3, #16
 800dc06:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dc08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	330c      	adds	r3, #12
 800dc0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dc10:	61fa      	str	r2, [r7, #28]
 800dc12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc14:	69b9      	ldr	r1, [r7, #24]
 800dc16:	69fa      	ldr	r2, [r7, #28]
 800dc18:	e841 2300 	strex	r3, r2, [r1]
 800dc1c:	617b      	str	r3, [r7, #20]
   return(result);
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d1e5      	bne.n	800dbf0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dc24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc26:	2200      	movs	r2, #0
 800dc28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d106      	bne.n	800dc40 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dc36:	4619      	mov	r1, r3
 800dc38:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dc3a:	f7ff ff0b 	bl	800da54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc3e:	e002      	b.n	800dc46 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800dc40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dc42:	f7f5 fe71 	bl	8003928 <HAL_UART_RxCpltCallback>
}
 800dc46:	bf00      	nop
 800dc48:	3770      	adds	r7, #112	; 0x70
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	bd80      	pop	{r7, pc}

0800dc4e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dc4e:	b580      	push	{r7, lr}
 800dc50:	b084      	sub	sp, #16
 800dc52:	af00      	add	r7, sp, #0
 800dc54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2201      	movs	r2, #1
 800dc60:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d108      	bne.n	800dc7c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800dc6e:	085b      	lsrs	r3, r3, #1
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	4619      	mov	r1, r3
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f7ff feed 	bl	800da54 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dc7a:	e002      	b.n	800dc82 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f7ff fed5 	bl	800da2c <HAL_UART_RxHalfCpltCallback>
}
 800dc82:	bf00      	nop
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800dc92:	2300      	movs	r3, #0
 800dc94:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc9a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	695b      	ldr	r3, [r3, #20]
 800dca2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dca6:	2b80      	cmp	r3, #128	; 0x80
 800dca8:	bf0c      	ite	eq
 800dcaa:	2301      	moveq	r3, #1
 800dcac:	2300      	movne	r3, #0
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	2b21      	cmp	r3, #33	; 0x21
 800dcbc:	d108      	bne.n	800dcd0 <UART_DMAError+0x46>
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d005      	beq.n	800dcd0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	2200      	movs	r2, #0
 800dcc8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800dcca:	68b8      	ldr	r0, [r7, #8]
 800dccc:	f000 f8c2 	bl	800de54 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	695b      	ldr	r3, [r3, #20]
 800dcd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcda:	2b40      	cmp	r3, #64	; 0x40
 800dcdc:	bf0c      	ite	eq
 800dcde:	2301      	moveq	r3, #1
 800dce0:	2300      	movne	r3, #0
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800dce6:	68bb      	ldr	r3, [r7, #8]
 800dce8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b22      	cmp	r3, #34	; 0x22
 800dcf0:	d108      	bne.n	800dd04 <UART_DMAError+0x7a>
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d005      	beq.n	800dd04 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800dcfe:	68b8      	ldr	r0, [r7, #8]
 800dd00:	f000 f8d0 	bl	800dea4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800dd04:	68bb      	ldr	r3, [r7, #8]
 800dd06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd08:	f043 0210 	orr.w	r2, r3, #16
 800dd0c:	68bb      	ldr	r3, [r7, #8]
 800dd0e:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dd10:	68b8      	ldr	r0, [r7, #8]
 800dd12:	f7ff fe95 	bl	800da40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dd16:	bf00      	nop
 800dd18:	3710      	adds	r7, #16
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	bd80      	pop	{r7, pc}
	...

0800dd20 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b098      	sub	sp, #96	; 0x60
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	60f8      	str	r0, [r7, #12]
 800dd28:	60b9      	str	r1, [r7, #8]
 800dd2a:	4613      	mov	r3, r2
 800dd2c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800dd2e:	68ba      	ldr	r2, [r7, #8]
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	88fa      	ldrh	r2, [r7, #6]
 800dd38:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	2222      	movs	r2, #34	; 0x22
 800dd44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd4c:	4a3e      	ldr	r2, [pc, #248]	; (800de48 <UART_Start_Receive_DMA+0x128>)
 800dd4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd54:	4a3d      	ldr	r2, [pc, #244]	; (800de4c <UART_Start_Receive_DMA+0x12c>)
 800dd56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd5c:	4a3c      	ldr	r2, [pc, #240]	; (800de50 <UART_Start_Receive_DMA+0x130>)
 800dd5e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd64:	2200      	movs	r2, #0
 800dd66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800dd68:	f107 0308 	add.w	r3, r7, #8
 800dd6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	3304      	adds	r3, #4
 800dd78:	4619      	mov	r1, r3
 800dd7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	88fb      	ldrh	r3, [r7, #6]
 800dd80:	f7f9 feb6 	bl	8007af0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800dd84:	2300      	movs	r3, #0
 800dd86:	613b      	str	r3, [r7, #16]
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	613b      	str	r3, [r7, #16]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	613b      	str	r3, [r7, #16]
 800dd98:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	691b      	ldr	r3, [r3, #16]
 800dd9e:	2b00      	cmp	r3, #0
 800dda0:	d019      	beq.n	800ddd6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	330c      	adds	r3, #12
 800dda8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddac:	e853 3f00 	ldrex	r3, [r3]
 800ddb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ddb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ddb8:	65bb      	str	r3, [r7, #88]	; 0x58
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	330c      	adds	r3, #12
 800ddc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ddc2:	64fa      	str	r2, [r7, #76]	; 0x4c
 800ddc4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddc6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800ddc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ddca:	e841 2300 	strex	r3, r2, [r1]
 800ddce:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ddd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d1e5      	bne.n	800dda2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	3314      	adds	r3, #20
 800dddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ddde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde0:	e853 3f00 	ldrex	r3, [r3]
 800dde4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dde6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dde8:	f043 0301 	orr.w	r3, r3, #1
 800ddec:	657b      	str	r3, [r7, #84]	; 0x54
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	3314      	adds	r3, #20
 800ddf4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ddf6:	63ba      	str	r2, [r7, #56]	; 0x38
 800ddf8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ddfa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ddfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ddfe:	e841 2300 	strex	r3, r2, [r1]
 800de02:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800de04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de06:	2b00      	cmp	r3, #0
 800de08:	d1e5      	bne.n	800ddd6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de0a:	68fb      	ldr	r3, [r7, #12]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	3314      	adds	r3, #20
 800de10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de12:	69bb      	ldr	r3, [r7, #24]
 800de14:	e853 3f00 	ldrex	r3, [r3]
 800de18:	617b      	str	r3, [r7, #20]
   return(result);
 800de1a:	697b      	ldr	r3, [r7, #20]
 800de1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de20:	653b      	str	r3, [r7, #80]	; 0x50
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3314      	adds	r3, #20
 800de28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800de2a:	627a      	str	r2, [r7, #36]	; 0x24
 800de2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de2e:	6a39      	ldr	r1, [r7, #32]
 800de30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de32:	e841 2300 	strex	r3, r2, [r1]
 800de36:	61fb      	str	r3, [r7, #28]
   return(result);
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d1e5      	bne.n	800de0a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800de3e:	2300      	movs	r3, #0
}
 800de40:	4618      	mov	r0, r3
 800de42:	3760      	adds	r7, #96	; 0x60
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	0800db23 	.word	0x0800db23
 800de4c:	0800dc4f 	.word	0x0800dc4f
 800de50:	0800dc8b 	.word	0x0800dc8b

0800de54 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800de54:	b480      	push	{r7}
 800de56:	b089      	sub	sp, #36	; 0x24
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	330c      	adds	r3, #12
 800de62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	e853 3f00 	ldrex	r3, [r3]
 800de6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800de72:	61fb      	str	r3, [r7, #28]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	330c      	adds	r3, #12
 800de7a:	69fa      	ldr	r2, [r7, #28]
 800de7c:	61ba      	str	r2, [r7, #24]
 800de7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800de80:	6979      	ldr	r1, [r7, #20]
 800de82:	69ba      	ldr	r2, [r7, #24]
 800de84:	e841 2300 	strex	r3, r2, [r1]
 800de88:	613b      	str	r3, [r7, #16]
   return(result);
 800de8a:	693b      	ldr	r3, [r7, #16]
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1e5      	bne.n	800de5c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2220      	movs	r2, #32
 800de94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800de98:	bf00      	nop
 800de9a:	3724      	adds	r7, #36	; 0x24
 800de9c:	46bd      	mov	sp, r7
 800de9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea2:	4770      	bx	lr

0800dea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dea4:	b480      	push	{r7}
 800dea6:	b095      	sub	sp, #84	; 0x54
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	330c      	adds	r3, #12
 800deb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800deb6:	e853 3f00 	ldrex	r3, [r3]
 800deba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800debc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800debe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	330c      	adds	r3, #12
 800deca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800decc:	643a      	str	r2, [r7, #64]	; 0x40
 800dece:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ded0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ded2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ded4:	e841 2300 	strex	r3, r2, [r1]
 800ded8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800deda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d1e5      	bne.n	800deac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	3314      	adds	r3, #20
 800dee6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dee8:	6a3b      	ldr	r3, [r7, #32]
 800deea:	e853 3f00 	ldrex	r3, [r3]
 800deee:	61fb      	str	r3, [r7, #28]
   return(result);
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	f023 0301 	bic.w	r3, r3, #1
 800def6:	64bb      	str	r3, [r7, #72]	; 0x48
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	3314      	adds	r3, #20
 800defe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800df00:	62fa      	str	r2, [r7, #44]	; 0x2c
 800df02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df08:	e841 2300 	strex	r3, r2, [r1]
 800df0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df10:	2b00      	cmp	r3, #0
 800df12:	d1e5      	bne.n	800dee0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df18:	2b01      	cmp	r3, #1
 800df1a:	d119      	bne.n	800df50 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	330c      	adds	r3, #12
 800df22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	e853 3f00 	ldrex	r3, [r3]
 800df2a:	60bb      	str	r3, [r7, #8]
   return(result);
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	f023 0310 	bic.w	r3, r3, #16
 800df32:	647b      	str	r3, [r7, #68]	; 0x44
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	330c      	adds	r3, #12
 800df3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800df3c:	61ba      	str	r2, [r7, #24]
 800df3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df40:	6979      	ldr	r1, [r7, #20]
 800df42:	69ba      	ldr	r2, [r7, #24]
 800df44:	e841 2300 	strex	r3, r2, [r1]
 800df48:	613b      	str	r3, [r7, #16]
   return(result);
 800df4a:	693b      	ldr	r3, [r7, #16]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d1e5      	bne.n	800df1c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2220      	movs	r2, #32
 800df54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	2200      	movs	r2, #0
 800df5c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800df5e:	bf00      	nop
 800df60:	3754      	adds	r7, #84	; 0x54
 800df62:	46bd      	mov	sp, r7
 800df64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df68:	4770      	bx	lr

0800df6a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800df6a:	b580      	push	{r7, lr}
 800df6c:	b084      	sub	sp, #16
 800df6e:	af00      	add	r7, sp, #0
 800df70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2200      	movs	r2, #0
 800df7c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	2200      	movs	r2, #0
 800df82:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800df84:	68f8      	ldr	r0, [r7, #12]
 800df86:	f7ff fd5b 	bl	800da40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800df8a:	bf00      	nop
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}

0800df92 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800df92:	b480      	push	{r7}
 800df94:	b085      	sub	sp, #20
 800df96:	af00      	add	r7, sp, #0
 800df98:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dfa0:	b2db      	uxtb	r3, r3
 800dfa2:	2b21      	cmp	r3, #33	; 0x21
 800dfa4:	d13e      	bne.n	800e024 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	689b      	ldr	r3, [r3, #8]
 800dfaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dfae:	d114      	bne.n	800dfda <UART_Transmit_IT+0x48>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	691b      	ldr	r3, [r3, #16]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d110      	bne.n	800dfda <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a1b      	ldr	r3, [r3, #32]
 800dfbc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	881b      	ldrh	r3, [r3, #0]
 800dfc2:	461a      	mov	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dfcc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	1c9a      	adds	r2, r3, #2
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	621a      	str	r2, [r3, #32]
 800dfd8:	e008      	b.n	800dfec <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a1b      	ldr	r3, [r3, #32]
 800dfde:	1c59      	adds	r1, r3, #1
 800dfe0:	687a      	ldr	r2, [r7, #4]
 800dfe2:	6211      	str	r1, [r2, #32]
 800dfe4:	781a      	ldrb	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dff0:	b29b      	uxth	r3, r3
 800dff2:	3b01      	subs	r3, #1
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	4619      	mov	r1, r3
 800dffa:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d10f      	bne.n	800e020 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	68da      	ldr	r2, [r3, #12]
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e00e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68da      	ldr	r2, [r3, #12]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e01e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e020:	2300      	movs	r3, #0
 800e022:	e000      	b.n	800e026 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800e024:	2302      	movs	r3, #2
  }
}
 800e026:	4618      	mov	r0, r3
 800e028:	3714      	adds	r7, #20
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr

0800e032 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b082      	sub	sp, #8
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68da      	ldr	r2, [r3, #12]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e048:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	2220      	movs	r2, #32
 800e04e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f7f5 fc86 	bl	8003964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e058:	2300      	movs	r3, #0
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}

0800e062 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e062:	b580      	push	{r7, lr}
 800e064:	b08c      	sub	sp, #48	; 0x30
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e070:	b2db      	uxtb	r3, r3
 800e072:	2b22      	cmp	r3, #34	; 0x22
 800e074:	f040 80ae 	bne.w	800e1d4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	689b      	ldr	r3, [r3, #8]
 800e07c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e080:	d117      	bne.n	800e0b2 <UART_Receive_IT+0x50>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	691b      	ldr	r3, [r3, #16]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d113      	bne.n	800e0b2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800e08a:	2300      	movs	r3, #0
 800e08c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e092:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	685b      	ldr	r3, [r3, #4]
 800e09a:	b29b      	uxth	r3, r3
 800e09c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0a0:	b29a      	uxth	r2, r3
 800e0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0a4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0aa:	1c9a      	adds	r2, r3, #2
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	629a      	str	r2, [r3, #40]	; 0x28
 800e0b0:	e026      	b.n	800e100 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	689b      	ldr	r3, [r3, #8]
 800e0c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0c4:	d007      	beq.n	800e0d6 <UART_Receive_IT+0x74>
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d10a      	bne.n	800e0e4 <UART_Receive_IT+0x82>
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	691b      	ldr	r3, [r3, #16]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d106      	bne.n	800e0e4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	685b      	ldr	r3, [r3, #4]
 800e0dc:	b2da      	uxtb	r2, r3
 800e0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0e0:	701a      	strb	r2, [r3, #0]
 800e0e2:	e008      	b.n	800e0f6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	685b      	ldr	r3, [r3, #4]
 800e0ea:	b2db      	uxtb	r3, r3
 800e0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0f4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e104:	b29b      	uxth	r3, r3
 800e106:	3b01      	subs	r3, #1
 800e108:	b29b      	uxth	r3, r3
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	4619      	mov	r1, r3
 800e10e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e110:	2b00      	cmp	r3, #0
 800e112:	d15d      	bne.n	800e1d0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68da      	ldr	r2, [r3, #12]
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f022 0220 	bic.w	r2, r2, #32
 800e122:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	68da      	ldr	r2, [r3, #12]
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e132:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	695a      	ldr	r2, [r3, #20]
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f022 0201 	bic.w	r2, r2, #1
 800e142:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	2220      	movs	r2, #32
 800e148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e156:	2b01      	cmp	r3, #1
 800e158:	d135      	bne.n	800e1c6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	330c      	adds	r3, #12
 800e166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e168:	697b      	ldr	r3, [r7, #20]
 800e16a:	e853 3f00 	ldrex	r3, [r3]
 800e16e:	613b      	str	r3, [r7, #16]
   return(result);
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	f023 0310 	bic.w	r3, r3, #16
 800e176:	627b      	str	r3, [r7, #36]	; 0x24
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	330c      	adds	r3, #12
 800e17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e180:	623a      	str	r2, [r7, #32]
 800e182:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e184:	69f9      	ldr	r1, [r7, #28]
 800e186:	6a3a      	ldr	r2, [r7, #32]
 800e188:	e841 2300 	strex	r3, r2, [r1]
 800e18c:	61bb      	str	r3, [r7, #24]
   return(result);
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d1e5      	bne.n	800e160 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	f003 0310 	and.w	r3, r3, #16
 800e19e:	2b10      	cmp	r3, #16
 800e1a0:	d10a      	bne.n	800e1b8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60fb      	str	r3, [r7, #12]
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	60fb      	str	r3, [r7, #12]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	60fb      	str	r3, [r7, #12]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800e1bc:	4619      	mov	r1, r3
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f7ff fc48 	bl	800da54 <HAL_UARTEx_RxEventCallback>
 800e1c4:	e002      	b.n	800e1cc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800e1c6:	6878      	ldr	r0, [r7, #4]
 800e1c8:	f7f5 fbae 	bl	8003928 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800e1cc:	2300      	movs	r3, #0
 800e1ce:	e002      	b.n	800e1d6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	e000      	b.n	800e1d6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800e1d4:	2302      	movs	r3, #2
  }
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3730      	adds	r7, #48	; 0x30
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
	...

0800e1e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e1e4:	b0c0      	sub	sp, #256	; 0x100
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	691b      	ldr	r3, [r3, #16]
 800e1f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800e1f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1fc:	68d9      	ldr	r1, [r3, #12]
 800e1fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	ea40 0301 	orr.w	r3, r0, r1
 800e208:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e20a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	431a      	orrs	r2, r3
 800e218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e21c:	695b      	ldr	r3, [r3, #20]
 800e21e:	431a      	orrs	r2, r3
 800e220:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e224:	69db      	ldr	r3, [r3, #28]
 800e226:	4313      	orrs	r3, r2
 800e228:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800e22c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800e238:	f021 010c 	bic.w	r1, r1, #12
 800e23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800e246:	430b      	orrs	r3, r1
 800e248:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e24a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800e256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e25a:	6999      	ldr	r1, [r3, #24]
 800e25c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e260:	681a      	ldr	r2, [r3, #0]
 800e262:	ea40 0301 	orr.w	r3, r0, r1
 800e266:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e26c:	681a      	ldr	r2, [r3, #0]
 800e26e:	4b8f      	ldr	r3, [pc, #572]	; (800e4ac <UART_SetConfig+0x2cc>)
 800e270:	429a      	cmp	r2, r3
 800e272:	d005      	beq.n	800e280 <UART_SetConfig+0xa0>
 800e274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e278:	681a      	ldr	r2, [r3, #0]
 800e27a:	4b8d      	ldr	r3, [pc, #564]	; (800e4b0 <UART_SetConfig+0x2d0>)
 800e27c:	429a      	cmp	r2, r3
 800e27e:	d104      	bne.n	800e28a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e280:	f7fc fac8 	bl	800a814 <HAL_RCC_GetPCLK2Freq>
 800e284:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800e288:	e003      	b.n	800e292 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e28a:	f7fc faaf 	bl	800a7ec <HAL_RCC_GetPCLK1Freq>
 800e28e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e29c:	f040 810c 	bne.w	800e4b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e2a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2a4:	2200      	movs	r2, #0
 800e2a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800e2aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800e2ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800e2b2:	4622      	mov	r2, r4
 800e2b4:	462b      	mov	r3, r5
 800e2b6:	1891      	adds	r1, r2, r2
 800e2b8:	65b9      	str	r1, [r7, #88]	; 0x58
 800e2ba:	415b      	adcs	r3, r3
 800e2bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e2be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800e2c2:	4621      	mov	r1, r4
 800e2c4:	eb12 0801 	adds.w	r8, r2, r1
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	eb43 0901 	adc.w	r9, r3, r1
 800e2ce:	f04f 0200 	mov.w	r2, #0
 800e2d2:	f04f 0300 	mov.w	r3, #0
 800e2d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800e2da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800e2de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800e2e2:	4690      	mov	r8, r2
 800e2e4:	4699      	mov	r9, r3
 800e2e6:	4623      	mov	r3, r4
 800e2e8:	eb18 0303 	adds.w	r3, r8, r3
 800e2ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800e2f0:	462b      	mov	r3, r5
 800e2f2:	eb49 0303 	adc.w	r3, r9, r3
 800e2f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800e2fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e2fe:	685b      	ldr	r3, [r3, #4]
 800e300:	2200      	movs	r2, #0
 800e302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800e306:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800e30a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800e30e:	460b      	mov	r3, r1
 800e310:	18db      	adds	r3, r3, r3
 800e312:	653b      	str	r3, [r7, #80]	; 0x50
 800e314:	4613      	mov	r3, r2
 800e316:	eb42 0303 	adc.w	r3, r2, r3
 800e31a:	657b      	str	r3, [r7, #84]	; 0x54
 800e31c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800e320:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800e324:	f7f2 fd00 	bl	8000d28 <__aeabi_uldivmod>
 800e328:	4602      	mov	r2, r0
 800e32a:	460b      	mov	r3, r1
 800e32c:	4b61      	ldr	r3, [pc, #388]	; (800e4b4 <UART_SetConfig+0x2d4>)
 800e32e:	fba3 2302 	umull	r2, r3, r3, r2
 800e332:	095b      	lsrs	r3, r3, #5
 800e334:	011c      	lsls	r4, r3, #4
 800e336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e33a:	2200      	movs	r2, #0
 800e33c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e340:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e344:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e348:	4642      	mov	r2, r8
 800e34a:	464b      	mov	r3, r9
 800e34c:	1891      	adds	r1, r2, r2
 800e34e:	64b9      	str	r1, [r7, #72]	; 0x48
 800e350:	415b      	adcs	r3, r3
 800e352:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e354:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e358:	4641      	mov	r1, r8
 800e35a:	eb12 0a01 	adds.w	sl, r2, r1
 800e35e:	4649      	mov	r1, r9
 800e360:	eb43 0b01 	adc.w	fp, r3, r1
 800e364:	f04f 0200 	mov.w	r2, #0
 800e368:	f04f 0300 	mov.w	r3, #0
 800e36c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e370:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e374:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e378:	4692      	mov	sl, r2
 800e37a:	469b      	mov	fp, r3
 800e37c:	4643      	mov	r3, r8
 800e37e:	eb1a 0303 	adds.w	r3, sl, r3
 800e382:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e386:	464b      	mov	r3, r9
 800e388:	eb4b 0303 	adc.w	r3, fp, r3
 800e38c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e39c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e3a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	18db      	adds	r3, r3, r3
 800e3a8:	643b      	str	r3, [r7, #64]	; 0x40
 800e3aa:	4613      	mov	r3, r2
 800e3ac:	eb42 0303 	adc.w	r3, r2, r3
 800e3b0:	647b      	str	r3, [r7, #68]	; 0x44
 800e3b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e3b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e3ba:	f7f2 fcb5 	bl	8000d28 <__aeabi_uldivmod>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	4611      	mov	r1, r2
 800e3c4:	4b3b      	ldr	r3, [pc, #236]	; (800e4b4 <UART_SetConfig+0x2d4>)
 800e3c6:	fba3 2301 	umull	r2, r3, r3, r1
 800e3ca:	095b      	lsrs	r3, r3, #5
 800e3cc:	2264      	movs	r2, #100	; 0x64
 800e3ce:	fb02 f303 	mul.w	r3, r2, r3
 800e3d2:	1acb      	subs	r3, r1, r3
 800e3d4:	00db      	lsls	r3, r3, #3
 800e3d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e3da:	4b36      	ldr	r3, [pc, #216]	; (800e4b4 <UART_SetConfig+0x2d4>)
 800e3dc:	fba3 2302 	umull	r2, r3, r3, r2
 800e3e0:	095b      	lsrs	r3, r3, #5
 800e3e2:	005b      	lsls	r3, r3, #1
 800e3e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e3e8:	441c      	add	r4, r3
 800e3ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e3f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e3f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e3fc:	4642      	mov	r2, r8
 800e3fe:	464b      	mov	r3, r9
 800e400:	1891      	adds	r1, r2, r2
 800e402:	63b9      	str	r1, [r7, #56]	; 0x38
 800e404:	415b      	adcs	r3, r3
 800e406:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e408:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e40c:	4641      	mov	r1, r8
 800e40e:	1851      	adds	r1, r2, r1
 800e410:	6339      	str	r1, [r7, #48]	; 0x30
 800e412:	4649      	mov	r1, r9
 800e414:	414b      	adcs	r3, r1
 800e416:	637b      	str	r3, [r7, #52]	; 0x34
 800e418:	f04f 0200 	mov.w	r2, #0
 800e41c:	f04f 0300 	mov.w	r3, #0
 800e420:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e424:	4659      	mov	r1, fp
 800e426:	00cb      	lsls	r3, r1, #3
 800e428:	4651      	mov	r1, sl
 800e42a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e42e:	4651      	mov	r1, sl
 800e430:	00ca      	lsls	r2, r1, #3
 800e432:	4610      	mov	r0, r2
 800e434:	4619      	mov	r1, r3
 800e436:	4603      	mov	r3, r0
 800e438:	4642      	mov	r2, r8
 800e43a:	189b      	adds	r3, r3, r2
 800e43c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e440:	464b      	mov	r3, r9
 800e442:	460a      	mov	r2, r1
 800e444:	eb42 0303 	adc.w	r3, r2, r3
 800e448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e44c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e450:	685b      	ldr	r3, [r3, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e458:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e45c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e460:	460b      	mov	r3, r1
 800e462:	18db      	adds	r3, r3, r3
 800e464:	62bb      	str	r3, [r7, #40]	; 0x28
 800e466:	4613      	mov	r3, r2
 800e468:	eb42 0303 	adc.w	r3, r2, r3
 800e46c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e46e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e472:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e476:	f7f2 fc57 	bl	8000d28 <__aeabi_uldivmod>
 800e47a:	4602      	mov	r2, r0
 800e47c:	460b      	mov	r3, r1
 800e47e:	4b0d      	ldr	r3, [pc, #52]	; (800e4b4 <UART_SetConfig+0x2d4>)
 800e480:	fba3 1302 	umull	r1, r3, r3, r2
 800e484:	095b      	lsrs	r3, r3, #5
 800e486:	2164      	movs	r1, #100	; 0x64
 800e488:	fb01 f303 	mul.w	r3, r1, r3
 800e48c:	1ad3      	subs	r3, r2, r3
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	3332      	adds	r3, #50	; 0x32
 800e492:	4a08      	ldr	r2, [pc, #32]	; (800e4b4 <UART_SetConfig+0x2d4>)
 800e494:	fba2 2303 	umull	r2, r3, r2, r3
 800e498:	095b      	lsrs	r3, r3, #5
 800e49a:	f003 0207 	and.w	r2, r3, #7
 800e49e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	4422      	add	r2, r4
 800e4a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e4a8:	e106      	b.n	800e6b8 <UART_SetConfig+0x4d8>
 800e4aa:	bf00      	nop
 800e4ac:	40011000 	.word	0x40011000
 800e4b0:	40011400 	.word	0x40011400
 800e4b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e4b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e4bc:	2200      	movs	r2, #0
 800e4be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e4c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e4c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e4ca:	4642      	mov	r2, r8
 800e4cc:	464b      	mov	r3, r9
 800e4ce:	1891      	adds	r1, r2, r2
 800e4d0:	6239      	str	r1, [r7, #32]
 800e4d2:	415b      	adcs	r3, r3
 800e4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800e4d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e4da:	4641      	mov	r1, r8
 800e4dc:	1854      	adds	r4, r2, r1
 800e4de:	4649      	mov	r1, r9
 800e4e0:	eb43 0501 	adc.w	r5, r3, r1
 800e4e4:	f04f 0200 	mov.w	r2, #0
 800e4e8:	f04f 0300 	mov.w	r3, #0
 800e4ec:	00eb      	lsls	r3, r5, #3
 800e4ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e4f2:	00e2      	lsls	r2, r4, #3
 800e4f4:	4614      	mov	r4, r2
 800e4f6:	461d      	mov	r5, r3
 800e4f8:	4643      	mov	r3, r8
 800e4fa:	18e3      	adds	r3, r4, r3
 800e4fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e500:	464b      	mov	r3, r9
 800e502:	eb45 0303 	adc.w	r3, r5, r3
 800e506:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e50a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e516:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e51a:	f04f 0200 	mov.w	r2, #0
 800e51e:	f04f 0300 	mov.w	r3, #0
 800e522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e526:	4629      	mov	r1, r5
 800e528:	008b      	lsls	r3, r1, #2
 800e52a:	4621      	mov	r1, r4
 800e52c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e530:	4621      	mov	r1, r4
 800e532:	008a      	lsls	r2, r1, #2
 800e534:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e538:	f7f2 fbf6 	bl	8000d28 <__aeabi_uldivmod>
 800e53c:	4602      	mov	r2, r0
 800e53e:	460b      	mov	r3, r1
 800e540:	4b60      	ldr	r3, [pc, #384]	; (800e6c4 <UART_SetConfig+0x4e4>)
 800e542:	fba3 2302 	umull	r2, r3, r3, r2
 800e546:	095b      	lsrs	r3, r3, #5
 800e548:	011c      	lsls	r4, r3, #4
 800e54a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e54e:	2200      	movs	r2, #0
 800e550:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e554:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e558:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e55c:	4642      	mov	r2, r8
 800e55e:	464b      	mov	r3, r9
 800e560:	1891      	adds	r1, r2, r2
 800e562:	61b9      	str	r1, [r7, #24]
 800e564:	415b      	adcs	r3, r3
 800e566:	61fb      	str	r3, [r7, #28]
 800e568:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e56c:	4641      	mov	r1, r8
 800e56e:	1851      	adds	r1, r2, r1
 800e570:	6139      	str	r1, [r7, #16]
 800e572:	4649      	mov	r1, r9
 800e574:	414b      	adcs	r3, r1
 800e576:	617b      	str	r3, [r7, #20]
 800e578:	f04f 0200 	mov.w	r2, #0
 800e57c:	f04f 0300 	mov.w	r3, #0
 800e580:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e584:	4659      	mov	r1, fp
 800e586:	00cb      	lsls	r3, r1, #3
 800e588:	4651      	mov	r1, sl
 800e58a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e58e:	4651      	mov	r1, sl
 800e590:	00ca      	lsls	r2, r1, #3
 800e592:	4610      	mov	r0, r2
 800e594:	4619      	mov	r1, r3
 800e596:	4603      	mov	r3, r0
 800e598:	4642      	mov	r2, r8
 800e59a:	189b      	adds	r3, r3, r2
 800e59c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e5a0:	464b      	mov	r3, r9
 800e5a2:	460a      	mov	r2, r1
 800e5a4:	eb42 0303 	adc.w	r3, r2, r3
 800e5a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e5ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	67bb      	str	r3, [r7, #120]	; 0x78
 800e5b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e5b8:	f04f 0200 	mov.w	r2, #0
 800e5bc:	f04f 0300 	mov.w	r3, #0
 800e5c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e5c4:	4649      	mov	r1, r9
 800e5c6:	008b      	lsls	r3, r1, #2
 800e5c8:	4641      	mov	r1, r8
 800e5ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e5ce:	4641      	mov	r1, r8
 800e5d0:	008a      	lsls	r2, r1, #2
 800e5d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e5d6:	f7f2 fba7 	bl	8000d28 <__aeabi_uldivmod>
 800e5da:	4602      	mov	r2, r0
 800e5dc:	460b      	mov	r3, r1
 800e5de:	4611      	mov	r1, r2
 800e5e0:	4b38      	ldr	r3, [pc, #224]	; (800e6c4 <UART_SetConfig+0x4e4>)
 800e5e2:	fba3 2301 	umull	r2, r3, r3, r1
 800e5e6:	095b      	lsrs	r3, r3, #5
 800e5e8:	2264      	movs	r2, #100	; 0x64
 800e5ea:	fb02 f303 	mul.w	r3, r2, r3
 800e5ee:	1acb      	subs	r3, r1, r3
 800e5f0:	011b      	lsls	r3, r3, #4
 800e5f2:	3332      	adds	r3, #50	; 0x32
 800e5f4:	4a33      	ldr	r2, [pc, #204]	; (800e6c4 <UART_SetConfig+0x4e4>)
 800e5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e5fa:	095b      	lsrs	r3, r3, #5
 800e5fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e600:	441c      	add	r4, r3
 800e602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e606:	2200      	movs	r2, #0
 800e608:	673b      	str	r3, [r7, #112]	; 0x70
 800e60a:	677a      	str	r2, [r7, #116]	; 0x74
 800e60c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e610:	4642      	mov	r2, r8
 800e612:	464b      	mov	r3, r9
 800e614:	1891      	adds	r1, r2, r2
 800e616:	60b9      	str	r1, [r7, #8]
 800e618:	415b      	adcs	r3, r3
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e620:	4641      	mov	r1, r8
 800e622:	1851      	adds	r1, r2, r1
 800e624:	6039      	str	r1, [r7, #0]
 800e626:	4649      	mov	r1, r9
 800e628:	414b      	adcs	r3, r1
 800e62a:	607b      	str	r3, [r7, #4]
 800e62c:	f04f 0200 	mov.w	r2, #0
 800e630:	f04f 0300 	mov.w	r3, #0
 800e634:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e638:	4659      	mov	r1, fp
 800e63a:	00cb      	lsls	r3, r1, #3
 800e63c:	4651      	mov	r1, sl
 800e63e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e642:	4651      	mov	r1, sl
 800e644:	00ca      	lsls	r2, r1, #3
 800e646:	4610      	mov	r0, r2
 800e648:	4619      	mov	r1, r3
 800e64a:	4603      	mov	r3, r0
 800e64c:	4642      	mov	r2, r8
 800e64e:	189b      	adds	r3, r3, r2
 800e650:	66bb      	str	r3, [r7, #104]	; 0x68
 800e652:	464b      	mov	r3, r9
 800e654:	460a      	mov	r2, r1
 800e656:	eb42 0303 	adc.w	r3, r2, r3
 800e65a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e65c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e660:	685b      	ldr	r3, [r3, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	663b      	str	r3, [r7, #96]	; 0x60
 800e666:	667a      	str	r2, [r7, #100]	; 0x64
 800e668:	f04f 0200 	mov.w	r2, #0
 800e66c:	f04f 0300 	mov.w	r3, #0
 800e670:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e674:	4649      	mov	r1, r9
 800e676:	008b      	lsls	r3, r1, #2
 800e678:	4641      	mov	r1, r8
 800e67a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e67e:	4641      	mov	r1, r8
 800e680:	008a      	lsls	r2, r1, #2
 800e682:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e686:	f7f2 fb4f 	bl	8000d28 <__aeabi_uldivmod>
 800e68a:	4602      	mov	r2, r0
 800e68c:	460b      	mov	r3, r1
 800e68e:	4b0d      	ldr	r3, [pc, #52]	; (800e6c4 <UART_SetConfig+0x4e4>)
 800e690:	fba3 1302 	umull	r1, r3, r3, r2
 800e694:	095b      	lsrs	r3, r3, #5
 800e696:	2164      	movs	r1, #100	; 0x64
 800e698:	fb01 f303 	mul.w	r3, r1, r3
 800e69c:	1ad3      	subs	r3, r2, r3
 800e69e:	011b      	lsls	r3, r3, #4
 800e6a0:	3332      	adds	r3, #50	; 0x32
 800e6a2:	4a08      	ldr	r2, [pc, #32]	; (800e6c4 <UART_SetConfig+0x4e4>)
 800e6a4:	fba2 2303 	umull	r2, r3, r2, r3
 800e6a8:	095b      	lsrs	r3, r3, #5
 800e6aa:	f003 020f 	and.w	r2, r3, #15
 800e6ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	4422      	add	r2, r4
 800e6b6:	609a      	str	r2, [r3, #8]
}
 800e6b8:	bf00      	nop
 800e6ba:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e6c4:	51eb851f 	.word	0x51eb851f

0800e6c8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800e6c8:	b084      	sub	sp, #16
 800e6ca:	b480      	push	{r7}
 800e6cc:	b085      	sub	sp, #20
 800e6ce:	af00      	add	r7, sp, #0
 800e6d0:	6078      	str	r0, [r7, #4]
 800e6d2:	f107 001c 	add.w	r0, r7, #28
 800e6d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800e6da:	2300      	movs	r3, #0
 800e6dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800e6de:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800e6e2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800e6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800e6e6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800e6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800e6ea:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800e6ee:	431a      	orrs	r2, r3
             Init.ClockDiv
 800e6f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800e6f2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800e6f4:	68fa      	ldr	r2, [r7, #12]
 800e6f6:	4313      	orrs	r3, r2
 800e6f8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800e702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e706:	68fa      	ldr	r2, [r7, #12]
 800e708:	431a      	orrs	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	4618      	mov	r0, r3
 800e712:	3714      	adds	r7, #20
 800e714:	46bd      	mov	sp, r7
 800e716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e71a:	b004      	add	sp, #16
 800e71c:	4770      	bx	lr

0800e71e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800e71e:	b480      	push	{r7}
 800e720:	b083      	sub	sp, #12
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800e72c:	4618      	mov	r0, r3
 800e72e:	370c      	adds	r7, #12
 800e730:	46bd      	mov	sp, r7
 800e732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e736:	4770      	bx	lr

0800e738 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800e738:	b480      	push	{r7}
 800e73a:	b083      	sub	sp, #12
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800e742:	683b      	ldr	r3, [r7, #0]
 800e744:	681a      	ldr	r2, [r3, #0]
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e74c:	2300      	movs	r3, #0
}
 800e74e:	4618      	mov	r0, r3
 800e750:	370c      	adds	r7, #12
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr

0800e75a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800e75a:	b480      	push	{r7}
 800e75c:	b083      	sub	sp, #12
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2203      	movs	r2, #3
 800e766:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800e776:	b480      	push	{r7}
 800e778:	b083      	sub	sp, #12
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	f003 0303 	and.w	r3, r3, #3
}
 800e786:	4618      	mov	r0, r3
 800e788:	370c      	adds	r7, #12
 800e78a:	46bd      	mov	sp, r7
 800e78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e790:	4770      	bx	lr

0800e792 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800e792:	b480      	push	{r7}
 800e794:	b085      	sub	sp, #20
 800e796:	af00      	add	r7, sp, #0
 800e798:	6078      	str	r0, [r7, #4]
 800e79a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e79c:	2300      	movs	r3, #0
 800e79e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	681a      	ldr	r2, [r3, #0]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e7b0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800e7b6:	431a      	orrs	r2, r3
                       Command->CPSM);
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800e7bc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800e7be:	68fa      	ldr	r2, [r7, #12]
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	68db      	ldr	r3, [r3, #12]
 800e7c8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800e7cc:	f023 030f 	bic.w	r3, r3, #15
 800e7d0:	68fa      	ldr	r2, [r7, #12]
 800e7d2:	431a      	orrs	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3714      	adds	r7, #20
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800e7e6:	b480      	push	{r7}
 800e7e8:	b083      	sub	sp, #12
 800e7ea:	af00      	add	r7, sp, #0
 800e7ec:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	691b      	ldr	r3, [r3, #16]
 800e7f2:	b2db      	uxtb	r3, r3
}
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	370c      	adds	r7, #12
 800e7f8:	46bd      	mov	sp, r7
 800e7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fe:	4770      	bx	lr

0800e800 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800e800:	b480      	push	{r7}
 800e802:	b085      	sub	sp, #20
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
 800e808:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	3314      	adds	r3, #20
 800e80e:	461a      	mov	r2, r3
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	4413      	add	r3, r2
 800e814:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
}  
 800e81a:	4618      	mov	r0, r3
 800e81c:	3714      	adds	r7, #20
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr

0800e826 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800e826:	b480      	push	{r7}
 800e828:	b085      	sub	sp, #20
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800e830:	2300      	movs	r3, #0
 800e832:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800e834:	683b      	ldr	r3, [r7, #0]
 800e836:	681a      	ldr	r2, [r3, #0]
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	685a      	ldr	r2, [r3, #4]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e844:	683b      	ldr	r3, [r7, #0]
 800e846:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e84c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800e852:	431a      	orrs	r2, r3
                       Data->DPSM);
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800e858:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	4313      	orrs	r3, r2
 800e85e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e864:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	431a      	orrs	r2, r3
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800e870:	2300      	movs	r3, #0

}
 800e872:	4618      	mov	r0, r3
 800e874:	3714      	adds	r7, #20
 800e876:	46bd      	mov	sp, r7
 800e878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e87c:	4770      	bx	lr

0800e87e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800e87e:	b580      	push	{r7, lr}
 800e880:	b088      	sub	sp, #32
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
 800e886:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800e88c:	2310      	movs	r3, #16
 800e88e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e890:	2340      	movs	r3, #64	; 0x40
 800e892:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e894:	2300      	movs	r3, #0
 800e896:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e898:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e89c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e89e:	f107 0308 	add.w	r3, r7, #8
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f7ff ff74 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800e8aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8ae:	2110      	movs	r1, #16
 800e8b0:	6878      	ldr	r0, [r7, #4]
 800e8b2:	f000 f9d7 	bl	800ec64 <SDMMC_GetCmdResp1>
 800e8b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8b8:	69fb      	ldr	r3, [r7, #28]
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3720      	adds	r7, #32
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}

0800e8c2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b088      	sub	sp, #32
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
 800e8ca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e8d0:	2311      	movs	r3, #17
 800e8d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e8d4:	2340      	movs	r3, #64	; 0x40
 800e8d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e8dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e8e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e8e2:	f107 0308 	add.w	r3, r7, #8
 800e8e6:	4619      	mov	r1, r3
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7ff ff52 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e8ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800e8f2:	2111      	movs	r1, #17
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f000 f9b5 	bl	800ec64 <SDMMC_GetCmdResp1>
 800e8fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e8fc:	69fb      	ldr	r3, [r7, #28]
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3720      	adds	r7, #32
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b088      	sub	sp, #32
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	6078      	str	r0, [r7, #4]
 800e90e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e914:	2312      	movs	r3, #18
 800e916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e918:	2340      	movs	r3, #64	; 0x40
 800e91a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e91c:	2300      	movs	r3, #0
 800e91e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e924:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e926:	f107 0308 	add.w	r3, r7, #8
 800e92a:	4619      	mov	r1, r3
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f7ff ff30 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e932:	f241 3288 	movw	r2, #5000	; 0x1388
 800e936:	2112      	movs	r1, #18
 800e938:	6878      	ldr	r0, [r7, #4]
 800e93a:	f000 f993 	bl	800ec64 <SDMMC_GetCmdResp1>
 800e93e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e940:	69fb      	ldr	r3, [r7, #28]
}
 800e942:	4618      	mov	r0, r3
 800e944:	3720      	adds	r7, #32
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b088      	sub	sp, #32
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e958:	2318      	movs	r3, #24
 800e95a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e95c:	2340      	movs	r3, #64	; 0x40
 800e95e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e960:	2300      	movs	r3, #0
 800e962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e968:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e96a:	f107 0308 	add.w	r3, r7, #8
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f7ff ff0e 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e976:	f241 3288 	movw	r2, #5000	; 0x1388
 800e97a:	2118      	movs	r1, #24
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	f000 f971 	bl	800ec64 <SDMMC_GetCmdResp1>
 800e982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e984:	69fb      	ldr	r3, [r7, #28]
}
 800e986:	4618      	mov	r0, r3
 800e988:	3720      	adds	r7, #32
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}

0800e98e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e98e:	b580      	push	{r7, lr}
 800e990:	b088      	sub	sp, #32
 800e992:	af00      	add	r7, sp, #0
 800e994:	6078      	str	r0, [r7, #4]
 800e996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e998:	683b      	ldr	r3, [r7, #0]
 800e99a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e99c:	2319      	movs	r3, #25
 800e99e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9a0:	2340      	movs	r3, #64	; 0x40
 800e9a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9ae:	f107 0308 	add.w	r3, r7, #8
 800e9b2:	4619      	mov	r1, r3
 800e9b4:	6878      	ldr	r0, [r7, #4]
 800e9b6:	f7ff feec 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e9ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800e9be:	2119      	movs	r1, #25
 800e9c0:	6878      	ldr	r0, [r7, #4]
 800e9c2:	f000 f94f 	bl	800ec64 <SDMMC_GetCmdResp1>
 800e9c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e9c8:	69fb      	ldr	r3, [r7, #28]
}
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	3720      	adds	r7, #32
 800e9ce:	46bd      	mov	sp, r7
 800e9d0:	bd80      	pop	{r7, pc}
	...

0800e9d4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b088      	sub	sp, #32
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e9e0:	230c      	movs	r3, #12
 800e9e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e9e4:	2340      	movs	r3, #64	; 0x40
 800e9e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e9ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e9f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e9f2:	f107 0308 	add.w	r3, r7, #8
 800e9f6:	4619      	mov	r1, r3
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7ff feca 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e9fe:	4a05      	ldr	r2, [pc, #20]	; (800ea14 <SDMMC_CmdStopTransfer+0x40>)
 800ea00:	210c      	movs	r1, #12
 800ea02:	6878      	ldr	r0, [r7, #4]
 800ea04:	f000 f92e 	bl	800ec64 <SDMMC_GetCmdResp1>
 800ea08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea0a:	69fb      	ldr	r3, [r7, #28]
}
 800ea0c:	4618      	mov	r0, r3
 800ea0e:	3720      	adds	r7, #32
 800ea10:	46bd      	mov	sp, r7
 800ea12:	bd80      	pop	{r7, pc}
 800ea14:	05f5e100 	.word	0x05f5e100

0800ea18 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b08a      	sub	sp, #40	; 0x28
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	60f8      	str	r0, [r7, #12]
 800ea20:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ea24:	683b      	ldr	r3, [r7, #0]
 800ea26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ea28:	2307      	movs	r3, #7
 800ea2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ea2c:	2340      	movs	r3, #64	; 0x40
 800ea2e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea30:	2300      	movs	r3, #0
 800ea32:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea38:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea3a:	f107 0310 	add.w	r3, r7, #16
 800ea3e:	4619      	mov	r1, r3
 800ea40:	68f8      	ldr	r0, [r7, #12]
 800ea42:	f7ff fea6 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ea46:	f241 3288 	movw	r2, #5000	; 0x1388
 800ea4a:	2107      	movs	r1, #7
 800ea4c:	68f8      	ldr	r0, [r7, #12]
 800ea4e:	f000 f909 	bl	800ec64 <SDMMC_GetCmdResp1>
 800ea52:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	3728      	adds	r7, #40	; 0x28
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bd80      	pop	{r7, pc}

0800ea5e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800ea5e:	b580      	push	{r7, lr}
 800ea60:	b088      	sub	sp, #32
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ea66:	2300      	movs	r3, #0
 800ea68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800ea6e:	2300      	movs	r3, #0
 800ea70:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ea72:	2300      	movs	r3, #0
 800ea74:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ea76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea7a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ea7c:	f107 0308 	add.w	r3, r7, #8
 800ea80:	4619      	mov	r1, r3
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f7ff fe85 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f000 fb23 	bl	800f0d4 <SDMMC_GetCmdError>
 800ea8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ea90:	69fb      	ldr	r3, [r7, #28]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3720      	adds	r7, #32
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}

0800ea9a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b088      	sub	sp, #32
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800eaa2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800eaa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800eaa8:	2308      	movs	r3, #8
 800eaaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eaac:	2340      	movs	r3, #64	; 0x40
 800eaae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eab0:	2300      	movs	r3, #0
 800eab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eab4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eab8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaba:	f107 0308 	add.w	r3, r7, #8
 800eabe:	4619      	mov	r1, r3
 800eac0:	6878      	ldr	r0, [r7, #4]
 800eac2:	f7ff fe66 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800eac6:	6878      	ldr	r0, [r7, #4]
 800eac8:	f000 fab6 	bl	800f038 <SDMMC_GetCmdResp7>
 800eacc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eace:	69fb      	ldr	r3, [r7, #28]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3720      	adds	r7, #32
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b088      	sub	sp, #32
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800eae6:	2337      	movs	r3, #55	; 0x37
 800eae8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eaea:	2340      	movs	r3, #64	; 0x40
 800eaec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eaee:	2300      	movs	r3, #0
 800eaf0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eaf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eaf6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eaf8:	f107 0308 	add.w	r3, r7, #8
 800eafc:	4619      	mov	r1, r3
 800eafe:	6878      	ldr	r0, [r7, #4]
 800eb00:	f7ff fe47 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800eb04:	f241 3288 	movw	r2, #5000	; 0x1388
 800eb08:	2137      	movs	r1, #55	; 0x37
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 f8aa 	bl	800ec64 <SDMMC_GetCmdResp1>
 800eb10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb12:	69fb      	ldr	r3, [r7, #28]
}
 800eb14:	4618      	mov	r0, r3
 800eb16:	3720      	adds	r7, #32
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b088      	sub	sp, #32
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
 800eb24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800eb26:	683b      	ldr	r3, [r7, #0]
 800eb28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800eb2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800eb30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800eb32:	2329      	movs	r3, #41	; 0x29
 800eb34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800eb36:	2340      	movs	r3, #64	; 0x40
 800eb38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb44:	f107 0308 	add.w	r3, r7, #8
 800eb48:	4619      	mov	r1, r3
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f7ff fe21 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	f000 f9bd 	bl	800eed0 <SDMMC_GetCmdResp3>
 800eb56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb58:	69fb      	ldr	r3, [r7, #28]
}
 800eb5a:	4618      	mov	r0, r3
 800eb5c:	3720      	adds	r7, #32
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	bd80      	pop	{r7, pc}

0800eb62 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800eb62:	b580      	push	{r7, lr}
 800eb64:	b088      	sub	sp, #32
 800eb66:	af00      	add	r7, sp, #0
 800eb68:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800eb6e:	2302      	movs	r3, #2
 800eb70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800eb72:	23c0      	movs	r3, #192	; 0xc0
 800eb74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eb76:	2300      	movs	r3, #0
 800eb78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eb7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eb80:	f107 0308 	add.w	r3, r7, #8
 800eb84:	4619      	mov	r1, r3
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f7ff fe03 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f000 f957 	bl	800ee40 <SDMMC_GetCmdResp2>
 800eb92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eb94:	69fb      	ldr	r3, [r7, #28]
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3720      	adds	r7, #32
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}

0800eb9e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b088      	sub	sp, #32
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ebac:	2309      	movs	r3, #9
 800ebae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800ebb0:	23c0      	movs	r3, #192	; 0xc0
 800ebb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebbc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebbe:	f107 0308 	add.w	r3, r7, #8
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f7ff fde4 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f000 f938 	bl	800ee40 <SDMMC_GetCmdResp2>
 800ebd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ebd2:	69fb      	ldr	r3, [r7, #28]
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3720      	adds	r7, #32
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800ebdc:	b580      	push	{r7, lr}
 800ebde:	b088      	sub	sp, #32
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
 800ebe4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ebea:	2303      	movs	r3, #3
 800ebec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ebee:	2340      	movs	r3, #64	; 0x40
 800ebf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ebf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ebfa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ebfc:	f107 0308 	add.w	r3, r7, #8
 800ec00:	4619      	mov	r1, r3
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f7ff fdc5 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ec08:	683a      	ldr	r2, [r7, #0]
 800ec0a:	2103      	movs	r1, #3
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f99d 	bl	800ef4c <SDMMC_GetCmdResp6>
 800ec12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec14:	69fb      	ldr	r3, [r7, #28]
}
 800ec16:	4618      	mov	r0, r3
 800ec18:	3720      	adds	r7, #32
 800ec1a:	46bd      	mov	sp, r7
 800ec1c:	bd80      	pop	{r7, pc}

0800ec1e <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ec1e:	b580      	push	{r7, lr}
 800ec20:	b088      	sub	sp, #32
 800ec22:	af00      	add	r7, sp, #0
 800ec24:	6078      	str	r0, [r7, #4]
 800ec26:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ec2c:	230d      	movs	r3, #13
 800ec2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ec30:	2340      	movs	r3, #64	; 0x40
 800ec32:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ec34:	2300      	movs	r3, #0
 800ec36:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ec38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ec3c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ec3e:	f107 0308 	add.w	r3, r7, #8
 800ec42:	4619      	mov	r1, r3
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	f7ff fda4 	bl	800e792 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800ec4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ec4e:	210d      	movs	r1, #13
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 f807 	bl	800ec64 <SDMMC_GetCmdResp1>
 800ec56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ec58:	69fb      	ldr	r3, [r7, #28]
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	3720      	adds	r7, #32
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}
	...

0800ec64 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b088      	sub	sp, #32
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	460b      	mov	r3, r1
 800ec6e:	607a      	str	r2, [r7, #4]
 800ec70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ec72:	4b70      	ldr	r3, [pc, #448]	; (800ee34 <SDMMC_GetCmdResp1+0x1d0>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4a70      	ldr	r2, [pc, #448]	; (800ee38 <SDMMC_GetCmdResp1+0x1d4>)
 800ec78:	fba2 2303 	umull	r2, r3, r2, r3
 800ec7c:	0a5a      	lsrs	r2, r3, #9
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	fb02 f303 	mul.w	r3, r2, r3
 800ec84:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ec86:	69fb      	ldr	r3, [r7, #28]
 800ec88:	1e5a      	subs	r2, r3, #1
 800ec8a:	61fa      	str	r2, [r7, #28]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d102      	bne.n	800ec96 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ec90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ec94:	e0c9      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec9a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d0ef      	beq.n	800ec86 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d1ea      	bne.n	800ec86 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb4:	f003 0304 	and.w	r3, r3, #4
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d004      	beq.n	800ecc6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2204      	movs	r2, #4
 800ecc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ecc2:	2304      	movs	r3, #4
 800ecc4:	e0b1      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecca:	f003 0301 	and.w	r3, r3, #1
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d004      	beq.n	800ecdc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	2201      	movs	r2, #1
 800ecd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e0a6      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	22c5      	movs	r2, #197	; 0xc5
 800ece0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f7ff fd7f 	bl	800e7e6 <SDIO_GetCommandResponse>
 800ece8:	4603      	mov	r3, r0
 800ecea:	461a      	mov	r2, r3
 800ecec:	7afb      	ldrb	r3, [r7, #11]
 800ecee:	4293      	cmp	r3, r2
 800ecf0:	d001      	beq.n	800ecf6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	e099      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7ff fd81 	bl	800e800 <SDIO_GetResponse>
 800ecfe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ed00:	697a      	ldr	r2, [r7, #20]
 800ed02:	4b4e      	ldr	r3, [pc, #312]	; (800ee3c <SDMMC_GetCmdResp1+0x1d8>)
 800ed04:	4013      	ands	r3, r2
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d101      	bne.n	800ed0e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	e08d      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800ed0e:	697b      	ldr	r3, [r7, #20]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	da02      	bge.n	800ed1a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ed14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ed18:	e087      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ed24:	2340      	movs	r3, #64	; 0x40
 800ed26:	e080      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d001      	beq.n	800ed36 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ed32:	2380      	movs	r3, #128	; 0x80
 800ed34:	e079      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ed36:	697b      	ldr	r3, [r7, #20]
 800ed38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d002      	beq.n	800ed46 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ed40:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ed44:	e071      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d002      	beq.n	800ed56 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ed50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ed54:	e069      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d002      	beq.n	800ed66 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ed60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed64:	e061      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d002      	beq.n	800ed76 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ed70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ed74:	e059      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ed76:	697b      	ldr	r3, [r7, #20]
 800ed78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d002      	beq.n	800ed86 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ed80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed84:	e051      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d002      	beq.n	800ed96 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ed90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed94:	e049      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ed96:	697b      	ldr	r3, [r7, #20]
 800ed98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d002      	beq.n	800eda6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800eda0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800eda4:	e041      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800eda6:	697b      	ldr	r3, [r7, #20]
 800eda8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800edac:	2b00      	cmp	r3, #0
 800edae:	d002      	beq.n	800edb6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800edb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800edb4:	e039      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800edb6:	697b      	ldr	r3, [r7, #20]
 800edb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d002      	beq.n	800edc6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800edc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800edc4:	e031      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d002      	beq.n	800edd6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800edd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800edd4:	e029      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d002      	beq.n	800ede6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ede0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ede4:	e021      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800edec:	2b00      	cmp	r3, #0
 800edee:	d002      	beq.n	800edf6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800edf0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800edf4:	e019      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d002      	beq.n	800ee06 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ee00:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ee04:	e011      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800ee06:	697b      	ldr	r3, [r7, #20]
 800ee08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d002      	beq.n	800ee16 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800ee10:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800ee14:	e009      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800ee16:	697b      	ldr	r3, [r7, #20]
 800ee18:	f003 0308 	and.w	r3, r3, #8
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d002      	beq.n	800ee26 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800ee20:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800ee24:	e001      	b.n	800ee2a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ee26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	3720      	adds	r7, #32
 800ee2e:	46bd      	mov	sp, r7
 800ee30:	bd80      	pop	{r7, pc}
 800ee32:	bf00      	nop
 800ee34:	2000000c 	.word	0x2000000c
 800ee38:	10624dd3 	.word	0x10624dd3
 800ee3c:	fdffe008 	.word	0xfdffe008

0800ee40 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800ee40:	b480      	push	{r7}
 800ee42:	b085      	sub	sp, #20
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ee48:	4b1f      	ldr	r3, [pc, #124]	; (800eec8 <SDMMC_GetCmdResp2+0x88>)
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4a1f      	ldr	r2, [pc, #124]	; (800eecc <SDMMC_GetCmdResp2+0x8c>)
 800ee4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ee52:	0a5b      	lsrs	r3, r3, #9
 800ee54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee58:	fb02 f303 	mul.w	r3, r2, r3
 800ee5c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ee5e:	68fb      	ldr	r3, [r7, #12]
 800ee60:	1e5a      	subs	r2, r3, #1
 800ee62:	60fa      	str	r2, [r7, #12]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d102      	bne.n	800ee6e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ee68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ee6c:	e026      	b.n	800eebc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee72:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee74:	68bb      	ldr	r3, [r7, #8]
 800ee76:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d0ef      	beq.n	800ee5e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d1ea      	bne.n	800ee5e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ee8c:	f003 0304 	and.w	r3, r3, #4
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d004      	beq.n	800ee9e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	2204      	movs	r2, #4
 800ee98:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ee9a:	2304      	movs	r3, #4
 800ee9c:	e00e      	b.n	800eebc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eea2:	f003 0301 	and.w	r3, r3, #1
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d004      	beq.n	800eeb4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2201      	movs	r2, #1
 800eeae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	e003      	b.n	800eebc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	22c5      	movs	r2, #197	; 0xc5
 800eeb8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800eeba:	2300      	movs	r3, #0
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3714      	adds	r7, #20
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr
 800eec8:	2000000c 	.word	0x2000000c
 800eecc:	10624dd3 	.word	0x10624dd3

0800eed0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800eed8:	4b1a      	ldr	r3, [pc, #104]	; (800ef44 <SDMMC_GetCmdResp3+0x74>)
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a1a      	ldr	r2, [pc, #104]	; (800ef48 <SDMMC_GetCmdResp3+0x78>)
 800eede:	fba2 2303 	umull	r2, r3, r2, r3
 800eee2:	0a5b      	lsrs	r3, r3, #9
 800eee4:	f241 3288 	movw	r2, #5000	; 0x1388
 800eee8:	fb02 f303 	mul.w	r3, r2, r3
 800eeec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	1e5a      	subs	r2, r3, #1
 800eef2:	60fa      	str	r2, [r7, #12]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d102      	bne.n	800eefe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800eef8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eefc:	e01b      	b.n	800ef36 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef02:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef04:	68bb      	ldr	r3, [r7, #8]
 800ef06:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d0ef      	beq.n	800eeee <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ef0e:	68bb      	ldr	r3, [r7, #8]
 800ef10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d1ea      	bne.n	800eeee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef1c:	f003 0304 	and.w	r3, r3, #4
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d004      	beq.n	800ef2e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2204      	movs	r2, #4
 800ef28:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ef2a:	2304      	movs	r3, #4
 800ef2c:	e003      	b.n	800ef36 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	22c5      	movs	r2, #197	; 0xc5
 800ef32:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr
 800ef42:	bf00      	nop
 800ef44:	2000000c 	.word	0x2000000c
 800ef48:	10624dd3 	.word	0x10624dd3

0800ef4c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b088      	sub	sp, #32
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	460b      	mov	r3, r1
 800ef56:	607a      	str	r2, [r7, #4]
 800ef58:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ef5a:	4b35      	ldr	r3, [pc, #212]	; (800f030 <SDMMC_GetCmdResp6+0xe4>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a35      	ldr	r2, [pc, #212]	; (800f034 <SDMMC_GetCmdResp6+0xe8>)
 800ef60:	fba2 2303 	umull	r2, r3, r2, r3
 800ef64:	0a5b      	lsrs	r3, r3, #9
 800ef66:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef6a:	fb02 f303 	mul.w	r3, r2, r3
 800ef6e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ef70:	69fb      	ldr	r3, [r7, #28]
 800ef72:	1e5a      	subs	r2, r3, #1
 800ef74:	61fa      	str	r2, [r7, #28]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d102      	bne.n	800ef80 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ef7a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef7e:	e052      	b.n	800f026 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef84:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d0ef      	beq.n	800ef70 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d1ea      	bne.n	800ef70 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef9e:	f003 0304 	and.w	r3, r3, #4
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d004      	beq.n	800efb0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	2204      	movs	r2, #4
 800efaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800efac:	2304      	movs	r3, #4
 800efae:	e03a      	b.n	800f026 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efb4:	f003 0301 	and.w	r3, r3, #1
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d004      	beq.n	800efc6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	2201      	movs	r2, #1
 800efc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800efc2:	2301      	movs	r3, #1
 800efc4:	e02f      	b.n	800f026 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800efc6:	68f8      	ldr	r0, [r7, #12]
 800efc8:	f7ff fc0d 	bl	800e7e6 <SDIO_GetCommandResponse>
 800efcc:	4603      	mov	r3, r0
 800efce:	461a      	mov	r2, r3
 800efd0:	7afb      	ldrb	r3, [r7, #11]
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d001      	beq.n	800efda <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800efd6:	2301      	movs	r3, #1
 800efd8:	e025      	b.n	800f026 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800efda:	68fb      	ldr	r3, [r7, #12]
 800efdc:	22c5      	movs	r2, #197	; 0xc5
 800efde:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800efe0:	2100      	movs	r1, #0
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f7ff fc0c 	bl	800e800 <SDIO_GetResponse>
 800efe8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800efea:	697b      	ldr	r3, [r7, #20]
 800efec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d106      	bne.n	800f002 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	0c1b      	lsrs	r3, r3, #16
 800eff8:	b29a      	uxth	r2, r3
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800effe:	2300      	movs	r3, #0
 800f000:	e011      	b.n	800f026 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f002:	697b      	ldr	r3, [r7, #20]
 800f004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d002      	beq.n	800f012 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f00c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f010:	e009      	b.n	800f026 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d002      	beq.n	800f022 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f01c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f020:	e001      	b.n	800f026 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f022:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f026:	4618      	mov	r0, r3
 800f028:	3720      	adds	r7, #32
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	2000000c 	.word	0x2000000c
 800f034:	10624dd3 	.word	0x10624dd3

0800f038 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f038:	b480      	push	{r7}
 800f03a:	b085      	sub	sp, #20
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f040:	4b22      	ldr	r3, [pc, #136]	; (800f0cc <SDMMC_GetCmdResp7+0x94>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4a22      	ldr	r2, [pc, #136]	; (800f0d0 <SDMMC_GetCmdResp7+0x98>)
 800f046:	fba2 2303 	umull	r2, r3, r2, r3
 800f04a:	0a5b      	lsrs	r3, r3, #9
 800f04c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f050:	fb02 f303 	mul.w	r3, r2, r3
 800f054:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	1e5a      	subs	r2, r3, #1
 800f05a:	60fa      	str	r2, [r7, #12]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d102      	bne.n	800f066 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f060:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f064:	e02c      	b.n	800f0c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f06a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f06c:	68bb      	ldr	r3, [r7, #8]
 800f06e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800f072:	2b00      	cmp	r3, #0
 800f074:	d0ef      	beq.n	800f056 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d1ea      	bne.n	800f056 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f084:	f003 0304 	and.w	r3, r3, #4
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d004      	beq.n	800f096 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2204      	movs	r2, #4
 800f090:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f092:	2304      	movs	r3, #4
 800f094:	e014      	b.n	800f0c0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f09a:	f003 0301 	and.w	r3, r3, #1
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d004      	beq.n	800f0ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f0a8:	2301      	movs	r3, #1
 800f0aa:	e009      	b.n	800f0c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d002      	beq.n	800f0be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2240      	movs	r2, #64	; 0x40
 800f0bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f0be:	2300      	movs	r3, #0
  
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	2000000c 	.word	0x2000000c
 800f0d0:	10624dd3 	.word	0x10624dd3

0800f0d4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b085      	sub	sp, #20
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f0dc:	4b11      	ldr	r3, [pc, #68]	; (800f124 <SDMMC_GetCmdError+0x50>)
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a11      	ldr	r2, [pc, #68]	; (800f128 <SDMMC_GetCmdError+0x54>)
 800f0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f0e6:	0a5b      	lsrs	r3, r3, #9
 800f0e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0ec:	fb02 f303 	mul.w	r3, r2, r3
 800f0f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	1e5a      	subs	r2, r3, #1
 800f0f6:	60fa      	str	r2, [r7, #12]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d102      	bne.n	800f102 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f0fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f100:	e009      	b.n	800f116 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d0f1      	beq.n	800f0f2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	22c5      	movs	r2, #197	; 0xc5
 800f112:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f114:	2300      	movs	r3, #0
}
 800f116:	4618      	mov	r0, r3
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	2000000c 	.word	0x2000000c
 800f128:	10624dd3 	.word	0x10624dd3

0800f12c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f130:	4904      	ldr	r1, [pc, #16]	; (800f144 <MX_FATFS_Init+0x18>)
 800f132:	4805      	ldr	r0, [pc, #20]	; (800f148 <MX_FATFS_Init+0x1c>)
 800f134:	f002 fd44 	bl	8011bc0 <FATFS_LinkDriver>
 800f138:	4603      	mov	r3, r0
 800f13a:	461a      	mov	r2, r3
 800f13c:	4b03      	ldr	r3, [pc, #12]	; (800f14c <MX_FATFS_Init+0x20>)
 800f13e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f140:	bf00      	nop
 800f142:	bd80      	pop	{r7, pc}
 800f144:	2000114c 	.word	0x2000114c
 800f148:	0801b590 	.word	0x0801b590
 800f14c:	20001148 	.word	0x20001148

0800f150 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800f150:	b480      	push	{r7}
 800f152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800f154:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800f156:	4618      	mov	r0, r3
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b082      	sub	sp, #8
 800f164:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f166:	2300      	movs	r3, #0
 800f168:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f16a:	f000 f888 	bl	800f27e <BSP_SD_IsDetected>
 800f16e:	4603      	mov	r3, r0
 800f170:	2b01      	cmp	r3, #1
 800f172:	d001      	beq.n	800f178 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	e005      	b.n	800f184 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f178:	4804      	ldr	r0, [pc, #16]	; (800f18c <BSP_SD_Init+0x2c>)
 800f17a:	f7fb ff2d 	bl	800afd8 <HAL_SD_Init>
 800f17e:	4603      	mov	r3, r0
 800f180:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800f182:	79fb      	ldrb	r3, [r7, #7]
}
 800f184:	4618      	mov	r0, r3
 800f186:	3708      	adds	r7, #8
 800f188:	46bd      	mov	sp, r7
 800f18a:	bd80      	pop	{r7, pc}
 800f18c:	200003f4 	.word	0x200003f4

0800f190 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f19c:	2300      	movs	r3, #0
 800f19e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	68f9      	ldr	r1, [r7, #12]
 800f1a6:	4806      	ldr	r0, [pc, #24]	; (800f1c0 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f1a8:	f7fb ffc6 	bl	800b138 <HAL_SD_ReadBlocks_DMA>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d001      	beq.n	800f1b6 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f1b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	3718      	adds	r7, #24
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	bd80      	pop	{r7, pc}
 800f1c0:	200003f4 	.word	0x200003f4

0800f1c4 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b086      	sub	sp, #24
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	60f8      	str	r0, [r7, #12]
 800f1cc:	60b9      	str	r1, [r7, #8]
 800f1ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	68ba      	ldr	r2, [r7, #8]
 800f1d8:	68f9      	ldr	r1, [r7, #12]
 800f1da:	4806      	ldr	r0, [pc, #24]	; (800f1f4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f1dc:	f7fc f88e 	bl	800b2fc <HAL_SD_WriteBlocks_DMA>
 800f1e0:	4603      	mov	r3, r0
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d001      	beq.n	800f1ea <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f1e6:	2301      	movs	r3, #1
 800f1e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f1ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	3718      	adds	r7, #24
 800f1f0:	46bd      	mov	sp, r7
 800f1f2:	bd80      	pop	{r7, pc}
 800f1f4:	200003f4 	.word	0x200003f4

0800f1f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f1fc:	4805      	ldr	r0, [pc, #20]	; (800f214 <BSP_SD_GetCardState+0x1c>)
 800f1fe:	f7fc fcc3 	bl	800bb88 <HAL_SD_GetCardState>
 800f202:	4603      	mov	r3, r0
 800f204:	2b04      	cmp	r3, #4
 800f206:	bf14      	ite	ne
 800f208:	2301      	movne	r3, #1
 800f20a:	2300      	moveq	r3, #0
 800f20c:	b2db      	uxtb	r3, r3
}
 800f20e:	4618      	mov	r0, r3
 800f210:	bd80      	pop	{r7, pc}
 800f212:	bf00      	nop
 800f214:	200003f4 	.word	0x200003f4

0800f218 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b082      	sub	sp, #8
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f220:	6879      	ldr	r1, [r7, #4]
 800f222:	4803      	ldr	r0, [pc, #12]	; (800f230 <BSP_SD_GetCardInfo+0x18>)
 800f224:	f7fc fc84 	bl	800bb30 <HAL_SD_GetCardInfo>
}
 800f228:	bf00      	nop
 800f22a:	3708      	adds	r7, #8
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}
 800f230:	200003f4 	.word	0x200003f4

0800f234 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b082      	sub	sp, #8
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800f23c:	f000 f818 	bl	800f270 <BSP_SD_AbortCallback>
}
 800f240:	bf00      	nop
 800f242:	3708      	adds	r7, #8
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f248:	b580      	push	{r7, lr}
 800f24a:	b082      	sub	sp, #8
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f250:	f000 f998 	bl	800f584 <BSP_SD_WriteCpltCallback>
}
 800f254:	bf00      	nop
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f25c:	b580      	push	{r7, lr}
 800f25e:	b082      	sub	sp, #8
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f264:	f000 f9a0 	bl	800f5a8 <BSP_SD_ReadCpltCallback>
}
 800f268:	bf00      	nop
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800f270:	b480      	push	{r7}
 800f272:	af00      	add	r7, sp, #0

}
 800f274:	bf00      	nop
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr

0800f27e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f27e:	b480      	push	{r7}
 800f280:	b083      	sub	sp, #12
 800f282:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f284:	2301      	movs	r3, #1
 800f286:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800f288:	79fb      	ldrb	r3, [r7, #7]
 800f28a:	b2db      	uxtb	r3, r3
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	370c      	adds	r7, #12
 800f290:	46bd      	mov	sp, r7
 800f292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f296:	4770      	bx	lr

0800f298 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800f2a0:	f002 fd94 	bl	8011dcc <osKernelGetTickCount>
 800f2a4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800f2a6:	e006      	b.n	800f2b6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f2a8:	f7ff ffa6 	bl	800f1f8 <BSP_SD_GetCardState>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d101      	bne.n	800f2b6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	e009      	b.n	800f2ca <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800f2b6:	f002 fd89 	bl	8011dcc <osKernelGetTickCount>
 800f2ba:	4602      	mov	r2, r0
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	1ad3      	subs	r3, r2, r3
 800f2c0:	687a      	ldr	r2, [r7, #4]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d8f0      	bhi.n	800f2a8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f2c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f2ca:	4618      	mov	r0, r3
 800f2cc:	3710      	adds	r7, #16
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	bd80      	pop	{r7, pc}
	...

0800f2d4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	4603      	mov	r3, r0
 800f2dc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f2de:	4b0b      	ldr	r3, [pc, #44]	; (800f30c <SD_CheckStatus+0x38>)
 800f2e0:	2201      	movs	r2, #1
 800f2e2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f2e4:	f7ff ff88 	bl	800f1f8 <BSP_SD_GetCardState>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d107      	bne.n	800f2fe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f2ee:	4b07      	ldr	r3, [pc, #28]	; (800f30c <SD_CheckStatus+0x38>)
 800f2f0:	781b      	ldrb	r3, [r3, #0]
 800f2f2:	b2db      	uxtb	r3, r3
 800f2f4:	f023 0301 	bic.w	r3, r3, #1
 800f2f8:	b2da      	uxtb	r2, r3
 800f2fa:	4b04      	ldr	r3, [pc, #16]	; (800f30c <SD_CheckStatus+0x38>)
 800f2fc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f2fe:	4b03      	ldr	r3, [pc, #12]	; (800f30c <SD_CheckStatus+0x38>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	b2db      	uxtb	r3, r3
}
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}
 800f30c:	2000001d 	.word	0x2000001d

0800f310 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f310:	b580      	push	{r7, lr}
 800f312:	b082      	sub	sp, #8
 800f314:	af00      	add	r7, sp, #0
 800f316:	4603      	mov	r3, r0
 800f318:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800f31a:	4b1c      	ldr	r3, [pc, #112]	; (800f38c <SD_initialize+0x7c>)
 800f31c:	2201      	movs	r2, #1
 800f31e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800f320:	f002 fd0c 	bl	8011d3c <osKernelGetState>
 800f324:	4603      	mov	r3, r0
 800f326:	2b02      	cmp	r3, #2
 800f328:	d129      	bne.n	800f37e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800f32a:	f7ff ff19 	bl	800f160 <BSP_SD_Init>
 800f32e:	4603      	mov	r3, r0
 800f330:	2b00      	cmp	r3, #0
 800f332:	d107      	bne.n	800f344 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800f334:	79fb      	ldrb	r3, [r7, #7]
 800f336:	4618      	mov	r0, r3
 800f338:	f7ff ffcc 	bl	800f2d4 <SD_CheckStatus>
 800f33c:	4603      	mov	r3, r0
 800f33e:	461a      	mov	r2, r3
 800f340:	4b12      	ldr	r3, [pc, #72]	; (800f38c <SD_initialize+0x7c>)
 800f342:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800f344:	4b11      	ldr	r3, [pc, #68]	; (800f38c <SD_initialize+0x7c>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d017      	beq.n	800f37e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800f34e:	4b10      	ldr	r3, [pc, #64]	; (800f390 <SD_initialize+0x80>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d107      	bne.n	800f366 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800f356:	2200      	movs	r2, #0
 800f358:	2102      	movs	r1, #2
 800f35a:	200a      	movs	r0, #10
 800f35c:	f003 f838 	bl	80123d0 <osMessageQueueNew>
 800f360:	4603      	mov	r3, r0
 800f362:	4a0b      	ldr	r2, [pc, #44]	; (800f390 <SD_initialize+0x80>)
 800f364:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800f366:	4b0a      	ldr	r3, [pc, #40]	; (800f390 <SD_initialize+0x80>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d107      	bne.n	800f37e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800f36e:	4b07      	ldr	r3, [pc, #28]	; (800f38c <SD_initialize+0x7c>)
 800f370:	781b      	ldrb	r3, [r3, #0]
 800f372:	b2db      	uxtb	r3, r3
 800f374:	f043 0301 	orr.w	r3, r3, #1
 800f378:	b2da      	uxtb	r2, r3
 800f37a:	4b04      	ldr	r3, [pc, #16]	; (800f38c <SD_initialize+0x7c>)
 800f37c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800f37e:	4b03      	ldr	r3, [pc, #12]	; (800f38c <SD_initialize+0x7c>)
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	b2db      	uxtb	r3, r3
}
 800f384:	4618      	mov	r0, r3
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	2000001d 	.word	0x2000001d
 800f390:	20001150 	.word	0x20001150

0800f394 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	4603      	mov	r3, r0
 800f39c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f7ff ff97 	bl	800f2d4 <SD_CheckStatus>
 800f3a6:	4603      	mov	r3, r0
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b088      	sub	sp, #32
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	60b9      	str	r1, [r7, #8]
 800f3b8:	607a      	str	r2, [r7, #4]
 800f3ba:	603b      	str	r3, [r7, #0]
 800f3bc:	4603      	mov	r3, r0
 800f3be:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f3c4:	f247 5030 	movw	r0, #30000	; 0x7530
 800f3c8:	f7ff ff66 	bl	800f298 <SD_CheckStatusWithTimeout>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	da01      	bge.n	800f3d6 <SD_read+0x26>
  {
    return res;
 800f3d2:	7ffb      	ldrb	r3, [r7, #31]
 800f3d4:	e02f      	b.n	800f436 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800f3d6:	683a      	ldr	r2, [r7, #0]
 800f3d8:	6879      	ldr	r1, [r7, #4]
 800f3da:	68b8      	ldr	r0, [r7, #8]
 800f3dc:	f7ff fed8 	bl	800f190 <BSP_SD_ReadBlocks_DMA>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800f3e4:	7fbb      	ldrb	r3, [r7, #30]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d124      	bne.n	800f434 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f3ea:	4b15      	ldr	r3, [pc, #84]	; (800f440 <SD_read+0x90>)
 800f3ec:	6818      	ldr	r0, [r3, #0]
 800f3ee:	f107 0112 	add.w	r1, r7, #18
 800f3f2:	f247 5330 	movw	r3, #30000	; 0x7530
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f003 f8be 	bl	8012578 <osMessageQueueGet>
 800f3fc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800f3fe:	69bb      	ldr	r3, [r7, #24]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d117      	bne.n	800f434 <SD_read+0x84>
 800f404:	8a7b      	ldrh	r3, [r7, #18]
 800f406:	2b01      	cmp	r3, #1
 800f408:	d114      	bne.n	800f434 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800f40a:	f002 fcdf 	bl	8011dcc <osKernelGetTickCount>
 800f40e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f410:	e007      	b.n	800f422 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f412:	f7ff fef1 	bl	800f1f8 <BSP_SD_GetCardState>
 800f416:	4603      	mov	r3, r0
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d102      	bne.n	800f422 <SD_read+0x72>
              {
                res = RES_OK;
 800f41c:	2300      	movs	r3, #0
 800f41e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800f420:	e008      	b.n	800f434 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800f422:	f002 fcd3 	bl	8011dcc <osKernelGetTickCount>
 800f426:	4602      	mov	r2, r0
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	1ad3      	subs	r3, r2, r3
 800f42c:	f247 522f 	movw	r2, #29999	; 0x752f
 800f430:	4293      	cmp	r3, r2
 800f432:	d9ee      	bls.n	800f412 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800f434:	7ffb      	ldrb	r3, [r7, #31]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3720      	adds	r7, #32
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	20001150 	.word	0x20001150

0800f444 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b088      	sub	sp, #32
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60b9      	str	r1, [r7, #8]
 800f44c:	607a      	str	r2, [r7, #4]
 800f44e:	603b      	str	r3, [r7, #0]
 800f450:	4603      	mov	r3, r0
 800f452:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f454:	2301      	movs	r3, #1
 800f456:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f458:	f247 5030 	movw	r0, #30000	; 0x7530
 800f45c:	f7ff ff1c 	bl	800f298 <SD_CheckStatusWithTimeout>
 800f460:	4603      	mov	r3, r0
 800f462:	2b00      	cmp	r3, #0
 800f464:	da01      	bge.n	800f46a <SD_write+0x26>
  {
    return res;
 800f466:	7ffb      	ldrb	r3, [r7, #31]
 800f468:	e02d      	b.n	800f4c6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f46a:	683a      	ldr	r2, [r7, #0]
 800f46c:	6879      	ldr	r1, [r7, #4]
 800f46e:	68b8      	ldr	r0, [r7, #8]
 800f470:	f7ff fea8 	bl	800f1c4 <BSP_SD_WriteBlocks_DMA>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d124      	bne.n	800f4c4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800f47a:	4b15      	ldr	r3, [pc, #84]	; (800f4d0 <SD_write+0x8c>)
 800f47c:	6818      	ldr	r0, [r3, #0]
 800f47e:	f107 0112 	add.w	r1, r7, #18
 800f482:	f247 5330 	movw	r3, #30000	; 0x7530
 800f486:	2200      	movs	r2, #0
 800f488:	f003 f876 	bl	8012578 <osMessageQueueGet>
 800f48c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800f48e:	69bb      	ldr	r3, [r7, #24]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d117      	bne.n	800f4c4 <SD_write+0x80>
 800f494:	8a7b      	ldrh	r3, [r7, #18]
 800f496:	2b02      	cmp	r3, #2
 800f498:	d114      	bne.n	800f4c4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800f49a:	f002 fc97 	bl	8011dcc <osKernelGetTickCount>
 800f49e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f4a0:	e007      	b.n	800f4b2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f4a2:	f7ff fea9 	bl	800f1f8 <BSP_SD_GetCardState>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d102      	bne.n	800f4b2 <SD_write+0x6e>
          {
            res = RES_OK;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	77fb      	strb	r3, [r7, #31]
            break;
 800f4b0:	e008      	b.n	800f4c4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800f4b2:	f002 fc8b 	bl	8011dcc <osKernelGetTickCount>
 800f4b6:	4602      	mov	r2, r0
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	1ad3      	subs	r3, r2, r3
 800f4bc:	f247 522f 	movw	r2, #29999	; 0x752f
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d9ee      	bls.n	800f4a2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800f4c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	3720      	adds	r7, #32
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	bd80      	pop	{r7, pc}
 800f4ce:	bf00      	nop
 800f4d0:	20001150 	.word	0x20001150

0800f4d4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b08c      	sub	sp, #48	; 0x30
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	4603      	mov	r3, r0
 800f4dc:	603a      	str	r2, [r7, #0]
 800f4de:	71fb      	strb	r3, [r7, #7]
 800f4e0:	460b      	mov	r3, r1
 800f4e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f4ea:	4b25      	ldr	r3, [pc, #148]	; (800f580 <SD_ioctl+0xac>)
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <SD_ioctl+0x28>
 800f4f8:	2303      	movs	r3, #3
 800f4fa:	e03c      	b.n	800f576 <SD_ioctl+0xa2>

  switch (cmd)
 800f4fc:	79bb      	ldrb	r3, [r7, #6]
 800f4fe:	2b03      	cmp	r3, #3
 800f500:	d834      	bhi.n	800f56c <SD_ioctl+0x98>
 800f502:	a201      	add	r2, pc, #4	; (adr r2, 800f508 <SD_ioctl+0x34>)
 800f504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f508:	0800f519 	.word	0x0800f519
 800f50c:	0800f521 	.word	0x0800f521
 800f510:	0800f539 	.word	0x0800f539
 800f514:	0800f553 	.word	0x0800f553
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800f518:	2300      	movs	r3, #0
 800f51a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f51e:	e028      	b.n	800f572 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800f520:	f107 030c 	add.w	r3, r7, #12
 800f524:	4618      	mov	r0, r3
 800f526:	f7ff fe77 	bl	800f218 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800f52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f52c:	683b      	ldr	r3, [r7, #0]
 800f52e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f530:	2300      	movs	r3, #0
 800f532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f536:	e01c      	b.n	800f572 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f538:	f107 030c 	add.w	r3, r7, #12
 800f53c:	4618      	mov	r0, r3
 800f53e:	f7ff fe6b 	bl	800f218 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800f542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f544:	b29a      	uxth	r2, r3
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800f54a:	2300      	movs	r3, #0
 800f54c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f550:	e00f      	b.n	800f572 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800f552:	f107 030c 	add.w	r3, r7, #12
 800f556:	4618      	mov	r0, r3
 800f558:	f7ff fe5e 	bl	800f218 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	0a5a      	lsrs	r2, r3, #9
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800f564:	2300      	movs	r3, #0
 800f566:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800f56a:	e002      	b.n	800f572 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800f56c:	2304      	movs	r3, #4
 800f56e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800f572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f576:	4618      	mov	r0, r3
 800f578:	3730      	adds	r7, #48	; 0x30
 800f57a:	46bd      	mov	sp, r7
 800f57c:	bd80      	pop	{r7, pc}
 800f57e:	bf00      	nop
 800f580:	2000001d 	.word	0x2000001d

0800f584 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800f58a:	2302      	movs	r3, #2
 800f58c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800f58e:	4b05      	ldr	r3, [pc, #20]	; (800f5a4 <BSP_SD_WriteCpltCallback+0x20>)
 800f590:	6818      	ldr	r0, [r3, #0]
 800f592:	1db9      	adds	r1, r7, #6
 800f594:	2300      	movs	r3, #0
 800f596:	2200      	movs	r2, #0
 800f598:	f002 ff8e 	bl	80124b8 <osMessageQueuePut>
#endif
}
 800f59c:	bf00      	nop
 800f59e:	3708      	adds	r7, #8
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	bd80      	pop	{r7, pc}
 800f5a4:	20001150 	.word	0x20001150

0800f5a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b082      	sub	sp, #8
 800f5ac:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800f5b2:	4b05      	ldr	r3, [pc, #20]	; (800f5c8 <BSP_SD_ReadCpltCallback+0x20>)
 800f5b4:	6818      	ldr	r0, [r3, #0]
 800f5b6:	1db9      	adds	r1, r7, #6
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	f002 ff7c 	bl	80124b8 <osMessageQueuePut>
#endif
}
 800f5c0:	bf00      	nop
 800f5c2:	3708      	adds	r7, #8
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}
 800f5c8:	20001150 	.word	0x20001150

0800f5cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b084      	sub	sp, #16
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	4603      	mov	r3, r0
 800f5d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f5d6:	79fb      	ldrb	r3, [r7, #7]
 800f5d8:	4a08      	ldr	r2, [pc, #32]	; (800f5fc <disk_status+0x30>)
 800f5da:	009b      	lsls	r3, r3, #2
 800f5dc:	4413      	add	r3, r2
 800f5de:	685b      	ldr	r3, [r3, #4]
 800f5e0:	685b      	ldr	r3, [r3, #4]
 800f5e2:	79fa      	ldrb	r2, [r7, #7]
 800f5e4:	4905      	ldr	r1, [pc, #20]	; (800f5fc <disk_status+0x30>)
 800f5e6:	440a      	add	r2, r1
 800f5e8:	7a12      	ldrb	r2, [r2, #8]
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	4798      	blx	r3
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f5f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5f4:	4618      	mov	r0, r3
 800f5f6:	3710      	adds	r7, #16
 800f5f8:	46bd      	mov	sp, r7
 800f5fa:	bd80      	pop	{r7, pc}
 800f5fc:	2000117c 	.word	0x2000117c

0800f600 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	4603      	mov	r3, r0
 800f608:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f60a:	2300      	movs	r3, #0
 800f60c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f60e:	79fb      	ldrb	r3, [r7, #7]
 800f610:	4a0e      	ldr	r2, [pc, #56]	; (800f64c <disk_initialize+0x4c>)
 800f612:	5cd3      	ldrb	r3, [r2, r3]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d114      	bne.n	800f642 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	4a0c      	ldr	r2, [pc, #48]	; (800f64c <disk_initialize+0x4c>)
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	4413      	add	r3, r2
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	79fa      	ldrb	r2, [r7, #7]
 800f626:	4909      	ldr	r1, [pc, #36]	; (800f64c <disk_initialize+0x4c>)
 800f628:	440a      	add	r2, r1
 800f62a:	7a12      	ldrb	r2, [r2, #8]
 800f62c:	4610      	mov	r0, r2
 800f62e:	4798      	blx	r3
 800f630:	4603      	mov	r3, r0
 800f632:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800f634:	7bfb      	ldrb	r3, [r7, #15]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d103      	bne.n	800f642 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	4a03      	ldr	r2, [pc, #12]	; (800f64c <disk_initialize+0x4c>)
 800f63e:	2101      	movs	r1, #1
 800f640:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800f642:	7bfb      	ldrb	r3, [r7, #15]
}
 800f644:	4618      	mov	r0, r3
 800f646:	3710      	adds	r7, #16
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}
 800f64c:	2000117c 	.word	0x2000117c

0800f650 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f650:	b590      	push	{r4, r7, lr}
 800f652:	b087      	sub	sp, #28
 800f654:	af00      	add	r7, sp, #0
 800f656:	60b9      	str	r1, [r7, #8]
 800f658:	607a      	str	r2, [r7, #4]
 800f65a:	603b      	str	r3, [r7, #0]
 800f65c:	4603      	mov	r3, r0
 800f65e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f660:	7bfb      	ldrb	r3, [r7, #15]
 800f662:	4a0a      	ldr	r2, [pc, #40]	; (800f68c <disk_read+0x3c>)
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	4413      	add	r3, r2
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	689c      	ldr	r4, [r3, #8]
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
 800f66e:	4a07      	ldr	r2, [pc, #28]	; (800f68c <disk_read+0x3c>)
 800f670:	4413      	add	r3, r2
 800f672:	7a18      	ldrb	r0, [r3, #8]
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	687a      	ldr	r2, [r7, #4]
 800f678:	68b9      	ldr	r1, [r7, #8]
 800f67a:	47a0      	blx	r4
 800f67c:	4603      	mov	r3, r0
 800f67e:	75fb      	strb	r3, [r7, #23]
  return res;
 800f680:	7dfb      	ldrb	r3, [r7, #23]
}
 800f682:	4618      	mov	r0, r3
 800f684:	371c      	adds	r7, #28
 800f686:	46bd      	mov	sp, r7
 800f688:	bd90      	pop	{r4, r7, pc}
 800f68a:	bf00      	nop
 800f68c:	2000117c 	.word	0x2000117c

0800f690 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f690:	b590      	push	{r4, r7, lr}
 800f692:	b087      	sub	sp, #28
 800f694:	af00      	add	r7, sp, #0
 800f696:	60b9      	str	r1, [r7, #8]
 800f698:	607a      	str	r2, [r7, #4]
 800f69a:	603b      	str	r3, [r7, #0]
 800f69c:	4603      	mov	r3, r0
 800f69e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f6a0:	7bfb      	ldrb	r3, [r7, #15]
 800f6a2:	4a0a      	ldr	r2, [pc, #40]	; (800f6cc <disk_write+0x3c>)
 800f6a4:	009b      	lsls	r3, r3, #2
 800f6a6:	4413      	add	r3, r2
 800f6a8:	685b      	ldr	r3, [r3, #4]
 800f6aa:	68dc      	ldr	r4, [r3, #12]
 800f6ac:	7bfb      	ldrb	r3, [r7, #15]
 800f6ae:	4a07      	ldr	r2, [pc, #28]	; (800f6cc <disk_write+0x3c>)
 800f6b0:	4413      	add	r3, r2
 800f6b2:	7a18      	ldrb	r0, [r3, #8]
 800f6b4:	683b      	ldr	r3, [r7, #0]
 800f6b6:	687a      	ldr	r2, [r7, #4]
 800f6b8:	68b9      	ldr	r1, [r7, #8]
 800f6ba:	47a0      	blx	r4
 800f6bc:	4603      	mov	r3, r0
 800f6be:	75fb      	strb	r3, [r7, #23]
  return res;
 800f6c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	371c      	adds	r7, #28
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd90      	pop	{r4, r7, pc}
 800f6ca:	bf00      	nop
 800f6cc:	2000117c 	.word	0x2000117c

0800f6d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b084      	sub	sp, #16
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	603a      	str	r2, [r7, #0]
 800f6da:	71fb      	strb	r3, [r7, #7]
 800f6dc:	460b      	mov	r3, r1
 800f6de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f6e0:	79fb      	ldrb	r3, [r7, #7]
 800f6e2:	4a09      	ldr	r2, [pc, #36]	; (800f708 <disk_ioctl+0x38>)
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4413      	add	r3, r2
 800f6e8:	685b      	ldr	r3, [r3, #4]
 800f6ea:	691b      	ldr	r3, [r3, #16]
 800f6ec:	79fa      	ldrb	r2, [r7, #7]
 800f6ee:	4906      	ldr	r1, [pc, #24]	; (800f708 <disk_ioctl+0x38>)
 800f6f0:	440a      	add	r2, r1
 800f6f2:	7a10      	ldrb	r0, [r2, #8]
 800f6f4:	79b9      	ldrb	r1, [r7, #6]
 800f6f6:	683a      	ldr	r2, [r7, #0]
 800f6f8:	4798      	blx	r3
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800f6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f700:	4618      	mov	r0, r3
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}
 800f708:	2000117c 	.word	0x2000117c

0800f70c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f70c:	b480      	push	{r7}
 800f70e:	b085      	sub	sp, #20
 800f710:	af00      	add	r7, sp, #0
 800f712:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	3301      	adds	r3, #1
 800f718:	781b      	ldrb	r3, [r3, #0]
 800f71a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f71c:	89fb      	ldrh	r3, [r7, #14]
 800f71e:	021b      	lsls	r3, r3, #8
 800f720:	b21a      	sxth	r2, r3
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	781b      	ldrb	r3, [r3, #0]
 800f726:	b21b      	sxth	r3, r3
 800f728:	4313      	orrs	r3, r2
 800f72a:	b21b      	sxth	r3, r3
 800f72c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f72e:	89fb      	ldrh	r3, [r7, #14]
}
 800f730:	4618      	mov	r0, r3
 800f732:	3714      	adds	r7, #20
 800f734:	46bd      	mov	sp, r7
 800f736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f73a:	4770      	bx	lr

0800f73c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f73c:	b480      	push	{r7}
 800f73e:	b085      	sub	sp, #20
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	3303      	adds	r3, #3
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f74c:	68fb      	ldr	r3, [r7, #12]
 800f74e:	021b      	lsls	r3, r3, #8
 800f750:	687a      	ldr	r2, [r7, #4]
 800f752:	3202      	adds	r2, #2
 800f754:	7812      	ldrb	r2, [r2, #0]
 800f756:	4313      	orrs	r3, r2
 800f758:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	021b      	lsls	r3, r3, #8
 800f75e:	687a      	ldr	r2, [r7, #4]
 800f760:	3201      	adds	r2, #1
 800f762:	7812      	ldrb	r2, [r2, #0]
 800f764:	4313      	orrs	r3, r2
 800f766:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	021b      	lsls	r3, r3, #8
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	7812      	ldrb	r2, [r2, #0]
 800f770:	4313      	orrs	r3, r2
 800f772:	60fb      	str	r3, [r7, #12]
	return rv;
 800f774:	68fb      	ldr	r3, [r7, #12]
}
 800f776:	4618      	mov	r0, r3
 800f778:	3714      	adds	r7, #20
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr

0800f782 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f782:	b480      	push	{r7}
 800f784:	b083      	sub	sp, #12
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
 800f78a:	460b      	mov	r3, r1
 800f78c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	1c5a      	adds	r2, r3, #1
 800f792:	607a      	str	r2, [r7, #4]
 800f794:	887a      	ldrh	r2, [r7, #2]
 800f796:	b2d2      	uxtb	r2, r2
 800f798:	701a      	strb	r2, [r3, #0]
 800f79a:	887b      	ldrh	r3, [r7, #2]
 800f79c:	0a1b      	lsrs	r3, r3, #8
 800f79e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	1c5a      	adds	r2, r3, #1
 800f7a4:	607a      	str	r2, [r7, #4]
 800f7a6:	887a      	ldrh	r2, [r7, #2]
 800f7a8:	b2d2      	uxtb	r2, r2
 800f7aa:	701a      	strb	r2, [r3, #0]
}
 800f7ac:	bf00      	nop
 800f7ae:	370c      	adds	r7, #12
 800f7b0:	46bd      	mov	sp, r7
 800f7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b6:	4770      	bx	lr

0800f7b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f7b8:	b480      	push	{r7}
 800f7ba:	b083      	sub	sp, #12
 800f7bc:	af00      	add	r7, sp, #0
 800f7be:	6078      	str	r0, [r7, #4]
 800f7c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	1c5a      	adds	r2, r3, #1
 800f7c6:	607a      	str	r2, [r7, #4]
 800f7c8:	683a      	ldr	r2, [r7, #0]
 800f7ca:	b2d2      	uxtb	r2, r2
 800f7cc:	701a      	strb	r2, [r3, #0]
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	0a1b      	lsrs	r3, r3, #8
 800f7d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	1c5a      	adds	r2, r3, #1
 800f7d8:	607a      	str	r2, [r7, #4]
 800f7da:	683a      	ldr	r2, [r7, #0]
 800f7dc:	b2d2      	uxtb	r2, r2
 800f7de:	701a      	strb	r2, [r3, #0]
 800f7e0:	683b      	ldr	r3, [r7, #0]
 800f7e2:	0a1b      	lsrs	r3, r3, #8
 800f7e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	1c5a      	adds	r2, r3, #1
 800f7ea:	607a      	str	r2, [r7, #4]
 800f7ec:	683a      	ldr	r2, [r7, #0]
 800f7ee:	b2d2      	uxtb	r2, r2
 800f7f0:	701a      	strb	r2, [r3, #0]
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	0a1b      	lsrs	r3, r3, #8
 800f7f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	1c5a      	adds	r2, r3, #1
 800f7fc:	607a      	str	r2, [r7, #4]
 800f7fe:	683a      	ldr	r2, [r7, #0]
 800f800:	b2d2      	uxtb	r2, r2
 800f802:	701a      	strb	r2, [r3, #0]
}
 800f804:	bf00      	nop
 800f806:	370c      	adds	r7, #12
 800f808:	46bd      	mov	sp, r7
 800f80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80e:	4770      	bx	lr

0800f810 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f810:	b480      	push	{r7}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	60f8      	str	r0, [r7, #12]
 800f818:	60b9      	str	r1, [r7, #8]
 800f81a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f820:	68bb      	ldr	r3, [r7, #8]
 800f822:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	2b00      	cmp	r3, #0
 800f828:	d00d      	beq.n	800f846 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f82a:	693a      	ldr	r2, [r7, #16]
 800f82c:	1c53      	adds	r3, r2, #1
 800f82e:	613b      	str	r3, [r7, #16]
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	1c59      	adds	r1, r3, #1
 800f834:	6179      	str	r1, [r7, #20]
 800f836:	7812      	ldrb	r2, [r2, #0]
 800f838:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	3b01      	subs	r3, #1
 800f83e:	607b      	str	r3, [r7, #4]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1f1      	bne.n	800f82a <mem_cpy+0x1a>
	}
}
 800f846:	bf00      	nop
 800f848:	371c      	adds	r7, #28
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr

0800f852 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f852:	b480      	push	{r7}
 800f854:	b087      	sub	sp, #28
 800f856:	af00      	add	r7, sp, #0
 800f858:	60f8      	str	r0, [r7, #12]
 800f85a:	60b9      	str	r1, [r7, #8]
 800f85c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f862:	697b      	ldr	r3, [r7, #20]
 800f864:	1c5a      	adds	r2, r3, #1
 800f866:	617a      	str	r2, [r7, #20]
 800f868:	68ba      	ldr	r2, [r7, #8]
 800f86a:	b2d2      	uxtb	r2, r2
 800f86c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	3b01      	subs	r3, #1
 800f872:	607b      	str	r3, [r7, #4]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d1f3      	bne.n	800f862 <mem_set+0x10>
}
 800f87a:	bf00      	nop
 800f87c:	bf00      	nop
 800f87e:	371c      	adds	r7, #28
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr

0800f888 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f888:	b480      	push	{r7}
 800f88a:	b089      	sub	sp, #36	; 0x24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	60b9      	str	r1, [r7, #8]
 800f892:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	61fb      	str	r3, [r7, #28]
 800f898:	68bb      	ldr	r3, [r7, #8]
 800f89a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	1c5a      	adds	r2, r3, #1
 800f8a4:	61fa      	str	r2, [r7, #28]
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	4619      	mov	r1, r3
 800f8aa:	69bb      	ldr	r3, [r7, #24]
 800f8ac:	1c5a      	adds	r2, r3, #1
 800f8ae:	61ba      	str	r2, [r7, #24]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	1acb      	subs	r3, r1, r3
 800f8b4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	3b01      	subs	r3, #1
 800f8ba:	607b      	str	r3, [r7, #4]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d002      	beq.n	800f8c8 <mem_cmp+0x40>
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d0eb      	beq.n	800f8a0 <mem_cmp+0x18>

	return r;
 800f8c8:	697b      	ldr	r3, [r7, #20]
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3724      	adds	r7, #36	; 0x24
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d4:	4770      	bx	lr

0800f8d6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f8d6:	b480      	push	{r7}
 800f8d8:	b083      	sub	sp, #12
 800f8da:	af00      	add	r7, sp, #0
 800f8dc:	6078      	str	r0, [r7, #4]
 800f8de:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f8e0:	e002      	b.n	800f8e8 <chk_chr+0x12>
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	3301      	adds	r3, #1
 800f8e6:	607b      	str	r3, [r7, #4]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d005      	beq.n	800f8fc <chk_chr+0x26>
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	461a      	mov	r2, r3
 800f8f6:	683b      	ldr	r3, [r7, #0]
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d1f2      	bne.n	800f8e2 <chk_chr+0xc>
	return *str;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	781b      	ldrb	r3, [r3, #0]
}
 800f900:	4618      	mov	r0, r3
 800f902:	370c      	adds	r7, #12
 800f904:	46bd      	mov	sp, r7
 800f906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90a:	4770      	bx	lr

0800f90c <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b082      	sub	sp, #8
 800f910:	af00      	add	r7, sp, #0
 800f912:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d009      	beq.n	800f92e <lock_fs+0x22>
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	4618      	mov	r0, r3
 800f920:	f002 f984 	bl	8011c2c <ff_req_grant>
 800f924:	4603      	mov	r3, r0
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <lock_fs+0x22>
 800f92a:	2301      	movs	r3, #1
 800f92c:	e000      	b.n	800f930 <lock_fs+0x24>
 800f92e:	2300      	movs	r3, #0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3708      	adds	r7, #8
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b082      	sub	sp, #8
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	460b      	mov	r3, r1
 800f942:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d00d      	beq.n	800f966 <unlock_fs+0x2e>
 800f94a:	78fb      	ldrb	r3, [r7, #3]
 800f94c:	2b0c      	cmp	r3, #12
 800f94e:	d00a      	beq.n	800f966 <unlock_fs+0x2e>
 800f950:	78fb      	ldrb	r3, [r7, #3]
 800f952:	2b0b      	cmp	r3, #11
 800f954:	d007      	beq.n	800f966 <unlock_fs+0x2e>
 800f956:	78fb      	ldrb	r3, [r7, #3]
 800f958:	2b0f      	cmp	r3, #15
 800f95a:	d004      	beq.n	800f966 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	68db      	ldr	r3, [r3, #12]
 800f960:	4618      	mov	r0, r3
 800f962:	f002 f978 	bl	8011c56 <ff_rel_grant>
	}
}
 800f966:	bf00      	nop
 800f968:	3708      	adds	r7, #8
 800f96a:	46bd      	mov	sp, r7
 800f96c:	bd80      	pop	{r7, pc}
	...

0800f970 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f970:	b480      	push	{r7}
 800f972:	b085      	sub	sp, #20
 800f974:	af00      	add	r7, sp, #0
 800f976:	6078      	str	r0, [r7, #4]
 800f978:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f97a:	2300      	movs	r3, #0
 800f97c:	60bb      	str	r3, [r7, #8]
 800f97e:	68bb      	ldr	r3, [r7, #8]
 800f980:	60fb      	str	r3, [r7, #12]
 800f982:	e029      	b.n	800f9d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f984:	4a27      	ldr	r2, [pc, #156]	; (800fa24 <chk_lock+0xb4>)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	011b      	lsls	r3, r3, #4
 800f98a:	4413      	add	r3, r2
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d01d      	beq.n	800f9ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f992:	4a24      	ldr	r2, [pc, #144]	; (800fa24 <chk_lock+0xb4>)
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	011b      	lsls	r3, r3, #4
 800f998:	4413      	add	r3, r2
 800f99a:	681a      	ldr	r2, [r3, #0]
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	429a      	cmp	r2, r3
 800f9a2:	d116      	bne.n	800f9d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f9a4:	4a1f      	ldr	r2, [pc, #124]	; (800fa24 <chk_lock+0xb4>)
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	011b      	lsls	r3, r3, #4
 800f9aa:	4413      	add	r3, r2
 800f9ac:	3304      	adds	r3, #4
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d10c      	bne.n	800f9d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f9b8:	4a1a      	ldr	r2, [pc, #104]	; (800fa24 <chk_lock+0xb4>)
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	011b      	lsls	r3, r3, #4
 800f9be:	4413      	add	r3, r2
 800f9c0:	3308      	adds	r3, #8
 800f9c2:	681a      	ldr	r2, [r3, #0]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f9c8:	429a      	cmp	r2, r3
 800f9ca:	d102      	bne.n	800f9d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f9cc:	e007      	b.n	800f9de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f9ce:	2301      	movs	r3, #1
 800f9d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	60fb      	str	r3, [r7, #12]
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2b01      	cmp	r3, #1
 800f9dc:	d9d2      	bls.n	800f984 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	2b02      	cmp	r3, #2
 800f9e2:	d109      	bne.n	800f9f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d102      	bne.n	800f9f0 <chk_lock+0x80>
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	2b02      	cmp	r3, #2
 800f9ee:	d101      	bne.n	800f9f4 <chk_lock+0x84>
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	e010      	b.n	800fa16 <chk_lock+0xa6>
 800f9f4:	2312      	movs	r3, #18
 800f9f6:	e00e      	b.n	800fa16 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d108      	bne.n	800fa10 <chk_lock+0xa0>
 800f9fe:	4a09      	ldr	r2, [pc, #36]	; (800fa24 <chk_lock+0xb4>)
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	011b      	lsls	r3, r3, #4
 800fa04:	4413      	add	r3, r2
 800fa06:	330c      	adds	r3, #12
 800fa08:	881b      	ldrh	r3, [r3, #0]
 800fa0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa0e:	d101      	bne.n	800fa14 <chk_lock+0xa4>
 800fa10:	2310      	movs	r3, #16
 800fa12:	e000      	b.n	800fa16 <chk_lock+0xa6>
 800fa14:	2300      	movs	r3, #0
}
 800fa16:	4618      	mov	r0, r3
 800fa18:	3714      	adds	r7, #20
 800fa1a:	46bd      	mov	sp, r7
 800fa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa20:	4770      	bx	lr
 800fa22:	bf00      	nop
 800fa24:	2000115c 	.word	0x2000115c

0800fa28 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fa28:	b480      	push	{r7}
 800fa2a:	b083      	sub	sp, #12
 800fa2c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	607b      	str	r3, [r7, #4]
 800fa32:	e002      	b.n	800fa3a <enq_lock+0x12>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	3301      	adds	r3, #1
 800fa38:	607b      	str	r3, [r7, #4]
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2b01      	cmp	r3, #1
 800fa3e:	d806      	bhi.n	800fa4e <enq_lock+0x26>
 800fa40:	4a09      	ldr	r2, [pc, #36]	; (800fa68 <enq_lock+0x40>)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	011b      	lsls	r3, r3, #4
 800fa46:	4413      	add	r3, r2
 800fa48:	681b      	ldr	r3, [r3, #0]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d1f2      	bne.n	800fa34 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2b02      	cmp	r3, #2
 800fa52:	bf14      	ite	ne
 800fa54:	2301      	movne	r3, #1
 800fa56:	2300      	moveq	r3, #0
 800fa58:	b2db      	uxtb	r3, r3
}
 800fa5a:	4618      	mov	r0, r3
 800fa5c:	370c      	adds	r7, #12
 800fa5e:	46bd      	mov	sp, r7
 800fa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa64:	4770      	bx	lr
 800fa66:	bf00      	nop
 800fa68:	2000115c 	.word	0x2000115c

0800fa6c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fa6c:	b480      	push	{r7}
 800fa6e:	b085      	sub	sp, #20
 800fa70:	af00      	add	r7, sp, #0
 800fa72:	6078      	str	r0, [r7, #4]
 800fa74:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fa76:	2300      	movs	r3, #0
 800fa78:	60fb      	str	r3, [r7, #12]
 800fa7a:	e01f      	b.n	800fabc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fa7c:	4a41      	ldr	r2, [pc, #260]	; (800fb84 <inc_lock+0x118>)
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	011b      	lsls	r3, r3, #4
 800fa82:	4413      	add	r3, r2
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	429a      	cmp	r2, r3
 800fa8c:	d113      	bne.n	800fab6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fa8e:	4a3d      	ldr	r2, [pc, #244]	; (800fb84 <inc_lock+0x118>)
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	011b      	lsls	r3, r3, #4
 800fa94:	4413      	add	r3, r2
 800fa96:	3304      	adds	r3, #4
 800fa98:	681a      	ldr	r2, [r3, #0]
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fa9e:	429a      	cmp	r2, r3
 800faa0:	d109      	bne.n	800fab6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800faa2:	4a38      	ldr	r2, [pc, #224]	; (800fb84 <inc_lock+0x118>)
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	011b      	lsls	r3, r3, #4
 800faa8:	4413      	add	r3, r2
 800faaa:	3308      	adds	r3, #8
 800faac:	681a      	ldr	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d006      	beq.n	800fac4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	3301      	adds	r3, #1
 800faba:	60fb      	str	r3, [r7, #12]
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	2b01      	cmp	r3, #1
 800fac0:	d9dc      	bls.n	800fa7c <inc_lock+0x10>
 800fac2:	e000      	b.n	800fac6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fac4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d132      	bne.n	800fb32 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800facc:	2300      	movs	r3, #0
 800face:	60fb      	str	r3, [r7, #12]
 800fad0:	e002      	b.n	800fad8 <inc_lock+0x6c>
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	3301      	adds	r3, #1
 800fad6:	60fb      	str	r3, [r7, #12]
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2b01      	cmp	r3, #1
 800fadc:	d806      	bhi.n	800faec <inc_lock+0x80>
 800fade:	4a29      	ldr	r2, [pc, #164]	; (800fb84 <inc_lock+0x118>)
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	011b      	lsls	r3, r3, #4
 800fae4:	4413      	add	r3, r2
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d1f2      	bne.n	800fad2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	2b02      	cmp	r3, #2
 800faf0:	d101      	bne.n	800faf6 <inc_lock+0x8a>
 800faf2:	2300      	movs	r3, #0
 800faf4:	e040      	b.n	800fb78 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	681a      	ldr	r2, [r3, #0]
 800fafa:	4922      	ldr	r1, [pc, #136]	; (800fb84 <inc_lock+0x118>)
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	011b      	lsls	r3, r3, #4
 800fb00:	440b      	add	r3, r1
 800fb02:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	689a      	ldr	r2, [r3, #8]
 800fb08:	491e      	ldr	r1, [pc, #120]	; (800fb84 <inc_lock+0x118>)
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	011b      	lsls	r3, r3, #4
 800fb0e:	440b      	add	r3, r1
 800fb10:	3304      	adds	r3, #4
 800fb12:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	695a      	ldr	r2, [r3, #20]
 800fb18:	491a      	ldr	r1, [pc, #104]	; (800fb84 <inc_lock+0x118>)
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	011b      	lsls	r3, r3, #4
 800fb1e:	440b      	add	r3, r1
 800fb20:	3308      	adds	r3, #8
 800fb22:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fb24:	4a17      	ldr	r2, [pc, #92]	; (800fb84 <inc_lock+0x118>)
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	011b      	lsls	r3, r3, #4
 800fb2a:	4413      	add	r3, r2
 800fb2c:	330c      	adds	r3, #12
 800fb2e:	2200      	movs	r2, #0
 800fb30:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fb32:	683b      	ldr	r3, [r7, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d009      	beq.n	800fb4c <inc_lock+0xe0>
 800fb38:	4a12      	ldr	r2, [pc, #72]	; (800fb84 <inc_lock+0x118>)
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	011b      	lsls	r3, r3, #4
 800fb3e:	4413      	add	r3, r2
 800fb40:	330c      	adds	r3, #12
 800fb42:	881b      	ldrh	r3, [r3, #0]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d001      	beq.n	800fb4c <inc_lock+0xe0>
 800fb48:	2300      	movs	r3, #0
 800fb4a:	e015      	b.n	800fb78 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	d108      	bne.n	800fb64 <inc_lock+0xf8>
 800fb52:	4a0c      	ldr	r2, [pc, #48]	; (800fb84 <inc_lock+0x118>)
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	011b      	lsls	r3, r3, #4
 800fb58:	4413      	add	r3, r2
 800fb5a:	330c      	adds	r3, #12
 800fb5c:	881b      	ldrh	r3, [r3, #0]
 800fb5e:	3301      	adds	r3, #1
 800fb60:	b29a      	uxth	r2, r3
 800fb62:	e001      	b.n	800fb68 <inc_lock+0xfc>
 800fb64:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fb68:	4906      	ldr	r1, [pc, #24]	; (800fb84 <inc_lock+0x118>)
 800fb6a:	68fb      	ldr	r3, [r7, #12]
 800fb6c:	011b      	lsls	r3, r3, #4
 800fb6e:	440b      	add	r3, r1
 800fb70:	330c      	adds	r3, #12
 800fb72:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	3301      	adds	r3, #1
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3714      	adds	r7, #20
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb82:	4770      	bx	lr
 800fb84:	2000115c 	.word	0x2000115c

0800fb88 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	3b01      	subs	r3, #1
 800fb94:	607b      	str	r3, [r7, #4]
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d825      	bhi.n	800fbe8 <dec_lock+0x60>
		n = Files[i].ctr;
 800fb9c:	4a17      	ldr	r2, [pc, #92]	; (800fbfc <dec_lock+0x74>)
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	011b      	lsls	r3, r3, #4
 800fba2:	4413      	add	r3, r2
 800fba4:	330c      	adds	r3, #12
 800fba6:	881b      	ldrh	r3, [r3, #0]
 800fba8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fbaa:	89fb      	ldrh	r3, [r7, #14]
 800fbac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fbb0:	d101      	bne.n	800fbb6 <dec_lock+0x2e>
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fbb6:	89fb      	ldrh	r3, [r7, #14]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d002      	beq.n	800fbc2 <dec_lock+0x3a>
 800fbbc:	89fb      	ldrh	r3, [r7, #14]
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fbc2:	4a0e      	ldr	r2, [pc, #56]	; (800fbfc <dec_lock+0x74>)
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	011b      	lsls	r3, r3, #4
 800fbc8:	4413      	add	r3, r2
 800fbca:	330c      	adds	r3, #12
 800fbcc:	89fa      	ldrh	r2, [r7, #14]
 800fbce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fbd0:	89fb      	ldrh	r3, [r7, #14]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d105      	bne.n	800fbe2 <dec_lock+0x5a>
 800fbd6:	4a09      	ldr	r2, [pc, #36]	; (800fbfc <dec_lock+0x74>)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	011b      	lsls	r3, r3, #4
 800fbdc:	4413      	add	r3, r2
 800fbde:	2200      	movs	r2, #0
 800fbe0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	737b      	strb	r3, [r7, #13]
 800fbe6:	e001      	b.n	800fbec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fbe8:	2302      	movs	r3, #2
 800fbea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fbec:	7b7b      	ldrb	r3, [r7, #13]
}
 800fbee:	4618      	mov	r0, r3
 800fbf0:	3714      	adds	r7, #20
 800fbf2:	46bd      	mov	sp, r7
 800fbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf8:	4770      	bx	lr
 800fbfa:	bf00      	nop
 800fbfc:	2000115c 	.word	0x2000115c

0800fc00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fc00:	b480      	push	{r7}
 800fc02:	b085      	sub	sp, #20
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fc08:	2300      	movs	r3, #0
 800fc0a:	60fb      	str	r3, [r7, #12]
 800fc0c:	e010      	b.n	800fc30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fc0e:	4a0d      	ldr	r2, [pc, #52]	; (800fc44 <clear_lock+0x44>)
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	011b      	lsls	r3, r3, #4
 800fc14:	4413      	add	r3, r2
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	687a      	ldr	r2, [r7, #4]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d105      	bne.n	800fc2a <clear_lock+0x2a>
 800fc1e:	4a09      	ldr	r2, [pc, #36]	; (800fc44 <clear_lock+0x44>)
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	011b      	lsls	r3, r3, #4
 800fc24:	4413      	add	r3, r2
 800fc26:	2200      	movs	r2, #0
 800fc28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	60fb      	str	r3, [r7, #12]
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2b01      	cmp	r3, #1
 800fc34:	d9eb      	bls.n	800fc0e <clear_lock+0xe>
	}
}
 800fc36:	bf00      	nop
 800fc38:	bf00      	nop
 800fc3a:	3714      	adds	r7, #20
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc42:	4770      	bx	lr
 800fc44:	2000115c 	.word	0x2000115c

0800fc48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b086      	sub	sp, #24
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fc50:	2300      	movs	r3, #0
 800fc52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	78db      	ldrb	r3, [r3, #3]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d034      	beq.n	800fcc6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	7858      	ldrb	r0, [r3, #1]
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	697a      	ldr	r2, [r7, #20]
 800fc70:	f7ff fd0e 	bl	800f690 <disk_write>
 800fc74:	4603      	mov	r3, r0
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d002      	beq.n	800fc80 <sync_window+0x38>
			res = FR_DISK_ERR;
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	73fb      	strb	r3, [r7, #15]
 800fc7e:	e022      	b.n	800fcc6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	2200      	movs	r2, #0
 800fc84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8a:	697a      	ldr	r2, [r7, #20]
 800fc8c:	1ad2      	subs	r2, r2, r3
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	69db      	ldr	r3, [r3, #28]
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d217      	bcs.n	800fcc6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	789b      	ldrb	r3, [r3, #2]
 800fc9a:	613b      	str	r3, [r7, #16]
 800fc9c:	e010      	b.n	800fcc0 <sync_window+0x78>
					wsect += fs->fsize;
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	69db      	ldr	r3, [r3, #28]
 800fca2:	697a      	ldr	r2, [r7, #20]
 800fca4:	4413      	add	r3, r2
 800fca6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	7858      	ldrb	r0, [r3, #1]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	697a      	ldr	r2, [r7, #20]
 800fcb6:	f7ff fceb 	bl	800f690 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fcba:	693b      	ldr	r3, [r7, #16]
 800fcbc:	3b01      	subs	r3, #1
 800fcbe:	613b      	str	r3, [r7, #16]
 800fcc0:	693b      	ldr	r3, [r7, #16]
 800fcc2:	2b01      	cmp	r3, #1
 800fcc4:	d8eb      	bhi.n	800fc9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fcc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcc8:	4618      	mov	r0, r3
 800fcca:	3718      	adds	r7, #24
 800fccc:	46bd      	mov	sp, r7
 800fcce:	bd80      	pop	{r7, pc}

0800fcd0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fcda:	2300      	movs	r3, #0
 800fcdc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fce2:	683a      	ldr	r2, [r7, #0]
 800fce4:	429a      	cmp	r2, r3
 800fce6:	d01b      	beq.n	800fd20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f7ff ffad 	bl	800fc48 <sync_window>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fcf2:	7bfb      	ldrb	r3, [r7, #15]
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d113      	bne.n	800fd20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	7858      	ldrb	r0, [r3, #1]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fd02:	2301      	movs	r3, #1
 800fd04:	683a      	ldr	r2, [r7, #0]
 800fd06:	f7ff fca3 	bl	800f650 <disk_read>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d004      	beq.n	800fd1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fd10:	f04f 33ff 	mov.w	r3, #4294967295
 800fd14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fd16:	2301      	movs	r3, #1
 800fd18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	683a      	ldr	r2, [r7, #0]
 800fd1e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd22:	4618      	mov	r0, r3
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
	...

0800fd2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b084      	sub	sp, #16
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff ff87 	bl	800fc48 <sync_window>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fd3e:	7bfb      	ldrb	r3, [r7, #15]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d158      	bne.n	800fdf6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	781b      	ldrb	r3, [r3, #0]
 800fd48:	2b03      	cmp	r3, #3
 800fd4a:	d148      	bne.n	800fdde <sync_fs+0xb2>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	791b      	ldrb	r3, [r3, #4]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d144      	bne.n	800fdde <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	3334      	adds	r3, #52	; 0x34
 800fd58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7ff fd77 	bl	800f852 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	3334      	adds	r3, #52	; 0x34
 800fd68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fd6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fd70:	4618      	mov	r0, r3
 800fd72:	f7ff fd06 	bl	800f782 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	3334      	adds	r3, #52	; 0x34
 800fd7a:	4921      	ldr	r1, [pc, #132]	; (800fe00 <sync_fs+0xd4>)
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff fd1b 	bl	800f7b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	3334      	adds	r3, #52	; 0x34
 800fd86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fd8a:	491e      	ldr	r1, [pc, #120]	; (800fe04 <sync_fs+0xd8>)
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fd13 	bl	800f7b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	3334      	adds	r3, #52	; 0x34
 800fd96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	695b      	ldr	r3, [r3, #20]
 800fd9e:	4619      	mov	r1, r3
 800fda0:	4610      	mov	r0, r2
 800fda2:	f7ff fd09 	bl	800f7b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	3334      	adds	r3, #52	; 0x34
 800fdaa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	691b      	ldr	r3, [r3, #16]
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	4610      	mov	r0, r2
 800fdb6:	f7ff fcff 	bl	800f7b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6a1b      	ldr	r3, [r3, #32]
 800fdbe:	1c5a      	adds	r2, r3, #1
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	7858      	ldrb	r0, [r3, #1]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fdd2:	2301      	movs	r3, #1
 800fdd4:	f7ff fc5c 	bl	800f690 <disk_write>
			fs->fsi_flag = 0;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2200      	movs	r2, #0
 800fddc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	785b      	ldrb	r3, [r3, #1]
 800fde2:	2200      	movs	r2, #0
 800fde4:	2100      	movs	r1, #0
 800fde6:	4618      	mov	r0, r3
 800fde8:	f7ff fc72 	bl	800f6d0 <disk_ioctl>
 800fdec:	4603      	mov	r3, r0
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d001      	beq.n	800fdf6 <sync_fs+0xca>
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fdf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	3710      	adds	r7, #16
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}
 800fe00:	41615252 	.word	0x41615252
 800fe04:	61417272 	.word	0x61417272

0800fe08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b083      	sub	sp, #12
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fe12:	683b      	ldr	r3, [r7, #0]
 800fe14:	3b02      	subs	r3, #2
 800fe16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	699b      	ldr	r3, [r3, #24]
 800fe1c:	3b02      	subs	r3, #2
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d301      	bcc.n	800fe28 <clust2sect+0x20>
 800fe24:	2300      	movs	r3, #0
 800fe26:	e008      	b.n	800fe3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	895b      	ldrh	r3, [r3, #10]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	fb03 f202 	mul.w	r2, r3, r2
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe38:	4413      	add	r3, r2
}
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	370c      	adds	r7, #12
 800fe3e:	46bd      	mov	sp, r7
 800fe40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe44:	4770      	bx	lr

0800fe46 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800fe46:	b580      	push	{r7, lr}
 800fe48:	b086      	sub	sp, #24
 800fe4a:	af00      	add	r7, sp, #0
 800fe4c:	6078      	str	r0, [r7, #4]
 800fe4e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	2b01      	cmp	r3, #1
 800fe5a:	d904      	bls.n	800fe66 <get_fat+0x20>
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	699b      	ldr	r3, [r3, #24]
 800fe60:	683a      	ldr	r2, [r7, #0]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	d302      	bcc.n	800fe6c <get_fat+0x26>
		val = 1;	/* Internal error */
 800fe66:	2301      	movs	r3, #1
 800fe68:	617b      	str	r3, [r7, #20]
 800fe6a:	e08f      	b.n	800ff8c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800fe6c:	f04f 33ff 	mov.w	r3, #4294967295
 800fe70:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	781b      	ldrb	r3, [r3, #0]
 800fe76:	2b03      	cmp	r3, #3
 800fe78:	d062      	beq.n	800ff40 <get_fat+0xfa>
 800fe7a:	2b03      	cmp	r3, #3
 800fe7c:	dc7c      	bgt.n	800ff78 <get_fat+0x132>
 800fe7e:	2b01      	cmp	r3, #1
 800fe80:	d002      	beq.n	800fe88 <get_fat+0x42>
 800fe82:	2b02      	cmp	r3, #2
 800fe84:	d042      	beq.n	800ff0c <get_fat+0xc6>
 800fe86:	e077      	b.n	800ff78 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800fe88:	683b      	ldr	r3, [r7, #0]
 800fe8a:	60fb      	str	r3, [r7, #12]
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	085b      	lsrs	r3, r3, #1
 800fe90:	68fa      	ldr	r2, [r7, #12]
 800fe92:	4413      	add	r3, r2
 800fe94:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	0a5b      	lsrs	r3, r3, #9
 800fe9e:	4413      	add	r3, r2
 800fea0:	4619      	mov	r1, r3
 800fea2:	6938      	ldr	r0, [r7, #16]
 800fea4:	f7ff ff14 	bl	800fcd0 <move_window>
 800fea8:	4603      	mov	r3, r0
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d167      	bne.n	800ff7e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	1c5a      	adds	r2, r3, #1
 800feb2:	60fa      	str	r2, [r7, #12]
 800feb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feb8:	693a      	ldr	r2, [r7, #16]
 800feba:	4413      	add	r3, r2
 800febc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fec0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	0a5b      	lsrs	r3, r3, #9
 800feca:	4413      	add	r3, r2
 800fecc:	4619      	mov	r1, r3
 800fece:	6938      	ldr	r0, [r7, #16]
 800fed0:	f7ff fefe 	bl	800fcd0 <move_window>
 800fed4:	4603      	mov	r3, r0
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d153      	bne.n	800ff82 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fee0:	693a      	ldr	r2, [r7, #16]
 800fee2:	4413      	add	r3, r2
 800fee4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fee8:	021b      	lsls	r3, r3, #8
 800feea:	461a      	mov	r2, r3
 800feec:	68bb      	ldr	r3, [r7, #8]
 800feee:	4313      	orrs	r3, r2
 800fef0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	f003 0301 	and.w	r3, r3, #1
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d002      	beq.n	800ff02 <get_fat+0xbc>
 800fefc:	68bb      	ldr	r3, [r7, #8]
 800fefe:	091b      	lsrs	r3, r3, #4
 800ff00:	e002      	b.n	800ff08 <get_fat+0xc2>
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ff08:	617b      	str	r3, [r7, #20]
			break;
 800ff0a:	e03f      	b.n	800ff8c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ff0c:	693b      	ldr	r3, [r7, #16]
 800ff0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	0a1b      	lsrs	r3, r3, #8
 800ff14:	4413      	add	r3, r2
 800ff16:	4619      	mov	r1, r3
 800ff18:	6938      	ldr	r0, [r7, #16]
 800ff1a:	f7ff fed9 	bl	800fcd0 <move_window>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d130      	bne.n	800ff86 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	005b      	lsls	r3, r3, #1
 800ff2e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ff32:	4413      	add	r3, r2
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7ff fbe9 	bl	800f70c <ld_word>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	617b      	str	r3, [r7, #20]
			break;
 800ff3e:	e025      	b.n	800ff8c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ff40:	693b      	ldr	r3, [r7, #16]
 800ff42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff44:	683b      	ldr	r3, [r7, #0]
 800ff46:	09db      	lsrs	r3, r3, #7
 800ff48:	4413      	add	r3, r2
 800ff4a:	4619      	mov	r1, r3
 800ff4c:	6938      	ldr	r0, [r7, #16]
 800ff4e:	f7ff febf 	bl	800fcd0 <move_window>
 800ff52:	4603      	mov	r3, r0
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d118      	bne.n	800ff8a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ff5e:	683b      	ldr	r3, [r7, #0]
 800ff60:	009b      	lsls	r3, r3, #2
 800ff62:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ff66:	4413      	add	r3, r2
 800ff68:	4618      	mov	r0, r3
 800ff6a:	f7ff fbe7 	bl	800f73c <ld_dword>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ff74:	617b      	str	r3, [r7, #20]
			break;
 800ff76:	e009      	b.n	800ff8c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ff78:	2301      	movs	r3, #1
 800ff7a:	617b      	str	r3, [r7, #20]
 800ff7c:	e006      	b.n	800ff8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff7e:	bf00      	nop
 800ff80:	e004      	b.n	800ff8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff82:	bf00      	nop
 800ff84:	e002      	b.n	800ff8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ff86:	bf00      	nop
 800ff88:	e000      	b.n	800ff8c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ff8a:	bf00      	nop
		}
	}

	return val;
 800ff8c:	697b      	ldr	r3, [r7, #20]
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	3718      	adds	r7, #24
 800ff92:	46bd      	mov	sp, r7
 800ff94:	bd80      	pop	{r7, pc}

0800ff96 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ff96:	b590      	push	{r4, r7, lr}
 800ff98:	b089      	sub	sp, #36	; 0x24
 800ff9a:	af00      	add	r7, sp, #0
 800ff9c:	60f8      	str	r0, [r7, #12]
 800ff9e:	60b9      	str	r1, [r7, #8]
 800ffa0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ffa2:	2302      	movs	r3, #2
 800ffa4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	2b01      	cmp	r3, #1
 800ffaa:	f240 80d9 	bls.w	8010160 <put_fat+0x1ca>
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	699b      	ldr	r3, [r3, #24]
 800ffb2:	68ba      	ldr	r2, [r7, #8]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	f080 80d3 	bcs.w	8010160 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	2b03      	cmp	r3, #3
 800ffc0:	f000 8096 	beq.w	80100f0 <put_fat+0x15a>
 800ffc4:	2b03      	cmp	r3, #3
 800ffc6:	f300 80cb 	bgt.w	8010160 <put_fat+0x1ca>
 800ffca:	2b01      	cmp	r3, #1
 800ffcc:	d002      	beq.n	800ffd4 <put_fat+0x3e>
 800ffce:	2b02      	cmp	r3, #2
 800ffd0:	d06e      	beq.n	80100b0 <put_fat+0x11a>
 800ffd2:	e0c5      	b.n	8010160 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	61bb      	str	r3, [r7, #24]
 800ffd8:	69bb      	ldr	r3, [r7, #24]
 800ffda:	085b      	lsrs	r3, r3, #1
 800ffdc:	69ba      	ldr	r2, [r7, #24]
 800ffde:	4413      	add	r3, r2
 800ffe0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffe6:	69bb      	ldr	r3, [r7, #24]
 800ffe8:	0a5b      	lsrs	r3, r3, #9
 800ffea:	4413      	add	r3, r2
 800ffec:	4619      	mov	r1, r3
 800ffee:	68f8      	ldr	r0, [r7, #12]
 800fff0:	f7ff fe6e 	bl	800fcd0 <move_window>
 800fff4:	4603      	mov	r3, r0
 800fff6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800fff8:	7ffb      	ldrb	r3, [r7, #31]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	f040 80a9 	bne.w	8010152 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010006:	69bb      	ldr	r3, [r7, #24]
 8010008:	1c59      	adds	r1, r3, #1
 801000a:	61b9      	str	r1, [r7, #24]
 801000c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010010:	4413      	add	r3, r2
 8010012:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010014:	68bb      	ldr	r3, [r7, #8]
 8010016:	f003 0301 	and.w	r3, r3, #1
 801001a:	2b00      	cmp	r3, #0
 801001c:	d00d      	beq.n	801003a <put_fat+0xa4>
 801001e:	697b      	ldr	r3, [r7, #20]
 8010020:	781b      	ldrb	r3, [r3, #0]
 8010022:	b25b      	sxtb	r3, r3
 8010024:	f003 030f 	and.w	r3, r3, #15
 8010028:	b25a      	sxtb	r2, r3
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	b2db      	uxtb	r3, r3
 801002e:	011b      	lsls	r3, r3, #4
 8010030:	b25b      	sxtb	r3, r3
 8010032:	4313      	orrs	r3, r2
 8010034:	b25b      	sxtb	r3, r3
 8010036:	b2db      	uxtb	r3, r3
 8010038:	e001      	b.n	801003e <put_fat+0xa8>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	b2db      	uxtb	r3, r3
 801003e:	697a      	ldr	r2, [r7, #20]
 8010040:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	2201      	movs	r2, #1
 8010046:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801004c:	69bb      	ldr	r3, [r7, #24]
 801004e:	0a5b      	lsrs	r3, r3, #9
 8010050:	4413      	add	r3, r2
 8010052:	4619      	mov	r1, r3
 8010054:	68f8      	ldr	r0, [r7, #12]
 8010056:	f7ff fe3b 	bl	800fcd0 <move_window>
 801005a:	4603      	mov	r3, r0
 801005c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801005e:	7ffb      	ldrb	r3, [r7, #31]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d178      	bne.n	8010156 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010070:	4413      	add	r3, r2
 8010072:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010074:	68bb      	ldr	r3, [r7, #8]
 8010076:	f003 0301 	and.w	r3, r3, #1
 801007a:	2b00      	cmp	r3, #0
 801007c:	d003      	beq.n	8010086 <put_fat+0xf0>
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	091b      	lsrs	r3, r3, #4
 8010082:	b2db      	uxtb	r3, r3
 8010084:	e00e      	b.n	80100a4 <put_fat+0x10e>
 8010086:	697b      	ldr	r3, [r7, #20]
 8010088:	781b      	ldrb	r3, [r3, #0]
 801008a:	b25b      	sxtb	r3, r3
 801008c:	f023 030f 	bic.w	r3, r3, #15
 8010090:	b25a      	sxtb	r2, r3
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	0a1b      	lsrs	r3, r3, #8
 8010096:	b25b      	sxtb	r3, r3
 8010098:	f003 030f 	and.w	r3, r3, #15
 801009c:	b25b      	sxtb	r3, r3
 801009e:	4313      	orrs	r3, r2
 80100a0:	b25b      	sxtb	r3, r3
 80100a2:	b2db      	uxtb	r3, r3
 80100a4:	697a      	ldr	r2, [r7, #20]
 80100a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	2201      	movs	r2, #1
 80100ac:	70da      	strb	r2, [r3, #3]
			break;
 80100ae:	e057      	b.n	8010160 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	0a1b      	lsrs	r3, r3, #8
 80100b8:	4413      	add	r3, r2
 80100ba:	4619      	mov	r1, r3
 80100bc:	68f8      	ldr	r0, [r7, #12]
 80100be:	f7ff fe07 	bl	800fcd0 <move_window>
 80100c2:	4603      	mov	r3, r0
 80100c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80100c6:	7ffb      	ldrb	r3, [r7, #31]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d146      	bne.n	801015a <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	005b      	lsls	r3, r3, #1
 80100d6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80100da:	4413      	add	r3, r2
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	b292      	uxth	r2, r2
 80100e0:	4611      	mov	r1, r2
 80100e2:	4618      	mov	r0, r3
 80100e4:	f7ff fb4d 	bl	800f782 <st_word>
			fs->wflag = 1;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	2201      	movs	r2, #1
 80100ec:	70da      	strb	r2, [r3, #3]
			break;
 80100ee:	e037      	b.n	8010160 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	09db      	lsrs	r3, r3, #7
 80100f8:	4413      	add	r3, r2
 80100fa:	4619      	mov	r1, r3
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f7ff fde7 	bl	800fcd0 <move_window>
 8010102:	4603      	mov	r3, r0
 8010104:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010106:	7ffb      	ldrb	r3, [r7, #31]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d128      	bne.n	801015e <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010120:	4413      	add	r3, r2
 8010122:	4618      	mov	r0, r3
 8010124:	f7ff fb0a 	bl	800f73c <ld_dword>
 8010128:	4603      	mov	r3, r0
 801012a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801012e:	4323      	orrs	r3, r4
 8010130:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010138:	68bb      	ldr	r3, [r7, #8]
 801013a:	009b      	lsls	r3, r3, #2
 801013c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010140:	4413      	add	r3, r2
 8010142:	6879      	ldr	r1, [r7, #4]
 8010144:	4618      	mov	r0, r3
 8010146:	f7ff fb37 	bl	800f7b8 <st_dword>
			fs->wflag = 1;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2201      	movs	r2, #1
 801014e:	70da      	strb	r2, [r3, #3]
			break;
 8010150:	e006      	b.n	8010160 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010152:	bf00      	nop
 8010154:	e004      	b.n	8010160 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8010156:	bf00      	nop
 8010158:	e002      	b.n	8010160 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801015a:	bf00      	nop
 801015c:	e000      	b.n	8010160 <put_fat+0x1ca>
			if (res != FR_OK) break;
 801015e:	bf00      	nop
		}
	}
	return res;
 8010160:	7ffb      	ldrb	r3, [r7, #31]
}
 8010162:	4618      	mov	r0, r3
 8010164:	3724      	adds	r7, #36	; 0x24
 8010166:	46bd      	mov	sp, r7
 8010168:	bd90      	pop	{r4, r7, pc}

0801016a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801016a:	b580      	push	{r7, lr}
 801016c:	b088      	sub	sp, #32
 801016e:	af00      	add	r7, sp, #0
 8010170:	60f8      	str	r0, [r7, #12]
 8010172:	60b9      	str	r1, [r7, #8]
 8010174:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010176:	2300      	movs	r3, #0
 8010178:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8010180:	68bb      	ldr	r3, [r7, #8]
 8010182:	2b01      	cmp	r3, #1
 8010184:	d904      	bls.n	8010190 <remove_chain+0x26>
 8010186:	69bb      	ldr	r3, [r7, #24]
 8010188:	699b      	ldr	r3, [r3, #24]
 801018a:	68ba      	ldr	r2, [r7, #8]
 801018c:	429a      	cmp	r2, r3
 801018e:	d301      	bcc.n	8010194 <remove_chain+0x2a>
 8010190:	2302      	movs	r3, #2
 8010192:	e04b      	b.n	801022c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d00c      	beq.n	80101b4 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801019a:	f04f 32ff 	mov.w	r2, #4294967295
 801019e:	6879      	ldr	r1, [r7, #4]
 80101a0:	69b8      	ldr	r0, [r7, #24]
 80101a2:	f7ff fef8 	bl	800ff96 <put_fat>
 80101a6:	4603      	mov	r3, r0
 80101a8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80101aa:	7ffb      	ldrb	r3, [r7, #31]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d001      	beq.n	80101b4 <remove_chain+0x4a>
 80101b0:	7ffb      	ldrb	r3, [r7, #31]
 80101b2:	e03b      	b.n	801022c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80101b4:	68b9      	ldr	r1, [r7, #8]
 80101b6:	68f8      	ldr	r0, [r7, #12]
 80101b8:	f7ff fe45 	bl	800fe46 <get_fat>
 80101bc:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d031      	beq.n	8010228 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	2b01      	cmp	r3, #1
 80101c8:	d101      	bne.n	80101ce <remove_chain+0x64>
 80101ca:	2302      	movs	r3, #2
 80101cc:	e02e      	b.n	801022c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101d4:	d101      	bne.n	80101da <remove_chain+0x70>
 80101d6:	2301      	movs	r3, #1
 80101d8:	e028      	b.n	801022c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80101da:	2200      	movs	r2, #0
 80101dc:	68b9      	ldr	r1, [r7, #8]
 80101de:	69b8      	ldr	r0, [r7, #24]
 80101e0:	f7ff fed9 	bl	800ff96 <put_fat>
 80101e4:	4603      	mov	r3, r0
 80101e6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80101e8:	7ffb      	ldrb	r3, [r7, #31]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d001      	beq.n	80101f2 <remove_chain+0x88>
 80101ee:	7ffb      	ldrb	r3, [r7, #31]
 80101f0:	e01c      	b.n	801022c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	695a      	ldr	r2, [r3, #20]
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	699b      	ldr	r3, [r3, #24]
 80101fa:	3b02      	subs	r3, #2
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d20b      	bcs.n	8010218 <remove_chain+0xae>
			fs->free_clst++;
 8010200:	69bb      	ldr	r3, [r7, #24]
 8010202:	695b      	ldr	r3, [r3, #20]
 8010204:	1c5a      	adds	r2, r3, #1
 8010206:	69bb      	ldr	r3, [r7, #24]
 8010208:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	791b      	ldrb	r3, [r3, #4]
 801020e:	f043 0301 	orr.w	r3, r3, #1
 8010212:	b2da      	uxtb	r2, r3
 8010214:	69bb      	ldr	r3, [r7, #24]
 8010216:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8010218:	697b      	ldr	r3, [r7, #20]
 801021a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801021c:	69bb      	ldr	r3, [r7, #24]
 801021e:	699b      	ldr	r3, [r3, #24]
 8010220:	68ba      	ldr	r2, [r7, #8]
 8010222:	429a      	cmp	r2, r3
 8010224:	d3c6      	bcc.n	80101b4 <remove_chain+0x4a>
 8010226:	e000      	b.n	801022a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8010228:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801022a:	2300      	movs	r3, #0
}
 801022c:	4618      	mov	r0, r3
 801022e:	3720      	adds	r7, #32
 8010230:	46bd      	mov	sp, r7
 8010232:	bd80      	pop	{r7, pc}

08010234 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010234:	b580      	push	{r7, lr}
 8010236:	b088      	sub	sp, #32
 8010238:	af00      	add	r7, sp, #0
 801023a:	6078      	str	r0, [r7, #4]
 801023c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d10d      	bne.n	8010266 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801024a:	693b      	ldr	r3, [r7, #16]
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010250:	69bb      	ldr	r3, [r7, #24]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d004      	beq.n	8010260 <create_chain+0x2c>
 8010256:	693b      	ldr	r3, [r7, #16]
 8010258:	699b      	ldr	r3, [r3, #24]
 801025a:	69ba      	ldr	r2, [r7, #24]
 801025c:	429a      	cmp	r2, r3
 801025e:	d31b      	bcc.n	8010298 <create_chain+0x64>
 8010260:	2301      	movs	r3, #1
 8010262:	61bb      	str	r3, [r7, #24]
 8010264:	e018      	b.n	8010298 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010266:	6839      	ldr	r1, [r7, #0]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7ff fdec 	bl	800fe46 <get_fat>
 801026e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2b01      	cmp	r3, #1
 8010274:	d801      	bhi.n	801027a <create_chain+0x46>
 8010276:	2301      	movs	r3, #1
 8010278:	e070      	b.n	801035c <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010280:	d101      	bne.n	8010286 <create_chain+0x52>
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	e06a      	b.n	801035c <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	699b      	ldr	r3, [r3, #24]
 801028a:	68fa      	ldr	r2, [r7, #12]
 801028c:	429a      	cmp	r2, r3
 801028e:	d201      	bcs.n	8010294 <create_chain+0x60>
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	e063      	b.n	801035c <create_chain+0x128>
		scl = clst;
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010298:	69bb      	ldr	r3, [r7, #24]
 801029a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 801029c:	69fb      	ldr	r3, [r7, #28]
 801029e:	3301      	adds	r3, #1
 80102a0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80102a2:	693b      	ldr	r3, [r7, #16]
 80102a4:	699b      	ldr	r3, [r3, #24]
 80102a6:	69fa      	ldr	r2, [r7, #28]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d307      	bcc.n	80102bc <create_chain+0x88>
				ncl = 2;
 80102ac:	2302      	movs	r3, #2
 80102ae:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80102b0:	69fa      	ldr	r2, [r7, #28]
 80102b2:	69bb      	ldr	r3, [r7, #24]
 80102b4:	429a      	cmp	r2, r3
 80102b6:	d901      	bls.n	80102bc <create_chain+0x88>
 80102b8:	2300      	movs	r3, #0
 80102ba:	e04f      	b.n	801035c <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80102bc:	69f9      	ldr	r1, [r7, #28]
 80102be:	6878      	ldr	r0, [r7, #4]
 80102c0:	f7ff fdc1 	bl	800fe46 <get_fat>
 80102c4:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d00e      	beq.n	80102ea <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	d003      	beq.n	80102da <create_chain+0xa6>
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102d8:	d101      	bne.n	80102de <create_chain+0xaa>
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	e03e      	b.n	801035c <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80102de:	69fa      	ldr	r2, [r7, #28]
 80102e0:	69bb      	ldr	r3, [r7, #24]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d1da      	bne.n	801029c <create_chain+0x68>
 80102e6:	2300      	movs	r3, #0
 80102e8:	e038      	b.n	801035c <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80102ea:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80102ec:	f04f 32ff 	mov.w	r2, #4294967295
 80102f0:	69f9      	ldr	r1, [r7, #28]
 80102f2:	6938      	ldr	r0, [r7, #16]
 80102f4:	f7ff fe4f 	bl	800ff96 <put_fat>
 80102f8:	4603      	mov	r3, r0
 80102fa:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80102fc:	7dfb      	ldrb	r3, [r7, #23]
 80102fe:	2b00      	cmp	r3, #0
 8010300:	d109      	bne.n	8010316 <create_chain+0xe2>
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d006      	beq.n	8010316 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8010308:	69fa      	ldr	r2, [r7, #28]
 801030a:	6839      	ldr	r1, [r7, #0]
 801030c:	6938      	ldr	r0, [r7, #16]
 801030e:	f7ff fe42 	bl	800ff96 <put_fat>
 8010312:	4603      	mov	r3, r0
 8010314:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010316:	7dfb      	ldrb	r3, [r7, #23]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d116      	bne.n	801034a <create_chain+0x116>
		fs->last_clst = ncl;
 801031c:	693b      	ldr	r3, [r7, #16]
 801031e:	69fa      	ldr	r2, [r7, #28]
 8010320:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	695a      	ldr	r2, [r3, #20]
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	699b      	ldr	r3, [r3, #24]
 801032a:	3b02      	subs	r3, #2
 801032c:	429a      	cmp	r2, r3
 801032e:	d804      	bhi.n	801033a <create_chain+0x106>
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	695b      	ldr	r3, [r3, #20]
 8010334:	1e5a      	subs	r2, r3, #1
 8010336:	693b      	ldr	r3, [r7, #16]
 8010338:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	791b      	ldrb	r3, [r3, #4]
 801033e:	f043 0301 	orr.w	r3, r3, #1
 8010342:	b2da      	uxtb	r2, r3
 8010344:	693b      	ldr	r3, [r7, #16]
 8010346:	711a      	strb	r2, [r3, #4]
 8010348:	e007      	b.n	801035a <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801034a:	7dfb      	ldrb	r3, [r7, #23]
 801034c:	2b01      	cmp	r3, #1
 801034e:	d102      	bne.n	8010356 <create_chain+0x122>
 8010350:	f04f 33ff 	mov.w	r3, #4294967295
 8010354:	e000      	b.n	8010358 <create_chain+0x124>
 8010356:	2301      	movs	r3, #1
 8010358:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801035a:	69fb      	ldr	r3, [r7, #28]
}
 801035c:	4618      	mov	r0, r3
 801035e:	3720      	adds	r7, #32
 8010360:	46bd      	mov	sp, r7
 8010362:	bd80      	pop	{r7, pc}

08010364 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010364:	b480      	push	{r7}
 8010366:	b087      	sub	sp, #28
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
 801036c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010378:	3304      	adds	r3, #4
 801037a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801037c:	683b      	ldr	r3, [r7, #0]
 801037e:	0a5b      	lsrs	r3, r3, #9
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	8952      	ldrh	r2, [r2, #10]
 8010384:	fbb3 f3f2 	udiv	r3, r3, r2
 8010388:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801038a:	693b      	ldr	r3, [r7, #16]
 801038c:	1d1a      	adds	r2, r3, #4
 801038e:	613a      	str	r2, [r7, #16]
 8010390:	681b      	ldr	r3, [r3, #0]
 8010392:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d101      	bne.n	801039e <clmt_clust+0x3a>
 801039a:	2300      	movs	r3, #0
 801039c:	e010      	b.n	80103c0 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801039e:	697a      	ldr	r2, [r7, #20]
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d307      	bcc.n	80103b6 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80103a6:	697a      	ldr	r2, [r7, #20]
 80103a8:	68bb      	ldr	r3, [r7, #8]
 80103aa:	1ad3      	subs	r3, r2, r3
 80103ac:	617b      	str	r3, [r7, #20]
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	3304      	adds	r3, #4
 80103b2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80103b4:	e7e9      	b.n	801038a <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80103b6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	681a      	ldr	r2, [r3, #0]
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	4413      	add	r3, r2
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	371c      	adds	r7, #28
 80103c4:	46bd      	mov	sp, r7
 80103c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ca:	4770      	bx	lr

080103cc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b086      	sub	sp, #24
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	6078      	str	r0, [r7, #4]
 80103d4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80103e2:	d204      	bcs.n	80103ee <dir_sdi+0x22>
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	f003 031f 	and.w	r3, r3, #31
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d001      	beq.n	80103f2 <dir_sdi+0x26>
		return FR_INT_ERR;
 80103ee:	2302      	movs	r3, #2
 80103f0:	e063      	b.n	80104ba <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	683a      	ldr	r2, [r7, #0]
 80103f6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	689b      	ldr	r3, [r3, #8]
 80103fc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d106      	bne.n	8010412 <dir_sdi+0x46>
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	781b      	ldrb	r3, [r3, #0]
 8010408:	2b02      	cmp	r3, #2
 801040a:	d902      	bls.n	8010412 <dir_sdi+0x46>
		clst = fs->dirbase;
 801040c:	693b      	ldr	r3, [r7, #16]
 801040e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010410:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d10c      	bne.n	8010432 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010418:	683b      	ldr	r3, [r7, #0]
 801041a:	095b      	lsrs	r3, r3, #5
 801041c:	693a      	ldr	r2, [r7, #16]
 801041e:	8912      	ldrh	r2, [r2, #8]
 8010420:	4293      	cmp	r3, r2
 8010422:	d301      	bcc.n	8010428 <dir_sdi+0x5c>
 8010424:	2302      	movs	r3, #2
 8010426:	e048      	b.n	80104ba <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	61da      	str	r2, [r3, #28]
 8010430:	e029      	b.n	8010486 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	895b      	ldrh	r3, [r3, #10]
 8010436:	025b      	lsls	r3, r3, #9
 8010438:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801043a:	e019      	b.n	8010470 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6979      	ldr	r1, [r7, #20]
 8010440:	4618      	mov	r0, r3
 8010442:	f7ff fd00 	bl	800fe46 <get_fat>
 8010446:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801044e:	d101      	bne.n	8010454 <dir_sdi+0x88>
 8010450:	2301      	movs	r3, #1
 8010452:	e032      	b.n	80104ba <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	2b01      	cmp	r3, #1
 8010458:	d904      	bls.n	8010464 <dir_sdi+0x98>
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	699b      	ldr	r3, [r3, #24]
 801045e:	697a      	ldr	r2, [r7, #20]
 8010460:	429a      	cmp	r2, r3
 8010462:	d301      	bcc.n	8010468 <dir_sdi+0x9c>
 8010464:	2302      	movs	r3, #2
 8010466:	e028      	b.n	80104ba <dir_sdi+0xee>
			ofs -= csz;
 8010468:	683a      	ldr	r2, [r7, #0]
 801046a:	68fb      	ldr	r3, [r7, #12]
 801046c:	1ad3      	subs	r3, r2, r3
 801046e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8010470:	683a      	ldr	r2, [r7, #0]
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	429a      	cmp	r2, r3
 8010476:	d2e1      	bcs.n	801043c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8010478:	6979      	ldr	r1, [r7, #20]
 801047a:	6938      	ldr	r0, [r7, #16]
 801047c:	f7ff fcc4 	bl	800fe08 <clust2sect>
 8010480:	4602      	mov	r2, r0
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	697a      	ldr	r2, [r7, #20]
 801048a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	69db      	ldr	r3, [r3, #28]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <dir_sdi+0xcc>
 8010494:	2302      	movs	r3, #2
 8010496:	e010      	b.n	80104ba <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	69da      	ldr	r2, [r3, #28]
 801049c:	683b      	ldr	r3, [r7, #0]
 801049e:	0a5b      	lsrs	r3, r3, #9
 80104a0:	441a      	add	r2, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80104ac:	683b      	ldr	r3, [r7, #0]
 80104ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104b2:	441a      	add	r2, r3
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80104b8:	2300      	movs	r3, #0
}
 80104ba:	4618      	mov	r0, r3
 80104bc:	3718      	adds	r7, #24
 80104be:	46bd      	mov	sp, r7
 80104c0:	bd80      	pop	{r7, pc}

080104c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80104c2:	b580      	push	{r7, lr}
 80104c4:	b086      	sub	sp, #24
 80104c6:	af00      	add	r7, sp, #0
 80104c8:	6078      	str	r0, [r7, #4]
 80104ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	695b      	ldr	r3, [r3, #20]
 80104d6:	3320      	adds	r3, #32
 80104d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	69db      	ldr	r3, [r3, #28]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d003      	beq.n	80104ea <dir_next+0x28>
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80104e8:	d301      	bcc.n	80104ee <dir_next+0x2c>
 80104ea:	2304      	movs	r3, #4
 80104ec:	e0aa      	b.n	8010644 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80104ee:	68bb      	ldr	r3, [r7, #8]
 80104f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	f040 8098 	bne.w	801062a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	69db      	ldr	r3, [r3, #28]
 80104fe:	1c5a      	adds	r2, r3, #1
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	699b      	ldr	r3, [r3, #24]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d10b      	bne.n	8010524 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	095b      	lsrs	r3, r3, #5
 8010510:	68fa      	ldr	r2, [r7, #12]
 8010512:	8912      	ldrh	r2, [r2, #8]
 8010514:	4293      	cmp	r3, r2
 8010516:	f0c0 8088 	bcc.w	801062a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2200      	movs	r2, #0
 801051e:	61da      	str	r2, [r3, #28]
 8010520:	2304      	movs	r3, #4
 8010522:	e08f      	b.n	8010644 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	0a5b      	lsrs	r3, r3, #9
 8010528:	68fa      	ldr	r2, [r7, #12]
 801052a:	8952      	ldrh	r2, [r2, #10]
 801052c:	3a01      	subs	r2, #1
 801052e:	4013      	ands	r3, r2
 8010530:	2b00      	cmp	r3, #0
 8010532:	d17a      	bne.n	801062a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010534:	687a      	ldr	r2, [r7, #4]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	699b      	ldr	r3, [r3, #24]
 801053a:	4619      	mov	r1, r3
 801053c:	4610      	mov	r0, r2
 801053e:	f7ff fc82 	bl	800fe46 <get_fat>
 8010542:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010544:	697b      	ldr	r3, [r7, #20]
 8010546:	2b01      	cmp	r3, #1
 8010548:	d801      	bhi.n	801054e <dir_next+0x8c>
 801054a:	2302      	movs	r3, #2
 801054c:	e07a      	b.n	8010644 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801054e:	697b      	ldr	r3, [r7, #20]
 8010550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010554:	d101      	bne.n	801055a <dir_next+0x98>
 8010556:	2301      	movs	r3, #1
 8010558:	e074      	b.n	8010644 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	699b      	ldr	r3, [r3, #24]
 801055e:	697a      	ldr	r2, [r7, #20]
 8010560:	429a      	cmp	r2, r3
 8010562:	d358      	bcc.n	8010616 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d104      	bne.n	8010574 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2200      	movs	r2, #0
 801056e:	61da      	str	r2, [r3, #28]
 8010570:	2304      	movs	r3, #4
 8010572:	e067      	b.n	8010644 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010574:	687a      	ldr	r2, [r7, #4]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	699b      	ldr	r3, [r3, #24]
 801057a:	4619      	mov	r1, r3
 801057c:	4610      	mov	r0, r2
 801057e:	f7ff fe59 	bl	8010234 <create_chain>
 8010582:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	2b00      	cmp	r3, #0
 8010588:	d101      	bne.n	801058e <dir_next+0xcc>
 801058a:	2307      	movs	r3, #7
 801058c:	e05a      	b.n	8010644 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d101      	bne.n	8010598 <dir_next+0xd6>
 8010594:	2302      	movs	r3, #2
 8010596:	e055      	b.n	8010644 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010598:	697b      	ldr	r3, [r7, #20]
 801059a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801059e:	d101      	bne.n	80105a4 <dir_next+0xe2>
 80105a0:	2301      	movs	r3, #1
 80105a2:	e04f      	b.n	8010644 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80105a4:	68f8      	ldr	r0, [r7, #12]
 80105a6:	f7ff fb4f 	bl	800fc48 <sync_window>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d001      	beq.n	80105b4 <dir_next+0xf2>
 80105b0:	2301      	movs	r3, #1
 80105b2:	e047      	b.n	8010644 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	3334      	adds	r3, #52	; 0x34
 80105b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105bc:	2100      	movs	r1, #0
 80105be:	4618      	mov	r0, r3
 80105c0:	f7ff f947 	bl	800f852 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80105c4:	2300      	movs	r3, #0
 80105c6:	613b      	str	r3, [r7, #16]
 80105c8:	6979      	ldr	r1, [r7, #20]
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	f7ff fc1c 	bl	800fe08 <clust2sect>
 80105d0:	4602      	mov	r2, r0
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	631a      	str	r2, [r3, #48]	; 0x30
 80105d6:	e012      	b.n	80105fe <dir_next+0x13c>
						fs->wflag = 1;
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	2201      	movs	r2, #1
 80105dc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80105de:	68f8      	ldr	r0, [r7, #12]
 80105e0:	f7ff fb32 	bl	800fc48 <sync_window>
 80105e4:	4603      	mov	r3, r0
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d001      	beq.n	80105ee <dir_next+0x12c>
 80105ea:	2301      	movs	r3, #1
 80105ec:	e02a      	b.n	8010644 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80105ee:	693b      	ldr	r3, [r7, #16]
 80105f0:	3301      	adds	r3, #1
 80105f2:	613b      	str	r3, [r7, #16]
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105f8:	1c5a      	adds	r2, r3, #1
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	631a      	str	r2, [r3, #48]	; 0x30
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	895b      	ldrh	r3, [r3, #10]
 8010602:	461a      	mov	r2, r3
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	4293      	cmp	r3, r2
 8010608:	d3e6      	bcc.n	80105d8 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	1ad2      	subs	r2, r2, r3
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	697a      	ldr	r2, [r7, #20]
 801061a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801061c:	6979      	ldr	r1, [r7, #20]
 801061e:	68f8      	ldr	r0, [r7, #12]
 8010620:	f7ff fbf2 	bl	800fe08 <clust2sect>
 8010624:	4602      	mov	r2, r0
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801062a:	687b      	ldr	r3, [r7, #4]
 801062c:	68ba      	ldr	r2, [r7, #8]
 801062e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801063c:	441a      	add	r2, r3
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3718      	adds	r7, #24
 8010648:	46bd      	mov	sp, r7
 801064a:	bd80      	pop	{r7, pc}

0801064c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b086      	sub	sp, #24
 8010650:	af00      	add	r7, sp, #0
 8010652:	6078      	str	r0, [r7, #4]
 8010654:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801065c:	2100      	movs	r1, #0
 801065e:	6878      	ldr	r0, [r7, #4]
 8010660:	f7ff feb4 	bl	80103cc <dir_sdi>
 8010664:	4603      	mov	r3, r0
 8010666:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010668:	7dfb      	ldrb	r3, [r7, #23]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d12b      	bne.n	80106c6 <dir_alloc+0x7a>
		n = 0;
 801066e:	2300      	movs	r3, #0
 8010670:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	69db      	ldr	r3, [r3, #28]
 8010676:	4619      	mov	r1, r3
 8010678:	68f8      	ldr	r0, [r7, #12]
 801067a:	f7ff fb29 	bl	800fcd0 <move_window>
 801067e:	4603      	mov	r3, r0
 8010680:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010682:	7dfb      	ldrb	r3, [r7, #23]
 8010684:	2b00      	cmp	r3, #0
 8010686:	d11d      	bne.n	80106c4 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6a1b      	ldr	r3, [r3, #32]
 801068c:	781b      	ldrb	r3, [r3, #0]
 801068e:	2be5      	cmp	r3, #229	; 0xe5
 8010690:	d004      	beq.n	801069c <dir_alloc+0x50>
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	6a1b      	ldr	r3, [r3, #32]
 8010696:	781b      	ldrb	r3, [r3, #0]
 8010698:	2b00      	cmp	r3, #0
 801069a:	d107      	bne.n	80106ac <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801069c:	693b      	ldr	r3, [r7, #16]
 801069e:	3301      	adds	r3, #1
 80106a0:	613b      	str	r3, [r7, #16]
 80106a2:	693a      	ldr	r2, [r7, #16]
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	429a      	cmp	r2, r3
 80106a8:	d102      	bne.n	80106b0 <dir_alloc+0x64>
 80106aa:	e00c      	b.n	80106c6 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80106ac:	2300      	movs	r3, #0
 80106ae:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80106b0:	2101      	movs	r1, #1
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f7ff ff05 	bl	80104c2 <dir_next>
 80106b8:	4603      	mov	r3, r0
 80106ba:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80106bc:	7dfb      	ldrb	r3, [r7, #23]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	d0d7      	beq.n	8010672 <dir_alloc+0x26>
 80106c2:	e000      	b.n	80106c6 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80106c4:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80106c6:	7dfb      	ldrb	r3, [r7, #23]
 80106c8:	2b04      	cmp	r3, #4
 80106ca:	d101      	bne.n	80106d0 <dir_alloc+0x84>
 80106cc:	2307      	movs	r3, #7
 80106ce:	75fb      	strb	r3, [r7, #23]
	return res;
 80106d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3718      	adds	r7, #24
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}

080106da <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80106da:	b580      	push	{r7, lr}
 80106dc:	b084      	sub	sp, #16
 80106de:	af00      	add	r7, sp, #0
 80106e0:	6078      	str	r0, [r7, #4]
 80106e2:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80106e4:	683b      	ldr	r3, [r7, #0]
 80106e6:	331a      	adds	r3, #26
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7ff f80f 	bl	800f70c <ld_word>
 80106ee:	4603      	mov	r3, r0
 80106f0:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	781b      	ldrb	r3, [r3, #0]
 80106f6:	2b03      	cmp	r3, #3
 80106f8:	d109      	bne.n	801070e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80106fa:	683b      	ldr	r3, [r7, #0]
 80106fc:	3314      	adds	r3, #20
 80106fe:	4618      	mov	r0, r3
 8010700:	f7ff f804 	bl	800f70c <ld_word>
 8010704:	4603      	mov	r3, r0
 8010706:	041b      	lsls	r3, r3, #16
 8010708:	68fa      	ldr	r2, [r7, #12]
 801070a:	4313      	orrs	r3, r2
 801070c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801070e:	68fb      	ldr	r3, [r7, #12]
}
 8010710:	4618      	mov	r0, r3
 8010712:	3710      	adds	r7, #16
 8010714:	46bd      	mov	sp, r7
 8010716:	bd80      	pop	{r7, pc}

08010718 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	60f8      	str	r0, [r7, #12]
 8010720:	60b9      	str	r1, [r7, #8]
 8010722:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010724:	68bb      	ldr	r3, [r7, #8]
 8010726:	331a      	adds	r3, #26
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	b292      	uxth	r2, r2
 801072c:	4611      	mov	r1, r2
 801072e:	4618      	mov	r0, r3
 8010730:	f7ff f827 	bl	800f782 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	781b      	ldrb	r3, [r3, #0]
 8010738:	2b03      	cmp	r3, #3
 801073a:	d109      	bne.n	8010750 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801073c:	68bb      	ldr	r3, [r7, #8]
 801073e:	f103 0214 	add.w	r2, r3, #20
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	0c1b      	lsrs	r3, r3, #16
 8010746:	b29b      	uxth	r3, r3
 8010748:	4619      	mov	r1, r3
 801074a:	4610      	mov	r0, r2
 801074c:	f7ff f819 	bl	800f782 <st_word>
	}
}
 8010750:	bf00      	nop
 8010752:	3710      	adds	r7, #16
 8010754:	46bd      	mov	sp, r7
 8010756:	bd80      	pop	{r7, pc}

08010758 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b086      	sub	sp, #24
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010766:	2100      	movs	r1, #0
 8010768:	6878      	ldr	r0, [r7, #4]
 801076a:	f7ff fe2f 	bl	80103cc <dir_sdi>
 801076e:	4603      	mov	r3, r0
 8010770:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010772:	7dfb      	ldrb	r3, [r7, #23]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d001      	beq.n	801077c <dir_find+0x24>
 8010778:	7dfb      	ldrb	r3, [r7, #23]
 801077a:	e03e      	b.n	80107fa <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	69db      	ldr	r3, [r3, #28]
 8010780:	4619      	mov	r1, r3
 8010782:	6938      	ldr	r0, [r7, #16]
 8010784:	f7ff faa4 	bl	800fcd0 <move_window>
 8010788:	4603      	mov	r3, r0
 801078a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801078c:	7dfb      	ldrb	r3, [r7, #23]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d12f      	bne.n	80107f2 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6a1b      	ldr	r3, [r3, #32]
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801079a:	7bfb      	ldrb	r3, [r7, #15]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d102      	bne.n	80107a6 <dir_find+0x4e>
 80107a0:	2304      	movs	r3, #4
 80107a2:	75fb      	strb	r3, [r7, #23]
 80107a4:	e028      	b.n	80107f8 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6a1b      	ldr	r3, [r3, #32]
 80107aa:	330b      	adds	r3, #11
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80107b2:	b2da      	uxtb	r2, r3
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	6a1b      	ldr	r3, [r3, #32]
 80107bc:	330b      	adds	r3, #11
 80107be:	781b      	ldrb	r3, [r3, #0]
 80107c0:	f003 0308 	and.w	r3, r3, #8
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d10a      	bne.n	80107de <dir_find+0x86>
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	6a18      	ldr	r0, [r3, #32]
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	3324      	adds	r3, #36	; 0x24
 80107d0:	220b      	movs	r2, #11
 80107d2:	4619      	mov	r1, r3
 80107d4:	f7ff f858 	bl	800f888 <mem_cmp>
 80107d8:	4603      	mov	r3, r0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00b      	beq.n	80107f6 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80107de:	2100      	movs	r1, #0
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7ff fe6e 	bl	80104c2 <dir_next>
 80107e6:	4603      	mov	r3, r0
 80107e8:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80107ea:	7dfb      	ldrb	r3, [r7, #23]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d0c5      	beq.n	801077c <dir_find+0x24>
 80107f0:	e002      	b.n	80107f8 <dir_find+0xa0>
		if (res != FR_OK) break;
 80107f2:	bf00      	nop
 80107f4:	e000      	b.n	80107f8 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80107f6:	bf00      	nop

	return res;
 80107f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80107fa:	4618      	mov	r0, r3
 80107fc:	3718      	adds	r7, #24
 80107fe:	46bd      	mov	sp, r7
 8010800:	bd80      	pop	{r7, pc}

08010802 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010802:	b580      	push	{r7, lr}
 8010804:	b084      	sub	sp, #16
 8010806:	af00      	add	r7, sp, #0
 8010808:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	681b      	ldr	r3, [r3, #0]
 801080e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010810:	2101      	movs	r1, #1
 8010812:	6878      	ldr	r0, [r7, #4]
 8010814:	f7ff ff1a 	bl	801064c <dir_alloc>
 8010818:	4603      	mov	r3, r0
 801081a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801081c:	7bfb      	ldrb	r3, [r7, #15]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d11c      	bne.n	801085c <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	69db      	ldr	r3, [r3, #28]
 8010826:	4619      	mov	r1, r3
 8010828:	68b8      	ldr	r0, [r7, #8]
 801082a:	f7ff fa51 	bl	800fcd0 <move_window>
 801082e:	4603      	mov	r3, r0
 8010830:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010832:	7bfb      	ldrb	r3, [r7, #15]
 8010834:	2b00      	cmp	r3, #0
 8010836:	d111      	bne.n	801085c <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	6a1b      	ldr	r3, [r3, #32]
 801083c:	2220      	movs	r2, #32
 801083e:	2100      	movs	r1, #0
 8010840:	4618      	mov	r0, r3
 8010842:	f7ff f806 	bl	800f852 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	6a18      	ldr	r0, [r3, #32]
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	3324      	adds	r3, #36	; 0x24
 801084e:	220b      	movs	r2, #11
 8010850:	4619      	mov	r1, r3
 8010852:	f7fe ffdd 	bl	800f810 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	2201      	movs	r2, #1
 801085a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801085c:	7bfb      	ldrb	r3, [r7, #15]
}
 801085e:	4618      	mov	r0, r3
 8010860:	3710      	adds	r7, #16
 8010862:	46bd      	mov	sp, r7
 8010864:	bd80      	pop	{r7, pc}

08010866 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010866:	b580      	push	{r7, lr}
 8010868:	b086      	sub	sp, #24
 801086a:	af00      	add	r7, sp, #0
 801086c:	6078      	str	r0, [r7, #4]
 801086e:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010870:	683b      	ldr	r3, [r7, #0]
 8010872:	2200      	movs	r2, #0
 8010874:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	69db      	ldr	r3, [r3, #28]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d04e      	beq.n	801091c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 801087e:	2300      	movs	r3, #0
 8010880:	613b      	str	r3, [r7, #16]
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8010886:	e021      	b.n	80108cc <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6a1a      	ldr	r2, [r3, #32]
 801088c:	697b      	ldr	r3, [r7, #20]
 801088e:	1c59      	adds	r1, r3, #1
 8010890:	6179      	str	r1, [r7, #20]
 8010892:	4413      	add	r3, r2
 8010894:	781b      	ldrb	r3, [r3, #0]
 8010896:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8010898:	7bfb      	ldrb	r3, [r7, #15]
 801089a:	2b20      	cmp	r3, #32
 801089c:	d100      	bne.n	80108a0 <get_fileinfo+0x3a>
 801089e:	e015      	b.n	80108cc <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80108a0:	7bfb      	ldrb	r3, [r7, #15]
 80108a2:	2b05      	cmp	r3, #5
 80108a4:	d101      	bne.n	80108aa <get_fileinfo+0x44>
 80108a6:	23e5      	movs	r3, #229	; 0xe5
 80108a8:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	2b09      	cmp	r3, #9
 80108ae:	d106      	bne.n	80108be <get_fileinfo+0x58>
 80108b0:	693b      	ldr	r3, [r7, #16]
 80108b2:	1c5a      	adds	r2, r3, #1
 80108b4:	613a      	str	r2, [r7, #16]
 80108b6:	683a      	ldr	r2, [r7, #0]
 80108b8:	4413      	add	r3, r2
 80108ba:	222e      	movs	r2, #46	; 0x2e
 80108bc:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	1c5a      	adds	r2, r3, #1
 80108c2:	613a      	str	r2, [r7, #16]
 80108c4:	683a      	ldr	r2, [r7, #0]
 80108c6:	4413      	add	r3, r2
 80108c8:	7bfa      	ldrb	r2, [r7, #15]
 80108ca:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	2b0a      	cmp	r3, #10
 80108d0:	d9da      	bls.n	8010888 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	693b      	ldr	r3, [r7, #16]
 80108d6:	4413      	add	r3, r2
 80108d8:	3309      	adds	r3, #9
 80108da:	2200      	movs	r2, #0
 80108dc:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	6a1b      	ldr	r3, [r3, #32]
 80108e2:	7ada      	ldrb	r2, [r3, #11]
 80108e4:	683b      	ldr	r3, [r7, #0]
 80108e6:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	6a1b      	ldr	r3, [r3, #32]
 80108ec:	331c      	adds	r3, #28
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fe ff24 	bl	800f73c <ld_dword>
 80108f4:	4602      	mov	r2, r0
 80108f6:	683b      	ldr	r3, [r7, #0]
 80108f8:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	6a1b      	ldr	r3, [r3, #32]
 80108fe:	3316      	adds	r3, #22
 8010900:	4618      	mov	r0, r3
 8010902:	f7fe ff1b 	bl	800f73c <ld_dword>
 8010906:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	b29a      	uxth	r2, r3
 801090c:	683b      	ldr	r3, [r7, #0]
 801090e:	80da      	strh	r2, [r3, #6]
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	0c1b      	lsrs	r3, r3, #16
 8010914:	b29a      	uxth	r2, r3
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	809a      	strh	r2, [r3, #4]
 801091a:	e000      	b.n	801091e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801091c:	bf00      	nop
}
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bd80      	pop	{r7, pc}

08010924 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b088      	sub	sp, #32
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
 801092c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	60fb      	str	r3, [r7, #12]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	3324      	adds	r3, #36	; 0x24
 8010938:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801093a:	220b      	movs	r2, #11
 801093c:	2120      	movs	r1, #32
 801093e:	68b8      	ldr	r0, [r7, #8]
 8010940:	f7fe ff87 	bl	800f852 <mem_set>
	si = i = 0; ni = 8;
 8010944:	2300      	movs	r3, #0
 8010946:	613b      	str	r3, [r7, #16]
 8010948:	693b      	ldr	r3, [r7, #16]
 801094a:	61fb      	str	r3, [r7, #28]
 801094c:	2308      	movs	r3, #8
 801094e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010950:	69fb      	ldr	r3, [r7, #28]
 8010952:	1c5a      	adds	r2, r3, #1
 8010954:	61fa      	str	r2, [r7, #28]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	4413      	add	r3, r2
 801095a:	781b      	ldrb	r3, [r3, #0]
 801095c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801095e:	7efb      	ldrb	r3, [r7, #27]
 8010960:	2b20      	cmp	r3, #32
 8010962:	d94e      	bls.n	8010a02 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010964:	7efb      	ldrb	r3, [r7, #27]
 8010966:	2b2f      	cmp	r3, #47	; 0x2f
 8010968:	d006      	beq.n	8010978 <create_name+0x54>
 801096a:	7efb      	ldrb	r3, [r7, #27]
 801096c:	2b5c      	cmp	r3, #92	; 0x5c
 801096e:	d110      	bne.n	8010992 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010970:	e002      	b.n	8010978 <create_name+0x54>
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	3301      	adds	r3, #1
 8010976:	61fb      	str	r3, [r7, #28]
 8010978:	68fa      	ldr	r2, [r7, #12]
 801097a:	69fb      	ldr	r3, [r7, #28]
 801097c:	4413      	add	r3, r2
 801097e:	781b      	ldrb	r3, [r3, #0]
 8010980:	2b2f      	cmp	r3, #47	; 0x2f
 8010982:	d0f6      	beq.n	8010972 <create_name+0x4e>
 8010984:	68fa      	ldr	r2, [r7, #12]
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	4413      	add	r3, r2
 801098a:	781b      	ldrb	r3, [r3, #0]
 801098c:	2b5c      	cmp	r3, #92	; 0x5c
 801098e:	d0f0      	beq.n	8010972 <create_name+0x4e>
			break;
 8010990:	e038      	b.n	8010a04 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010992:	7efb      	ldrb	r3, [r7, #27]
 8010994:	2b2e      	cmp	r3, #46	; 0x2e
 8010996:	d003      	beq.n	80109a0 <create_name+0x7c>
 8010998:	693a      	ldr	r2, [r7, #16]
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	429a      	cmp	r2, r3
 801099e:	d30c      	bcc.n	80109ba <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	2b0b      	cmp	r3, #11
 80109a4:	d002      	beq.n	80109ac <create_name+0x88>
 80109a6:	7efb      	ldrb	r3, [r7, #27]
 80109a8:	2b2e      	cmp	r3, #46	; 0x2e
 80109aa:	d001      	beq.n	80109b0 <create_name+0x8c>
 80109ac:	2306      	movs	r3, #6
 80109ae:	e044      	b.n	8010a3a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80109b0:	2308      	movs	r3, #8
 80109b2:	613b      	str	r3, [r7, #16]
 80109b4:	230b      	movs	r3, #11
 80109b6:	617b      	str	r3, [r7, #20]
			continue;
 80109b8:	e022      	b.n	8010a00 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80109ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	da04      	bge.n	80109cc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80109c2:	7efb      	ldrb	r3, [r7, #27]
 80109c4:	3b80      	subs	r3, #128	; 0x80
 80109c6:	4a1f      	ldr	r2, [pc, #124]	; (8010a44 <create_name+0x120>)
 80109c8:	5cd3      	ldrb	r3, [r2, r3]
 80109ca:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80109cc:	7efb      	ldrb	r3, [r7, #27]
 80109ce:	4619      	mov	r1, r3
 80109d0:	481d      	ldr	r0, [pc, #116]	; (8010a48 <create_name+0x124>)
 80109d2:	f7fe ff80 	bl	800f8d6 <chk_chr>
 80109d6:	4603      	mov	r3, r0
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d001      	beq.n	80109e0 <create_name+0xbc>
 80109dc:	2306      	movs	r3, #6
 80109de:	e02c      	b.n	8010a3a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80109e0:	7efb      	ldrb	r3, [r7, #27]
 80109e2:	2b60      	cmp	r3, #96	; 0x60
 80109e4:	d905      	bls.n	80109f2 <create_name+0xce>
 80109e6:	7efb      	ldrb	r3, [r7, #27]
 80109e8:	2b7a      	cmp	r3, #122	; 0x7a
 80109ea:	d802      	bhi.n	80109f2 <create_name+0xce>
 80109ec:	7efb      	ldrb	r3, [r7, #27]
 80109ee:	3b20      	subs	r3, #32
 80109f0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80109f2:	693b      	ldr	r3, [r7, #16]
 80109f4:	1c5a      	adds	r2, r3, #1
 80109f6:	613a      	str	r2, [r7, #16]
 80109f8:	68ba      	ldr	r2, [r7, #8]
 80109fa:	4413      	add	r3, r2
 80109fc:	7efa      	ldrb	r2, [r7, #27]
 80109fe:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8010a00:	e7a6      	b.n	8010950 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010a02:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8010a04:	68fa      	ldr	r2, [r7, #12]
 8010a06:	69fb      	ldr	r3, [r7, #28]
 8010a08:	441a      	add	r2, r3
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d101      	bne.n	8010a18 <create_name+0xf4>
 8010a14:	2306      	movs	r3, #6
 8010a16:	e010      	b.n	8010a3a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010a18:	68bb      	ldr	r3, [r7, #8]
 8010a1a:	781b      	ldrb	r3, [r3, #0]
 8010a1c:	2be5      	cmp	r3, #229	; 0xe5
 8010a1e:	d102      	bne.n	8010a26 <create_name+0x102>
 8010a20:	68bb      	ldr	r3, [r7, #8]
 8010a22:	2205      	movs	r2, #5
 8010a24:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8010a26:	7efb      	ldrb	r3, [r7, #27]
 8010a28:	2b20      	cmp	r3, #32
 8010a2a:	d801      	bhi.n	8010a30 <create_name+0x10c>
 8010a2c:	2204      	movs	r2, #4
 8010a2e:	e000      	b.n	8010a32 <create_name+0x10e>
 8010a30:	2200      	movs	r2, #0
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	330b      	adds	r3, #11
 8010a36:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8010a38:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8010a3a:	4618      	mov	r0, r3
 8010a3c:	3720      	adds	r7, #32
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd80      	pop	{r7, pc}
 8010a42:	bf00      	nop
 8010a44:	0801b5a4 	.word	0x0801b5a4
 8010a48:	0801b344 	.word	0x0801b344

08010a4c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b086      	sub	sp, #24
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010a60:	e002      	b.n	8010a68 <follow_path+0x1c>
 8010a62:	683b      	ldr	r3, [r7, #0]
 8010a64:	3301      	adds	r3, #1
 8010a66:	603b      	str	r3, [r7, #0]
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	781b      	ldrb	r3, [r3, #0]
 8010a6c:	2b2f      	cmp	r3, #47	; 0x2f
 8010a6e:	d0f8      	beq.n	8010a62 <follow_path+0x16>
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	781b      	ldrb	r3, [r3, #0]
 8010a74:	2b5c      	cmp	r3, #92	; 0x5c
 8010a76:	d0f4      	beq.n	8010a62 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010a78:	693b      	ldr	r3, [r7, #16]
 8010a7a:	2200      	movs	r2, #0
 8010a7c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	781b      	ldrb	r3, [r3, #0]
 8010a82:	2b1f      	cmp	r3, #31
 8010a84:	d80a      	bhi.n	8010a9c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2280      	movs	r2, #128	; 0x80
 8010a8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010a8e:	2100      	movs	r1, #0
 8010a90:	6878      	ldr	r0, [r7, #4]
 8010a92:	f7ff fc9b 	bl	80103cc <dir_sdi>
 8010a96:	4603      	mov	r3, r0
 8010a98:	75fb      	strb	r3, [r7, #23]
 8010a9a:	e043      	b.n	8010b24 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010a9c:	463b      	mov	r3, r7
 8010a9e:	4619      	mov	r1, r3
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff ff3f 	bl	8010924 <create_name>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010aaa:	7dfb      	ldrb	r3, [r7, #23]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d134      	bne.n	8010b1a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f7ff fe51 	bl	8010758 <dir_find>
 8010ab6:	4603      	mov	r3, r0
 8010ab8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010ac0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010ac2:	7dfb      	ldrb	r3, [r7, #23]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00a      	beq.n	8010ade <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010ac8:	7dfb      	ldrb	r3, [r7, #23]
 8010aca:	2b04      	cmp	r3, #4
 8010acc:	d127      	bne.n	8010b1e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010ace:	7afb      	ldrb	r3, [r7, #11]
 8010ad0:	f003 0304 	and.w	r3, r3, #4
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d122      	bne.n	8010b1e <follow_path+0xd2>
 8010ad8:	2305      	movs	r3, #5
 8010ada:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010adc:	e01f      	b.n	8010b1e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010ade:	7afb      	ldrb	r3, [r7, #11]
 8010ae0:	f003 0304 	and.w	r3, r3, #4
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d11c      	bne.n	8010b22 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010ae8:	693b      	ldr	r3, [r7, #16]
 8010aea:	799b      	ldrb	r3, [r3, #6]
 8010aec:	f003 0310 	and.w	r3, r3, #16
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d102      	bne.n	8010afa <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010af4:	2305      	movs	r3, #5
 8010af6:	75fb      	strb	r3, [r7, #23]
 8010af8:	e014      	b.n	8010b24 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	695b      	ldr	r3, [r3, #20]
 8010b04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b08:	4413      	add	r3, r2
 8010b0a:	4619      	mov	r1, r3
 8010b0c:	68f8      	ldr	r0, [r7, #12]
 8010b0e:	f7ff fde4 	bl	80106da <ld_clust>
 8010b12:	4602      	mov	r2, r0
 8010b14:	693b      	ldr	r3, [r7, #16]
 8010b16:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010b18:	e7c0      	b.n	8010a9c <follow_path+0x50>
			if (res != FR_OK) break;
 8010b1a:	bf00      	nop
 8010b1c:	e002      	b.n	8010b24 <follow_path+0xd8>
				break;
 8010b1e:	bf00      	nop
 8010b20:	e000      	b.n	8010b24 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010b22:	bf00      	nop
			}
		}
	}

	return res;
 8010b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b26:	4618      	mov	r0, r3
 8010b28:	3718      	adds	r7, #24
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010b2e:	b480      	push	{r7}
 8010b30:	b087      	sub	sp, #28
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010b36:	f04f 33ff 	mov.w	r3, #4294967295
 8010b3a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d031      	beq.n	8010ba8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	617b      	str	r3, [r7, #20]
 8010b4a:	e002      	b.n	8010b52 <get_ldnumber+0x24>
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	3301      	adds	r3, #1
 8010b50:	617b      	str	r3, [r7, #20]
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	781b      	ldrb	r3, [r3, #0]
 8010b56:	2b20      	cmp	r3, #32
 8010b58:	d903      	bls.n	8010b62 <get_ldnumber+0x34>
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	2b3a      	cmp	r3, #58	; 0x3a
 8010b60:	d1f4      	bne.n	8010b4c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	2b3a      	cmp	r3, #58	; 0x3a
 8010b68:	d11c      	bne.n	8010ba4 <get_ldnumber+0x76>
			tp = *path;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	681b      	ldr	r3, [r3, #0]
 8010b6e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	1c5a      	adds	r2, r3, #1
 8010b74:	60fa      	str	r2, [r7, #12]
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	3b30      	subs	r3, #48	; 0x30
 8010b7a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010b7c:	68bb      	ldr	r3, [r7, #8]
 8010b7e:	2b09      	cmp	r3, #9
 8010b80:	d80e      	bhi.n	8010ba0 <get_ldnumber+0x72>
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	697b      	ldr	r3, [r7, #20]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d10a      	bne.n	8010ba0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d107      	bne.n	8010ba0 <get_ldnumber+0x72>
					vol = (int)i;
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010b94:	697b      	ldr	r3, [r7, #20]
 8010b96:	3301      	adds	r3, #1
 8010b98:	617b      	str	r3, [r7, #20]
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	697a      	ldr	r2, [r7, #20]
 8010b9e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010ba0:	693b      	ldr	r3, [r7, #16]
 8010ba2:	e002      	b.n	8010baa <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010ba8:	693b      	ldr	r3, [r7, #16]
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	371c      	adds	r7, #28
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr
	...

08010bb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b082      	sub	sp, #8
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	70da      	strb	r2, [r3, #3]
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f04f 32ff 	mov.w	r2, #4294967295
 8010bce:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010bd0:	6839      	ldr	r1, [r7, #0]
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f7ff f87c 	bl	800fcd0 <move_window>
 8010bd8:	4603      	mov	r3, r0
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d001      	beq.n	8010be2 <check_fs+0x2a>
 8010bde:	2304      	movs	r3, #4
 8010be0:	e038      	b.n	8010c54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	3334      	adds	r3, #52	; 0x34
 8010be6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7fe fd8e 	bl	800f70c <ld_word>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010bf8:	429a      	cmp	r2, r3
 8010bfa:	d001      	beq.n	8010c00 <check_fs+0x48>
 8010bfc:	2303      	movs	r3, #3
 8010bfe:	e029      	b.n	8010c54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c06:	2be9      	cmp	r3, #233	; 0xe9
 8010c08:	d009      	beq.n	8010c1e <check_fs+0x66>
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010c10:	2beb      	cmp	r3, #235	; 0xeb
 8010c12:	d11e      	bne.n	8010c52 <check_fs+0x9a>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8010c1a:	2b90      	cmp	r3, #144	; 0x90
 8010c1c:	d119      	bne.n	8010c52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	3334      	adds	r3, #52	; 0x34
 8010c22:	3336      	adds	r3, #54	; 0x36
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fe fd89 	bl	800f73c <ld_dword>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010c30:	4a0a      	ldr	r2, [pc, #40]	; (8010c5c <check_fs+0xa4>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d101      	bne.n	8010c3a <check_fs+0x82>
 8010c36:	2300      	movs	r3, #0
 8010c38:	e00c      	b.n	8010c54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	3334      	adds	r3, #52	; 0x34
 8010c3e:	3352      	adds	r3, #82	; 0x52
 8010c40:	4618      	mov	r0, r3
 8010c42:	f7fe fd7b 	bl	800f73c <ld_dword>
 8010c46:	4603      	mov	r3, r0
 8010c48:	4a05      	ldr	r2, [pc, #20]	; (8010c60 <check_fs+0xa8>)
 8010c4a:	4293      	cmp	r3, r2
 8010c4c:	d101      	bne.n	8010c52 <check_fs+0x9a>
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e000      	b.n	8010c54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010c52:	2302      	movs	r3, #2
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	00544146 	.word	0x00544146
 8010c60:	33544146 	.word	0x33544146

08010c64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b096      	sub	sp, #88	; 0x58
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	60f8      	str	r0, [r7, #12]
 8010c6c:	60b9      	str	r1, [r7, #8]
 8010c6e:	4613      	mov	r3, r2
 8010c70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	2200      	movs	r2, #0
 8010c76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010c78:	68f8      	ldr	r0, [r7, #12]
 8010c7a:	f7ff ff58 	bl	8010b2e <get_ldnumber>
 8010c7e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c82:	2b00      	cmp	r3, #0
 8010c84:	da01      	bge.n	8010c8a <find_volume+0x26>
 8010c86:	230b      	movs	r3, #11
 8010c88:	e235      	b.n	80110f6 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010c8a:	4aa5      	ldr	r2, [pc, #660]	; (8010f20 <find_volume+0x2bc>)
 8010c8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c92:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d101      	bne.n	8010c9e <find_volume+0x3a>
 8010c9a:	230c      	movs	r3, #12
 8010c9c:	e22b      	b.n	80110f6 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 8010c9e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ca0:	f7fe fe34 	bl	800f90c <lock_fs>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d101      	bne.n	8010cae <find_volume+0x4a>
 8010caa:	230f      	movs	r3, #15
 8010cac:	e223      	b.n	80110f6 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 8010cae:	68bb      	ldr	r3, [r7, #8]
 8010cb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010cb2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010cb4:	79fb      	ldrb	r3, [r7, #7]
 8010cb6:	f023 0301 	bic.w	r3, r3, #1
 8010cba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cbe:	781b      	ldrb	r3, [r3, #0]
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d01a      	beq.n	8010cfa <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc6:	785b      	ldrb	r3, [r3, #1]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fe fc7f 	bl	800f5cc <disk_status>
 8010cce:	4603      	mov	r3, r0
 8010cd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010cd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cd8:	f003 0301 	and.w	r3, r3, #1
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d10c      	bne.n	8010cfa <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010ce0:	79fb      	ldrb	r3, [r7, #7]
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d007      	beq.n	8010cf6 <find_volume+0x92>
 8010ce6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cea:	f003 0304 	and.w	r3, r3, #4
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d001      	beq.n	8010cf6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010cf2:	230a      	movs	r3, #10
 8010cf4:	e1ff      	b.n	80110f6 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8010cf6:	2300      	movs	r3, #0
 8010cf8:	e1fd      	b.n	80110f6 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cfc:	2200      	movs	r2, #0
 8010cfe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d02:	b2da      	uxtb	r2, r3
 8010d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d0a:	785b      	ldrb	r3, [r3, #1]
 8010d0c:	4618      	mov	r0, r3
 8010d0e:	f7fe fc77 	bl	800f600 <disk_initialize>
 8010d12:	4603      	mov	r3, r0
 8010d14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010d18:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d1c:	f003 0301 	and.w	r3, r3, #1
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d001      	beq.n	8010d28 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010d24:	2303      	movs	r3, #3
 8010d26:	e1e6      	b.n	80110f6 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010d28:	79fb      	ldrb	r3, [r7, #7]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d007      	beq.n	8010d3e <find_volume+0xda>
 8010d2e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010d32:	f003 0304 	and.w	r3, r3, #4
 8010d36:	2b00      	cmp	r3, #0
 8010d38:	d001      	beq.n	8010d3e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010d3a:	230a      	movs	r3, #10
 8010d3c:	e1db      	b.n	80110f6 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010d42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010d44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010d46:	f7ff ff37 	bl	8010bb8 <check_fs>
 8010d4a:	4603      	mov	r3, r0
 8010d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010d54:	2b02      	cmp	r3, #2
 8010d56:	d149      	bne.n	8010dec <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d58:	2300      	movs	r3, #0
 8010d5a:	643b      	str	r3, [r7, #64]	; 0x40
 8010d5c:	e01e      	b.n	8010d9c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d66:	011b      	lsls	r3, r3, #4
 8010d68:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010d6c:	4413      	add	r3, r2
 8010d6e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d72:	3304      	adds	r3, #4
 8010d74:	781b      	ldrb	r3, [r3, #0]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d006      	beq.n	8010d88 <find_volume+0x124>
 8010d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fe fcdc 	bl	800f73c <ld_dword>
 8010d84:	4602      	mov	r2, r0
 8010d86:	e000      	b.n	8010d8a <find_volume+0x126>
 8010d88:	2200      	movs	r2, #0
 8010d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d8c:	009b      	lsls	r3, r3, #2
 8010d8e:	3358      	adds	r3, #88	; 0x58
 8010d90:	443b      	add	r3, r7
 8010d92:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d98:	3301      	adds	r3, #1
 8010d9a:	643b      	str	r3, [r7, #64]	; 0x40
 8010d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d9e:	2b03      	cmp	r3, #3
 8010da0:	d9dd      	bls.n	8010d5e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010da2:	2300      	movs	r3, #0
 8010da4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d002      	beq.n	8010db2 <find_volume+0x14e>
 8010dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dae:	3b01      	subs	r3, #1
 8010db0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010db4:	009b      	lsls	r3, r3, #2
 8010db6:	3358      	adds	r3, #88	; 0x58
 8010db8:	443b      	add	r3, r7
 8010dba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010dbe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010dc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d005      	beq.n	8010dd2 <find_volume+0x16e>
 8010dc6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010dc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010dca:	f7ff fef5 	bl	8010bb8 <check_fs>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	e000      	b.n	8010dd4 <find_volume+0x170>
 8010dd2:	2303      	movs	r3, #3
 8010dd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010dd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	d905      	bls.n	8010dec <find_volume+0x188>
 8010de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010de2:	3301      	adds	r3, #1
 8010de4:	643b      	str	r3, [r7, #64]	; 0x40
 8010de6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010de8:	2b03      	cmp	r3, #3
 8010dea:	d9e2      	bls.n	8010db2 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010dec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010df0:	2b04      	cmp	r3, #4
 8010df2:	d101      	bne.n	8010df8 <find_volume+0x194>
 8010df4:	2301      	movs	r3, #1
 8010df6:	e17e      	b.n	80110f6 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010df8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010dfc:	2b01      	cmp	r3, #1
 8010dfe:	d901      	bls.n	8010e04 <find_volume+0x1a0>
 8010e00:	230d      	movs	r3, #13
 8010e02:	e178      	b.n	80110f6 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e06:	3334      	adds	r3, #52	; 0x34
 8010e08:	330b      	adds	r3, #11
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f7fe fc7e 	bl	800f70c <ld_word>
 8010e10:	4603      	mov	r3, r0
 8010e12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e16:	d001      	beq.n	8010e1c <find_volume+0x1b8>
 8010e18:	230d      	movs	r3, #13
 8010e1a:	e16c      	b.n	80110f6 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010e1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e1e:	3334      	adds	r3, #52	; 0x34
 8010e20:	3316      	adds	r3, #22
 8010e22:	4618      	mov	r0, r3
 8010e24:	f7fe fc72 	bl	800f70c <ld_word>
 8010e28:	4603      	mov	r3, r0
 8010e2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010e2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d106      	bne.n	8010e40 <find_volume+0x1dc>
 8010e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e34:	3334      	adds	r3, #52	; 0x34
 8010e36:	3324      	adds	r3, #36	; 0x24
 8010e38:	4618      	mov	r0, r3
 8010e3a:	f7fe fc7f 	bl	800f73c <ld_dword>
 8010e3e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e44:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8010e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e48:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e52:	789b      	ldrb	r3, [r3, #2]
 8010e54:	2b01      	cmp	r3, #1
 8010e56:	d005      	beq.n	8010e64 <find_volume+0x200>
 8010e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e5a:	789b      	ldrb	r3, [r3, #2]
 8010e5c:	2b02      	cmp	r3, #2
 8010e5e:	d001      	beq.n	8010e64 <find_volume+0x200>
 8010e60:	230d      	movs	r3, #13
 8010e62:	e148      	b.n	80110f6 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e66:	789b      	ldrb	r3, [r3, #2]
 8010e68:	461a      	mov	r2, r3
 8010e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010e6c:	fb02 f303 	mul.w	r3, r2, r3
 8010e70:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010e78:	b29a      	uxth	r2, r3
 8010e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e80:	895b      	ldrh	r3, [r3, #10]
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d008      	beq.n	8010e98 <find_volume+0x234>
 8010e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e88:	895b      	ldrh	r3, [r3, #10]
 8010e8a:	461a      	mov	r2, r3
 8010e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e8e:	895b      	ldrh	r3, [r3, #10]
 8010e90:	3b01      	subs	r3, #1
 8010e92:	4013      	ands	r3, r2
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d001      	beq.n	8010e9c <find_volume+0x238>
 8010e98:	230d      	movs	r3, #13
 8010e9a:	e12c      	b.n	80110f6 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e9e:	3334      	adds	r3, #52	; 0x34
 8010ea0:	3311      	adds	r3, #17
 8010ea2:	4618      	mov	r0, r3
 8010ea4:	f7fe fc32 	bl	800f70c <ld_word>
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	461a      	mov	r2, r3
 8010eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eb2:	891b      	ldrh	r3, [r3, #8]
 8010eb4:	f003 030f 	and.w	r3, r3, #15
 8010eb8:	b29b      	uxth	r3, r3
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d001      	beq.n	8010ec2 <find_volume+0x25e>
 8010ebe:	230d      	movs	r3, #13
 8010ec0:	e119      	b.n	80110f6 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010ec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ec4:	3334      	adds	r3, #52	; 0x34
 8010ec6:	3313      	adds	r3, #19
 8010ec8:	4618      	mov	r0, r3
 8010eca:	f7fe fc1f 	bl	800f70c <ld_word>
 8010ece:	4603      	mov	r3, r0
 8010ed0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010ed2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d106      	bne.n	8010ee6 <find_volume+0x282>
 8010ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eda:	3334      	adds	r3, #52	; 0x34
 8010edc:	3320      	adds	r3, #32
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7fe fc2c 	bl	800f73c <ld_dword>
 8010ee4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee8:	3334      	adds	r3, #52	; 0x34
 8010eea:	330e      	adds	r3, #14
 8010eec:	4618      	mov	r0, r3
 8010eee:	f7fe fc0d 	bl	800f70c <ld_word>
 8010ef2:	4603      	mov	r3, r0
 8010ef4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010ef6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d101      	bne.n	8010f00 <find_volume+0x29c>
 8010efc:	230d      	movs	r3, #13
 8010efe:	e0fa      	b.n	80110f6 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010f00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f04:	4413      	add	r3, r2
 8010f06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f08:	8912      	ldrh	r2, [r2, #8]
 8010f0a:	0912      	lsrs	r2, r2, #4
 8010f0c:	b292      	uxth	r2, r2
 8010f0e:	4413      	add	r3, r2
 8010f10:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010f12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d204      	bcs.n	8010f24 <find_volume+0x2c0>
 8010f1a:	230d      	movs	r3, #13
 8010f1c:	e0eb      	b.n	80110f6 <find_volume+0x492>
 8010f1e:	bf00      	nop
 8010f20:	20001154 	.word	0x20001154
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f28:	1ad3      	subs	r3, r2, r3
 8010f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010f2c:	8952      	ldrh	r2, [r2, #10]
 8010f2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f32:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d101      	bne.n	8010f3e <find_volume+0x2da>
 8010f3a:	230d      	movs	r3, #13
 8010f3c:	e0db      	b.n	80110f6 <find_volume+0x492>
		fmt = FS_FAT32;
 8010f3e:	2303      	movs	r3, #3
 8010f40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f46:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010f4a:	4293      	cmp	r3, r2
 8010f4c:	d802      	bhi.n	8010f54 <find_volume+0x2f0>
 8010f4e:	2302      	movs	r3, #2
 8010f50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f56:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d802      	bhi.n	8010f64 <find_volume+0x300>
 8010f5e:	2301      	movs	r3, #1
 8010f60:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f66:	1c9a      	adds	r2, r3, #2
 8010f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6a:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f70:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010f72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010f76:	441a      	add	r2, r3
 8010f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f7a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010f7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f80:	441a      	add	r2, r3
 8010f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f84:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f8a:	2b03      	cmp	r3, #3
 8010f8c:	d11e      	bne.n	8010fcc <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f90:	3334      	adds	r3, #52	; 0x34
 8010f92:	332a      	adds	r3, #42	; 0x2a
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7fe fbb9 	bl	800f70c <ld_word>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d001      	beq.n	8010fa4 <find_volume+0x340>
 8010fa0:	230d      	movs	r3, #13
 8010fa2:	e0a8      	b.n	80110f6 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fa6:	891b      	ldrh	r3, [r3, #8]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d001      	beq.n	8010fb0 <find_volume+0x34c>
 8010fac:	230d      	movs	r3, #13
 8010fae:	e0a2      	b.n	80110f6 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fb2:	3334      	adds	r3, #52	; 0x34
 8010fb4:	332c      	adds	r3, #44	; 0x2c
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7fe fbc0 	bl	800f73c <ld_dword>
 8010fbc:	4602      	mov	r2, r0
 8010fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fc4:	699b      	ldr	r3, [r3, #24]
 8010fc6:	009b      	lsls	r3, r3, #2
 8010fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8010fca:	e01f      	b.n	801100c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fce:	891b      	ldrh	r3, [r3, #8]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d101      	bne.n	8010fd8 <find_volume+0x374>
 8010fd4:	230d      	movs	r3, #13
 8010fd6:	e08e      	b.n	80110f6 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fde:	441a      	add	r2, r3
 8010fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fe2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010fe4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010fe8:	2b02      	cmp	r3, #2
 8010fea:	d103      	bne.n	8010ff4 <find_volume+0x390>
 8010fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010fee:	699b      	ldr	r3, [r3, #24]
 8010ff0:	005b      	lsls	r3, r3, #1
 8010ff2:	e00a      	b.n	801100a <find_volume+0x3a6>
 8010ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ff6:	699a      	ldr	r2, [r3, #24]
 8010ff8:	4613      	mov	r3, r2
 8010ffa:	005b      	lsls	r3, r3, #1
 8010ffc:	4413      	add	r3, r2
 8010ffe:	085a      	lsrs	r2, r3, #1
 8011000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011002:	699b      	ldr	r3, [r3, #24]
 8011004:	f003 0301 	and.w	r3, r3, #1
 8011008:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801100a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100e:	69da      	ldr	r2, [r3, #28]
 8011010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011012:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011016:	0a5b      	lsrs	r3, r3, #9
 8011018:	429a      	cmp	r2, r3
 801101a:	d201      	bcs.n	8011020 <find_volume+0x3bc>
 801101c:	230d      	movs	r3, #13
 801101e:	e06a      	b.n	80110f6 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011022:	f04f 32ff 	mov.w	r2, #4294967295
 8011026:	615a      	str	r2, [r3, #20]
 8011028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102a:	695a      	ldr	r2, [r3, #20]
 801102c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801102e:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8011030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011032:	2280      	movs	r2, #128	; 0x80
 8011034:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011036:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801103a:	2b03      	cmp	r3, #3
 801103c:	d149      	bne.n	80110d2 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801103e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011040:	3334      	adds	r3, #52	; 0x34
 8011042:	3330      	adds	r3, #48	; 0x30
 8011044:	4618      	mov	r0, r3
 8011046:	f7fe fb61 	bl	800f70c <ld_word>
 801104a:	4603      	mov	r3, r0
 801104c:	2b01      	cmp	r3, #1
 801104e:	d140      	bne.n	80110d2 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011050:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011052:	3301      	adds	r3, #1
 8011054:	4619      	mov	r1, r3
 8011056:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011058:	f7fe fe3a 	bl	800fcd0 <move_window>
 801105c:	4603      	mov	r3, r0
 801105e:	2b00      	cmp	r3, #0
 8011060:	d137      	bne.n	80110d2 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 8011062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011064:	2200      	movs	r2, #0
 8011066:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106a:	3334      	adds	r3, #52	; 0x34
 801106c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011070:	4618      	mov	r0, r3
 8011072:	f7fe fb4b 	bl	800f70c <ld_word>
 8011076:	4603      	mov	r3, r0
 8011078:	461a      	mov	r2, r3
 801107a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801107e:	429a      	cmp	r2, r3
 8011080:	d127      	bne.n	80110d2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011084:	3334      	adds	r3, #52	; 0x34
 8011086:	4618      	mov	r0, r3
 8011088:	f7fe fb58 	bl	800f73c <ld_dword>
 801108c:	4603      	mov	r3, r0
 801108e:	4a1c      	ldr	r2, [pc, #112]	; (8011100 <find_volume+0x49c>)
 8011090:	4293      	cmp	r3, r2
 8011092:	d11e      	bne.n	80110d2 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011096:	3334      	adds	r3, #52	; 0x34
 8011098:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801109c:	4618      	mov	r0, r3
 801109e:	f7fe fb4d 	bl	800f73c <ld_dword>
 80110a2:	4603      	mov	r3, r0
 80110a4:	4a17      	ldr	r2, [pc, #92]	; (8011104 <find_volume+0x4a0>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d113      	bne.n	80110d2 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80110aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ac:	3334      	adds	r3, #52	; 0x34
 80110ae:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80110b2:	4618      	mov	r0, r3
 80110b4:	f7fe fb42 	bl	800f73c <ld_dword>
 80110b8:	4602      	mov	r2, r0
 80110ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110bc:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80110be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c0:	3334      	adds	r3, #52	; 0x34
 80110c2:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80110c6:	4618      	mov	r0, r3
 80110c8:	f7fe fb38 	bl	800f73c <ld_dword>
 80110cc:	4602      	mov	r2, r0
 80110ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d0:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80110d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d4:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80110d8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80110da:	4b0b      	ldr	r3, [pc, #44]	; (8011108 <find_volume+0x4a4>)
 80110dc:	881b      	ldrh	r3, [r3, #0]
 80110de:	3301      	adds	r3, #1
 80110e0:	b29a      	uxth	r2, r3
 80110e2:	4b09      	ldr	r3, [pc, #36]	; (8011108 <find_volume+0x4a4>)
 80110e4:	801a      	strh	r2, [r3, #0]
 80110e6:	4b08      	ldr	r3, [pc, #32]	; (8011108 <find_volume+0x4a4>)
 80110e8:	881a      	ldrh	r2, [r3, #0]
 80110ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110ec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80110ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80110f0:	f7fe fd86 	bl	800fc00 <clear_lock>
#endif
	return FR_OK;
 80110f4:	2300      	movs	r3, #0
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3758      	adds	r7, #88	; 0x58
 80110fa:	46bd      	mov	sp, r7
 80110fc:	bd80      	pop	{r7, pc}
 80110fe:	bf00      	nop
 8011100:	41615252 	.word	0x41615252
 8011104:	61417272 	.word	0x61417272
 8011108:	20001158 	.word	0x20001158

0801110c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011116:	2309      	movs	r3, #9
 8011118:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2b00      	cmp	r3, #0
 801111e:	d02e      	beq.n	801117e <validate+0x72>
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d02a      	beq.n	801117e <validate+0x72>
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	781b      	ldrb	r3, [r3, #0]
 801112e:	2b00      	cmp	r3, #0
 8011130:	d025      	beq.n	801117e <validate+0x72>
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	889a      	ldrh	r2, [r3, #4]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	88db      	ldrh	r3, [r3, #6]
 801113c:	429a      	cmp	r2, r3
 801113e:	d11e      	bne.n	801117e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	4618      	mov	r0, r3
 8011146:	f7fe fbe1 	bl	800f90c <lock_fs>
 801114a:	4603      	mov	r3, r0
 801114c:	2b00      	cmp	r3, #0
 801114e:	d014      	beq.n	801117a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	785b      	ldrb	r3, [r3, #1]
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fa38 	bl	800f5cc <disk_status>
 801115c:	4603      	mov	r3, r0
 801115e:	f003 0301 	and.w	r3, r3, #1
 8011162:	2b00      	cmp	r3, #0
 8011164:	d102      	bne.n	801116c <validate+0x60>
				res = FR_OK;
 8011166:	2300      	movs	r3, #0
 8011168:	73fb      	strb	r3, [r7, #15]
 801116a:	e008      	b.n	801117e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	681b      	ldr	r3, [r3, #0]
 8011170:	2100      	movs	r1, #0
 8011172:	4618      	mov	r0, r3
 8011174:	f7fe fbe0 	bl	800f938 <unlock_fs>
 8011178:	e001      	b.n	801117e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 801117a:	230f      	movs	r3, #15
 801117c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801117e:	7bfb      	ldrb	r3, [r7, #15]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d102      	bne.n	801118a <validate+0x7e>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	e000      	b.n	801118c <validate+0x80>
 801118a:	2300      	movs	r3, #0
 801118c:	683a      	ldr	r2, [r7, #0]
 801118e:	6013      	str	r3, [r2, #0]
	return res;
 8011190:	7bfb      	ldrb	r3, [r7, #15]
}
 8011192:	4618      	mov	r0, r3
 8011194:	3710      	adds	r7, #16
 8011196:	46bd      	mov	sp, r7
 8011198:	bd80      	pop	{r7, pc}
	...

0801119c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b088      	sub	sp, #32
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	60f8      	str	r0, [r7, #12]
 80111a4:	60b9      	str	r1, [r7, #8]
 80111a6:	4613      	mov	r3, r2
 80111a8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80111aa:	68bb      	ldr	r3, [r7, #8]
 80111ac:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80111ae:	f107 0310 	add.w	r3, r7, #16
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7ff fcbb 	bl	8010b2e <get_ldnumber>
 80111b8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80111ba:	69fb      	ldr	r3, [r7, #28]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	da01      	bge.n	80111c4 <f_mount+0x28>
 80111c0:	230b      	movs	r3, #11
 80111c2:	e048      	b.n	8011256 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80111c4:	4a26      	ldr	r2, [pc, #152]	; (8011260 <f_mount+0xc4>)
 80111c6:	69fb      	ldr	r3, [r7, #28]
 80111c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80111cc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80111ce:	69bb      	ldr	r3, [r7, #24]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d00f      	beq.n	80111f4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80111d4:	69b8      	ldr	r0, [r7, #24]
 80111d6:	f7fe fd13 	bl	800fc00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 80111da:	69bb      	ldr	r3, [r7, #24]
 80111dc:	68db      	ldr	r3, [r3, #12]
 80111de:	4618      	mov	r0, r3
 80111e0:	f000 fd18 	bl	8011c14 <ff_del_syncobj>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d101      	bne.n	80111ee <f_mount+0x52>
 80111ea:	2302      	movs	r3, #2
 80111ec:	e033      	b.n	8011256 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80111ee:	69bb      	ldr	r3, [r7, #24]
 80111f0:	2200      	movs	r2, #0
 80111f2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	2b00      	cmp	r3, #0
 80111f8:	d00f      	beq.n	801121a <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	2200      	movs	r2, #0
 80111fe:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011200:	69fb      	ldr	r3, [r7, #28]
 8011202:	b2da      	uxtb	r2, r3
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	330c      	adds	r3, #12
 8011208:	4619      	mov	r1, r3
 801120a:	4610      	mov	r0, r2
 801120c:	f000 fce7 	bl	8011bde <ff_cre_syncobj>
 8011210:	4603      	mov	r3, r0
 8011212:	2b00      	cmp	r3, #0
 8011214:	d101      	bne.n	801121a <f_mount+0x7e>
 8011216:	2302      	movs	r3, #2
 8011218:	e01d      	b.n	8011256 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801121a:	68fa      	ldr	r2, [r7, #12]
 801121c:	4910      	ldr	r1, [pc, #64]	; (8011260 <f_mount+0xc4>)
 801121e:	69fb      	ldr	r3, [r7, #28]
 8011220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d002      	beq.n	8011230 <f_mount+0x94>
 801122a:	79fb      	ldrb	r3, [r7, #7]
 801122c:	2b01      	cmp	r3, #1
 801122e:	d001      	beq.n	8011234 <f_mount+0x98>
 8011230:	2300      	movs	r3, #0
 8011232:	e010      	b.n	8011256 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011234:	f107 010c 	add.w	r1, r7, #12
 8011238:	f107 0308 	add.w	r3, r7, #8
 801123c:	2200      	movs	r2, #0
 801123e:	4618      	mov	r0, r3
 8011240:	f7ff fd10 	bl	8010c64 <find_volume>
 8011244:	4603      	mov	r3, r0
 8011246:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	7dfa      	ldrb	r2, [r7, #23]
 801124c:	4611      	mov	r1, r2
 801124e:	4618      	mov	r0, r3
 8011250:	f7fe fb72 	bl	800f938 <unlock_fs>
 8011254:	7dfb      	ldrb	r3, [r7, #23]
}
 8011256:	4618      	mov	r0, r3
 8011258:	3720      	adds	r7, #32
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	20001154 	.word	0x20001154

08011264 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b098      	sub	sp, #96	; 0x60
 8011268:	af00      	add	r7, sp, #0
 801126a:	60f8      	str	r0, [r7, #12]
 801126c:	60b9      	str	r1, [r7, #8]
 801126e:	4613      	mov	r3, r2
 8011270:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d101      	bne.n	801127c <f_open+0x18>
 8011278:	2309      	movs	r3, #9
 801127a:	e1b4      	b.n	80115e6 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801127c:	79fb      	ldrb	r3, [r7, #7]
 801127e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011282:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8011284:	79fa      	ldrb	r2, [r7, #7]
 8011286:	f107 0110 	add.w	r1, r7, #16
 801128a:	f107 0308 	add.w	r3, r7, #8
 801128e:	4618      	mov	r0, r3
 8011290:	f7ff fce8 	bl	8010c64 <find_volume>
 8011294:	4603      	mov	r3, r0
 8011296:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801129a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801129e:	2b00      	cmp	r3, #0
 80112a0:	f040 8191 	bne.w	80115c6 <f_open+0x362>
		dj.obj.fs = fs;
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80112a8:	68ba      	ldr	r2, [r7, #8]
 80112aa:	f107 0314 	add.w	r3, r7, #20
 80112ae:	4611      	mov	r1, r2
 80112b0:	4618      	mov	r0, r3
 80112b2:	f7ff fbcb 	bl	8010a4c <follow_path>
 80112b6:	4603      	mov	r3, r0
 80112b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80112bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d11a      	bne.n	80112fa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80112c4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80112c8:	b25b      	sxtb	r3, r3
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	da03      	bge.n	80112d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80112ce:	2306      	movs	r3, #6
 80112d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80112d4:	e011      	b.n	80112fa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80112d6:	79fb      	ldrb	r3, [r7, #7]
 80112d8:	f023 0301 	bic.w	r3, r3, #1
 80112dc:	2b00      	cmp	r3, #0
 80112de:	bf14      	ite	ne
 80112e0:	2301      	movne	r3, #1
 80112e2:	2300      	moveq	r3, #0
 80112e4:	b2db      	uxtb	r3, r3
 80112e6:	461a      	mov	r2, r3
 80112e8:	f107 0314 	add.w	r3, r7, #20
 80112ec:	4611      	mov	r1, r2
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7fe fb3e 	bl	800f970 <chk_lock>
 80112f4:	4603      	mov	r3, r0
 80112f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80112fa:	79fb      	ldrb	r3, [r7, #7]
 80112fc:	f003 031c 	and.w	r3, r3, #28
 8011300:	2b00      	cmp	r3, #0
 8011302:	d07f      	beq.n	8011404 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8011304:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011308:	2b00      	cmp	r3, #0
 801130a:	d017      	beq.n	801133c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801130c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011310:	2b04      	cmp	r3, #4
 8011312:	d10e      	bne.n	8011332 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011314:	f7fe fb88 	bl	800fa28 <enq_lock>
 8011318:	4603      	mov	r3, r0
 801131a:	2b00      	cmp	r3, #0
 801131c:	d006      	beq.n	801132c <f_open+0xc8>
 801131e:	f107 0314 	add.w	r3, r7, #20
 8011322:	4618      	mov	r0, r3
 8011324:	f7ff fa6d 	bl	8010802 <dir_register>
 8011328:	4603      	mov	r3, r0
 801132a:	e000      	b.n	801132e <f_open+0xca>
 801132c:	2312      	movs	r3, #18
 801132e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011332:	79fb      	ldrb	r3, [r7, #7]
 8011334:	f043 0308 	orr.w	r3, r3, #8
 8011338:	71fb      	strb	r3, [r7, #7]
 801133a:	e010      	b.n	801135e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801133c:	7ebb      	ldrb	r3, [r7, #26]
 801133e:	f003 0311 	and.w	r3, r3, #17
 8011342:	2b00      	cmp	r3, #0
 8011344:	d003      	beq.n	801134e <f_open+0xea>
					res = FR_DENIED;
 8011346:	2307      	movs	r3, #7
 8011348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801134c:	e007      	b.n	801135e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801134e:	79fb      	ldrb	r3, [r7, #7]
 8011350:	f003 0304 	and.w	r3, r3, #4
 8011354:	2b00      	cmp	r3, #0
 8011356:	d002      	beq.n	801135e <f_open+0xfa>
 8011358:	2308      	movs	r3, #8
 801135a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801135e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011362:	2b00      	cmp	r3, #0
 8011364:	d168      	bne.n	8011438 <f_open+0x1d4>
 8011366:	79fb      	ldrb	r3, [r7, #7]
 8011368:	f003 0308 	and.w	r3, r3, #8
 801136c:	2b00      	cmp	r3, #0
 801136e:	d063      	beq.n	8011438 <f_open+0x1d4>
				dw = GET_FATTIME();
 8011370:	f7fd feee 	bl	800f150 <get_fattime>
 8011374:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011376:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011378:	330e      	adds	r3, #14
 801137a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801137c:	4618      	mov	r0, r3
 801137e:	f7fe fa1b 	bl	800f7b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011384:	3316      	adds	r3, #22
 8011386:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011388:	4618      	mov	r0, r3
 801138a:	f7fe fa15 	bl	800f7b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011390:	330b      	adds	r3, #11
 8011392:	2220      	movs	r2, #32
 8011394:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011396:	693b      	ldr	r3, [r7, #16]
 8011398:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801139a:	4611      	mov	r1, r2
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff f99c 	bl	80106da <ld_clust>
 80113a2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80113a8:	2200      	movs	r2, #0
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7ff f9b4 	bl	8010718 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80113b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113b2:	331c      	adds	r3, #28
 80113b4:	2100      	movs	r1, #0
 80113b6:	4618      	mov	r0, r3
 80113b8:	f7fe f9fe 	bl	800f7b8 <st_dword>
					fs->wflag = 1;
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	2201      	movs	r2, #1
 80113c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80113c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d037      	beq.n	8011438 <f_open+0x1d4>
						dw = fs->winsect;
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113cc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80113ce:	f107 0314 	add.w	r3, r7, #20
 80113d2:	2200      	movs	r2, #0
 80113d4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80113d6:	4618      	mov	r0, r3
 80113d8:	f7fe fec7 	bl	801016a <remove_chain>
 80113dc:	4603      	mov	r3, r0
 80113de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80113e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d126      	bne.n	8011438 <f_open+0x1d4>
							res = move_window(fs, dw);
 80113ea:	693b      	ldr	r3, [r7, #16]
 80113ec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113ee:	4618      	mov	r0, r3
 80113f0:	f7fe fc6e 	bl	800fcd0 <move_window>
 80113f4:	4603      	mov	r3, r0
 80113f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80113fe:	3a01      	subs	r2, #1
 8011400:	611a      	str	r2, [r3, #16]
 8011402:	e019      	b.n	8011438 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011408:	2b00      	cmp	r3, #0
 801140a:	d115      	bne.n	8011438 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801140c:	7ebb      	ldrb	r3, [r7, #26]
 801140e:	f003 0310 	and.w	r3, r3, #16
 8011412:	2b00      	cmp	r3, #0
 8011414:	d003      	beq.n	801141e <f_open+0x1ba>
					res = FR_NO_FILE;
 8011416:	2304      	movs	r3, #4
 8011418:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801141c:	e00c      	b.n	8011438 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801141e:	79fb      	ldrb	r3, [r7, #7]
 8011420:	f003 0302 	and.w	r3, r3, #2
 8011424:	2b00      	cmp	r3, #0
 8011426:	d007      	beq.n	8011438 <f_open+0x1d4>
 8011428:	7ebb      	ldrb	r3, [r7, #26]
 801142a:	f003 0301 	and.w	r3, r3, #1
 801142e:	2b00      	cmp	r3, #0
 8011430:	d002      	beq.n	8011438 <f_open+0x1d4>
						res = FR_DENIED;
 8011432:	2307      	movs	r3, #7
 8011434:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011438:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801143c:	2b00      	cmp	r3, #0
 801143e:	d128      	bne.n	8011492 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011440:	79fb      	ldrb	r3, [r7, #7]
 8011442:	f003 0308 	and.w	r3, r3, #8
 8011446:	2b00      	cmp	r3, #0
 8011448:	d003      	beq.n	8011452 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801144a:	79fb      	ldrb	r3, [r7, #7]
 801144c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011450:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011452:	693b      	ldr	r3, [r7, #16]
 8011454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801145a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011460:	79fb      	ldrb	r3, [r7, #7]
 8011462:	f023 0301 	bic.w	r3, r3, #1
 8011466:	2b00      	cmp	r3, #0
 8011468:	bf14      	ite	ne
 801146a:	2301      	movne	r3, #1
 801146c:	2300      	moveq	r3, #0
 801146e:	b2db      	uxtb	r3, r3
 8011470:	461a      	mov	r2, r3
 8011472:	f107 0314 	add.w	r3, r7, #20
 8011476:	4611      	mov	r1, r2
 8011478:	4618      	mov	r0, r3
 801147a:	f7fe faf7 	bl	800fa6c <inc_lock>
 801147e:	4602      	mov	r2, r0
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	691b      	ldr	r3, [r3, #16]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d102      	bne.n	8011492 <f_open+0x22e>
 801148c:	2302      	movs	r3, #2
 801148e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011492:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011496:	2b00      	cmp	r3, #0
 8011498:	f040 8095 	bne.w	80115c6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114a0:	4611      	mov	r1, r2
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7ff f919 	bl	80106da <ld_clust>
 80114a8:	4602      	mov	r2, r0
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80114ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114b0:	331c      	adds	r3, #28
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fe f942 	bl	800f73c <ld_dword>
 80114b8:	4602      	mov	r2, r0
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	2200      	movs	r2, #0
 80114c2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80114c4:	693a      	ldr	r2, [r7, #16]
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	88da      	ldrh	r2, [r3, #6]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	79fa      	ldrb	r2, [r7, #7]
 80114d6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2200      	movs	r2, #0
 80114dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	2200      	movs	r2, #0
 80114e2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	2200      	movs	r2, #0
 80114e8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	3330      	adds	r3, #48	; 0x30
 80114ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80114f2:	2100      	movs	r1, #0
 80114f4:	4618      	mov	r0, r3
 80114f6:	f7fe f9ac 	bl	800f852 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80114fa:	79fb      	ldrb	r3, [r7, #7]
 80114fc:	f003 0320 	and.w	r3, r3, #32
 8011500:	2b00      	cmp	r3, #0
 8011502:	d060      	beq.n	80115c6 <f_open+0x362>
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d05c      	beq.n	80115c6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	68da      	ldr	r2, [r3, #12]
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	895b      	ldrh	r3, [r3, #10]
 8011518:	025b      	lsls	r3, r3, #9
 801151a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	689b      	ldr	r3, [r3, #8]
 8011520:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	68db      	ldr	r3, [r3, #12]
 8011526:	657b      	str	r3, [r7, #84]	; 0x54
 8011528:	e016      	b.n	8011558 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801152e:	4618      	mov	r0, r3
 8011530:	f7fe fc89 	bl	800fe46 <get_fat>
 8011534:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011536:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011538:	2b01      	cmp	r3, #1
 801153a:	d802      	bhi.n	8011542 <f_open+0x2de>
 801153c:	2302      	movs	r3, #2
 801153e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011542:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011548:	d102      	bne.n	8011550 <f_open+0x2ec>
 801154a:	2301      	movs	r3, #1
 801154c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011550:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011552:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011554:	1ad3      	subs	r3, r2, r3
 8011556:	657b      	str	r3, [r7, #84]	; 0x54
 8011558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801155c:	2b00      	cmp	r3, #0
 801155e:	d103      	bne.n	8011568 <f_open+0x304>
 8011560:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011564:	429a      	cmp	r2, r3
 8011566:	d8e0      	bhi.n	801152a <f_open+0x2c6>
				}
				fp->clust = clst;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801156c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801156e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011572:	2b00      	cmp	r3, #0
 8011574:	d127      	bne.n	80115c6 <f_open+0x362>
 8011576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011578:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801157c:	2b00      	cmp	r3, #0
 801157e:	d022      	beq.n	80115c6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011584:	4618      	mov	r0, r3
 8011586:	f7fe fc3f 	bl	800fe08 <clust2sect>
 801158a:	6478      	str	r0, [r7, #68]	; 0x44
 801158c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801158e:	2b00      	cmp	r3, #0
 8011590:	d103      	bne.n	801159a <f_open+0x336>
						res = FR_INT_ERR;
 8011592:	2302      	movs	r3, #2
 8011594:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011598:	e015      	b.n	80115c6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801159a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801159c:	0a5a      	lsrs	r2, r3, #9
 801159e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115a0:	441a      	add	r2, r3
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80115a6:	693b      	ldr	r3, [r7, #16]
 80115a8:	7858      	ldrb	r0, [r3, #1]
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80115b0:	68fb      	ldr	r3, [r7, #12]
 80115b2:	6a1a      	ldr	r2, [r3, #32]
 80115b4:	2301      	movs	r3, #1
 80115b6:	f7fe f84b 	bl	800f650 <disk_read>
 80115ba:	4603      	mov	r3, r0
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d002      	beq.n	80115c6 <f_open+0x362>
 80115c0:	2301      	movs	r3, #1
 80115c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80115c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d002      	beq.n	80115d4 <f_open+0x370>
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	2200      	movs	r2, #0
 80115d2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80115d4:	693b      	ldr	r3, [r7, #16]
 80115d6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80115da:	4611      	mov	r1, r2
 80115dc:	4618      	mov	r0, r3
 80115de:	f7fe f9ab 	bl	800f938 <unlock_fs>
 80115e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3760      	adds	r7, #96	; 0x60
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}

080115ee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80115ee:	b580      	push	{r7, lr}
 80115f0:	b08c      	sub	sp, #48	; 0x30
 80115f2:	af00      	add	r7, sp, #0
 80115f4:	60f8      	str	r0, [r7, #12]
 80115f6:	60b9      	str	r1, [r7, #8]
 80115f8:	607a      	str	r2, [r7, #4]
 80115fa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	2200      	movs	r2, #0
 8011604:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	f107 0210 	add.w	r2, r7, #16
 801160c:	4611      	mov	r1, r2
 801160e:	4618      	mov	r0, r3
 8011610:	f7ff fd7c 	bl	801110c <validate>
 8011614:	4603      	mov	r3, r0
 8011616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801161a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801161e:	2b00      	cmp	r3, #0
 8011620:	d107      	bne.n	8011632 <f_write+0x44>
 8011622:	68fb      	ldr	r3, [r7, #12]
 8011624:	7d5b      	ldrb	r3, [r3, #21]
 8011626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801162a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801162e:	2b00      	cmp	r3, #0
 8011630:	d009      	beq.n	8011646 <f_write+0x58>
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011638:	4611      	mov	r1, r2
 801163a:	4618      	mov	r0, r3
 801163c:	f7fe f97c 	bl	800f938 <unlock_fs>
 8011640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011644:	e173      	b.n	801192e <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011646:	68fb      	ldr	r3, [r7, #12]
 8011648:	7d1b      	ldrb	r3, [r3, #20]
 801164a:	f003 0302 	and.w	r3, r3, #2
 801164e:	2b00      	cmp	r3, #0
 8011650:	d106      	bne.n	8011660 <f_write+0x72>
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	2107      	movs	r1, #7
 8011656:	4618      	mov	r0, r3
 8011658:	f7fe f96e 	bl	800f938 <unlock_fs>
 801165c:	2307      	movs	r3, #7
 801165e:	e166      	b.n	801192e <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011660:	68fb      	ldr	r3, [r7, #12]
 8011662:	699a      	ldr	r2, [r3, #24]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	441a      	add	r2, r3
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	699b      	ldr	r3, [r3, #24]
 801166c:	429a      	cmp	r2, r3
 801166e:	f080 814b 	bcs.w	8011908 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	699b      	ldr	r3, [r3, #24]
 8011676:	43db      	mvns	r3, r3
 8011678:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801167a:	e145      	b.n	8011908 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801167c:	68fb      	ldr	r3, [r7, #12]
 801167e:	699b      	ldr	r3, [r3, #24]
 8011680:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011684:	2b00      	cmp	r3, #0
 8011686:	f040 8101 	bne.w	801188c <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	699b      	ldr	r3, [r3, #24]
 801168e:	0a5b      	lsrs	r3, r3, #9
 8011690:	693a      	ldr	r2, [r7, #16]
 8011692:	8952      	ldrh	r2, [r2, #10]
 8011694:	3a01      	subs	r2, #1
 8011696:	4013      	ands	r3, r2
 8011698:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801169a:	69bb      	ldr	r3, [r7, #24]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d14d      	bne.n	801173c <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	699b      	ldr	r3, [r3, #24]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d10c      	bne.n	80116c2 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	689b      	ldr	r3, [r3, #8]
 80116ac:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80116ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d11a      	bne.n	80116ea <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	2100      	movs	r1, #0
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7fe fdbb 	bl	8010234 <create_chain>
 80116be:	62b8      	str	r0, [r7, #40]	; 0x28
 80116c0:	e013      	b.n	80116ea <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d007      	beq.n	80116da <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	699b      	ldr	r3, [r3, #24]
 80116ce:	4619      	mov	r1, r3
 80116d0:	68f8      	ldr	r0, [r7, #12]
 80116d2:	f7fe fe47 	bl	8010364 <clmt_clust>
 80116d6:	62b8      	str	r0, [r7, #40]	; 0x28
 80116d8:	e007      	b.n	80116ea <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80116da:	68fa      	ldr	r2, [r7, #12]
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	69db      	ldr	r3, [r3, #28]
 80116e0:	4619      	mov	r1, r3
 80116e2:	4610      	mov	r0, r2
 80116e4:	f7fe fda6 	bl	8010234 <create_chain>
 80116e8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80116ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	f000 8110 	beq.w	8011912 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80116f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d109      	bne.n	801170c <f_write+0x11e>
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2202      	movs	r2, #2
 80116fc:	755a      	strb	r2, [r3, #21]
 80116fe:	693b      	ldr	r3, [r7, #16]
 8011700:	2102      	movs	r1, #2
 8011702:	4618      	mov	r0, r3
 8011704:	f7fe f918 	bl	800f938 <unlock_fs>
 8011708:	2302      	movs	r3, #2
 801170a:	e110      	b.n	801192e <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801170e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011712:	d109      	bne.n	8011728 <f_write+0x13a>
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	2201      	movs	r2, #1
 8011718:	755a      	strb	r2, [r3, #21]
 801171a:	693b      	ldr	r3, [r7, #16]
 801171c:	2101      	movs	r1, #1
 801171e:	4618      	mov	r0, r3
 8011720:	f7fe f90a 	bl	800f938 <unlock_fs>
 8011724:	2301      	movs	r3, #1
 8011726:	e102      	b.n	801192e <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801172c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	689b      	ldr	r3, [r3, #8]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d102      	bne.n	801173c <f_write+0x14e>
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801173a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	7d1b      	ldrb	r3, [r3, #20]
 8011740:	b25b      	sxtb	r3, r3
 8011742:	2b00      	cmp	r3, #0
 8011744:	da1d      	bge.n	8011782 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011746:	693b      	ldr	r3, [r7, #16]
 8011748:	7858      	ldrb	r0, [r3, #1]
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	6a1a      	ldr	r2, [r3, #32]
 8011754:	2301      	movs	r3, #1
 8011756:	f7fd ff9b 	bl	800f690 <disk_write>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d009      	beq.n	8011774 <f_write+0x186>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2201      	movs	r2, #1
 8011764:	755a      	strb	r2, [r3, #21]
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	2101      	movs	r1, #1
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe f8e4 	bl	800f938 <unlock_fs>
 8011770:	2301      	movs	r3, #1
 8011772:	e0dc      	b.n	801192e <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	7d1b      	ldrb	r3, [r3, #20]
 8011778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801177c:	b2da      	uxtb	r2, r3
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011782:	693a      	ldr	r2, [r7, #16]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	69db      	ldr	r3, [r3, #28]
 8011788:	4619      	mov	r1, r3
 801178a:	4610      	mov	r0, r2
 801178c:	f7fe fb3c 	bl	800fe08 <clust2sect>
 8011790:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011792:	697b      	ldr	r3, [r7, #20]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d109      	bne.n	80117ac <f_write+0x1be>
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	2202      	movs	r2, #2
 801179c:	755a      	strb	r2, [r3, #21]
 801179e:	693b      	ldr	r3, [r7, #16]
 80117a0:	2102      	movs	r1, #2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fe f8c8 	bl	800f938 <unlock_fs>
 80117a8:	2302      	movs	r3, #2
 80117aa:	e0c0      	b.n	801192e <f_write+0x340>
			sect += csect;
 80117ac:	697a      	ldr	r2, [r7, #20]
 80117ae:	69bb      	ldr	r3, [r7, #24]
 80117b0:	4413      	add	r3, r2
 80117b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	0a5b      	lsrs	r3, r3, #9
 80117b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80117ba:	6a3b      	ldr	r3, [r7, #32]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d041      	beq.n	8011844 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80117c0:	69ba      	ldr	r2, [r7, #24]
 80117c2:	6a3b      	ldr	r3, [r7, #32]
 80117c4:	4413      	add	r3, r2
 80117c6:	693a      	ldr	r2, [r7, #16]
 80117c8:	8952      	ldrh	r2, [r2, #10]
 80117ca:	4293      	cmp	r3, r2
 80117cc:	d905      	bls.n	80117da <f_write+0x1ec>
					cc = fs->csize - csect;
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	895b      	ldrh	r3, [r3, #10]
 80117d2:	461a      	mov	r2, r3
 80117d4:	69bb      	ldr	r3, [r7, #24]
 80117d6:	1ad3      	subs	r3, r2, r3
 80117d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80117da:	693b      	ldr	r3, [r7, #16]
 80117dc:	7858      	ldrb	r0, [r3, #1]
 80117de:	6a3b      	ldr	r3, [r7, #32]
 80117e0:	697a      	ldr	r2, [r7, #20]
 80117e2:	69f9      	ldr	r1, [r7, #28]
 80117e4:	f7fd ff54 	bl	800f690 <disk_write>
 80117e8:	4603      	mov	r3, r0
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d009      	beq.n	8011802 <f_write+0x214>
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2201      	movs	r2, #1
 80117f2:	755a      	strb	r2, [r3, #21]
 80117f4:	693b      	ldr	r3, [r7, #16]
 80117f6:	2101      	movs	r1, #1
 80117f8:	4618      	mov	r0, r3
 80117fa:	f7fe f89d 	bl	800f938 <unlock_fs>
 80117fe:	2301      	movs	r3, #1
 8011800:	e095      	b.n	801192e <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	6a1a      	ldr	r2, [r3, #32]
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	1ad3      	subs	r3, r2, r3
 801180a:	6a3a      	ldr	r2, [r7, #32]
 801180c:	429a      	cmp	r2, r3
 801180e:	d915      	bls.n	801183c <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	6a1a      	ldr	r2, [r3, #32]
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	1ad3      	subs	r3, r2, r3
 801181e:	025b      	lsls	r3, r3, #9
 8011820:	69fa      	ldr	r2, [r7, #28]
 8011822:	4413      	add	r3, r2
 8011824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011828:	4619      	mov	r1, r3
 801182a:	f7fd fff1 	bl	800f810 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	7d1b      	ldrb	r3, [r3, #20]
 8011832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011836:	b2da      	uxtb	r2, r3
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801183c:	6a3b      	ldr	r3, [r7, #32]
 801183e:	025b      	lsls	r3, r3, #9
 8011840:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011842:	e044      	b.n	80118ce <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011844:	68fb      	ldr	r3, [r7, #12]
 8011846:	6a1b      	ldr	r3, [r3, #32]
 8011848:	697a      	ldr	r2, [r7, #20]
 801184a:	429a      	cmp	r2, r3
 801184c:	d01b      	beq.n	8011886 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	699a      	ldr	r2, [r3, #24]
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011856:	429a      	cmp	r2, r3
 8011858:	d215      	bcs.n	8011886 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801185a:	693b      	ldr	r3, [r7, #16]
 801185c:	7858      	ldrb	r0, [r3, #1]
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011864:	2301      	movs	r3, #1
 8011866:	697a      	ldr	r2, [r7, #20]
 8011868:	f7fd fef2 	bl	800f650 <disk_read>
 801186c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801186e:	2b00      	cmp	r3, #0
 8011870:	d009      	beq.n	8011886 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	2201      	movs	r2, #1
 8011876:	755a      	strb	r2, [r3, #21]
 8011878:	693b      	ldr	r3, [r7, #16]
 801187a:	2101      	movs	r1, #1
 801187c:	4618      	mov	r0, r3
 801187e:	f7fe f85b 	bl	800f938 <unlock_fs>
 8011882:	2301      	movs	r3, #1
 8011884:	e053      	b.n	801192e <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	697a      	ldr	r2, [r7, #20]
 801188a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801188c:	68fb      	ldr	r3, [r7, #12]
 801188e:	699b      	ldr	r3, [r3, #24]
 8011890:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011894:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011898:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801189a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d901      	bls.n	80118a6 <f_write+0x2b8>
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	699b      	ldr	r3, [r3, #24]
 80118b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80118b4:	4413      	add	r3, r2
 80118b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118b8:	69f9      	ldr	r1, [r7, #28]
 80118ba:	4618      	mov	r0, r3
 80118bc:	f7fd ffa8 	bl	800f810 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80118c0:	68fb      	ldr	r3, [r7, #12]
 80118c2:	7d1b      	ldrb	r3, [r3, #20]
 80118c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118c8:	b2da      	uxtb	r2, r3
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80118ce:	69fa      	ldr	r2, [r7, #28]
 80118d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d2:	4413      	add	r3, r2
 80118d4:	61fb      	str	r3, [r7, #28]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	699a      	ldr	r2, [r3, #24]
 80118da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118dc:	441a      	add	r2, r3
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	619a      	str	r2, [r3, #24]
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	68da      	ldr	r2, [r3, #12]
 80118e6:	68fb      	ldr	r3, [r7, #12]
 80118e8:	699b      	ldr	r3, [r3, #24]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	bf38      	it	cc
 80118ee:	461a      	movcc	r2, r3
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	60da      	str	r2, [r3, #12]
 80118f4:	683b      	ldr	r3, [r7, #0]
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fa:	441a      	add	r2, r3
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	601a      	str	r2, [r3, #0]
 8011900:	687a      	ldr	r2, [r7, #4]
 8011902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011904:	1ad3      	subs	r3, r2, r3
 8011906:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	f47f aeb6 	bne.w	801167c <f_write+0x8e>
 8011910:	e000      	b.n	8011914 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011912:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	7d1b      	ldrb	r3, [r3, #20]
 8011918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801191c:	b2da      	uxtb	r2, r3
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011922:	693b      	ldr	r3, [r7, #16]
 8011924:	2100      	movs	r1, #0
 8011926:	4618      	mov	r0, r3
 8011928:	f7fe f806 	bl	800f938 <unlock_fs>
 801192c:	2300      	movs	r3, #0
}
 801192e:	4618      	mov	r0, r3
 8011930:	3730      	adds	r7, #48	; 0x30
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}

08011936 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b086      	sub	sp, #24
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f107 0208 	add.w	r2, r7, #8
 8011944:	4611      	mov	r1, r2
 8011946:	4618      	mov	r0, r3
 8011948:	f7ff fbe0 	bl	801110c <validate>
 801194c:	4603      	mov	r3, r0
 801194e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011950:	7dfb      	ldrb	r3, [r7, #23]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d16d      	bne.n	8011a32 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	7d1b      	ldrb	r3, [r3, #20]
 801195a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801195e:	2b00      	cmp	r3, #0
 8011960:	d067      	beq.n	8011a32 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	7d1b      	ldrb	r3, [r3, #20]
 8011966:	b25b      	sxtb	r3, r3
 8011968:	2b00      	cmp	r3, #0
 801196a:	da1a      	bge.n	80119a2 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801196c:	68bb      	ldr	r3, [r7, #8]
 801196e:	7858      	ldrb	r0, [r3, #1]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	6a1a      	ldr	r2, [r3, #32]
 801197a:	2301      	movs	r3, #1
 801197c:	f7fd fe88 	bl	800f690 <disk_write>
 8011980:	4603      	mov	r3, r0
 8011982:	2b00      	cmp	r3, #0
 8011984:	d006      	beq.n	8011994 <f_sync+0x5e>
 8011986:	68bb      	ldr	r3, [r7, #8]
 8011988:	2101      	movs	r1, #1
 801198a:	4618      	mov	r0, r3
 801198c:	f7fd ffd4 	bl	800f938 <unlock_fs>
 8011990:	2301      	movs	r3, #1
 8011992:	e055      	b.n	8011a40 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	7d1b      	ldrb	r3, [r3, #20]
 8011998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801199c:	b2da      	uxtb	r2, r3
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80119a2:	f7fd fbd5 	bl	800f150 <get_fattime>
 80119a6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80119a8:	68ba      	ldr	r2, [r7, #8]
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119ae:	4619      	mov	r1, r3
 80119b0:	4610      	mov	r0, r2
 80119b2:	f7fe f98d 	bl	800fcd0 <move_window>
 80119b6:	4603      	mov	r3, r0
 80119b8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80119ba:	7dfb      	ldrb	r3, [r7, #23]
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d138      	bne.n	8011a32 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80119c4:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80119c6:	68fb      	ldr	r3, [r7, #12]
 80119c8:	330b      	adds	r3, #11
 80119ca:	781a      	ldrb	r2, [r3, #0]
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	330b      	adds	r3, #11
 80119d0:	f042 0220 	orr.w	r2, r2, #32
 80119d4:	b2d2      	uxtb	r2, r2
 80119d6:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	6818      	ldr	r0, [r3, #0]
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	689b      	ldr	r3, [r3, #8]
 80119e0:	461a      	mov	r2, r3
 80119e2:	68f9      	ldr	r1, [r7, #12]
 80119e4:	f7fe fe98 	bl	8010718 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80119e8:	68fb      	ldr	r3, [r7, #12]
 80119ea:	f103 021c 	add.w	r2, r3, #28
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	68db      	ldr	r3, [r3, #12]
 80119f2:	4619      	mov	r1, r3
 80119f4:	4610      	mov	r0, r2
 80119f6:	f7fd fedf 	bl	800f7b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	3316      	adds	r3, #22
 80119fe:	6939      	ldr	r1, [r7, #16]
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7fd fed9 	bl	800f7b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	3312      	adds	r3, #18
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fd feb8 	bl	800f782 <st_word>
					fs->wflag = 1;
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	2201      	movs	r2, #1
 8011a16:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011a18:	68bb      	ldr	r3, [r7, #8]
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	f7fe f986 	bl	800fd2c <sync_fs>
 8011a20:	4603      	mov	r3, r0
 8011a22:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	7d1b      	ldrb	r3, [r3, #20]
 8011a28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a2c:	b2da      	uxtb	r2, r3
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011a32:	68bb      	ldr	r3, [r7, #8]
 8011a34:	7dfa      	ldrb	r2, [r7, #23]
 8011a36:	4611      	mov	r1, r2
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7fd ff7d 	bl	800f938 <unlock_fs>
 8011a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a40:	4618      	mov	r0, r3
 8011a42:	3718      	adds	r7, #24
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011a50:	6878      	ldr	r0, [r7, #4]
 8011a52:	f7ff ff70 	bl	8011936 <f_sync>
 8011a56:	4603      	mov	r3, r0
 8011a58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011a5a:	7bfb      	ldrb	r3, [r7, #15]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d11d      	bne.n	8011a9c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	f107 0208 	add.w	r2, r7, #8
 8011a66:	4611      	mov	r1, r2
 8011a68:	4618      	mov	r0, r3
 8011a6a:	f7ff fb4f 	bl	801110c <validate>
 8011a6e:	4603      	mov	r3, r0
 8011a70:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011a72:	7bfb      	ldrb	r3, [r7, #15]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d111      	bne.n	8011a9c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	691b      	ldr	r3, [r3, #16]
 8011a7c:	4618      	mov	r0, r3
 8011a7e:	f7fe f883 	bl	800fb88 <dec_lock>
 8011a82:	4603      	mov	r3, r0
 8011a84:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011a86:	7bfb      	ldrb	r3, [r7, #15]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d102      	bne.n	8011a92 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	2200      	movs	r2, #0
 8011a90:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	2100      	movs	r1, #0
 8011a96:	4618      	mov	r0, r3
 8011a98:	f7fd ff4e 	bl	800f938 <unlock_fs>
#endif
		}
	}
	return res;
 8011a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}

08011aa6 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011aa6:	b580      	push	{r7, lr}
 8011aa8:	b090      	sub	sp, #64	; 0x40
 8011aaa:	af00      	add	r7, sp, #0
 8011aac:	6078      	str	r0, [r7, #4]
 8011aae:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8011ab0:	f107 010c 	add.w	r1, r7, #12
 8011ab4:	1d3b      	adds	r3, r7, #4
 8011ab6:	2200      	movs	r2, #0
 8011ab8:	4618      	mov	r0, r3
 8011aba:	f7ff f8d3 	bl	8010c64 <find_volume>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8011ac4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d11f      	bne.n	8011b0c <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011acc:	687a      	ldr	r2, [r7, #4]
 8011ace:	f107 030c 	add.w	r3, r7, #12
 8011ad2:	4611      	mov	r1, r2
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f7fe ffb9 	bl	8010a4c <follow_path>
 8011ada:	4603      	mov	r3, r0
 8011adc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8011ae0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d111      	bne.n	8011b0c <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8011ae8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8011aec:	b25b      	sxtb	r3, r3
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	da03      	bge.n	8011afa <f_stat+0x54>
				res = FR_INVALID_NAME;
 8011af2:	2306      	movs	r3, #6
 8011af4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8011af8:	e008      	b.n	8011b0c <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d005      	beq.n	8011b0c <f_stat+0x66>
 8011b00:	f107 030c 	add.w	r3, r7, #12
 8011b04:	6839      	ldr	r1, [r7, #0]
 8011b06:	4618      	mov	r0, r3
 8011b08:	f7fe fead 	bl	8010866 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8011b12:	4611      	mov	r1, r2
 8011b14:	4618      	mov	r0, r3
 8011b16:	f7fd ff0f 	bl	800f938 <unlock_fs>
 8011b1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3740      	adds	r7, #64	; 0x40
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
	...

08011b28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b087      	sub	sp, #28
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	60f8      	str	r0, [r7, #12]
 8011b30:	60b9      	str	r1, [r7, #8]
 8011b32:	4613      	mov	r3, r2
 8011b34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011b36:	2301      	movs	r3, #1
 8011b38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011b3e:	4b1f      	ldr	r3, [pc, #124]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b40:	7a5b      	ldrb	r3, [r3, #9]
 8011b42:	b2db      	uxtb	r3, r3
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d131      	bne.n	8011bac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011b48:	4b1c      	ldr	r3, [pc, #112]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b4a:	7a5b      	ldrb	r3, [r3, #9]
 8011b4c:	b2db      	uxtb	r3, r3
 8011b4e:	461a      	mov	r2, r3
 8011b50:	4b1a      	ldr	r3, [pc, #104]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b52:	2100      	movs	r1, #0
 8011b54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011b56:	4b19      	ldr	r3, [pc, #100]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b58:	7a5b      	ldrb	r3, [r3, #9]
 8011b5a:	b2db      	uxtb	r3, r3
 8011b5c:	4a17      	ldr	r2, [pc, #92]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	4413      	add	r3, r2
 8011b62:	68fa      	ldr	r2, [r7, #12]
 8011b64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011b66:	4b15      	ldr	r3, [pc, #84]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b68:	7a5b      	ldrb	r3, [r3, #9]
 8011b6a:	b2db      	uxtb	r3, r3
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	4b13      	ldr	r3, [pc, #76]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b70:	4413      	add	r3, r2
 8011b72:	79fa      	ldrb	r2, [r7, #7]
 8011b74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011b76:	4b11      	ldr	r3, [pc, #68]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b78:	7a5b      	ldrb	r3, [r3, #9]
 8011b7a:	b2db      	uxtb	r3, r3
 8011b7c:	1c5a      	adds	r2, r3, #1
 8011b7e:	b2d1      	uxtb	r1, r2
 8011b80:	4a0e      	ldr	r2, [pc, #56]	; (8011bbc <FATFS_LinkDriverEx+0x94>)
 8011b82:	7251      	strb	r1, [r2, #9]
 8011b84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011b86:	7dbb      	ldrb	r3, [r7, #22]
 8011b88:	3330      	adds	r3, #48	; 0x30
 8011b8a:	b2da      	uxtb	r2, r3
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011b90:	68bb      	ldr	r3, [r7, #8]
 8011b92:	3301      	adds	r3, #1
 8011b94:	223a      	movs	r2, #58	; 0x3a
 8011b96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	3302      	adds	r3, #2
 8011b9c:	222f      	movs	r2, #47	; 0x2f
 8011b9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	3303      	adds	r3, #3
 8011ba4:	2200      	movs	r2, #0
 8011ba6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011ba8:	2300      	movs	r3, #0
 8011baa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8011bae:	4618      	mov	r0, r3
 8011bb0:	371c      	adds	r7, #28
 8011bb2:	46bd      	mov	sp, r7
 8011bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb8:	4770      	bx	lr
 8011bba:	bf00      	nop
 8011bbc:	2000117c 	.word	0x2000117c

08011bc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011bc0:	b580      	push	{r7, lr}
 8011bc2:	b082      	sub	sp, #8
 8011bc4:	af00      	add	r7, sp, #0
 8011bc6:	6078      	str	r0, [r7, #4]
 8011bc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011bca:	2200      	movs	r2, #0
 8011bcc:	6839      	ldr	r1, [r7, #0]
 8011bce:	6878      	ldr	r0, [r7, #4]
 8011bd0:	f7ff ffaa 	bl	8011b28 <FATFS_LinkDriverEx>
 8011bd4:	4603      	mov	r3, r0
}
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	3708      	adds	r7, #8
 8011bda:	46bd      	mov	sp, r7
 8011bdc:	bd80      	pop	{r7, pc}

08011bde <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011bde:	b580      	push	{r7, lr}
 8011be0:	b084      	sub	sp, #16
 8011be2:	af00      	add	r7, sp, #0
 8011be4:	4603      	mov	r3, r0
 8011be6:	6039      	str	r1, [r7, #0]
 8011be8:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8011bea:	2200      	movs	r2, #0
 8011bec:	2101      	movs	r1, #1
 8011bee:	2001      	movs	r0, #1
 8011bf0:	f000 faaa 	bl	8012148 <osSemaphoreNew>
 8011bf4:	4602      	mov	r2, r0
 8011bf6:	683b      	ldr	r3, [r7, #0]
 8011bf8:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	bf14      	ite	ne
 8011c02:	2301      	movne	r3, #1
 8011c04:	2300      	moveq	r3, #0
 8011c06:	b2db      	uxtb	r3, r3
 8011c08:	60fb      	str	r3, [r7, #12]

    return ret;
 8011c0a:	68fb      	ldr	r3, [r7, #12]
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3710      	adds	r7, #16
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}

08011c14 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	b082      	sub	sp, #8
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011c1c:	6878      	ldr	r0, [r7, #4]
 8011c1e:	f000 fbb3 	bl	8012388 <osSemaphoreDelete>
#endif
    return 1;
 8011c22:	2301      	movs	r3, #1
}
 8011c24:	4618      	mov	r0, r3
 8011c26:	3708      	adds	r7, #8
 8011c28:	46bd      	mov	sp, r7
 8011c2a:	bd80      	pop	{r7, pc}

08011c2c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011c2c:	b580      	push	{r7, lr}
 8011c2e:	b084      	sub	sp, #16
 8011c30:	af00      	add	r7, sp, #0
 8011c32:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011c34:	2300      	movs	r3, #0
 8011c36:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011c38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f000 fb0d 	bl	801225c <osSemaphoreAcquire>
 8011c42:	4603      	mov	r3, r0
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d101      	bne.n	8011c4c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8011c48:	2301      	movs	r3, #1
 8011c4a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011c4c:	68fb      	ldr	r3, [r7, #12]
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3710      	adds	r7, #16
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011c56:	b580      	push	{r7, lr}
 8011c58:	b082      	sub	sp, #8
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 fb4e 	bl	8012300 <osSemaphoreRelease>
#endif
}
 8011c64:	bf00      	nop
 8011c66:	3708      	adds	r7, #8
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	bd80      	pop	{r7, pc}

08011c6c <__NVIC_SetPriority>:
{
 8011c6c:	b480      	push	{r7}
 8011c6e:	b083      	sub	sp, #12
 8011c70:	af00      	add	r7, sp, #0
 8011c72:	4603      	mov	r3, r0
 8011c74:	6039      	str	r1, [r7, #0]
 8011c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	db0a      	blt.n	8011c96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011c80:	683b      	ldr	r3, [r7, #0]
 8011c82:	b2da      	uxtb	r2, r3
 8011c84:	490c      	ldr	r1, [pc, #48]	; (8011cb8 <__NVIC_SetPriority+0x4c>)
 8011c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011c8a:	0112      	lsls	r2, r2, #4
 8011c8c:	b2d2      	uxtb	r2, r2
 8011c8e:	440b      	add	r3, r1
 8011c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011c94:	e00a      	b.n	8011cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	b2da      	uxtb	r2, r3
 8011c9a:	4908      	ldr	r1, [pc, #32]	; (8011cbc <__NVIC_SetPriority+0x50>)
 8011c9c:	79fb      	ldrb	r3, [r7, #7]
 8011c9e:	f003 030f 	and.w	r3, r3, #15
 8011ca2:	3b04      	subs	r3, #4
 8011ca4:	0112      	lsls	r2, r2, #4
 8011ca6:	b2d2      	uxtb	r2, r2
 8011ca8:	440b      	add	r3, r1
 8011caa:	761a      	strb	r2, [r3, #24]
}
 8011cac:	bf00      	nop
 8011cae:	370c      	adds	r7, #12
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb6:	4770      	bx	lr
 8011cb8:	e000e100 	.word	0xe000e100
 8011cbc:	e000ed00 	.word	0xe000ed00

08011cc0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011cc4:	4b05      	ldr	r3, [pc, #20]	; (8011cdc <SysTick_Handler+0x1c>)
 8011cc6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011cc8:	f002 fcdc 	bl	8014684 <xTaskGetSchedulerState>
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2b01      	cmp	r3, #1
 8011cd0:	d001      	beq.n	8011cd6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011cd2:	f003 fdc1 	bl	8015858 <xPortSysTickHandler>
  }
}
 8011cd6:	bf00      	nop
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	e000e010 	.word	0xe000e010

08011ce0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	f06f 0004 	mvn.w	r0, #4
 8011cea:	f7ff ffbf 	bl	8011c6c <__NVIC_SetPriority>
#endif
}
 8011cee:	bf00      	nop
 8011cf0:	bd80      	pop	{r7, pc}
	...

08011cf4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011cf4:	b480      	push	{r7}
 8011cf6:	b083      	sub	sp, #12
 8011cf8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011cfa:	f3ef 8305 	mrs	r3, IPSR
 8011cfe:	603b      	str	r3, [r7, #0]
  return(result);
 8011d00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d003      	beq.n	8011d0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011d06:	f06f 0305 	mvn.w	r3, #5
 8011d0a:	607b      	str	r3, [r7, #4]
 8011d0c:	e00c      	b.n	8011d28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011d0e:	4b0a      	ldr	r3, [pc, #40]	; (8011d38 <osKernelInitialize+0x44>)
 8011d10:	681b      	ldr	r3, [r3, #0]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d105      	bne.n	8011d22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011d16:	4b08      	ldr	r3, [pc, #32]	; (8011d38 <osKernelInitialize+0x44>)
 8011d18:	2201      	movs	r2, #1
 8011d1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	607b      	str	r3, [r7, #4]
 8011d20:	e002      	b.n	8011d28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011d22:	f04f 33ff 	mov.w	r3, #4294967295
 8011d26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011d28:	687b      	ldr	r3, [r7, #4]
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	370c      	adds	r7, #12
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d34:	4770      	bx	lr
 8011d36:	bf00      	nop
 8011d38:	20001188 	.word	0x20001188

08011d3c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8011d3c:	b580      	push	{r7, lr}
 8011d3e:	b082      	sub	sp, #8
 8011d40:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8011d42:	f002 fc9f 	bl	8014684 <xTaskGetSchedulerState>
 8011d46:	4603      	mov	r3, r0
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d004      	beq.n	8011d56 <osKernelGetState+0x1a>
 8011d4c:	2b02      	cmp	r3, #2
 8011d4e:	d105      	bne.n	8011d5c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8011d50:	2302      	movs	r3, #2
 8011d52:	607b      	str	r3, [r7, #4]
      break;
 8011d54:	e00c      	b.n	8011d70 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8011d56:	2303      	movs	r3, #3
 8011d58:	607b      	str	r3, [r7, #4]
      break;
 8011d5a:	e009      	b.n	8011d70 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8011d5c:	4b07      	ldr	r3, [pc, #28]	; (8011d7c <osKernelGetState+0x40>)
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2b01      	cmp	r3, #1
 8011d62:	d102      	bne.n	8011d6a <osKernelGetState+0x2e>
        state = osKernelReady;
 8011d64:	2301      	movs	r3, #1
 8011d66:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8011d68:	e001      	b.n	8011d6e <osKernelGetState+0x32>
        state = osKernelInactive;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	607b      	str	r3, [r7, #4]
      break;
 8011d6e:	bf00      	nop
  }

  return (state);
 8011d70:	687b      	ldr	r3, [r7, #4]
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3708      	adds	r7, #8
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20001188 	.word	0x20001188

08011d80 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b082      	sub	sp, #8
 8011d84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d86:	f3ef 8305 	mrs	r3, IPSR
 8011d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8011d8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d003      	beq.n	8011d9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8011d92:	f06f 0305 	mvn.w	r3, #5
 8011d96:	607b      	str	r3, [r7, #4]
 8011d98:	e010      	b.n	8011dbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011d9a:	4b0b      	ldr	r3, [pc, #44]	; (8011dc8 <osKernelStart+0x48>)
 8011d9c:	681b      	ldr	r3, [r3, #0]
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d109      	bne.n	8011db6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011da2:	f7ff ff9d 	bl	8011ce0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011da6:	4b08      	ldr	r3, [pc, #32]	; (8011dc8 <osKernelStart+0x48>)
 8011da8:	2202      	movs	r2, #2
 8011daa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011dac:	f001 fffc 	bl	8013da8 <vTaskStartScheduler>
      stat = osOK;
 8011db0:	2300      	movs	r3, #0
 8011db2:	607b      	str	r3, [r7, #4]
 8011db4:	e002      	b.n	8011dbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011db6:	f04f 33ff 	mov.w	r3, #4294967295
 8011dba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011dbc:	687b      	ldr	r3, [r7, #4]
}
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	3708      	adds	r7, #8
 8011dc2:	46bd      	mov	sp, r7
 8011dc4:	bd80      	pop	{r7, pc}
 8011dc6:	bf00      	nop
 8011dc8:	20001188 	.word	0x20001188

08011dcc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b082      	sub	sp, #8
 8011dd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011dd2:	f3ef 8305 	mrs	r3, IPSR
 8011dd6:	603b      	str	r3, [r7, #0]
  return(result);
 8011dd8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d003      	beq.n	8011de6 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8011dde:	f002 f90f 	bl	8014000 <xTaskGetTickCountFromISR>
 8011de2:	6078      	str	r0, [r7, #4]
 8011de4:	e002      	b.n	8011dec <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8011de6:	f002 f8fb 	bl	8013fe0 <xTaskGetTickCount>
 8011dea:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8011dec:	687b      	ldr	r3, [r7, #4]
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3708      	adds	r7, #8
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}

08011df6 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011df6:	b580      	push	{r7, lr}
 8011df8:	b08e      	sub	sp, #56	; 0x38
 8011dfa:	af04      	add	r7, sp, #16
 8011dfc:	60f8      	str	r0, [r7, #12]
 8011dfe:	60b9      	str	r1, [r7, #8]
 8011e00:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011e02:	2300      	movs	r3, #0
 8011e04:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e06:	f3ef 8305 	mrs	r3, IPSR
 8011e0a:	617b      	str	r3, [r7, #20]
  return(result);
 8011e0c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d17e      	bne.n	8011f10 <osThreadNew+0x11a>
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d07b      	beq.n	8011f10 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011e18:	2380      	movs	r3, #128	; 0x80
 8011e1a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011e1c:	2318      	movs	r3, #24
 8011e1e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011e20:	2300      	movs	r3, #0
 8011e22:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011e24:	f04f 33ff 	mov.w	r3, #4294967295
 8011e28:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d045      	beq.n	8011ebc <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d002      	beq.n	8011e3e <osThreadNew+0x48>
        name = attr->name;
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	699b      	ldr	r3, [r3, #24]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d002      	beq.n	8011e4c <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	699b      	ldr	r3, [r3, #24]
 8011e4a:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011e4c:	69fb      	ldr	r3, [r7, #28]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d008      	beq.n	8011e64 <osThreadNew+0x6e>
 8011e52:	69fb      	ldr	r3, [r7, #28]
 8011e54:	2b38      	cmp	r3, #56	; 0x38
 8011e56:	d805      	bhi.n	8011e64 <osThreadNew+0x6e>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	685b      	ldr	r3, [r3, #4]
 8011e5c:	f003 0301 	and.w	r3, r3, #1
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d001      	beq.n	8011e68 <osThreadNew+0x72>
        return (NULL);
 8011e64:	2300      	movs	r3, #0
 8011e66:	e054      	b.n	8011f12 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	695b      	ldr	r3, [r3, #20]
 8011e6c:	2b00      	cmp	r3, #0
 8011e6e:	d003      	beq.n	8011e78 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	695b      	ldr	r3, [r3, #20]
 8011e74:	089b      	lsrs	r3, r3, #2
 8011e76:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	689b      	ldr	r3, [r3, #8]
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d00e      	beq.n	8011e9e <osThreadNew+0xa8>
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	68db      	ldr	r3, [r3, #12]
 8011e84:	2ba7      	cmp	r3, #167	; 0xa7
 8011e86:	d90a      	bls.n	8011e9e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d006      	beq.n	8011e9e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	695b      	ldr	r3, [r3, #20]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d002      	beq.n	8011e9e <osThreadNew+0xa8>
        mem = 1;
 8011e98:	2301      	movs	r3, #1
 8011e9a:	61bb      	str	r3, [r7, #24]
 8011e9c:	e010      	b.n	8011ec0 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	689b      	ldr	r3, [r3, #8]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d10c      	bne.n	8011ec0 <osThreadNew+0xca>
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d108      	bne.n	8011ec0 <osThreadNew+0xca>
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	691b      	ldr	r3, [r3, #16]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d104      	bne.n	8011ec0 <osThreadNew+0xca>
          mem = 0;
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	61bb      	str	r3, [r7, #24]
 8011eba:	e001      	b.n	8011ec0 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011ec0:	69bb      	ldr	r3, [r7, #24]
 8011ec2:	2b01      	cmp	r3, #1
 8011ec4:	d110      	bne.n	8011ee8 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011eca:	687a      	ldr	r2, [r7, #4]
 8011ecc:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ece:	9202      	str	r2, [sp, #8]
 8011ed0:	9301      	str	r3, [sp, #4]
 8011ed2:	69fb      	ldr	r3, [r7, #28]
 8011ed4:	9300      	str	r3, [sp, #0]
 8011ed6:	68bb      	ldr	r3, [r7, #8]
 8011ed8:	6a3a      	ldr	r2, [r7, #32]
 8011eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011edc:	68f8      	ldr	r0, [r7, #12]
 8011ede:	f001 fc9f 	bl	8013820 <xTaskCreateStatic>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	613b      	str	r3, [r7, #16]
 8011ee6:	e013      	b.n	8011f10 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011ee8:	69bb      	ldr	r3, [r7, #24]
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d110      	bne.n	8011f10 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011eee:	6a3b      	ldr	r3, [r7, #32]
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	f107 0310 	add.w	r3, r7, #16
 8011ef6:	9301      	str	r3, [sp, #4]
 8011ef8:	69fb      	ldr	r3, [r7, #28]
 8011efa:	9300      	str	r3, [sp, #0]
 8011efc:	68bb      	ldr	r3, [r7, #8]
 8011efe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011f00:	68f8      	ldr	r0, [r7, #12]
 8011f02:	f001 fcea 	bl	80138da <xTaskCreate>
 8011f06:	4603      	mov	r3, r0
 8011f08:	2b01      	cmp	r3, #1
 8011f0a:	d001      	beq.n	8011f10 <osThreadNew+0x11a>
            hTask = NULL;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011f10:	693b      	ldr	r3, [r7, #16]
}
 8011f12:	4618      	mov	r0, r3
 8011f14:	3728      	adds	r7, #40	; 0x28
 8011f16:	46bd      	mov	sp, r7
 8011f18:	bd80      	pop	{r7, pc}

08011f1a <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 8011f1a:	b580      	push	{r7, lr}
 8011f1c:	b086      	sub	sp, #24
 8011f1e:	af00      	add	r7, sp, #0
 8011f20:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f26:	f3ef 8305 	mrs	r3, IPSR
 8011f2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8011f2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d003      	beq.n	8011f3a <osThreadTerminate+0x20>
    stat = osErrorISR;
 8011f32:	f06f 0305 	mvn.w	r3, #5
 8011f36:	617b      	str	r3, [r7, #20]
 8011f38:	e017      	b.n	8011f6a <osThreadTerminate+0x50>
  }
  else if (hTask == NULL) {
 8011f3a:	693b      	ldr	r3, [r7, #16]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d103      	bne.n	8011f48 <osThreadTerminate+0x2e>
    stat = osErrorParameter;
 8011f40:	f06f 0303 	mvn.w	r3, #3
 8011f44:	617b      	str	r3, [r7, #20]
 8011f46:	e010      	b.n	8011f6a <osThreadTerminate+0x50>
  }
  else {
    tstate = eTaskGetState (hTask);
 8011f48:	6938      	ldr	r0, [r7, #16]
 8011f4a:	f001 fec7 	bl	8013cdc <eTaskGetState>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	73fb      	strb	r3, [r7, #15]

    if (tstate != eDeleted) {
 8011f52:	7bfb      	ldrb	r3, [r7, #15]
 8011f54:	2b04      	cmp	r3, #4
 8011f56:	d005      	beq.n	8011f64 <osThreadTerminate+0x4a>
      stat = osOK;
 8011f58:	2300      	movs	r3, #0
 8011f5a:	617b      	str	r3, [r7, #20]
      vTaskDelete (hTask);
 8011f5c:	6938      	ldr	r0, [r7, #16]
 8011f5e:	f001 fe17 	bl	8013b90 <vTaskDelete>
 8011f62:	e002      	b.n	8011f6a <osThreadTerminate+0x50>
    } else {
      stat = osErrorResource;
 8011f64:	f06f 0302 	mvn.w	r3, #2
 8011f68:	617b      	str	r3, [r7, #20]
  }
#else
  stat = osError;
#endif

  return (stat);
 8011f6a:	697b      	ldr	r3, [r7, #20]
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3718      	adds	r7, #24
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b088      	sub	sp, #32
 8011f78:	af02      	add	r7, sp, #8
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8011f82:	697b      	ldr	r3, [r7, #20]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d002      	beq.n	8011f8e <osThreadFlagsSet+0x1a>
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	da03      	bge.n	8011f96 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8011f8e:	f06f 0303 	mvn.w	r3, #3
 8011f92:	60fb      	str	r3, [r7, #12]
 8011f94:	e035      	b.n	8012002 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8011f96:	f04f 33ff 	mov.w	r3, #4294967295
 8011f9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f9c:	f3ef 8305 	mrs	r3, IPSR
 8011fa0:	613b      	str	r3, [r7, #16]
  return(result);
 8011fa2:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d01f      	beq.n	8011fe8 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8011fa8:	2300      	movs	r3, #0
 8011faa:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8011fac:	f107 0308 	add.w	r3, r7, #8
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	2201      	movs	r2, #1
 8011fb6:	6839      	ldr	r1, [r7, #0]
 8011fb8:	6978      	ldr	r0, [r7, #20]
 8011fba:	f002 fe0b 	bl	8014bd4 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8011fbe:	f107 030c 	add.w	r3, r7, #12
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	9200      	str	r2, [sp, #0]
 8011fc6:	2200      	movs	r2, #0
 8011fc8:	2100      	movs	r1, #0
 8011fca:	6978      	ldr	r0, [r7, #20]
 8011fcc:	f002 fe02 	bl	8014bd4 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d015      	beq.n	8012002 <osThreadFlagsSet+0x8e>
 8011fd6:	4b0d      	ldr	r3, [pc, #52]	; (801200c <osThreadFlagsSet+0x98>)
 8011fd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011fdc:	601a      	str	r2, [r3, #0]
 8011fde:	f3bf 8f4f 	dsb	sy
 8011fe2:	f3bf 8f6f 	isb	sy
 8011fe6:	e00c      	b.n	8012002 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8011fe8:	2300      	movs	r3, #0
 8011fea:	2201      	movs	r2, #1
 8011fec:	6839      	ldr	r1, [r7, #0]
 8011fee:	6978      	ldr	r0, [r7, #20]
 8011ff0:	f002 fd32 	bl	8014a58 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8011ff4:	f107 030c 	add.w	r3, r7, #12
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	6978      	ldr	r0, [r7, #20]
 8011ffe:	f002 fd2b 	bl	8014a58 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8012002:	68fb      	ldr	r3, [r7, #12]
}
 8012004:	4618      	mov	r0, r3
 8012006:	3718      	adds	r7, #24
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	e000ed04 	.word	0xe000ed04

08012010 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8012010:	b580      	push	{r7, lr}
 8012012:	b08c      	sub	sp, #48	; 0x30
 8012014:	af00      	add	r7, sp, #0
 8012016:	60f8      	str	r0, [r7, #12]
 8012018:	60b9      	str	r1, [r7, #8]
 801201a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801201c:	f3ef 8305 	mrs	r3, IPSR
 8012020:	617b      	str	r3, [r7, #20]
  return(result);
 8012022:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8012024:	2b00      	cmp	r3, #0
 8012026:	d003      	beq.n	8012030 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8012028:	f06f 0305 	mvn.w	r3, #5
 801202c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801202e:	e06b      	b.n	8012108 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2b00      	cmp	r3, #0
 8012034:	da03      	bge.n	801203e <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8012036:	f06f 0303 	mvn.w	r3, #3
 801203a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801203c:	e064      	b.n	8012108 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	f003 0302 	and.w	r3, r3, #2
 8012044:	2b00      	cmp	r3, #0
 8012046:	d002      	beq.n	801204e <osThreadFlagsWait+0x3e>
      clear = 0U;
 8012048:	2300      	movs	r3, #0
 801204a:	62bb      	str	r3, [r7, #40]	; 0x28
 801204c:	e001      	b.n	8012052 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8012052:	2300      	movs	r3, #0
 8012054:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 801205a:	f001 ffc1 	bl	8013fe0 <xTaskGetTickCount>
 801205e:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8012060:	f107 0210 	add.w	r2, r7, #16
 8012064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012066:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012068:	2000      	movs	r0, #0
 801206a:	f002 fc95 	bl	8014998 <xTaskNotifyWait>
 801206e:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8012070:	69fb      	ldr	r3, [r7, #28]
 8012072:	2b01      	cmp	r3, #1
 8012074:	d137      	bne.n	80120e6 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8012076:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	4013      	ands	r3, r2
 801207c:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 801207e:	693b      	ldr	r3, [r7, #16]
 8012080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012082:	4313      	orrs	r3, r2
 8012084:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	f003 0301 	and.w	r3, r3, #1
 801208c:	2b00      	cmp	r3, #0
 801208e:	d00c      	beq.n	80120aa <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8012090:	68fa      	ldr	r2, [r7, #12]
 8012092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012094:	4013      	ands	r3, r2
 8012096:	68fa      	ldr	r2, [r7, #12]
 8012098:	429a      	cmp	r2, r3
 801209a:	d032      	beq.n	8012102 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d10f      	bne.n	80120c2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80120a2:	f06f 0302 	mvn.w	r3, #2
 80120a6:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80120a8:	e02e      	b.n	8012108 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 80120aa:	68fa      	ldr	r2, [r7, #12]
 80120ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ae:	4013      	ands	r3, r2
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d128      	bne.n	8012106 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d103      	bne.n	80120c2 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 80120ba:	f06f 0302 	mvn.w	r3, #2
 80120be:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 80120c0:	e022      	b.n	8012108 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 80120c2:	f001 ff8d 	bl	8013fe0 <xTaskGetTickCount>
 80120c6:	4602      	mov	r2, r0
 80120c8:	6a3b      	ldr	r3, [r7, #32]
 80120ca:	1ad3      	subs	r3, r2, r3
 80120cc:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 80120ce:	69ba      	ldr	r2, [r7, #24]
 80120d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d902      	bls.n	80120dc <osThreadFlagsWait+0xcc>
          tout  = 0;
 80120d6:	2300      	movs	r3, #0
 80120d8:	627b      	str	r3, [r7, #36]	; 0x24
 80120da:	e00e      	b.n	80120fa <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 80120dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80120de:	69bb      	ldr	r3, [r7, #24]
 80120e0:	1ad3      	subs	r3, r2, r3
 80120e2:	627b      	str	r3, [r7, #36]	; 0x24
 80120e4:	e009      	b.n	80120fa <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d103      	bne.n	80120f4 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 80120ec:	f06f 0302 	mvn.w	r3, #2
 80120f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80120f2:	e002      	b.n	80120fa <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 80120f4:	f06f 0301 	mvn.w	r3, #1
 80120f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d1af      	bne.n	8012060 <osThreadFlagsWait+0x50>
 8012100:	e002      	b.n	8012108 <osThreadFlagsWait+0xf8>
            break;
 8012102:	bf00      	nop
 8012104:	e000      	b.n	8012108 <osThreadFlagsWait+0xf8>
            break;
 8012106:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8012108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801210a:	4618      	mov	r0, r3
 801210c:	3730      	adds	r7, #48	; 0x30
 801210e:	46bd      	mov	sp, r7
 8012110:	bd80      	pop	{r7, pc}

08012112 <osDelay>:
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012112:	b580      	push	{r7, lr}
 8012114:	b084      	sub	sp, #16
 8012116:	af00      	add	r7, sp, #0
 8012118:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801211a:	f3ef 8305 	mrs	r3, IPSR
 801211e:	60bb      	str	r3, [r7, #8]
  return(result);
 8012120:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012122:	2b00      	cmp	r3, #0
 8012124:	d003      	beq.n	801212e <osDelay+0x1c>
    stat = osErrorISR;
 8012126:	f06f 0305 	mvn.w	r3, #5
 801212a:	60fb      	str	r3, [r7, #12]
 801212c:	e007      	b.n	801213e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 801212e:	2300      	movs	r3, #0
 8012130:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d002      	beq.n	801213e <osDelay+0x2c>
      vTaskDelay(ticks);
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f001 fd9b 	bl	8013c74 <vTaskDelay>
    }
  }

  return (stat);
 801213e:	68fb      	ldr	r3, [r7, #12]
}
 8012140:	4618      	mov	r0, r3
 8012142:	3710      	adds	r7, #16
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}

08012148 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012148:	b580      	push	{r7, lr}
 801214a:	b08a      	sub	sp, #40	; 0x28
 801214c:	af02      	add	r7, sp, #8
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012154:	2300      	movs	r3, #0
 8012156:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012158:	f3ef 8305 	mrs	r3, IPSR
 801215c:	613b      	str	r3, [r7, #16]
  return(result);
 801215e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012160:	2b00      	cmp	r3, #0
 8012162:	d175      	bne.n	8012250 <osSemaphoreNew+0x108>
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d072      	beq.n	8012250 <osSemaphoreNew+0x108>
 801216a:	68ba      	ldr	r2, [r7, #8]
 801216c:	68fb      	ldr	r3, [r7, #12]
 801216e:	429a      	cmp	r2, r3
 8012170:	d86e      	bhi.n	8012250 <osSemaphoreNew+0x108>
    mem = -1;
 8012172:	f04f 33ff 	mov.w	r3, #4294967295
 8012176:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d015      	beq.n	80121aa <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	689b      	ldr	r3, [r3, #8]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d006      	beq.n	8012194 <osSemaphoreNew+0x4c>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	68db      	ldr	r3, [r3, #12]
 801218a:	2b4f      	cmp	r3, #79	; 0x4f
 801218c:	d902      	bls.n	8012194 <osSemaphoreNew+0x4c>
        mem = 1;
 801218e:	2301      	movs	r3, #1
 8012190:	61bb      	str	r3, [r7, #24]
 8012192:	e00c      	b.n	80121ae <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	689b      	ldr	r3, [r3, #8]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d108      	bne.n	80121ae <osSemaphoreNew+0x66>
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	68db      	ldr	r3, [r3, #12]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d104      	bne.n	80121ae <osSemaphoreNew+0x66>
          mem = 0;
 80121a4:	2300      	movs	r3, #0
 80121a6:	61bb      	str	r3, [r7, #24]
 80121a8:	e001      	b.n	80121ae <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80121aa:	2300      	movs	r3, #0
 80121ac:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121b4:	d04c      	beq.n	8012250 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d128      	bne.n	801220e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80121bc:	69bb      	ldr	r3, [r7, #24]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	d10a      	bne.n	80121d8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	689b      	ldr	r3, [r3, #8]
 80121c6:	2203      	movs	r2, #3
 80121c8:	9200      	str	r2, [sp, #0]
 80121ca:	2200      	movs	r2, #0
 80121cc:	2100      	movs	r1, #0
 80121ce:	2001      	movs	r0, #1
 80121d0:	f000 fb80 	bl	80128d4 <xQueueGenericCreateStatic>
 80121d4:	61f8      	str	r0, [r7, #28]
 80121d6:	e005      	b.n	80121e4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80121d8:	2203      	movs	r2, #3
 80121da:	2100      	movs	r1, #0
 80121dc:	2001      	movs	r0, #1
 80121de:	f000 fbf1 	bl	80129c4 <xQueueGenericCreate>
 80121e2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80121e4:	69fb      	ldr	r3, [r7, #28]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d022      	beq.n	8012230 <osSemaphoreNew+0xe8>
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d01f      	beq.n	8012230 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80121f0:	2300      	movs	r3, #0
 80121f2:	2200      	movs	r2, #0
 80121f4:	2100      	movs	r1, #0
 80121f6:	69f8      	ldr	r0, [r7, #28]
 80121f8:	f000 fcac 	bl	8012b54 <xQueueGenericSend>
 80121fc:	4603      	mov	r3, r0
 80121fe:	2b01      	cmp	r3, #1
 8012200:	d016      	beq.n	8012230 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012202:	69f8      	ldr	r0, [r7, #28]
 8012204:	f001 f938 	bl	8013478 <vQueueDelete>
            hSemaphore = NULL;
 8012208:	2300      	movs	r3, #0
 801220a:	61fb      	str	r3, [r7, #28]
 801220c:	e010      	b.n	8012230 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 801220e:	69bb      	ldr	r3, [r7, #24]
 8012210:	2b01      	cmp	r3, #1
 8012212:	d108      	bne.n	8012226 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	689b      	ldr	r3, [r3, #8]
 8012218:	461a      	mov	r2, r3
 801221a:	68b9      	ldr	r1, [r7, #8]
 801221c:	68f8      	ldr	r0, [r7, #12]
 801221e:	f000 fc2e 	bl	8012a7e <xQueueCreateCountingSemaphoreStatic>
 8012222:	61f8      	str	r0, [r7, #28]
 8012224:	e004      	b.n	8012230 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8012226:	68b9      	ldr	r1, [r7, #8]
 8012228:	68f8      	ldr	r0, [r7, #12]
 801222a:	f000 fc5f 	bl	8012aec <xQueueCreateCountingSemaphore>
 801222e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d00c      	beq.n	8012250 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d003      	beq.n	8012244 <osSemaphoreNew+0xfc>
          name = attr->name;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	617b      	str	r3, [r7, #20]
 8012242:	e001      	b.n	8012248 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8012244:	2300      	movs	r3, #0
 8012246:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012248:	6979      	ldr	r1, [r7, #20]
 801224a:	69f8      	ldr	r0, [r7, #28]
 801224c:	f001 fa60 	bl	8013710 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012250:	69fb      	ldr	r3, [r7, #28]
}
 8012252:	4618      	mov	r0, r3
 8012254:	3720      	adds	r7, #32
 8012256:	46bd      	mov	sp, r7
 8012258:	bd80      	pop	{r7, pc}
	...

0801225c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801225c:	b580      	push	{r7, lr}
 801225e:	b086      	sub	sp, #24
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801226a:	2300      	movs	r3, #0
 801226c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d103      	bne.n	801227c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012274:	f06f 0303 	mvn.w	r3, #3
 8012278:	617b      	str	r3, [r7, #20]
 801227a:	e039      	b.n	80122f0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801227c:	f3ef 8305 	mrs	r3, IPSR
 8012280:	60fb      	str	r3, [r7, #12]
  return(result);
 8012282:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012284:	2b00      	cmp	r3, #0
 8012286:	d022      	beq.n	80122ce <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d003      	beq.n	8012296 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 801228e:	f06f 0303 	mvn.w	r3, #3
 8012292:	617b      	str	r3, [r7, #20]
 8012294:	e02c      	b.n	80122f0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8012296:	2300      	movs	r3, #0
 8012298:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801229a:	f107 0308 	add.w	r3, r7, #8
 801229e:	461a      	mov	r2, r3
 80122a0:	2100      	movs	r1, #0
 80122a2:	6938      	ldr	r0, [r7, #16]
 80122a4:	f001 f868 	bl	8013378 <xQueueReceiveFromISR>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d003      	beq.n	80122b6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80122ae:	f06f 0302 	mvn.w	r3, #2
 80122b2:	617b      	str	r3, [r7, #20]
 80122b4:	e01c      	b.n	80122f0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d019      	beq.n	80122f0 <osSemaphoreAcquire+0x94>
 80122bc:	4b0f      	ldr	r3, [pc, #60]	; (80122fc <osSemaphoreAcquire+0xa0>)
 80122be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122c2:	601a      	str	r2, [r3, #0]
 80122c4:	f3bf 8f4f 	dsb	sy
 80122c8:	f3bf 8f6f 	isb	sy
 80122cc:	e010      	b.n	80122f0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80122ce:	6839      	ldr	r1, [r7, #0]
 80122d0:	6938      	ldr	r0, [r7, #16]
 80122d2:	f000 ff45 	bl	8013160 <xQueueSemaphoreTake>
 80122d6:	4603      	mov	r3, r0
 80122d8:	2b01      	cmp	r3, #1
 80122da:	d009      	beq.n	80122f0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80122dc:	683b      	ldr	r3, [r7, #0]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d003      	beq.n	80122ea <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80122e2:	f06f 0301 	mvn.w	r3, #1
 80122e6:	617b      	str	r3, [r7, #20]
 80122e8:	e002      	b.n	80122f0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80122ea:	f06f 0302 	mvn.w	r3, #2
 80122ee:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80122f0:	697b      	ldr	r3, [r7, #20]
}
 80122f2:	4618      	mov	r0, r3
 80122f4:	3718      	adds	r7, #24
 80122f6:	46bd      	mov	sp, r7
 80122f8:	bd80      	pop	{r7, pc}
 80122fa:	bf00      	nop
 80122fc:	e000ed04 	.word	0xe000ed04

08012300 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8012300:	b580      	push	{r7, lr}
 8012302:	b086      	sub	sp, #24
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801230c:	2300      	movs	r3, #0
 801230e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012310:	693b      	ldr	r3, [r7, #16]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d103      	bne.n	801231e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012316:	f06f 0303 	mvn.w	r3, #3
 801231a:	617b      	str	r3, [r7, #20]
 801231c:	e02c      	b.n	8012378 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801231e:	f3ef 8305 	mrs	r3, IPSR
 8012322:	60fb      	str	r3, [r7, #12]
  return(result);
 8012324:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012326:	2b00      	cmp	r3, #0
 8012328:	d01a      	beq.n	8012360 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801232a:	2300      	movs	r3, #0
 801232c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801232e:	f107 0308 	add.w	r3, r7, #8
 8012332:	4619      	mov	r1, r3
 8012334:	6938      	ldr	r0, [r7, #16]
 8012336:	f000 fda6 	bl	8012e86 <xQueueGiveFromISR>
 801233a:	4603      	mov	r3, r0
 801233c:	2b01      	cmp	r3, #1
 801233e:	d003      	beq.n	8012348 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8012340:	f06f 0302 	mvn.w	r3, #2
 8012344:	617b      	str	r3, [r7, #20]
 8012346:	e017      	b.n	8012378 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8012348:	68bb      	ldr	r3, [r7, #8]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d014      	beq.n	8012378 <osSemaphoreRelease+0x78>
 801234e:	4b0d      	ldr	r3, [pc, #52]	; (8012384 <osSemaphoreRelease+0x84>)
 8012350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012354:	601a      	str	r2, [r3, #0]
 8012356:	f3bf 8f4f 	dsb	sy
 801235a:	f3bf 8f6f 	isb	sy
 801235e:	e00b      	b.n	8012378 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012360:	2300      	movs	r3, #0
 8012362:	2200      	movs	r2, #0
 8012364:	2100      	movs	r1, #0
 8012366:	6938      	ldr	r0, [r7, #16]
 8012368:	f000 fbf4 	bl	8012b54 <xQueueGenericSend>
 801236c:	4603      	mov	r3, r0
 801236e:	2b01      	cmp	r3, #1
 8012370:	d002      	beq.n	8012378 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8012372:	f06f 0302 	mvn.w	r3, #2
 8012376:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8012378:	697b      	ldr	r3, [r7, #20]
}
 801237a:	4618      	mov	r0, r3
 801237c:	3718      	adds	r7, #24
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}
 8012382:	bf00      	nop
 8012384:	e000ed04 	.word	0xe000ed04

08012388 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012388:	b580      	push	{r7, lr}
 801238a:	b086      	sub	sp, #24
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012394:	f3ef 8305 	mrs	r3, IPSR
 8012398:	60fb      	str	r3, [r7, #12]
  return(result);
 801239a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 801239c:	2b00      	cmp	r3, #0
 801239e:	d003      	beq.n	80123a8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80123a0:	f06f 0305 	mvn.w	r3, #5
 80123a4:	617b      	str	r3, [r7, #20]
 80123a6:	e00e      	b.n	80123c6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80123a8:	693b      	ldr	r3, [r7, #16]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d103      	bne.n	80123b6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80123ae:	f06f 0303 	mvn.w	r3, #3
 80123b2:	617b      	str	r3, [r7, #20]
 80123b4:	e007      	b.n	80123c6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80123b6:	6938      	ldr	r0, [r7, #16]
 80123b8:	f001 f9d4 	bl	8013764 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80123bc:	2300      	movs	r3, #0
 80123be:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80123c0:	6938      	ldr	r0, [r7, #16]
 80123c2:	f001 f859 	bl	8013478 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80123c6:	697b      	ldr	r3, [r7, #20]
}
 80123c8:	4618      	mov	r0, r3
 80123ca:	3718      	adds	r7, #24
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}

080123d0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80123d0:	b580      	push	{r7, lr}
 80123d2:	b08a      	sub	sp, #40	; 0x28
 80123d4:	af02      	add	r7, sp, #8
 80123d6:	60f8      	str	r0, [r7, #12]
 80123d8:	60b9      	str	r1, [r7, #8]
 80123da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80123dc:	2300      	movs	r3, #0
 80123de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80123e0:	f3ef 8305 	mrs	r3, IPSR
 80123e4:	613b      	str	r3, [r7, #16]
  return(result);
 80123e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d15f      	bne.n	80124ac <osMessageQueueNew+0xdc>
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d05c      	beq.n	80124ac <osMessageQueueNew+0xdc>
 80123f2:	68bb      	ldr	r3, [r7, #8]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d059      	beq.n	80124ac <osMessageQueueNew+0xdc>
    mem = -1;
 80123f8:	f04f 33ff 	mov.w	r3, #4294967295
 80123fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d029      	beq.n	8012458 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	689b      	ldr	r3, [r3, #8]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d012      	beq.n	8012432 <osMessageQueueNew+0x62>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	68db      	ldr	r3, [r3, #12]
 8012410:	2b4f      	cmp	r3, #79	; 0x4f
 8012412:	d90e      	bls.n	8012432 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00a      	beq.n	8012432 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	695a      	ldr	r2, [r3, #20]
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	68b9      	ldr	r1, [r7, #8]
 8012424:	fb01 f303 	mul.w	r3, r1, r3
 8012428:	429a      	cmp	r2, r3
 801242a:	d302      	bcc.n	8012432 <osMessageQueueNew+0x62>
        mem = 1;
 801242c:	2301      	movs	r3, #1
 801242e:	61bb      	str	r3, [r7, #24]
 8012430:	e014      	b.n	801245c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	689b      	ldr	r3, [r3, #8]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d110      	bne.n	801245c <osMessageQueueNew+0x8c>
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	68db      	ldr	r3, [r3, #12]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d10c      	bne.n	801245c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012446:	2b00      	cmp	r3, #0
 8012448:	d108      	bne.n	801245c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	695b      	ldr	r3, [r3, #20]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d104      	bne.n	801245c <osMessageQueueNew+0x8c>
          mem = 0;
 8012452:	2300      	movs	r3, #0
 8012454:	61bb      	str	r3, [r7, #24]
 8012456:	e001      	b.n	801245c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012458:	2300      	movs	r3, #0
 801245a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	2b01      	cmp	r3, #1
 8012460:	d10b      	bne.n	801247a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	691a      	ldr	r2, [r3, #16]
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	689b      	ldr	r3, [r3, #8]
 801246a:	2100      	movs	r1, #0
 801246c:	9100      	str	r1, [sp, #0]
 801246e:	68b9      	ldr	r1, [r7, #8]
 8012470:	68f8      	ldr	r0, [r7, #12]
 8012472:	f000 fa2f 	bl	80128d4 <xQueueGenericCreateStatic>
 8012476:	61f8      	str	r0, [r7, #28]
 8012478:	e008      	b.n	801248c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801247a:	69bb      	ldr	r3, [r7, #24]
 801247c:	2b00      	cmp	r3, #0
 801247e:	d105      	bne.n	801248c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012480:	2200      	movs	r2, #0
 8012482:	68b9      	ldr	r1, [r7, #8]
 8012484:	68f8      	ldr	r0, [r7, #12]
 8012486:	f000 fa9d 	bl	80129c4 <xQueueGenericCreate>
 801248a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801248c:	69fb      	ldr	r3, [r7, #28]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00c      	beq.n	80124ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d003      	beq.n	80124a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	617b      	str	r3, [r7, #20]
 801249e:	e001      	b.n	80124a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80124a0:	2300      	movs	r3, #0
 80124a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80124a4:	6979      	ldr	r1, [r7, #20]
 80124a6:	69f8      	ldr	r0, [r7, #28]
 80124a8:	f001 f932 	bl	8013710 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80124ac:	69fb      	ldr	r3, [r7, #28]
}
 80124ae:	4618      	mov	r0, r3
 80124b0:	3720      	adds	r7, #32
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
	...

080124b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b088      	sub	sp, #32
 80124bc:	af00      	add	r7, sp, #0
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	603b      	str	r3, [r7, #0]
 80124c4:	4613      	mov	r3, r2
 80124c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80124cc:	2300      	movs	r3, #0
 80124ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80124d0:	f3ef 8305 	mrs	r3, IPSR
 80124d4:	617b      	str	r3, [r7, #20]
  return(result);
 80124d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d028      	beq.n	801252e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80124dc:	69bb      	ldr	r3, [r7, #24]
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d005      	beq.n	80124ee <osMessageQueuePut+0x36>
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d002      	beq.n	80124ee <osMessageQueuePut+0x36>
 80124e8:	683b      	ldr	r3, [r7, #0]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d003      	beq.n	80124f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80124ee:	f06f 0303 	mvn.w	r3, #3
 80124f2:	61fb      	str	r3, [r7, #28]
 80124f4:	e038      	b.n	8012568 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80124f6:	2300      	movs	r3, #0
 80124f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80124fa:	f107 0210 	add.w	r2, r7, #16
 80124fe:	2300      	movs	r3, #0
 8012500:	68b9      	ldr	r1, [r7, #8]
 8012502:	69b8      	ldr	r0, [r7, #24]
 8012504:	f000 fc24 	bl	8012d50 <xQueueGenericSendFromISR>
 8012508:	4603      	mov	r3, r0
 801250a:	2b01      	cmp	r3, #1
 801250c:	d003      	beq.n	8012516 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801250e:	f06f 0302 	mvn.w	r3, #2
 8012512:	61fb      	str	r3, [r7, #28]
 8012514:	e028      	b.n	8012568 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012516:	693b      	ldr	r3, [r7, #16]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d025      	beq.n	8012568 <osMessageQueuePut+0xb0>
 801251c:	4b15      	ldr	r3, [pc, #84]	; (8012574 <osMessageQueuePut+0xbc>)
 801251e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012522:	601a      	str	r2, [r3, #0]
 8012524:	f3bf 8f4f 	dsb	sy
 8012528:	f3bf 8f6f 	isb	sy
 801252c:	e01c      	b.n	8012568 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	2b00      	cmp	r3, #0
 8012532:	d002      	beq.n	801253a <osMessageQueuePut+0x82>
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d103      	bne.n	8012542 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801253a:	f06f 0303 	mvn.w	r3, #3
 801253e:	61fb      	str	r3, [r7, #28]
 8012540:	e012      	b.n	8012568 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012542:	2300      	movs	r3, #0
 8012544:	683a      	ldr	r2, [r7, #0]
 8012546:	68b9      	ldr	r1, [r7, #8]
 8012548:	69b8      	ldr	r0, [r7, #24]
 801254a:	f000 fb03 	bl	8012b54 <xQueueGenericSend>
 801254e:	4603      	mov	r3, r0
 8012550:	2b01      	cmp	r3, #1
 8012552:	d009      	beq.n	8012568 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d003      	beq.n	8012562 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801255a:	f06f 0301 	mvn.w	r3, #1
 801255e:	61fb      	str	r3, [r7, #28]
 8012560:	e002      	b.n	8012568 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012562:	f06f 0302 	mvn.w	r3, #2
 8012566:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012568:	69fb      	ldr	r3, [r7, #28]
}
 801256a:	4618      	mov	r0, r3
 801256c:	3720      	adds	r7, #32
 801256e:	46bd      	mov	sp, r7
 8012570:	bd80      	pop	{r7, pc}
 8012572:	bf00      	nop
 8012574:	e000ed04 	.word	0xe000ed04

08012578 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012578:	b580      	push	{r7, lr}
 801257a:	b088      	sub	sp, #32
 801257c:	af00      	add	r7, sp, #0
 801257e:	60f8      	str	r0, [r7, #12]
 8012580:	60b9      	str	r1, [r7, #8]
 8012582:	607a      	str	r2, [r7, #4]
 8012584:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012586:	68fb      	ldr	r3, [r7, #12]
 8012588:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801258a:	2300      	movs	r3, #0
 801258c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801258e:	f3ef 8305 	mrs	r3, IPSR
 8012592:	617b      	str	r3, [r7, #20]
  return(result);
 8012594:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012596:	2b00      	cmp	r3, #0
 8012598:	d028      	beq.n	80125ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801259a:	69bb      	ldr	r3, [r7, #24]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d005      	beq.n	80125ac <osMessageQueueGet+0x34>
 80125a0:	68bb      	ldr	r3, [r7, #8]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d002      	beq.n	80125ac <osMessageQueueGet+0x34>
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d003      	beq.n	80125b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80125ac:	f06f 0303 	mvn.w	r3, #3
 80125b0:	61fb      	str	r3, [r7, #28]
 80125b2:	e037      	b.n	8012624 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80125b4:	2300      	movs	r3, #0
 80125b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80125b8:	f107 0310 	add.w	r3, r7, #16
 80125bc:	461a      	mov	r2, r3
 80125be:	68b9      	ldr	r1, [r7, #8]
 80125c0:	69b8      	ldr	r0, [r7, #24]
 80125c2:	f000 fed9 	bl	8013378 <xQueueReceiveFromISR>
 80125c6:	4603      	mov	r3, r0
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d003      	beq.n	80125d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80125cc:	f06f 0302 	mvn.w	r3, #2
 80125d0:	61fb      	str	r3, [r7, #28]
 80125d2:	e027      	b.n	8012624 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80125d4:	693b      	ldr	r3, [r7, #16]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d024      	beq.n	8012624 <osMessageQueueGet+0xac>
 80125da:	4b15      	ldr	r3, [pc, #84]	; (8012630 <osMessageQueueGet+0xb8>)
 80125dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80125e0:	601a      	str	r2, [r3, #0]
 80125e2:	f3bf 8f4f 	dsb	sy
 80125e6:	f3bf 8f6f 	isb	sy
 80125ea:	e01b      	b.n	8012624 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80125ec:	69bb      	ldr	r3, [r7, #24]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d002      	beq.n	80125f8 <osMessageQueueGet+0x80>
 80125f2:	68bb      	ldr	r3, [r7, #8]
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d103      	bne.n	8012600 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80125f8:	f06f 0303 	mvn.w	r3, #3
 80125fc:	61fb      	str	r3, [r7, #28]
 80125fe:	e011      	b.n	8012624 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012600:	683a      	ldr	r2, [r7, #0]
 8012602:	68b9      	ldr	r1, [r7, #8]
 8012604:	69b8      	ldr	r0, [r7, #24]
 8012606:	f000 fccb 	bl	8012fa0 <xQueueReceive>
 801260a:	4603      	mov	r3, r0
 801260c:	2b01      	cmp	r3, #1
 801260e:	d009      	beq.n	8012624 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d003      	beq.n	801261e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012616:	f06f 0301 	mvn.w	r3, #1
 801261a:	61fb      	str	r3, [r7, #28]
 801261c:	e002      	b.n	8012624 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801261e:	f06f 0302 	mvn.w	r3, #2
 8012622:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012624:	69fb      	ldr	r3, [r7, #28]
}
 8012626:	4618      	mov	r0, r3
 8012628:	3720      	adds	r7, #32
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}
 801262e:	bf00      	nop
 8012630:	e000ed04 	.word	0xe000ed04

08012634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012634:	b480      	push	{r7}
 8012636:	b085      	sub	sp, #20
 8012638:	af00      	add	r7, sp, #0
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	60b9      	str	r1, [r7, #8]
 801263e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	4a07      	ldr	r2, [pc, #28]	; (8012660 <vApplicationGetIdleTaskMemory+0x2c>)
 8012644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012646:	68bb      	ldr	r3, [r7, #8]
 8012648:	4a06      	ldr	r2, [pc, #24]	; (8012664 <vApplicationGetIdleTaskMemory+0x30>)
 801264a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2280      	movs	r2, #128	; 0x80
 8012650:	601a      	str	r2, [r3, #0]
}
 8012652:	bf00      	nop
 8012654:	3714      	adds	r7, #20
 8012656:	46bd      	mov	sp, r7
 8012658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801265c:	4770      	bx	lr
 801265e:	bf00      	nop
 8012660:	2000118c 	.word	0x2000118c
 8012664:	20001234 	.word	0x20001234

08012668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012668:	b480      	push	{r7}
 801266a:	b085      	sub	sp, #20
 801266c:	af00      	add	r7, sp, #0
 801266e:	60f8      	str	r0, [r7, #12]
 8012670:	60b9      	str	r1, [r7, #8]
 8012672:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	4a07      	ldr	r2, [pc, #28]	; (8012694 <vApplicationGetTimerTaskMemory+0x2c>)
 8012678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	4a06      	ldr	r2, [pc, #24]	; (8012698 <vApplicationGetTimerTaskMemory+0x30>)
 801267e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012686:	601a      	str	r2, [r3, #0]
}
 8012688:	bf00      	nop
 801268a:	3714      	adds	r7, #20
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr
 8012694:	20001434 	.word	0x20001434
 8012698:	200014dc 	.word	0x200014dc

0801269c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801269c:	b480      	push	{r7}
 801269e:	b083      	sub	sp, #12
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	f103 0208 	add.w	r2, r3, #8
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f04f 32ff 	mov.w	r2, #4294967295
 80126b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	f103 0208 	add.w	r2, r3, #8
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f103 0208 	add.w	r2, r3, #8
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80126ca:	687b      	ldr	r3, [r7, #4]
 80126cc:	2200      	movs	r2, #0
 80126ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80126d0:	bf00      	nop
 80126d2:	370c      	adds	r7, #12
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr

080126dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	2200      	movs	r2, #0
 80126e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80126ea:	bf00      	nop
 80126ec:	370c      	adds	r7, #12
 80126ee:	46bd      	mov	sp, r7
 80126f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f4:	4770      	bx	lr

080126f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80126f6:	b480      	push	{r7}
 80126f8:	b085      	sub	sp, #20
 80126fa:	af00      	add	r7, sp, #0
 80126fc:	6078      	str	r0, [r7, #4]
 80126fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012706:	683b      	ldr	r3, [r7, #0]
 8012708:	68fa      	ldr	r2, [r7, #12]
 801270a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	689a      	ldr	r2, [r3, #8]
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	689b      	ldr	r3, [r3, #8]
 8012718:	683a      	ldr	r2, [r7, #0]
 801271a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	683a      	ldr	r2, [r7, #0]
 8012720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012722:	683b      	ldr	r3, [r7, #0]
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	1c5a      	adds	r2, r3, #1
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	601a      	str	r2, [r3, #0]
}
 8012732:	bf00      	nop
 8012734:	3714      	adds	r7, #20
 8012736:	46bd      	mov	sp, r7
 8012738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273c:	4770      	bx	lr

0801273e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801273e:	b480      	push	{r7}
 8012740:	b085      	sub	sp, #20
 8012742:	af00      	add	r7, sp, #0
 8012744:	6078      	str	r0, [r7, #4]
 8012746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012754:	d103      	bne.n	801275e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	691b      	ldr	r3, [r3, #16]
 801275a:	60fb      	str	r3, [r7, #12]
 801275c:	e00c      	b.n	8012778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	3308      	adds	r3, #8
 8012762:	60fb      	str	r3, [r7, #12]
 8012764:	e002      	b.n	801276c <vListInsert+0x2e>
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	685b      	ldr	r3, [r3, #4]
 801276a:	60fb      	str	r3, [r7, #12]
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	685b      	ldr	r3, [r3, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	68ba      	ldr	r2, [r7, #8]
 8012774:	429a      	cmp	r2, r3
 8012776:	d2f6      	bcs.n	8012766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	685a      	ldr	r2, [r3, #4]
 801277c:	683b      	ldr	r3, [r7, #0]
 801277e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	685b      	ldr	r3, [r3, #4]
 8012784:	683a      	ldr	r2, [r7, #0]
 8012786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	68fa      	ldr	r2, [r7, #12]
 801278c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	683a      	ldr	r2, [r7, #0]
 8012792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012794:	683b      	ldr	r3, [r7, #0]
 8012796:	687a      	ldr	r2, [r7, #4]
 8012798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	1c5a      	adds	r2, r3, #1
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	601a      	str	r2, [r3, #0]
}
 80127a4:	bf00      	nop
 80127a6:	3714      	adds	r7, #20
 80127a8:	46bd      	mov	sp, r7
 80127aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ae:	4770      	bx	lr

080127b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80127b0:	b480      	push	{r7}
 80127b2:	b085      	sub	sp, #20
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	691b      	ldr	r3, [r3, #16]
 80127bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	687a      	ldr	r2, [r7, #4]
 80127c4:	6892      	ldr	r2, [r2, #8]
 80127c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	689b      	ldr	r3, [r3, #8]
 80127cc:	687a      	ldr	r2, [r7, #4]
 80127ce:	6852      	ldr	r2, [r2, #4]
 80127d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	685b      	ldr	r3, [r3, #4]
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d103      	bne.n	80127e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	689a      	ldr	r2, [r3, #8]
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	2200      	movs	r2, #0
 80127e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	1e5a      	subs	r2, r3, #1
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	681b      	ldr	r3, [r3, #0]
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3714      	adds	r7, #20
 80127fc:	46bd      	mov	sp, r7
 80127fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012802:	4770      	bx	lr

08012804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012804:	b580      	push	{r7, lr}
 8012806:	b084      	sub	sp, #16
 8012808:	af00      	add	r7, sp, #0
 801280a:	6078      	str	r0, [r7, #4]
 801280c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d10a      	bne.n	801282e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012818:	f04f 0350 	mov.w	r3, #80	; 0x50
 801281c:	f383 8811 	msr	BASEPRI, r3
 8012820:	f3bf 8f6f 	isb	sy
 8012824:	f3bf 8f4f 	dsb	sy
 8012828:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801282a:	bf00      	nop
 801282c:	e7fe      	b.n	801282c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801282e:	f002 ff81 	bl	8015734 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801283a:	68f9      	ldr	r1, [r7, #12]
 801283c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801283e:	fb01 f303 	mul.w	r3, r1, r3
 8012842:	441a      	add	r2, r3
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	2200      	movs	r2, #0
 801284c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801284e:	68fb      	ldr	r3, [r7, #12]
 8012850:	681a      	ldr	r2, [r3, #0]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	681a      	ldr	r2, [r3, #0]
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801285e:	3b01      	subs	r3, #1
 8012860:	68f9      	ldr	r1, [r7, #12]
 8012862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012864:	fb01 f303 	mul.w	r3, r1, r3
 8012868:	441a      	add	r2, r3
 801286a:	68fb      	ldr	r3, [r7, #12]
 801286c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801286e:	68fb      	ldr	r3, [r7, #12]
 8012870:	22ff      	movs	r2, #255	; 0xff
 8012872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	22ff      	movs	r2, #255	; 0xff
 801287a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801287e:	683b      	ldr	r3, [r7, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d114      	bne.n	80128ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012884:	68fb      	ldr	r3, [r7, #12]
 8012886:	691b      	ldr	r3, [r3, #16]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d01a      	beq.n	80128c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	3310      	adds	r3, #16
 8012890:	4618      	mov	r0, r3
 8012892:	f001 fd35 	bl	8014300 <xTaskRemoveFromEventList>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d012      	beq.n	80128c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801289c:	4b0c      	ldr	r3, [pc, #48]	; (80128d0 <xQueueGenericReset+0xcc>)
 801289e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128a2:	601a      	str	r2, [r3, #0]
 80128a4:	f3bf 8f4f 	dsb	sy
 80128a8:	f3bf 8f6f 	isb	sy
 80128ac:	e009      	b.n	80128c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80128ae:	68fb      	ldr	r3, [r7, #12]
 80128b0:	3310      	adds	r3, #16
 80128b2:	4618      	mov	r0, r3
 80128b4:	f7ff fef2 	bl	801269c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	3324      	adds	r3, #36	; 0x24
 80128bc:	4618      	mov	r0, r3
 80128be:	f7ff feed 	bl	801269c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80128c2:	f002 ff67 	bl	8015794 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80128c6:	2301      	movs	r3, #1
}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3710      	adds	r7, #16
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	e000ed04 	.word	0xe000ed04

080128d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b08e      	sub	sp, #56	; 0x38
 80128d8:	af02      	add	r7, sp, #8
 80128da:	60f8      	str	r0, [r7, #12]
 80128dc:	60b9      	str	r1, [r7, #8]
 80128de:	607a      	str	r2, [r7, #4]
 80128e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80128e2:	68fb      	ldr	r3, [r7, #12]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d10a      	bne.n	80128fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80128e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ec:	f383 8811 	msr	BASEPRI, r3
 80128f0:	f3bf 8f6f 	isb	sy
 80128f4:	f3bf 8f4f 	dsb	sy
 80128f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80128fa:	bf00      	nop
 80128fc:	e7fe      	b.n	80128fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d10a      	bne.n	801291a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012908:	f383 8811 	msr	BASEPRI, r3
 801290c:	f3bf 8f6f 	isb	sy
 8012910:	f3bf 8f4f 	dsb	sy
 8012914:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012916:	bf00      	nop
 8012918:	e7fe      	b.n	8012918 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d002      	beq.n	8012926 <xQueueGenericCreateStatic+0x52>
 8012920:	68bb      	ldr	r3, [r7, #8]
 8012922:	2b00      	cmp	r3, #0
 8012924:	d001      	beq.n	801292a <xQueueGenericCreateStatic+0x56>
 8012926:	2301      	movs	r3, #1
 8012928:	e000      	b.n	801292c <xQueueGenericCreateStatic+0x58>
 801292a:	2300      	movs	r3, #0
 801292c:	2b00      	cmp	r3, #0
 801292e:	d10a      	bne.n	8012946 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012934:	f383 8811 	msr	BASEPRI, r3
 8012938:	f3bf 8f6f 	isb	sy
 801293c:	f3bf 8f4f 	dsb	sy
 8012940:	623b      	str	r3, [r7, #32]
}
 8012942:	bf00      	nop
 8012944:	e7fe      	b.n	8012944 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d102      	bne.n	8012952 <xQueueGenericCreateStatic+0x7e>
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d101      	bne.n	8012956 <xQueueGenericCreateStatic+0x82>
 8012952:	2301      	movs	r3, #1
 8012954:	e000      	b.n	8012958 <xQueueGenericCreateStatic+0x84>
 8012956:	2300      	movs	r3, #0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d10a      	bne.n	8012972 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801295c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012960:	f383 8811 	msr	BASEPRI, r3
 8012964:	f3bf 8f6f 	isb	sy
 8012968:	f3bf 8f4f 	dsb	sy
 801296c:	61fb      	str	r3, [r7, #28]
}
 801296e:	bf00      	nop
 8012970:	e7fe      	b.n	8012970 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012972:	2350      	movs	r3, #80	; 0x50
 8012974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012976:	697b      	ldr	r3, [r7, #20]
 8012978:	2b50      	cmp	r3, #80	; 0x50
 801297a:	d00a      	beq.n	8012992 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012980:	f383 8811 	msr	BASEPRI, r3
 8012984:	f3bf 8f6f 	isb	sy
 8012988:	f3bf 8f4f 	dsb	sy
 801298c:	61bb      	str	r3, [r7, #24]
}
 801298e:	bf00      	nop
 8012990:	e7fe      	b.n	8012990 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012992:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012994:	683b      	ldr	r3, [r7, #0]
 8012996:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299a:	2b00      	cmp	r3, #0
 801299c:	d00d      	beq.n	80129ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a0:	2201      	movs	r2, #1
 80129a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80129a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80129aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ac:	9300      	str	r3, [sp, #0]
 80129ae:	4613      	mov	r3, r2
 80129b0:	687a      	ldr	r2, [r7, #4]
 80129b2:	68b9      	ldr	r1, [r7, #8]
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	f000 f83f 	bl	8012a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80129ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80129bc:	4618      	mov	r0, r3
 80129be:	3730      	adds	r7, #48	; 0x30
 80129c0:	46bd      	mov	sp, r7
 80129c2:	bd80      	pop	{r7, pc}

080129c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80129c4:	b580      	push	{r7, lr}
 80129c6:	b08a      	sub	sp, #40	; 0x28
 80129c8:	af02      	add	r7, sp, #8
 80129ca:	60f8      	str	r0, [r7, #12]
 80129cc:	60b9      	str	r1, [r7, #8]
 80129ce:	4613      	mov	r3, r2
 80129d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d10a      	bne.n	80129ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80129d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129dc:	f383 8811 	msr	BASEPRI, r3
 80129e0:	f3bf 8f6f 	isb	sy
 80129e4:	f3bf 8f4f 	dsb	sy
 80129e8:	613b      	str	r3, [r7, #16]
}
 80129ea:	bf00      	nop
 80129ec:	e7fe      	b.n	80129ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	68ba      	ldr	r2, [r7, #8]
 80129f2:	fb02 f303 	mul.w	r3, r2, r3
 80129f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80129f8:	69fb      	ldr	r3, [r7, #28]
 80129fa:	3350      	adds	r3, #80	; 0x50
 80129fc:	4618      	mov	r0, r3
 80129fe:	f002 ffbb 	bl	8015978 <pvPortMalloc>
 8012a02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012a04:	69bb      	ldr	r3, [r7, #24]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d011      	beq.n	8012a2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012a0a:	69bb      	ldr	r3, [r7, #24]
 8012a0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012a0e:	697b      	ldr	r3, [r7, #20]
 8012a10:	3350      	adds	r3, #80	; 0x50
 8012a12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012a14:	69bb      	ldr	r3, [r7, #24]
 8012a16:	2200      	movs	r2, #0
 8012a18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012a1c:	79fa      	ldrb	r2, [r7, #7]
 8012a1e:	69bb      	ldr	r3, [r7, #24]
 8012a20:	9300      	str	r3, [sp, #0]
 8012a22:	4613      	mov	r3, r2
 8012a24:	697a      	ldr	r2, [r7, #20]
 8012a26:	68b9      	ldr	r1, [r7, #8]
 8012a28:	68f8      	ldr	r0, [r7, #12]
 8012a2a:	f000 f805 	bl	8012a38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012a2e:	69bb      	ldr	r3, [r7, #24]
	}
 8012a30:	4618      	mov	r0, r3
 8012a32:	3720      	adds	r7, #32
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}

08012a38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012a38:	b580      	push	{r7, lr}
 8012a3a:	b084      	sub	sp, #16
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	60b9      	str	r1, [r7, #8]
 8012a42:	607a      	str	r2, [r7, #4]
 8012a44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012a46:	68bb      	ldr	r3, [r7, #8]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d103      	bne.n	8012a54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012a4c:	69bb      	ldr	r3, [r7, #24]
 8012a4e:	69ba      	ldr	r2, [r7, #24]
 8012a50:	601a      	str	r2, [r3, #0]
 8012a52:	e002      	b.n	8012a5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	687a      	ldr	r2, [r7, #4]
 8012a58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8012a5a:	69bb      	ldr	r3, [r7, #24]
 8012a5c:	68fa      	ldr	r2, [r7, #12]
 8012a5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	68ba      	ldr	r2, [r7, #8]
 8012a64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012a66:	2101      	movs	r1, #1
 8012a68:	69b8      	ldr	r0, [r7, #24]
 8012a6a:	f7ff fecb 	bl	8012804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012a6e:	69bb      	ldr	r3, [r7, #24]
 8012a70:	78fa      	ldrb	r2, [r7, #3]
 8012a72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012a76:	bf00      	nop
 8012a78:	3710      	adds	r7, #16
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}

08012a7e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012a7e:	b580      	push	{r7, lr}
 8012a80:	b08a      	sub	sp, #40	; 0x28
 8012a82:	af02      	add	r7, sp, #8
 8012a84:	60f8      	str	r0, [r7, #12]
 8012a86:	60b9      	str	r1, [r7, #8]
 8012a88:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d10a      	bne.n	8012aa6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a94:	f383 8811 	msr	BASEPRI, r3
 8012a98:	f3bf 8f6f 	isb	sy
 8012a9c:	f3bf 8f4f 	dsb	sy
 8012aa0:	61bb      	str	r3, [r7, #24]
}
 8012aa2:	bf00      	nop
 8012aa4:	e7fe      	b.n	8012aa4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012aa6:	68ba      	ldr	r2, [r7, #8]
 8012aa8:	68fb      	ldr	r3, [r7, #12]
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d90a      	bls.n	8012ac4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8012aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ab2:	f383 8811 	msr	BASEPRI, r3
 8012ab6:	f3bf 8f6f 	isb	sy
 8012aba:	f3bf 8f4f 	dsb	sy
 8012abe:	617b      	str	r3, [r7, #20]
}
 8012ac0:	bf00      	nop
 8012ac2:	e7fe      	b.n	8012ac2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012ac4:	2302      	movs	r3, #2
 8012ac6:	9300      	str	r3, [sp, #0]
 8012ac8:	687b      	ldr	r3, [r7, #4]
 8012aca:	2200      	movs	r2, #0
 8012acc:	2100      	movs	r1, #0
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	f7ff ff00 	bl	80128d4 <xQueueGenericCreateStatic>
 8012ad4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	d002      	beq.n	8012ae2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012adc:	69fb      	ldr	r3, [r7, #28]
 8012ade:	68ba      	ldr	r2, [r7, #8]
 8012ae0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012ae2:	69fb      	ldr	r3, [r7, #28]
	}
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	3720      	adds	r7, #32
 8012ae8:	46bd      	mov	sp, r7
 8012aea:	bd80      	pop	{r7, pc}

08012aec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b086      	sub	sp, #24
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d10a      	bne.n	8012b12 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b00:	f383 8811 	msr	BASEPRI, r3
 8012b04:	f3bf 8f6f 	isb	sy
 8012b08:	f3bf 8f4f 	dsb	sy
 8012b0c:	613b      	str	r3, [r7, #16]
}
 8012b0e:	bf00      	nop
 8012b10:	e7fe      	b.n	8012b10 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012b12:	683a      	ldr	r2, [r7, #0]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d90a      	bls.n	8012b30 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8012b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b1e:	f383 8811 	msr	BASEPRI, r3
 8012b22:	f3bf 8f6f 	isb	sy
 8012b26:	f3bf 8f4f 	dsb	sy
 8012b2a:	60fb      	str	r3, [r7, #12]
}
 8012b2c:	bf00      	nop
 8012b2e:	e7fe      	b.n	8012b2e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012b30:	2202      	movs	r2, #2
 8012b32:	2100      	movs	r1, #0
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f7ff ff45 	bl	80129c4 <xQueueGenericCreate>
 8012b3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d002      	beq.n	8012b48 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	683a      	ldr	r2, [r7, #0]
 8012b46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012b48:	697b      	ldr	r3, [r7, #20]
	}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3718      	adds	r7, #24
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	bd80      	pop	{r7, pc}
	...

08012b54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b08e      	sub	sp, #56	; 0x38
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	60f8      	str	r0, [r7, #12]
 8012b5c:	60b9      	str	r1, [r7, #8]
 8012b5e:	607a      	str	r2, [r7, #4]
 8012b60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012b62:	2300      	movs	r3, #0
 8012b64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d10a      	bne.n	8012b86 <xQueueGenericSend+0x32>
	__asm volatile
 8012b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b74:	f383 8811 	msr	BASEPRI, r3
 8012b78:	f3bf 8f6f 	isb	sy
 8012b7c:	f3bf 8f4f 	dsb	sy
 8012b80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012b82:	bf00      	nop
 8012b84:	e7fe      	b.n	8012b84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012b86:	68bb      	ldr	r3, [r7, #8]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d103      	bne.n	8012b94 <xQueueGenericSend+0x40>
 8012b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d101      	bne.n	8012b98 <xQueueGenericSend+0x44>
 8012b94:	2301      	movs	r3, #1
 8012b96:	e000      	b.n	8012b9a <xQueueGenericSend+0x46>
 8012b98:	2300      	movs	r3, #0
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d10a      	bne.n	8012bb4 <xQueueGenericSend+0x60>
	__asm volatile
 8012b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ba2:	f383 8811 	msr	BASEPRI, r3
 8012ba6:	f3bf 8f6f 	isb	sy
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012bb0:	bf00      	nop
 8012bb2:	e7fe      	b.n	8012bb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012bb4:	683b      	ldr	r3, [r7, #0]
 8012bb6:	2b02      	cmp	r3, #2
 8012bb8:	d103      	bne.n	8012bc2 <xQueueGenericSend+0x6e>
 8012bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012bbe:	2b01      	cmp	r3, #1
 8012bc0:	d101      	bne.n	8012bc6 <xQueueGenericSend+0x72>
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	e000      	b.n	8012bc8 <xQueueGenericSend+0x74>
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d10a      	bne.n	8012be2 <xQueueGenericSend+0x8e>
	__asm volatile
 8012bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bd0:	f383 8811 	msr	BASEPRI, r3
 8012bd4:	f3bf 8f6f 	isb	sy
 8012bd8:	f3bf 8f4f 	dsb	sy
 8012bdc:	623b      	str	r3, [r7, #32]
}
 8012bde:	bf00      	nop
 8012be0:	e7fe      	b.n	8012be0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012be2:	f001 fd4f 	bl	8014684 <xTaskGetSchedulerState>
 8012be6:	4603      	mov	r3, r0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d102      	bne.n	8012bf2 <xQueueGenericSend+0x9e>
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d101      	bne.n	8012bf6 <xQueueGenericSend+0xa2>
 8012bf2:	2301      	movs	r3, #1
 8012bf4:	e000      	b.n	8012bf8 <xQueueGenericSend+0xa4>
 8012bf6:	2300      	movs	r3, #0
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d10a      	bne.n	8012c12 <xQueueGenericSend+0xbe>
	__asm volatile
 8012bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c00:	f383 8811 	msr	BASEPRI, r3
 8012c04:	f3bf 8f6f 	isb	sy
 8012c08:	f3bf 8f4f 	dsb	sy
 8012c0c:	61fb      	str	r3, [r7, #28]
}
 8012c0e:	bf00      	nop
 8012c10:	e7fe      	b.n	8012c10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c12:	f002 fd8f 	bl	8015734 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c1e:	429a      	cmp	r2, r3
 8012c20:	d302      	bcc.n	8012c28 <xQueueGenericSend+0xd4>
 8012c22:	683b      	ldr	r3, [r7, #0]
 8012c24:	2b02      	cmp	r3, #2
 8012c26:	d129      	bne.n	8012c7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012c28:	683a      	ldr	r2, [r7, #0]
 8012c2a:	68b9      	ldr	r1, [r7, #8]
 8012c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c2e:	f000 fc5e 	bl	80134ee <prvCopyDataToQueue>
 8012c32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d010      	beq.n	8012c5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3e:	3324      	adds	r3, #36	; 0x24
 8012c40:	4618      	mov	r0, r3
 8012c42:	f001 fb5d 	bl	8014300 <xTaskRemoveFromEventList>
 8012c46:	4603      	mov	r3, r0
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d013      	beq.n	8012c74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012c4c:	4b3f      	ldr	r3, [pc, #252]	; (8012d4c <xQueueGenericSend+0x1f8>)
 8012c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c52:	601a      	str	r2, [r3, #0]
 8012c54:	f3bf 8f4f 	dsb	sy
 8012c58:	f3bf 8f6f 	isb	sy
 8012c5c:	e00a      	b.n	8012c74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d007      	beq.n	8012c74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012c64:	4b39      	ldr	r3, [pc, #228]	; (8012d4c <xQueueGenericSend+0x1f8>)
 8012c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c6a:	601a      	str	r2, [r3, #0]
 8012c6c:	f3bf 8f4f 	dsb	sy
 8012c70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012c74:	f002 fd8e 	bl	8015794 <vPortExitCritical>
				return pdPASS;
 8012c78:	2301      	movs	r3, #1
 8012c7a:	e063      	b.n	8012d44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d103      	bne.n	8012c8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c82:	f002 fd87 	bl	8015794 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8012c86:	2300      	movs	r3, #0
 8012c88:	e05c      	b.n	8012d44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d106      	bne.n	8012c9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c90:	f107 0314 	add.w	r3, r7, #20
 8012c94:	4618      	mov	r0, r3
 8012c96:	f001 fb97 	bl	80143c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012c9e:	f002 fd79 	bl	8015794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012ca2:	f001 f8f1 	bl	8013e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012ca6:	f002 fd45 	bl	8015734 <vPortEnterCritical>
 8012caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012cb0:	b25b      	sxtb	r3, r3
 8012cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cb6:	d103      	bne.n	8012cc0 <xQueueGenericSend+0x16c>
 8012cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cba:	2200      	movs	r2, #0
 8012cbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012cc6:	b25b      	sxtb	r3, r3
 8012cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ccc:	d103      	bne.n	8012cd6 <xQueueGenericSend+0x182>
 8012cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cd6:	f002 fd5d 	bl	8015794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012cda:	1d3a      	adds	r2, r7, #4
 8012cdc:	f107 0314 	add.w	r3, r7, #20
 8012ce0:	4611      	mov	r1, r2
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f001 fb86 	bl	80143f4 <xTaskCheckForTimeOut>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d124      	bne.n	8012d38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cf0:	f000 fcf5 	bl	80136de <prvIsQueueFull>
 8012cf4:	4603      	mov	r3, r0
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d018      	beq.n	8012d2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cfc:	3310      	adds	r3, #16
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	4611      	mov	r1, r2
 8012d02:	4618      	mov	r0, r3
 8012d04:	f001 faac 	bl	8014260 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d0a:	f000 fc80 	bl	801360e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012d0e:	f001 f8c9 	bl	8013ea4 <xTaskResumeAll>
 8012d12:	4603      	mov	r3, r0
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	f47f af7c 	bne.w	8012c12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8012d1a:	4b0c      	ldr	r3, [pc, #48]	; (8012d4c <xQueueGenericSend+0x1f8>)
 8012d1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d20:	601a      	str	r2, [r3, #0]
 8012d22:	f3bf 8f4f 	dsb	sy
 8012d26:	f3bf 8f6f 	isb	sy
 8012d2a:	e772      	b.n	8012c12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012d2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d2e:	f000 fc6e 	bl	801360e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d32:	f001 f8b7 	bl	8013ea4 <xTaskResumeAll>
 8012d36:	e76c      	b.n	8012c12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012d38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d3a:	f000 fc68 	bl	801360e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d3e:	f001 f8b1 	bl	8013ea4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012d42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012d44:	4618      	mov	r0, r3
 8012d46:	3738      	adds	r7, #56	; 0x38
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}
 8012d4c:	e000ed04 	.word	0xe000ed04

08012d50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012d50:	b580      	push	{r7, lr}
 8012d52:	b090      	sub	sp, #64	; 0x40
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	60f8      	str	r0, [r7, #12]
 8012d58:	60b9      	str	r1, [r7, #8]
 8012d5a:	607a      	str	r2, [r7, #4]
 8012d5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d64:	2b00      	cmp	r3, #0
 8012d66:	d10a      	bne.n	8012d7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8012d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d6c:	f383 8811 	msr	BASEPRI, r3
 8012d70:	f3bf 8f6f 	isb	sy
 8012d74:	f3bf 8f4f 	dsb	sy
 8012d78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012d7a:	bf00      	nop
 8012d7c:	e7fe      	b.n	8012d7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012d7e:	68bb      	ldr	r3, [r7, #8]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d103      	bne.n	8012d8c <xQueueGenericSendFromISR+0x3c>
 8012d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d101      	bne.n	8012d90 <xQueueGenericSendFromISR+0x40>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	e000      	b.n	8012d92 <xQueueGenericSendFromISR+0x42>
 8012d90:	2300      	movs	r3, #0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d10a      	bne.n	8012dac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8012d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d9a:	f383 8811 	msr	BASEPRI, r3
 8012d9e:	f3bf 8f6f 	isb	sy
 8012da2:	f3bf 8f4f 	dsb	sy
 8012da6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012da8:	bf00      	nop
 8012daa:	e7fe      	b.n	8012daa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012dac:	683b      	ldr	r3, [r7, #0]
 8012dae:	2b02      	cmp	r3, #2
 8012db0:	d103      	bne.n	8012dba <xQueueGenericSendFromISR+0x6a>
 8012db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012db6:	2b01      	cmp	r3, #1
 8012db8:	d101      	bne.n	8012dbe <xQueueGenericSendFromISR+0x6e>
 8012dba:	2301      	movs	r3, #1
 8012dbc:	e000      	b.n	8012dc0 <xQueueGenericSendFromISR+0x70>
 8012dbe:	2300      	movs	r3, #0
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d10a      	bne.n	8012dda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8012dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	623b      	str	r3, [r7, #32]
}
 8012dd6:	bf00      	nop
 8012dd8:	e7fe      	b.n	8012dd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012dda:	f002 fd8d 	bl	80158f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012dde:	f3ef 8211 	mrs	r2, BASEPRI
 8012de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de6:	f383 8811 	msr	BASEPRI, r3
 8012dea:	f3bf 8f6f 	isb	sy
 8012dee:	f3bf 8f4f 	dsb	sy
 8012df2:	61fa      	str	r2, [r7, #28]
 8012df4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012df6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012df8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e02:	429a      	cmp	r2, r3
 8012e04:	d302      	bcc.n	8012e0c <xQueueGenericSendFromISR+0xbc>
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	2b02      	cmp	r3, #2
 8012e0a:	d12f      	bne.n	8012e6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012e0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012e1c:	683a      	ldr	r2, [r7, #0]
 8012e1e:	68b9      	ldr	r1, [r7, #8]
 8012e20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012e22:	f000 fb64 	bl	80134ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012e26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e2e:	d112      	bne.n	8012e56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d016      	beq.n	8012e66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e3a:	3324      	adds	r3, #36	; 0x24
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f001 fa5f 	bl	8014300 <xTaskRemoveFromEventList>
 8012e42:	4603      	mov	r3, r0
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d00e      	beq.n	8012e66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d00b      	beq.n	8012e66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	2201      	movs	r2, #1
 8012e52:	601a      	str	r2, [r3, #0]
 8012e54:	e007      	b.n	8012e66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	b2db      	uxtb	r3, r3
 8012e5e:	b25a      	sxtb	r2, r3
 8012e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012e66:	2301      	movs	r3, #1
 8012e68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012e6a:	e001      	b.n	8012e70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012e74:	697b      	ldr	r3, [r7, #20]
 8012e76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012e7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012e7e:	4618      	mov	r0, r3
 8012e80:	3740      	adds	r7, #64	; 0x40
 8012e82:	46bd      	mov	sp, r7
 8012e84:	bd80      	pop	{r7, pc}

08012e86 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012e86:	b580      	push	{r7, lr}
 8012e88:	b08e      	sub	sp, #56	; 0x38
 8012e8a:	af00      	add	r7, sp, #0
 8012e8c:	6078      	str	r0, [r7, #4]
 8012e8e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d10a      	bne.n	8012eb0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e9e:	f383 8811 	msr	BASEPRI, r3
 8012ea2:	f3bf 8f6f 	isb	sy
 8012ea6:	f3bf 8f4f 	dsb	sy
 8012eaa:	623b      	str	r3, [r7, #32]
}
 8012eac:	bf00      	nop
 8012eae:	e7fe      	b.n	8012eae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d00a      	beq.n	8012ece <xQueueGiveFromISR+0x48>
	__asm volatile
 8012eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ebc:	f383 8811 	msr	BASEPRI, r3
 8012ec0:	f3bf 8f6f 	isb	sy
 8012ec4:	f3bf 8f4f 	dsb	sy
 8012ec8:	61fb      	str	r3, [r7, #28]
}
 8012eca:	bf00      	nop
 8012ecc:	e7fe      	b.n	8012ecc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed0:	681b      	ldr	r3, [r3, #0]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d103      	bne.n	8012ede <xQueueGiveFromISR+0x58>
 8012ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ed8:	689b      	ldr	r3, [r3, #8]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d101      	bne.n	8012ee2 <xQueueGiveFromISR+0x5c>
 8012ede:	2301      	movs	r3, #1
 8012ee0:	e000      	b.n	8012ee4 <xQueueGiveFromISR+0x5e>
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d10a      	bne.n	8012efe <xQueueGiveFromISR+0x78>
	__asm volatile
 8012ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eec:	f383 8811 	msr	BASEPRI, r3
 8012ef0:	f3bf 8f6f 	isb	sy
 8012ef4:	f3bf 8f4f 	dsb	sy
 8012ef8:	61bb      	str	r3, [r7, #24]
}
 8012efa:	bf00      	nop
 8012efc:	e7fe      	b.n	8012efc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012efe:	f002 fcfb 	bl	80158f8 <vPortValidateInterruptPriority>
	__asm volatile
 8012f02:	f3ef 8211 	mrs	r2, BASEPRI
 8012f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f0a:	f383 8811 	msr	BASEPRI, r3
 8012f0e:	f3bf 8f6f 	isb	sy
 8012f12:	f3bf 8f4f 	dsb	sy
 8012f16:	617a      	str	r2, [r7, #20]
 8012f18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012f1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d22b      	bcs.n	8012f86 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f3a:	1c5a      	adds	r2, r3, #1
 8012f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012f40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f48:	d112      	bne.n	8012f70 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d016      	beq.n	8012f80 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f54:	3324      	adds	r3, #36	; 0x24
 8012f56:	4618      	mov	r0, r3
 8012f58:	f001 f9d2 	bl	8014300 <xTaskRemoveFromEventList>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d00e      	beq.n	8012f80 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d00b      	beq.n	8012f80 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012f68:	683b      	ldr	r3, [r7, #0]
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	601a      	str	r2, [r3, #0]
 8012f6e:	e007      	b.n	8012f80 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012f70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f74:	3301      	adds	r3, #1
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	b25a      	sxtb	r2, r3
 8012f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012f80:	2301      	movs	r3, #1
 8012f82:	637b      	str	r3, [r7, #52]	; 0x34
 8012f84:	e001      	b.n	8012f8a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012f86:	2300      	movs	r3, #0
 8012f88:	637b      	str	r3, [r7, #52]	; 0x34
 8012f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	f383 8811 	msr	BASEPRI, r3
}
 8012f94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012f98:	4618      	mov	r0, r3
 8012f9a:	3738      	adds	r7, #56	; 0x38
 8012f9c:	46bd      	mov	sp, r7
 8012f9e:	bd80      	pop	{r7, pc}

08012fa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b08c      	sub	sp, #48	; 0x30
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	60f8      	str	r0, [r7, #12]
 8012fa8:	60b9      	str	r1, [r7, #8]
 8012faa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012fac:	2300      	movs	r3, #0
 8012fae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d10a      	bne.n	8012fd0 <xQueueReceive+0x30>
	__asm volatile
 8012fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fbe:	f383 8811 	msr	BASEPRI, r3
 8012fc2:	f3bf 8f6f 	isb	sy
 8012fc6:	f3bf 8f4f 	dsb	sy
 8012fca:	623b      	str	r3, [r7, #32]
}
 8012fcc:	bf00      	nop
 8012fce:	e7fe      	b.n	8012fce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d103      	bne.n	8012fde <xQueueReceive+0x3e>
 8012fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d101      	bne.n	8012fe2 <xQueueReceive+0x42>
 8012fde:	2301      	movs	r3, #1
 8012fe0:	e000      	b.n	8012fe4 <xQueueReceive+0x44>
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10a      	bne.n	8012ffe <xQueueReceive+0x5e>
	__asm volatile
 8012fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fec:	f383 8811 	msr	BASEPRI, r3
 8012ff0:	f3bf 8f6f 	isb	sy
 8012ff4:	f3bf 8f4f 	dsb	sy
 8012ff8:	61fb      	str	r3, [r7, #28]
}
 8012ffa:	bf00      	nop
 8012ffc:	e7fe      	b.n	8012ffc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012ffe:	f001 fb41 	bl	8014684 <xTaskGetSchedulerState>
 8013002:	4603      	mov	r3, r0
 8013004:	2b00      	cmp	r3, #0
 8013006:	d102      	bne.n	801300e <xQueueReceive+0x6e>
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	2b00      	cmp	r3, #0
 801300c:	d101      	bne.n	8013012 <xQueueReceive+0x72>
 801300e:	2301      	movs	r3, #1
 8013010:	e000      	b.n	8013014 <xQueueReceive+0x74>
 8013012:	2300      	movs	r3, #0
 8013014:	2b00      	cmp	r3, #0
 8013016:	d10a      	bne.n	801302e <xQueueReceive+0x8e>
	__asm volatile
 8013018:	f04f 0350 	mov.w	r3, #80	; 0x50
 801301c:	f383 8811 	msr	BASEPRI, r3
 8013020:	f3bf 8f6f 	isb	sy
 8013024:	f3bf 8f4f 	dsb	sy
 8013028:	61bb      	str	r3, [r7, #24]
}
 801302a:	bf00      	nop
 801302c:	e7fe      	b.n	801302c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801302e:	f002 fb81 	bl	8015734 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013036:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801303a:	2b00      	cmp	r3, #0
 801303c:	d01f      	beq.n	801307e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801303e:	68b9      	ldr	r1, [r7, #8]
 8013040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013042:	f000 fabe 	bl	80135c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013048:	1e5a      	subs	r2, r3, #1
 801304a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801304c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801304e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013050:	691b      	ldr	r3, [r3, #16]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d00f      	beq.n	8013076 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013058:	3310      	adds	r3, #16
 801305a:	4618      	mov	r0, r3
 801305c:	f001 f950 	bl	8014300 <xTaskRemoveFromEventList>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	d007      	beq.n	8013076 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013066:	4b3d      	ldr	r3, [pc, #244]	; (801315c <xQueueReceive+0x1bc>)
 8013068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801306c:	601a      	str	r2, [r3, #0]
 801306e:	f3bf 8f4f 	dsb	sy
 8013072:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013076:	f002 fb8d 	bl	8015794 <vPortExitCritical>
				return pdPASS;
 801307a:	2301      	movs	r3, #1
 801307c:	e069      	b.n	8013152 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2b00      	cmp	r3, #0
 8013082:	d103      	bne.n	801308c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013084:	f002 fb86 	bl	8015794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013088:	2300      	movs	r3, #0
 801308a:	e062      	b.n	8013152 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 801308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308e:	2b00      	cmp	r3, #0
 8013090:	d106      	bne.n	80130a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013092:	f107 0310 	add.w	r3, r7, #16
 8013096:	4618      	mov	r0, r3
 8013098:	f001 f996 	bl	80143c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801309c:	2301      	movs	r3, #1
 801309e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80130a0:	f002 fb78 	bl	8015794 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80130a4:	f000 fef0 	bl	8013e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80130a8:	f002 fb44 	bl	8015734 <vPortEnterCritical>
 80130ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80130b2:	b25b      	sxtb	r3, r3
 80130b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130b8:	d103      	bne.n	80130c2 <xQueueReceive+0x122>
 80130ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130bc:	2200      	movs	r2, #0
 80130be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80130c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130c8:	b25b      	sxtb	r3, r3
 80130ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130ce:	d103      	bne.n	80130d8 <xQueueReceive+0x138>
 80130d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130d2:	2200      	movs	r2, #0
 80130d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130d8:	f002 fb5c 	bl	8015794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80130dc:	1d3a      	adds	r2, r7, #4
 80130de:	f107 0310 	add.w	r3, r7, #16
 80130e2:	4611      	mov	r1, r2
 80130e4:	4618      	mov	r0, r3
 80130e6:	f001 f985 	bl	80143f4 <xTaskCheckForTimeOut>
 80130ea:	4603      	mov	r3, r0
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d123      	bne.n	8013138 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80130f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130f2:	f000 fade 	bl	80136b2 <prvIsQueueEmpty>
 80130f6:	4603      	mov	r3, r0
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d017      	beq.n	801312c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80130fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130fe:	3324      	adds	r3, #36	; 0x24
 8013100:	687a      	ldr	r2, [r7, #4]
 8013102:	4611      	mov	r1, r2
 8013104:	4618      	mov	r0, r3
 8013106:	f001 f8ab 	bl	8014260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801310a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801310c:	f000 fa7f 	bl	801360e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013110:	f000 fec8 	bl	8013ea4 <xTaskResumeAll>
 8013114:	4603      	mov	r3, r0
 8013116:	2b00      	cmp	r3, #0
 8013118:	d189      	bne.n	801302e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 801311a:	4b10      	ldr	r3, [pc, #64]	; (801315c <xQueueReceive+0x1bc>)
 801311c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	f3bf 8f4f 	dsb	sy
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	e780      	b.n	801302e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801312c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801312e:	f000 fa6e 	bl	801360e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013132:	f000 feb7 	bl	8013ea4 <xTaskResumeAll>
 8013136:	e77a      	b.n	801302e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801313a:	f000 fa68 	bl	801360e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801313e:	f000 feb1 	bl	8013ea4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013144:	f000 fab5 	bl	80136b2 <prvIsQueueEmpty>
 8013148:	4603      	mov	r3, r0
 801314a:	2b00      	cmp	r3, #0
 801314c:	f43f af6f 	beq.w	801302e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013152:	4618      	mov	r0, r3
 8013154:	3730      	adds	r7, #48	; 0x30
 8013156:	46bd      	mov	sp, r7
 8013158:	bd80      	pop	{r7, pc}
 801315a:	bf00      	nop
 801315c:	e000ed04 	.word	0xe000ed04

08013160 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013160:	b580      	push	{r7, lr}
 8013162:	b08e      	sub	sp, #56	; 0x38
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
 8013168:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801316a:	2300      	movs	r3, #0
 801316c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013172:	2300      	movs	r3, #0
 8013174:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013178:	2b00      	cmp	r3, #0
 801317a:	d10a      	bne.n	8013192 <xQueueSemaphoreTake+0x32>
	__asm volatile
 801317c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	623b      	str	r3, [r7, #32]
}
 801318e:	bf00      	nop
 8013190:	e7fe      	b.n	8013190 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013196:	2b00      	cmp	r3, #0
 8013198:	d00a      	beq.n	80131b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319e:	f383 8811 	msr	BASEPRI, r3
 80131a2:	f3bf 8f6f 	isb	sy
 80131a6:	f3bf 8f4f 	dsb	sy
 80131aa:	61fb      	str	r3, [r7, #28]
}
 80131ac:	bf00      	nop
 80131ae:	e7fe      	b.n	80131ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131b0:	f001 fa68 	bl	8014684 <xTaskGetSchedulerState>
 80131b4:	4603      	mov	r3, r0
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d102      	bne.n	80131c0 <xQueueSemaphoreTake+0x60>
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d101      	bne.n	80131c4 <xQueueSemaphoreTake+0x64>
 80131c0:	2301      	movs	r3, #1
 80131c2:	e000      	b.n	80131c6 <xQueueSemaphoreTake+0x66>
 80131c4:	2300      	movs	r3, #0
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d10a      	bne.n	80131e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80131ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131ce:	f383 8811 	msr	BASEPRI, r3
 80131d2:	f3bf 8f6f 	isb	sy
 80131d6:	f3bf 8f4f 	dsb	sy
 80131da:	61bb      	str	r3, [r7, #24]
}
 80131dc:	bf00      	nop
 80131de:	e7fe      	b.n	80131de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80131e0:	f002 faa8 	bl	8015734 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80131e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80131e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80131ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d024      	beq.n	801323a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80131f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f2:	1e5a      	subs	r2, r3, #1
 80131f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80131f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131fa:	681b      	ldr	r3, [r3, #0]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d104      	bne.n	801320a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8013200:	f001 fbb6 	bl	8014970 <pvTaskIncrementMutexHeldCount>
 8013204:	4602      	mov	r2, r0
 8013206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013208:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801320a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801320c:	691b      	ldr	r3, [r3, #16]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d00f      	beq.n	8013232 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013214:	3310      	adds	r3, #16
 8013216:	4618      	mov	r0, r3
 8013218:	f001 f872 	bl	8014300 <xTaskRemoveFromEventList>
 801321c:	4603      	mov	r3, r0
 801321e:	2b00      	cmp	r3, #0
 8013220:	d007      	beq.n	8013232 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013222:	4b54      	ldr	r3, [pc, #336]	; (8013374 <xQueueSemaphoreTake+0x214>)
 8013224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013228:	601a      	str	r2, [r3, #0]
 801322a:	f3bf 8f4f 	dsb	sy
 801322e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013232:	f002 faaf 	bl	8015794 <vPortExitCritical>
				return pdPASS;
 8013236:	2301      	movs	r3, #1
 8013238:	e097      	b.n	801336a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801323a:	683b      	ldr	r3, [r7, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d111      	bne.n	8013264 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013242:	2b00      	cmp	r3, #0
 8013244:	d00a      	beq.n	801325c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8013246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801324a:	f383 8811 	msr	BASEPRI, r3
 801324e:	f3bf 8f6f 	isb	sy
 8013252:	f3bf 8f4f 	dsb	sy
 8013256:	617b      	str	r3, [r7, #20]
}
 8013258:	bf00      	nop
 801325a:	e7fe      	b.n	801325a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801325c:	f002 fa9a 	bl	8015794 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013260:	2300      	movs	r3, #0
 8013262:	e082      	b.n	801336a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013266:	2b00      	cmp	r3, #0
 8013268:	d106      	bne.n	8013278 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801326a:	f107 030c 	add.w	r3, r7, #12
 801326e:	4618      	mov	r0, r3
 8013270:	f001 f8aa 	bl	80143c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013274:	2301      	movs	r3, #1
 8013276:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013278:	f002 fa8c 	bl	8015794 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801327c:	f000 fe04 	bl	8013e88 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013280:	f002 fa58 	bl	8015734 <vPortEnterCritical>
 8013284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801328a:	b25b      	sxtb	r3, r3
 801328c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013290:	d103      	bne.n	801329a <xQueueSemaphoreTake+0x13a>
 8013292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013294:	2200      	movs	r2, #0
 8013296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80132a0:	b25b      	sxtb	r3, r3
 80132a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132a6:	d103      	bne.n	80132b0 <xQueueSemaphoreTake+0x150>
 80132a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132aa:	2200      	movs	r2, #0
 80132ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80132b0:	f002 fa70 	bl	8015794 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132b4:	463a      	mov	r2, r7
 80132b6:	f107 030c 	add.w	r3, r7, #12
 80132ba:	4611      	mov	r1, r2
 80132bc:	4618      	mov	r0, r3
 80132be:	f001 f899 	bl	80143f4 <xTaskCheckForTimeOut>
 80132c2:	4603      	mov	r3, r0
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	d132      	bne.n	801332e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80132c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132ca:	f000 f9f2 	bl	80136b2 <prvIsQueueEmpty>
 80132ce:	4603      	mov	r3, r0
 80132d0:	2b00      	cmp	r3, #0
 80132d2:	d026      	beq.n	8013322 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80132d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	d109      	bne.n	80132f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80132dc:	f002 fa2a 	bl	8015734 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80132e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e2:	689b      	ldr	r3, [r3, #8]
 80132e4:	4618      	mov	r0, r3
 80132e6:	f001 f9eb 	bl	80146c0 <xTaskPriorityInherit>
 80132ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80132ec:	f002 fa52 	bl	8015794 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80132f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132f2:	3324      	adds	r3, #36	; 0x24
 80132f4:	683a      	ldr	r2, [r7, #0]
 80132f6:	4611      	mov	r1, r2
 80132f8:	4618      	mov	r0, r3
 80132fa:	f000 ffb1 	bl	8014260 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80132fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013300:	f000 f985 	bl	801360e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013304:	f000 fdce 	bl	8013ea4 <xTaskResumeAll>
 8013308:	4603      	mov	r3, r0
 801330a:	2b00      	cmp	r3, #0
 801330c:	f47f af68 	bne.w	80131e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8013310:	4b18      	ldr	r3, [pc, #96]	; (8013374 <xQueueSemaphoreTake+0x214>)
 8013312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013316:	601a      	str	r2, [r3, #0]
 8013318:	f3bf 8f4f 	dsb	sy
 801331c:	f3bf 8f6f 	isb	sy
 8013320:	e75e      	b.n	80131e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8013322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013324:	f000 f973 	bl	801360e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013328:	f000 fdbc 	bl	8013ea4 <xTaskResumeAll>
 801332c:	e758      	b.n	80131e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801332e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013330:	f000 f96d 	bl	801360e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013334:	f000 fdb6 	bl	8013ea4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801333a:	f000 f9ba 	bl	80136b2 <prvIsQueueEmpty>
 801333e:	4603      	mov	r3, r0
 8013340:	2b00      	cmp	r3, #0
 8013342:	f43f af4d 	beq.w	80131e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8013346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013348:	2b00      	cmp	r3, #0
 801334a:	d00d      	beq.n	8013368 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801334c:	f002 f9f2 	bl	8015734 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013352:	f000 f8b4 	bl	80134be <prvGetDisinheritPriorityAfterTimeout>
 8013356:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335a:	689b      	ldr	r3, [r3, #8]
 801335c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801335e:	4618      	mov	r0, r3
 8013360:	f001 fa84 	bl	801486c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8013364:	f002 fa16 	bl	8015794 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801336a:	4618      	mov	r0, r3
 801336c:	3738      	adds	r7, #56	; 0x38
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
 8013372:	bf00      	nop
 8013374:	e000ed04 	.word	0xe000ed04

08013378 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b08e      	sub	sp, #56	; 0x38
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801338a:	2b00      	cmp	r3, #0
 801338c:	d10a      	bne.n	80133a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801338e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013392:	f383 8811 	msr	BASEPRI, r3
 8013396:	f3bf 8f6f 	isb	sy
 801339a:	f3bf 8f4f 	dsb	sy
 801339e:	623b      	str	r3, [r7, #32]
}
 80133a0:	bf00      	nop
 80133a2:	e7fe      	b.n	80133a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80133a4:	68bb      	ldr	r3, [r7, #8]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d103      	bne.n	80133b2 <xQueueReceiveFromISR+0x3a>
 80133aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d101      	bne.n	80133b6 <xQueueReceiveFromISR+0x3e>
 80133b2:	2301      	movs	r3, #1
 80133b4:	e000      	b.n	80133b8 <xQueueReceiveFromISR+0x40>
 80133b6:	2300      	movs	r3, #0
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d10a      	bne.n	80133d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80133bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133c0:	f383 8811 	msr	BASEPRI, r3
 80133c4:	f3bf 8f6f 	isb	sy
 80133c8:	f3bf 8f4f 	dsb	sy
 80133cc:	61fb      	str	r3, [r7, #28]
}
 80133ce:	bf00      	nop
 80133d0:	e7fe      	b.n	80133d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133d2:	f002 fa91 	bl	80158f8 <vPortValidateInterruptPriority>
	__asm volatile
 80133d6:	f3ef 8211 	mrs	r2, BASEPRI
 80133da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133de:	f383 8811 	msr	BASEPRI, r3
 80133e2:	f3bf 8f6f 	isb	sy
 80133e6:	f3bf 8f4f 	dsb	sy
 80133ea:	61ba      	str	r2, [r7, #24]
 80133ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80133ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80133f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d02f      	beq.n	801345e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80133fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013408:	68b9      	ldr	r1, [r7, #8]
 801340a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801340c:	f000 f8d9 	bl	80135c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013412:	1e5a      	subs	r2, r3, #1
 8013414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013416:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801341c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013420:	d112      	bne.n	8013448 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013424:	691b      	ldr	r3, [r3, #16]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d016      	beq.n	8013458 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801342a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801342c:	3310      	adds	r3, #16
 801342e:	4618      	mov	r0, r3
 8013430:	f000 ff66 	bl	8014300 <xTaskRemoveFromEventList>
 8013434:	4603      	mov	r3, r0
 8013436:	2b00      	cmp	r3, #0
 8013438:	d00e      	beq.n	8013458 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d00b      	beq.n	8013458 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	2201      	movs	r2, #1
 8013444:	601a      	str	r2, [r3, #0]
 8013446:	e007      	b.n	8013458 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801344c:	3301      	adds	r3, #1
 801344e:	b2db      	uxtb	r3, r3
 8013450:	b25a      	sxtb	r2, r3
 8013452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013458:	2301      	movs	r3, #1
 801345a:	637b      	str	r3, [r7, #52]	; 0x34
 801345c:	e001      	b.n	8013462 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801345e:	2300      	movs	r3, #0
 8013460:	637b      	str	r3, [r7, #52]	; 0x34
 8013462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013464:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013466:	693b      	ldr	r3, [r7, #16]
 8013468:	f383 8811 	msr	BASEPRI, r3
}
 801346c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801346e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013470:	4618      	mov	r0, r3
 8013472:	3738      	adds	r7, #56	; 0x38
 8013474:	46bd      	mov	sp, r7
 8013476:	bd80      	pop	{r7, pc}

08013478 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	2b00      	cmp	r3, #0
 8013488:	d10a      	bne.n	80134a0 <vQueueDelete+0x28>
	__asm volatile
 801348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801348e:	f383 8811 	msr	BASEPRI, r3
 8013492:	f3bf 8f6f 	isb	sy
 8013496:	f3bf 8f4f 	dsb	sy
 801349a:	60bb      	str	r3, [r7, #8]
}
 801349c:	bf00      	nop
 801349e:	e7fe      	b.n	801349e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80134a0:	68f8      	ldr	r0, [r7, #12]
 80134a2:	f000 f95f 	bl	8013764 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d102      	bne.n	80134b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f002 fb2d 	bl	8015b10 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80134b6:	bf00      	nop
 80134b8:	3710      	adds	r7, #16
 80134ba:	46bd      	mov	sp, r7
 80134bc:	bd80      	pop	{r7, pc}

080134be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80134be:	b480      	push	{r7}
 80134c0:	b085      	sub	sp, #20
 80134c2:	af00      	add	r7, sp, #0
 80134c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d006      	beq.n	80134dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134d2:	681b      	ldr	r3, [r3, #0]
 80134d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80134d8:	60fb      	str	r3, [r7, #12]
 80134da:	e001      	b.n	80134e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80134dc:	2300      	movs	r3, #0
 80134de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80134e0:	68fb      	ldr	r3, [r7, #12]
	}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3714      	adds	r7, #20
 80134e6:	46bd      	mov	sp, r7
 80134e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ec:	4770      	bx	lr

080134ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80134ee:	b580      	push	{r7, lr}
 80134f0:	b086      	sub	sp, #24
 80134f2:	af00      	add	r7, sp, #0
 80134f4:	60f8      	str	r0, [r7, #12]
 80134f6:	60b9      	str	r1, [r7, #8]
 80134f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80134fa:	2300      	movs	r3, #0
 80134fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013502:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013508:	2b00      	cmp	r3, #0
 801350a:	d10d      	bne.n	8013528 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d14d      	bne.n	80135b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	689b      	ldr	r3, [r3, #8]
 8013518:	4618      	mov	r0, r3
 801351a:	f001 f939 	bl	8014790 <xTaskPriorityDisinherit>
 801351e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	2200      	movs	r2, #0
 8013524:	609a      	str	r2, [r3, #8]
 8013526:	e043      	b.n	80135b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d119      	bne.n	8013562 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	6858      	ldr	r0, [r3, #4]
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013536:	461a      	mov	r2, r3
 8013538:	68b9      	ldr	r1, [r7, #8]
 801353a:	f004 f928 	bl	801778e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	685a      	ldr	r2, [r3, #4]
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013546:	441a      	add	r2, r3
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	685a      	ldr	r2, [r3, #4]
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	689b      	ldr	r3, [r3, #8]
 8013554:	429a      	cmp	r2, r3
 8013556:	d32b      	bcc.n	80135b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	681a      	ldr	r2, [r3, #0]
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	605a      	str	r2, [r3, #4]
 8013560:	e026      	b.n	80135b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	68d8      	ldr	r0, [r3, #12]
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801356a:	461a      	mov	r2, r3
 801356c:	68b9      	ldr	r1, [r7, #8]
 801356e:	f004 f90e 	bl	801778e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	68da      	ldr	r2, [r3, #12]
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801357a:	425b      	negs	r3, r3
 801357c:	441a      	add	r2, r3
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	68da      	ldr	r2, [r3, #12]
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d207      	bcs.n	801359e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801358e:	68fb      	ldr	r3, [r7, #12]
 8013590:	689a      	ldr	r2, [r3, #8]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013596:	425b      	negs	r3, r3
 8013598:	441a      	add	r2, r3
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b02      	cmp	r3, #2
 80135a2:	d105      	bne.n	80135b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80135a4:	693b      	ldr	r3, [r7, #16]
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d002      	beq.n	80135b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80135aa:	693b      	ldr	r3, [r7, #16]
 80135ac:	3b01      	subs	r3, #1
 80135ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	1c5a      	adds	r2, r3, #1
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80135b8:	697b      	ldr	r3, [r7, #20]
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3718      	adds	r7, #24
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}

080135c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80135c2:	b580      	push	{r7, lr}
 80135c4:	b082      	sub	sp, #8
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	6078      	str	r0, [r7, #4]
 80135ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d018      	beq.n	8013606 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	68da      	ldr	r2, [r3, #12]
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135dc:	441a      	add	r2, r3
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	68da      	ldr	r2, [r3, #12]
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	689b      	ldr	r3, [r3, #8]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d303      	bcc.n	80135f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681a      	ldr	r2, [r3, #0]
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	68d9      	ldr	r1, [r3, #12]
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135fe:	461a      	mov	r2, r3
 8013600:	6838      	ldr	r0, [r7, #0]
 8013602:	f004 f8c4 	bl	801778e <memcpy>
	}
}
 8013606:	bf00      	nop
 8013608:	3708      	adds	r7, #8
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}

0801360e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801360e:	b580      	push	{r7, lr}
 8013610:	b084      	sub	sp, #16
 8013612:	af00      	add	r7, sp, #0
 8013614:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013616:	f002 f88d 	bl	8015734 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013620:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013622:	e011      	b.n	8013648 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013628:	2b00      	cmp	r3, #0
 801362a:	d012      	beq.n	8013652 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	3324      	adds	r3, #36	; 0x24
 8013630:	4618      	mov	r0, r3
 8013632:	f000 fe65 	bl	8014300 <xTaskRemoveFromEventList>
 8013636:	4603      	mov	r3, r0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d001      	beq.n	8013640 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801363c:	f000 ff3c 	bl	80144b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013640:	7bfb      	ldrb	r3, [r7, #15]
 8013642:	3b01      	subs	r3, #1
 8013644:	b2db      	uxtb	r3, r3
 8013646:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801364c:	2b00      	cmp	r3, #0
 801364e:	dce9      	bgt.n	8013624 <prvUnlockQueue+0x16>
 8013650:	e000      	b.n	8013654 <prvUnlockQueue+0x46>
					break;
 8013652:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	22ff      	movs	r2, #255	; 0xff
 8013658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801365c:	f002 f89a 	bl	8015794 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013660:	f002 f868 	bl	8015734 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801366a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801366c:	e011      	b.n	8013692 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	691b      	ldr	r3, [r3, #16]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d012      	beq.n	801369c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	3310      	adds	r3, #16
 801367a:	4618      	mov	r0, r3
 801367c:	f000 fe40 	bl	8014300 <xTaskRemoveFromEventList>
 8013680:	4603      	mov	r3, r0
 8013682:	2b00      	cmp	r3, #0
 8013684:	d001      	beq.n	801368a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013686:	f000 ff17 	bl	80144b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801368a:	7bbb      	ldrb	r3, [r7, #14]
 801368c:	3b01      	subs	r3, #1
 801368e:	b2db      	uxtb	r3, r3
 8013690:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013692:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013696:	2b00      	cmp	r3, #0
 8013698:	dce9      	bgt.n	801366e <prvUnlockQueue+0x60>
 801369a:	e000      	b.n	801369e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801369c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	22ff      	movs	r2, #255	; 0xff
 80136a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80136a6:	f002 f875 	bl	8015794 <vPortExitCritical>
}
 80136aa:	bf00      	nop
 80136ac:	3710      	adds	r7, #16
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b084      	sub	sp, #16
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136ba:	f002 f83b 	bl	8015734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d102      	bne.n	80136cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80136c6:	2301      	movs	r3, #1
 80136c8:	60fb      	str	r3, [r7, #12]
 80136ca:	e001      	b.n	80136d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80136cc:	2300      	movs	r3, #0
 80136ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80136d0:	f002 f860 	bl	8015794 <vPortExitCritical>

	return xReturn;
 80136d4:	68fb      	ldr	r3, [r7, #12]
}
 80136d6:	4618      	mov	r0, r3
 80136d8:	3710      	adds	r7, #16
 80136da:	46bd      	mov	sp, r7
 80136dc:	bd80      	pop	{r7, pc}

080136de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80136de:	b580      	push	{r7, lr}
 80136e0:	b084      	sub	sp, #16
 80136e2:	af00      	add	r7, sp, #0
 80136e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80136e6:	f002 f825 	bl	8015734 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d102      	bne.n	80136fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80136f6:	2301      	movs	r3, #1
 80136f8:	60fb      	str	r3, [r7, #12]
 80136fa:	e001      	b.n	8013700 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80136fc:	2300      	movs	r3, #0
 80136fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013700:	f002 f848 	bl	8015794 <vPortExitCritical>

	return xReturn;
 8013704:	68fb      	ldr	r3, [r7, #12]
}
 8013706:	4618      	mov	r0, r3
 8013708:	3710      	adds	r7, #16
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
	...

08013710 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013710:	b480      	push	{r7}
 8013712:	b085      	sub	sp, #20
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801371a:	2300      	movs	r3, #0
 801371c:	60fb      	str	r3, [r7, #12]
 801371e:	e014      	b.n	801374a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013720:	4a0f      	ldr	r2, [pc, #60]	; (8013760 <vQueueAddToRegistry+0x50>)
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d10b      	bne.n	8013744 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801372c:	490c      	ldr	r1, [pc, #48]	; (8013760 <vQueueAddToRegistry+0x50>)
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	683a      	ldr	r2, [r7, #0]
 8013732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013736:	4a0a      	ldr	r2, [pc, #40]	; (8013760 <vQueueAddToRegistry+0x50>)
 8013738:	68fb      	ldr	r3, [r7, #12]
 801373a:	00db      	lsls	r3, r3, #3
 801373c:	4413      	add	r3, r2
 801373e:	687a      	ldr	r2, [r7, #4]
 8013740:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013742:	e006      	b.n	8013752 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	3301      	adds	r3, #1
 8013748:	60fb      	str	r3, [r7, #12]
 801374a:	68fb      	ldr	r3, [r7, #12]
 801374c:	2b07      	cmp	r3, #7
 801374e:	d9e7      	bls.n	8013720 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013750:	bf00      	nop
 8013752:	bf00      	nop
 8013754:	3714      	adds	r7, #20
 8013756:	46bd      	mov	sp, r7
 8013758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375c:	4770      	bx	lr
 801375e:	bf00      	nop
 8013760:	200018dc 	.word	0x200018dc

08013764 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013764:	b480      	push	{r7}
 8013766:	b085      	sub	sp, #20
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801376c:	2300      	movs	r3, #0
 801376e:	60fb      	str	r3, [r7, #12]
 8013770:	e016      	b.n	80137a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013772:	4a10      	ldr	r2, [pc, #64]	; (80137b4 <vQueueUnregisterQueue+0x50>)
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	00db      	lsls	r3, r3, #3
 8013778:	4413      	add	r3, r2
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	687a      	ldr	r2, [r7, #4]
 801377e:	429a      	cmp	r2, r3
 8013780:	d10b      	bne.n	801379a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013782:	4a0c      	ldr	r2, [pc, #48]	; (80137b4 <vQueueUnregisterQueue+0x50>)
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	2100      	movs	r1, #0
 8013788:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 801378c:	4a09      	ldr	r2, [pc, #36]	; (80137b4 <vQueueUnregisterQueue+0x50>)
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	00db      	lsls	r3, r3, #3
 8013792:	4413      	add	r3, r2
 8013794:	2200      	movs	r2, #0
 8013796:	605a      	str	r2, [r3, #4]
				break;
 8013798:	e006      	b.n	80137a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801379a:	68fb      	ldr	r3, [r7, #12]
 801379c:	3301      	adds	r3, #1
 801379e:	60fb      	str	r3, [r7, #12]
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2b07      	cmp	r3, #7
 80137a4:	d9e5      	bls.n	8013772 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80137a6:	bf00      	nop
 80137a8:	bf00      	nop
 80137aa:	3714      	adds	r7, #20
 80137ac:	46bd      	mov	sp, r7
 80137ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137b2:	4770      	bx	lr
 80137b4:	200018dc 	.word	0x200018dc

080137b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80137b8:	b580      	push	{r7, lr}
 80137ba:	b086      	sub	sp, #24
 80137bc:	af00      	add	r7, sp, #0
 80137be:	60f8      	str	r0, [r7, #12]
 80137c0:	60b9      	str	r1, [r7, #8]
 80137c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80137c4:	68fb      	ldr	r3, [r7, #12]
 80137c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80137c8:	f001 ffb4 	bl	8015734 <vPortEnterCritical>
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137d2:	b25b      	sxtb	r3, r3
 80137d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137d8:	d103      	bne.n	80137e2 <vQueueWaitForMessageRestricted+0x2a>
 80137da:	697b      	ldr	r3, [r7, #20]
 80137dc:	2200      	movs	r2, #0
 80137de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80137e8:	b25b      	sxtb	r3, r3
 80137ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80137ee:	d103      	bne.n	80137f8 <vQueueWaitForMessageRestricted+0x40>
 80137f0:	697b      	ldr	r3, [r7, #20]
 80137f2:	2200      	movs	r2, #0
 80137f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80137f8:	f001 ffcc 	bl	8015794 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80137fc:	697b      	ldr	r3, [r7, #20]
 80137fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013800:	2b00      	cmp	r3, #0
 8013802:	d106      	bne.n	8013812 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013804:	697b      	ldr	r3, [r7, #20]
 8013806:	3324      	adds	r3, #36	; 0x24
 8013808:	687a      	ldr	r2, [r7, #4]
 801380a:	68b9      	ldr	r1, [r7, #8]
 801380c:	4618      	mov	r0, r3
 801380e:	f000 fd4b 	bl	80142a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013812:	6978      	ldr	r0, [r7, #20]
 8013814:	f7ff fefb 	bl	801360e <prvUnlockQueue>
	}
 8013818:	bf00      	nop
 801381a:	3718      	adds	r7, #24
 801381c:	46bd      	mov	sp, r7
 801381e:	bd80      	pop	{r7, pc}

08013820 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013820:	b580      	push	{r7, lr}
 8013822:	b08e      	sub	sp, #56	; 0x38
 8013824:	af04      	add	r7, sp, #16
 8013826:	60f8      	str	r0, [r7, #12]
 8013828:	60b9      	str	r1, [r7, #8]
 801382a:	607a      	str	r2, [r7, #4]
 801382c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801382e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013830:	2b00      	cmp	r3, #0
 8013832:	d10a      	bne.n	801384a <xTaskCreateStatic+0x2a>
	__asm volatile
 8013834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013838:	f383 8811 	msr	BASEPRI, r3
 801383c:	f3bf 8f6f 	isb	sy
 8013840:	f3bf 8f4f 	dsb	sy
 8013844:	623b      	str	r3, [r7, #32]
}
 8013846:	bf00      	nop
 8013848:	e7fe      	b.n	8013848 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801384c:	2b00      	cmp	r3, #0
 801384e:	d10a      	bne.n	8013866 <xTaskCreateStatic+0x46>
	__asm volatile
 8013850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013854:	f383 8811 	msr	BASEPRI, r3
 8013858:	f3bf 8f6f 	isb	sy
 801385c:	f3bf 8f4f 	dsb	sy
 8013860:	61fb      	str	r3, [r7, #28]
}
 8013862:	bf00      	nop
 8013864:	e7fe      	b.n	8013864 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013866:	23a8      	movs	r3, #168	; 0xa8
 8013868:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	2ba8      	cmp	r3, #168	; 0xa8
 801386e:	d00a      	beq.n	8013886 <xTaskCreateStatic+0x66>
	__asm volatile
 8013870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013874:	f383 8811 	msr	BASEPRI, r3
 8013878:	f3bf 8f6f 	isb	sy
 801387c:	f3bf 8f4f 	dsb	sy
 8013880:	61bb      	str	r3, [r7, #24]
}
 8013882:	bf00      	nop
 8013884:	e7fe      	b.n	8013884 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013886:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801388a:	2b00      	cmp	r3, #0
 801388c:	d01e      	beq.n	80138cc <xTaskCreateStatic+0xac>
 801388e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013890:	2b00      	cmp	r3, #0
 8013892:	d01b      	beq.n	80138cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013896:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801389a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801389c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138a0:	2202      	movs	r2, #2
 80138a2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80138a6:	2300      	movs	r3, #0
 80138a8:	9303      	str	r3, [sp, #12]
 80138aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ac:	9302      	str	r3, [sp, #8]
 80138ae:	f107 0314 	add.w	r3, r7, #20
 80138b2:	9301      	str	r3, [sp, #4]
 80138b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b6:	9300      	str	r3, [sp, #0]
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	687a      	ldr	r2, [r7, #4]
 80138bc:	68b9      	ldr	r1, [r7, #8]
 80138be:	68f8      	ldr	r0, [r7, #12]
 80138c0:	f000 f850 	bl	8013964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80138c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138c6:	f000 f8f3 	bl	8013ab0 <prvAddNewTaskToReadyList>
 80138ca:	e001      	b.n	80138d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80138cc:	2300      	movs	r3, #0
 80138ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80138d0:	697b      	ldr	r3, [r7, #20]
	}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3728      	adds	r7, #40	; 0x28
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd80      	pop	{r7, pc}

080138da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80138da:	b580      	push	{r7, lr}
 80138dc:	b08c      	sub	sp, #48	; 0x30
 80138de:	af04      	add	r7, sp, #16
 80138e0:	60f8      	str	r0, [r7, #12]
 80138e2:	60b9      	str	r1, [r7, #8]
 80138e4:	603b      	str	r3, [r7, #0]
 80138e6:	4613      	mov	r3, r2
 80138e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80138ea:	88fb      	ldrh	r3, [r7, #6]
 80138ec:	009b      	lsls	r3, r3, #2
 80138ee:	4618      	mov	r0, r3
 80138f0:	f002 f842 	bl	8015978 <pvPortMalloc>
 80138f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80138f6:	697b      	ldr	r3, [r7, #20]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	d00e      	beq.n	801391a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80138fc:	20a8      	movs	r0, #168	; 0xa8
 80138fe:	f002 f83b 	bl	8015978 <pvPortMalloc>
 8013902:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d003      	beq.n	8013912 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801390a:	69fb      	ldr	r3, [r7, #28]
 801390c:	697a      	ldr	r2, [r7, #20]
 801390e:	631a      	str	r2, [r3, #48]	; 0x30
 8013910:	e005      	b.n	801391e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013912:	6978      	ldr	r0, [r7, #20]
 8013914:	f002 f8fc 	bl	8015b10 <vPortFree>
 8013918:	e001      	b.n	801391e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801391a:	2300      	movs	r3, #0
 801391c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	2b00      	cmp	r3, #0
 8013922:	d017      	beq.n	8013954 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	2200      	movs	r2, #0
 8013928:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801392c:	88fa      	ldrh	r2, [r7, #6]
 801392e:	2300      	movs	r3, #0
 8013930:	9303      	str	r3, [sp, #12]
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	9302      	str	r3, [sp, #8]
 8013936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013938:	9301      	str	r3, [sp, #4]
 801393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801393c:	9300      	str	r3, [sp, #0]
 801393e:	683b      	ldr	r3, [r7, #0]
 8013940:	68b9      	ldr	r1, [r7, #8]
 8013942:	68f8      	ldr	r0, [r7, #12]
 8013944:	f000 f80e 	bl	8013964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013948:	69f8      	ldr	r0, [r7, #28]
 801394a:	f000 f8b1 	bl	8013ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801394e:	2301      	movs	r3, #1
 8013950:	61bb      	str	r3, [r7, #24]
 8013952:	e002      	b.n	801395a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013954:	f04f 33ff 	mov.w	r3, #4294967295
 8013958:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801395a:	69bb      	ldr	r3, [r7, #24]
	}
 801395c:	4618      	mov	r0, r3
 801395e:	3720      	adds	r7, #32
 8013960:	46bd      	mov	sp, r7
 8013962:	bd80      	pop	{r7, pc}

08013964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b088      	sub	sp, #32
 8013968:	af00      	add	r7, sp, #0
 801396a:	60f8      	str	r0, [r7, #12]
 801396c:	60b9      	str	r1, [r7, #8]
 801396e:	607a      	str	r2, [r7, #4]
 8013970:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013974:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	009b      	lsls	r3, r3, #2
 801397a:	461a      	mov	r2, r3
 801397c:	21a5      	movs	r1, #165	; 0xa5
 801397e:	f003 fe1e 	bl	80175be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801398c:	3b01      	subs	r3, #1
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	4413      	add	r3, r2
 8013992:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013994:	69bb      	ldr	r3, [r7, #24]
 8013996:	f023 0307 	bic.w	r3, r3, #7
 801399a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801399c:	69bb      	ldr	r3, [r7, #24]
 801399e:	f003 0307 	and.w	r3, r3, #7
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d00a      	beq.n	80139bc <prvInitialiseNewTask+0x58>
	__asm volatile
 80139a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139aa:	f383 8811 	msr	BASEPRI, r3
 80139ae:	f3bf 8f6f 	isb	sy
 80139b2:	f3bf 8f4f 	dsb	sy
 80139b6:	617b      	str	r3, [r7, #20]
}
 80139b8:	bf00      	nop
 80139ba:	e7fe      	b.n	80139ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80139bc:	68bb      	ldr	r3, [r7, #8]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d01f      	beq.n	8013a02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139c2:	2300      	movs	r3, #0
 80139c4:	61fb      	str	r3, [r7, #28]
 80139c6:	e012      	b.n	80139ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80139c8:	68ba      	ldr	r2, [r7, #8]
 80139ca:	69fb      	ldr	r3, [r7, #28]
 80139cc:	4413      	add	r3, r2
 80139ce:	7819      	ldrb	r1, [r3, #0]
 80139d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	4413      	add	r3, r2
 80139d6:	3334      	adds	r3, #52	; 0x34
 80139d8:	460a      	mov	r2, r1
 80139da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80139dc:	68ba      	ldr	r2, [r7, #8]
 80139de:	69fb      	ldr	r3, [r7, #28]
 80139e0:	4413      	add	r3, r2
 80139e2:	781b      	ldrb	r3, [r3, #0]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d006      	beq.n	80139f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	3301      	adds	r3, #1
 80139ec:	61fb      	str	r3, [r7, #28]
 80139ee:	69fb      	ldr	r3, [r7, #28]
 80139f0:	2b0f      	cmp	r3, #15
 80139f2:	d9e9      	bls.n	80139c8 <prvInitialiseNewTask+0x64>
 80139f4:	e000      	b.n	80139f8 <prvInitialiseNewTask+0x94>
			{
				break;
 80139f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80139f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139fa:	2200      	movs	r2, #0
 80139fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013a00:	e003      	b.n	8013a0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a04:	2200      	movs	r2, #0
 8013a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0c:	2b37      	cmp	r3, #55	; 0x37
 8013a0e:	d901      	bls.n	8013a14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013a10:	2337      	movs	r3, #55	; 0x37
 8013a12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a22:	2200      	movs	r2, #0
 8013a24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a28:	3304      	adds	r3, #4
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f7fe fe56 	bl	80126dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a32:	3318      	adds	r3, #24
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7fe fe51 	bl	80126dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8013a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8013a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8013a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a52:	2200      	movs	r2, #0
 8013a54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a5a:	2200      	movs	r2, #0
 8013a5c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8013a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a62:	3354      	adds	r3, #84	; 0x54
 8013a64:	224c      	movs	r2, #76	; 0x4c
 8013a66:	2100      	movs	r1, #0
 8013a68:	4618      	mov	r0, r3
 8013a6a:	f003 fda8 	bl	80175be <memset>
 8013a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a70:	4a0c      	ldr	r2, [pc, #48]	; (8013aa4 <prvInitialiseNewTask+0x140>)
 8013a72:	659a      	str	r2, [r3, #88]	; 0x58
 8013a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a76:	4a0c      	ldr	r2, [pc, #48]	; (8013aa8 <prvInitialiseNewTask+0x144>)
 8013a78:	65da      	str	r2, [r3, #92]	; 0x5c
 8013a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a7c:	4a0b      	ldr	r2, [pc, #44]	; (8013aac <prvInitialiseNewTask+0x148>)
 8013a7e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8013a80:	683a      	ldr	r2, [r7, #0]
 8013a82:	68f9      	ldr	r1, [r7, #12]
 8013a84:	69b8      	ldr	r0, [r7, #24]
 8013a86:	f001 fd2b 	bl	80154e0 <pxPortInitialiseStack>
 8013a8a:	4602      	mov	r2, r0
 8013a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a8e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d002      	beq.n	8013a9c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013a9c:	bf00      	nop
 8013a9e:	3720      	adds	r7, #32
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	20009f70 	.word	0x20009f70
 8013aa8:	20009fd8 	.word	0x20009fd8
 8013aac:	2000a040 	.word	0x2000a040

08013ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	b082      	sub	sp, #8
 8013ab4:	af00      	add	r7, sp, #0
 8013ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013ab8:	f001 fe3c 	bl	8015734 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013abc:	4b2d      	ldr	r3, [pc, #180]	; (8013b74 <prvAddNewTaskToReadyList+0xc4>)
 8013abe:	681b      	ldr	r3, [r3, #0]
 8013ac0:	3301      	adds	r3, #1
 8013ac2:	4a2c      	ldr	r2, [pc, #176]	; (8013b74 <prvAddNewTaskToReadyList+0xc4>)
 8013ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013ac6:	4b2c      	ldr	r3, [pc, #176]	; (8013b78 <prvAddNewTaskToReadyList+0xc8>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d109      	bne.n	8013ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013ace:	4a2a      	ldr	r2, [pc, #168]	; (8013b78 <prvAddNewTaskToReadyList+0xc8>)
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013ad4:	4b27      	ldr	r3, [pc, #156]	; (8013b74 <prvAddNewTaskToReadyList+0xc4>)
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	2b01      	cmp	r3, #1
 8013ada:	d110      	bne.n	8013afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013adc:	f000 fd10 	bl	8014500 <prvInitialiseTaskLists>
 8013ae0:	e00d      	b.n	8013afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013ae2:	4b26      	ldr	r3, [pc, #152]	; (8013b7c <prvAddNewTaskToReadyList+0xcc>)
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d109      	bne.n	8013afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8013aea:	4b23      	ldr	r3, [pc, #140]	; (8013b78 <prvAddNewTaskToReadyList+0xc8>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d802      	bhi.n	8013afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013af8:	4a1f      	ldr	r2, [pc, #124]	; (8013b78 <prvAddNewTaskToReadyList+0xc8>)
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013afe:	4b20      	ldr	r3, [pc, #128]	; (8013b80 <prvAddNewTaskToReadyList+0xd0>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	3301      	adds	r3, #1
 8013b04:	4a1e      	ldr	r2, [pc, #120]	; (8013b80 <prvAddNewTaskToReadyList+0xd0>)
 8013b06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013b08:	4b1d      	ldr	r3, [pc, #116]	; (8013b80 <prvAddNewTaskToReadyList+0xd0>)
 8013b0a:	681a      	ldr	r2, [r3, #0]
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b14:	4b1b      	ldr	r3, [pc, #108]	; (8013b84 <prvAddNewTaskToReadyList+0xd4>)
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d903      	bls.n	8013b24 <prvAddNewTaskToReadyList+0x74>
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b20:	4a18      	ldr	r2, [pc, #96]	; (8013b84 <prvAddNewTaskToReadyList+0xd4>)
 8013b22:	6013      	str	r3, [r2, #0]
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b28:	4613      	mov	r3, r2
 8013b2a:	009b      	lsls	r3, r3, #2
 8013b2c:	4413      	add	r3, r2
 8013b2e:	009b      	lsls	r3, r3, #2
 8013b30:	4a15      	ldr	r2, [pc, #84]	; (8013b88 <prvAddNewTaskToReadyList+0xd8>)
 8013b32:	441a      	add	r2, r3
 8013b34:	687b      	ldr	r3, [r7, #4]
 8013b36:	3304      	adds	r3, #4
 8013b38:	4619      	mov	r1, r3
 8013b3a:	4610      	mov	r0, r2
 8013b3c:	f7fe fddb 	bl	80126f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8013b40:	f001 fe28 	bl	8015794 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013b44:	4b0d      	ldr	r3, [pc, #52]	; (8013b7c <prvAddNewTaskToReadyList+0xcc>)
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d00e      	beq.n	8013b6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013b4c:	4b0a      	ldr	r3, [pc, #40]	; (8013b78 <prvAddNewTaskToReadyList+0xc8>)
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d207      	bcs.n	8013b6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013b5a:	4b0c      	ldr	r3, [pc, #48]	; (8013b8c <prvAddNewTaskToReadyList+0xdc>)
 8013b5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b60:	601a      	str	r2, [r3, #0]
 8013b62:	f3bf 8f4f 	dsb	sy
 8013b66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013b6a:	bf00      	nop
 8013b6c:	3708      	adds	r7, #8
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	bd80      	pop	{r7, pc}
 8013b72:	bf00      	nop
 8013b74:	20001df0 	.word	0x20001df0
 8013b78:	2000191c 	.word	0x2000191c
 8013b7c:	20001dfc 	.word	0x20001dfc
 8013b80:	20001e0c 	.word	0x20001e0c
 8013b84:	20001df8 	.word	0x20001df8
 8013b88:	20001920 	.word	0x20001920
 8013b8c:	e000ed04 	.word	0xe000ed04

08013b90 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8013b90:	b580      	push	{r7, lr}
 8013b92:	b084      	sub	sp, #16
 8013b94:	af00      	add	r7, sp, #0
 8013b96:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8013b98:	f001 fdcc 	bl	8015734 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	2b00      	cmp	r3, #0
 8013ba0:	d102      	bne.n	8013ba8 <vTaskDelete+0x18>
 8013ba2:	4b2c      	ldr	r3, [pc, #176]	; (8013c54 <vTaskDelete+0xc4>)
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	e000      	b.n	8013baa <vTaskDelete+0x1a>
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	3304      	adds	r3, #4
 8013bb0:	4618      	mov	r0, r3
 8013bb2:	f7fe fdfd 	bl	80127b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d004      	beq.n	8013bc8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	3318      	adds	r3, #24
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fe fdf4 	bl	80127b0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013bc8:	4b23      	ldr	r3, [pc, #140]	; (8013c58 <vTaskDelete+0xc8>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	3301      	adds	r3, #1
 8013bce:	4a22      	ldr	r2, [pc, #136]	; (8013c58 <vTaskDelete+0xc8>)
 8013bd0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8013bd2:	4b20      	ldr	r3, [pc, #128]	; (8013c54 <vTaskDelete+0xc4>)
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	68fa      	ldr	r2, [r7, #12]
 8013bd8:	429a      	cmp	r2, r3
 8013bda:	d10b      	bne.n	8013bf4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	3304      	adds	r3, #4
 8013be0:	4619      	mov	r1, r3
 8013be2:	481e      	ldr	r0, [pc, #120]	; (8013c5c <vTaskDelete+0xcc>)
 8013be4:	f7fe fd87 	bl	80126f6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8013be8:	4b1d      	ldr	r3, [pc, #116]	; (8013c60 <vTaskDelete+0xd0>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	3301      	adds	r3, #1
 8013bee:	4a1c      	ldr	r2, [pc, #112]	; (8013c60 <vTaskDelete+0xd0>)
 8013bf0:	6013      	str	r3, [r2, #0]
 8013bf2:	e009      	b.n	8013c08 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8013bf4:	4b1b      	ldr	r3, [pc, #108]	; (8013c64 <vTaskDelete+0xd4>)
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	3b01      	subs	r3, #1
 8013bfa:	4a1a      	ldr	r2, [pc, #104]	; (8013c64 <vTaskDelete+0xd4>)
 8013bfc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8013bfe:	68f8      	ldr	r0, [r7, #12]
 8013c00:	f000 fcec 	bl	80145dc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8013c04:	f000 fd1e 	bl	8014644 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8013c08:	f001 fdc4 	bl	8015794 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013c0c:	4b16      	ldr	r3, [pc, #88]	; (8013c68 <vTaskDelete+0xd8>)
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d01b      	beq.n	8013c4c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8013c14:	4b0f      	ldr	r3, [pc, #60]	; (8013c54 <vTaskDelete+0xc4>)
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	68fa      	ldr	r2, [r7, #12]
 8013c1a:	429a      	cmp	r2, r3
 8013c1c:	d116      	bne.n	8013c4c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013c1e:	4b13      	ldr	r3, [pc, #76]	; (8013c6c <vTaskDelete+0xdc>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d00a      	beq.n	8013c3c <vTaskDelete+0xac>
	__asm volatile
 8013c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c2a:	f383 8811 	msr	BASEPRI, r3
 8013c2e:	f3bf 8f6f 	isb	sy
 8013c32:	f3bf 8f4f 	dsb	sy
 8013c36:	60bb      	str	r3, [r7, #8]
}
 8013c38:	bf00      	nop
 8013c3a:	e7fe      	b.n	8013c3a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8013c3c:	4b0c      	ldr	r3, [pc, #48]	; (8013c70 <vTaskDelete+0xe0>)
 8013c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c42:	601a      	str	r2, [r3, #0]
 8013c44:	f3bf 8f4f 	dsb	sy
 8013c48:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013c4c:	bf00      	nop
 8013c4e:	3710      	adds	r7, #16
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	2000191c 	.word	0x2000191c
 8013c58:	20001e0c 	.word	0x20001e0c
 8013c5c:	20001dc4 	.word	0x20001dc4
 8013c60:	20001dd8 	.word	0x20001dd8
 8013c64:	20001df0 	.word	0x20001df0
 8013c68:	20001dfc 	.word	0x20001dfc
 8013c6c:	20001e18 	.word	0x20001e18
 8013c70:	e000ed04 	.word	0xe000ed04

08013c74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b084      	sub	sp, #16
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d017      	beq.n	8013cb6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013c86:	4b13      	ldr	r3, [pc, #76]	; (8013cd4 <vTaskDelay+0x60>)
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d00a      	beq.n	8013ca4 <vTaskDelay+0x30>
	__asm volatile
 8013c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c92:	f383 8811 	msr	BASEPRI, r3
 8013c96:	f3bf 8f6f 	isb	sy
 8013c9a:	f3bf 8f4f 	dsb	sy
 8013c9e:	60bb      	str	r3, [r7, #8]
}
 8013ca0:	bf00      	nop
 8013ca2:	e7fe      	b.n	8013ca2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8013ca4:	f000 f8f0 	bl	8013e88 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013ca8:	2100      	movs	r1, #0
 8013caa:	6878      	ldr	r0, [r7, #4]
 8013cac:	f001 f876 	bl	8014d9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013cb0:	f000 f8f8 	bl	8013ea4 <xTaskResumeAll>
 8013cb4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d107      	bne.n	8013ccc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8013cbc:	4b06      	ldr	r3, [pc, #24]	; (8013cd8 <vTaskDelay+0x64>)
 8013cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cc2:	601a      	str	r2, [r3, #0]
 8013cc4:	f3bf 8f4f 	dsb	sy
 8013cc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ccc:	bf00      	nop
 8013cce:	3710      	adds	r7, #16
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	bd80      	pop	{r7, pc}
 8013cd4:	20001e18 	.word	0x20001e18
 8013cd8:	e000ed04 	.word	0xe000ed04

08013cdc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b088      	sub	sp, #32
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013ce8:	69bb      	ldr	r3, [r7, #24]
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d10a      	bne.n	8013d04 <eTaskGetState+0x28>
	__asm volatile
 8013cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013cf2:	f383 8811 	msr	BASEPRI, r3
 8013cf6:	f3bf 8f6f 	isb	sy
 8013cfa:	f3bf 8f4f 	dsb	sy
 8013cfe:	60bb      	str	r3, [r7, #8]
}
 8013d00:	bf00      	nop
 8013d02:	e7fe      	b.n	8013d02 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8013d04:	4b23      	ldr	r3, [pc, #140]	; (8013d94 <eTaskGetState+0xb8>)
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	69ba      	ldr	r2, [r7, #24]
 8013d0a:	429a      	cmp	r2, r3
 8013d0c:	d102      	bne.n	8013d14 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013d0e:	2300      	movs	r3, #0
 8013d10:	77fb      	strb	r3, [r7, #31]
 8013d12:	e03a      	b.n	8013d8a <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8013d14:	f001 fd0e 	bl	8015734 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8013d18:	69bb      	ldr	r3, [r7, #24]
 8013d1a:	695b      	ldr	r3, [r3, #20]
 8013d1c:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8013d1e:	4b1e      	ldr	r3, [pc, #120]	; (8013d98 <eTaskGetState+0xbc>)
 8013d20:	681b      	ldr	r3, [r3, #0]
 8013d22:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8013d24:	4b1d      	ldr	r3, [pc, #116]	; (8013d9c <eTaskGetState+0xc0>)
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8013d2a:	f001 fd33 	bl	8015794 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8013d2e:	697a      	ldr	r2, [r7, #20]
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	429a      	cmp	r2, r3
 8013d34:	d003      	beq.n	8013d3e <eTaskGetState+0x62>
 8013d36:	697a      	ldr	r2, [r7, #20]
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	429a      	cmp	r2, r3
 8013d3c:	d102      	bne.n	8013d44 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8013d3e:	2302      	movs	r3, #2
 8013d40:	77fb      	strb	r3, [r7, #31]
 8013d42:	e022      	b.n	8013d8a <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	4a16      	ldr	r2, [pc, #88]	; (8013da0 <eTaskGetState+0xc4>)
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	d112      	bne.n	8013d72 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d10b      	bne.n	8013d6c <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8013d54:	69bb      	ldr	r3, [r7, #24]
 8013d56:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8013d5a:	b2db      	uxtb	r3, r3
 8013d5c:	2b01      	cmp	r3, #1
 8013d5e:	d102      	bne.n	8013d66 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8013d60:	2302      	movs	r3, #2
 8013d62:	77fb      	strb	r3, [r7, #31]
 8013d64:	e011      	b.n	8013d8a <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8013d66:	2303      	movs	r3, #3
 8013d68:	77fb      	strb	r3, [r7, #31]
 8013d6a:	e00e      	b.n	8013d8a <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013d6c:	2302      	movs	r3, #2
 8013d6e:	77fb      	strb	r3, [r7, #31]
 8013d70:	e00b      	b.n	8013d8a <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	4a0b      	ldr	r2, [pc, #44]	; (8013da4 <eTaskGetState+0xc8>)
 8013d76:	4293      	cmp	r3, r2
 8013d78:	d002      	beq.n	8013d80 <eTaskGetState+0xa4>
 8013d7a:	697b      	ldr	r3, [r7, #20]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d102      	bne.n	8013d86 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8013d80:	2304      	movs	r3, #4
 8013d82:	77fb      	strb	r3, [r7, #31]
 8013d84:	e001      	b.n	8013d8a <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8013d86:	2301      	movs	r3, #1
 8013d88:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8013d8a:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3720      	adds	r7, #32
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	2000191c 	.word	0x2000191c
 8013d98:	20001da8 	.word	0x20001da8
 8013d9c:	20001dac 	.word	0x20001dac
 8013da0:	20001ddc 	.word	0x20001ddc
 8013da4:	20001dc4 	.word	0x20001dc4

08013da8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013da8:	b580      	push	{r7, lr}
 8013daa:	b08a      	sub	sp, #40	; 0x28
 8013dac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013dae:	2300      	movs	r3, #0
 8013db0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013db2:	2300      	movs	r3, #0
 8013db4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013db6:	463a      	mov	r2, r7
 8013db8:	1d39      	adds	r1, r7, #4
 8013dba:	f107 0308 	add.w	r3, r7, #8
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7fe fc38 	bl	8012634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013dc4:	6839      	ldr	r1, [r7, #0]
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	68ba      	ldr	r2, [r7, #8]
 8013dca:	9202      	str	r2, [sp, #8]
 8013dcc:	9301      	str	r3, [sp, #4]
 8013dce:	2300      	movs	r3, #0
 8013dd0:	9300      	str	r3, [sp, #0]
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	460a      	mov	r2, r1
 8013dd6:	4924      	ldr	r1, [pc, #144]	; (8013e68 <vTaskStartScheduler+0xc0>)
 8013dd8:	4824      	ldr	r0, [pc, #144]	; (8013e6c <vTaskStartScheduler+0xc4>)
 8013dda:	f7ff fd21 	bl	8013820 <xTaskCreateStatic>
 8013dde:	4603      	mov	r3, r0
 8013de0:	4a23      	ldr	r2, [pc, #140]	; (8013e70 <vTaskStartScheduler+0xc8>)
 8013de2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013de4:	4b22      	ldr	r3, [pc, #136]	; (8013e70 <vTaskStartScheduler+0xc8>)
 8013de6:	681b      	ldr	r3, [r3, #0]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	d002      	beq.n	8013df2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013dec:	2301      	movs	r3, #1
 8013dee:	617b      	str	r3, [r7, #20]
 8013df0:	e001      	b.n	8013df6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013df2:	2300      	movs	r3, #0
 8013df4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	2b01      	cmp	r3, #1
 8013dfa:	d102      	bne.n	8013e02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013dfc:	f001 f822 	bl	8014e44 <xTimerCreateTimerTask>
 8013e00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	d11b      	bne.n	8013e40 <vTaskStartScheduler+0x98>
	__asm volatile
 8013e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e0c:	f383 8811 	msr	BASEPRI, r3
 8013e10:	f3bf 8f6f 	isb	sy
 8013e14:	f3bf 8f4f 	dsb	sy
 8013e18:	613b      	str	r3, [r7, #16]
}
 8013e1a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013e1c:	4b15      	ldr	r3, [pc, #84]	; (8013e74 <vTaskStartScheduler+0xcc>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	3354      	adds	r3, #84	; 0x54
 8013e22:	4a15      	ldr	r2, [pc, #84]	; (8013e78 <vTaskStartScheduler+0xd0>)
 8013e24:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013e26:	4b15      	ldr	r3, [pc, #84]	; (8013e7c <vTaskStartScheduler+0xd4>)
 8013e28:	f04f 32ff 	mov.w	r2, #4294967295
 8013e2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013e2e:	4b14      	ldr	r3, [pc, #80]	; (8013e80 <vTaskStartScheduler+0xd8>)
 8013e30:	2201      	movs	r2, #1
 8013e32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013e34:	4b13      	ldr	r3, [pc, #76]	; (8013e84 <vTaskStartScheduler+0xdc>)
 8013e36:	2200      	movs	r2, #0
 8013e38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013e3a:	f001 fbd9 	bl	80155f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013e3e:	e00e      	b.n	8013e5e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013e40:	697b      	ldr	r3, [r7, #20]
 8013e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e46:	d10a      	bne.n	8013e5e <vTaskStartScheduler+0xb6>
	__asm volatile
 8013e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e4c:	f383 8811 	msr	BASEPRI, r3
 8013e50:	f3bf 8f6f 	isb	sy
 8013e54:	f3bf 8f4f 	dsb	sy
 8013e58:	60fb      	str	r3, [r7, #12]
}
 8013e5a:	bf00      	nop
 8013e5c:	e7fe      	b.n	8013e5c <vTaskStartScheduler+0xb4>
}
 8013e5e:	bf00      	nop
 8013e60:	3718      	adds	r7, #24
 8013e62:	46bd      	mov	sp, r7
 8013e64:	bd80      	pop	{r7, pc}
 8013e66:	bf00      	nop
 8013e68:	0801b388 	.word	0x0801b388
 8013e6c:	080144d1 	.word	0x080144d1
 8013e70:	20001e14 	.word	0x20001e14
 8013e74:	2000191c 	.word	0x2000191c
 8013e78:	200001e8 	.word	0x200001e8
 8013e7c:	20001e10 	.word	0x20001e10
 8013e80:	20001dfc 	.word	0x20001dfc
 8013e84:	20001df4 	.word	0x20001df4

08013e88 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013e88:	b480      	push	{r7}
 8013e8a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8013e8c:	4b04      	ldr	r3, [pc, #16]	; (8013ea0 <vTaskSuspendAll+0x18>)
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	3301      	adds	r3, #1
 8013e92:	4a03      	ldr	r2, [pc, #12]	; (8013ea0 <vTaskSuspendAll+0x18>)
 8013e94:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013e96:	bf00      	nop
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr
 8013ea0:	20001e18 	.word	0x20001e18

08013ea4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013eae:	2300      	movs	r3, #0
 8013eb0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013eb2:	4b42      	ldr	r3, [pc, #264]	; (8013fbc <xTaskResumeAll+0x118>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d10a      	bne.n	8013ed0 <xTaskResumeAll+0x2c>
	__asm volatile
 8013eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ebe:	f383 8811 	msr	BASEPRI, r3
 8013ec2:	f3bf 8f6f 	isb	sy
 8013ec6:	f3bf 8f4f 	dsb	sy
 8013eca:	603b      	str	r3, [r7, #0]
}
 8013ecc:	bf00      	nop
 8013ece:	e7fe      	b.n	8013ece <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013ed0:	f001 fc30 	bl	8015734 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013ed4:	4b39      	ldr	r3, [pc, #228]	; (8013fbc <xTaskResumeAll+0x118>)
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	3b01      	subs	r3, #1
 8013eda:	4a38      	ldr	r2, [pc, #224]	; (8013fbc <xTaskResumeAll+0x118>)
 8013edc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ede:	4b37      	ldr	r3, [pc, #220]	; (8013fbc <xTaskResumeAll+0x118>)
 8013ee0:	681b      	ldr	r3, [r3, #0]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d162      	bne.n	8013fac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013ee6:	4b36      	ldr	r3, [pc, #216]	; (8013fc0 <xTaskResumeAll+0x11c>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d05e      	beq.n	8013fac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013eee:	e02f      	b.n	8013f50 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013ef0:	4b34      	ldr	r3, [pc, #208]	; (8013fc4 <xTaskResumeAll+0x120>)
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	68db      	ldr	r3, [r3, #12]
 8013ef6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	3318      	adds	r3, #24
 8013efc:	4618      	mov	r0, r3
 8013efe:	f7fe fc57 	bl	80127b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	3304      	adds	r3, #4
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fe fc52 	bl	80127b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f10:	4b2d      	ldr	r3, [pc, #180]	; (8013fc8 <xTaskResumeAll+0x124>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	429a      	cmp	r2, r3
 8013f16:	d903      	bls.n	8013f20 <xTaskResumeAll+0x7c>
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f1c:	4a2a      	ldr	r2, [pc, #168]	; (8013fc8 <xTaskResumeAll+0x124>)
 8013f1e:	6013      	str	r3, [r2, #0]
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f24:	4613      	mov	r3, r2
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	4413      	add	r3, r2
 8013f2a:	009b      	lsls	r3, r3, #2
 8013f2c:	4a27      	ldr	r2, [pc, #156]	; (8013fcc <xTaskResumeAll+0x128>)
 8013f2e:	441a      	add	r2, r3
 8013f30:	68fb      	ldr	r3, [r7, #12]
 8013f32:	3304      	adds	r3, #4
 8013f34:	4619      	mov	r1, r3
 8013f36:	4610      	mov	r0, r2
 8013f38:	f7fe fbdd 	bl	80126f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f40:	4b23      	ldr	r3, [pc, #140]	; (8013fd0 <xTaskResumeAll+0x12c>)
 8013f42:	681b      	ldr	r3, [r3, #0]
 8013f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f46:	429a      	cmp	r2, r3
 8013f48:	d302      	bcc.n	8013f50 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013f4a:	4b22      	ldr	r3, [pc, #136]	; (8013fd4 <xTaskResumeAll+0x130>)
 8013f4c:	2201      	movs	r2, #1
 8013f4e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013f50:	4b1c      	ldr	r3, [pc, #112]	; (8013fc4 <xTaskResumeAll+0x120>)
 8013f52:	681b      	ldr	r3, [r3, #0]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d1cb      	bne.n	8013ef0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d001      	beq.n	8013f62 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013f5e:	f000 fb71 	bl	8014644 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013f62:	4b1d      	ldr	r3, [pc, #116]	; (8013fd8 <xTaskResumeAll+0x134>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d010      	beq.n	8013f90 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013f6e:	f000 f859 	bl	8014024 <xTaskIncrementTick>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d002      	beq.n	8013f7e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013f78:	4b16      	ldr	r3, [pc, #88]	; (8013fd4 <xTaskResumeAll+0x130>)
 8013f7a:	2201      	movs	r2, #1
 8013f7c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	3b01      	subs	r3, #1
 8013f82:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d1f1      	bne.n	8013f6e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013f8a:	4b13      	ldr	r3, [pc, #76]	; (8013fd8 <xTaskResumeAll+0x134>)
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013f90:	4b10      	ldr	r3, [pc, #64]	; (8013fd4 <xTaskResumeAll+0x130>)
 8013f92:	681b      	ldr	r3, [r3, #0]
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d009      	beq.n	8013fac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013f98:	2301      	movs	r3, #1
 8013f9a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013f9c:	4b0f      	ldr	r3, [pc, #60]	; (8013fdc <xTaskResumeAll+0x138>)
 8013f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fa2:	601a      	str	r2, [r3, #0]
 8013fa4:	f3bf 8f4f 	dsb	sy
 8013fa8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013fac:	f001 fbf2 	bl	8015794 <vPortExitCritical>

	return xAlreadyYielded;
 8013fb0:	68bb      	ldr	r3, [r7, #8]
}
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	3710      	adds	r7, #16
 8013fb6:	46bd      	mov	sp, r7
 8013fb8:	bd80      	pop	{r7, pc}
 8013fba:	bf00      	nop
 8013fbc:	20001e18 	.word	0x20001e18
 8013fc0:	20001df0 	.word	0x20001df0
 8013fc4:	20001db0 	.word	0x20001db0
 8013fc8:	20001df8 	.word	0x20001df8
 8013fcc:	20001920 	.word	0x20001920
 8013fd0:	2000191c 	.word	0x2000191c
 8013fd4:	20001e04 	.word	0x20001e04
 8013fd8:	20001e00 	.word	0x20001e00
 8013fdc:	e000ed04 	.word	0xe000ed04

08013fe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013fe0:	b480      	push	{r7}
 8013fe2:	b083      	sub	sp, #12
 8013fe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013fe6:	4b05      	ldr	r3, [pc, #20]	; (8013ffc <xTaskGetTickCount+0x1c>)
 8013fe8:	681b      	ldr	r3, [r3, #0]
 8013fea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013fec:	687b      	ldr	r3, [r7, #4]
}
 8013fee:	4618      	mov	r0, r3
 8013ff0:	370c      	adds	r7, #12
 8013ff2:	46bd      	mov	sp, r7
 8013ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff8:	4770      	bx	lr
 8013ffa:	bf00      	nop
 8013ffc:	20001df4 	.word	0x20001df4

08014000 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b082      	sub	sp, #8
 8014004:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014006:	f001 fc77 	bl	80158f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801400a:	2300      	movs	r3, #0
 801400c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801400e:	4b04      	ldr	r3, [pc, #16]	; (8014020 <xTaskGetTickCountFromISR+0x20>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014014:	683b      	ldr	r3, [r7, #0]
}
 8014016:	4618      	mov	r0, r3
 8014018:	3708      	adds	r7, #8
 801401a:	46bd      	mov	sp, r7
 801401c:	bd80      	pop	{r7, pc}
 801401e:	bf00      	nop
 8014020:	20001df4 	.word	0x20001df4

08014024 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b086      	sub	sp, #24
 8014028:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801402a:	2300      	movs	r3, #0
 801402c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801402e:	4b4f      	ldr	r3, [pc, #316]	; (801416c <xTaskIncrementTick+0x148>)
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	2b00      	cmp	r3, #0
 8014034:	f040 808f 	bne.w	8014156 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014038:	4b4d      	ldr	r3, [pc, #308]	; (8014170 <xTaskIncrementTick+0x14c>)
 801403a:	681b      	ldr	r3, [r3, #0]
 801403c:	3301      	adds	r3, #1
 801403e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014040:	4a4b      	ldr	r2, [pc, #300]	; (8014170 <xTaskIncrementTick+0x14c>)
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d120      	bne.n	801408e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801404c:	4b49      	ldr	r3, [pc, #292]	; (8014174 <xTaskIncrementTick+0x150>)
 801404e:	681b      	ldr	r3, [r3, #0]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d00a      	beq.n	801406c <xTaskIncrementTick+0x48>
	__asm volatile
 8014056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801405a:	f383 8811 	msr	BASEPRI, r3
 801405e:	f3bf 8f6f 	isb	sy
 8014062:	f3bf 8f4f 	dsb	sy
 8014066:	603b      	str	r3, [r7, #0]
}
 8014068:	bf00      	nop
 801406a:	e7fe      	b.n	801406a <xTaskIncrementTick+0x46>
 801406c:	4b41      	ldr	r3, [pc, #260]	; (8014174 <xTaskIncrementTick+0x150>)
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	60fb      	str	r3, [r7, #12]
 8014072:	4b41      	ldr	r3, [pc, #260]	; (8014178 <xTaskIncrementTick+0x154>)
 8014074:	681b      	ldr	r3, [r3, #0]
 8014076:	4a3f      	ldr	r2, [pc, #252]	; (8014174 <xTaskIncrementTick+0x150>)
 8014078:	6013      	str	r3, [r2, #0]
 801407a:	4a3f      	ldr	r2, [pc, #252]	; (8014178 <xTaskIncrementTick+0x154>)
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	6013      	str	r3, [r2, #0]
 8014080:	4b3e      	ldr	r3, [pc, #248]	; (801417c <xTaskIncrementTick+0x158>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	3301      	adds	r3, #1
 8014086:	4a3d      	ldr	r2, [pc, #244]	; (801417c <xTaskIncrementTick+0x158>)
 8014088:	6013      	str	r3, [r2, #0]
 801408a:	f000 fadb 	bl	8014644 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801408e:	4b3c      	ldr	r3, [pc, #240]	; (8014180 <xTaskIncrementTick+0x15c>)
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	693a      	ldr	r2, [r7, #16]
 8014094:	429a      	cmp	r2, r3
 8014096:	d349      	bcc.n	801412c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014098:	4b36      	ldr	r3, [pc, #216]	; (8014174 <xTaskIncrementTick+0x150>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	d104      	bne.n	80140ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80140a2:	4b37      	ldr	r3, [pc, #220]	; (8014180 <xTaskIncrementTick+0x15c>)
 80140a4:	f04f 32ff 	mov.w	r2, #4294967295
 80140a8:	601a      	str	r2, [r3, #0]
					break;
 80140aa:	e03f      	b.n	801412c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80140ac:	4b31      	ldr	r3, [pc, #196]	; (8014174 <xTaskIncrementTick+0x150>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	68db      	ldr	r3, [r3, #12]
 80140b2:	68db      	ldr	r3, [r3, #12]
 80140b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80140b6:	68bb      	ldr	r3, [r7, #8]
 80140b8:	685b      	ldr	r3, [r3, #4]
 80140ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80140bc:	693a      	ldr	r2, [r7, #16]
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	429a      	cmp	r2, r3
 80140c2:	d203      	bcs.n	80140cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80140c4:	4a2e      	ldr	r2, [pc, #184]	; (8014180 <xTaskIncrementTick+0x15c>)
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80140ca:	e02f      	b.n	801412c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80140cc:	68bb      	ldr	r3, [r7, #8]
 80140ce:	3304      	adds	r3, #4
 80140d0:	4618      	mov	r0, r3
 80140d2:	f7fe fb6d 	bl	80127b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80140d6:	68bb      	ldr	r3, [r7, #8]
 80140d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d004      	beq.n	80140e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	3318      	adds	r3, #24
 80140e2:	4618      	mov	r0, r3
 80140e4:	f7fe fb64 	bl	80127b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80140e8:	68bb      	ldr	r3, [r7, #8]
 80140ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140ec:	4b25      	ldr	r3, [pc, #148]	; (8014184 <xTaskIncrementTick+0x160>)
 80140ee:	681b      	ldr	r3, [r3, #0]
 80140f0:	429a      	cmp	r2, r3
 80140f2:	d903      	bls.n	80140fc <xTaskIncrementTick+0xd8>
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f8:	4a22      	ldr	r2, [pc, #136]	; (8014184 <xTaskIncrementTick+0x160>)
 80140fa:	6013      	str	r3, [r2, #0]
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014100:	4613      	mov	r3, r2
 8014102:	009b      	lsls	r3, r3, #2
 8014104:	4413      	add	r3, r2
 8014106:	009b      	lsls	r3, r3, #2
 8014108:	4a1f      	ldr	r2, [pc, #124]	; (8014188 <xTaskIncrementTick+0x164>)
 801410a:	441a      	add	r2, r3
 801410c:	68bb      	ldr	r3, [r7, #8]
 801410e:	3304      	adds	r3, #4
 8014110:	4619      	mov	r1, r3
 8014112:	4610      	mov	r0, r2
 8014114:	f7fe faef 	bl	80126f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014118:	68bb      	ldr	r3, [r7, #8]
 801411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801411c:	4b1b      	ldr	r3, [pc, #108]	; (801418c <xTaskIncrementTick+0x168>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014122:	429a      	cmp	r2, r3
 8014124:	d3b8      	bcc.n	8014098 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014126:	2301      	movs	r3, #1
 8014128:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801412a:	e7b5      	b.n	8014098 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801412c:	4b17      	ldr	r3, [pc, #92]	; (801418c <xTaskIncrementTick+0x168>)
 801412e:	681b      	ldr	r3, [r3, #0]
 8014130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014132:	4915      	ldr	r1, [pc, #84]	; (8014188 <xTaskIncrementTick+0x164>)
 8014134:	4613      	mov	r3, r2
 8014136:	009b      	lsls	r3, r3, #2
 8014138:	4413      	add	r3, r2
 801413a:	009b      	lsls	r3, r3, #2
 801413c:	440b      	add	r3, r1
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	2b01      	cmp	r3, #1
 8014142:	d901      	bls.n	8014148 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014144:	2301      	movs	r3, #1
 8014146:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014148:	4b11      	ldr	r3, [pc, #68]	; (8014190 <xTaskIncrementTick+0x16c>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d007      	beq.n	8014160 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014150:	2301      	movs	r3, #1
 8014152:	617b      	str	r3, [r7, #20]
 8014154:	e004      	b.n	8014160 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014156:	4b0f      	ldr	r3, [pc, #60]	; (8014194 <xTaskIncrementTick+0x170>)
 8014158:	681b      	ldr	r3, [r3, #0]
 801415a:	3301      	adds	r3, #1
 801415c:	4a0d      	ldr	r2, [pc, #52]	; (8014194 <xTaskIncrementTick+0x170>)
 801415e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014160:	697b      	ldr	r3, [r7, #20]
}
 8014162:	4618      	mov	r0, r3
 8014164:	3718      	adds	r7, #24
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	20001e18 	.word	0x20001e18
 8014170:	20001df4 	.word	0x20001df4
 8014174:	20001da8 	.word	0x20001da8
 8014178:	20001dac 	.word	0x20001dac
 801417c:	20001e08 	.word	0x20001e08
 8014180:	20001e10 	.word	0x20001e10
 8014184:	20001df8 	.word	0x20001df8
 8014188:	20001920 	.word	0x20001920
 801418c:	2000191c 	.word	0x2000191c
 8014190:	20001e04 	.word	0x20001e04
 8014194:	20001e00 	.word	0x20001e00

08014198 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014198:	b480      	push	{r7}
 801419a:	b085      	sub	sp, #20
 801419c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801419e:	4b2a      	ldr	r3, [pc, #168]	; (8014248 <vTaskSwitchContext+0xb0>)
 80141a0:	681b      	ldr	r3, [r3, #0]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d003      	beq.n	80141ae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80141a6:	4b29      	ldr	r3, [pc, #164]	; (801424c <vTaskSwitchContext+0xb4>)
 80141a8:	2201      	movs	r2, #1
 80141aa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80141ac:	e046      	b.n	801423c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80141ae:	4b27      	ldr	r3, [pc, #156]	; (801424c <vTaskSwitchContext+0xb4>)
 80141b0:	2200      	movs	r2, #0
 80141b2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141b4:	4b26      	ldr	r3, [pc, #152]	; (8014250 <vTaskSwitchContext+0xb8>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	60fb      	str	r3, [r7, #12]
 80141ba:	e010      	b.n	80141de <vTaskSwitchContext+0x46>
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d10a      	bne.n	80141d8 <vTaskSwitchContext+0x40>
	__asm volatile
 80141c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c6:	f383 8811 	msr	BASEPRI, r3
 80141ca:	f3bf 8f6f 	isb	sy
 80141ce:	f3bf 8f4f 	dsb	sy
 80141d2:	607b      	str	r3, [r7, #4]
}
 80141d4:	bf00      	nop
 80141d6:	e7fe      	b.n	80141d6 <vTaskSwitchContext+0x3e>
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	3b01      	subs	r3, #1
 80141dc:	60fb      	str	r3, [r7, #12]
 80141de:	491d      	ldr	r1, [pc, #116]	; (8014254 <vTaskSwitchContext+0xbc>)
 80141e0:	68fa      	ldr	r2, [r7, #12]
 80141e2:	4613      	mov	r3, r2
 80141e4:	009b      	lsls	r3, r3, #2
 80141e6:	4413      	add	r3, r2
 80141e8:	009b      	lsls	r3, r3, #2
 80141ea:	440b      	add	r3, r1
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d0e4      	beq.n	80141bc <vTaskSwitchContext+0x24>
 80141f2:	68fa      	ldr	r2, [r7, #12]
 80141f4:	4613      	mov	r3, r2
 80141f6:	009b      	lsls	r3, r3, #2
 80141f8:	4413      	add	r3, r2
 80141fa:	009b      	lsls	r3, r3, #2
 80141fc:	4a15      	ldr	r2, [pc, #84]	; (8014254 <vTaskSwitchContext+0xbc>)
 80141fe:	4413      	add	r3, r2
 8014200:	60bb      	str	r3, [r7, #8]
 8014202:	68bb      	ldr	r3, [r7, #8]
 8014204:	685b      	ldr	r3, [r3, #4]
 8014206:	685a      	ldr	r2, [r3, #4]
 8014208:	68bb      	ldr	r3, [r7, #8]
 801420a:	605a      	str	r2, [r3, #4]
 801420c:	68bb      	ldr	r3, [r7, #8]
 801420e:	685a      	ldr	r2, [r3, #4]
 8014210:	68bb      	ldr	r3, [r7, #8]
 8014212:	3308      	adds	r3, #8
 8014214:	429a      	cmp	r2, r3
 8014216:	d104      	bne.n	8014222 <vTaskSwitchContext+0x8a>
 8014218:	68bb      	ldr	r3, [r7, #8]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	685a      	ldr	r2, [r3, #4]
 801421e:	68bb      	ldr	r3, [r7, #8]
 8014220:	605a      	str	r2, [r3, #4]
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	685b      	ldr	r3, [r3, #4]
 8014226:	68db      	ldr	r3, [r3, #12]
 8014228:	4a0b      	ldr	r2, [pc, #44]	; (8014258 <vTaskSwitchContext+0xc0>)
 801422a:	6013      	str	r3, [r2, #0]
 801422c:	4a08      	ldr	r2, [pc, #32]	; (8014250 <vTaskSwitchContext+0xb8>)
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014232:	4b09      	ldr	r3, [pc, #36]	; (8014258 <vTaskSwitchContext+0xc0>)
 8014234:	681b      	ldr	r3, [r3, #0]
 8014236:	3354      	adds	r3, #84	; 0x54
 8014238:	4a08      	ldr	r2, [pc, #32]	; (801425c <vTaskSwitchContext+0xc4>)
 801423a:	6013      	str	r3, [r2, #0]
}
 801423c:	bf00      	nop
 801423e:	3714      	adds	r7, #20
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	20001e18 	.word	0x20001e18
 801424c:	20001e04 	.word	0x20001e04
 8014250:	20001df8 	.word	0x20001df8
 8014254:	20001920 	.word	0x20001920
 8014258:	2000191c 	.word	0x2000191c
 801425c:	200001e8 	.word	0x200001e8

08014260 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b084      	sub	sp, #16
 8014264:	af00      	add	r7, sp, #0
 8014266:	6078      	str	r0, [r7, #4]
 8014268:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d10a      	bne.n	8014286 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014274:	f383 8811 	msr	BASEPRI, r3
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	f3bf 8f4f 	dsb	sy
 8014280:	60fb      	str	r3, [r7, #12]
}
 8014282:	bf00      	nop
 8014284:	e7fe      	b.n	8014284 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014286:	4b07      	ldr	r3, [pc, #28]	; (80142a4 <vTaskPlaceOnEventList+0x44>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	3318      	adds	r3, #24
 801428c:	4619      	mov	r1, r3
 801428e:	6878      	ldr	r0, [r7, #4]
 8014290:	f7fe fa55 	bl	801273e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014294:	2101      	movs	r1, #1
 8014296:	6838      	ldr	r0, [r7, #0]
 8014298:	f000 fd80 	bl	8014d9c <prvAddCurrentTaskToDelayedList>
}
 801429c:	bf00      	nop
 801429e:	3710      	adds	r7, #16
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	2000191c 	.word	0x2000191c

080142a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b086      	sub	sp, #24
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	60f8      	str	r0, [r7, #12]
 80142b0:	60b9      	str	r1, [r7, #8]
 80142b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80142b4:	68fb      	ldr	r3, [r7, #12]
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d10a      	bne.n	80142d0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80142ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142be:	f383 8811 	msr	BASEPRI, r3
 80142c2:	f3bf 8f6f 	isb	sy
 80142c6:	f3bf 8f4f 	dsb	sy
 80142ca:	617b      	str	r3, [r7, #20]
}
 80142cc:	bf00      	nop
 80142ce:	e7fe      	b.n	80142ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80142d0:	4b0a      	ldr	r3, [pc, #40]	; (80142fc <vTaskPlaceOnEventListRestricted+0x54>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	3318      	adds	r3, #24
 80142d6:	4619      	mov	r1, r3
 80142d8:	68f8      	ldr	r0, [r7, #12]
 80142da:	f7fe fa0c 	bl	80126f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d002      	beq.n	80142ea <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80142e4:	f04f 33ff 	mov.w	r3, #4294967295
 80142e8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80142ea:	6879      	ldr	r1, [r7, #4]
 80142ec:	68b8      	ldr	r0, [r7, #8]
 80142ee:	f000 fd55 	bl	8014d9c <prvAddCurrentTaskToDelayedList>
	}
 80142f2:	bf00      	nop
 80142f4:	3718      	adds	r7, #24
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	2000191c 	.word	0x2000191c

08014300 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b086      	sub	sp, #24
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	68db      	ldr	r3, [r3, #12]
 801430c:	68db      	ldr	r3, [r3, #12]
 801430e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014310:	693b      	ldr	r3, [r7, #16]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d10a      	bne.n	801432c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801431a:	f383 8811 	msr	BASEPRI, r3
 801431e:	f3bf 8f6f 	isb	sy
 8014322:	f3bf 8f4f 	dsb	sy
 8014326:	60fb      	str	r3, [r7, #12]
}
 8014328:	bf00      	nop
 801432a:	e7fe      	b.n	801432a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	3318      	adds	r3, #24
 8014330:	4618      	mov	r0, r3
 8014332:	f7fe fa3d 	bl	80127b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014336:	4b1e      	ldr	r3, [pc, #120]	; (80143b0 <xTaskRemoveFromEventList+0xb0>)
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d11d      	bne.n	801437a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	3304      	adds	r3, #4
 8014342:	4618      	mov	r0, r3
 8014344:	f7fe fa34 	bl	80127b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014348:	693b      	ldr	r3, [r7, #16]
 801434a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801434c:	4b19      	ldr	r3, [pc, #100]	; (80143b4 <xTaskRemoveFromEventList+0xb4>)
 801434e:	681b      	ldr	r3, [r3, #0]
 8014350:	429a      	cmp	r2, r3
 8014352:	d903      	bls.n	801435c <xTaskRemoveFromEventList+0x5c>
 8014354:	693b      	ldr	r3, [r7, #16]
 8014356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014358:	4a16      	ldr	r2, [pc, #88]	; (80143b4 <xTaskRemoveFromEventList+0xb4>)
 801435a:	6013      	str	r3, [r2, #0]
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014360:	4613      	mov	r3, r2
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	4413      	add	r3, r2
 8014366:	009b      	lsls	r3, r3, #2
 8014368:	4a13      	ldr	r2, [pc, #76]	; (80143b8 <xTaskRemoveFromEventList+0xb8>)
 801436a:	441a      	add	r2, r3
 801436c:	693b      	ldr	r3, [r7, #16]
 801436e:	3304      	adds	r3, #4
 8014370:	4619      	mov	r1, r3
 8014372:	4610      	mov	r0, r2
 8014374:	f7fe f9bf 	bl	80126f6 <vListInsertEnd>
 8014378:	e005      	b.n	8014386 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801437a:	693b      	ldr	r3, [r7, #16]
 801437c:	3318      	adds	r3, #24
 801437e:	4619      	mov	r1, r3
 8014380:	480e      	ldr	r0, [pc, #56]	; (80143bc <xTaskRemoveFromEventList+0xbc>)
 8014382:	f7fe f9b8 	bl	80126f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014386:	693b      	ldr	r3, [r7, #16]
 8014388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801438a:	4b0d      	ldr	r3, [pc, #52]	; (80143c0 <xTaskRemoveFromEventList+0xc0>)
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014390:	429a      	cmp	r2, r3
 8014392:	d905      	bls.n	80143a0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014394:	2301      	movs	r3, #1
 8014396:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014398:	4b0a      	ldr	r3, [pc, #40]	; (80143c4 <xTaskRemoveFromEventList+0xc4>)
 801439a:	2201      	movs	r2, #1
 801439c:	601a      	str	r2, [r3, #0]
 801439e:	e001      	b.n	80143a4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80143a0:	2300      	movs	r3, #0
 80143a2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80143a4:	697b      	ldr	r3, [r7, #20]
}
 80143a6:	4618      	mov	r0, r3
 80143a8:	3718      	adds	r7, #24
 80143aa:	46bd      	mov	sp, r7
 80143ac:	bd80      	pop	{r7, pc}
 80143ae:	bf00      	nop
 80143b0:	20001e18 	.word	0x20001e18
 80143b4:	20001df8 	.word	0x20001df8
 80143b8:	20001920 	.word	0x20001920
 80143bc:	20001db0 	.word	0x20001db0
 80143c0:	2000191c 	.word	0x2000191c
 80143c4:	20001e04 	.word	0x20001e04

080143c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80143c8:	b480      	push	{r7}
 80143ca:	b083      	sub	sp, #12
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80143d0:	4b06      	ldr	r3, [pc, #24]	; (80143ec <vTaskInternalSetTimeOutState+0x24>)
 80143d2:	681a      	ldr	r2, [r3, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80143d8:	4b05      	ldr	r3, [pc, #20]	; (80143f0 <vTaskInternalSetTimeOutState+0x28>)
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	605a      	str	r2, [r3, #4]
}
 80143e0:	bf00      	nop
 80143e2:	370c      	adds	r7, #12
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr
 80143ec:	20001e08 	.word	0x20001e08
 80143f0:	20001df4 	.word	0x20001df4

080143f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b088      	sub	sp, #32
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
 80143fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	2b00      	cmp	r3, #0
 8014402:	d10a      	bne.n	801441a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014408:	f383 8811 	msr	BASEPRI, r3
 801440c:	f3bf 8f6f 	isb	sy
 8014410:	f3bf 8f4f 	dsb	sy
 8014414:	613b      	str	r3, [r7, #16]
}
 8014416:	bf00      	nop
 8014418:	e7fe      	b.n	8014418 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	2b00      	cmp	r3, #0
 801441e:	d10a      	bne.n	8014436 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014424:	f383 8811 	msr	BASEPRI, r3
 8014428:	f3bf 8f6f 	isb	sy
 801442c:	f3bf 8f4f 	dsb	sy
 8014430:	60fb      	str	r3, [r7, #12]
}
 8014432:	bf00      	nop
 8014434:	e7fe      	b.n	8014434 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014436:	f001 f97d 	bl	8015734 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801443a:	4b1d      	ldr	r3, [pc, #116]	; (80144b0 <xTaskCheckForTimeOut+0xbc>)
 801443c:	681b      	ldr	r3, [r3, #0]
 801443e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	685b      	ldr	r3, [r3, #4]
 8014444:	69ba      	ldr	r2, [r7, #24]
 8014446:	1ad3      	subs	r3, r2, r3
 8014448:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014452:	d102      	bne.n	801445a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014454:	2300      	movs	r3, #0
 8014456:	61fb      	str	r3, [r7, #28]
 8014458:	e023      	b.n	80144a2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	681a      	ldr	r2, [r3, #0]
 801445e:	4b15      	ldr	r3, [pc, #84]	; (80144b4 <xTaskCheckForTimeOut+0xc0>)
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	429a      	cmp	r2, r3
 8014464:	d007      	beq.n	8014476 <xTaskCheckForTimeOut+0x82>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	685b      	ldr	r3, [r3, #4]
 801446a:	69ba      	ldr	r2, [r7, #24]
 801446c:	429a      	cmp	r2, r3
 801446e:	d302      	bcc.n	8014476 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014470:	2301      	movs	r3, #1
 8014472:	61fb      	str	r3, [r7, #28]
 8014474:	e015      	b.n	80144a2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014476:	683b      	ldr	r3, [r7, #0]
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	697a      	ldr	r2, [r7, #20]
 801447c:	429a      	cmp	r2, r3
 801447e:	d20b      	bcs.n	8014498 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014480:	683b      	ldr	r3, [r7, #0]
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	1ad2      	subs	r2, r2, r3
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801448c:	6878      	ldr	r0, [r7, #4]
 801448e:	f7ff ff9b 	bl	80143c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014492:	2300      	movs	r3, #0
 8014494:	61fb      	str	r3, [r7, #28]
 8014496:	e004      	b.n	80144a2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014498:	683b      	ldr	r3, [r7, #0]
 801449a:	2200      	movs	r2, #0
 801449c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801449e:	2301      	movs	r3, #1
 80144a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80144a2:	f001 f977 	bl	8015794 <vPortExitCritical>

	return xReturn;
 80144a6:	69fb      	ldr	r3, [r7, #28]
}
 80144a8:	4618      	mov	r0, r3
 80144aa:	3720      	adds	r7, #32
 80144ac:	46bd      	mov	sp, r7
 80144ae:	bd80      	pop	{r7, pc}
 80144b0:	20001df4 	.word	0x20001df4
 80144b4:	20001e08 	.word	0x20001e08

080144b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80144b8:	b480      	push	{r7}
 80144ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80144bc:	4b03      	ldr	r3, [pc, #12]	; (80144cc <vTaskMissedYield+0x14>)
 80144be:	2201      	movs	r2, #1
 80144c0:	601a      	str	r2, [r3, #0]
}
 80144c2:	bf00      	nop
 80144c4:	46bd      	mov	sp, r7
 80144c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ca:	4770      	bx	lr
 80144cc:	20001e04 	.word	0x20001e04

080144d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80144d8:	f000 f852 	bl	8014580 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80144dc:	4b06      	ldr	r3, [pc, #24]	; (80144f8 <prvIdleTask+0x28>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d9f9      	bls.n	80144d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80144e4:	4b05      	ldr	r3, [pc, #20]	; (80144fc <prvIdleTask+0x2c>)
 80144e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144ea:	601a      	str	r2, [r3, #0]
 80144ec:	f3bf 8f4f 	dsb	sy
 80144f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80144f4:	e7f0      	b.n	80144d8 <prvIdleTask+0x8>
 80144f6:	bf00      	nop
 80144f8:	20001920 	.word	0x20001920
 80144fc:	e000ed04 	.word	0xe000ed04

08014500 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014500:	b580      	push	{r7, lr}
 8014502:	b082      	sub	sp, #8
 8014504:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014506:	2300      	movs	r3, #0
 8014508:	607b      	str	r3, [r7, #4]
 801450a:	e00c      	b.n	8014526 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801450c:	687a      	ldr	r2, [r7, #4]
 801450e:	4613      	mov	r3, r2
 8014510:	009b      	lsls	r3, r3, #2
 8014512:	4413      	add	r3, r2
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	4a12      	ldr	r2, [pc, #72]	; (8014560 <prvInitialiseTaskLists+0x60>)
 8014518:	4413      	add	r3, r2
 801451a:	4618      	mov	r0, r3
 801451c:	f7fe f8be 	bl	801269c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	3301      	adds	r3, #1
 8014524:	607b      	str	r3, [r7, #4]
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	2b37      	cmp	r3, #55	; 0x37
 801452a:	d9ef      	bls.n	801450c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801452c:	480d      	ldr	r0, [pc, #52]	; (8014564 <prvInitialiseTaskLists+0x64>)
 801452e:	f7fe f8b5 	bl	801269c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014532:	480d      	ldr	r0, [pc, #52]	; (8014568 <prvInitialiseTaskLists+0x68>)
 8014534:	f7fe f8b2 	bl	801269c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014538:	480c      	ldr	r0, [pc, #48]	; (801456c <prvInitialiseTaskLists+0x6c>)
 801453a:	f7fe f8af 	bl	801269c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801453e:	480c      	ldr	r0, [pc, #48]	; (8014570 <prvInitialiseTaskLists+0x70>)
 8014540:	f7fe f8ac 	bl	801269c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014544:	480b      	ldr	r0, [pc, #44]	; (8014574 <prvInitialiseTaskLists+0x74>)
 8014546:	f7fe f8a9 	bl	801269c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801454a:	4b0b      	ldr	r3, [pc, #44]	; (8014578 <prvInitialiseTaskLists+0x78>)
 801454c:	4a05      	ldr	r2, [pc, #20]	; (8014564 <prvInitialiseTaskLists+0x64>)
 801454e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014550:	4b0a      	ldr	r3, [pc, #40]	; (801457c <prvInitialiseTaskLists+0x7c>)
 8014552:	4a05      	ldr	r2, [pc, #20]	; (8014568 <prvInitialiseTaskLists+0x68>)
 8014554:	601a      	str	r2, [r3, #0]
}
 8014556:	bf00      	nop
 8014558:	3708      	adds	r7, #8
 801455a:	46bd      	mov	sp, r7
 801455c:	bd80      	pop	{r7, pc}
 801455e:	bf00      	nop
 8014560:	20001920 	.word	0x20001920
 8014564:	20001d80 	.word	0x20001d80
 8014568:	20001d94 	.word	0x20001d94
 801456c:	20001db0 	.word	0x20001db0
 8014570:	20001dc4 	.word	0x20001dc4
 8014574:	20001ddc 	.word	0x20001ddc
 8014578:	20001da8 	.word	0x20001da8
 801457c:	20001dac 	.word	0x20001dac

08014580 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014586:	e019      	b.n	80145bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014588:	f001 f8d4 	bl	8015734 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801458c:	4b10      	ldr	r3, [pc, #64]	; (80145d0 <prvCheckTasksWaitingTermination+0x50>)
 801458e:	68db      	ldr	r3, [r3, #12]
 8014590:	68db      	ldr	r3, [r3, #12]
 8014592:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	3304      	adds	r3, #4
 8014598:	4618      	mov	r0, r3
 801459a:	f7fe f909 	bl	80127b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801459e:	4b0d      	ldr	r3, [pc, #52]	; (80145d4 <prvCheckTasksWaitingTermination+0x54>)
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	3b01      	subs	r3, #1
 80145a4:	4a0b      	ldr	r2, [pc, #44]	; (80145d4 <prvCheckTasksWaitingTermination+0x54>)
 80145a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80145a8:	4b0b      	ldr	r3, [pc, #44]	; (80145d8 <prvCheckTasksWaitingTermination+0x58>)
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	3b01      	subs	r3, #1
 80145ae:	4a0a      	ldr	r2, [pc, #40]	; (80145d8 <prvCheckTasksWaitingTermination+0x58>)
 80145b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80145b2:	f001 f8ef 	bl	8015794 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80145b6:	6878      	ldr	r0, [r7, #4]
 80145b8:	f000 f810 	bl	80145dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80145bc:	4b06      	ldr	r3, [pc, #24]	; (80145d8 <prvCheckTasksWaitingTermination+0x58>)
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d1e1      	bne.n	8014588 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80145c4:	bf00      	nop
 80145c6:	bf00      	nop
 80145c8:	3708      	adds	r7, #8
 80145ca:	46bd      	mov	sp, r7
 80145cc:	bd80      	pop	{r7, pc}
 80145ce:	bf00      	nop
 80145d0:	20001dc4 	.word	0x20001dc4
 80145d4:	20001df0 	.word	0x20001df0
 80145d8:	20001dd8 	.word	0x20001dd8

080145dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80145dc:	b580      	push	{r7, lr}
 80145de:	b084      	sub	sp, #16
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	3354      	adds	r3, #84	; 0x54
 80145e8:	4618      	mov	r0, r3
 80145ea:	f003 f817 	bl	801761c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d108      	bne.n	801460a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80145fc:	4618      	mov	r0, r3
 80145fe:	f001 fa87 	bl	8015b10 <vPortFree>
				vPortFree( pxTCB );
 8014602:	6878      	ldr	r0, [r7, #4]
 8014604:	f001 fa84 	bl	8015b10 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014608:	e018      	b.n	801463c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8014610:	2b01      	cmp	r3, #1
 8014612:	d103      	bne.n	801461c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f001 fa7b 	bl	8015b10 <vPortFree>
	}
 801461a:	e00f      	b.n	801463c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8014622:	2b02      	cmp	r3, #2
 8014624:	d00a      	beq.n	801463c <prvDeleteTCB+0x60>
	__asm volatile
 8014626:	f04f 0350 	mov.w	r3, #80	; 0x50
 801462a:	f383 8811 	msr	BASEPRI, r3
 801462e:	f3bf 8f6f 	isb	sy
 8014632:	f3bf 8f4f 	dsb	sy
 8014636:	60fb      	str	r3, [r7, #12]
}
 8014638:	bf00      	nop
 801463a:	e7fe      	b.n	801463a <prvDeleteTCB+0x5e>
	}
 801463c:	bf00      	nop
 801463e:	3710      	adds	r7, #16
 8014640:	46bd      	mov	sp, r7
 8014642:	bd80      	pop	{r7, pc}

08014644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014644:	b480      	push	{r7}
 8014646:	b083      	sub	sp, #12
 8014648:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801464a:	4b0c      	ldr	r3, [pc, #48]	; (801467c <prvResetNextTaskUnblockTime+0x38>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	681b      	ldr	r3, [r3, #0]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d104      	bne.n	801465e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014654:	4b0a      	ldr	r3, [pc, #40]	; (8014680 <prvResetNextTaskUnblockTime+0x3c>)
 8014656:	f04f 32ff 	mov.w	r2, #4294967295
 801465a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801465c:	e008      	b.n	8014670 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801465e:	4b07      	ldr	r3, [pc, #28]	; (801467c <prvResetNextTaskUnblockTime+0x38>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	68db      	ldr	r3, [r3, #12]
 8014664:	68db      	ldr	r3, [r3, #12]
 8014666:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014668:	687b      	ldr	r3, [r7, #4]
 801466a:	685b      	ldr	r3, [r3, #4]
 801466c:	4a04      	ldr	r2, [pc, #16]	; (8014680 <prvResetNextTaskUnblockTime+0x3c>)
 801466e:	6013      	str	r3, [r2, #0]
}
 8014670:	bf00      	nop
 8014672:	370c      	adds	r7, #12
 8014674:	46bd      	mov	sp, r7
 8014676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467a:	4770      	bx	lr
 801467c:	20001da8 	.word	0x20001da8
 8014680:	20001e10 	.word	0x20001e10

08014684 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014684:	b480      	push	{r7}
 8014686:	b083      	sub	sp, #12
 8014688:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801468a:	4b0b      	ldr	r3, [pc, #44]	; (80146b8 <xTaskGetSchedulerState+0x34>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d102      	bne.n	8014698 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014692:	2301      	movs	r3, #1
 8014694:	607b      	str	r3, [r7, #4]
 8014696:	e008      	b.n	80146aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014698:	4b08      	ldr	r3, [pc, #32]	; (80146bc <xTaskGetSchedulerState+0x38>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d102      	bne.n	80146a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80146a0:	2302      	movs	r3, #2
 80146a2:	607b      	str	r3, [r7, #4]
 80146a4:	e001      	b.n	80146aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80146a6:	2300      	movs	r3, #0
 80146a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80146aa:	687b      	ldr	r3, [r7, #4]
	}
 80146ac:	4618      	mov	r0, r3
 80146ae:	370c      	adds	r7, #12
 80146b0:	46bd      	mov	sp, r7
 80146b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b6:	4770      	bx	lr
 80146b8:	20001dfc 	.word	0x20001dfc
 80146bc:	20001e18 	.word	0x20001e18

080146c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80146c0:	b580      	push	{r7, lr}
 80146c2:	b084      	sub	sp, #16
 80146c4:	af00      	add	r7, sp, #0
 80146c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80146cc:	2300      	movs	r3, #0
 80146ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d051      	beq.n	801477a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146da:	4b2a      	ldr	r3, [pc, #168]	; (8014784 <xTaskPriorityInherit+0xc4>)
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d241      	bcs.n	8014768 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80146e4:	68bb      	ldr	r3, [r7, #8]
 80146e6:	699b      	ldr	r3, [r3, #24]
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	db06      	blt.n	80146fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80146ec:	4b25      	ldr	r3, [pc, #148]	; (8014784 <xTaskPriorityInherit+0xc4>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80146f6:	68bb      	ldr	r3, [r7, #8]
 80146f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80146fa:	68bb      	ldr	r3, [r7, #8]
 80146fc:	6959      	ldr	r1, [r3, #20]
 80146fe:	68bb      	ldr	r3, [r7, #8]
 8014700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014702:	4613      	mov	r3, r2
 8014704:	009b      	lsls	r3, r3, #2
 8014706:	4413      	add	r3, r2
 8014708:	009b      	lsls	r3, r3, #2
 801470a:	4a1f      	ldr	r2, [pc, #124]	; (8014788 <xTaskPriorityInherit+0xc8>)
 801470c:	4413      	add	r3, r2
 801470e:	4299      	cmp	r1, r3
 8014710:	d122      	bne.n	8014758 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014712:	68bb      	ldr	r3, [r7, #8]
 8014714:	3304      	adds	r3, #4
 8014716:	4618      	mov	r0, r3
 8014718:	f7fe f84a 	bl	80127b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801471c:	4b19      	ldr	r3, [pc, #100]	; (8014784 <xTaskPriorityInherit+0xc4>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014726:	68bb      	ldr	r3, [r7, #8]
 8014728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801472a:	4b18      	ldr	r3, [pc, #96]	; (801478c <xTaskPriorityInherit+0xcc>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	429a      	cmp	r2, r3
 8014730:	d903      	bls.n	801473a <xTaskPriorityInherit+0x7a>
 8014732:	68bb      	ldr	r3, [r7, #8]
 8014734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014736:	4a15      	ldr	r2, [pc, #84]	; (801478c <xTaskPriorityInherit+0xcc>)
 8014738:	6013      	str	r3, [r2, #0]
 801473a:	68bb      	ldr	r3, [r7, #8]
 801473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801473e:	4613      	mov	r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	4413      	add	r3, r2
 8014744:	009b      	lsls	r3, r3, #2
 8014746:	4a10      	ldr	r2, [pc, #64]	; (8014788 <xTaskPriorityInherit+0xc8>)
 8014748:	441a      	add	r2, r3
 801474a:	68bb      	ldr	r3, [r7, #8]
 801474c:	3304      	adds	r3, #4
 801474e:	4619      	mov	r1, r3
 8014750:	4610      	mov	r0, r2
 8014752:	f7fd ffd0 	bl	80126f6 <vListInsertEnd>
 8014756:	e004      	b.n	8014762 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014758:	4b0a      	ldr	r3, [pc, #40]	; (8014784 <xTaskPriorityInherit+0xc4>)
 801475a:	681b      	ldr	r3, [r3, #0]
 801475c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014762:	2301      	movs	r3, #1
 8014764:	60fb      	str	r3, [r7, #12]
 8014766:	e008      	b.n	801477a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801476c:	4b05      	ldr	r3, [pc, #20]	; (8014784 <xTaskPriorityInherit+0xc4>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014772:	429a      	cmp	r2, r3
 8014774:	d201      	bcs.n	801477a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014776:	2301      	movs	r3, #1
 8014778:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801477a:	68fb      	ldr	r3, [r7, #12]
	}
 801477c:	4618      	mov	r0, r3
 801477e:	3710      	adds	r7, #16
 8014780:	46bd      	mov	sp, r7
 8014782:	bd80      	pop	{r7, pc}
 8014784:	2000191c 	.word	0x2000191c
 8014788:	20001920 	.word	0x20001920
 801478c:	20001df8 	.word	0x20001df8

08014790 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014790:	b580      	push	{r7, lr}
 8014792:	b086      	sub	sp, #24
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801479c:	2300      	movs	r3, #0
 801479e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d056      	beq.n	8014854 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80147a6:	4b2e      	ldr	r3, [pc, #184]	; (8014860 <xTaskPriorityDisinherit+0xd0>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	693a      	ldr	r2, [r7, #16]
 80147ac:	429a      	cmp	r2, r3
 80147ae:	d00a      	beq.n	80147c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80147b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147b4:	f383 8811 	msr	BASEPRI, r3
 80147b8:	f3bf 8f6f 	isb	sy
 80147bc:	f3bf 8f4f 	dsb	sy
 80147c0:	60fb      	str	r3, [r7, #12]
}
 80147c2:	bf00      	nop
 80147c4:	e7fe      	b.n	80147c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80147c6:	693b      	ldr	r3, [r7, #16]
 80147c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d10a      	bne.n	80147e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80147ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147d2:	f383 8811 	msr	BASEPRI, r3
 80147d6:	f3bf 8f6f 	isb	sy
 80147da:	f3bf 8f4f 	dsb	sy
 80147de:	60bb      	str	r3, [r7, #8]
}
 80147e0:	bf00      	nop
 80147e2:	e7fe      	b.n	80147e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80147e4:	693b      	ldr	r3, [r7, #16]
 80147e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147e8:	1e5a      	subs	r2, r3, #1
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147f2:	693b      	ldr	r3, [r7, #16]
 80147f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80147f6:	429a      	cmp	r2, r3
 80147f8:	d02c      	beq.n	8014854 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80147fa:	693b      	ldr	r3, [r7, #16]
 80147fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d128      	bne.n	8014854 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	3304      	adds	r3, #4
 8014806:	4618      	mov	r0, r3
 8014808:	f7fd ffd2 	bl	80127b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801480c:	693b      	ldr	r3, [r7, #16]
 801480e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014818:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801481c:	693b      	ldr	r3, [r7, #16]
 801481e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014824:	4b0f      	ldr	r3, [pc, #60]	; (8014864 <xTaskPriorityDisinherit+0xd4>)
 8014826:	681b      	ldr	r3, [r3, #0]
 8014828:	429a      	cmp	r2, r3
 801482a:	d903      	bls.n	8014834 <xTaskPriorityDisinherit+0xa4>
 801482c:	693b      	ldr	r3, [r7, #16]
 801482e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014830:	4a0c      	ldr	r2, [pc, #48]	; (8014864 <xTaskPriorityDisinherit+0xd4>)
 8014832:	6013      	str	r3, [r2, #0]
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014838:	4613      	mov	r3, r2
 801483a:	009b      	lsls	r3, r3, #2
 801483c:	4413      	add	r3, r2
 801483e:	009b      	lsls	r3, r3, #2
 8014840:	4a09      	ldr	r2, [pc, #36]	; (8014868 <xTaskPriorityDisinherit+0xd8>)
 8014842:	441a      	add	r2, r3
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	3304      	adds	r3, #4
 8014848:	4619      	mov	r1, r3
 801484a:	4610      	mov	r0, r2
 801484c:	f7fd ff53 	bl	80126f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014850:	2301      	movs	r3, #1
 8014852:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014854:	697b      	ldr	r3, [r7, #20]
	}
 8014856:	4618      	mov	r0, r3
 8014858:	3718      	adds	r7, #24
 801485a:	46bd      	mov	sp, r7
 801485c:	bd80      	pop	{r7, pc}
 801485e:	bf00      	nop
 8014860:	2000191c 	.word	0x2000191c
 8014864:	20001df8 	.word	0x20001df8
 8014868:	20001920 	.word	0x20001920

0801486c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801486c:	b580      	push	{r7, lr}
 801486e:	b088      	sub	sp, #32
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801487a:	2301      	movs	r3, #1
 801487c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d06a      	beq.n	801495a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014884:	69bb      	ldr	r3, [r7, #24]
 8014886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014888:	2b00      	cmp	r3, #0
 801488a:	d10a      	bne.n	80148a2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014890:	f383 8811 	msr	BASEPRI, r3
 8014894:	f3bf 8f6f 	isb	sy
 8014898:	f3bf 8f4f 	dsb	sy
 801489c:	60fb      	str	r3, [r7, #12]
}
 801489e:	bf00      	nop
 80148a0:	e7fe      	b.n	80148a0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80148a2:	69bb      	ldr	r3, [r7, #24]
 80148a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148a6:	683a      	ldr	r2, [r7, #0]
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d902      	bls.n	80148b2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	61fb      	str	r3, [r7, #28]
 80148b0:	e002      	b.n	80148b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80148b2:	69bb      	ldr	r3, [r7, #24]
 80148b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80148b6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80148b8:	69bb      	ldr	r3, [r7, #24]
 80148ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148bc:	69fa      	ldr	r2, [r7, #28]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d04b      	beq.n	801495a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80148c2:	69bb      	ldr	r3, [r7, #24]
 80148c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80148c6:	697a      	ldr	r2, [r7, #20]
 80148c8:	429a      	cmp	r2, r3
 80148ca:	d146      	bne.n	801495a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80148cc:	4b25      	ldr	r3, [pc, #148]	; (8014964 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	69ba      	ldr	r2, [r7, #24]
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d10a      	bne.n	80148ec <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80148d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148da:	f383 8811 	msr	BASEPRI, r3
 80148de:	f3bf 8f6f 	isb	sy
 80148e2:	f3bf 8f4f 	dsb	sy
 80148e6:	60bb      	str	r3, [r7, #8]
}
 80148e8:	bf00      	nop
 80148ea:	e7fe      	b.n	80148ea <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80148ec:	69bb      	ldr	r3, [r7, #24]
 80148ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80148f2:	69bb      	ldr	r3, [r7, #24]
 80148f4:	69fa      	ldr	r2, [r7, #28]
 80148f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80148f8:	69bb      	ldr	r3, [r7, #24]
 80148fa:	699b      	ldr	r3, [r3, #24]
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	db04      	blt.n	801490a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014900:	69fb      	ldr	r3, [r7, #28]
 8014902:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014906:	69bb      	ldr	r3, [r7, #24]
 8014908:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801490a:	69bb      	ldr	r3, [r7, #24]
 801490c:	6959      	ldr	r1, [r3, #20]
 801490e:	693a      	ldr	r2, [r7, #16]
 8014910:	4613      	mov	r3, r2
 8014912:	009b      	lsls	r3, r3, #2
 8014914:	4413      	add	r3, r2
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	4a13      	ldr	r2, [pc, #76]	; (8014968 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801491a:	4413      	add	r3, r2
 801491c:	4299      	cmp	r1, r3
 801491e:	d11c      	bne.n	801495a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014920:	69bb      	ldr	r3, [r7, #24]
 8014922:	3304      	adds	r3, #4
 8014924:	4618      	mov	r0, r3
 8014926:	f7fd ff43 	bl	80127b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801492a:	69bb      	ldr	r3, [r7, #24]
 801492c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801492e:	4b0f      	ldr	r3, [pc, #60]	; (801496c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	429a      	cmp	r2, r3
 8014934:	d903      	bls.n	801493e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8014936:	69bb      	ldr	r3, [r7, #24]
 8014938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801493a:	4a0c      	ldr	r2, [pc, #48]	; (801496c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801493c:	6013      	str	r3, [r2, #0]
 801493e:	69bb      	ldr	r3, [r7, #24]
 8014940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014942:	4613      	mov	r3, r2
 8014944:	009b      	lsls	r3, r3, #2
 8014946:	4413      	add	r3, r2
 8014948:	009b      	lsls	r3, r3, #2
 801494a:	4a07      	ldr	r2, [pc, #28]	; (8014968 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801494c:	441a      	add	r2, r3
 801494e:	69bb      	ldr	r3, [r7, #24]
 8014950:	3304      	adds	r3, #4
 8014952:	4619      	mov	r1, r3
 8014954:	4610      	mov	r0, r2
 8014956:	f7fd fece 	bl	80126f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801495a:	bf00      	nop
 801495c:	3720      	adds	r7, #32
 801495e:	46bd      	mov	sp, r7
 8014960:	bd80      	pop	{r7, pc}
 8014962:	bf00      	nop
 8014964:	2000191c 	.word	0x2000191c
 8014968:	20001920 	.word	0x20001920
 801496c:	20001df8 	.word	0x20001df8

08014970 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014970:	b480      	push	{r7}
 8014972:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014974:	4b07      	ldr	r3, [pc, #28]	; (8014994 <pvTaskIncrementMutexHeldCount+0x24>)
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d004      	beq.n	8014986 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 801497c:	4b05      	ldr	r3, [pc, #20]	; (8014994 <pvTaskIncrementMutexHeldCount+0x24>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014982:	3201      	adds	r2, #1
 8014984:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014986:	4b03      	ldr	r3, [pc, #12]	; (8014994 <pvTaskIncrementMutexHeldCount+0x24>)
 8014988:	681b      	ldr	r3, [r3, #0]
	}
 801498a:	4618      	mov	r0, r3
 801498c:	46bd      	mov	sp, r7
 801498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014992:	4770      	bx	lr
 8014994:	2000191c 	.word	0x2000191c

08014998 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8014998:	b580      	push	{r7, lr}
 801499a:	b086      	sub	sp, #24
 801499c:	af00      	add	r7, sp, #0
 801499e:	60f8      	str	r0, [r7, #12]
 80149a0:	60b9      	str	r1, [r7, #8]
 80149a2:	607a      	str	r2, [r7, #4]
 80149a4:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80149a6:	f000 fec5 	bl	8015734 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80149aa:	4b29      	ldr	r3, [pc, #164]	; (8014a50 <xTaskNotifyWait+0xb8>)
 80149ac:	681b      	ldr	r3, [r3, #0]
 80149ae:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80149b2:	b2db      	uxtb	r3, r3
 80149b4:	2b02      	cmp	r3, #2
 80149b6:	d01c      	beq.n	80149f2 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80149b8:	4b25      	ldr	r3, [pc, #148]	; (8014a50 <xTaskNotifyWait+0xb8>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 80149c0:	68fa      	ldr	r2, [r7, #12]
 80149c2:	43d2      	mvns	r2, r2
 80149c4:	400a      	ands	r2, r1
 80149c6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80149ca:	4b21      	ldr	r3, [pc, #132]	; (8014a50 <xTaskNotifyWait+0xb8>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	2201      	movs	r2, #1
 80149d0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d00b      	beq.n	80149f2 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149da:	2101      	movs	r1, #1
 80149dc:	6838      	ldr	r0, [r7, #0]
 80149de:	f000 f9dd 	bl	8014d9c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80149e2:	4b1c      	ldr	r3, [pc, #112]	; (8014a54 <xTaskNotifyWait+0xbc>)
 80149e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149e8:	601a      	str	r2, [r3, #0]
 80149ea:	f3bf 8f4f 	dsb	sy
 80149ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80149f2:	f000 fecf 	bl	8015794 <vPortExitCritical>

		taskENTER_CRITICAL();
 80149f6:	f000 fe9d 	bl	8015734 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d005      	beq.n	8014a0c <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8014a00:	4b13      	ldr	r3, [pc, #76]	; (8014a50 <xTaskNotifyWait+0xb8>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8014a0c:	4b10      	ldr	r3, [pc, #64]	; (8014a50 <xTaskNotifyWait+0xb8>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8014a14:	b2db      	uxtb	r3, r3
 8014a16:	2b02      	cmp	r3, #2
 8014a18:	d002      	beq.n	8014a20 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	617b      	str	r3, [r7, #20]
 8014a1e:	e00a      	b.n	8014a36 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8014a20:	4b0b      	ldr	r3, [pc, #44]	; (8014a50 <xTaskNotifyWait+0xb8>)
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8014a28:	68ba      	ldr	r2, [r7, #8]
 8014a2a:	43d2      	mvns	r2, r2
 8014a2c:	400a      	ands	r2, r1
 8014a2e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 8014a32:	2301      	movs	r3, #1
 8014a34:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014a36:	4b06      	ldr	r3, [pc, #24]	; (8014a50 <xTaskNotifyWait+0xb8>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2200      	movs	r2, #0
 8014a3c:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8014a40:	f000 fea8 	bl	8015794 <vPortExitCritical>

		return xReturn;
 8014a44:	697b      	ldr	r3, [r7, #20]
	}
 8014a46:	4618      	mov	r0, r3
 8014a48:	3718      	adds	r7, #24
 8014a4a:	46bd      	mov	sp, r7
 8014a4c:	bd80      	pop	{r7, pc}
 8014a4e:	bf00      	nop
 8014a50:	2000191c 	.word	0x2000191c
 8014a54:	e000ed04 	.word	0xe000ed04

08014a58 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8014a58:	b580      	push	{r7, lr}
 8014a5a:	b08a      	sub	sp, #40	; 0x28
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	60f8      	str	r0, [r7, #12]
 8014a60:	60b9      	str	r1, [r7, #8]
 8014a62:	603b      	str	r3, [r7, #0]
 8014a64:	4613      	mov	r3, r2
 8014a66:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8014a68:	2301      	movs	r3, #1
 8014a6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d10a      	bne.n	8014a88 <xTaskGenericNotify+0x30>
	__asm volatile
 8014a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a76:	f383 8811 	msr	BASEPRI, r3
 8014a7a:	f3bf 8f6f 	isb	sy
 8014a7e:	f3bf 8f4f 	dsb	sy
 8014a82:	61bb      	str	r3, [r7, #24]
}
 8014a84:	bf00      	nop
 8014a86:	e7fe      	b.n	8014a86 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8014a88:	68fb      	ldr	r3, [r7, #12]
 8014a8a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8014a8c:	f000 fe52 	bl	8015734 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8014a90:	683b      	ldr	r3, [r7, #0]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d004      	beq.n	8014aa0 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014a96:	6a3b      	ldr	r3, [r7, #32]
 8014a98:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014aa0:	6a3b      	ldr	r3, [r7, #32]
 8014aa2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8014aa6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014aa8:	6a3b      	ldr	r3, [r7, #32]
 8014aaa:	2202      	movs	r2, #2
 8014aac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8014ab0:	79fb      	ldrb	r3, [r7, #7]
 8014ab2:	2b04      	cmp	r3, #4
 8014ab4:	d82d      	bhi.n	8014b12 <xTaskGenericNotify+0xba>
 8014ab6:	a201      	add	r2, pc, #4	; (adr r2, 8014abc <xTaskGenericNotify+0x64>)
 8014ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014abc:	08014b35 	.word	0x08014b35
 8014ac0:	08014ad1 	.word	0x08014ad1
 8014ac4:	08014ae3 	.word	0x08014ae3
 8014ac8:	08014af3 	.word	0x08014af3
 8014acc:	08014afd 	.word	0x08014afd
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014ad0:	6a3b      	ldr	r3, [r7, #32]
 8014ad2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8014ad6:	68bb      	ldr	r3, [r7, #8]
 8014ad8:	431a      	orrs	r2, r3
 8014ada:	6a3b      	ldr	r3, [r7, #32]
 8014adc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8014ae0:	e02b      	b.n	8014b3a <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014ae2:	6a3b      	ldr	r3, [r7, #32]
 8014ae4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014ae8:	1c5a      	adds	r2, r3, #1
 8014aea:	6a3b      	ldr	r3, [r7, #32]
 8014aec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8014af0:	e023      	b.n	8014b3a <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014af2:	6a3b      	ldr	r3, [r7, #32]
 8014af4:	68ba      	ldr	r2, [r7, #8]
 8014af6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8014afa:	e01e      	b.n	8014b3a <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014afc:	7ffb      	ldrb	r3, [r7, #31]
 8014afe:	2b02      	cmp	r3, #2
 8014b00:	d004      	beq.n	8014b0c <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014b02:	6a3b      	ldr	r3, [r7, #32]
 8014b04:	68ba      	ldr	r2, [r7, #8]
 8014b06:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014b0a:	e016      	b.n	8014b3a <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8014b10:	e013      	b.n	8014b3a <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014b12:	6a3b      	ldr	r3, [r7, #32]
 8014b14:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b1c:	d00c      	beq.n	8014b38 <xTaskGenericNotify+0xe0>
	__asm volatile
 8014b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b22:	f383 8811 	msr	BASEPRI, r3
 8014b26:	f3bf 8f6f 	isb	sy
 8014b2a:	f3bf 8f4f 	dsb	sy
 8014b2e:	617b      	str	r3, [r7, #20]
}
 8014b30:	bf00      	nop
 8014b32:	e7fe      	b.n	8014b32 <xTaskGenericNotify+0xda>
					break;
 8014b34:	bf00      	nop
 8014b36:	e000      	b.n	8014b3a <xTaskGenericNotify+0xe2>

					break;
 8014b38:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014b3a:	7ffb      	ldrb	r3, [r7, #31]
 8014b3c:	2b01      	cmp	r3, #1
 8014b3e:	d13a      	bne.n	8014bb6 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014b40:	6a3b      	ldr	r3, [r7, #32]
 8014b42:	3304      	adds	r3, #4
 8014b44:	4618      	mov	r0, r3
 8014b46:	f7fd fe33 	bl	80127b0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8014b4a:	6a3b      	ldr	r3, [r7, #32]
 8014b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b4e:	4b1d      	ldr	r3, [pc, #116]	; (8014bc4 <xTaskGenericNotify+0x16c>)
 8014b50:	681b      	ldr	r3, [r3, #0]
 8014b52:	429a      	cmp	r2, r3
 8014b54:	d903      	bls.n	8014b5e <xTaskGenericNotify+0x106>
 8014b56:	6a3b      	ldr	r3, [r7, #32]
 8014b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b5a:	4a1a      	ldr	r2, [pc, #104]	; (8014bc4 <xTaskGenericNotify+0x16c>)
 8014b5c:	6013      	str	r3, [r2, #0]
 8014b5e:	6a3b      	ldr	r3, [r7, #32]
 8014b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b62:	4613      	mov	r3, r2
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	4413      	add	r3, r2
 8014b68:	009b      	lsls	r3, r3, #2
 8014b6a:	4a17      	ldr	r2, [pc, #92]	; (8014bc8 <xTaskGenericNotify+0x170>)
 8014b6c:	441a      	add	r2, r3
 8014b6e:	6a3b      	ldr	r3, [r7, #32]
 8014b70:	3304      	adds	r3, #4
 8014b72:	4619      	mov	r1, r3
 8014b74:	4610      	mov	r0, r2
 8014b76:	f7fd fdbe 	bl	80126f6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014b7a:	6a3b      	ldr	r3, [r7, #32]
 8014b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d00a      	beq.n	8014b98 <xTaskGenericNotify+0x140>
	__asm volatile
 8014b82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b86:	f383 8811 	msr	BASEPRI, r3
 8014b8a:	f3bf 8f6f 	isb	sy
 8014b8e:	f3bf 8f4f 	dsb	sy
 8014b92:	613b      	str	r3, [r7, #16]
}
 8014b94:	bf00      	nop
 8014b96:	e7fe      	b.n	8014b96 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b98:	6a3b      	ldr	r3, [r7, #32]
 8014b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b9c:	4b0b      	ldr	r3, [pc, #44]	; (8014bcc <xTaskGenericNotify+0x174>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d907      	bls.n	8014bb6 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8014ba6:	4b0a      	ldr	r3, [pc, #40]	; (8014bd0 <xTaskGenericNotify+0x178>)
 8014ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bac:	601a      	str	r2, [r3, #0]
 8014bae:	f3bf 8f4f 	dsb	sy
 8014bb2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8014bb6:	f000 fded 	bl	8015794 <vPortExitCritical>

		return xReturn;
 8014bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3728      	adds	r7, #40	; 0x28
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}
 8014bc4:	20001df8 	.word	0x20001df8
 8014bc8:	20001920 	.word	0x20001920
 8014bcc:	2000191c 	.word	0x2000191c
 8014bd0:	e000ed04 	.word	0xe000ed04

08014bd4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8014bd4:	b580      	push	{r7, lr}
 8014bd6:	b08e      	sub	sp, #56	; 0x38
 8014bd8:	af00      	add	r7, sp, #0
 8014bda:	60f8      	str	r0, [r7, #12]
 8014bdc:	60b9      	str	r1, [r7, #8]
 8014bde:	603b      	str	r3, [r7, #0]
 8014be0:	4613      	mov	r3, r2
 8014be2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8014be4:	2301      	movs	r3, #1
 8014be6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2b00      	cmp	r3, #0
 8014bec:	d10a      	bne.n	8014c04 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8014bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf2:	f383 8811 	msr	BASEPRI, r3
 8014bf6:	f3bf 8f6f 	isb	sy
 8014bfa:	f3bf 8f4f 	dsb	sy
 8014bfe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8014c00:	bf00      	nop
 8014c02:	e7fe      	b.n	8014c02 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014c04:	f000 fe78 	bl	80158f8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8014c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8014c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c14:	f383 8811 	msr	BASEPRI, r3
 8014c18:	f3bf 8f6f 	isb	sy
 8014c1c:	f3bf 8f4f 	dsb	sy
 8014c20:	623a      	str	r2, [r7, #32]
 8014c22:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8014c24:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014c26:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8014c28:	683b      	ldr	r3, [r7, #0]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d004      	beq.n	8014c38 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8014c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c30:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8014c34:	683b      	ldr	r3, [r7, #0]
 8014c36:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8014c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c3a:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8014c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8014c42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c44:	2202      	movs	r2, #2
 8014c46:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8014c4a:	79fb      	ldrb	r3, [r7, #7]
 8014c4c:	2b04      	cmp	r3, #4
 8014c4e:	d82f      	bhi.n	8014cb0 <xTaskGenericNotifyFromISR+0xdc>
 8014c50:	a201      	add	r2, pc, #4	; (adr r2, 8014c58 <xTaskGenericNotifyFromISR+0x84>)
 8014c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014c56:	bf00      	nop
 8014c58:	08014cd3 	.word	0x08014cd3
 8014c5c:	08014c6d 	.word	0x08014c6d
 8014c60:	08014c7f 	.word	0x08014c7f
 8014c64:	08014c8f 	.word	0x08014c8f
 8014c68:	08014c99 	.word	0x08014c99
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8014c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c6e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8014c72:	68bb      	ldr	r3, [r7, #8]
 8014c74:	431a      	orrs	r2, r3
 8014c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c78:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8014c7c:	e02c      	b.n	8014cd8 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8014c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c80:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014c84:	1c5a      	adds	r2, r3, #1
 8014c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c88:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8014c8c:	e024      	b.n	8014cd8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8014c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c90:	68ba      	ldr	r2, [r7, #8]
 8014c92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8014c96:	e01f      	b.n	8014cd8 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8014c98:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014c9c:	2b02      	cmp	r3, #2
 8014c9e:	d004      	beq.n	8014caa <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8014ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ca2:	68ba      	ldr	r2, [r7, #8]
 8014ca4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8014ca8:	e016      	b.n	8014cd8 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8014caa:	2300      	movs	r3, #0
 8014cac:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8014cae:	e013      	b.n	8014cd8 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8014cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8014cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cba:	d00c      	beq.n	8014cd6 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8014cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cc0:	f383 8811 	msr	BASEPRI, r3
 8014cc4:	f3bf 8f6f 	isb	sy
 8014cc8:	f3bf 8f4f 	dsb	sy
 8014ccc:	61bb      	str	r3, [r7, #24]
}
 8014cce:	bf00      	nop
 8014cd0:	e7fe      	b.n	8014cd0 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8014cd2:	bf00      	nop
 8014cd4:	e000      	b.n	8014cd8 <xTaskGenericNotifyFromISR+0x104>
					break;
 8014cd6:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8014cd8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8014cdc:	2b01      	cmp	r3, #1
 8014cde:	d146      	bne.n	8014d6e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8014ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d00a      	beq.n	8014cfe <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8014ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cec:	f383 8811 	msr	BASEPRI, r3
 8014cf0:	f3bf 8f6f 	isb	sy
 8014cf4:	f3bf 8f4f 	dsb	sy
 8014cf8:	617b      	str	r3, [r7, #20]
}
 8014cfa:	bf00      	nop
 8014cfc:	e7fe      	b.n	8014cfc <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cfe:	4b21      	ldr	r3, [pc, #132]	; (8014d84 <xTaskGenericNotifyFromISR+0x1b0>)
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d11d      	bne.n	8014d42 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d08:	3304      	adds	r3, #4
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	f7fd fd50 	bl	80127b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d14:	4b1c      	ldr	r3, [pc, #112]	; (8014d88 <xTaskGenericNotifyFromISR+0x1b4>)
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	429a      	cmp	r2, r3
 8014d1a:	d903      	bls.n	8014d24 <xTaskGenericNotifyFromISR+0x150>
 8014d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d20:	4a19      	ldr	r2, [pc, #100]	; (8014d88 <xTaskGenericNotifyFromISR+0x1b4>)
 8014d22:	6013      	str	r3, [r2, #0]
 8014d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d28:	4613      	mov	r3, r2
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	4413      	add	r3, r2
 8014d2e:	009b      	lsls	r3, r3, #2
 8014d30:	4a16      	ldr	r2, [pc, #88]	; (8014d8c <xTaskGenericNotifyFromISR+0x1b8>)
 8014d32:	441a      	add	r2, r3
 8014d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d36:	3304      	adds	r3, #4
 8014d38:	4619      	mov	r1, r3
 8014d3a:	4610      	mov	r0, r2
 8014d3c:	f7fd fcdb 	bl	80126f6 <vListInsertEnd>
 8014d40:	e005      	b.n	8014d4e <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8014d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d44:	3318      	adds	r3, #24
 8014d46:	4619      	mov	r1, r3
 8014d48:	4811      	ldr	r0, [pc, #68]	; (8014d90 <xTaskGenericNotifyFromISR+0x1bc>)
 8014d4a:	f7fd fcd4 	bl	80126f6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d52:	4b10      	ldr	r3, [pc, #64]	; (8014d94 <xTaskGenericNotifyFromISR+0x1c0>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d58:	429a      	cmp	r2, r3
 8014d5a:	d908      	bls.n	8014d6e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8014d5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d002      	beq.n	8014d68 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8014d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014d64:	2201      	movs	r2, #1
 8014d66:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8014d68:	4b0b      	ldr	r3, [pc, #44]	; (8014d98 <xTaskGenericNotifyFromISR+0x1c4>)
 8014d6a:	2201      	movs	r2, #1
 8014d6c:	601a      	str	r2, [r3, #0]
 8014d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	f383 8811 	msr	BASEPRI, r3
}
 8014d78:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8014d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3738      	adds	r7, #56	; 0x38
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	20001e18 	.word	0x20001e18
 8014d88:	20001df8 	.word	0x20001df8
 8014d8c:	20001920 	.word	0x20001920
 8014d90:	20001db0 	.word	0x20001db0
 8014d94:	2000191c 	.word	0x2000191c
 8014d98:	20001e04 	.word	0x20001e04

08014d9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b084      	sub	sp, #16
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
 8014da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014da6:	4b21      	ldr	r3, [pc, #132]	; (8014e2c <prvAddCurrentTaskToDelayedList+0x90>)
 8014da8:	681b      	ldr	r3, [r3, #0]
 8014daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014dac:	4b20      	ldr	r3, [pc, #128]	; (8014e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8014dae:	681b      	ldr	r3, [r3, #0]
 8014db0:	3304      	adds	r3, #4
 8014db2:	4618      	mov	r0, r3
 8014db4:	f7fd fcfc 	bl	80127b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dbe:	d10a      	bne.n	8014dd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8014dc0:	683b      	ldr	r3, [r7, #0]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d007      	beq.n	8014dd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014dc6:	4b1a      	ldr	r3, [pc, #104]	; (8014e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	3304      	adds	r3, #4
 8014dcc:	4619      	mov	r1, r3
 8014dce:	4819      	ldr	r0, [pc, #100]	; (8014e34 <prvAddCurrentTaskToDelayedList+0x98>)
 8014dd0:	f7fd fc91 	bl	80126f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014dd4:	e026      	b.n	8014e24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014dd6:	68fa      	ldr	r2, [r7, #12]
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	4413      	add	r3, r2
 8014ddc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014dde:	4b14      	ldr	r3, [pc, #80]	; (8014e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8014de0:	681b      	ldr	r3, [r3, #0]
 8014de2:	68ba      	ldr	r2, [r7, #8]
 8014de4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014de6:	68ba      	ldr	r2, [r7, #8]
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	429a      	cmp	r2, r3
 8014dec:	d209      	bcs.n	8014e02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014dee:	4b12      	ldr	r3, [pc, #72]	; (8014e38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	4b0f      	ldr	r3, [pc, #60]	; (8014e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	3304      	adds	r3, #4
 8014df8:	4619      	mov	r1, r3
 8014dfa:	4610      	mov	r0, r2
 8014dfc:	f7fd fc9f 	bl	801273e <vListInsert>
}
 8014e00:	e010      	b.n	8014e24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014e02:	4b0e      	ldr	r3, [pc, #56]	; (8014e3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8014e04:	681a      	ldr	r2, [r3, #0]
 8014e06:	4b0a      	ldr	r3, [pc, #40]	; (8014e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8014e08:	681b      	ldr	r3, [r3, #0]
 8014e0a:	3304      	adds	r3, #4
 8014e0c:	4619      	mov	r1, r3
 8014e0e:	4610      	mov	r0, r2
 8014e10:	f7fd fc95 	bl	801273e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014e14:	4b0a      	ldr	r3, [pc, #40]	; (8014e40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e16:	681b      	ldr	r3, [r3, #0]
 8014e18:	68ba      	ldr	r2, [r7, #8]
 8014e1a:	429a      	cmp	r2, r3
 8014e1c:	d202      	bcs.n	8014e24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014e1e:	4a08      	ldr	r2, [pc, #32]	; (8014e40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8014e20:	68bb      	ldr	r3, [r7, #8]
 8014e22:	6013      	str	r3, [r2, #0]
}
 8014e24:	bf00      	nop
 8014e26:	3710      	adds	r7, #16
 8014e28:	46bd      	mov	sp, r7
 8014e2a:	bd80      	pop	{r7, pc}
 8014e2c:	20001df4 	.word	0x20001df4
 8014e30:	2000191c 	.word	0x2000191c
 8014e34:	20001ddc 	.word	0x20001ddc
 8014e38:	20001dac 	.word	0x20001dac
 8014e3c:	20001da8 	.word	0x20001da8
 8014e40:	20001e10 	.word	0x20001e10

08014e44 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	b08a      	sub	sp, #40	; 0x28
 8014e48:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014e4a:	2300      	movs	r3, #0
 8014e4c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014e4e:	f000 fb07 	bl	8015460 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014e52:	4b1c      	ldr	r3, [pc, #112]	; (8014ec4 <xTimerCreateTimerTask+0x80>)
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	d021      	beq.n	8014e9e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014e5a:	2300      	movs	r3, #0
 8014e5c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014e5e:	2300      	movs	r3, #0
 8014e60:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014e62:	1d3a      	adds	r2, r7, #4
 8014e64:	f107 0108 	add.w	r1, r7, #8
 8014e68:	f107 030c 	add.w	r3, r7, #12
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7fd fbfb 	bl	8012668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014e72:	6879      	ldr	r1, [r7, #4]
 8014e74:	68bb      	ldr	r3, [r7, #8]
 8014e76:	68fa      	ldr	r2, [r7, #12]
 8014e78:	9202      	str	r2, [sp, #8]
 8014e7a:	9301      	str	r3, [sp, #4]
 8014e7c:	2302      	movs	r3, #2
 8014e7e:	9300      	str	r3, [sp, #0]
 8014e80:	2300      	movs	r3, #0
 8014e82:	460a      	mov	r2, r1
 8014e84:	4910      	ldr	r1, [pc, #64]	; (8014ec8 <xTimerCreateTimerTask+0x84>)
 8014e86:	4811      	ldr	r0, [pc, #68]	; (8014ecc <xTimerCreateTimerTask+0x88>)
 8014e88:	f7fe fcca 	bl	8013820 <xTaskCreateStatic>
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	4a10      	ldr	r2, [pc, #64]	; (8014ed0 <xTimerCreateTimerTask+0x8c>)
 8014e90:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014e92:	4b0f      	ldr	r3, [pc, #60]	; (8014ed0 <xTimerCreateTimerTask+0x8c>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d001      	beq.n	8014e9e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014e9e:	697b      	ldr	r3, [r7, #20]
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d10a      	bne.n	8014eba <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea8:	f383 8811 	msr	BASEPRI, r3
 8014eac:	f3bf 8f6f 	isb	sy
 8014eb0:	f3bf 8f4f 	dsb	sy
 8014eb4:	613b      	str	r3, [r7, #16]
}
 8014eb6:	bf00      	nop
 8014eb8:	e7fe      	b.n	8014eb8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014eba:	697b      	ldr	r3, [r7, #20]
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3718      	adds	r7, #24
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}
 8014ec4:	20001e4c 	.word	0x20001e4c
 8014ec8:	0801b390 	.word	0x0801b390
 8014ecc:	08015009 	.word	0x08015009
 8014ed0:	20001e50 	.word	0x20001e50

08014ed4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b08a      	sub	sp, #40	; 0x28
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	60f8      	str	r0, [r7, #12]
 8014edc:	60b9      	str	r1, [r7, #8]
 8014ede:	607a      	str	r2, [r7, #4]
 8014ee0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d10a      	bne.n	8014f02 <xTimerGenericCommand+0x2e>
	__asm volatile
 8014eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ef0:	f383 8811 	msr	BASEPRI, r3
 8014ef4:	f3bf 8f6f 	isb	sy
 8014ef8:	f3bf 8f4f 	dsb	sy
 8014efc:	623b      	str	r3, [r7, #32]
}
 8014efe:	bf00      	nop
 8014f00:	e7fe      	b.n	8014f00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014f02:	4b1a      	ldr	r3, [pc, #104]	; (8014f6c <xTimerGenericCommand+0x98>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d02a      	beq.n	8014f60 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014f0a:	68bb      	ldr	r3, [r7, #8]
 8014f0c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014f12:	68fb      	ldr	r3, [r7, #12]
 8014f14:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014f16:	68bb      	ldr	r3, [r7, #8]
 8014f18:	2b05      	cmp	r3, #5
 8014f1a:	dc18      	bgt.n	8014f4e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014f1c:	f7ff fbb2 	bl	8014684 <xTaskGetSchedulerState>
 8014f20:	4603      	mov	r3, r0
 8014f22:	2b02      	cmp	r3, #2
 8014f24:	d109      	bne.n	8014f3a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014f26:	4b11      	ldr	r3, [pc, #68]	; (8014f6c <xTimerGenericCommand+0x98>)
 8014f28:	6818      	ldr	r0, [r3, #0]
 8014f2a:	f107 0110 	add.w	r1, r7, #16
 8014f2e:	2300      	movs	r3, #0
 8014f30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014f32:	f7fd fe0f 	bl	8012b54 <xQueueGenericSend>
 8014f36:	6278      	str	r0, [r7, #36]	; 0x24
 8014f38:	e012      	b.n	8014f60 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014f3a:	4b0c      	ldr	r3, [pc, #48]	; (8014f6c <xTimerGenericCommand+0x98>)
 8014f3c:	6818      	ldr	r0, [r3, #0]
 8014f3e:	f107 0110 	add.w	r1, r7, #16
 8014f42:	2300      	movs	r3, #0
 8014f44:	2200      	movs	r2, #0
 8014f46:	f7fd fe05 	bl	8012b54 <xQueueGenericSend>
 8014f4a:	6278      	str	r0, [r7, #36]	; 0x24
 8014f4c:	e008      	b.n	8014f60 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014f4e:	4b07      	ldr	r3, [pc, #28]	; (8014f6c <xTimerGenericCommand+0x98>)
 8014f50:	6818      	ldr	r0, [r3, #0]
 8014f52:	f107 0110 	add.w	r1, r7, #16
 8014f56:	2300      	movs	r3, #0
 8014f58:	683a      	ldr	r2, [r7, #0]
 8014f5a:	f7fd fef9 	bl	8012d50 <xQueueGenericSendFromISR>
 8014f5e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3728      	adds	r7, #40	; 0x28
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	20001e4c 	.word	0x20001e4c

08014f70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014f70:	b580      	push	{r7, lr}
 8014f72:	b088      	sub	sp, #32
 8014f74:	af02      	add	r7, sp, #8
 8014f76:	6078      	str	r0, [r7, #4]
 8014f78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f7a:	4b22      	ldr	r3, [pc, #136]	; (8015004 <prvProcessExpiredTimer+0x94>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	68db      	ldr	r3, [r3, #12]
 8014f80:	68db      	ldr	r3, [r3, #12]
 8014f82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014f84:	697b      	ldr	r3, [r7, #20]
 8014f86:	3304      	adds	r3, #4
 8014f88:	4618      	mov	r0, r3
 8014f8a:	f7fd fc11 	bl	80127b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f94:	f003 0304 	and.w	r3, r3, #4
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d022      	beq.n	8014fe2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014f9c:	697b      	ldr	r3, [r7, #20]
 8014f9e:	699a      	ldr	r2, [r3, #24]
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	18d1      	adds	r1, r2, r3
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	683a      	ldr	r2, [r7, #0]
 8014fa8:	6978      	ldr	r0, [r7, #20]
 8014faa:	f000 f8d1 	bl	8015150 <prvInsertTimerInActiveList>
 8014fae:	4603      	mov	r3, r0
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d01f      	beq.n	8014ff4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014fb4:	2300      	movs	r3, #0
 8014fb6:	9300      	str	r3, [sp, #0]
 8014fb8:	2300      	movs	r3, #0
 8014fba:	687a      	ldr	r2, [r7, #4]
 8014fbc:	2100      	movs	r1, #0
 8014fbe:	6978      	ldr	r0, [r7, #20]
 8014fc0:	f7ff ff88 	bl	8014ed4 <xTimerGenericCommand>
 8014fc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d113      	bne.n	8014ff4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd0:	f383 8811 	msr	BASEPRI, r3
 8014fd4:	f3bf 8f6f 	isb	sy
 8014fd8:	f3bf 8f4f 	dsb	sy
 8014fdc:	60fb      	str	r3, [r7, #12]
}
 8014fde:	bf00      	nop
 8014fe0:	e7fe      	b.n	8014fe0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014fe2:	697b      	ldr	r3, [r7, #20]
 8014fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fe8:	f023 0301 	bic.w	r3, r3, #1
 8014fec:	b2da      	uxtb	r2, r3
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014ff4:	697b      	ldr	r3, [r7, #20]
 8014ff6:	6a1b      	ldr	r3, [r3, #32]
 8014ff8:	6978      	ldr	r0, [r7, #20]
 8014ffa:	4798      	blx	r3
}
 8014ffc:	bf00      	nop
 8014ffe:	3718      	adds	r7, #24
 8015000:	46bd      	mov	sp, r7
 8015002:	bd80      	pop	{r7, pc}
 8015004:	20001e44 	.word	0x20001e44

08015008 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b084      	sub	sp, #16
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015010:	f107 0308 	add.w	r3, r7, #8
 8015014:	4618      	mov	r0, r3
 8015016:	f000 f857 	bl	80150c8 <prvGetNextExpireTime>
 801501a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	4619      	mov	r1, r3
 8015020:	68f8      	ldr	r0, [r7, #12]
 8015022:	f000 f803 	bl	801502c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015026:	f000 f8d5 	bl	80151d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801502a:	e7f1      	b.n	8015010 <prvTimerTask+0x8>

0801502c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801502c:	b580      	push	{r7, lr}
 801502e:	b084      	sub	sp, #16
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015036:	f7fe ff27 	bl	8013e88 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801503a:	f107 0308 	add.w	r3, r7, #8
 801503e:	4618      	mov	r0, r3
 8015040:	f000 f866 	bl	8015110 <prvSampleTimeNow>
 8015044:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015046:	68bb      	ldr	r3, [r7, #8]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d130      	bne.n	80150ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801504c:	683b      	ldr	r3, [r7, #0]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d10a      	bne.n	8015068 <prvProcessTimerOrBlockTask+0x3c>
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	429a      	cmp	r2, r3
 8015058:	d806      	bhi.n	8015068 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801505a:	f7fe ff23 	bl	8013ea4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801505e:	68f9      	ldr	r1, [r7, #12]
 8015060:	6878      	ldr	r0, [r7, #4]
 8015062:	f7ff ff85 	bl	8014f70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015066:	e024      	b.n	80150b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d008      	beq.n	8015080 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801506e:	4b13      	ldr	r3, [pc, #76]	; (80150bc <prvProcessTimerOrBlockTask+0x90>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d101      	bne.n	801507c <prvProcessTimerOrBlockTask+0x50>
 8015078:	2301      	movs	r3, #1
 801507a:	e000      	b.n	801507e <prvProcessTimerOrBlockTask+0x52>
 801507c:	2300      	movs	r3, #0
 801507e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015080:	4b0f      	ldr	r3, [pc, #60]	; (80150c0 <prvProcessTimerOrBlockTask+0x94>)
 8015082:	6818      	ldr	r0, [r3, #0]
 8015084:	687a      	ldr	r2, [r7, #4]
 8015086:	68fb      	ldr	r3, [r7, #12]
 8015088:	1ad3      	subs	r3, r2, r3
 801508a:	683a      	ldr	r2, [r7, #0]
 801508c:	4619      	mov	r1, r3
 801508e:	f7fe fb93 	bl	80137b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015092:	f7fe ff07 	bl	8013ea4 <xTaskResumeAll>
 8015096:	4603      	mov	r3, r0
 8015098:	2b00      	cmp	r3, #0
 801509a:	d10a      	bne.n	80150b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801509c:	4b09      	ldr	r3, [pc, #36]	; (80150c4 <prvProcessTimerOrBlockTask+0x98>)
 801509e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150a2:	601a      	str	r2, [r3, #0]
 80150a4:	f3bf 8f4f 	dsb	sy
 80150a8:	f3bf 8f6f 	isb	sy
}
 80150ac:	e001      	b.n	80150b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80150ae:	f7fe fef9 	bl	8013ea4 <xTaskResumeAll>
}
 80150b2:	bf00      	nop
 80150b4:	3710      	adds	r7, #16
 80150b6:	46bd      	mov	sp, r7
 80150b8:	bd80      	pop	{r7, pc}
 80150ba:	bf00      	nop
 80150bc:	20001e48 	.word	0x20001e48
 80150c0:	20001e4c 	.word	0x20001e4c
 80150c4:	e000ed04 	.word	0xe000ed04

080150c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80150c8:	b480      	push	{r7}
 80150ca:	b085      	sub	sp, #20
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80150d0:	4b0e      	ldr	r3, [pc, #56]	; (801510c <prvGetNextExpireTime+0x44>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	d101      	bne.n	80150de <prvGetNextExpireTime+0x16>
 80150da:	2201      	movs	r2, #1
 80150dc:	e000      	b.n	80150e0 <prvGetNextExpireTime+0x18>
 80150de:	2200      	movs	r2, #0
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d105      	bne.n	80150f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80150ec:	4b07      	ldr	r3, [pc, #28]	; (801510c <prvGetNextExpireTime+0x44>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	68db      	ldr	r3, [r3, #12]
 80150f2:	681b      	ldr	r3, [r3, #0]
 80150f4:	60fb      	str	r3, [r7, #12]
 80150f6:	e001      	b.n	80150fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80150f8:	2300      	movs	r3, #0
 80150fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80150fc:	68fb      	ldr	r3, [r7, #12]
}
 80150fe:	4618      	mov	r0, r3
 8015100:	3714      	adds	r7, #20
 8015102:	46bd      	mov	sp, r7
 8015104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015108:	4770      	bx	lr
 801510a:	bf00      	nop
 801510c:	20001e44 	.word	0x20001e44

08015110 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b084      	sub	sp, #16
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015118:	f7fe ff62 	bl	8013fe0 <xTaskGetTickCount>
 801511c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801511e:	4b0b      	ldr	r3, [pc, #44]	; (801514c <prvSampleTimeNow+0x3c>)
 8015120:	681b      	ldr	r3, [r3, #0]
 8015122:	68fa      	ldr	r2, [r7, #12]
 8015124:	429a      	cmp	r2, r3
 8015126:	d205      	bcs.n	8015134 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015128:	f000 f936 	bl	8015398 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	2201      	movs	r2, #1
 8015130:	601a      	str	r2, [r3, #0]
 8015132:	e002      	b.n	801513a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2200      	movs	r2, #0
 8015138:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801513a:	4a04      	ldr	r2, [pc, #16]	; (801514c <prvSampleTimeNow+0x3c>)
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015140:	68fb      	ldr	r3, [r7, #12]
}
 8015142:	4618      	mov	r0, r3
 8015144:	3710      	adds	r7, #16
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop
 801514c:	20001e54 	.word	0x20001e54

08015150 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015150:	b580      	push	{r7, lr}
 8015152:	b086      	sub	sp, #24
 8015154:	af00      	add	r7, sp, #0
 8015156:	60f8      	str	r0, [r7, #12]
 8015158:	60b9      	str	r1, [r7, #8]
 801515a:	607a      	str	r2, [r7, #4]
 801515c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801515e:	2300      	movs	r3, #0
 8015160:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	68ba      	ldr	r2, [r7, #8]
 8015166:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	68fa      	ldr	r2, [r7, #12]
 801516c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801516e:	68ba      	ldr	r2, [r7, #8]
 8015170:	687b      	ldr	r3, [r7, #4]
 8015172:	429a      	cmp	r2, r3
 8015174:	d812      	bhi.n	801519c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	683b      	ldr	r3, [r7, #0]
 801517a:	1ad2      	subs	r2, r2, r3
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	699b      	ldr	r3, [r3, #24]
 8015180:	429a      	cmp	r2, r3
 8015182:	d302      	bcc.n	801518a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015184:	2301      	movs	r3, #1
 8015186:	617b      	str	r3, [r7, #20]
 8015188:	e01b      	b.n	80151c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801518a:	4b10      	ldr	r3, [pc, #64]	; (80151cc <prvInsertTimerInActiveList+0x7c>)
 801518c:	681a      	ldr	r2, [r3, #0]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	3304      	adds	r3, #4
 8015192:	4619      	mov	r1, r3
 8015194:	4610      	mov	r0, r2
 8015196:	f7fd fad2 	bl	801273e <vListInsert>
 801519a:	e012      	b.n	80151c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801519c:	687a      	ldr	r2, [r7, #4]
 801519e:	683b      	ldr	r3, [r7, #0]
 80151a0:	429a      	cmp	r2, r3
 80151a2:	d206      	bcs.n	80151b2 <prvInsertTimerInActiveList+0x62>
 80151a4:	68ba      	ldr	r2, [r7, #8]
 80151a6:	683b      	ldr	r3, [r7, #0]
 80151a8:	429a      	cmp	r2, r3
 80151aa:	d302      	bcc.n	80151b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80151ac:	2301      	movs	r3, #1
 80151ae:	617b      	str	r3, [r7, #20]
 80151b0:	e007      	b.n	80151c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80151b2:	4b07      	ldr	r3, [pc, #28]	; (80151d0 <prvInsertTimerInActiveList+0x80>)
 80151b4:	681a      	ldr	r2, [r3, #0]
 80151b6:	68fb      	ldr	r3, [r7, #12]
 80151b8:	3304      	adds	r3, #4
 80151ba:	4619      	mov	r1, r3
 80151bc:	4610      	mov	r0, r2
 80151be:	f7fd fabe 	bl	801273e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80151c2:	697b      	ldr	r3, [r7, #20]
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3718      	adds	r7, #24
 80151c8:	46bd      	mov	sp, r7
 80151ca:	bd80      	pop	{r7, pc}
 80151cc:	20001e48 	.word	0x20001e48
 80151d0:	20001e44 	.word	0x20001e44

080151d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b08e      	sub	sp, #56	; 0x38
 80151d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80151da:	e0ca      	b.n	8015372 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	da18      	bge.n	8015214 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80151e2:	1d3b      	adds	r3, r7, #4
 80151e4:	3304      	adds	r3, #4
 80151e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80151e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d10a      	bne.n	8015204 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80151ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151f2:	f383 8811 	msr	BASEPRI, r3
 80151f6:	f3bf 8f6f 	isb	sy
 80151fa:	f3bf 8f4f 	dsb	sy
 80151fe:	61fb      	str	r3, [r7, #28]
}
 8015200:	bf00      	nop
 8015202:	e7fe      	b.n	8015202 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801520a:	6850      	ldr	r0, [r2, #4]
 801520c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801520e:	6892      	ldr	r2, [r2, #8]
 8015210:	4611      	mov	r1, r2
 8015212:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2b00      	cmp	r3, #0
 8015218:	f2c0 80ab 	blt.w	8015372 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015222:	695b      	ldr	r3, [r3, #20]
 8015224:	2b00      	cmp	r3, #0
 8015226:	d004      	beq.n	8015232 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801522a:	3304      	adds	r3, #4
 801522c:	4618      	mov	r0, r3
 801522e:	f7fd fabf 	bl	80127b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015232:	463b      	mov	r3, r7
 8015234:	4618      	mov	r0, r3
 8015236:	f7ff ff6b 	bl	8015110 <prvSampleTimeNow>
 801523a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	2b09      	cmp	r3, #9
 8015240:	f200 8096 	bhi.w	8015370 <prvProcessReceivedCommands+0x19c>
 8015244:	a201      	add	r2, pc, #4	; (adr r2, 801524c <prvProcessReceivedCommands+0x78>)
 8015246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801524a:	bf00      	nop
 801524c:	08015275 	.word	0x08015275
 8015250:	08015275 	.word	0x08015275
 8015254:	08015275 	.word	0x08015275
 8015258:	080152e9 	.word	0x080152e9
 801525c:	080152fd 	.word	0x080152fd
 8015260:	08015347 	.word	0x08015347
 8015264:	08015275 	.word	0x08015275
 8015268:	08015275 	.word	0x08015275
 801526c:	080152e9 	.word	0x080152e9
 8015270:	080152fd 	.word	0x080152fd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801527a:	f043 0301 	orr.w	r3, r3, #1
 801527e:	b2da      	uxtb	r2, r3
 8015280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015282:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015286:	68ba      	ldr	r2, [r7, #8]
 8015288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801528a:	699b      	ldr	r3, [r3, #24]
 801528c:	18d1      	adds	r1, r2, r3
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015292:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015294:	f7ff ff5c 	bl	8015150 <prvInsertTimerInActiveList>
 8015298:	4603      	mov	r3, r0
 801529a:	2b00      	cmp	r3, #0
 801529c:	d069      	beq.n	8015372 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a0:	6a1b      	ldr	r3, [r3, #32]
 80152a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80152a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152ac:	f003 0304 	and.w	r3, r3, #4
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d05e      	beq.n	8015372 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80152b4:	68ba      	ldr	r2, [r7, #8]
 80152b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152b8:	699b      	ldr	r3, [r3, #24]
 80152ba:	441a      	add	r2, r3
 80152bc:	2300      	movs	r3, #0
 80152be:	9300      	str	r3, [sp, #0]
 80152c0:	2300      	movs	r3, #0
 80152c2:	2100      	movs	r1, #0
 80152c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80152c6:	f7ff fe05 	bl	8014ed4 <xTimerGenericCommand>
 80152ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80152cc:	6a3b      	ldr	r3, [r7, #32]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d14f      	bne.n	8015372 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80152d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152d6:	f383 8811 	msr	BASEPRI, r3
 80152da:	f3bf 8f6f 	isb	sy
 80152de:	f3bf 8f4f 	dsb	sy
 80152e2:	61bb      	str	r3, [r7, #24]
}
 80152e4:	bf00      	nop
 80152e6:	e7fe      	b.n	80152e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80152e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80152ee:	f023 0301 	bic.w	r3, r3, #1
 80152f2:	b2da      	uxtb	r2, r3
 80152f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80152fa:	e03a      	b.n	8015372 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80152fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80152fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015302:	f043 0301 	orr.w	r3, r3, #1
 8015306:	b2da      	uxtb	r2, r3
 8015308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801530a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801530e:	68ba      	ldr	r2, [r7, #8]
 8015310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015312:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015316:	699b      	ldr	r3, [r3, #24]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d10a      	bne.n	8015332 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801531c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015320:	f383 8811 	msr	BASEPRI, r3
 8015324:	f3bf 8f6f 	isb	sy
 8015328:	f3bf 8f4f 	dsb	sy
 801532c:	617b      	str	r3, [r7, #20]
}
 801532e:	bf00      	nop
 8015330:	e7fe      	b.n	8015330 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015334:	699a      	ldr	r2, [r3, #24]
 8015336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015338:	18d1      	adds	r1, r2, r3
 801533a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801533c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801533e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015340:	f7ff ff06 	bl	8015150 <prvInsertTimerInActiveList>
					break;
 8015344:	e015      	b.n	8015372 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801534c:	f003 0302 	and.w	r3, r3, #2
 8015350:	2b00      	cmp	r3, #0
 8015352:	d103      	bne.n	801535c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015356:	f000 fbdb 	bl	8015b10 <vPortFree>
 801535a:	e00a      	b.n	8015372 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801535c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801535e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015362:	f023 0301 	bic.w	r3, r3, #1
 8015366:	b2da      	uxtb	r2, r3
 8015368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801536e:	e000      	b.n	8015372 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8015370:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015372:	4b08      	ldr	r3, [pc, #32]	; (8015394 <prvProcessReceivedCommands+0x1c0>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	1d39      	adds	r1, r7, #4
 8015378:	2200      	movs	r2, #0
 801537a:	4618      	mov	r0, r3
 801537c:	f7fd fe10 	bl	8012fa0 <xQueueReceive>
 8015380:	4603      	mov	r3, r0
 8015382:	2b00      	cmp	r3, #0
 8015384:	f47f af2a 	bne.w	80151dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8015388:	bf00      	nop
 801538a:	bf00      	nop
 801538c:	3730      	adds	r7, #48	; 0x30
 801538e:	46bd      	mov	sp, r7
 8015390:	bd80      	pop	{r7, pc}
 8015392:	bf00      	nop
 8015394:	20001e4c 	.word	0x20001e4c

08015398 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b088      	sub	sp, #32
 801539c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801539e:	e048      	b.n	8015432 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80153a0:	4b2d      	ldr	r3, [pc, #180]	; (8015458 <prvSwitchTimerLists+0xc0>)
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	681b      	ldr	r3, [r3, #0]
 80153a8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80153aa:	4b2b      	ldr	r3, [pc, #172]	; (8015458 <prvSwitchTimerLists+0xc0>)
 80153ac:	681b      	ldr	r3, [r3, #0]
 80153ae:	68db      	ldr	r3, [r3, #12]
 80153b0:	68db      	ldr	r3, [r3, #12]
 80153b2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80153b4:	68fb      	ldr	r3, [r7, #12]
 80153b6:	3304      	adds	r3, #4
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7fd f9f9 	bl	80127b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80153be:	68fb      	ldr	r3, [r7, #12]
 80153c0:	6a1b      	ldr	r3, [r3, #32]
 80153c2:	68f8      	ldr	r0, [r7, #12]
 80153c4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80153c6:	68fb      	ldr	r3, [r7, #12]
 80153c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80153cc:	f003 0304 	and.w	r3, r3, #4
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d02e      	beq.n	8015432 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80153d4:	68fb      	ldr	r3, [r7, #12]
 80153d6:	699b      	ldr	r3, [r3, #24]
 80153d8:	693a      	ldr	r2, [r7, #16]
 80153da:	4413      	add	r3, r2
 80153dc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80153de:	68ba      	ldr	r2, [r7, #8]
 80153e0:	693b      	ldr	r3, [r7, #16]
 80153e2:	429a      	cmp	r2, r3
 80153e4:	d90e      	bls.n	8015404 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80153e6:	68fb      	ldr	r3, [r7, #12]
 80153e8:	68ba      	ldr	r2, [r7, #8]
 80153ea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	68fa      	ldr	r2, [r7, #12]
 80153f0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80153f2:	4b19      	ldr	r3, [pc, #100]	; (8015458 <prvSwitchTimerLists+0xc0>)
 80153f4:	681a      	ldr	r2, [r3, #0]
 80153f6:	68fb      	ldr	r3, [r7, #12]
 80153f8:	3304      	adds	r3, #4
 80153fa:	4619      	mov	r1, r3
 80153fc:	4610      	mov	r0, r2
 80153fe:	f7fd f99e 	bl	801273e <vListInsert>
 8015402:	e016      	b.n	8015432 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015404:	2300      	movs	r3, #0
 8015406:	9300      	str	r3, [sp, #0]
 8015408:	2300      	movs	r3, #0
 801540a:	693a      	ldr	r2, [r7, #16]
 801540c:	2100      	movs	r1, #0
 801540e:	68f8      	ldr	r0, [r7, #12]
 8015410:	f7ff fd60 	bl	8014ed4 <xTimerGenericCommand>
 8015414:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d10a      	bne.n	8015432 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801541c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015420:	f383 8811 	msr	BASEPRI, r3
 8015424:	f3bf 8f6f 	isb	sy
 8015428:	f3bf 8f4f 	dsb	sy
 801542c:	603b      	str	r3, [r7, #0]
}
 801542e:	bf00      	nop
 8015430:	e7fe      	b.n	8015430 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015432:	4b09      	ldr	r3, [pc, #36]	; (8015458 <prvSwitchTimerLists+0xc0>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	2b00      	cmp	r3, #0
 801543a:	d1b1      	bne.n	80153a0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801543c:	4b06      	ldr	r3, [pc, #24]	; (8015458 <prvSwitchTimerLists+0xc0>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015442:	4b06      	ldr	r3, [pc, #24]	; (801545c <prvSwitchTimerLists+0xc4>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	4a04      	ldr	r2, [pc, #16]	; (8015458 <prvSwitchTimerLists+0xc0>)
 8015448:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801544a:	4a04      	ldr	r2, [pc, #16]	; (801545c <prvSwitchTimerLists+0xc4>)
 801544c:	697b      	ldr	r3, [r7, #20]
 801544e:	6013      	str	r3, [r2, #0]
}
 8015450:	bf00      	nop
 8015452:	3718      	adds	r7, #24
 8015454:	46bd      	mov	sp, r7
 8015456:	bd80      	pop	{r7, pc}
 8015458:	20001e44 	.word	0x20001e44
 801545c:	20001e48 	.word	0x20001e48

08015460 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b082      	sub	sp, #8
 8015464:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015466:	f000 f965 	bl	8015734 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801546a:	4b15      	ldr	r3, [pc, #84]	; (80154c0 <prvCheckForValidListAndQueue+0x60>)
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d120      	bne.n	80154b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015472:	4814      	ldr	r0, [pc, #80]	; (80154c4 <prvCheckForValidListAndQueue+0x64>)
 8015474:	f7fd f912 	bl	801269c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015478:	4813      	ldr	r0, [pc, #76]	; (80154c8 <prvCheckForValidListAndQueue+0x68>)
 801547a:	f7fd f90f 	bl	801269c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801547e:	4b13      	ldr	r3, [pc, #76]	; (80154cc <prvCheckForValidListAndQueue+0x6c>)
 8015480:	4a10      	ldr	r2, [pc, #64]	; (80154c4 <prvCheckForValidListAndQueue+0x64>)
 8015482:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015484:	4b12      	ldr	r3, [pc, #72]	; (80154d0 <prvCheckForValidListAndQueue+0x70>)
 8015486:	4a10      	ldr	r2, [pc, #64]	; (80154c8 <prvCheckForValidListAndQueue+0x68>)
 8015488:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801548a:	2300      	movs	r3, #0
 801548c:	9300      	str	r3, [sp, #0]
 801548e:	4b11      	ldr	r3, [pc, #68]	; (80154d4 <prvCheckForValidListAndQueue+0x74>)
 8015490:	4a11      	ldr	r2, [pc, #68]	; (80154d8 <prvCheckForValidListAndQueue+0x78>)
 8015492:	2110      	movs	r1, #16
 8015494:	200a      	movs	r0, #10
 8015496:	f7fd fa1d 	bl	80128d4 <xQueueGenericCreateStatic>
 801549a:	4603      	mov	r3, r0
 801549c:	4a08      	ldr	r2, [pc, #32]	; (80154c0 <prvCheckForValidListAndQueue+0x60>)
 801549e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80154a0:	4b07      	ldr	r3, [pc, #28]	; (80154c0 <prvCheckForValidListAndQueue+0x60>)
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d005      	beq.n	80154b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80154a8:	4b05      	ldr	r3, [pc, #20]	; (80154c0 <prvCheckForValidListAndQueue+0x60>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	490b      	ldr	r1, [pc, #44]	; (80154dc <prvCheckForValidListAndQueue+0x7c>)
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7fe f92e 	bl	8013710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80154b4:	f000 f96e 	bl	8015794 <vPortExitCritical>
}
 80154b8:	bf00      	nop
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}
 80154be:	bf00      	nop
 80154c0:	20001e4c 	.word	0x20001e4c
 80154c4:	20001e1c 	.word	0x20001e1c
 80154c8:	20001e30 	.word	0x20001e30
 80154cc:	20001e44 	.word	0x20001e44
 80154d0:	20001e48 	.word	0x20001e48
 80154d4:	20001ef8 	.word	0x20001ef8
 80154d8:	20001e58 	.word	0x20001e58
 80154dc:	0801b398 	.word	0x0801b398

080154e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80154e0:	b480      	push	{r7}
 80154e2:	b085      	sub	sp, #20
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	60f8      	str	r0, [r7, #12]
 80154e8:	60b9      	str	r1, [r7, #8]
 80154ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	3b04      	subs	r3, #4
 80154f0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80154f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	3b04      	subs	r3, #4
 80154fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015500:	68bb      	ldr	r3, [r7, #8]
 8015502:	f023 0201 	bic.w	r2, r3, #1
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	3b04      	subs	r3, #4
 801550e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015510:	4a0c      	ldr	r2, [pc, #48]	; (8015544 <pxPortInitialiseStack+0x64>)
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	3b14      	subs	r3, #20
 801551a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801551c:	687a      	ldr	r2, [r7, #4]
 801551e:	68fb      	ldr	r3, [r7, #12]
 8015520:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	3b04      	subs	r3, #4
 8015526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f06f 0202 	mvn.w	r2, #2
 801552e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015530:	68fb      	ldr	r3, [r7, #12]
 8015532:	3b20      	subs	r3, #32
 8015534:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015536:	68fb      	ldr	r3, [r7, #12]
}
 8015538:	4618      	mov	r0, r3
 801553a:	3714      	adds	r7, #20
 801553c:	46bd      	mov	sp, r7
 801553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015542:	4770      	bx	lr
 8015544:	08015549 	.word	0x08015549

08015548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015548:	b480      	push	{r7}
 801554a:	b085      	sub	sp, #20
 801554c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801554e:	2300      	movs	r3, #0
 8015550:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015552:	4b12      	ldr	r3, [pc, #72]	; (801559c <prvTaskExitError+0x54>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801555a:	d00a      	beq.n	8015572 <prvTaskExitError+0x2a>
	__asm volatile
 801555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015560:	f383 8811 	msr	BASEPRI, r3
 8015564:	f3bf 8f6f 	isb	sy
 8015568:	f3bf 8f4f 	dsb	sy
 801556c:	60fb      	str	r3, [r7, #12]
}
 801556e:	bf00      	nop
 8015570:	e7fe      	b.n	8015570 <prvTaskExitError+0x28>
	__asm volatile
 8015572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015576:	f383 8811 	msr	BASEPRI, r3
 801557a:	f3bf 8f6f 	isb	sy
 801557e:	f3bf 8f4f 	dsb	sy
 8015582:	60bb      	str	r3, [r7, #8]
}
 8015584:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015586:	bf00      	nop
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	2b00      	cmp	r3, #0
 801558c:	d0fc      	beq.n	8015588 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801558e:	bf00      	nop
 8015590:	bf00      	nop
 8015592:	3714      	adds	r7, #20
 8015594:	46bd      	mov	sp, r7
 8015596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801559a:	4770      	bx	lr
 801559c:	20000020 	.word	0x20000020

080155a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80155a0:	4b07      	ldr	r3, [pc, #28]	; (80155c0 <pxCurrentTCBConst2>)
 80155a2:	6819      	ldr	r1, [r3, #0]
 80155a4:	6808      	ldr	r0, [r1, #0]
 80155a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80155aa:	f380 8809 	msr	PSP, r0
 80155ae:	f3bf 8f6f 	isb	sy
 80155b2:	f04f 0000 	mov.w	r0, #0
 80155b6:	f380 8811 	msr	BASEPRI, r0
 80155ba:	4770      	bx	lr
 80155bc:	f3af 8000 	nop.w

080155c0 <pxCurrentTCBConst2>:
 80155c0:	2000191c 	.word	0x2000191c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80155c4:	bf00      	nop
 80155c6:	bf00      	nop

080155c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80155c8:	4808      	ldr	r0, [pc, #32]	; (80155ec <prvPortStartFirstTask+0x24>)
 80155ca:	6800      	ldr	r0, [r0, #0]
 80155cc:	6800      	ldr	r0, [r0, #0]
 80155ce:	f380 8808 	msr	MSP, r0
 80155d2:	f04f 0000 	mov.w	r0, #0
 80155d6:	f380 8814 	msr	CONTROL, r0
 80155da:	b662      	cpsie	i
 80155dc:	b661      	cpsie	f
 80155de:	f3bf 8f4f 	dsb	sy
 80155e2:	f3bf 8f6f 	isb	sy
 80155e6:	df00      	svc	0
 80155e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80155ea:	bf00      	nop
 80155ec:	e000ed08 	.word	0xe000ed08

080155f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80155f0:	b580      	push	{r7, lr}
 80155f2:	b086      	sub	sp, #24
 80155f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80155f6:	4b46      	ldr	r3, [pc, #280]	; (8015710 <xPortStartScheduler+0x120>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	4a46      	ldr	r2, [pc, #280]	; (8015714 <xPortStartScheduler+0x124>)
 80155fc:	4293      	cmp	r3, r2
 80155fe:	d10a      	bne.n	8015616 <xPortStartScheduler+0x26>
	__asm volatile
 8015600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015604:	f383 8811 	msr	BASEPRI, r3
 8015608:	f3bf 8f6f 	isb	sy
 801560c:	f3bf 8f4f 	dsb	sy
 8015610:	613b      	str	r3, [r7, #16]
}
 8015612:	bf00      	nop
 8015614:	e7fe      	b.n	8015614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015616:	4b3e      	ldr	r3, [pc, #248]	; (8015710 <xPortStartScheduler+0x120>)
 8015618:	681b      	ldr	r3, [r3, #0]
 801561a:	4a3f      	ldr	r2, [pc, #252]	; (8015718 <xPortStartScheduler+0x128>)
 801561c:	4293      	cmp	r3, r2
 801561e:	d10a      	bne.n	8015636 <xPortStartScheduler+0x46>
	__asm volatile
 8015620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015624:	f383 8811 	msr	BASEPRI, r3
 8015628:	f3bf 8f6f 	isb	sy
 801562c:	f3bf 8f4f 	dsb	sy
 8015630:	60fb      	str	r3, [r7, #12]
}
 8015632:	bf00      	nop
 8015634:	e7fe      	b.n	8015634 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015636:	4b39      	ldr	r3, [pc, #228]	; (801571c <xPortStartScheduler+0x12c>)
 8015638:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	b2db      	uxtb	r3, r3
 8015640:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	22ff      	movs	r2, #255	; 0xff
 8015646:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	b2db      	uxtb	r3, r3
 801564e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015650:	78fb      	ldrb	r3, [r7, #3]
 8015652:	b2db      	uxtb	r3, r3
 8015654:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015658:	b2da      	uxtb	r2, r3
 801565a:	4b31      	ldr	r3, [pc, #196]	; (8015720 <xPortStartScheduler+0x130>)
 801565c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801565e:	4b31      	ldr	r3, [pc, #196]	; (8015724 <xPortStartScheduler+0x134>)
 8015660:	2207      	movs	r2, #7
 8015662:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015664:	e009      	b.n	801567a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015666:	4b2f      	ldr	r3, [pc, #188]	; (8015724 <xPortStartScheduler+0x134>)
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	3b01      	subs	r3, #1
 801566c:	4a2d      	ldr	r2, [pc, #180]	; (8015724 <xPortStartScheduler+0x134>)
 801566e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015670:	78fb      	ldrb	r3, [r7, #3]
 8015672:	b2db      	uxtb	r3, r3
 8015674:	005b      	lsls	r3, r3, #1
 8015676:	b2db      	uxtb	r3, r3
 8015678:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801567a:	78fb      	ldrb	r3, [r7, #3]
 801567c:	b2db      	uxtb	r3, r3
 801567e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015682:	2b80      	cmp	r3, #128	; 0x80
 8015684:	d0ef      	beq.n	8015666 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015686:	4b27      	ldr	r3, [pc, #156]	; (8015724 <xPortStartScheduler+0x134>)
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	f1c3 0307 	rsb	r3, r3, #7
 801568e:	2b04      	cmp	r3, #4
 8015690:	d00a      	beq.n	80156a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015696:	f383 8811 	msr	BASEPRI, r3
 801569a:	f3bf 8f6f 	isb	sy
 801569e:	f3bf 8f4f 	dsb	sy
 80156a2:	60bb      	str	r3, [r7, #8]
}
 80156a4:	bf00      	nop
 80156a6:	e7fe      	b.n	80156a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80156a8:	4b1e      	ldr	r3, [pc, #120]	; (8015724 <xPortStartScheduler+0x134>)
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	021b      	lsls	r3, r3, #8
 80156ae:	4a1d      	ldr	r2, [pc, #116]	; (8015724 <xPortStartScheduler+0x134>)
 80156b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80156b2:	4b1c      	ldr	r3, [pc, #112]	; (8015724 <xPortStartScheduler+0x134>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80156ba:	4a1a      	ldr	r2, [pc, #104]	; (8015724 <xPortStartScheduler+0x134>)
 80156bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	b2da      	uxtb	r2, r3
 80156c2:	697b      	ldr	r3, [r7, #20]
 80156c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80156c6:	4b18      	ldr	r3, [pc, #96]	; (8015728 <xPortStartScheduler+0x138>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	4a17      	ldr	r2, [pc, #92]	; (8015728 <xPortStartScheduler+0x138>)
 80156cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80156d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80156d2:	4b15      	ldr	r3, [pc, #84]	; (8015728 <xPortStartScheduler+0x138>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	4a14      	ldr	r2, [pc, #80]	; (8015728 <xPortStartScheduler+0x138>)
 80156d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80156dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80156de:	f000 f8dd 	bl	801589c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80156e2:	4b12      	ldr	r3, [pc, #72]	; (801572c <xPortStartScheduler+0x13c>)
 80156e4:	2200      	movs	r2, #0
 80156e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80156e8:	f000 f8fc 	bl	80158e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80156ec:	4b10      	ldr	r3, [pc, #64]	; (8015730 <xPortStartScheduler+0x140>)
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	4a0f      	ldr	r2, [pc, #60]	; (8015730 <xPortStartScheduler+0x140>)
 80156f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80156f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80156f8:	f7ff ff66 	bl	80155c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80156fc:	f7fe fd4c 	bl	8014198 <vTaskSwitchContext>
	prvTaskExitError();
 8015700:	f7ff ff22 	bl	8015548 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015704:	2300      	movs	r3, #0
}
 8015706:	4618      	mov	r0, r3
 8015708:	3718      	adds	r7, #24
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	e000ed00 	.word	0xe000ed00
 8015714:	410fc271 	.word	0x410fc271
 8015718:	410fc270 	.word	0x410fc270
 801571c:	e000e400 	.word	0xe000e400
 8015720:	20001f48 	.word	0x20001f48
 8015724:	20001f4c 	.word	0x20001f4c
 8015728:	e000ed20 	.word	0xe000ed20
 801572c:	20000020 	.word	0x20000020
 8015730:	e000ef34 	.word	0xe000ef34

08015734 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015734:	b480      	push	{r7}
 8015736:	b083      	sub	sp, #12
 8015738:	af00      	add	r7, sp, #0
	__asm volatile
 801573a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801573e:	f383 8811 	msr	BASEPRI, r3
 8015742:	f3bf 8f6f 	isb	sy
 8015746:	f3bf 8f4f 	dsb	sy
 801574a:	607b      	str	r3, [r7, #4]
}
 801574c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801574e:	4b0f      	ldr	r3, [pc, #60]	; (801578c <vPortEnterCritical+0x58>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	3301      	adds	r3, #1
 8015754:	4a0d      	ldr	r2, [pc, #52]	; (801578c <vPortEnterCritical+0x58>)
 8015756:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015758:	4b0c      	ldr	r3, [pc, #48]	; (801578c <vPortEnterCritical+0x58>)
 801575a:	681b      	ldr	r3, [r3, #0]
 801575c:	2b01      	cmp	r3, #1
 801575e:	d10f      	bne.n	8015780 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015760:	4b0b      	ldr	r3, [pc, #44]	; (8015790 <vPortEnterCritical+0x5c>)
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	b2db      	uxtb	r3, r3
 8015766:	2b00      	cmp	r3, #0
 8015768:	d00a      	beq.n	8015780 <vPortEnterCritical+0x4c>
	__asm volatile
 801576a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801576e:	f383 8811 	msr	BASEPRI, r3
 8015772:	f3bf 8f6f 	isb	sy
 8015776:	f3bf 8f4f 	dsb	sy
 801577a:	603b      	str	r3, [r7, #0]
}
 801577c:	bf00      	nop
 801577e:	e7fe      	b.n	801577e <vPortEnterCritical+0x4a>
	}
}
 8015780:	bf00      	nop
 8015782:	370c      	adds	r7, #12
 8015784:	46bd      	mov	sp, r7
 8015786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801578a:	4770      	bx	lr
 801578c:	20000020 	.word	0x20000020
 8015790:	e000ed04 	.word	0xe000ed04

08015794 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015794:	b480      	push	{r7}
 8015796:	b083      	sub	sp, #12
 8015798:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801579a:	4b12      	ldr	r3, [pc, #72]	; (80157e4 <vPortExitCritical+0x50>)
 801579c:	681b      	ldr	r3, [r3, #0]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d10a      	bne.n	80157b8 <vPortExitCritical+0x24>
	__asm volatile
 80157a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157a6:	f383 8811 	msr	BASEPRI, r3
 80157aa:	f3bf 8f6f 	isb	sy
 80157ae:	f3bf 8f4f 	dsb	sy
 80157b2:	607b      	str	r3, [r7, #4]
}
 80157b4:	bf00      	nop
 80157b6:	e7fe      	b.n	80157b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80157b8:	4b0a      	ldr	r3, [pc, #40]	; (80157e4 <vPortExitCritical+0x50>)
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	3b01      	subs	r3, #1
 80157be:	4a09      	ldr	r2, [pc, #36]	; (80157e4 <vPortExitCritical+0x50>)
 80157c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80157c2:	4b08      	ldr	r3, [pc, #32]	; (80157e4 <vPortExitCritical+0x50>)
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d105      	bne.n	80157d6 <vPortExitCritical+0x42>
 80157ca:	2300      	movs	r3, #0
 80157cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	f383 8811 	msr	BASEPRI, r3
}
 80157d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80157d6:	bf00      	nop
 80157d8:	370c      	adds	r7, #12
 80157da:	46bd      	mov	sp, r7
 80157dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e0:	4770      	bx	lr
 80157e2:	bf00      	nop
 80157e4:	20000020 	.word	0x20000020
	...

080157f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80157f0:	f3ef 8009 	mrs	r0, PSP
 80157f4:	f3bf 8f6f 	isb	sy
 80157f8:	4b15      	ldr	r3, [pc, #84]	; (8015850 <pxCurrentTCBConst>)
 80157fa:	681a      	ldr	r2, [r3, #0]
 80157fc:	f01e 0f10 	tst.w	lr, #16
 8015800:	bf08      	it	eq
 8015802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801580a:	6010      	str	r0, [r2, #0]
 801580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015810:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015814:	f380 8811 	msr	BASEPRI, r0
 8015818:	f3bf 8f4f 	dsb	sy
 801581c:	f3bf 8f6f 	isb	sy
 8015820:	f7fe fcba 	bl	8014198 <vTaskSwitchContext>
 8015824:	f04f 0000 	mov.w	r0, #0
 8015828:	f380 8811 	msr	BASEPRI, r0
 801582c:	bc09      	pop	{r0, r3}
 801582e:	6819      	ldr	r1, [r3, #0]
 8015830:	6808      	ldr	r0, [r1, #0]
 8015832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015836:	f01e 0f10 	tst.w	lr, #16
 801583a:	bf08      	it	eq
 801583c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015840:	f380 8809 	msr	PSP, r0
 8015844:	f3bf 8f6f 	isb	sy
 8015848:	4770      	bx	lr
 801584a:	bf00      	nop
 801584c:	f3af 8000 	nop.w

08015850 <pxCurrentTCBConst>:
 8015850:	2000191c 	.word	0x2000191c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015854:	bf00      	nop
 8015856:	bf00      	nop

08015858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b082      	sub	sp, #8
 801585c:	af00      	add	r7, sp, #0
	__asm volatile
 801585e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015862:	f383 8811 	msr	BASEPRI, r3
 8015866:	f3bf 8f6f 	isb	sy
 801586a:	f3bf 8f4f 	dsb	sy
 801586e:	607b      	str	r3, [r7, #4]
}
 8015870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015872:	f7fe fbd7 	bl	8014024 <xTaskIncrementTick>
 8015876:	4603      	mov	r3, r0
 8015878:	2b00      	cmp	r3, #0
 801587a:	d003      	beq.n	8015884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801587c:	4b06      	ldr	r3, [pc, #24]	; (8015898 <xPortSysTickHandler+0x40>)
 801587e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015882:	601a      	str	r2, [r3, #0]
 8015884:	2300      	movs	r3, #0
 8015886:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015888:	683b      	ldr	r3, [r7, #0]
 801588a:	f383 8811 	msr	BASEPRI, r3
}
 801588e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015890:	bf00      	nop
 8015892:	3708      	adds	r7, #8
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}
 8015898:	e000ed04 	.word	0xe000ed04

0801589c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801589c:	b480      	push	{r7}
 801589e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80158a0:	4b0b      	ldr	r3, [pc, #44]	; (80158d0 <vPortSetupTimerInterrupt+0x34>)
 80158a2:	2200      	movs	r2, #0
 80158a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80158a6:	4b0b      	ldr	r3, [pc, #44]	; (80158d4 <vPortSetupTimerInterrupt+0x38>)
 80158a8:	2200      	movs	r2, #0
 80158aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80158ac:	4b0a      	ldr	r3, [pc, #40]	; (80158d8 <vPortSetupTimerInterrupt+0x3c>)
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	4a0a      	ldr	r2, [pc, #40]	; (80158dc <vPortSetupTimerInterrupt+0x40>)
 80158b2:	fba2 2303 	umull	r2, r3, r2, r3
 80158b6:	099b      	lsrs	r3, r3, #6
 80158b8:	4a09      	ldr	r2, [pc, #36]	; (80158e0 <vPortSetupTimerInterrupt+0x44>)
 80158ba:	3b01      	subs	r3, #1
 80158bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80158be:	4b04      	ldr	r3, [pc, #16]	; (80158d0 <vPortSetupTimerInterrupt+0x34>)
 80158c0:	2207      	movs	r2, #7
 80158c2:	601a      	str	r2, [r3, #0]
}
 80158c4:	bf00      	nop
 80158c6:	46bd      	mov	sp, r7
 80158c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158cc:	4770      	bx	lr
 80158ce:	bf00      	nop
 80158d0:	e000e010 	.word	0xe000e010
 80158d4:	e000e018 	.word	0xe000e018
 80158d8:	2000000c 	.word	0x2000000c
 80158dc:	10624dd3 	.word	0x10624dd3
 80158e0:	e000e014 	.word	0xe000e014

080158e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80158e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80158f4 <vPortEnableVFP+0x10>
 80158e8:	6801      	ldr	r1, [r0, #0]
 80158ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80158ee:	6001      	str	r1, [r0, #0]
 80158f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80158f2:	bf00      	nop
 80158f4:	e000ed88 	.word	0xe000ed88

080158f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80158f8:	b480      	push	{r7}
 80158fa:	b085      	sub	sp, #20
 80158fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80158fe:	f3ef 8305 	mrs	r3, IPSR
 8015902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	2b0f      	cmp	r3, #15
 8015908:	d914      	bls.n	8015934 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801590a:	4a17      	ldr	r2, [pc, #92]	; (8015968 <vPortValidateInterruptPriority+0x70>)
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	4413      	add	r3, r2
 8015910:	781b      	ldrb	r3, [r3, #0]
 8015912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015914:	4b15      	ldr	r3, [pc, #84]	; (801596c <vPortValidateInterruptPriority+0x74>)
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	7afa      	ldrb	r2, [r7, #11]
 801591a:	429a      	cmp	r2, r3
 801591c:	d20a      	bcs.n	8015934 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015922:	f383 8811 	msr	BASEPRI, r3
 8015926:	f3bf 8f6f 	isb	sy
 801592a:	f3bf 8f4f 	dsb	sy
 801592e:	607b      	str	r3, [r7, #4]
}
 8015930:	bf00      	nop
 8015932:	e7fe      	b.n	8015932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015934:	4b0e      	ldr	r3, [pc, #56]	; (8015970 <vPortValidateInterruptPriority+0x78>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801593c:	4b0d      	ldr	r3, [pc, #52]	; (8015974 <vPortValidateInterruptPriority+0x7c>)
 801593e:	681b      	ldr	r3, [r3, #0]
 8015940:	429a      	cmp	r2, r3
 8015942:	d90a      	bls.n	801595a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015948:	f383 8811 	msr	BASEPRI, r3
 801594c:	f3bf 8f6f 	isb	sy
 8015950:	f3bf 8f4f 	dsb	sy
 8015954:	603b      	str	r3, [r7, #0]
}
 8015956:	bf00      	nop
 8015958:	e7fe      	b.n	8015958 <vPortValidateInterruptPriority+0x60>
	}
 801595a:	bf00      	nop
 801595c:	3714      	adds	r7, #20
 801595e:	46bd      	mov	sp, r7
 8015960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015964:	4770      	bx	lr
 8015966:	bf00      	nop
 8015968:	e000e3f0 	.word	0xe000e3f0
 801596c:	20001f48 	.word	0x20001f48
 8015970:	e000ed0c 	.word	0xe000ed0c
 8015974:	20001f4c 	.word	0x20001f4c

08015978 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b08a      	sub	sp, #40	; 0x28
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015980:	2300      	movs	r3, #0
 8015982:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015984:	f7fe fa80 	bl	8013e88 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015988:	4b5b      	ldr	r3, [pc, #364]	; (8015af8 <pvPortMalloc+0x180>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d101      	bne.n	8015994 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015990:	f000 f920 	bl	8015bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015994:	4b59      	ldr	r3, [pc, #356]	; (8015afc <pvPortMalloc+0x184>)
 8015996:	681a      	ldr	r2, [r3, #0]
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	4013      	ands	r3, r2
 801599c:	2b00      	cmp	r3, #0
 801599e:	f040 8093 	bne.w	8015ac8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d01d      	beq.n	80159e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80159a8:	2208      	movs	r2, #8
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	4413      	add	r3, r2
 80159ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	f003 0307 	and.w	r3, r3, #7
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d014      	beq.n	80159e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	f023 0307 	bic.w	r3, r3, #7
 80159c0:	3308      	adds	r3, #8
 80159c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80159c4:	687b      	ldr	r3, [r7, #4]
 80159c6:	f003 0307 	and.w	r3, r3, #7
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d00a      	beq.n	80159e4 <pvPortMalloc+0x6c>
	__asm volatile
 80159ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80159d2:	f383 8811 	msr	BASEPRI, r3
 80159d6:	f3bf 8f6f 	isb	sy
 80159da:	f3bf 8f4f 	dsb	sy
 80159de:	617b      	str	r3, [r7, #20]
}
 80159e0:	bf00      	nop
 80159e2:	e7fe      	b.n	80159e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d06e      	beq.n	8015ac8 <pvPortMalloc+0x150>
 80159ea:	4b45      	ldr	r3, [pc, #276]	; (8015b00 <pvPortMalloc+0x188>)
 80159ec:	681b      	ldr	r3, [r3, #0]
 80159ee:	687a      	ldr	r2, [r7, #4]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d869      	bhi.n	8015ac8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80159f4:	4b43      	ldr	r3, [pc, #268]	; (8015b04 <pvPortMalloc+0x18c>)
 80159f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80159f8:	4b42      	ldr	r3, [pc, #264]	; (8015b04 <pvPortMalloc+0x18c>)
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80159fe:	e004      	b.n	8015a0a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a02:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0c:	685b      	ldr	r3, [r3, #4]
 8015a0e:	687a      	ldr	r2, [r7, #4]
 8015a10:	429a      	cmp	r2, r3
 8015a12:	d903      	bls.n	8015a1c <pvPortMalloc+0xa4>
 8015a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	d1f1      	bne.n	8015a00 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015a1c:	4b36      	ldr	r3, [pc, #216]	; (8015af8 <pvPortMalloc+0x180>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d050      	beq.n	8015ac8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015a26:	6a3b      	ldr	r3, [r7, #32]
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	2208      	movs	r2, #8
 8015a2c:	4413      	add	r3, r2
 8015a2e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a32:	681a      	ldr	r2, [r3, #0]
 8015a34:	6a3b      	ldr	r3, [r7, #32]
 8015a36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a3a:	685a      	ldr	r2, [r3, #4]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	1ad2      	subs	r2, r2, r3
 8015a40:	2308      	movs	r3, #8
 8015a42:	005b      	lsls	r3, r3, #1
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d91f      	bls.n	8015a88 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a4a:	687b      	ldr	r3, [r7, #4]
 8015a4c:	4413      	add	r3, r2
 8015a4e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015a50:	69bb      	ldr	r3, [r7, #24]
 8015a52:	f003 0307 	and.w	r3, r3, #7
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d00a      	beq.n	8015a70 <pvPortMalloc+0xf8>
	__asm volatile
 8015a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a5e:	f383 8811 	msr	BASEPRI, r3
 8015a62:	f3bf 8f6f 	isb	sy
 8015a66:	f3bf 8f4f 	dsb	sy
 8015a6a:	613b      	str	r3, [r7, #16]
}
 8015a6c:	bf00      	nop
 8015a6e:	e7fe      	b.n	8015a6e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a72:	685a      	ldr	r2, [r3, #4]
 8015a74:	687b      	ldr	r3, [r7, #4]
 8015a76:	1ad2      	subs	r2, r2, r3
 8015a78:	69bb      	ldr	r3, [r7, #24]
 8015a7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015a82:	69b8      	ldr	r0, [r7, #24]
 8015a84:	f000 f908 	bl	8015c98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015a88:	4b1d      	ldr	r3, [pc, #116]	; (8015b00 <pvPortMalloc+0x188>)
 8015a8a:	681a      	ldr	r2, [r3, #0]
 8015a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a8e:	685b      	ldr	r3, [r3, #4]
 8015a90:	1ad3      	subs	r3, r2, r3
 8015a92:	4a1b      	ldr	r2, [pc, #108]	; (8015b00 <pvPortMalloc+0x188>)
 8015a94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015a96:	4b1a      	ldr	r3, [pc, #104]	; (8015b00 <pvPortMalloc+0x188>)
 8015a98:	681a      	ldr	r2, [r3, #0]
 8015a9a:	4b1b      	ldr	r3, [pc, #108]	; (8015b08 <pvPortMalloc+0x190>)
 8015a9c:	681b      	ldr	r3, [r3, #0]
 8015a9e:	429a      	cmp	r2, r3
 8015aa0:	d203      	bcs.n	8015aaa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015aa2:	4b17      	ldr	r3, [pc, #92]	; (8015b00 <pvPortMalloc+0x188>)
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	4a18      	ldr	r2, [pc, #96]	; (8015b08 <pvPortMalloc+0x190>)
 8015aa8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aac:	685a      	ldr	r2, [r3, #4]
 8015aae:	4b13      	ldr	r3, [pc, #76]	; (8015afc <pvPortMalloc+0x184>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	431a      	orrs	r2, r3
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aba:	2200      	movs	r2, #0
 8015abc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015abe:	4b13      	ldr	r3, [pc, #76]	; (8015b0c <pvPortMalloc+0x194>)
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	3301      	adds	r3, #1
 8015ac4:	4a11      	ldr	r2, [pc, #68]	; (8015b0c <pvPortMalloc+0x194>)
 8015ac6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015ac8:	f7fe f9ec 	bl	8013ea4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	f003 0307 	and.w	r3, r3, #7
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	d00a      	beq.n	8015aec <pvPortMalloc+0x174>
	__asm volatile
 8015ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ada:	f383 8811 	msr	BASEPRI, r3
 8015ade:	f3bf 8f6f 	isb	sy
 8015ae2:	f3bf 8f4f 	dsb	sy
 8015ae6:	60fb      	str	r3, [r7, #12]
}
 8015ae8:	bf00      	nop
 8015aea:	e7fe      	b.n	8015aea <pvPortMalloc+0x172>
	return pvReturn;
 8015aec:	69fb      	ldr	r3, [r7, #28]
}
 8015aee:	4618      	mov	r0, r3
 8015af0:	3728      	adds	r7, #40	; 0x28
 8015af2:	46bd      	mov	sp, r7
 8015af4:	bd80      	pop	{r7, pc}
 8015af6:	bf00      	nop
 8015af8:	20009f58 	.word	0x20009f58
 8015afc:	20009f6c 	.word	0x20009f6c
 8015b00:	20009f5c 	.word	0x20009f5c
 8015b04:	20009f50 	.word	0x20009f50
 8015b08:	20009f60 	.word	0x20009f60
 8015b0c:	20009f64 	.word	0x20009f64

08015b10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015b10:	b580      	push	{r7, lr}
 8015b12:	b086      	sub	sp, #24
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d04d      	beq.n	8015bbe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015b22:	2308      	movs	r3, #8
 8015b24:	425b      	negs	r3, r3
 8015b26:	697a      	ldr	r2, [r7, #20]
 8015b28:	4413      	add	r3, r2
 8015b2a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015b2c:	697b      	ldr	r3, [r7, #20]
 8015b2e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015b30:	693b      	ldr	r3, [r7, #16]
 8015b32:	685a      	ldr	r2, [r3, #4]
 8015b34:	4b24      	ldr	r3, [pc, #144]	; (8015bc8 <vPortFree+0xb8>)
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	4013      	ands	r3, r2
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d10a      	bne.n	8015b54 <vPortFree+0x44>
	__asm volatile
 8015b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b42:	f383 8811 	msr	BASEPRI, r3
 8015b46:	f3bf 8f6f 	isb	sy
 8015b4a:	f3bf 8f4f 	dsb	sy
 8015b4e:	60fb      	str	r3, [r7, #12]
}
 8015b50:	bf00      	nop
 8015b52:	e7fe      	b.n	8015b52 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015b54:	693b      	ldr	r3, [r7, #16]
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d00a      	beq.n	8015b72 <vPortFree+0x62>
	__asm volatile
 8015b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b60:	f383 8811 	msr	BASEPRI, r3
 8015b64:	f3bf 8f6f 	isb	sy
 8015b68:	f3bf 8f4f 	dsb	sy
 8015b6c:	60bb      	str	r3, [r7, #8]
}
 8015b6e:	bf00      	nop
 8015b70:	e7fe      	b.n	8015b70 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015b72:	693b      	ldr	r3, [r7, #16]
 8015b74:	685a      	ldr	r2, [r3, #4]
 8015b76:	4b14      	ldr	r3, [pc, #80]	; (8015bc8 <vPortFree+0xb8>)
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	4013      	ands	r3, r2
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d01e      	beq.n	8015bbe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015b80:	693b      	ldr	r3, [r7, #16]
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d11a      	bne.n	8015bbe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015b88:	693b      	ldr	r3, [r7, #16]
 8015b8a:	685a      	ldr	r2, [r3, #4]
 8015b8c:	4b0e      	ldr	r3, [pc, #56]	; (8015bc8 <vPortFree+0xb8>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	43db      	mvns	r3, r3
 8015b92:	401a      	ands	r2, r3
 8015b94:	693b      	ldr	r3, [r7, #16]
 8015b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015b98:	f7fe f976 	bl	8013e88 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015b9c:	693b      	ldr	r3, [r7, #16]
 8015b9e:	685a      	ldr	r2, [r3, #4]
 8015ba0:	4b0a      	ldr	r3, [pc, #40]	; (8015bcc <vPortFree+0xbc>)
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	4413      	add	r3, r2
 8015ba6:	4a09      	ldr	r2, [pc, #36]	; (8015bcc <vPortFree+0xbc>)
 8015ba8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015baa:	6938      	ldr	r0, [r7, #16]
 8015bac:	f000 f874 	bl	8015c98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015bb0:	4b07      	ldr	r3, [pc, #28]	; (8015bd0 <vPortFree+0xc0>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	4a06      	ldr	r2, [pc, #24]	; (8015bd0 <vPortFree+0xc0>)
 8015bb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015bba:	f7fe f973 	bl	8013ea4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015bbe:	bf00      	nop
 8015bc0:	3718      	adds	r7, #24
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	20009f6c 	.word	0x20009f6c
 8015bcc:	20009f5c 	.word	0x20009f5c
 8015bd0:	20009f68 	.word	0x20009f68

08015bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015bd4:	b480      	push	{r7}
 8015bd6:	b085      	sub	sp, #20
 8015bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015be0:	4b27      	ldr	r3, [pc, #156]	; (8015c80 <prvHeapInit+0xac>)
 8015be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	f003 0307 	and.w	r3, r3, #7
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d00c      	beq.n	8015c08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	3307      	adds	r3, #7
 8015bf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	f023 0307 	bic.w	r3, r3, #7
 8015bfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015bfc:	68ba      	ldr	r2, [r7, #8]
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	1ad3      	subs	r3, r2, r3
 8015c02:	4a1f      	ldr	r2, [pc, #124]	; (8015c80 <prvHeapInit+0xac>)
 8015c04:	4413      	add	r3, r2
 8015c06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015c0c:	4a1d      	ldr	r2, [pc, #116]	; (8015c84 <prvHeapInit+0xb0>)
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015c12:	4b1c      	ldr	r3, [pc, #112]	; (8015c84 <prvHeapInit+0xb0>)
 8015c14:	2200      	movs	r2, #0
 8015c16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	68ba      	ldr	r2, [r7, #8]
 8015c1c:	4413      	add	r3, r2
 8015c1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015c20:	2208      	movs	r2, #8
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	1a9b      	subs	r3, r3, r2
 8015c26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	f023 0307 	bic.w	r3, r3, #7
 8015c2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	4a15      	ldr	r2, [pc, #84]	; (8015c88 <prvHeapInit+0xb4>)
 8015c34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015c36:	4b14      	ldr	r3, [pc, #80]	; (8015c88 <prvHeapInit+0xb4>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015c3e:	4b12      	ldr	r3, [pc, #72]	; (8015c88 <prvHeapInit+0xb4>)
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	2200      	movs	r2, #0
 8015c44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015c46:	687b      	ldr	r3, [r7, #4]
 8015c48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	68fa      	ldr	r2, [r7, #12]
 8015c4e:	1ad2      	subs	r2, r2, r3
 8015c50:	683b      	ldr	r3, [r7, #0]
 8015c52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015c54:	4b0c      	ldr	r3, [pc, #48]	; (8015c88 <prvHeapInit+0xb4>)
 8015c56:	681a      	ldr	r2, [r3, #0]
 8015c58:	683b      	ldr	r3, [r7, #0]
 8015c5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015c5c:	683b      	ldr	r3, [r7, #0]
 8015c5e:	685b      	ldr	r3, [r3, #4]
 8015c60:	4a0a      	ldr	r2, [pc, #40]	; (8015c8c <prvHeapInit+0xb8>)
 8015c62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015c64:	683b      	ldr	r3, [r7, #0]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	4a09      	ldr	r2, [pc, #36]	; (8015c90 <prvHeapInit+0xbc>)
 8015c6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015c6c:	4b09      	ldr	r3, [pc, #36]	; (8015c94 <prvHeapInit+0xc0>)
 8015c6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015c72:	601a      	str	r2, [r3, #0]
}
 8015c74:	bf00      	nop
 8015c76:	3714      	adds	r7, #20
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c7e:	4770      	bx	lr
 8015c80:	20001f50 	.word	0x20001f50
 8015c84:	20009f50 	.word	0x20009f50
 8015c88:	20009f58 	.word	0x20009f58
 8015c8c:	20009f60 	.word	0x20009f60
 8015c90:	20009f5c 	.word	0x20009f5c
 8015c94:	20009f6c 	.word	0x20009f6c

08015c98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015c98:	b480      	push	{r7}
 8015c9a:	b085      	sub	sp, #20
 8015c9c:	af00      	add	r7, sp, #0
 8015c9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015ca0:	4b28      	ldr	r3, [pc, #160]	; (8015d44 <prvInsertBlockIntoFreeList+0xac>)
 8015ca2:	60fb      	str	r3, [r7, #12]
 8015ca4:	e002      	b.n	8015cac <prvInsertBlockIntoFreeList+0x14>
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	681b      	ldr	r3, [r3, #0]
 8015caa:	60fb      	str	r3, [r7, #12]
 8015cac:	68fb      	ldr	r3, [r7, #12]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	687a      	ldr	r2, [r7, #4]
 8015cb2:	429a      	cmp	r2, r3
 8015cb4:	d8f7      	bhi.n	8015ca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	685b      	ldr	r3, [r3, #4]
 8015cbe:	68ba      	ldr	r2, [r7, #8]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	687a      	ldr	r2, [r7, #4]
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	d108      	bne.n	8015cda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	685a      	ldr	r2, [r3, #4]
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	685b      	ldr	r3, [r3, #4]
 8015cd0:	441a      	add	r2, r3
 8015cd2:	68fb      	ldr	r3, [r7, #12]
 8015cd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	685b      	ldr	r3, [r3, #4]
 8015ce2:	68ba      	ldr	r2, [r7, #8]
 8015ce4:	441a      	add	r2, r3
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	429a      	cmp	r2, r3
 8015cec:	d118      	bne.n	8015d20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	681a      	ldr	r2, [r3, #0]
 8015cf2:	4b15      	ldr	r3, [pc, #84]	; (8015d48 <prvInsertBlockIntoFreeList+0xb0>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	429a      	cmp	r2, r3
 8015cf8:	d00d      	beq.n	8015d16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	685a      	ldr	r2, [r3, #4]
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	685b      	ldr	r3, [r3, #4]
 8015d04:	441a      	add	r2, r3
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	681a      	ldr	r2, [r3, #0]
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	601a      	str	r2, [r3, #0]
 8015d14:	e008      	b.n	8015d28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8015d16:	4b0c      	ldr	r3, [pc, #48]	; (8015d48 <prvInsertBlockIntoFreeList+0xb0>)
 8015d18:	681a      	ldr	r2, [r3, #0]
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	601a      	str	r2, [r3, #0]
 8015d1e:	e003      	b.n	8015d28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	681a      	ldr	r2, [r3, #0]
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015d28:	68fa      	ldr	r2, [r7, #12]
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	429a      	cmp	r2, r3
 8015d2e:	d002      	beq.n	8015d36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	687a      	ldr	r2, [r7, #4]
 8015d34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015d36:	bf00      	nop
 8015d38:	3714      	adds	r7, #20
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d40:	4770      	bx	lr
 8015d42:	bf00      	nop
 8015d44:	20009f50 	.word	0x20009f50
 8015d48:	20009f58 	.word	0x20009f58

08015d4c <atof>:
 8015d4c:	2100      	movs	r1, #0
 8015d4e:	f000 be13 	b.w	8016978 <strtod>

08015d52 <atoi>:
 8015d52:	220a      	movs	r2, #10
 8015d54:	2100      	movs	r1, #0
 8015d56:	f000 be9d 	b.w	8016a94 <strtol>

08015d5a <sulp>:
 8015d5a:	b570      	push	{r4, r5, r6, lr}
 8015d5c:	4604      	mov	r4, r0
 8015d5e:	460d      	mov	r5, r1
 8015d60:	ec45 4b10 	vmov	d0, r4, r5
 8015d64:	4616      	mov	r6, r2
 8015d66:	f003 fb7b 	bl	8019460 <__ulp>
 8015d6a:	ec51 0b10 	vmov	r0, r1, d0
 8015d6e:	b17e      	cbz	r6, 8015d90 <sulp+0x36>
 8015d70:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015d74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	dd09      	ble.n	8015d90 <sulp+0x36>
 8015d7c:	051b      	lsls	r3, r3, #20
 8015d7e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015d82:	2400      	movs	r4, #0
 8015d84:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015d88:	4622      	mov	r2, r4
 8015d8a:	462b      	mov	r3, r5
 8015d8c:	f7ea fc34 	bl	80005f8 <__aeabi_dmul>
 8015d90:	bd70      	pop	{r4, r5, r6, pc}
 8015d92:	0000      	movs	r0, r0
 8015d94:	0000      	movs	r0, r0
	...

08015d98 <_strtod_l>:
 8015d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d9c:	ed2d 8b02 	vpush	{d8}
 8015da0:	b09b      	sub	sp, #108	; 0x6c
 8015da2:	4604      	mov	r4, r0
 8015da4:	9213      	str	r2, [sp, #76]	; 0x4c
 8015da6:	2200      	movs	r2, #0
 8015da8:	9216      	str	r2, [sp, #88]	; 0x58
 8015daa:	460d      	mov	r5, r1
 8015dac:	f04f 0800 	mov.w	r8, #0
 8015db0:	f04f 0900 	mov.w	r9, #0
 8015db4:	460a      	mov	r2, r1
 8015db6:	9215      	str	r2, [sp, #84]	; 0x54
 8015db8:	7811      	ldrb	r1, [r2, #0]
 8015dba:	292b      	cmp	r1, #43	; 0x2b
 8015dbc:	d04c      	beq.n	8015e58 <_strtod_l+0xc0>
 8015dbe:	d83a      	bhi.n	8015e36 <_strtod_l+0x9e>
 8015dc0:	290d      	cmp	r1, #13
 8015dc2:	d834      	bhi.n	8015e2e <_strtod_l+0x96>
 8015dc4:	2908      	cmp	r1, #8
 8015dc6:	d834      	bhi.n	8015e32 <_strtod_l+0x9a>
 8015dc8:	2900      	cmp	r1, #0
 8015dca:	d03d      	beq.n	8015e48 <_strtod_l+0xb0>
 8015dcc:	2200      	movs	r2, #0
 8015dce:	920a      	str	r2, [sp, #40]	; 0x28
 8015dd0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8015dd2:	7832      	ldrb	r2, [r6, #0]
 8015dd4:	2a30      	cmp	r2, #48	; 0x30
 8015dd6:	f040 80b4 	bne.w	8015f42 <_strtod_l+0x1aa>
 8015dda:	7872      	ldrb	r2, [r6, #1]
 8015ddc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8015de0:	2a58      	cmp	r2, #88	; 0x58
 8015de2:	d170      	bne.n	8015ec6 <_strtod_l+0x12e>
 8015de4:	9302      	str	r3, [sp, #8]
 8015de6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015de8:	9301      	str	r3, [sp, #4]
 8015dea:	ab16      	add	r3, sp, #88	; 0x58
 8015dec:	9300      	str	r3, [sp, #0]
 8015dee:	4a8e      	ldr	r2, [pc, #568]	; (8016028 <_strtod_l+0x290>)
 8015df0:	ab17      	add	r3, sp, #92	; 0x5c
 8015df2:	a915      	add	r1, sp, #84	; 0x54
 8015df4:	4620      	mov	r0, r4
 8015df6:	f002 fc11 	bl	801861c <__gethex>
 8015dfa:	f010 070f 	ands.w	r7, r0, #15
 8015dfe:	4605      	mov	r5, r0
 8015e00:	d005      	beq.n	8015e0e <_strtod_l+0x76>
 8015e02:	2f06      	cmp	r7, #6
 8015e04:	d12a      	bne.n	8015e5c <_strtod_l+0xc4>
 8015e06:	3601      	adds	r6, #1
 8015e08:	2300      	movs	r3, #0
 8015e0a:	9615      	str	r6, [sp, #84]	; 0x54
 8015e0c:	930a      	str	r3, [sp, #40]	; 0x28
 8015e0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	f040 857f 	bne.w	8016914 <_strtod_l+0xb7c>
 8015e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015e18:	b1db      	cbz	r3, 8015e52 <_strtod_l+0xba>
 8015e1a:	4642      	mov	r2, r8
 8015e1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015e20:	ec43 2b10 	vmov	d0, r2, r3
 8015e24:	b01b      	add	sp, #108	; 0x6c
 8015e26:	ecbd 8b02 	vpop	{d8}
 8015e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e2e:	2920      	cmp	r1, #32
 8015e30:	d1cc      	bne.n	8015dcc <_strtod_l+0x34>
 8015e32:	3201      	adds	r2, #1
 8015e34:	e7bf      	b.n	8015db6 <_strtod_l+0x1e>
 8015e36:	292d      	cmp	r1, #45	; 0x2d
 8015e38:	d1c8      	bne.n	8015dcc <_strtod_l+0x34>
 8015e3a:	2101      	movs	r1, #1
 8015e3c:	910a      	str	r1, [sp, #40]	; 0x28
 8015e3e:	1c51      	adds	r1, r2, #1
 8015e40:	9115      	str	r1, [sp, #84]	; 0x54
 8015e42:	7852      	ldrb	r2, [r2, #1]
 8015e44:	2a00      	cmp	r2, #0
 8015e46:	d1c3      	bne.n	8015dd0 <_strtod_l+0x38>
 8015e48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8015e4a:	9515      	str	r5, [sp, #84]	; 0x54
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	f040 855f 	bne.w	8016910 <_strtod_l+0xb78>
 8015e52:	4642      	mov	r2, r8
 8015e54:	464b      	mov	r3, r9
 8015e56:	e7e3      	b.n	8015e20 <_strtod_l+0x88>
 8015e58:	2100      	movs	r1, #0
 8015e5a:	e7ef      	b.n	8015e3c <_strtod_l+0xa4>
 8015e5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8015e5e:	b13a      	cbz	r2, 8015e70 <_strtod_l+0xd8>
 8015e60:	2135      	movs	r1, #53	; 0x35
 8015e62:	a818      	add	r0, sp, #96	; 0x60
 8015e64:	f003 fbf9 	bl	801965a <__copybits>
 8015e68:	9916      	ldr	r1, [sp, #88]	; 0x58
 8015e6a:	4620      	mov	r0, r4
 8015e6c:	f002 ffcc 	bl	8018e08 <_Bfree>
 8015e70:	3f01      	subs	r7, #1
 8015e72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8015e74:	2f04      	cmp	r7, #4
 8015e76:	d806      	bhi.n	8015e86 <_strtod_l+0xee>
 8015e78:	e8df f007 	tbb	[pc, r7]
 8015e7c:	201d0314 	.word	0x201d0314
 8015e80:	14          	.byte	0x14
 8015e81:	00          	.byte	0x00
 8015e82:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8015e86:	05e9      	lsls	r1, r5, #23
 8015e88:	bf48      	it	mi
 8015e8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8015e8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015e92:	0d1b      	lsrs	r3, r3, #20
 8015e94:	051b      	lsls	r3, r3, #20
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d1b9      	bne.n	8015e0e <_strtod_l+0x76>
 8015e9a:	f001 fc4b 	bl	8017734 <__errno>
 8015e9e:	2322      	movs	r3, #34	; 0x22
 8015ea0:	6003      	str	r3, [r0, #0]
 8015ea2:	e7b4      	b.n	8015e0e <_strtod_l+0x76>
 8015ea4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8015ea8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015eac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015eb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8015eb4:	e7e7      	b.n	8015e86 <_strtod_l+0xee>
 8015eb6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8016030 <_strtod_l+0x298>
 8015eba:	e7e4      	b.n	8015e86 <_strtod_l+0xee>
 8015ebc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8015ec0:	f04f 38ff 	mov.w	r8, #4294967295
 8015ec4:	e7df      	b.n	8015e86 <_strtod_l+0xee>
 8015ec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ec8:	1c5a      	adds	r2, r3, #1
 8015eca:	9215      	str	r2, [sp, #84]	; 0x54
 8015ecc:	785b      	ldrb	r3, [r3, #1]
 8015ece:	2b30      	cmp	r3, #48	; 0x30
 8015ed0:	d0f9      	beq.n	8015ec6 <_strtod_l+0x12e>
 8015ed2:	2b00      	cmp	r3, #0
 8015ed4:	d09b      	beq.n	8015e0e <_strtod_l+0x76>
 8015ed6:	2301      	movs	r3, #1
 8015ed8:	f04f 0a00 	mov.w	sl, #0
 8015edc:	9304      	str	r3, [sp, #16]
 8015ede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015ee0:	930b      	str	r3, [sp, #44]	; 0x2c
 8015ee2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8015ee6:	46d3      	mov	fp, sl
 8015ee8:	220a      	movs	r2, #10
 8015eea:	9815      	ldr	r0, [sp, #84]	; 0x54
 8015eec:	7806      	ldrb	r6, [r0, #0]
 8015eee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015ef2:	b2d9      	uxtb	r1, r3
 8015ef4:	2909      	cmp	r1, #9
 8015ef6:	d926      	bls.n	8015f46 <_strtod_l+0x1ae>
 8015ef8:	494c      	ldr	r1, [pc, #304]	; (801602c <_strtod_l+0x294>)
 8015efa:	2201      	movs	r2, #1
 8015efc:	f001 fb67 	bl	80175ce <strncmp>
 8015f00:	2800      	cmp	r0, #0
 8015f02:	d030      	beq.n	8015f66 <_strtod_l+0x1ce>
 8015f04:	2000      	movs	r0, #0
 8015f06:	4632      	mov	r2, r6
 8015f08:	9005      	str	r0, [sp, #20]
 8015f0a:	465e      	mov	r6, fp
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	2a65      	cmp	r2, #101	; 0x65
 8015f10:	d001      	beq.n	8015f16 <_strtod_l+0x17e>
 8015f12:	2a45      	cmp	r2, #69	; 0x45
 8015f14:	d113      	bne.n	8015f3e <_strtod_l+0x1a6>
 8015f16:	b91e      	cbnz	r6, 8015f20 <_strtod_l+0x188>
 8015f18:	9a04      	ldr	r2, [sp, #16]
 8015f1a:	4302      	orrs	r2, r0
 8015f1c:	d094      	beq.n	8015e48 <_strtod_l+0xb0>
 8015f1e:	2600      	movs	r6, #0
 8015f20:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8015f22:	1c6a      	adds	r2, r5, #1
 8015f24:	9215      	str	r2, [sp, #84]	; 0x54
 8015f26:	786a      	ldrb	r2, [r5, #1]
 8015f28:	2a2b      	cmp	r2, #43	; 0x2b
 8015f2a:	d074      	beq.n	8016016 <_strtod_l+0x27e>
 8015f2c:	2a2d      	cmp	r2, #45	; 0x2d
 8015f2e:	d078      	beq.n	8016022 <_strtod_l+0x28a>
 8015f30:	f04f 0c00 	mov.w	ip, #0
 8015f34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8015f38:	2909      	cmp	r1, #9
 8015f3a:	d97f      	bls.n	801603c <_strtod_l+0x2a4>
 8015f3c:	9515      	str	r5, [sp, #84]	; 0x54
 8015f3e:	2700      	movs	r7, #0
 8015f40:	e09e      	b.n	8016080 <_strtod_l+0x2e8>
 8015f42:	2300      	movs	r3, #0
 8015f44:	e7c8      	b.n	8015ed8 <_strtod_l+0x140>
 8015f46:	f1bb 0f08 	cmp.w	fp, #8
 8015f4a:	bfd8      	it	le
 8015f4c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015f4e:	f100 0001 	add.w	r0, r0, #1
 8015f52:	bfda      	itte	le
 8015f54:	fb02 3301 	mlale	r3, r2, r1, r3
 8015f58:	9309      	strle	r3, [sp, #36]	; 0x24
 8015f5a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8015f5e:	f10b 0b01 	add.w	fp, fp, #1
 8015f62:	9015      	str	r0, [sp, #84]	; 0x54
 8015f64:	e7c1      	b.n	8015eea <_strtod_l+0x152>
 8015f66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f68:	1c5a      	adds	r2, r3, #1
 8015f6a:	9215      	str	r2, [sp, #84]	; 0x54
 8015f6c:	785a      	ldrb	r2, [r3, #1]
 8015f6e:	f1bb 0f00 	cmp.w	fp, #0
 8015f72:	d037      	beq.n	8015fe4 <_strtod_l+0x24c>
 8015f74:	9005      	str	r0, [sp, #20]
 8015f76:	465e      	mov	r6, fp
 8015f78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8015f7c:	2b09      	cmp	r3, #9
 8015f7e:	d912      	bls.n	8015fa6 <_strtod_l+0x20e>
 8015f80:	2301      	movs	r3, #1
 8015f82:	e7c4      	b.n	8015f0e <_strtod_l+0x176>
 8015f84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f86:	1c5a      	adds	r2, r3, #1
 8015f88:	9215      	str	r2, [sp, #84]	; 0x54
 8015f8a:	785a      	ldrb	r2, [r3, #1]
 8015f8c:	3001      	adds	r0, #1
 8015f8e:	2a30      	cmp	r2, #48	; 0x30
 8015f90:	d0f8      	beq.n	8015f84 <_strtod_l+0x1ec>
 8015f92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8015f96:	2b08      	cmp	r3, #8
 8015f98:	f200 84c1 	bhi.w	801691e <_strtod_l+0xb86>
 8015f9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f9e:	9005      	str	r0, [sp, #20]
 8015fa0:	2000      	movs	r0, #0
 8015fa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fa4:	4606      	mov	r6, r0
 8015fa6:	3a30      	subs	r2, #48	; 0x30
 8015fa8:	f100 0301 	add.w	r3, r0, #1
 8015fac:	d014      	beq.n	8015fd8 <_strtod_l+0x240>
 8015fae:	9905      	ldr	r1, [sp, #20]
 8015fb0:	4419      	add	r1, r3
 8015fb2:	9105      	str	r1, [sp, #20]
 8015fb4:	4633      	mov	r3, r6
 8015fb6:	eb00 0c06 	add.w	ip, r0, r6
 8015fba:	210a      	movs	r1, #10
 8015fbc:	4563      	cmp	r3, ip
 8015fbe:	d113      	bne.n	8015fe8 <_strtod_l+0x250>
 8015fc0:	1833      	adds	r3, r6, r0
 8015fc2:	2b08      	cmp	r3, #8
 8015fc4:	f106 0601 	add.w	r6, r6, #1
 8015fc8:	4406      	add	r6, r0
 8015fca:	dc1a      	bgt.n	8016002 <_strtod_l+0x26a>
 8015fcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015fce:	230a      	movs	r3, #10
 8015fd0:	fb03 2301 	mla	r3, r3, r1, r2
 8015fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8015fda:	1c51      	adds	r1, r2, #1
 8015fdc:	9115      	str	r1, [sp, #84]	; 0x54
 8015fde:	7852      	ldrb	r2, [r2, #1]
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	e7c9      	b.n	8015f78 <_strtod_l+0x1e0>
 8015fe4:	4658      	mov	r0, fp
 8015fe6:	e7d2      	b.n	8015f8e <_strtod_l+0x1f6>
 8015fe8:	2b08      	cmp	r3, #8
 8015fea:	f103 0301 	add.w	r3, r3, #1
 8015fee:	dc03      	bgt.n	8015ff8 <_strtod_l+0x260>
 8015ff0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8015ff2:	434f      	muls	r7, r1
 8015ff4:	9709      	str	r7, [sp, #36]	; 0x24
 8015ff6:	e7e1      	b.n	8015fbc <_strtod_l+0x224>
 8015ff8:	2b10      	cmp	r3, #16
 8015ffa:	bfd8      	it	le
 8015ffc:	fb01 fa0a 	mulle.w	sl, r1, sl
 8016000:	e7dc      	b.n	8015fbc <_strtod_l+0x224>
 8016002:	2e10      	cmp	r6, #16
 8016004:	bfdc      	itt	le
 8016006:	230a      	movle	r3, #10
 8016008:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801600c:	e7e3      	b.n	8015fd6 <_strtod_l+0x23e>
 801600e:	2300      	movs	r3, #0
 8016010:	9305      	str	r3, [sp, #20]
 8016012:	2301      	movs	r3, #1
 8016014:	e780      	b.n	8015f18 <_strtod_l+0x180>
 8016016:	f04f 0c00 	mov.w	ip, #0
 801601a:	1caa      	adds	r2, r5, #2
 801601c:	9215      	str	r2, [sp, #84]	; 0x54
 801601e:	78aa      	ldrb	r2, [r5, #2]
 8016020:	e788      	b.n	8015f34 <_strtod_l+0x19c>
 8016022:	f04f 0c01 	mov.w	ip, #1
 8016026:	e7f8      	b.n	801601a <_strtod_l+0x282>
 8016028:	0801b628 	.word	0x0801b628
 801602c:	0801b624 	.word	0x0801b624
 8016030:	7ff00000 	.word	0x7ff00000
 8016034:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016036:	1c51      	adds	r1, r2, #1
 8016038:	9115      	str	r1, [sp, #84]	; 0x54
 801603a:	7852      	ldrb	r2, [r2, #1]
 801603c:	2a30      	cmp	r2, #48	; 0x30
 801603e:	d0f9      	beq.n	8016034 <_strtod_l+0x29c>
 8016040:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8016044:	2908      	cmp	r1, #8
 8016046:	f63f af7a 	bhi.w	8015f3e <_strtod_l+0x1a6>
 801604a:	3a30      	subs	r2, #48	; 0x30
 801604c:	9208      	str	r2, [sp, #32]
 801604e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016050:	920c      	str	r2, [sp, #48]	; 0x30
 8016052:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8016054:	1c57      	adds	r7, r2, #1
 8016056:	9715      	str	r7, [sp, #84]	; 0x54
 8016058:	7852      	ldrb	r2, [r2, #1]
 801605a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801605e:	f1be 0f09 	cmp.w	lr, #9
 8016062:	d938      	bls.n	80160d6 <_strtod_l+0x33e>
 8016064:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016066:	1a7f      	subs	r7, r7, r1
 8016068:	2f08      	cmp	r7, #8
 801606a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801606e:	dc03      	bgt.n	8016078 <_strtod_l+0x2e0>
 8016070:	9908      	ldr	r1, [sp, #32]
 8016072:	428f      	cmp	r7, r1
 8016074:	bfa8      	it	ge
 8016076:	460f      	movge	r7, r1
 8016078:	f1bc 0f00 	cmp.w	ip, #0
 801607c:	d000      	beq.n	8016080 <_strtod_l+0x2e8>
 801607e:	427f      	negs	r7, r7
 8016080:	2e00      	cmp	r6, #0
 8016082:	d14f      	bne.n	8016124 <_strtod_l+0x38c>
 8016084:	9904      	ldr	r1, [sp, #16]
 8016086:	4301      	orrs	r1, r0
 8016088:	f47f aec1 	bne.w	8015e0e <_strtod_l+0x76>
 801608c:	2b00      	cmp	r3, #0
 801608e:	f47f aedb 	bne.w	8015e48 <_strtod_l+0xb0>
 8016092:	2a69      	cmp	r2, #105	; 0x69
 8016094:	d029      	beq.n	80160ea <_strtod_l+0x352>
 8016096:	dc26      	bgt.n	80160e6 <_strtod_l+0x34e>
 8016098:	2a49      	cmp	r2, #73	; 0x49
 801609a:	d026      	beq.n	80160ea <_strtod_l+0x352>
 801609c:	2a4e      	cmp	r2, #78	; 0x4e
 801609e:	f47f aed3 	bne.w	8015e48 <_strtod_l+0xb0>
 80160a2:	499b      	ldr	r1, [pc, #620]	; (8016310 <_strtod_l+0x578>)
 80160a4:	a815      	add	r0, sp, #84	; 0x54
 80160a6:	f002 fcf9 	bl	8018a9c <__match>
 80160aa:	2800      	cmp	r0, #0
 80160ac:	f43f aecc 	beq.w	8015e48 <_strtod_l+0xb0>
 80160b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	2b28      	cmp	r3, #40	; 0x28
 80160b6:	d12f      	bne.n	8016118 <_strtod_l+0x380>
 80160b8:	4996      	ldr	r1, [pc, #600]	; (8016314 <_strtod_l+0x57c>)
 80160ba:	aa18      	add	r2, sp, #96	; 0x60
 80160bc:	a815      	add	r0, sp, #84	; 0x54
 80160be:	f002 fd01 	bl	8018ac4 <__hexnan>
 80160c2:	2805      	cmp	r0, #5
 80160c4:	d128      	bne.n	8016118 <_strtod_l+0x380>
 80160c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80160c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80160cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80160d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80160d4:	e69b      	b.n	8015e0e <_strtod_l+0x76>
 80160d6:	9f08      	ldr	r7, [sp, #32]
 80160d8:	210a      	movs	r1, #10
 80160da:	fb01 2107 	mla	r1, r1, r7, r2
 80160de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80160e2:	9208      	str	r2, [sp, #32]
 80160e4:	e7b5      	b.n	8016052 <_strtod_l+0x2ba>
 80160e6:	2a6e      	cmp	r2, #110	; 0x6e
 80160e8:	e7d9      	b.n	801609e <_strtod_l+0x306>
 80160ea:	498b      	ldr	r1, [pc, #556]	; (8016318 <_strtod_l+0x580>)
 80160ec:	a815      	add	r0, sp, #84	; 0x54
 80160ee:	f002 fcd5 	bl	8018a9c <__match>
 80160f2:	2800      	cmp	r0, #0
 80160f4:	f43f aea8 	beq.w	8015e48 <_strtod_l+0xb0>
 80160f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80160fa:	4988      	ldr	r1, [pc, #544]	; (801631c <_strtod_l+0x584>)
 80160fc:	3b01      	subs	r3, #1
 80160fe:	a815      	add	r0, sp, #84	; 0x54
 8016100:	9315      	str	r3, [sp, #84]	; 0x54
 8016102:	f002 fccb 	bl	8018a9c <__match>
 8016106:	b910      	cbnz	r0, 801610e <_strtod_l+0x376>
 8016108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801610a:	3301      	adds	r3, #1
 801610c:	9315      	str	r3, [sp, #84]	; 0x54
 801610e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801632c <_strtod_l+0x594>
 8016112:	f04f 0800 	mov.w	r8, #0
 8016116:	e67a      	b.n	8015e0e <_strtod_l+0x76>
 8016118:	4881      	ldr	r0, [pc, #516]	; (8016320 <_strtod_l+0x588>)
 801611a:	f001 fb49 	bl	80177b0 <nan>
 801611e:	ec59 8b10 	vmov	r8, r9, d0
 8016122:	e674      	b.n	8015e0e <_strtod_l+0x76>
 8016124:	9b05      	ldr	r3, [sp, #20]
 8016126:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016128:	1afb      	subs	r3, r7, r3
 801612a:	f1bb 0f00 	cmp.w	fp, #0
 801612e:	bf08      	it	eq
 8016130:	46b3      	moveq	fp, r6
 8016132:	2e10      	cmp	r6, #16
 8016134:	9308      	str	r3, [sp, #32]
 8016136:	4635      	mov	r5, r6
 8016138:	bfa8      	it	ge
 801613a:	2510      	movge	r5, #16
 801613c:	f7ea f9e2 	bl	8000504 <__aeabi_ui2d>
 8016140:	2e09      	cmp	r6, #9
 8016142:	4680      	mov	r8, r0
 8016144:	4689      	mov	r9, r1
 8016146:	dd13      	ble.n	8016170 <_strtod_l+0x3d8>
 8016148:	4b76      	ldr	r3, [pc, #472]	; (8016324 <_strtod_l+0x58c>)
 801614a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801614e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016152:	f7ea fa51 	bl	80005f8 <__aeabi_dmul>
 8016156:	4680      	mov	r8, r0
 8016158:	4650      	mov	r0, sl
 801615a:	4689      	mov	r9, r1
 801615c:	f7ea f9d2 	bl	8000504 <__aeabi_ui2d>
 8016160:	4602      	mov	r2, r0
 8016162:	460b      	mov	r3, r1
 8016164:	4640      	mov	r0, r8
 8016166:	4649      	mov	r1, r9
 8016168:	f7ea f890 	bl	800028c <__adddf3>
 801616c:	4680      	mov	r8, r0
 801616e:	4689      	mov	r9, r1
 8016170:	2e0f      	cmp	r6, #15
 8016172:	dc38      	bgt.n	80161e6 <_strtod_l+0x44e>
 8016174:	9b08      	ldr	r3, [sp, #32]
 8016176:	2b00      	cmp	r3, #0
 8016178:	f43f ae49 	beq.w	8015e0e <_strtod_l+0x76>
 801617c:	dd24      	ble.n	80161c8 <_strtod_l+0x430>
 801617e:	2b16      	cmp	r3, #22
 8016180:	dc0b      	bgt.n	801619a <_strtod_l+0x402>
 8016182:	4968      	ldr	r1, [pc, #416]	; (8016324 <_strtod_l+0x58c>)
 8016184:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016188:	e9d1 0100 	ldrd	r0, r1, [r1]
 801618c:	4642      	mov	r2, r8
 801618e:	464b      	mov	r3, r9
 8016190:	f7ea fa32 	bl	80005f8 <__aeabi_dmul>
 8016194:	4680      	mov	r8, r0
 8016196:	4689      	mov	r9, r1
 8016198:	e639      	b.n	8015e0e <_strtod_l+0x76>
 801619a:	9a08      	ldr	r2, [sp, #32]
 801619c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80161a0:	4293      	cmp	r3, r2
 80161a2:	db20      	blt.n	80161e6 <_strtod_l+0x44e>
 80161a4:	4c5f      	ldr	r4, [pc, #380]	; (8016324 <_strtod_l+0x58c>)
 80161a6:	f1c6 060f 	rsb	r6, r6, #15
 80161aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80161ae:	4642      	mov	r2, r8
 80161b0:	464b      	mov	r3, r9
 80161b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161b6:	f7ea fa1f 	bl	80005f8 <__aeabi_dmul>
 80161ba:	9b08      	ldr	r3, [sp, #32]
 80161bc:	1b9e      	subs	r6, r3, r6
 80161be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80161c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80161c6:	e7e3      	b.n	8016190 <_strtod_l+0x3f8>
 80161c8:	9b08      	ldr	r3, [sp, #32]
 80161ca:	3316      	adds	r3, #22
 80161cc:	db0b      	blt.n	80161e6 <_strtod_l+0x44e>
 80161ce:	9b05      	ldr	r3, [sp, #20]
 80161d0:	1bdf      	subs	r7, r3, r7
 80161d2:	4b54      	ldr	r3, [pc, #336]	; (8016324 <_strtod_l+0x58c>)
 80161d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80161d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80161dc:	4640      	mov	r0, r8
 80161de:	4649      	mov	r1, r9
 80161e0:	f7ea fb34 	bl	800084c <__aeabi_ddiv>
 80161e4:	e7d6      	b.n	8016194 <_strtod_l+0x3fc>
 80161e6:	9b08      	ldr	r3, [sp, #32]
 80161e8:	1b75      	subs	r5, r6, r5
 80161ea:	441d      	add	r5, r3
 80161ec:	2d00      	cmp	r5, #0
 80161ee:	dd70      	ble.n	80162d2 <_strtod_l+0x53a>
 80161f0:	f015 030f 	ands.w	r3, r5, #15
 80161f4:	d00a      	beq.n	801620c <_strtod_l+0x474>
 80161f6:	494b      	ldr	r1, [pc, #300]	; (8016324 <_strtod_l+0x58c>)
 80161f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80161fc:	4642      	mov	r2, r8
 80161fe:	464b      	mov	r3, r9
 8016200:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016204:	f7ea f9f8 	bl	80005f8 <__aeabi_dmul>
 8016208:	4680      	mov	r8, r0
 801620a:	4689      	mov	r9, r1
 801620c:	f035 050f 	bics.w	r5, r5, #15
 8016210:	d04d      	beq.n	80162ae <_strtod_l+0x516>
 8016212:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8016216:	dd22      	ble.n	801625e <_strtod_l+0x4c6>
 8016218:	2500      	movs	r5, #0
 801621a:	46ab      	mov	fp, r5
 801621c:	9509      	str	r5, [sp, #36]	; 0x24
 801621e:	9505      	str	r5, [sp, #20]
 8016220:	2322      	movs	r3, #34	; 0x22
 8016222:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801632c <_strtod_l+0x594>
 8016226:	6023      	str	r3, [r4, #0]
 8016228:	f04f 0800 	mov.w	r8, #0
 801622c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801622e:	2b00      	cmp	r3, #0
 8016230:	f43f aded 	beq.w	8015e0e <_strtod_l+0x76>
 8016234:	9916      	ldr	r1, [sp, #88]	; 0x58
 8016236:	4620      	mov	r0, r4
 8016238:	f002 fde6 	bl	8018e08 <_Bfree>
 801623c:	9905      	ldr	r1, [sp, #20]
 801623e:	4620      	mov	r0, r4
 8016240:	f002 fde2 	bl	8018e08 <_Bfree>
 8016244:	4659      	mov	r1, fp
 8016246:	4620      	mov	r0, r4
 8016248:	f002 fdde 	bl	8018e08 <_Bfree>
 801624c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801624e:	4620      	mov	r0, r4
 8016250:	f002 fdda 	bl	8018e08 <_Bfree>
 8016254:	4629      	mov	r1, r5
 8016256:	4620      	mov	r0, r4
 8016258:	f002 fdd6 	bl	8018e08 <_Bfree>
 801625c:	e5d7      	b.n	8015e0e <_strtod_l+0x76>
 801625e:	4b32      	ldr	r3, [pc, #200]	; (8016328 <_strtod_l+0x590>)
 8016260:	9304      	str	r3, [sp, #16]
 8016262:	2300      	movs	r3, #0
 8016264:	112d      	asrs	r5, r5, #4
 8016266:	4640      	mov	r0, r8
 8016268:	4649      	mov	r1, r9
 801626a:	469a      	mov	sl, r3
 801626c:	2d01      	cmp	r5, #1
 801626e:	dc21      	bgt.n	80162b4 <_strtod_l+0x51c>
 8016270:	b10b      	cbz	r3, 8016276 <_strtod_l+0x4de>
 8016272:	4680      	mov	r8, r0
 8016274:	4689      	mov	r9, r1
 8016276:	492c      	ldr	r1, [pc, #176]	; (8016328 <_strtod_l+0x590>)
 8016278:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801627c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016280:	4642      	mov	r2, r8
 8016282:	464b      	mov	r3, r9
 8016284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016288:	f7ea f9b6 	bl	80005f8 <__aeabi_dmul>
 801628c:	4b27      	ldr	r3, [pc, #156]	; (801632c <_strtod_l+0x594>)
 801628e:	460a      	mov	r2, r1
 8016290:	400b      	ands	r3, r1
 8016292:	4927      	ldr	r1, [pc, #156]	; (8016330 <_strtod_l+0x598>)
 8016294:	428b      	cmp	r3, r1
 8016296:	4680      	mov	r8, r0
 8016298:	d8be      	bhi.n	8016218 <_strtod_l+0x480>
 801629a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801629e:	428b      	cmp	r3, r1
 80162a0:	bf86      	itte	hi
 80162a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8016334 <_strtod_l+0x59c>
 80162a6:	f04f 38ff 	movhi.w	r8, #4294967295
 80162aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80162ae:	2300      	movs	r3, #0
 80162b0:	9304      	str	r3, [sp, #16]
 80162b2:	e07b      	b.n	80163ac <_strtod_l+0x614>
 80162b4:	07ea      	lsls	r2, r5, #31
 80162b6:	d505      	bpl.n	80162c4 <_strtod_l+0x52c>
 80162b8:	9b04      	ldr	r3, [sp, #16]
 80162ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162be:	f7ea f99b 	bl	80005f8 <__aeabi_dmul>
 80162c2:	2301      	movs	r3, #1
 80162c4:	9a04      	ldr	r2, [sp, #16]
 80162c6:	3208      	adds	r2, #8
 80162c8:	f10a 0a01 	add.w	sl, sl, #1
 80162cc:	106d      	asrs	r5, r5, #1
 80162ce:	9204      	str	r2, [sp, #16]
 80162d0:	e7cc      	b.n	801626c <_strtod_l+0x4d4>
 80162d2:	d0ec      	beq.n	80162ae <_strtod_l+0x516>
 80162d4:	426d      	negs	r5, r5
 80162d6:	f015 020f 	ands.w	r2, r5, #15
 80162da:	d00a      	beq.n	80162f2 <_strtod_l+0x55a>
 80162dc:	4b11      	ldr	r3, [pc, #68]	; (8016324 <_strtod_l+0x58c>)
 80162de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80162e2:	4640      	mov	r0, r8
 80162e4:	4649      	mov	r1, r9
 80162e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162ea:	f7ea faaf 	bl	800084c <__aeabi_ddiv>
 80162ee:	4680      	mov	r8, r0
 80162f0:	4689      	mov	r9, r1
 80162f2:	112d      	asrs	r5, r5, #4
 80162f4:	d0db      	beq.n	80162ae <_strtod_l+0x516>
 80162f6:	2d1f      	cmp	r5, #31
 80162f8:	dd1e      	ble.n	8016338 <_strtod_l+0x5a0>
 80162fa:	2500      	movs	r5, #0
 80162fc:	46ab      	mov	fp, r5
 80162fe:	9509      	str	r5, [sp, #36]	; 0x24
 8016300:	9505      	str	r5, [sp, #20]
 8016302:	2322      	movs	r3, #34	; 0x22
 8016304:	f04f 0800 	mov.w	r8, #0
 8016308:	f04f 0900 	mov.w	r9, #0
 801630c:	6023      	str	r3, [r4, #0]
 801630e:	e78d      	b.n	801622c <_strtod_l+0x494>
 8016310:	0801b786 	.word	0x0801b786
 8016314:	0801b63c 	.word	0x0801b63c
 8016318:	0801b77e 	.word	0x0801b77e
 801631c:	0801b7b8 	.word	0x0801b7b8
 8016320:	0801ba48 	.word	0x0801ba48
 8016324:	0801b928 	.word	0x0801b928
 8016328:	0801b900 	.word	0x0801b900
 801632c:	7ff00000 	.word	0x7ff00000
 8016330:	7ca00000 	.word	0x7ca00000
 8016334:	7fefffff 	.word	0x7fefffff
 8016338:	f015 0310 	ands.w	r3, r5, #16
 801633c:	bf18      	it	ne
 801633e:	236a      	movne	r3, #106	; 0x6a
 8016340:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80166e4 <_strtod_l+0x94c>
 8016344:	9304      	str	r3, [sp, #16]
 8016346:	4640      	mov	r0, r8
 8016348:	4649      	mov	r1, r9
 801634a:	2300      	movs	r3, #0
 801634c:	07ea      	lsls	r2, r5, #31
 801634e:	d504      	bpl.n	801635a <_strtod_l+0x5c2>
 8016350:	e9da 2300 	ldrd	r2, r3, [sl]
 8016354:	f7ea f950 	bl	80005f8 <__aeabi_dmul>
 8016358:	2301      	movs	r3, #1
 801635a:	106d      	asrs	r5, r5, #1
 801635c:	f10a 0a08 	add.w	sl, sl, #8
 8016360:	d1f4      	bne.n	801634c <_strtod_l+0x5b4>
 8016362:	b10b      	cbz	r3, 8016368 <_strtod_l+0x5d0>
 8016364:	4680      	mov	r8, r0
 8016366:	4689      	mov	r9, r1
 8016368:	9b04      	ldr	r3, [sp, #16]
 801636a:	b1bb      	cbz	r3, 801639c <_strtod_l+0x604>
 801636c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8016370:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8016374:	2b00      	cmp	r3, #0
 8016376:	4649      	mov	r1, r9
 8016378:	dd10      	ble.n	801639c <_strtod_l+0x604>
 801637a:	2b1f      	cmp	r3, #31
 801637c:	f340 811e 	ble.w	80165bc <_strtod_l+0x824>
 8016380:	2b34      	cmp	r3, #52	; 0x34
 8016382:	bfde      	ittt	le
 8016384:	f04f 33ff 	movle.w	r3, #4294967295
 8016388:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801638c:	4093      	lslle	r3, r2
 801638e:	f04f 0800 	mov.w	r8, #0
 8016392:	bfcc      	ite	gt
 8016394:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8016398:	ea03 0901 	andle.w	r9, r3, r1
 801639c:	2200      	movs	r2, #0
 801639e:	2300      	movs	r3, #0
 80163a0:	4640      	mov	r0, r8
 80163a2:	4649      	mov	r1, r9
 80163a4:	f7ea fb90 	bl	8000ac8 <__aeabi_dcmpeq>
 80163a8:	2800      	cmp	r0, #0
 80163aa:	d1a6      	bne.n	80162fa <_strtod_l+0x562>
 80163ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163ae:	9300      	str	r3, [sp, #0]
 80163b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80163b2:	4633      	mov	r3, r6
 80163b4:	465a      	mov	r2, fp
 80163b6:	4620      	mov	r0, r4
 80163b8:	f002 fd8e 	bl	8018ed8 <__s2b>
 80163bc:	9009      	str	r0, [sp, #36]	; 0x24
 80163be:	2800      	cmp	r0, #0
 80163c0:	f43f af2a 	beq.w	8016218 <_strtod_l+0x480>
 80163c4:	9a08      	ldr	r2, [sp, #32]
 80163c6:	9b05      	ldr	r3, [sp, #20]
 80163c8:	2a00      	cmp	r2, #0
 80163ca:	eba3 0307 	sub.w	r3, r3, r7
 80163ce:	bfa8      	it	ge
 80163d0:	2300      	movge	r3, #0
 80163d2:	930c      	str	r3, [sp, #48]	; 0x30
 80163d4:	2500      	movs	r5, #0
 80163d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80163da:	9312      	str	r3, [sp, #72]	; 0x48
 80163dc:	46ab      	mov	fp, r5
 80163de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163e0:	4620      	mov	r0, r4
 80163e2:	6859      	ldr	r1, [r3, #4]
 80163e4:	f002 fcd0 	bl	8018d88 <_Balloc>
 80163e8:	9005      	str	r0, [sp, #20]
 80163ea:	2800      	cmp	r0, #0
 80163ec:	f43f af18 	beq.w	8016220 <_strtod_l+0x488>
 80163f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163f2:	691a      	ldr	r2, [r3, #16]
 80163f4:	3202      	adds	r2, #2
 80163f6:	f103 010c 	add.w	r1, r3, #12
 80163fa:	0092      	lsls	r2, r2, #2
 80163fc:	300c      	adds	r0, #12
 80163fe:	f001 f9c6 	bl	801778e <memcpy>
 8016402:	ec49 8b10 	vmov	d0, r8, r9
 8016406:	aa18      	add	r2, sp, #96	; 0x60
 8016408:	a917      	add	r1, sp, #92	; 0x5c
 801640a:	4620      	mov	r0, r4
 801640c:	f003 f898 	bl	8019540 <__d2b>
 8016410:	ec49 8b18 	vmov	d8, r8, r9
 8016414:	9016      	str	r0, [sp, #88]	; 0x58
 8016416:	2800      	cmp	r0, #0
 8016418:	f43f af02 	beq.w	8016220 <_strtod_l+0x488>
 801641c:	2101      	movs	r1, #1
 801641e:	4620      	mov	r0, r4
 8016420:	f002 fdf2 	bl	8019008 <__i2b>
 8016424:	4683      	mov	fp, r0
 8016426:	2800      	cmp	r0, #0
 8016428:	f43f aefa 	beq.w	8016220 <_strtod_l+0x488>
 801642c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801642e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8016430:	2e00      	cmp	r6, #0
 8016432:	bfab      	itete	ge
 8016434:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8016436:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8016438:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801643a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801643e:	bfac      	ite	ge
 8016440:	eb06 0a03 	addge.w	sl, r6, r3
 8016444:	1b9f      	sublt	r7, r3, r6
 8016446:	9b04      	ldr	r3, [sp, #16]
 8016448:	1af6      	subs	r6, r6, r3
 801644a:	4416      	add	r6, r2
 801644c:	4ba0      	ldr	r3, [pc, #640]	; (80166d0 <_strtod_l+0x938>)
 801644e:	3e01      	subs	r6, #1
 8016450:	429e      	cmp	r6, r3
 8016452:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016456:	f280 80c4 	bge.w	80165e2 <_strtod_l+0x84a>
 801645a:	1b9b      	subs	r3, r3, r6
 801645c:	2b1f      	cmp	r3, #31
 801645e:	eba2 0203 	sub.w	r2, r2, r3
 8016462:	f04f 0101 	mov.w	r1, #1
 8016466:	f300 80b0 	bgt.w	80165ca <_strtod_l+0x832>
 801646a:	fa01 f303 	lsl.w	r3, r1, r3
 801646e:	930e      	str	r3, [sp, #56]	; 0x38
 8016470:	2300      	movs	r3, #0
 8016472:	930d      	str	r3, [sp, #52]	; 0x34
 8016474:	eb0a 0602 	add.w	r6, sl, r2
 8016478:	9b04      	ldr	r3, [sp, #16]
 801647a:	45b2      	cmp	sl, r6
 801647c:	4417      	add	r7, r2
 801647e:	441f      	add	r7, r3
 8016480:	4653      	mov	r3, sl
 8016482:	bfa8      	it	ge
 8016484:	4633      	movge	r3, r6
 8016486:	42bb      	cmp	r3, r7
 8016488:	bfa8      	it	ge
 801648a:	463b      	movge	r3, r7
 801648c:	2b00      	cmp	r3, #0
 801648e:	bfc2      	ittt	gt
 8016490:	1af6      	subgt	r6, r6, r3
 8016492:	1aff      	subgt	r7, r7, r3
 8016494:	ebaa 0a03 	subgt.w	sl, sl, r3
 8016498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801649a:	2b00      	cmp	r3, #0
 801649c:	dd17      	ble.n	80164ce <_strtod_l+0x736>
 801649e:	4659      	mov	r1, fp
 80164a0:	461a      	mov	r2, r3
 80164a2:	4620      	mov	r0, r4
 80164a4:	f002 fe70 	bl	8019188 <__pow5mult>
 80164a8:	4683      	mov	fp, r0
 80164aa:	2800      	cmp	r0, #0
 80164ac:	f43f aeb8 	beq.w	8016220 <_strtod_l+0x488>
 80164b0:	4601      	mov	r1, r0
 80164b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80164b4:	4620      	mov	r0, r4
 80164b6:	f002 fdbd 	bl	8019034 <__multiply>
 80164ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80164bc:	2800      	cmp	r0, #0
 80164be:	f43f aeaf 	beq.w	8016220 <_strtod_l+0x488>
 80164c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80164c4:	4620      	mov	r0, r4
 80164c6:	f002 fc9f 	bl	8018e08 <_Bfree>
 80164ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80164cc:	9316      	str	r3, [sp, #88]	; 0x58
 80164ce:	2e00      	cmp	r6, #0
 80164d0:	f300 808c 	bgt.w	80165ec <_strtod_l+0x854>
 80164d4:	9b08      	ldr	r3, [sp, #32]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	dd08      	ble.n	80164ec <_strtod_l+0x754>
 80164da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80164dc:	9905      	ldr	r1, [sp, #20]
 80164de:	4620      	mov	r0, r4
 80164e0:	f002 fe52 	bl	8019188 <__pow5mult>
 80164e4:	9005      	str	r0, [sp, #20]
 80164e6:	2800      	cmp	r0, #0
 80164e8:	f43f ae9a 	beq.w	8016220 <_strtod_l+0x488>
 80164ec:	2f00      	cmp	r7, #0
 80164ee:	dd08      	ble.n	8016502 <_strtod_l+0x76a>
 80164f0:	9905      	ldr	r1, [sp, #20]
 80164f2:	463a      	mov	r2, r7
 80164f4:	4620      	mov	r0, r4
 80164f6:	f002 fea1 	bl	801923c <__lshift>
 80164fa:	9005      	str	r0, [sp, #20]
 80164fc:	2800      	cmp	r0, #0
 80164fe:	f43f ae8f 	beq.w	8016220 <_strtod_l+0x488>
 8016502:	f1ba 0f00 	cmp.w	sl, #0
 8016506:	dd08      	ble.n	801651a <_strtod_l+0x782>
 8016508:	4659      	mov	r1, fp
 801650a:	4652      	mov	r2, sl
 801650c:	4620      	mov	r0, r4
 801650e:	f002 fe95 	bl	801923c <__lshift>
 8016512:	4683      	mov	fp, r0
 8016514:	2800      	cmp	r0, #0
 8016516:	f43f ae83 	beq.w	8016220 <_strtod_l+0x488>
 801651a:	9a05      	ldr	r2, [sp, #20]
 801651c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801651e:	4620      	mov	r0, r4
 8016520:	f002 ff14 	bl	801934c <__mdiff>
 8016524:	4605      	mov	r5, r0
 8016526:	2800      	cmp	r0, #0
 8016528:	f43f ae7a 	beq.w	8016220 <_strtod_l+0x488>
 801652c:	68c3      	ldr	r3, [r0, #12]
 801652e:	930b      	str	r3, [sp, #44]	; 0x2c
 8016530:	2300      	movs	r3, #0
 8016532:	60c3      	str	r3, [r0, #12]
 8016534:	4659      	mov	r1, fp
 8016536:	f002 feed 	bl	8019314 <__mcmp>
 801653a:	2800      	cmp	r0, #0
 801653c:	da60      	bge.n	8016600 <_strtod_l+0x868>
 801653e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016540:	ea53 0308 	orrs.w	r3, r3, r8
 8016544:	f040 8084 	bne.w	8016650 <_strtod_l+0x8b8>
 8016548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801654c:	2b00      	cmp	r3, #0
 801654e:	d17f      	bne.n	8016650 <_strtod_l+0x8b8>
 8016550:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016554:	0d1b      	lsrs	r3, r3, #20
 8016556:	051b      	lsls	r3, r3, #20
 8016558:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801655c:	d978      	bls.n	8016650 <_strtod_l+0x8b8>
 801655e:	696b      	ldr	r3, [r5, #20]
 8016560:	b913      	cbnz	r3, 8016568 <_strtod_l+0x7d0>
 8016562:	692b      	ldr	r3, [r5, #16]
 8016564:	2b01      	cmp	r3, #1
 8016566:	dd73      	ble.n	8016650 <_strtod_l+0x8b8>
 8016568:	4629      	mov	r1, r5
 801656a:	2201      	movs	r2, #1
 801656c:	4620      	mov	r0, r4
 801656e:	f002 fe65 	bl	801923c <__lshift>
 8016572:	4659      	mov	r1, fp
 8016574:	4605      	mov	r5, r0
 8016576:	f002 fecd 	bl	8019314 <__mcmp>
 801657a:	2800      	cmp	r0, #0
 801657c:	dd68      	ble.n	8016650 <_strtod_l+0x8b8>
 801657e:	9904      	ldr	r1, [sp, #16]
 8016580:	4a54      	ldr	r2, [pc, #336]	; (80166d4 <_strtod_l+0x93c>)
 8016582:	464b      	mov	r3, r9
 8016584:	2900      	cmp	r1, #0
 8016586:	f000 8084 	beq.w	8016692 <_strtod_l+0x8fa>
 801658a:	ea02 0109 	and.w	r1, r2, r9
 801658e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016592:	dc7e      	bgt.n	8016692 <_strtod_l+0x8fa>
 8016594:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016598:	f77f aeb3 	ble.w	8016302 <_strtod_l+0x56a>
 801659c:	4b4e      	ldr	r3, [pc, #312]	; (80166d8 <_strtod_l+0x940>)
 801659e:	4640      	mov	r0, r8
 80165a0:	4649      	mov	r1, r9
 80165a2:	2200      	movs	r2, #0
 80165a4:	f7ea f828 	bl	80005f8 <__aeabi_dmul>
 80165a8:	4b4a      	ldr	r3, [pc, #296]	; (80166d4 <_strtod_l+0x93c>)
 80165aa:	400b      	ands	r3, r1
 80165ac:	4680      	mov	r8, r0
 80165ae:	4689      	mov	r9, r1
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	f47f ae3f 	bne.w	8016234 <_strtod_l+0x49c>
 80165b6:	2322      	movs	r3, #34	; 0x22
 80165b8:	6023      	str	r3, [r4, #0]
 80165ba:	e63b      	b.n	8016234 <_strtod_l+0x49c>
 80165bc:	f04f 32ff 	mov.w	r2, #4294967295
 80165c0:	fa02 f303 	lsl.w	r3, r2, r3
 80165c4:	ea03 0808 	and.w	r8, r3, r8
 80165c8:	e6e8      	b.n	801639c <_strtod_l+0x604>
 80165ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80165ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80165d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80165d6:	36e2      	adds	r6, #226	; 0xe2
 80165d8:	fa01 f306 	lsl.w	r3, r1, r6
 80165dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80165e0:	e748      	b.n	8016474 <_strtod_l+0x6dc>
 80165e2:	2100      	movs	r1, #0
 80165e4:	2301      	movs	r3, #1
 80165e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80165ea:	e743      	b.n	8016474 <_strtod_l+0x6dc>
 80165ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80165ee:	4632      	mov	r2, r6
 80165f0:	4620      	mov	r0, r4
 80165f2:	f002 fe23 	bl	801923c <__lshift>
 80165f6:	9016      	str	r0, [sp, #88]	; 0x58
 80165f8:	2800      	cmp	r0, #0
 80165fa:	f47f af6b 	bne.w	80164d4 <_strtod_l+0x73c>
 80165fe:	e60f      	b.n	8016220 <_strtod_l+0x488>
 8016600:	46ca      	mov	sl, r9
 8016602:	d171      	bne.n	80166e8 <_strtod_l+0x950>
 8016604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016606:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801660a:	b352      	cbz	r2, 8016662 <_strtod_l+0x8ca>
 801660c:	4a33      	ldr	r2, [pc, #204]	; (80166dc <_strtod_l+0x944>)
 801660e:	4293      	cmp	r3, r2
 8016610:	d12a      	bne.n	8016668 <_strtod_l+0x8d0>
 8016612:	9b04      	ldr	r3, [sp, #16]
 8016614:	4641      	mov	r1, r8
 8016616:	b1fb      	cbz	r3, 8016658 <_strtod_l+0x8c0>
 8016618:	4b2e      	ldr	r3, [pc, #184]	; (80166d4 <_strtod_l+0x93c>)
 801661a:	ea09 0303 	and.w	r3, r9, r3
 801661e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016622:	f04f 32ff 	mov.w	r2, #4294967295
 8016626:	d81a      	bhi.n	801665e <_strtod_l+0x8c6>
 8016628:	0d1b      	lsrs	r3, r3, #20
 801662a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801662e:	fa02 f303 	lsl.w	r3, r2, r3
 8016632:	4299      	cmp	r1, r3
 8016634:	d118      	bne.n	8016668 <_strtod_l+0x8d0>
 8016636:	4b2a      	ldr	r3, [pc, #168]	; (80166e0 <_strtod_l+0x948>)
 8016638:	459a      	cmp	sl, r3
 801663a:	d102      	bne.n	8016642 <_strtod_l+0x8aa>
 801663c:	3101      	adds	r1, #1
 801663e:	f43f adef 	beq.w	8016220 <_strtod_l+0x488>
 8016642:	4b24      	ldr	r3, [pc, #144]	; (80166d4 <_strtod_l+0x93c>)
 8016644:	ea0a 0303 	and.w	r3, sl, r3
 8016648:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801664c:	f04f 0800 	mov.w	r8, #0
 8016650:	9b04      	ldr	r3, [sp, #16]
 8016652:	2b00      	cmp	r3, #0
 8016654:	d1a2      	bne.n	801659c <_strtod_l+0x804>
 8016656:	e5ed      	b.n	8016234 <_strtod_l+0x49c>
 8016658:	f04f 33ff 	mov.w	r3, #4294967295
 801665c:	e7e9      	b.n	8016632 <_strtod_l+0x89a>
 801665e:	4613      	mov	r3, r2
 8016660:	e7e7      	b.n	8016632 <_strtod_l+0x89a>
 8016662:	ea53 0308 	orrs.w	r3, r3, r8
 8016666:	d08a      	beq.n	801657e <_strtod_l+0x7e6>
 8016668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801666a:	b1e3      	cbz	r3, 80166a6 <_strtod_l+0x90e>
 801666c:	ea13 0f0a 	tst.w	r3, sl
 8016670:	d0ee      	beq.n	8016650 <_strtod_l+0x8b8>
 8016672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016674:	9a04      	ldr	r2, [sp, #16]
 8016676:	4640      	mov	r0, r8
 8016678:	4649      	mov	r1, r9
 801667a:	b1c3      	cbz	r3, 80166ae <_strtod_l+0x916>
 801667c:	f7ff fb6d 	bl	8015d5a <sulp>
 8016680:	4602      	mov	r2, r0
 8016682:	460b      	mov	r3, r1
 8016684:	ec51 0b18 	vmov	r0, r1, d8
 8016688:	f7e9 fe00 	bl	800028c <__adddf3>
 801668c:	4680      	mov	r8, r0
 801668e:	4689      	mov	r9, r1
 8016690:	e7de      	b.n	8016650 <_strtod_l+0x8b8>
 8016692:	4013      	ands	r3, r2
 8016694:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016698:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801669c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80166a0:	f04f 38ff 	mov.w	r8, #4294967295
 80166a4:	e7d4      	b.n	8016650 <_strtod_l+0x8b8>
 80166a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80166a8:	ea13 0f08 	tst.w	r3, r8
 80166ac:	e7e0      	b.n	8016670 <_strtod_l+0x8d8>
 80166ae:	f7ff fb54 	bl	8015d5a <sulp>
 80166b2:	4602      	mov	r2, r0
 80166b4:	460b      	mov	r3, r1
 80166b6:	ec51 0b18 	vmov	r0, r1, d8
 80166ba:	f7e9 fde5 	bl	8000288 <__aeabi_dsub>
 80166be:	2200      	movs	r2, #0
 80166c0:	2300      	movs	r3, #0
 80166c2:	4680      	mov	r8, r0
 80166c4:	4689      	mov	r9, r1
 80166c6:	f7ea f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80166ca:	2800      	cmp	r0, #0
 80166cc:	d0c0      	beq.n	8016650 <_strtod_l+0x8b8>
 80166ce:	e618      	b.n	8016302 <_strtod_l+0x56a>
 80166d0:	fffffc02 	.word	0xfffffc02
 80166d4:	7ff00000 	.word	0x7ff00000
 80166d8:	39500000 	.word	0x39500000
 80166dc:	000fffff 	.word	0x000fffff
 80166e0:	7fefffff 	.word	0x7fefffff
 80166e4:	0801b650 	.word	0x0801b650
 80166e8:	4659      	mov	r1, fp
 80166ea:	4628      	mov	r0, r5
 80166ec:	f002 ff82 	bl	80195f4 <__ratio>
 80166f0:	ec57 6b10 	vmov	r6, r7, d0
 80166f4:	ee10 0a10 	vmov	r0, s0
 80166f8:	2200      	movs	r2, #0
 80166fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80166fe:	4639      	mov	r1, r7
 8016700:	f7ea f9f6 	bl	8000af0 <__aeabi_dcmple>
 8016704:	2800      	cmp	r0, #0
 8016706:	d071      	beq.n	80167ec <_strtod_l+0xa54>
 8016708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801670a:	2b00      	cmp	r3, #0
 801670c:	d17c      	bne.n	8016808 <_strtod_l+0xa70>
 801670e:	f1b8 0f00 	cmp.w	r8, #0
 8016712:	d15a      	bne.n	80167ca <_strtod_l+0xa32>
 8016714:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8016718:	2b00      	cmp	r3, #0
 801671a:	d15d      	bne.n	80167d8 <_strtod_l+0xa40>
 801671c:	4b90      	ldr	r3, [pc, #576]	; (8016960 <_strtod_l+0xbc8>)
 801671e:	2200      	movs	r2, #0
 8016720:	4630      	mov	r0, r6
 8016722:	4639      	mov	r1, r7
 8016724:	f7ea f9da 	bl	8000adc <__aeabi_dcmplt>
 8016728:	2800      	cmp	r0, #0
 801672a:	d15c      	bne.n	80167e6 <_strtod_l+0xa4e>
 801672c:	4630      	mov	r0, r6
 801672e:	4639      	mov	r1, r7
 8016730:	4b8c      	ldr	r3, [pc, #560]	; (8016964 <_strtod_l+0xbcc>)
 8016732:	2200      	movs	r2, #0
 8016734:	f7e9 ff60 	bl	80005f8 <__aeabi_dmul>
 8016738:	4606      	mov	r6, r0
 801673a:	460f      	mov	r7, r1
 801673c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016740:	9606      	str	r6, [sp, #24]
 8016742:	9307      	str	r3, [sp, #28]
 8016744:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8016748:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801674c:	4b86      	ldr	r3, [pc, #536]	; (8016968 <_strtod_l+0xbd0>)
 801674e:	ea0a 0303 	and.w	r3, sl, r3
 8016752:	930d      	str	r3, [sp, #52]	; 0x34
 8016754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016756:	4b85      	ldr	r3, [pc, #532]	; (801696c <_strtod_l+0xbd4>)
 8016758:	429a      	cmp	r2, r3
 801675a:	f040 8090 	bne.w	801687e <_strtod_l+0xae6>
 801675e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8016762:	ec49 8b10 	vmov	d0, r8, r9
 8016766:	f002 fe7b 	bl	8019460 <__ulp>
 801676a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801676e:	ec51 0b10 	vmov	r0, r1, d0
 8016772:	f7e9 ff41 	bl	80005f8 <__aeabi_dmul>
 8016776:	4642      	mov	r2, r8
 8016778:	464b      	mov	r3, r9
 801677a:	f7e9 fd87 	bl	800028c <__adddf3>
 801677e:	460b      	mov	r3, r1
 8016780:	4979      	ldr	r1, [pc, #484]	; (8016968 <_strtod_l+0xbd0>)
 8016782:	4a7b      	ldr	r2, [pc, #492]	; (8016970 <_strtod_l+0xbd8>)
 8016784:	4019      	ands	r1, r3
 8016786:	4291      	cmp	r1, r2
 8016788:	4680      	mov	r8, r0
 801678a:	d944      	bls.n	8016816 <_strtod_l+0xa7e>
 801678c:	ee18 2a90 	vmov	r2, s17
 8016790:	4b78      	ldr	r3, [pc, #480]	; (8016974 <_strtod_l+0xbdc>)
 8016792:	429a      	cmp	r2, r3
 8016794:	d104      	bne.n	80167a0 <_strtod_l+0xa08>
 8016796:	ee18 3a10 	vmov	r3, s16
 801679a:	3301      	adds	r3, #1
 801679c:	f43f ad40 	beq.w	8016220 <_strtod_l+0x488>
 80167a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8016974 <_strtod_l+0xbdc>
 80167a4:	f04f 38ff 	mov.w	r8, #4294967295
 80167a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80167aa:	4620      	mov	r0, r4
 80167ac:	f002 fb2c 	bl	8018e08 <_Bfree>
 80167b0:	9905      	ldr	r1, [sp, #20]
 80167b2:	4620      	mov	r0, r4
 80167b4:	f002 fb28 	bl	8018e08 <_Bfree>
 80167b8:	4659      	mov	r1, fp
 80167ba:	4620      	mov	r0, r4
 80167bc:	f002 fb24 	bl	8018e08 <_Bfree>
 80167c0:	4629      	mov	r1, r5
 80167c2:	4620      	mov	r0, r4
 80167c4:	f002 fb20 	bl	8018e08 <_Bfree>
 80167c8:	e609      	b.n	80163de <_strtod_l+0x646>
 80167ca:	f1b8 0f01 	cmp.w	r8, #1
 80167ce:	d103      	bne.n	80167d8 <_strtod_l+0xa40>
 80167d0:	f1b9 0f00 	cmp.w	r9, #0
 80167d4:	f43f ad95 	beq.w	8016302 <_strtod_l+0x56a>
 80167d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8016930 <_strtod_l+0xb98>
 80167dc:	4f60      	ldr	r7, [pc, #384]	; (8016960 <_strtod_l+0xbc8>)
 80167de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80167e2:	2600      	movs	r6, #0
 80167e4:	e7ae      	b.n	8016744 <_strtod_l+0x9ac>
 80167e6:	4f5f      	ldr	r7, [pc, #380]	; (8016964 <_strtod_l+0xbcc>)
 80167e8:	2600      	movs	r6, #0
 80167ea:	e7a7      	b.n	801673c <_strtod_l+0x9a4>
 80167ec:	4b5d      	ldr	r3, [pc, #372]	; (8016964 <_strtod_l+0xbcc>)
 80167ee:	4630      	mov	r0, r6
 80167f0:	4639      	mov	r1, r7
 80167f2:	2200      	movs	r2, #0
 80167f4:	f7e9 ff00 	bl	80005f8 <__aeabi_dmul>
 80167f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80167fa:	4606      	mov	r6, r0
 80167fc:	460f      	mov	r7, r1
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d09c      	beq.n	801673c <_strtod_l+0x9a4>
 8016802:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8016806:	e79d      	b.n	8016744 <_strtod_l+0x9ac>
 8016808:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8016938 <_strtod_l+0xba0>
 801680c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8016810:	ec57 6b17 	vmov	r6, r7, d7
 8016814:	e796      	b.n	8016744 <_strtod_l+0x9ac>
 8016816:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801681a:	9b04      	ldr	r3, [sp, #16]
 801681c:	46ca      	mov	sl, r9
 801681e:	2b00      	cmp	r3, #0
 8016820:	d1c2      	bne.n	80167a8 <_strtod_l+0xa10>
 8016822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016828:	0d1b      	lsrs	r3, r3, #20
 801682a:	051b      	lsls	r3, r3, #20
 801682c:	429a      	cmp	r2, r3
 801682e:	d1bb      	bne.n	80167a8 <_strtod_l+0xa10>
 8016830:	4630      	mov	r0, r6
 8016832:	4639      	mov	r1, r7
 8016834:	f7ea fa90 	bl	8000d58 <__aeabi_d2lz>
 8016838:	f7e9 feb0 	bl	800059c <__aeabi_l2d>
 801683c:	4602      	mov	r2, r0
 801683e:	460b      	mov	r3, r1
 8016840:	4630      	mov	r0, r6
 8016842:	4639      	mov	r1, r7
 8016844:	f7e9 fd20 	bl	8000288 <__aeabi_dsub>
 8016848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801684a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801684e:	ea43 0308 	orr.w	r3, r3, r8
 8016852:	4313      	orrs	r3, r2
 8016854:	4606      	mov	r6, r0
 8016856:	460f      	mov	r7, r1
 8016858:	d054      	beq.n	8016904 <_strtod_l+0xb6c>
 801685a:	a339      	add	r3, pc, #228	; (adr r3, 8016940 <_strtod_l+0xba8>)
 801685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016860:	f7ea f93c 	bl	8000adc <__aeabi_dcmplt>
 8016864:	2800      	cmp	r0, #0
 8016866:	f47f ace5 	bne.w	8016234 <_strtod_l+0x49c>
 801686a:	a337      	add	r3, pc, #220	; (adr r3, 8016948 <_strtod_l+0xbb0>)
 801686c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016870:	4630      	mov	r0, r6
 8016872:	4639      	mov	r1, r7
 8016874:	f7ea f950 	bl	8000b18 <__aeabi_dcmpgt>
 8016878:	2800      	cmp	r0, #0
 801687a:	d095      	beq.n	80167a8 <_strtod_l+0xa10>
 801687c:	e4da      	b.n	8016234 <_strtod_l+0x49c>
 801687e:	9b04      	ldr	r3, [sp, #16]
 8016880:	b333      	cbz	r3, 80168d0 <_strtod_l+0xb38>
 8016882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016884:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016888:	d822      	bhi.n	80168d0 <_strtod_l+0xb38>
 801688a:	a331      	add	r3, pc, #196	; (adr r3, 8016950 <_strtod_l+0xbb8>)
 801688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016890:	4630      	mov	r0, r6
 8016892:	4639      	mov	r1, r7
 8016894:	f7ea f92c 	bl	8000af0 <__aeabi_dcmple>
 8016898:	b1a0      	cbz	r0, 80168c4 <_strtod_l+0xb2c>
 801689a:	4639      	mov	r1, r7
 801689c:	4630      	mov	r0, r6
 801689e:	f7ea f983 	bl	8000ba8 <__aeabi_d2uiz>
 80168a2:	2801      	cmp	r0, #1
 80168a4:	bf38      	it	cc
 80168a6:	2001      	movcc	r0, #1
 80168a8:	f7e9 fe2c 	bl	8000504 <__aeabi_ui2d>
 80168ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80168ae:	4606      	mov	r6, r0
 80168b0:	460f      	mov	r7, r1
 80168b2:	bb23      	cbnz	r3, 80168fe <_strtod_l+0xb66>
 80168b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80168b8:	9010      	str	r0, [sp, #64]	; 0x40
 80168ba:	9311      	str	r3, [sp, #68]	; 0x44
 80168bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80168c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80168c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80168c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80168cc:	1a9b      	subs	r3, r3, r2
 80168ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80168d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80168d4:	eeb0 0a48 	vmov.f32	s0, s16
 80168d8:	eef0 0a68 	vmov.f32	s1, s17
 80168dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80168e0:	f002 fdbe 	bl	8019460 <__ulp>
 80168e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80168e8:	ec53 2b10 	vmov	r2, r3, d0
 80168ec:	f7e9 fe84 	bl	80005f8 <__aeabi_dmul>
 80168f0:	ec53 2b18 	vmov	r2, r3, d8
 80168f4:	f7e9 fcca 	bl	800028c <__adddf3>
 80168f8:	4680      	mov	r8, r0
 80168fa:	4689      	mov	r9, r1
 80168fc:	e78d      	b.n	801681a <_strtod_l+0xa82>
 80168fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016902:	e7db      	b.n	80168bc <_strtod_l+0xb24>
 8016904:	a314      	add	r3, pc, #80	; (adr r3, 8016958 <_strtod_l+0xbc0>)
 8016906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801690a:	f7ea f8e7 	bl	8000adc <__aeabi_dcmplt>
 801690e:	e7b3      	b.n	8016878 <_strtod_l+0xae0>
 8016910:	2300      	movs	r3, #0
 8016912:	930a      	str	r3, [sp, #40]	; 0x28
 8016914:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016918:	6013      	str	r3, [r2, #0]
 801691a:	f7ff ba7c 	b.w	8015e16 <_strtod_l+0x7e>
 801691e:	2a65      	cmp	r2, #101	; 0x65
 8016920:	f43f ab75 	beq.w	801600e <_strtod_l+0x276>
 8016924:	2a45      	cmp	r2, #69	; 0x45
 8016926:	f43f ab72 	beq.w	801600e <_strtod_l+0x276>
 801692a:	2301      	movs	r3, #1
 801692c:	f7ff bbaa 	b.w	8016084 <_strtod_l+0x2ec>
 8016930:	00000000 	.word	0x00000000
 8016934:	bff00000 	.word	0xbff00000
 8016938:	00000000 	.word	0x00000000
 801693c:	3ff00000 	.word	0x3ff00000
 8016940:	94a03595 	.word	0x94a03595
 8016944:	3fdfffff 	.word	0x3fdfffff
 8016948:	35afe535 	.word	0x35afe535
 801694c:	3fe00000 	.word	0x3fe00000
 8016950:	ffc00000 	.word	0xffc00000
 8016954:	41dfffff 	.word	0x41dfffff
 8016958:	94a03595 	.word	0x94a03595
 801695c:	3fcfffff 	.word	0x3fcfffff
 8016960:	3ff00000 	.word	0x3ff00000
 8016964:	3fe00000 	.word	0x3fe00000
 8016968:	7ff00000 	.word	0x7ff00000
 801696c:	7fe00000 	.word	0x7fe00000
 8016970:	7c9fffff 	.word	0x7c9fffff
 8016974:	7fefffff 	.word	0x7fefffff

08016978 <strtod>:
 8016978:	460a      	mov	r2, r1
 801697a:	4601      	mov	r1, r0
 801697c:	4802      	ldr	r0, [pc, #8]	; (8016988 <strtod+0x10>)
 801697e:	4b03      	ldr	r3, [pc, #12]	; (801698c <strtod+0x14>)
 8016980:	6800      	ldr	r0, [r0, #0]
 8016982:	f7ff ba09 	b.w	8015d98 <_strtod_l>
 8016986:	bf00      	nop
 8016988:	200001e8 	.word	0x200001e8
 801698c:	20000030 	.word	0x20000030

08016990 <_strtol_l.constprop.0>:
 8016990:	2b01      	cmp	r3, #1
 8016992:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016996:	d001      	beq.n	801699c <_strtol_l.constprop.0+0xc>
 8016998:	2b24      	cmp	r3, #36	; 0x24
 801699a:	d906      	bls.n	80169aa <_strtol_l.constprop.0+0x1a>
 801699c:	f000 feca 	bl	8017734 <__errno>
 80169a0:	2316      	movs	r3, #22
 80169a2:	6003      	str	r3, [r0, #0]
 80169a4:	2000      	movs	r0, #0
 80169a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016a90 <_strtol_l.constprop.0+0x100>
 80169ae:	460d      	mov	r5, r1
 80169b0:	462e      	mov	r6, r5
 80169b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80169b6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80169ba:	f017 0708 	ands.w	r7, r7, #8
 80169be:	d1f7      	bne.n	80169b0 <_strtol_l.constprop.0+0x20>
 80169c0:	2c2d      	cmp	r4, #45	; 0x2d
 80169c2:	d132      	bne.n	8016a2a <_strtol_l.constprop.0+0x9a>
 80169c4:	782c      	ldrb	r4, [r5, #0]
 80169c6:	2701      	movs	r7, #1
 80169c8:	1cb5      	adds	r5, r6, #2
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	d05b      	beq.n	8016a86 <_strtol_l.constprop.0+0xf6>
 80169ce:	2b10      	cmp	r3, #16
 80169d0:	d109      	bne.n	80169e6 <_strtol_l.constprop.0+0x56>
 80169d2:	2c30      	cmp	r4, #48	; 0x30
 80169d4:	d107      	bne.n	80169e6 <_strtol_l.constprop.0+0x56>
 80169d6:	782c      	ldrb	r4, [r5, #0]
 80169d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80169dc:	2c58      	cmp	r4, #88	; 0x58
 80169de:	d14d      	bne.n	8016a7c <_strtol_l.constprop.0+0xec>
 80169e0:	786c      	ldrb	r4, [r5, #1]
 80169e2:	2310      	movs	r3, #16
 80169e4:	3502      	adds	r5, #2
 80169e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80169ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80169ee:	f04f 0e00 	mov.w	lr, #0
 80169f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80169f6:	4676      	mov	r6, lr
 80169f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80169fc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8016a00:	f1bc 0f09 	cmp.w	ip, #9
 8016a04:	d816      	bhi.n	8016a34 <_strtol_l.constprop.0+0xa4>
 8016a06:	4664      	mov	r4, ip
 8016a08:	42a3      	cmp	r3, r4
 8016a0a:	dd24      	ble.n	8016a56 <_strtol_l.constprop.0+0xc6>
 8016a0c:	f1be 3fff 	cmp.w	lr, #4294967295
 8016a10:	d008      	beq.n	8016a24 <_strtol_l.constprop.0+0x94>
 8016a12:	45b1      	cmp	r9, r6
 8016a14:	d31c      	bcc.n	8016a50 <_strtol_l.constprop.0+0xc0>
 8016a16:	d101      	bne.n	8016a1c <_strtol_l.constprop.0+0x8c>
 8016a18:	45a2      	cmp	sl, r4
 8016a1a:	db19      	blt.n	8016a50 <_strtol_l.constprop.0+0xc0>
 8016a1c:	fb06 4603 	mla	r6, r6, r3, r4
 8016a20:	f04f 0e01 	mov.w	lr, #1
 8016a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a28:	e7e8      	b.n	80169fc <_strtol_l.constprop.0+0x6c>
 8016a2a:	2c2b      	cmp	r4, #43	; 0x2b
 8016a2c:	bf04      	itt	eq
 8016a2e:	782c      	ldrbeq	r4, [r5, #0]
 8016a30:	1cb5      	addeq	r5, r6, #2
 8016a32:	e7ca      	b.n	80169ca <_strtol_l.constprop.0+0x3a>
 8016a34:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8016a38:	f1bc 0f19 	cmp.w	ip, #25
 8016a3c:	d801      	bhi.n	8016a42 <_strtol_l.constprop.0+0xb2>
 8016a3e:	3c37      	subs	r4, #55	; 0x37
 8016a40:	e7e2      	b.n	8016a08 <_strtol_l.constprop.0+0x78>
 8016a42:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8016a46:	f1bc 0f19 	cmp.w	ip, #25
 8016a4a:	d804      	bhi.n	8016a56 <_strtol_l.constprop.0+0xc6>
 8016a4c:	3c57      	subs	r4, #87	; 0x57
 8016a4e:	e7db      	b.n	8016a08 <_strtol_l.constprop.0+0x78>
 8016a50:	f04f 3eff 	mov.w	lr, #4294967295
 8016a54:	e7e6      	b.n	8016a24 <_strtol_l.constprop.0+0x94>
 8016a56:	f1be 3fff 	cmp.w	lr, #4294967295
 8016a5a:	d105      	bne.n	8016a68 <_strtol_l.constprop.0+0xd8>
 8016a5c:	2322      	movs	r3, #34	; 0x22
 8016a5e:	6003      	str	r3, [r0, #0]
 8016a60:	4646      	mov	r6, r8
 8016a62:	b942      	cbnz	r2, 8016a76 <_strtol_l.constprop.0+0xe6>
 8016a64:	4630      	mov	r0, r6
 8016a66:	e79e      	b.n	80169a6 <_strtol_l.constprop.0+0x16>
 8016a68:	b107      	cbz	r7, 8016a6c <_strtol_l.constprop.0+0xdc>
 8016a6a:	4276      	negs	r6, r6
 8016a6c:	2a00      	cmp	r2, #0
 8016a6e:	d0f9      	beq.n	8016a64 <_strtol_l.constprop.0+0xd4>
 8016a70:	f1be 0f00 	cmp.w	lr, #0
 8016a74:	d000      	beq.n	8016a78 <_strtol_l.constprop.0+0xe8>
 8016a76:	1e69      	subs	r1, r5, #1
 8016a78:	6011      	str	r1, [r2, #0]
 8016a7a:	e7f3      	b.n	8016a64 <_strtol_l.constprop.0+0xd4>
 8016a7c:	2430      	movs	r4, #48	; 0x30
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d1b1      	bne.n	80169e6 <_strtol_l.constprop.0+0x56>
 8016a82:	2308      	movs	r3, #8
 8016a84:	e7af      	b.n	80169e6 <_strtol_l.constprop.0+0x56>
 8016a86:	2c30      	cmp	r4, #48	; 0x30
 8016a88:	d0a5      	beq.n	80169d6 <_strtol_l.constprop.0+0x46>
 8016a8a:	230a      	movs	r3, #10
 8016a8c:	e7ab      	b.n	80169e6 <_strtol_l.constprop.0+0x56>
 8016a8e:	bf00      	nop
 8016a90:	0801b679 	.word	0x0801b679

08016a94 <strtol>:
 8016a94:	4613      	mov	r3, r2
 8016a96:	460a      	mov	r2, r1
 8016a98:	4601      	mov	r1, r0
 8016a9a:	4802      	ldr	r0, [pc, #8]	; (8016aa4 <strtol+0x10>)
 8016a9c:	6800      	ldr	r0, [r0, #0]
 8016a9e:	f7ff bf77 	b.w	8016990 <_strtol_l.constprop.0>
 8016aa2:	bf00      	nop
 8016aa4:	200001e8 	.word	0x200001e8

08016aa8 <__cvt>:
 8016aa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016aac:	ec55 4b10 	vmov	r4, r5, d0
 8016ab0:	2d00      	cmp	r5, #0
 8016ab2:	460e      	mov	r6, r1
 8016ab4:	4619      	mov	r1, r3
 8016ab6:	462b      	mov	r3, r5
 8016ab8:	bfbb      	ittet	lt
 8016aba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016abe:	461d      	movlt	r5, r3
 8016ac0:	2300      	movge	r3, #0
 8016ac2:	232d      	movlt	r3, #45	; 0x2d
 8016ac4:	700b      	strb	r3, [r1, #0]
 8016ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016ac8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016acc:	4691      	mov	r9, r2
 8016ace:	f023 0820 	bic.w	r8, r3, #32
 8016ad2:	bfbc      	itt	lt
 8016ad4:	4622      	movlt	r2, r4
 8016ad6:	4614      	movlt	r4, r2
 8016ad8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016adc:	d005      	beq.n	8016aea <__cvt+0x42>
 8016ade:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016ae2:	d100      	bne.n	8016ae6 <__cvt+0x3e>
 8016ae4:	3601      	adds	r6, #1
 8016ae6:	2102      	movs	r1, #2
 8016ae8:	e000      	b.n	8016aec <__cvt+0x44>
 8016aea:	2103      	movs	r1, #3
 8016aec:	ab03      	add	r3, sp, #12
 8016aee:	9301      	str	r3, [sp, #4]
 8016af0:	ab02      	add	r3, sp, #8
 8016af2:	9300      	str	r3, [sp, #0]
 8016af4:	ec45 4b10 	vmov	d0, r4, r5
 8016af8:	4653      	mov	r3, sl
 8016afa:	4632      	mov	r2, r6
 8016afc:	f000 fee8 	bl	80178d0 <_dtoa_r>
 8016b00:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016b04:	4607      	mov	r7, r0
 8016b06:	d102      	bne.n	8016b0e <__cvt+0x66>
 8016b08:	f019 0f01 	tst.w	r9, #1
 8016b0c:	d022      	beq.n	8016b54 <__cvt+0xac>
 8016b0e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016b12:	eb07 0906 	add.w	r9, r7, r6
 8016b16:	d110      	bne.n	8016b3a <__cvt+0x92>
 8016b18:	783b      	ldrb	r3, [r7, #0]
 8016b1a:	2b30      	cmp	r3, #48	; 0x30
 8016b1c:	d10a      	bne.n	8016b34 <__cvt+0x8c>
 8016b1e:	2200      	movs	r2, #0
 8016b20:	2300      	movs	r3, #0
 8016b22:	4620      	mov	r0, r4
 8016b24:	4629      	mov	r1, r5
 8016b26:	f7e9 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8016b2a:	b918      	cbnz	r0, 8016b34 <__cvt+0x8c>
 8016b2c:	f1c6 0601 	rsb	r6, r6, #1
 8016b30:	f8ca 6000 	str.w	r6, [sl]
 8016b34:	f8da 3000 	ldr.w	r3, [sl]
 8016b38:	4499      	add	r9, r3
 8016b3a:	2200      	movs	r2, #0
 8016b3c:	2300      	movs	r3, #0
 8016b3e:	4620      	mov	r0, r4
 8016b40:	4629      	mov	r1, r5
 8016b42:	f7e9 ffc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8016b46:	b108      	cbz	r0, 8016b4c <__cvt+0xa4>
 8016b48:	f8cd 900c 	str.w	r9, [sp, #12]
 8016b4c:	2230      	movs	r2, #48	; 0x30
 8016b4e:	9b03      	ldr	r3, [sp, #12]
 8016b50:	454b      	cmp	r3, r9
 8016b52:	d307      	bcc.n	8016b64 <__cvt+0xbc>
 8016b54:	9b03      	ldr	r3, [sp, #12]
 8016b56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016b58:	1bdb      	subs	r3, r3, r7
 8016b5a:	4638      	mov	r0, r7
 8016b5c:	6013      	str	r3, [r2, #0]
 8016b5e:	b004      	add	sp, #16
 8016b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b64:	1c59      	adds	r1, r3, #1
 8016b66:	9103      	str	r1, [sp, #12]
 8016b68:	701a      	strb	r2, [r3, #0]
 8016b6a:	e7f0      	b.n	8016b4e <__cvt+0xa6>

08016b6c <__exponent>:
 8016b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016b6e:	4603      	mov	r3, r0
 8016b70:	2900      	cmp	r1, #0
 8016b72:	bfb8      	it	lt
 8016b74:	4249      	neglt	r1, r1
 8016b76:	f803 2b02 	strb.w	r2, [r3], #2
 8016b7a:	bfb4      	ite	lt
 8016b7c:	222d      	movlt	r2, #45	; 0x2d
 8016b7e:	222b      	movge	r2, #43	; 0x2b
 8016b80:	2909      	cmp	r1, #9
 8016b82:	7042      	strb	r2, [r0, #1]
 8016b84:	dd2a      	ble.n	8016bdc <__exponent+0x70>
 8016b86:	f10d 0207 	add.w	r2, sp, #7
 8016b8a:	4617      	mov	r7, r2
 8016b8c:	260a      	movs	r6, #10
 8016b8e:	4694      	mov	ip, r2
 8016b90:	fb91 f5f6 	sdiv	r5, r1, r6
 8016b94:	fb06 1415 	mls	r4, r6, r5, r1
 8016b98:	3430      	adds	r4, #48	; 0x30
 8016b9a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016b9e:	460c      	mov	r4, r1
 8016ba0:	2c63      	cmp	r4, #99	; 0x63
 8016ba2:	f102 32ff 	add.w	r2, r2, #4294967295
 8016ba6:	4629      	mov	r1, r5
 8016ba8:	dcf1      	bgt.n	8016b8e <__exponent+0x22>
 8016baa:	3130      	adds	r1, #48	; 0x30
 8016bac:	f1ac 0402 	sub.w	r4, ip, #2
 8016bb0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016bb4:	1c41      	adds	r1, r0, #1
 8016bb6:	4622      	mov	r2, r4
 8016bb8:	42ba      	cmp	r2, r7
 8016bba:	d30a      	bcc.n	8016bd2 <__exponent+0x66>
 8016bbc:	f10d 0209 	add.w	r2, sp, #9
 8016bc0:	eba2 020c 	sub.w	r2, r2, ip
 8016bc4:	42bc      	cmp	r4, r7
 8016bc6:	bf88      	it	hi
 8016bc8:	2200      	movhi	r2, #0
 8016bca:	4413      	add	r3, r2
 8016bcc:	1a18      	subs	r0, r3, r0
 8016bce:	b003      	add	sp, #12
 8016bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016bd2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8016bd6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8016bda:	e7ed      	b.n	8016bb8 <__exponent+0x4c>
 8016bdc:	2330      	movs	r3, #48	; 0x30
 8016bde:	3130      	adds	r1, #48	; 0x30
 8016be0:	7083      	strb	r3, [r0, #2]
 8016be2:	70c1      	strb	r1, [r0, #3]
 8016be4:	1d03      	adds	r3, r0, #4
 8016be6:	e7f1      	b.n	8016bcc <__exponent+0x60>

08016be8 <_printf_float>:
 8016be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bec:	ed2d 8b02 	vpush	{d8}
 8016bf0:	b08d      	sub	sp, #52	; 0x34
 8016bf2:	460c      	mov	r4, r1
 8016bf4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8016bf8:	4616      	mov	r6, r2
 8016bfa:	461f      	mov	r7, r3
 8016bfc:	4605      	mov	r5, r0
 8016bfe:	f000 fcf9 	bl	80175f4 <_localeconv_r>
 8016c02:	f8d0 a000 	ldr.w	sl, [r0]
 8016c06:	4650      	mov	r0, sl
 8016c08:	f7e9 fb32 	bl	8000270 <strlen>
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8016c10:	6823      	ldr	r3, [r4, #0]
 8016c12:	9305      	str	r3, [sp, #20]
 8016c14:	f8d8 3000 	ldr.w	r3, [r8]
 8016c18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016c1c:	3307      	adds	r3, #7
 8016c1e:	f023 0307 	bic.w	r3, r3, #7
 8016c22:	f103 0208 	add.w	r2, r3, #8
 8016c26:	f8c8 2000 	str.w	r2, [r8]
 8016c2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016c2e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016c32:	9307      	str	r3, [sp, #28]
 8016c34:	f8cd 8018 	str.w	r8, [sp, #24]
 8016c38:	ee08 0a10 	vmov	s16, r0
 8016c3c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8016c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c44:	4b9e      	ldr	r3, [pc, #632]	; (8016ec0 <_printf_float+0x2d8>)
 8016c46:	f04f 32ff 	mov.w	r2, #4294967295
 8016c4a:	f7e9 ff6f 	bl	8000b2c <__aeabi_dcmpun>
 8016c4e:	bb88      	cbnz	r0, 8016cb4 <_printf_float+0xcc>
 8016c50:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016c54:	4b9a      	ldr	r3, [pc, #616]	; (8016ec0 <_printf_float+0x2d8>)
 8016c56:	f04f 32ff 	mov.w	r2, #4294967295
 8016c5a:	f7e9 ff49 	bl	8000af0 <__aeabi_dcmple>
 8016c5e:	bb48      	cbnz	r0, 8016cb4 <_printf_float+0xcc>
 8016c60:	2200      	movs	r2, #0
 8016c62:	2300      	movs	r3, #0
 8016c64:	4640      	mov	r0, r8
 8016c66:	4649      	mov	r1, r9
 8016c68:	f7e9 ff38 	bl	8000adc <__aeabi_dcmplt>
 8016c6c:	b110      	cbz	r0, 8016c74 <_printf_float+0x8c>
 8016c6e:	232d      	movs	r3, #45	; 0x2d
 8016c70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016c74:	4a93      	ldr	r2, [pc, #588]	; (8016ec4 <_printf_float+0x2dc>)
 8016c76:	4b94      	ldr	r3, [pc, #592]	; (8016ec8 <_printf_float+0x2e0>)
 8016c78:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016c7c:	bf94      	ite	ls
 8016c7e:	4690      	movls	r8, r2
 8016c80:	4698      	movhi	r8, r3
 8016c82:	2303      	movs	r3, #3
 8016c84:	6123      	str	r3, [r4, #16]
 8016c86:	9b05      	ldr	r3, [sp, #20]
 8016c88:	f023 0304 	bic.w	r3, r3, #4
 8016c8c:	6023      	str	r3, [r4, #0]
 8016c8e:	f04f 0900 	mov.w	r9, #0
 8016c92:	9700      	str	r7, [sp, #0]
 8016c94:	4633      	mov	r3, r6
 8016c96:	aa0b      	add	r2, sp, #44	; 0x2c
 8016c98:	4621      	mov	r1, r4
 8016c9a:	4628      	mov	r0, r5
 8016c9c:	f000 f9da 	bl	8017054 <_printf_common>
 8016ca0:	3001      	adds	r0, #1
 8016ca2:	f040 8090 	bne.w	8016dc6 <_printf_float+0x1de>
 8016ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8016caa:	b00d      	add	sp, #52	; 0x34
 8016cac:	ecbd 8b02 	vpop	{d8}
 8016cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cb4:	4642      	mov	r2, r8
 8016cb6:	464b      	mov	r3, r9
 8016cb8:	4640      	mov	r0, r8
 8016cba:	4649      	mov	r1, r9
 8016cbc:	f7e9 ff36 	bl	8000b2c <__aeabi_dcmpun>
 8016cc0:	b140      	cbz	r0, 8016cd4 <_printf_float+0xec>
 8016cc2:	464b      	mov	r3, r9
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	bfbc      	itt	lt
 8016cc8:	232d      	movlt	r3, #45	; 0x2d
 8016cca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016cce:	4a7f      	ldr	r2, [pc, #508]	; (8016ecc <_printf_float+0x2e4>)
 8016cd0:	4b7f      	ldr	r3, [pc, #508]	; (8016ed0 <_printf_float+0x2e8>)
 8016cd2:	e7d1      	b.n	8016c78 <_printf_float+0x90>
 8016cd4:	6863      	ldr	r3, [r4, #4]
 8016cd6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016cda:	9206      	str	r2, [sp, #24]
 8016cdc:	1c5a      	adds	r2, r3, #1
 8016cde:	d13f      	bne.n	8016d60 <_printf_float+0x178>
 8016ce0:	2306      	movs	r3, #6
 8016ce2:	6063      	str	r3, [r4, #4]
 8016ce4:	9b05      	ldr	r3, [sp, #20]
 8016ce6:	6861      	ldr	r1, [r4, #4]
 8016ce8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016cec:	2300      	movs	r3, #0
 8016cee:	9303      	str	r3, [sp, #12]
 8016cf0:	ab0a      	add	r3, sp, #40	; 0x28
 8016cf2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016cf6:	ab09      	add	r3, sp, #36	; 0x24
 8016cf8:	ec49 8b10 	vmov	d0, r8, r9
 8016cfc:	9300      	str	r3, [sp, #0]
 8016cfe:	6022      	str	r2, [r4, #0]
 8016d00:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016d04:	4628      	mov	r0, r5
 8016d06:	f7ff fecf 	bl	8016aa8 <__cvt>
 8016d0a:	9b06      	ldr	r3, [sp, #24]
 8016d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016d0e:	2b47      	cmp	r3, #71	; 0x47
 8016d10:	4680      	mov	r8, r0
 8016d12:	d108      	bne.n	8016d26 <_printf_float+0x13e>
 8016d14:	1cc8      	adds	r0, r1, #3
 8016d16:	db02      	blt.n	8016d1e <_printf_float+0x136>
 8016d18:	6863      	ldr	r3, [r4, #4]
 8016d1a:	4299      	cmp	r1, r3
 8016d1c:	dd41      	ble.n	8016da2 <_printf_float+0x1ba>
 8016d1e:	f1ab 0302 	sub.w	r3, fp, #2
 8016d22:	fa5f fb83 	uxtb.w	fp, r3
 8016d26:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016d2a:	d820      	bhi.n	8016d6e <_printf_float+0x186>
 8016d2c:	3901      	subs	r1, #1
 8016d2e:	465a      	mov	r2, fp
 8016d30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016d34:	9109      	str	r1, [sp, #36]	; 0x24
 8016d36:	f7ff ff19 	bl	8016b6c <__exponent>
 8016d3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d3c:	1813      	adds	r3, r2, r0
 8016d3e:	2a01      	cmp	r2, #1
 8016d40:	4681      	mov	r9, r0
 8016d42:	6123      	str	r3, [r4, #16]
 8016d44:	dc02      	bgt.n	8016d4c <_printf_float+0x164>
 8016d46:	6822      	ldr	r2, [r4, #0]
 8016d48:	07d2      	lsls	r2, r2, #31
 8016d4a:	d501      	bpl.n	8016d50 <_printf_float+0x168>
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	6123      	str	r3, [r4, #16]
 8016d50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d09c      	beq.n	8016c92 <_printf_float+0xaa>
 8016d58:	232d      	movs	r3, #45	; 0x2d
 8016d5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016d5e:	e798      	b.n	8016c92 <_printf_float+0xaa>
 8016d60:	9a06      	ldr	r2, [sp, #24]
 8016d62:	2a47      	cmp	r2, #71	; 0x47
 8016d64:	d1be      	bne.n	8016ce4 <_printf_float+0xfc>
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	d1bc      	bne.n	8016ce4 <_printf_float+0xfc>
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	e7b9      	b.n	8016ce2 <_printf_float+0xfa>
 8016d6e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016d72:	d118      	bne.n	8016da6 <_printf_float+0x1be>
 8016d74:	2900      	cmp	r1, #0
 8016d76:	6863      	ldr	r3, [r4, #4]
 8016d78:	dd0b      	ble.n	8016d92 <_printf_float+0x1aa>
 8016d7a:	6121      	str	r1, [r4, #16]
 8016d7c:	b913      	cbnz	r3, 8016d84 <_printf_float+0x19c>
 8016d7e:	6822      	ldr	r2, [r4, #0]
 8016d80:	07d0      	lsls	r0, r2, #31
 8016d82:	d502      	bpl.n	8016d8a <_printf_float+0x1a2>
 8016d84:	3301      	adds	r3, #1
 8016d86:	440b      	add	r3, r1
 8016d88:	6123      	str	r3, [r4, #16]
 8016d8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8016d8c:	f04f 0900 	mov.w	r9, #0
 8016d90:	e7de      	b.n	8016d50 <_printf_float+0x168>
 8016d92:	b913      	cbnz	r3, 8016d9a <_printf_float+0x1b2>
 8016d94:	6822      	ldr	r2, [r4, #0]
 8016d96:	07d2      	lsls	r2, r2, #31
 8016d98:	d501      	bpl.n	8016d9e <_printf_float+0x1b6>
 8016d9a:	3302      	adds	r3, #2
 8016d9c:	e7f4      	b.n	8016d88 <_printf_float+0x1a0>
 8016d9e:	2301      	movs	r3, #1
 8016da0:	e7f2      	b.n	8016d88 <_printf_float+0x1a0>
 8016da2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016da8:	4299      	cmp	r1, r3
 8016daa:	db05      	blt.n	8016db8 <_printf_float+0x1d0>
 8016dac:	6823      	ldr	r3, [r4, #0]
 8016dae:	6121      	str	r1, [r4, #16]
 8016db0:	07d8      	lsls	r0, r3, #31
 8016db2:	d5ea      	bpl.n	8016d8a <_printf_float+0x1a2>
 8016db4:	1c4b      	adds	r3, r1, #1
 8016db6:	e7e7      	b.n	8016d88 <_printf_float+0x1a0>
 8016db8:	2900      	cmp	r1, #0
 8016dba:	bfd4      	ite	le
 8016dbc:	f1c1 0202 	rsble	r2, r1, #2
 8016dc0:	2201      	movgt	r2, #1
 8016dc2:	4413      	add	r3, r2
 8016dc4:	e7e0      	b.n	8016d88 <_printf_float+0x1a0>
 8016dc6:	6823      	ldr	r3, [r4, #0]
 8016dc8:	055a      	lsls	r2, r3, #21
 8016dca:	d407      	bmi.n	8016ddc <_printf_float+0x1f4>
 8016dcc:	6923      	ldr	r3, [r4, #16]
 8016dce:	4642      	mov	r2, r8
 8016dd0:	4631      	mov	r1, r6
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	47b8      	blx	r7
 8016dd6:	3001      	adds	r0, #1
 8016dd8:	d12c      	bne.n	8016e34 <_printf_float+0x24c>
 8016dda:	e764      	b.n	8016ca6 <_printf_float+0xbe>
 8016ddc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016de0:	f240 80e0 	bls.w	8016fa4 <_printf_float+0x3bc>
 8016de4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016de8:	2200      	movs	r2, #0
 8016dea:	2300      	movs	r3, #0
 8016dec:	f7e9 fe6c 	bl	8000ac8 <__aeabi_dcmpeq>
 8016df0:	2800      	cmp	r0, #0
 8016df2:	d034      	beq.n	8016e5e <_printf_float+0x276>
 8016df4:	4a37      	ldr	r2, [pc, #220]	; (8016ed4 <_printf_float+0x2ec>)
 8016df6:	2301      	movs	r3, #1
 8016df8:	4631      	mov	r1, r6
 8016dfa:	4628      	mov	r0, r5
 8016dfc:	47b8      	blx	r7
 8016dfe:	3001      	adds	r0, #1
 8016e00:	f43f af51 	beq.w	8016ca6 <_printf_float+0xbe>
 8016e04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	db02      	blt.n	8016e12 <_printf_float+0x22a>
 8016e0c:	6823      	ldr	r3, [r4, #0]
 8016e0e:	07d8      	lsls	r0, r3, #31
 8016e10:	d510      	bpl.n	8016e34 <_printf_float+0x24c>
 8016e12:	ee18 3a10 	vmov	r3, s16
 8016e16:	4652      	mov	r2, sl
 8016e18:	4631      	mov	r1, r6
 8016e1a:	4628      	mov	r0, r5
 8016e1c:	47b8      	blx	r7
 8016e1e:	3001      	adds	r0, #1
 8016e20:	f43f af41 	beq.w	8016ca6 <_printf_float+0xbe>
 8016e24:	f04f 0800 	mov.w	r8, #0
 8016e28:	f104 091a 	add.w	r9, r4, #26
 8016e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016e2e:	3b01      	subs	r3, #1
 8016e30:	4543      	cmp	r3, r8
 8016e32:	dc09      	bgt.n	8016e48 <_printf_float+0x260>
 8016e34:	6823      	ldr	r3, [r4, #0]
 8016e36:	079b      	lsls	r3, r3, #30
 8016e38:	f100 8107 	bmi.w	801704a <_printf_float+0x462>
 8016e3c:	68e0      	ldr	r0, [r4, #12]
 8016e3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e40:	4298      	cmp	r0, r3
 8016e42:	bfb8      	it	lt
 8016e44:	4618      	movlt	r0, r3
 8016e46:	e730      	b.n	8016caa <_printf_float+0xc2>
 8016e48:	2301      	movs	r3, #1
 8016e4a:	464a      	mov	r2, r9
 8016e4c:	4631      	mov	r1, r6
 8016e4e:	4628      	mov	r0, r5
 8016e50:	47b8      	blx	r7
 8016e52:	3001      	adds	r0, #1
 8016e54:	f43f af27 	beq.w	8016ca6 <_printf_float+0xbe>
 8016e58:	f108 0801 	add.w	r8, r8, #1
 8016e5c:	e7e6      	b.n	8016e2c <_printf_float+0x244>
 8016e5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	dc39      	bgt.n	8016ed8 <_printf_float+0x2f0>
 8016e64:	4a1b      	ldr	r2, [pc, #108]	; (8016ed4 <_printf_float+0x2ec>)
 8016e66:	2301      	movs	r3, #1
 8016e68:	4631      	mov	r1, r6
 8016e6a:	4628      	mov	r0, r5
 8016e6c:	47b8      	blx	r7
 8016e6e:	3001      	adds	r0, #1
 8016e70:	f43f af19 	beq.w	8016ca6 <_printf_float+0xbe>
 8016e74:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016e78:	4313      	orrs	r3, r2
 8016e7a:	d102      	bne.n	8016e82 <_printf_float+0x29a>
 8016e7c:	6823      	ldr	r3, [r4, #0]
 8016e7e:	07d9      	lsls	r1, r3, #31
 8016e80:	d5d8      	bpl.n	8016e34 <_printf_float+0x24c>
 8016e82:	ee18 3a10 	vmov	r3, s16
 8016e86:	4652      	mov	r2, sl
 8016e88:	4631      	mov	r1, r6
 8016e8a:	4628      	mov	r0, r5
 8016e8c:	47b8      	blx	r7
 8016e8e:	3001      	adds	r0, #1
 8016e90:	f43f af09 	beq.w	8016ca6 <_printf_float+0xbe>
 8016e94:	f04f 0900 	mov.w	r9, #0
 8016e98:	f104 0a1a 	add.w	sl, r4, #26
 8016e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e9e:	425b      	negs	r3, r3
 8016ea0:	454b      	cmp	r3, r9
 8016ea2:	dc01      	bgt.n	8016ea8 <_printf_float+0x2c0>
 8016ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ea6:	e792      	b.n	8016dce <_printf_float+0x1e6>
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	4652      	mov	r2, sl
 8016eac:	4631      	mov	r1, r6
 8016eae:	4628      	mov	r0, r5
 8016eb0:	47b8      	blx	r7
 8016eb2:	3001      	adds	r0, #1
 8016eb4:	f43f aef7 	beq.w	8016ca6 <_printf_float+0xbe>
 8016eb8:	f109 0901 	add.w	r9, r9, #1
 8016ebc:	e7ee      	b.n	8016e9c <_printf_float+0x2b4>
 8016ebe:	bf00      	nop
 8016ec0:	7fefffff 	.word	0x7fefffff
 8016ec4:	0801b779 	.word	0x0801b779
 8016ec8:	0801b77d 	.word	0x0801b77d
 8016ecc:	0801b781 	.word	0x0801b781
 8016ed0:	0801b785 	.word	0x0801b785
 8016ed4:	0801b789 	.word	0x0801b789
 8016ed8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016eda:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016edc:	429a      	cmp	r2, r3
 8016ede:	bfa8      	it	ge
 8016ee0:	461a      	movge	r2, r3
 8016ee2:	2a00      	cmp	r2, #0
 8016ee4:	4691      	mov	r9, r2
 8016ee6:	dc37      	bgt.n	8016f58 <_printf_float+0x370>
 8016ee8:	f04f 0b00 	mov.w	fp, #0
 8016eec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016ef0:	f104 021a 	add.w	r2, r4, #26
 8016ef4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016ef6:	9305      	str	r3, [sp, #20]
 8016ef8:	eba3 0309 	sub.w	r3, r3, r9
 8016efc:	455b      	cmp	r3, fp
 8016efe:	dc33      	bgt.n	8016f68 <_printf_float+0x380>
 8016f00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016f04:	429a      	cmp	r2, r3
 8016f06:	db3b      	blt.n	8016f80 <_printf_float+0x398>
 8016f08:	6823      	ldr	r3, [r4, #0]
 8016f0a:	07da      	lsls	r2, r3, #31
 8016f0c:	d438      	bmi.n	8016f80 <_printf_float+0x398>
 8016f0e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016f12:	eba2 0903 	sub.w	r9, r2, r3
 8016f16:	9b05      	ldr	r3, [sp, #20]
 8016f18:	1ad2      	subs	r2, r2, r3
 8016f1a:	4591      	cmp	r9, r2
 8016f1c:	bfa8      	it	ge
 8016f1e:	4691      	movge	r9, r2
 8016f20:	f1b9 0f00 	cmp.w	r9, #0
 8016f24:	dc35      	bgt.n	8016f92 <_printf_float+0x3aa>
 8016f26:	f04f 0800 	mov.w	r8, #0
 8016f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016f2e:	f104 0a1a 	add.w	sl, r4, #26
 8016f32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016f36:	1a9b      	subs	r3, r3, r2
 8016f38:	eba3 0309 	sub.w	r3, r3, r9
 8016f3c:	4543      	cmp	r3, r8
 8016f3e:	f77f af79 	ble.w	8016e34 <_printf_float+0x24c>
 8016f42:	2301      	movs	r3, #1
 8016f44:	4652      	mov	r2, sl
 8016f46:	4631      	mov	r1, r6
 8016f48:	4628      	mov	r0, r5
 8016f4a:	47b8      	blx	r7
 8016f4c:	3001      	adds	r0, #1
 8016f4e:	f43f aeaa 	beq.w	8016ca6 <_printf_float+0xbe>
 8016f52:	f108 0801 	add.w	r8, r8, #1
 8016f56:	e7ec      	b.n	8016f32 <_printf_float+0x34a>
 8016f58:	4613      	mov	r3, r2
 8016f5a:	4631      	mov	r1, r6
 8016f5c:	4642      	mov	r2, r8
 8016f5e:	4628      	mov	r0, r5
 8016f60:	47b8      	blx	r7
 8016f62:	3001      	adds	r0, #1
 8016f64:	d1c0      	bne.n	8016ee8 <_printf_float+0x300>
 8016f66:	e69e      	b.n	8016ca6 <_printf_float+0xbe>
 8016f68:	2301      	movs	r3, #1
 8016f6a:	4631      	mov	r1, r6
 8016f6c:	4628      	mov	r0, r5
 8016f6e:	9205      	str	r2, [sp, #20]
 8016f70:	47b8      	blx	r7
 8016f72:	3001      	adds	r0, #1
 8016f74:	f43f ae97 	beq.w	8016ca6 <_printf_float+0xbe>
 8016f78:	9a05      	ldr	r2, [sp, #20]
 8016f7a:	f10b 0b01 	add.w	fp, fp, #1
 8016f7e:	e7b9      	b.n	8016ef4 <_printf_float+0x30c>
 8016f80:	ee18 3a10 	vmov	r3, s16
 8016f84:	4652      	mov	r2, sl
 8016f86:	4631      	mov	r1, r6
 8016f88:	4628      	mov	r0, r5
 8016f8a:	47b8      	blx	r7
 8016f8c:	3001      	adds	r0, #1
 8016f8e:	d1be      	bne.n	8016f0e <_printf_float+0x326>
 8016f90:	e689      	b.n	8016ca6 <_printf_float+0xbe>
 8016f92:	9a05      	ldr	r2, [sp, #20]
 8016f94:	464b      	mov	r3, r9
 8016f96:	4442      	add	r2, r8
 8016f98:	4631      	mov	r1, r6
 8016f9a:	4628      	mov	r0, r5
 8016f9c:	47b8      	blx	r7
 8016f9e:	3001      	adds	r0, #1
 8016fa0:	d1c1      	bne.n	8016f26 <_printf_float+0x33e>
 8016fa2:	e680      	b.n	8016ca6 <_printf_float+0xbe>
 8016fa4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016fa6:	2a01      	cmp	r2, #1
 8016fa8:	dc01      	bgt.n	8016fae <_printf_float+0x3c6>
 8016faa:	07db      	lsls	r3, r3, #31
 8016fac:	d53a      	bpl.n	8017024 <_printf_float+0x43c>
 8016fae:	2301      	movs	r3, #1
 8016fb0:	4642      	mov	r2, r8
 8016fb2:	4631      	mov	r1, r6
 8016fb4:	4628      	mov	r0, r5
 8016fb6:	47b8      	blx	r7
 8016fb8:	3001      	adds	r0, #1
 8016fba:	f43f ae74 	beq.w	8016ca6 <_printf_float+0xbe>
 8016fbe:	ee18 3a10 	vmov	r3, s16
 8016fc2:	4652      	mov	r2, sl
 8016fc4:	4631      	mov	r1, r6
 8016fc6:	4628      	mov	r0, r5
 8016fc8:	47b8      	blx	r7
 8016fca:	3001      	adds	r0, #1
 8016fcc:	f43f ae6b 	beq.w	8016ca6 <_printf_float+0xbe>
 8016fd0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016fdc:	f7e9 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 8016fe0:	b9d8      	cbnz	r0, 801701a <_printf_float+0x432>
 8016fe2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016fe6:	f108 0201 	add.w	r2, r8, #1
 8016fea:	4631      	mov	r1, r6
 8016fec:	4628      	mov	r0, r5
 8016fee:	47b8      	blx	r7
 8016ff0:	3001      	adds	r0, #1
 8016ff2:	d10e      	bne.n	8017012 <_printf_float+0x42a>
 8016ff4:	e657      	b.n	8016ca6 <_printf_float+0xbe>
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	4652      	mov	r2, sl
 8016ffa:	4631      	mov	r1, r6
 8016ffc:	4628      	mov	r0, r5
 8016ffe:	47b8      	blx	r7
 8017000:	3001      	adds	r0, #1
 8017002:	f43f ae50 	beq.w	8016ca6 <_printf_float+0xbe>
 8017006:	f108 0801 	add.w	r8, r8, #1
 801700a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801700c:	3b01      	subs	r3, #1
 801700e:	4543      	cmp	r3, r8
 8017010:	dcf1      	bgt.n	8016ff6 <_printf_float+0x40e>
 8017012:	464b      	mov	r3, r9
 8017014:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017018:	e6da      	b.n	8016dd0 <_printf_float+0x1e8>
 801701a:	f04f 0800 	mov.w	r8, #0
 801701e:	f104 0a1a 	add.w	sl, r4, #26
 8017022:	e7f2      	b.n	801700a <_printf_float+0x422>
 8017024:	2301      	movs	r3, #1
 8017026:	4642      	mov	r2, r8
 8017028:	e7df      	b.n	8016fea <_printf_float+0x402>
 801702a:	2301      	movs	r3, #1
 801702c:	464a      	mov	r2, r9
 801702e:	4631      	mov	r1, r6
 8017030:	4628      	mov	r0, r5
 8017032:	47b8      	blx	r7
 8017034:	3001      	adds	r0, #1
 8017036:	f43f ae36 	beq.w	8016ca6 <_printf_float+0xbe>
 801703a:	f108 0801 	add.w	r8, r8, #1
 801703e:	68e3      	ldr	r3, [r4, #12]
 8017040:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8017042:	1a5b      	subs	r3, r3, r1
 8017044:	4543      	cmp	r3, r8
 8017046:	dcf0      	bgt.n	801702a <_printf_float+0x442>
 8017048:	e6f8      	b.n	8016e3c <_printf_float+0x254>
 801704a:	f04f 0800 	mov.w	r8, #0
 801704e:	f104 0919 	add.w	r9, r4, #25
 8017052:	e7f4      	b.n	801703e <_printf_float+0x456>

08017054 <_printf_common>:
 8017054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017058:	4616      	mov	r6, r2
 801705a:	4699      	mov	r9, r3
 801705c:	688a      	ldr	r2, [r1, #8]
 801705e:	690b      	ldr	r3, [r1, #16]
 8017060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017064:	4293      	cmp	r3, r2
 8017066:	bfb8      	it	lt
 8017068:	4613      	movlt	r3, r2
 801706a:	6033      	str	r3, [r6, #0]
 801706c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017070:	4607      	mov	r7, r0
 8017072:	460c      	mov	r4, r1
 8017074:	b10a      	cbz	r2, 801707a <_printf_common+0x26>
 8017076:	3301      	adds	r3, #1
 8017078:	6033      	str	r3, [r6, #0]
 801707a:	6823      	ldr	r3, [r4, #0]
 801707c:	0699      	lsls	r1, r3, #26
 801707e:	bf42      	ittt	mi
 8017080:	6833      	ldrmi	r3, [r6, #0]
 8017082:	3302      	addmi	r3, #2
 8017084:	6033      	strmi	r3, [r6, #0]
 8017086:	6825      	ldr	r5, [r4, #0]
 8017088:	f015 0506 	ands.w	r5, r5, #6
 801708c:	d106      	bne.n	801709c <_printf_common+0x48>
 801708e:	f104 0a19 	add.w	sl, r4, #25
 8017092:	68e3      	ldr	r3, [r4, #12]
 8017094:	6832      	ldr	r2, [r6, #0]
 8017096:	1a9b      	subs	r3, r3, r2
 8017098:	42ab      	cmp	r3, r5
 801709a:	dc26      	bgt.n	80170ea <_printf_common+0x96>
 801709c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80170a0:	1e13      	subs	r3, r2, #0
 80170a2:	6822      	ldr	r2, [r4, #0]
 80170a4:	bf18      	it	ne
 80170a6:	2301      	movne	r3, #1
 80170a8:	0692      	lsls	r2, r2, #26
 80170aa:	d42b      	bmi.n	8017104 <_printf_common+0xb0>
 80170ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80170b0:	4649      	mov	r1, r9
 80170b2:	4638      	mov	r0, r7
 80170b4:	47c0      	blx	r8
 80170b6:	3001      	adds	r0, #1
 80170b8:	d01e      	beq.n	80170f8 <_printf_common+0xa4>
 80170ba:	6823      	ldr	r3, [r4, #0]
 80170bc:	6922      	ldr	r2, [r4, #16]
 80170be:	f003 0306 	and.w	r3, r3, #6
 80170c2:	2b04      	cmp	r3, #4
 80170c4:	bf02      	ittt	eq
 80170c6:	68e5      	ldreq	r5, [r4, #12]
 80170c8:	6833      	ldreq	r3, [r6, #0]
 80170ca:	1aed      	subeq	r5, r5, r3
 80170cc:	68a3      	ldr	r3, [r4, #8]
 80170ce:	bf0c      	ite	eq
 80170d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80170d4:	2500      	movne	r5, #0
 80170d6:	4293      	cmp	r3, r2
 80170d8:	bfc4      	itt	gt
 80170da:	1a9b      	subgt	r3, r3, r2
 80170dc:	18ed      	addgt	r5, r5, r3
 80170de:	2600      	movs	r6, #0
 80170e0:	341a      	adds	r4, #26
 80170e2:	42b5      	cmp	r5, r6
 80170e4:	d11a      	bne.n	801711c <_printf_common+0xc8>
 80170e6:	2000      	movs	r0, #0
 80170e8:	e008      	b.n	80170fc <_printf_common+0xa8>
 80170ea:	2301      	movs	r3, #1
 80170ec:	4652      	mov	r2, sl
 80170ee:	4649      	mov	r1, r9
 80170f0:	4638      	mov	r0, r7
 80170f2:	47c0      	blx	r8
 80170f4:	3001      	adds	r0, #1
 80170f6:	d103      	bne.n	8017100 <_printf_common+0xac>
 80170f8:	f04f 30ff 	mov.w	r0, #4294967295
 80170fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017100:	3501      	adds	r5, #1
 8017102:	e7c6      	b.n	8017092 <_printf_common+0x3e>
 8017104:	18e1      	adds	r1, r4, r3
 8017106:	1c5a      	adds	r2, r3, #1
 8017108:	2030      	movs	r0, #48	; 0x30
 801710a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801710e:	4422      	add	r2, r4
 8017110:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017114:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017118:	3302      	adds	r3, #2
 801711a:	e7c7      	b.n	80170ac <_printf_common+0x58>
 801711c:	2301      	movs	r3, #1
 801711e:	4622      	mov	r2, r4
 8017120:	4649      	mov	r1, r9
 8017122:	4638      	mov	r0, r7
 8017124:	47c0      	blx	r8
 8017126:	3001      	adds	r0, #1
 8017128:	d0e6      	beq.n	80170f8 <_printf_common+0xa4>
 801712a:	3601      	adds	r6, #1
 801712c:	e7d9      	b.n	80170e2 <_printf_common+0x8e>
	...

08017130 <_printf_i>:
 8017130:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017134:	7e0f      	ldrb	r7, [r1, #24]
 8017136:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017138:	2f78      	cmp	r7, #120	; 0x78
 801713a:	4691      	mov	r9, r2
 801713c:	4680      	mov	r8, r0
 801713e:	460c      	mov	r4, r1
 8017140:	469a      	mov	sl, r3
 8017142:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017146:	d807      	bhi.n	8017158 <_printf_i+0x28>
 8017148:	2f62      	cmp	r7, #98	; 0x62
 801714a:	d80a      	bhi.n	8017162 <_printf_i+0x32>
 801714c:	2f00      	cmp	r7, #0
 801714e:	f000 80d4 	beq.w	80172fa <_printf_i+0x1ca>
 8017152:	2f58      	cmp	r7, #88	; 0x58
 8017154:	f000 80c0 	beq.w	80172d8 <_printf_i+0x1a8>
 8017158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801715c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017160:	e03a      	b.n	80171d8 <_printf_i+0xa8>
 8017162:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017166:	2b15      	cmp	r3, #21
 8017168:	d8f6      	bhi.n	8017158 <_printf_i+0x28>
 801716a:	a101      	add	r1, pc, #4	; (adr r1, 8017170 <_printf_i+0x40>)
 801716c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017170:	080171c9 	.word	0x080171c9
 8017174:	080171dd 	.word	0x080171dd
 8017178:	08017159 	.word	0x08017159
 801717c:	08017159 	.word	0x08017159
 8017180:	08017159 	.word	0x08017159
 8017184:	08017159 	.word	0x08017159
 8017188:	080171dd 	.word	0x080171dd
 801718c:	08017159 	.word	0x08017159
 8017190:	08017159 	.word	0x08017159
 8017194:	08017159 	.word	0x08017159
 8017198:	08017159 	.word	0x08017159
 801719c:	080172e1 	.word	0x080172e1
 80171a0:	08017209 	.word	0x08017209
 80171a4:	0801729b 	.word	0x0801729b
 80171a8:	08017159 	.word	0x08017159
 80171ac:	08017159 	.word	0x08017159
 80171b0:	08017303 	.word	0x08017303
 80171b4:	08017159 	.word	0x08017159
 80171b8:	08017209 	.word	0x08017209
 80171bc:	08017159 	.word	0x08017159
 80171c0:	08017159 	.word	0x08017159
 80171c4:	080172a3 	.word	0x080172a3
 80171c8:	682b      	ldr	r3, [r5, #0]
 80171ca:	1d1a      	adds	r2, r3, #4
 80171cc:	681b      	ldr	r3, [r3, #0]
 80171ce:	602a      	str	r2, [r5, #0]
 80171d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80171d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80171d8:	2301      	movs	r3, #1
 80171da:	e09f      	b.n	801731c <_printf_i+0x1ec>
 80171dc:	6820      	ldr	r0, [r4, #0]
 80171de:	682b      	ldr	r3, [r5, #0]
 80171e0:	0607      	lsls	r7, r0, #24
 80171e2:	f103 0104 	add.w	r1, r3, #4
 80171e6:	6029      	str	r1, [r5, #0]
 80171e8:	d501      	bpl.n	80171ee <_printf_i+0xbe>
 80171ea:	681e      	ldr	r6, [r3, #0]
 80171ec:	e003      	b.n	80171f6 <_printf_i+0xc6>
 80171ee:	0646      	lsls	r6, r0, #25
 80171f0:	d5fb      	bpl.n	80171ea <_printf_i+0xba>
 80171f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80171f6:	2e00      	cmp	r6, #0
 80171f8:	da03      	bge.n	8017202 <_printf_i+0xd2>
 80171fa:	232d      	movs	r3, #45	; 0x2d
 80171fc:	4276      	negs	r6, r6
 80171fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017202:	485a      	ldr	r0, [pc, #360]	; (801736c <_printf_i+0x23c>)
 8017204:	230a      	movs	r3, #10
 8017206:	e012      	b.n	801722e <_printf_i+0xfe>
 8017208:	682b      	ldr	r3, [r5, #0]
 801720a:	6820      	ldr	r0, [r4, #0]
 801720c:	1d19      	adds	r1, r3, #4
 801720e:	6029      	str	r1, [r5, #0]
 8017210:	0605      	lsls	r5, r0, #24
 8017212:	d501      	bpl.n	8017218 <_printf_i+0xe8>
 8017214:	681e      	ldr	r6, [r3, #0]
 8017216:	e002      	b.n	801721e <_printf_i+0xee>
 8017218:	0641      	lsls	r1, r0, #25
 801721a:	d5fb      	bpl.n	8017214 <_printf_i+0xe4>
 801721c:	881e      	ldrh	r6, [r3, #0]
 801721e:	4853      	ldr	r0, [pc, #332]	; (801736c <_printf_i+0x23c>)
 8017220:	2f6f      	cmp	r7, #111	; 0x6f
 8017222:	bf0c      	ite	eq
 8017224:	2308      	moveq	r3, #8
 8017226:	230a      	movne	r3, #10
 8017228:	2100      	movs	r1, #0
 801722a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801722e:	6865      	ldr	r5, [r4, #4]
 8017230:	60a5      	str	r5, [r4, #8]
 8017232:	2d00      	cmp	r5, #0
 8017234:	bfa2      	ittt	ge
 8017236:	6821      	ldrge	r1, [r4, #0]
 8017238:	f021 0104 	bicge.w	r1, r1, #4
 801723c:	6021      	strge	r1, [r4, #0]
 801723e:	b90e      	cbnz	r6, 8017244 <_printf_i+0x114>
 8017240:	2d00      	cmp	r5, #0
 8017242:	d04b      	beq.n	80172dc <_printf_i+0x1ac>
 8017244:	4615      	mov	r5, r2
 8017246:	fbb6 f1f3 	udiv	r1, r6, r3
 801724a:	fb03 6711 	mls	r7, r3, r1, r6
 801724e:	5dc7      	ldrb	r7, [r0, r7]
 8017250:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017254:	4637      	mov	r7, r6
 8017256:	42bb      	cmp	r3, r7
 8017258:	460e      	mov	r6, r1
 801725a:	d9f4      	bls.n	8017246 <_printf_i+0x116>
 801725c:	2b08      	cmp	r3, #8
 801725e:	d10b      	bne.n	8017278 <_printf_i+0x148>
 8017260:	6823      	ldr	r3, [r4, #0]
 8017262:	07de      	lsls	r6, r3, #31
 8017264:	d508      	bpl.n	8017278 <_printf_i+0x148>
 8017266:	6923      	ldr	r3, [r4, #16]
 8017268:	6861      	ldr	r1, [r4, #4]
 801726a:	4299      	cmp	r1, r3
 801726c:	bfde      	ittt	le
 801726e:	2330      	movle	r3, #48	; 0x30
 8017270:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017274:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017278:	1b52      	subs	r2, r2, r5
 801727a:	6122      	str	r2, [r4, #16]
 801727c:	f8cd a000 	str.w	sl, [sp]
 8017280:	464b      	mov	r3, r9
 8017282:	aa03      	add	r2, sp, #12
 8017284:	4621      	mov	r1, r4
 8017286:	4640      	mov	r0, r8
 8017288:	f7ff fee4 	bl	8017054 <_printf_common>
 801728c:	3001      	adds	r0, #1
 801728e:	d14a      	bne.n	8017326 <_printf_i+0x1f6>
 8017290:	f04f 30ff 	mov.w	r0, #4294967295
 8017294:	b004      	add	sp, #16
 8017296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801729a:	6823      	ldr	r3, [r4, #0]
 801729c:	f043 0320 	orr.w	r3, r3, #32
 80172a0:	6023      	str	r3, [r4, #0]
 80172a2:	4833      	ldr	r0, [pc, #204]	; (8017370 <_printf_i+0x240>)
 80172a4:	2778      	movs	r7, #120	; 0x78
 80172a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80172aa:	6823      	ldr	r3, [r4, #0]
 80172ac:	6829      	ldr	r1, [r5, #0]
 80172ae:	061f      	lsls	r7, r3, #24
 80172b0:	f851 6b04 	ldr.w	r6, [r1], #4
 80172b4:	d402      	bmi.n	80172bc <_printf_i+0x18c>
 80172b6:	065f      	lsls	r7, r3, #25
 80172b8:	bf48      	it	mi
 80172ba:	b2b6      	uxthmi	r6, r6
 80172bc:	07df      	lsls	r7, r3, #31
 80172be:	bf48      	it	mi
 80172c0:	f043 0320 	orrmi.w	r3, r3, #32
 80172c4:	6029      	str	r1, [r5, #0]
 80172c6:	bf48      	it	mi
 80172c8:	6023      	strmi	r3, [r4, #0]
 80172ca:	b91e      	cbnz	r6, 80172d4 <_printf_i+0x1a4>
 80172cc:	6823      	ldr	r3, [r4, #0]
 80172ce:	f023 0320 	bic.w	r3, r3, #32
 80172d2:	6023      	str	r3, [r4, #0]
 80172d4:	2310      	movs	r3, #16
 80172d6:	e7a7      	b.n	8017228 <_printf_i+0xf8>
 80172d8:	4824      	ldr	r0, [pc, #144]	; (801736c <_printf_i+0x23c>)
 80172da:	e7e4      	b.n	80172a6 <_printf_i+0x176>
 80172dc:	4615      	mov	r5, r2
 80172de:	e7bd      	b.n	801725c <_printf_i+0x12c>
 80172e0:	682b      	ldr	r3, [r5, #0]
 80172e2:	6826      	ldr	r6, [r4, #0]
 80172e4:	6961      	ldr	r1, [r4, #20]
 80172e6:	1d18      	adds	r0, r3, #4
 80172e8:	6028      	str	r0, [r5, #0]
 80172ea:	0635      	lsls	r5, r6, #24
 80172ec:	681b      	ldr	r3, [r3, #0]
 80172ee:	d501      	bpl.n	80172f4 <_printf_i+0x1c4>
 80172f0:	6019      	str	r1, [r3, #0]
 80172f2:	e002      	b.n	80172fa <_printf_i+0x1ca>
 80172f4:	0670      	lsls	r0, r6, #25
 80172f6:	d5fb      	bpl.n	80172f0 <_printf_i+0x1c0>
 80172f8:	8019      	strh	r1, [r3, #0]
 80172fa:	2300      	movs	r3, #0
 80172fc:	6123      	str	r3, [r4, #16]
 80172fe:	4615      	mov	r5, r2
 8017300:	e7bc      	b.n	801727c <_printf_i+0x14c>
 8017302:	682b      	ldr	r3, [r5, #0]
 8017304:	1d1a      	adds	r2, r3, #4
 8017306:	602a      	str	r2, [r5, #0]
 8017308:	681d      	ldr	r5, [r3, #0]
 801730a:	6862      	ldr	r2, [r4, #4]
 801730c:	2100      	movs	r1, #0
 801730e:	4628      	mov	r0, r5
 8017310:	f7e8 ff5e 	bl	80001d0 <memchr>
 8017314:	b108      	cbz	r0, 801731a <_printf_i+0x1ea>
 8017316:	1b40      	subs	r0, r0, r5
 8017318:	6060      	str	r0, [r4, #4]
 801731a:	6863      	ldr	r3, [r4, #4]
 801731c:	6123      	str	r3, [r4, #16]
 801731e:	2300      	movs	r3, #0
 8017320:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017324:	e7aa      	b.n	801727c <_printf_i+0x14c>
 8017326:	6923      	ldr	r3, [r4, #16]
 8017328:	462a      	mov	r2, r5
 801732a:	4649      	mov	r1, r9
 801732c:	4640      	mov	r0, r8
 801732e:	47d0      	blx	sl
 8017330:	3001      	adds	r0, #1
 8017332:	d0ad      	beq.n	8017290 <_printf_i+0x160>
 8017334:	6823      	ldr	r3, [r4, #0]
 8017336:	079b      	lsls	r3, r3, #30
 8017338:	d413      	bmi.n	8017362 <_printf_i+0x232>
 801733a:	68e0      	ldr	r0, [r4, #12]
 801733c:	9b03      	ldr	r3, [sp, #12]
 801733e:	4298      	cmp	r0, r3
 8017340:	bfb8      	it	lt
 8017342:	4618      	movlt	r0, r3
 8017344:	e7a6      	b.n	8017294 <_printf_i+0x164>
 8017346:	2301      	movs	r3, #1
 8017348:	4632      	mov	r2, r6
 801734a:	4649      	mov	r1, r9
 801734c:	4640      	mov	r0, r8
 801734e:	47d0      	blx	sl
 8017350:	3001      	adds	r0, #1
 8017352:	d09d      	beq.n	8017290 <_printf_i+0x160>
 8017354:	3501      	adds	r5, #1
 8017356:	68e3      	ldr	r3, [r4, #12]
 8017358:	9903      	ldr	r1, [sp, #12]
 801735a:	1a5b      	subs	r3, r3, r1
 801735c:	42ab      	cmp	r3, r5
 801735e:	dcf2      	bgt.n	8017346 <_printf_i+0x216>
 8017360:	e7eb      	b.n	801733a <_printf_i+0x20a>
 8017362:	2500      	movs	r5, #0
 8017364:	f104 0619 	add.w	r6, r4, #25
 8017368:	e7f5      	b.n	8017356 <_printf_i+0x226>
 801736a:	bf00      	nop
 801736c:	0801b78b 	.word	0x0801b78b
 8017370:	0801b79c 	.word	0x0801b79c

08017374 <std>:
 8017374:	2300      	movs	r3, #0
 8017376:	b510      	push	{r4, lr}
 8017378:	4604      	mov	r4, r0
 801737a:	e9c0 3300 	strd	r3, r3, [r0]
 801737e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017382:	6083      	str	r3, [r0, #8]
 8017384:	8181      	strh	r1, [r0, #12]
 8017386:	6643      	str	r3, [r0, #100]	; 0x64
 8017388:	81c2      	strh	r2, [r0, #14]
 801738a:	6183      	str	r3, [r0, #24]
 801738c:	4619      	mov	r1, r3
 801738e:	2208      	movs	r2, #8
 8017390:	305c      	adds	r0, #92	; 0x5c
 8017392:	f000 f914 	bl	80175be <memset>
 8017396:	4b0d      	ldr	r3, [pc, #52]	; (80173cc <std+0x58>)
 8017398:	6263      	str	r3, [r4, #36]	; 0x24
 801739a:	4b0d      	ldr	r3, [pc, #52]	; (80173d0 <std+0x5c>)
 801739c:	62a3      	str	r3, [r4, #40]	; 0x28
 801739e:	4b0d      	ldr	r3, [pc, #52]	; (80173d4 <std+0x60>)
 80173a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80173a2:	4b0d      	ldr	r3, [pc, #52]	; (80173d8 <std+0x64>)
 80173a4:	6323      	str	r3, [r4, #48]	; 0x30
 80173a6:	4b0d      	ldr	r3, [pc, #52]	; (80173dc <std+0x68>)
 80173a8:	6224      	str	r4, [r4, #32]
 80173aa:	429c      	cmp	r4, r3
 80173ac:	d006      	beq.n	80173bc <std+0x48>
 80173ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80173b2:	4294      	cmp	r4, r2
 80173b4:	d002      	beq.n	80173bc <std+0x48>
 80173b6:	33d0      	adds	r3, #208	; 0xd0
 80173b8:	429c      	cmp	r4, r3
 80173ba:	d105      	bne.n	80173c8 <std+0x54>
 80173bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80173c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80173c4:	f000 b9e0 	b.w	8017788 <__retarget_lock_init_recursive>
 80173c8:	bd10      	pop	{r4, pc}
 80173ca:	bf00      	nop
 80173cc:	08017539 	.word	0x08017539
 80173d0:	0801755b 	.word	0x0801755b
 80173d4:	08017593 	.word	0x08017593
 80173d8:	080175b7 	.word	0x080175b7
 80173dc:	20009f70 	.word	0x20009f70

080173e0 <stdio_exit_handler>:
 80173e0:	4a02      	ldr	r2, [pc, #8]	; (80173ec <stdio_exit_handler+0xc>)
 80173e2:	4903      	ldr	r1, [pc, #12]	; (80173f0 <stdio_exit_handler+0x10>)
 80173e4:	4803      	ldr	r0, [pc, #12]	; (80173f4 <stdio_exit_handler+0x14>)
 80173e6:	f000 b869 	b.w	80174bc <_fwalk_sglue>
 80173ea:	bf00      	nop
 80173ec:	20000024 	.word	0x20000024
 80173f0:	08019ab9 	.word	0x08019ab9
 80173f4:	2000019c 	.word	0x2000019c

080173f8 <cleanup_stdio>:
 80173f8:	6841      	ldr	r1, [r0, #4]
 80173fa:	4b0c      	ldr	r3, [pc, #48]	; (801742c <cleanup_stdio+0x34>)
 80173fc:	4299      	cmp	r1, r3
 80173fe:	b510      	push	{r4, lr}
 8017400:	4604      	mov	r4, r0
 8017402:	d001      	beq.n	8017408 <cleanup_stdio+0x10>
 8017404:	f002 fb58 	bl	8019ab8 <_fflush_r>
 8017408:	68a1      	ldr	r1, [r4, #8]
 801740a:	4b09      	ldr	r3, [pc, #36]	; (8017430 <cleanup_stdio+0x38>)
 801740c:	4299      	cmp	r1, r3
 801740e:	d002      	beq.n	8017416 <cleanup_stdio+0x1e>
 8017410:	4620      	mov	r0, r4
 8017412:	f002 fb51 	bl	8019ab8 <_fflush_r>
 8017416:	68e1      	ldr	r1, [r4, #12]
 8017418:	4b06      	ldr	r3, [pc, #24]	; (8017434 <cleanup_stdio+0x3c>)
 801741a:	4299      	cmp	r1, r3
 801741c:	d004      	beq.n	8017428 <cleanup_stdio+0x30>
 801741e:	4620      	mov	r0, r4
 8017420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017424:	f002 bb48 	b.w	8019ab8 <_fflush_r>
 8017428:	bd10      	pop	{r4, pc}
 801742a:	bf00      	nop
 801742c:	20009f70 	.word	0x20009f70
 8017430:	20009fd8 	.word	0x20009fd8
 8017434:	2000a040 	.word	0x2000a040

08017438 <global_stdio_init.part.0>:
 8017438:	b510      	push	{r4, lr}
 801743a:	4b0b      	ldr	r3, [pc, #44]	; (8017468 <global_stdio_init.part.0+0x30>)
 801743c:	4c0b      	ldr	r4, [pc, #44]	; (801746c <global_stdio_init.part.0+0x34>)
 801743e:	4a0c      	ldr	r2, [pc, #48]	; (8017470 <global_stdio_init.part.0+0x38>)
 8017440:	601a      	str	r2, [r3, #0]
 8017442:	4620      	mov	r0, r4
 8017444:	2200      	movs	r2, #0
 8017446:	2104      	movs	r1, #4
 8017448:	f7ff ff94 	bl	8017374 <std>
 801744c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8017450:	2201      	movs	r2, #1
 8017452:	2109      	movs	r1, #9
 8017454:	f7ff ff8e 	bl	8017374 <std>
 8017458:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801745c:	2202      	movs	r2, #2
 801745e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017462:	2112      	movs	r1, #18
 8017464:	f7ff bf86 	b.w	8017374 <std>
 8017468:	2000a0a8 	.word	0x2000a0a8
 801746c:	20009f70 	.word	0x20009f70
 8017470:	080173e1 	.word	0x080173e1

08017474 <__sfp_lock_acquire>:
 8017474:	4801      	ldr	r0, [pc, #4]	; (801747c <__sfp_lock_acquire+0x8>)
 8017476:	f000 b988 	b.w	801778a <__retarget_lock_acquire_recursive>
 801747a:	bf00      	nop
 801747c:	2000a0b1 	.word	0x2000a0b1

08017480 <__sfp_lock_release>:
 8017480:	4801      	ldr	r0, [pc, #4]	; (8017488 <__sfp_lock_release+0x8>)
 8017482:	f000 b983 	b.w	801778c <__retarget_lock_release_recursive>
 8017486:	bf00      	nop
 8017488:	2000a0b1 	.word	0x2000a0b1

0801748c <__sinit>:
 801748c:	b510      	push	{r4, lr}
 801748e:	4604      	mov	r4, r0
 8017490:	f7ff fff0 	bl	8017474 <__sfp_lock_acquire>
 8017494:	6a23      	ldr	r3, [r4, #32]
 8017496:	b11b      	cbz	r3, 80174a0 <__sinit+0x14>
 8017498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801749c:	f7ff bff0 	b.w	8017480 <__sfp_lock_release>
 80174a0:	4b04      	ldr	r3, [pc, #16]	; (80174b4 <__sinit+0x28>)
 80174a2:	6223      	str	r3, [r4, #32]
 80174a4:	4b04      	ldr	r3, [pc, #16]	; (80174b8 <__sinit+0x2c>)
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d1f5      	bne.n	8017498 <__sinit+0xc>
 80174ac:	f7ff ffc4 	bl	8017438 <global_stdio_init.part.0>
 80174b0:	e7f2      	b.n	8017498 <__sinit+0xc>
 80174b2:	bf00      	nop
 80174b4:	080173f9 	.word	0x080173f9
 80174b8:	2000a0a8 	.word	0x2000a0a8

080174bc <_fwalk_sglue>:
 80174bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174c0:	4607      	mov	r7, r0
 80174c2:	4688      	mov	r8, r1
 80174c4:	4614      	mov	r4, r2
 80174c6:	2600      	movs	r6, #0
 80174c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80174cc:	f1b9 0901 	subs.w	r9, r9, #1
 80174d0:	d505      	bpl.n	80174de <_fwalk_sglue+0x22>
 80174d2:	6824      	ldr	r4, [r4, #0]
 80174d4:	2c00      	cmp	r4, #0
 80174d6:	d1f7      	bne.n	80174c8 <_fwalk_sglue+0xc>
 80174d8:	4630      	mov	r0, r6
 80174da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174de:	89ab      	ldrh	r3, [r5, #12]
 80174e0:	2b01      	cmp	r3, #1
 80174e2:	d907      	bls.n	80174f4 <_fwalk_sglue+0x38>
 80174e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80174e8:	3301      	adds	r3, #1
 80174ea:	d003      	beq.n	80174f4 <_fwalk_sglue+0x38>
 80174ec:	4629      	mov	r1, r5
 80174ee:	4638      	mov	r0, r7
 80174f0:	47c0      	blx	r8
 80174f2:	4306      	orrs	r6, r0
 80174f4:	3568      	adds	r5, #104	; 0x68
 80174f6:	e7e9      	b.n	80174cc <_fwalk_sglue+0x10>

080174f8 <siprintf>:
 80174f8:	b40e      	push	{r1, r2, r3}
 80174fa:	b500      	push	{lr}
 80174fc:	b09c      	sub	sp, #112	; 0x70
 80174fe:	ab1d      	add	r3, sp, #116	; 0x74
 8017500:	9002      	str	r0, [sp, #8]
 8017502:	9006      	str	r0, [sp, #24]
 8017504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017508:	4809      	ldr	r0, [pc, #36]	; (8017530 <siprintf+0x38>)
 801750a:	9107      	str	r1, [sp, #28]
 801750c:	9104      	str	r1, [sp, #16]
 801750e:	4909      	ldr	r1, [pc, #36]	; (8017534 <siprintf+0x3c>)
 8017510:	f853 2b04 	ldr.w	r2, [r3], #4
 8017514:	9105      	str	r1, [sp, #20]
 8017516:	6800      	ldr	r0, [r0, #0]
 8017518:	9301      	str	r3, [sp, #4]
 801751a:	a902      	add	r1, sp, #8
 801751c:	f002 f948 	bl	80197b0 <_svfiprintf_r>
 8017520:	9b02      	ldr	r3, [sp, #8]
 8017522:	2200      	movs	r2, #0
 8017524:	701a      	strb	r2, [r3, #0]
 8017526:	b01c      	add	sp, #112	; 0x70
 8017528:	f85d eb04 	ldr.w	lr, [sp], #4
 801752c:	b003      	add	sp, #12
 801752e:	4770      	bx	lr
 8017530:	200001e8 	.word	0x200001e8
 8017534:	ffff0208 	.word	0xffff0208

08017538 <__sread>:
 8017538:	b510      	push	{r4, lr}
 801753a:	460c      	mov	r4, r1
 801753c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017540:	f000 f8d4 	bl	80176ec <_read_r>
 8017544:	2800      	cmp	r0, #0
 8017546:	bfab      	itete	ge
 8017548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801754a:	89a3      	ldrhlt	r3, [r4, #12]
 801754c:	181b      	addge	r3, r3, r0
 801754e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017552:	bfac      	ite	ge
 8017554:	6563      	strge	r3, [r4, #84]	; 0x54
 8017556:	81a3      	strhlt	r3, [r4, #12]
 8017558:	bd10      	pop	{r4, pc}

0801755a <__swrite>:
 801755a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801755e:	461f      	mov	r7, r3
 8017560:	898b      	ldrh	r3, [r1, #12]
 8017562:	05db      	lsls	r3, r3, #23
 8017564:	4605      	mov	r5, r0
 8017566:	460c      	mov	r4, r1
 8017568:	4616      	mov	r6, r2
 801756a:	d505      	bpl.n	8017578 <__swrite+0x1e>
 801756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017570:	2302      	movs	r3, #2
 8017572:	2200      	movs	r2, #0
 8017574:	f000 f8a8 	bl	80176c8 <_lseek_r>
 8017578:	89a3      	ldrh	r3, [r4, #12]
 801757a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801757e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017582:	81a3      	strh	r3, [r4, #12]
 8017584:	4632      	mov	r2, r6
 8017586:	463b      	mov	r3, r7
 8017588:	4628      	mov	r0, r5
 801758a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801758e:	f000 b8bf 	b.w	8017710 <_write_r>

08017592 <__sseek>:
 8017592:	b510      	push	{r4, lr}
 8017594:	460c      	mov	r4, r1
 8017596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801759a:	f000 f895 	bl	80176c8 <_lseek_r>
 801759e:	1c43      	adds	r3, r0, #1
 80175a0:	89a3      	ldrh	r3, [r4, #12]
 80175a2:	bf15      	itete	ne
 80175a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80175a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80175aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80175ae:	81a3      	strheq	r3, [r4, #12]
 80175b0:	bf18      	it	ne
 80175b2:	81a3      	strhne	r3, [r4, #12]
 80175b4:	bd10      	pop	{r4, pc}

080175b6 <__sclose>:
 80175b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80175ba:	f000 b81f 	b.w	80175fc <_close_r>

080175be <memset>:
 80175be:	4402      	add	r2, r0
 80175c0:	4603      	mov	r3, r0
 80175c2:	4293      	cmp	r3, r2
 80175c4:	d100      	bne.n	80175c8 <memset+0xa>
 80175c6:	4770      	bx	lr
 80175c8:	f803 1b01 	strb.w	r1, [r3], #1
 80175cc:	e7f9      	b.n	80175c2 <memset+0x4>

080175ce <strncmp>:
 80175ce:	b510      	push	{r4, lr}
 80175d0:	b16a      	cbz	r2, 80175ee <strncmp+0x20>
 80175d2:	3901      	subs	r1, #1
 80175d4:	1884      	adds	r4, r0, r2
 80175d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80175de:	429a      	cmp	r2, r3
 80175e0:	d103      	bne.n	80175ea <strncmp+0x1c>
 80175e2:	42a0      	cmp	r0, r4
 80175e4:	d001      	beq.n	80175ea <strncmp+0x1c>
 80175e6:	2a00      	cmp	r2, #0
 80175e8:	d1f5      	bne.n	80175d6 <strncmp+0x8>
 80175ea:	1ad0      	subs	r0, r2, r3
 80175ec:	bd10      	pop	{r4, pc}
 80175ee:	4610      	mov	r0, r2
 80175f0:	e7fc      	b.n	80175ec <strncmp+0x1e>
	...

080175f4 <_localeconv_r>:
 80175f4:	4800      	ldr	r0, [pc, #0]	; (80175f8 <_localeconv_r+0x4>)
 80175f6:	4770      	bx	lr
 80175f8:	20000120 	.word	0x20000120

080175fc <_close_r>:
 80175fc:	b538      	push	{r3, r4, r5, lr}
 80175fe:	4d06      	ldr	r5, [pc, #24]	; (8017618 <_close_r+0x1c>)
 8017600:	2300      	movs	r3, #0
 8017602:	4604      	mov	r4, r0
 8017604:	4608      	mov	r0, r1
 8017606:	602b      	str	r3, [r5, #0]
 8017608:	f7ee fb1d 	bl	8005c46 <_close>
 801760c:	1c43      	adds	r3, r0, #1
 801760e:	d102      	bne.n	8017616 <_close_r+0x1a>
 8017610:	682b      	ldr	r3, [r5, #0]
 8017612:	b103      	cbz	r3, 8017616 <_close_r+0x1a>
 8017614:	6023      	str	r3, [r4, #0]
 8017616:	bd38      	pop	{r3, r4, r5, pc}
 8017618:	2000a0ac 	.word	0x2000a0ac

0801761c <_reclaim_reent>:
 801761c:	4b29      	ldr	r3, [pc, #164]	; (80176c4 <_reclaim_reent+0xa8>)
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	4283      	cmp	r3, r0
 8017622:	b570      	push	{r4, r5, r6, lr}
 8017624:	4604      	mov	r4, r0
 8017626:	d04b      	beq.n	80176c0 <_reclaim_reent+0xa4>
 8017628:	69c3      	ldr	r3, [r0, #28]
 801762a:	b143      	cbz	r3, 801763e <_reclaim_reent+0x22>
 801762c:	68db      	ldr	r3, [r3, #12]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d144      	bne.n	80176bc <_reclaim_reent+0xa0>
 8017632:	69e3      	ldr	r3, [r4, #28]
 8017634:	6819      	ldr	r1, [r3, #0]
 8017636:	b111      	cbz	r1, 801763e <_reclaim_reent+0x22>
 8017638:	4620      	mov	r0, r4
 801763a:	f000 ff3b 	bl	80184b4 <_free_r>
 801763e:	6961      	ldr	r1, [r4, #20]
 8017640:	b111      	cbz	r1, 8017648 <_reclaim_reent+0x2c>
 8017642:	4620      	mov	r0, r4
 8017644:	f000 ff36 	bl	80184b4 <_free_r>
 8017648:	69e1      	ldr	r1, [r4, #28]
 801764a:	b111      	cbz	r1, 8017652 <_reclaim_reent+0x36>
 801764c:	4620      	mov	r0, r4
 801764e:	f000 ff31 	bl	80184b4 <_free_r>
 8017652:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8017654:	b111      	cbz	r1, 801765c <_reclaim_reent+0x40>
 8017656:	4620      	mov	r0, r4
 8017658:	f000 ff2c 	bl	80184b4 <_free_r>
 801765c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801765e:	b111      	cbz	r1, 8017666 <_reclaim_reent+0x4a>
 8017660:	4620      	mov	r0, r4
 8017662:	f000 ff27 	bl	80184b4 <_free_r>
 8017666:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017668:	b111      	cbz	r1, 8017670 <_reclaim_reent+0x54>
 801766a:	4620      	mov	r0, r4
 801766c:	f000 ff22 	bl	80184b4 <_free_r>
 8017670:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017672:	b111      	cbz	r1, 801767a <_reclaim_reent+0x5e>
 8017674:	4620      	mov	r0, r4
 8017676:	f000 ff1d 	bl	80184b4 <_free_r>
 801767a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801767c:	b111      	cbz	r1, 8017684 <_reclaim_reent+0x68>
 801767e:	4620      	mov	r0, r4
 8017680:	f000 ff18 	bl	80184b4 <_free_r>
 8017684:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017686:	b111      	cbz	r1, 801768e <_reclaim_reent+0x72>
 8017688:	4620      	mov	r0, r4
 801768a:	f000 ff13 	bl	80184b4 <_free_r>
 801768e:	6a23      	ldr	r3, [r4, #32]
 8017690:	b1b3      	cbz	r3, 80176c0 <_reclaim_reent+0xa4>
 8017692:	4620      	mov	r0, r4
 8017694:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017698:	4718      	bx	r3
 801769a:	5949      	ldr	r1, [r1, r5]
 801769c:	b941      	cbnz	r1, 80176b0 <_reclaim_reent+0x94>
 801769e:	3504      	adds	r5, #4
 80176a0:	69e3      	ldr	r3, [r4, #28]
 80176a2:	2d80      	cmp	r5, #128	; 0x80
 80176a4:	68d9      	ldr	r1, [r3, #12]
 80176a6:	d1f8      	bne.n	801769a <_reclaim_reent+0x7e>
 80176a8:	4620      	mov	r0, r4
 80176aa:	f000 ff03 	bl	80184b4 <_free_r>
 80176ae:	e7c0      	b.n	8017632 <_reclaim_reent+0x16>
 80176b0:	680e      	ldr	r6, [r1, #0]
 80176b2:	4620      	mov	r0, r4
 80176b4:	f000 fefe 	bl	80184b4 <_free_r>
 80176b8:	4631      	mov	r1, r6
 80176ba:	e7ef      	b.n	801769c <_reclaim_reent+0x80>
 80176bc:	2500      	movs	r5, #0
 80176be:	e7ef      	b.n	80176a0 <_reclaim_reent+0x84>
 80176c0:	bd70      	pop	{r4, r5, r6, pc}
 80176c2:	bf00      	nop
 80176c4:	200001e8 	.word	0x200001e8

080176c8 <_lseek_r>:
 80176c8:	b538      	push	{r3, r4, r5, lr}
 80176ca:	4d07      	ldr	r5, [pc, #28]	; (80176e8 <_lseek_r+0x20>)
 80176cc:	4604      	mov	r4, r0
 80176ce:	4608      	mov	r0, r1
 80176d0:	4611      	mov	r1, r2
 80176d2:	2200      	movs	r2, #0
 80176d4:	602a      	str	r2, [r5, #0]
 80176d6:	461a      	mov	r2, r3
 80176d8:	f7ee fadc 	bl	8005c94 <_lseek>
 80176dc:	1c43      	adds	r3, r0, #1
 80176de:	d102      	bne.n	80176e6 <_lseek_r+0x1e>
 80176e0:	682b      	ldr	r3, [r5, #0]
 80176e2:	b103      	cbz	r3, 80176e6 <_lseek_r+0x1e>
 80176e4:	6023      	str	r3, [r4, #0]
 80176e6:	bd38      	pop	{r3, r4, r5, pc}
 80176e8:	2000a0ac 	.word	0x2000a0ac

080176ec <_read_r>:
 80176ec:	b538      	push	{r3, r4, r5, lr}
 80176ee:	4d07      	ldr	r5, [pc, #28]	; (801770c <_read_r+0x20>)
 80176f0:	4604      	mov	r4, r0
 80176f2:	4608      	mov	r0, r1
 80176f4:	4611      	mov	r1, r2
 80176f6:	2200      	movs	r2, #0
 80176f8:	602a      	str	r2, [r5, #0]
 80176fa:	461a      	mov	r2, r3
 80176fc:	f7ee fa6a 	bl	8005bd4 <_read>
 8017700:	1c43      	adds	r3, r0, #1
 8017702:	d102      	bne.n	801770a <_read_r+0x1e>
 8017704:	682b      	ldr	r3, [r5, #0]
 8017706:	b103      	cbz	r3, 801770a <_read_r+0x1e>
 8017708:	6023      	str	r3, [r4, #0]
 801770a:	bd38      	pop	{r3, r4, r5, pc}
 801770c:	2000a0ac 	.word	0x2000a0ac

08017710 <_write_r>:
 8017710:	b538      	push	{r3, r4, r5, lr}
 8017712:	4d07      	ldr	r5, [pc, #28]	; (8017730 <_write_r+0x20>)
 8017714:	4604      	mov	r4, r0
 8017716:	4608      	mov	r0, r1
 8017718:	4611      	mov	r1, r2
 801771a:	2200      	movs	r2, #0
 801771c:	602a      	str	r2, [r5, #0]
 801771e:	461a      	mov	r2, r3
 8017720:	f7ee fa75 	bl	8005c0e <_write>
 8017724:	1c43      	adds	r3, r0, #1
 8017726:	d102      	bne.n	801772e <_write_r+0x1e>
 8017728:	682b      	ldr	r3, [r5, #0]
 801772a:	b103      	cbz	r3, 801772e <_write_r+0x1e>
 801772c:	6023      	str	r3, [r4, #0]
 801772e:	bd38      	pop	{r3, r4, r5, pc}
 8017730:	2000a0ac 	.word	0x2000a0ac

08017734 <__errno>:
 8017734:	4b01      	ldr	r3, [pc, #4]	; (801773c <__errno+0x8>)
 8017736:	6818      	ldr	r0, [r3, #0]
 8017738:	4770      	bx	lr
 801773a:	bf00      	nop
 801773c:	200001e8 	.word	0x200001e8

08017740 <__libc_init_array>:
 8017740:	b570      	push	{r4, r5, r6, lr}
 8017742:	4d0d      	ldr	r5, [pc, #52]	; (8017778 <__libc_init_array+0x38>)
 8017744:	4c0d      	ldr	r4, [pc, #52]	; (801777c <__libc_init_array+0x3c>)
 8017746:	1b64      	subs	r4, r4, r5
 8017748:	10a4      	asrs	r4, r4, #2
 801774a:	2600      	movs	r6, #0
 801774c:	42a6      	cmp	r6, r4
 801774e:	d109      	bne.n	8017764 <__libc_init_array+0x24>
 8017750:	4d0b      	ldr	r5, [pc, #44]	; (8017780 <__libc_init_array+0x40>)
 8017752:	4c0c      	ldr	r4, [pc, #48]	; (8017784 <__libc_init_array+0x44>)
 8017754:	f003 fc82 	bl	801b05c <_init>
 8017758:	1b64      	subs	r4, r4, r5
 801775a:	10a4      	asrs	r4, r4, #2
 801775c:	2600      	movs	r6, #0
 801775e:	42a6      	cmp	r6, r4
 8017760:	d105      	bne.n	801776e <__libc_init_array+0x2e>
 8017762:	bd70      	pop	{r4, r5, r6, pc}
 8017764:	f855 3b04 	ldr.w	r3, [r5], #4
 8017768:	4798      	blx	r3
 801776a:	3601      	adds	r6, #1
 801776c:	e7ee      	b.n	801774c <__libc_init_array+0xc>
 801776e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017772:	4798      	blx	r3
 8017774:	3601      	adds	r6, #1
 8017776:	e7f2      	b.n	801775e <__libc_init_array+0x1e>
 8017778:	0801ba88 	.word	0x0801ba88
 801777c:	0801ba88 	.word	0x0801ba88
 8017780:	0801ba88 	.word	0x0801ba88
 8017784:	0801ba8c 	.word	0x0801ba8c

08017788 <__retarget_lock_init_recursive>:
 8017788:	4770      	bx	lr

0801778a <__retarget_lock_acquire_recursive>:
 801778a:	4770      	bx	lr

0801778c <__retarget_lock_release_recursive>:
 801778c:	4770      	bx	lr

0801778e <memcpy>:
 801778e:	440a      	add	r2, r1
 8017790:	4291      	cmp	r1, r2
 8017792:	f100 33ff 	add.w	r3, r0, #4294967295
 8017796:	d100      	bne.n	801779a <memcpy+0xc>
 8017798:	4770      	bx	lr
 801779a:	b510      	push	{r4, lr}
 801779c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177a4:	4291      	cmp	r1, r2
 80177a6:	d1f9      	bne.n	801779c <memcpy+0xe>
 80177a8:	bd10      	pop	{r4, pc}
 80177aa:	0000      	movs	r0, r0
 80177ac:	0000      	movs	r0, r0
	...

080177b0 <nan>:
 80177b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80177b8 <nan+0x8>
 80177b4:	4770      	bx	lr
 80177b6:	bf00      	nop
 80177b8:	00000000 	.word	0x00000000
 80177bc:	7ff80000 	.word	0x7ff80000

080177c0 <quorem>:
 80177c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177c4:	6903      	ldr	r3, [r0, #16]
 80177c6:	690c      	ldr	r4, [r1, #16]
 80177c8:	42a3      	cmp	r3, r4
 80177ca:	4607      	mov	r7, r0
 80177cc:	db7e      	blt.n	80178cc <quorem+0x10c>
 80177ce:	3c01      	subs	r4, #1
 80177d0:	f101 0814 	add.w	r8, r1, #20
 80177d4:	f100 0514 	add.w	r5, r0, #20
 80177d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80177dc:	9301      	str	r3, [sp, #4]
 80177de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80177e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80177e6:	3301      	adds	r3, #1
 80177e8:	429a      	cmp	r2, r3
 80177ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80177ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80177f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80177f6:	d331      	bcc.n	801785c <quorem+0x9c>
 80177f8:	f04f 0e00 	mov.w	lr, #0
 80177fc:	4640      	mov	r0, r8
 80177fe:	46ac      	mov	ip, r5
 8017800:	46f2      	mov	sl, lr
 8017802:	f850 2b04 	ldr.w	r2, [r0], #4
 8017806:	b293      	uxth	r3, r2
 8017808:	fb06 e303 	mla	r3, r6, r3, lr
 801780c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017810:	0c1a      	lsrs	r2, r3, #16
 8017812:	b29b      	uxth	r3, r3
 8017814:	ebaa 0303 	sub.w	r3, sl, r3
 8017818:	f8dc a000 	ldr.w	sl, [ip]
 801781c:	fa13 f38a 	uxtah	r3, r3, sl
 8017820:	fb06 220e 	mla	r2, r6, lr, r2
 8017824:	9300      	str	r3, [sp, #0]
 8017826:	9b00      	ldr	r3, [sp, #0]
 8017828:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801782c:	b292      	uxth	r2, r2
 801782e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017832:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017836:	f8bd 3000 	ldrh.w	r3, [sp]
 801783a:	4581      	cmp	r9, r0
 801783c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017840:	f84c 3b04 	str.w	r3, [ip], #4
 8017844:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017848:	d2db      	bcs.n	8017802 <quorem+0x42>
 801784a:	f855 300b 	ldr.w	r3, [r5, fp]
 801784e:	b92b      	cbnz	r3, 801785c <quorem+0x9c>
 8017850:	9b01      	ldr	r3, [sp, #4]
 8017852:	3b04      	subs	r3, #4
 8017854:	429d      	cmp	r5, r3
 8017856:	461a      	mov	r2, r3
 8017858:	d32c      	bcc.n	80178b4 <quorem+0xf4>
 801785a:	613c      	str	r4, [r7, #16]
 801785c:	4638      	mov	r0, r7
 801785e:	f001 fd59 	bl	8019314 <__mcmp>
 8017862:	2800      	cmp	r0, #0
 8017864:	db22      	blt.n	80178ac <quorem+0xec>
 8017866:	3601      	adds	r6, #1
 8017868:	4629      	mov	r1, r5
 801786a:	2000      	movs	r0, #0
 801786c:	f858 2b04 	ldr.w	r2, [r8], #4
 8017870:	f8d1 c000 	ldr.w	ip, [r1]
 8017874:	b293      	uxth	r3, r2
 8017876:	1ac3      	subs	r3, r0, r3
 8017878:	0c12      	lsrs	r2, r2, #16
 801787a:	fa13 f38c 	uxtah	r3, r3, ip
 801787e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8017882:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017886:	b29b      	uxth	r3, r3
 8017888:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801788c:	45c1      	cmp	r9, r8
 801788e:	f841 3b04 	str.w	r3, [r1], #4
 8017892:	ea4f 4022 	mov.w	r0, r2, asr #16
 8017896:	d2e9      	bcs.n	801786c <quorem+0xac>
 8017898:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801789c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80178a0:	b922      	cbnz	r2, 80178ac <quorem+0xec>
 80178a2:	3b04      	subs	r3, #4
 80178a4:	429d      	cmp	r5, r3
 80178a6:	461a      	mov	r2, r3
 80178a8:	d30a      	bcc.n	80178c0 <quorem+0x100>
 80178aa:	613c      	str	r4, [r7, #16]
 80178ac:	4630      	mov	r0, r6
 80178ae:	b003      	add	sp, #12
 80178b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178b4:	6812      	ldr	r2, [r2, #0]
 80178b6:	3b04      	subs	r3, #4
 80178b8:	2a00      	cmp	r2, #0
 80178ba:	d1ce      	bne.n	801785a <quorem+0x9a>
 80178bc:	3c01      	subs	r4, #1
 80178be:	e7c9      	b.n	8017854 <quorem+0x94>
 80178c0:	6812      	ldr	r2, [r2, #0]
 80178c2:	3b04      	subs	r3, #4
 80178c4:	2a00      	cmp	r2, #0
 80178c6:	d1f0      	bne.n	80178aa <quorem+0xea>
 80178c8:	3c01      	subs	r4, #1
 80178ca:	e7eb      	b.n	80178a4 <quorem+0xe4>
 80178cc:	2000      	movs	r0, #0
 80178ce:	e7ee      	b.n	80178ae <quorem+0xee>

080178d0 <_dtoa_r>:
 80178d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178d4:	ed2d 8b04 	vpush	{d8-d9}
 80178d8:	69c5      	ldr	r5, [r0, #28]
 80178da:	b093      	sub	sp, #76	; 0x4c
 80178dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 80178e0:	ec57 6b10 	vmov	r6, r7, d0
 80178e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80178e8:	9107      	str	r1, [sp, #28]
 80178ea:	4604      	mov	r4, r0
 80178ec:	920a      	str	r2, [sp, #40]	; 0x28
 80178ee:	930d      	str	r3, [sp, #52]	; 0x34
 80178f0:	b975      	cbnz	r5, 8017910 <_dtoa_r+0x40>
 80178f2:	2010      	movs	r0, #16
 80178f4:	f001 f982 	bl	8018bfc <malloc>
 80178f8:	4602      	mov	r2, r0
 80178fa:	61e0      	str	r0, [r4, #28]
 80178fc:	b920      	cbnz	r0, 8017908 <_dtoa_r+0x38>
 80178fe:	4bae      	ldr	r3, [pc, #696]	; (8017bb8 <_dtoa_r+0x2e8>)
 8017900:	21ef      	movs	r1, #239	; 0xef
 8017902:	48ae      	ldr	r0, [pc, #696]	; (8017bbc <_dtoa_r+0x2ec>)
 8017904:	f002 f92a 	bl	8019b5c <__assert_func>
 8017908:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801790c:	6005      	str	r5, [r0, #0]
 801790e:	60c5      	str	r5, [r0, #12]
 8017910:	69e3      	ldr	r3, [r4, #28]
 8017912:	6819      	ldr	r1, [r3, #0]
 8017914:	b151      	cbz	r1, 801792c <_dtoa_r+0x5c>
 8017916:	685a      	ldr	r2, [r3, #4]
 8017918:	604a      	str	r2, [r1, #4]
 801791a:	2301      	movs	r3, #1
 801791c:	4093      	lsls	r3, r2
 801791e:	608b      	str	r3, [r1, #8]
 8017920:	4620      	mov	r0, r4
 8017922:	f001 fa71 	bl	8018e08 <_Bfree>
 8017926:	69e3      	ldr	r3, [r4, #28]
 8017928:	2200      	movs	r2, #0
 801792a:	601a      	str	r2, [r3, #0]
 801792c:	1e3b      	subs	r3, r7, #0
 801792e:	bfbb      	ittet	lt
 8017930:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017934:	9303      	strlt	r3, [sp, #12]
 8017936:	2300      	movge	r3, #0
 8017938:	2201      	movlt	r2, #1
 801793a:	bfac      	ite	ge
 801793c:	f8c8 3000 	strge.w	r3, [r8]
 8017940:	f8c8 2000 	strlt.w	r2, [r8]
 8017944:	4b9e      	ldr	r3, [pc, #632]	; (8017bc0 <_dtoa_r+0x2f0>)
 8017946:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801794a:	ea33 0308 	bics.w	r3, r3, r8
 801794e:	d11b      	bne.n	8017988 <_dtoa_r+0xb8>
 8017950:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017952:	f242 730f 	movw	r3, #9999	; 0x270f
 8017956:	6013      	str	r3, [r2, #0]
 8017958:	f3c8 0313 	ubfx	r3, r8, #0, #20
 801795c:	4333      	orrs	r3, r6
 801795e:	f000 8593 	beq.w	8018488 <_dtoa_r+0xbb8>
 8017962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017964:	b963      	cbnz	r3, 8017980 <_dtoa_r+0xb0>
 8017966:	4b97      	ldr	r3, [pc, #604]	; (8017bc4 <_dtoa_r+0x2f4>)
 8017968:	e027      	b.n	80179ba <_dtoa_r+0xea>
 801796a:	4b97      	ldr	r3, [pc, #604]	; (8017bc8 <_dtoa_r+0x2f8>)
 801796c:	9300      	str	r3, [sp, #0]
 801796e:	3308      	adds	r3, #8
 8017970:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017972:	6013      	str	r3, [r2, #0]
 8017974:	9800      	ldr	r0, [sp, #0]
 8017976:	b013      	add	sp, #76	; 0x4c
 8017978:	ecbd 8b04 	vpop	{d8-d9}
 801797c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017980:	4b90      	ldr	r3, [pc, #576]	; (8017bc4 <_dtoa_r+0x2f4>)
 8017982:	9300      	str	r3, [sp, #0]
 8017984:	3303      	adds	r3, #3
 8017986:	e7f3      	b.n	8017970 <_dtoa_r+0xa0>
 8017988:	ed9d 7b02 	vldr	d7, [sp, #8]
 801798c:	2200      	movs	r2, #0
 801798e:	ec51 0b17 	vmov	r0, r1, d7
 8017992:	eeb0 8a47 	vmov.f32	s16, s14
 8017996:	eef0 8a67 	vmov.f32	s17, s15
 801799a:	2300      	movs	r3, #0
 801799c:	f7e9 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80179a0:	4681      	mov	r9, r0
 80179a2:	b160      	cbz	r0, 80179be <_dtoa_r+0xee>
 80179a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80179a6:	2301      	movs	r3, #1
 80179a8:	6013      	str	r3, [r2, #0]
 80179aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	f000 8568 	beq.w	8018482 <_dtoa_r+0xbb2>
 80179b2:	4b86      	ldr	r3, [pc, #536]	; (8017bcc <_dtoa_r+0x2fc>)
 80179b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80179b6:	6013      	str	r3, [r2, #0]
 80179b8:	3b01      	subs	r3, #1
 80179ba:	9300      	str	r3, [sp, #0]
 80179bc:	e7da      	b.n	8017974 <_dtoa_r+0xa4>
 80179be:	aa10      	add	r2, sp, #64	; 0x40
 80179c0:	a911      	add	r1, sp, #68	; 0x44
 80179c2:	4620      	mov	r0, r4
 80179c4:	eeb0 0a48 	vmov.f32	s0, s16
 80179c8:	eef0 0a68 	vmov.f32	s1, s17
 80179cc:	f001 fdb8 	bl	8019540 <__d2b>
 80179d0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80179d4:	4682      	mov	sl, r0
 80179d6:	2d00      	cmp	r5, #0
 80179d8:	d07f      	beq.n	8017ada <_dtoa_r+0x20a>
 80179da:	ee18 3a90 	vmov	r3, s17
 80179de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80179e2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80179e6:	ec51 0b18 	vmov	r0, r1, d8
 80179ea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80179ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80179f2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80179f6:	4619      	mov	r1, r3
 80179f8:	2200      	movs	r2, #0
 80179fa:	4b75      	ldr	r3, [pc, #468]	; (8017bd0 <_dtoa_r+0x300>)
 80179fc:	f7e8 fc44 	bl	8000288 <__aeabi_dsub>
 8017a00:	a367      	add	r3, pc, #412	; (adr r3, 8017ba0 <_dtoa_r+0x2d0>)
 8017a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a06:	f7e8 fdf7 	bl	80005f8 <__aeabi_dmul>
 8017a0a:	a367      	add	r3, pc, #412	; (adr r3, 8017ba8 <_dtoa_r+0x2d8>)
 8017a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a10:	f7e8 fc3c 	bl	800028c <__adddf3>
 8017a14:	4606      	mov	r6, r0
 8017a16:	4628      	mov	r0, r5
 8017a18:	460f      	mov	r7, r1
 8017a1a:	f7e8 fd83 	bl	8000524 <__aeabi_i2d>
 8017a1e:	a364      	add	r3, pc, #400	; (adr r3, 8017bb0 <_dtoa_r+0x2e0>)
 8017a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a24:	f7e8 fde8 	bl	80005f8 <__aeabi_dmul>
 8017a28:	4602      	mov	r2, r0
 8017a2a:	460b      	mov	r3, r1
 8017a2c:	4630      	mov	r0, r6
 8017a2e:	4639      	mov	r1, r7
 8017a30:	f7e8 fc2c 	bl	800028c <__adddf3>
 8017a34:	4606      	mov	r6, r0
 8017a36:	460f      	mov	r7, r1
 8017a38:	f7e9 f88e 	bl	8000b58 <__aeabi_d2iz>
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	4683      	mov	fp, r0
 8017a40:	2300      	movs	r3, #0
 8017a42:	4630      	mov	r0, r6
 8017a44:	4639      	mov	r1, r7
 8017a46:	f7e9 f849 	bl	8000adc <__aeabi_dcmplt>
 8017a4a:	b148      	cbz	r0, 8017a60 <_dtoa_r+0x190>
 8017a4c:	4658      	mov	r0, fp
 8017a4e:	f7e8 fd69 	bl	8000524 <__aeabi_i2d>
 8017a52:	4632      	mov	r2, r6
 8017a54:	463b      	mov	r3, r7
 8017a56:	f7e9 f837 	bl	8000ac8 <__aeabi_dcmpeq>
 8017a5a:	b908      	cbnz	r0, 8017a60 <_dtoa_r+0x190>
 8017a5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017a60:	f1bb 0f16 	cmp.w	fp, #22
 8017a64:	d857      	bhi.n	8017b16 <_dtoa_r+0x246>
 8017a66:	4b5b      	ldr	r3, [pc, #364]	; (8017bd4 <_dtoa_r+0x304>)
 8017a68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017a70:	ec51 0b18 	vmov	r0, r1, d8
 8017a74:	f7e9 f832 	bl	8000adc <__aeabi_dcmplt>
 8017a78:	2800      	cmp	r0, #0
 8017a7a:	d04e      	beq.n	8017b1a <_dtoa_r+0x24a>
 8017a7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017a80:	2300      	movs	r3, #0
 8017a82:	930c      	str	r3, [sp, #48]	; 0x30
 8017a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017a86:	1b5b      	subs	r3, r3, r5
 8017a88:	1e5a      	subs	r2, r3, #1
 8017a8a:	bf45      	ittet	mi
 8017a8c:	f1c3 0301 	rsbmi	r3, r3, #1
 8017a90:	9305      	strmi	r3, [sp, #20]
 8017a92:	2300      	movpl	r3, #0
 8017a94:	2300      	movmi	r3, #0
 8017a96:	9206      	str	r2, [sp, #24]
 8017a98:	bf54      	ite	pl
 8017a9a:	9305      	strpl	r3, [sp, #20]
 8017a9c:	9306      	strmi	r3, [sp, #24]
 8017a9e:	f1bb 0f00 	cmp.w	fp, #0
 8017aa2:	db3c      	blt.n	8017b1e <_dtoa_r+0x24e>
 8017aa4:	9b06      	ldr	r3, [sp, #24]
 8017aa6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8017aaa:	445b      	add	r3, fp
 8017aac:	9306      	str	r3, [sp, #24]
 8017aae:	2300      	movs	r3, #0
 8017ab0:	9308      	str	r3, [sp, #32]
 8017ab2:	9b07      	ldr	r3, [sp, #28]
 8017ab4:	2b09      	cmp	r3, #9
 8017ab6:	d868      	bhi.n	8017b8a <_dtoa_r+0x2ba>
 8017ab8:	2b05      	cmp	r3, #5
 8017aba:	bfc4      	itt	gt
 8017abc:	3b04      	subgt	r3, #4
 8017abe:	9307      	strgt	r3, [sp, #28]
 8017ac0:	9b07      	ldr	r3, [sp, #28]
 8017ac2:	f1a3 0302 	sub.w	r3, r3, #2
 8017ac6:	bfcc      	ite	gt
 8017ac8:	2500      	movgt	r5, #0
 8017aca:	2501      	movle	r5, #1
 8017acc:	2b03      	cmp	r3, #3
 8017ace:	f200 8085 	bhi.w	8017bdc <_dtoa_r+0x30c>
 8017ad2:	e8df f003 	tbb	[pc, r3]
 8017ad6:	3b2e      	.short	0x3b2e
 8017ad8:	5839      	.short	0x5839
 8017ada:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8017ade:	441d      	add	r5, r3
 8017ae0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017ae4:	2b20      	cmp	r3, #32
 8017ae6:	bfc1      	itttt	gt
 8017ae8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017aec:	fa08 f803 	lslgt.w	r8, r8, r3
 8017af0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8017af4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8017af8:	bfd6      	itet	le
 8017afa:	f1c3 0320 	rsble	r3, r3, #32
 8017afe:	ea48 0003 	orrgt.w	r0, r8, r3
 8017b02:	fa06 f003 	lslle.w	r0, r6, r3
 8017b06:	f7e8 fcfd 	bl	8000504 <__aeabi_ui2d>
 8017b0a:	2201      	movs	r2, #1
 8017b0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8017b10:	3d01      	subs	r5, #1
 8017b12:	920e      	str	r2, [sp, #56]	; 0x38
 8017b14:	e76f      	b.n	80179f6 <_dtoa_r+0x126>
 8017b16:	2301      	movs	r3, #1
 8017b18:	e7b3      	b.n	8017a82 <_dtoa_r+0x1b2>
 8017b1a:	900c      	str	r0, [sp, #48]	; 0x30
 8017b1c:	e7b2      	b.n	8017a84 <_dtoa_r+0x1b4>
 8017b1e:	9b05      	ldr	r3, [sp, #20]
 8017b20:	eba3 030b 	sub.w	r3, r3, fp
 8017b24:	9305      	str	r3, [sp, #20]
 8017b26:	f1cb 0300 	rsb	r3, fp, #0
 8017b2a:	9308      	str	r3, [sp, #32]
 8017b2c:	2300      	movs	r3, #0
 8017b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017b30:	e7bf      	b.n	8017ab2 <_dtoa_r+0x1e2>
 8017b32:	2300      	movs	r3, #0
 8017b34:	9309      	str	r3, [sp, #36]	; 0x24
 8017b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	dc52      	bgt.n	8017be2 <_dtoa_r+0x312>
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	9301      	str	r3, [sp, #4]
 8017b40:	9304      	str	r3, [sp, #16]
 8017b42:	461a      	mov	r2, r3
 8017b44:	920a      	str	r2, [sp, #40]	; 0x28
 8017b46:	e00b      	b.n	8017b60 <_dtoa_r+0x290>
 8017b48:	2301      	movs	r3, #1
 8017b4a:	e7f3      	b.n	8017b34 <_dtoa_r+0x264>
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	9309      	str	r3, [sp, #36]	; 0x24
 8017b50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017b52:	445b      	add	r3, fp
 8017b54:	9301      	str	r3, [sp, #4]
 8017b56:	3301      	adds	r3, #1
 8017b58:	2b01      	cmp	r3, #1
 8017b5a:	9304      	str	r3, [sp, #16]
 8017b5c:	bfb8      	it	lt
 8017b5e:	2301      	movlt	r3, #1
 8017b60:	69e0      	ldr	r0, [r4, #28]
 8017b62:	2100      	movs	r1, #0
 8017b64:	2204      	movs	r2, #4
 8017b66:	f102 0614 	add.w	r6, r2, #20
 8017b6a:	429e      	cmp	r6, r3
 8017b6c:	d93d      	bls.n	8017bea <_dtoa_r+0x31a>
 8017b6e:	6041      	str	r1, [r0, #4]
 8017b70:	4620      	mov	r0, r4
 8017b72:	f001 f909 	bl	8018d88 <_Balloc>
 8017b76:	9000      	str	r0, [sp, #0]
 8017b78:	2800      	cmp	r0, #0
 8017b7a:	d139      	bne.n	8017bf0 <_dtoa_r+0x320>
 8017b7c:	4b16      	ldr	r3, [pc, #88]	; (8017bd8 <_dtoa_r+0x308>)
 8017b7e:	4602      	mov	r2, r0
 8017b80:	f240 11af 	movw	r1, #431	; 0x1af
 8017b84:	e6bd      	b.n	8017902 <_dtoa_r+0x32>
 8017b86:	2301      	movs	r3, #1
 8017b88:	e7e1      	b.n	8017b4e <_dtoa_r+0x27e>
 8017b8a:	2501      	movs	r5, #1
 8017b8c:	2300      	movs	r3, #0
 8017b8e:	9307      	str	r3, [sp, #28]
 8017b90:	9509      	str	r5, [sp, #36]	; 0x24
 8017b92:	f04f 33ff 	mov.w	r3, #4294967295
 8017b96:	9301      	str	r3, [sp, #4]
 8017b98:	9304      	str	r3, [sp, #16]
 8017b9a:	2200      	movs	r2, #0
 8017b9c:	2312      	movs	r3, #18
 8017b9e:	e7d1      	b.n	8017b44 <_dtoa_r+0x274>
 8017ba0:	636f4361 	.word	0x636f4361
 8017ba4:	3fd287a7 	.word	0x3fd287a7
 8017ba8:	8b60c8b3 	.word	0x8b60c8b3
 8017bac:	3fc68a28 	.word	0x3fc68a28
 8017bb0:	509f79fb 	.word	0x509f79fb
 8017bb4:	3fd34413 	.word	0x3fd34413
 8017bb8:	0801b7c2 	.word	0x0801b7c2
 8017bbc:	0801b7d9 	.word	0x0801b7d9
 8017bc0:	7ff00000 	.word	0x7ff00000
 8017bc4:	0801b7be 	.word	0x0801b7be
 8017bc8:	0801b7b5 	.word	0x0801b7b5
 8017bcc:	0801b78a 	.word	0x0801b78a
 8017bd0:	3ff80000 	.word	0x3ff80000
 8017bd4:	0801b928 	.word	0x0801b928
 8017bd8:	0801b831 	.word	0x0801b831
 8017bdc:	2301      	movs	r3, #1
 8017bde:	9309      	str	r3, [sp, #36]	; 0x24
 8017be0:	e7d7      	b.n	8017b92 <_dtoa_r+0x2c2>
 8017be2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017be4:	9301      	str	r3, [sp, #4]
 8017be6:	9304      	str	r3, [sp, #16]
 8017be8:	e7ba      	b.n	8017b60 <_dtoa_r+0x290>
 8017bea:	3101      	adds	r1, #1
 8017bec:	0052      	lsls	r2, r2, #1
 8017bee:	e7ba      	b.n	8017b66 <_dtoa_r+0x296>
 8017bf0:	69e3      	ldr	r3, [r4, #28]
 8017bf2:	9a00      	ldr	r2, [sp, #0]
 8017bf4:	601a      	str	r2, [r3, #0]
 8017bf6:	9b04      	ldr	r3, [sp, #16]
 8017bf8:	2b0e      	cmp	r3, #14
 8017bfa:	f200 80a8 	bhi.w	8017d4e <_dtoa_r+0x47e>
 8017bfe:	2d00      	cmp	r5, #0
 8017c00:	f000 80a5 	beq.w	8017d4e <_dtoa_r+0x47e>
 8017c04:	f1bb 0f00 	cmp.w	fp, #0
 8017c08:	dd38      	ble.n	8017c7c <_dtoa_r+0x3ac>
 8017c0a:	4bc0      	ldr	r3, [pc, #768]	; (8017f0c <_dtoa_r+0x63c>)
 8017c0c:	f00b 020f 	and.w	r2, fp, #15
 8017c10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017c18:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017c1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017c20:	d019      	beq.n	8017c56 <_dtoa_r+0x386>
 8017c22:	4bbb      	ldr	r3, [pc, #748]	; (8017f10 <_dtoa_r+0x640>)
 8017c24:	ec51 0b18 	vmov	r0, r1, d8
 8017c28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017c2c:	f7e8 fe0e 	bl	800084c <__aeabi_ddiv>
 8017c30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c34:	f008 080f 	and.w	r8, r8, #15
 8017c38:	2503      	movs	r5, #3
 8017c3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017f10 <_dtoa_r+0x640>
 8017c3e:	f1b8 0f00 	cmp.w	r8, #0
 8017c42:	d10a      	bne.n	8017c5a <_dtoa_r+0x38a>
 8017c44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017c48:	4632      	mov	r2, r6
 8017c4a:	463b      	mov	r3, r7
 8017c4c:	f7e8 fdfe 	bl	800084c <__aeabi_ddiv>
 8017c50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017c54:	e02b      	b.n	8017cae <_dtoa_r+0x3de>
 8017c56:	2502      	movs	r5, #2
 8017c58:	e7ef      	b.n	8017c3a <_dtoa_r+0x36a>
 8017c5a:	f018 0f01 	tst.w	r8, #1
 8017c5e:	d008      	beq.n	8017c72 <_dtoa_r+0x3a2>
 8017c60:	4630      	mov	r0, r6
 8017c62:	4639      	mov	r1, r7
 8017c64:	e9d9 2300 	ldrd	r2, r3, [r9]
 8017c68:	f7e8 fcc6 	bl	80005f8 <__aeabi_dmul>
 8017c6c:	3501      	adds	r5, #1
 8017c6e:	4606      	mov	r6, r0
 8017c70:	460f      	mov	r7, r1
 8017c72:	ea4f 0868 	mov.w	r8, r8, asr #1
 8017c76:	f109 0908 	add.w	r9, r9, #8
 8017c7a:	e7e0      	b.n	8017c3e <_dtoa_r+0x36e>
 8017c7c:	f000 809f 	beq.w	8017dbe <_dtoa_r+0x4ee>
 8017c80:	f1cb 0600 	rsb	r6, fp, #0
 8017c84:	4ba1      	ldr	r3, [pc, #644]	; (8017f0c <_dtoa_r+0x63c>)
 8017c86:	4fa2      	ldr	r7, [pc, #648]	; (8017f10 <_dtoa_r+0x640>)
 8017c88:	f006 020f 	and.w	r2, r6, #15
 8017c8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c94:	ec51 0b18 	vmov	r0, r1, d8
 8017c98:	f7e8 fcae 	bl	80005f8 <__aeabi_dmul>
 8017c9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ca0:	1136      	asrs	r6, r6, #4
 8017ca2:	2300      	movs	r3, #0
 8017ca4:	2502      	movs	r5, #2
 8017ca6:	2e00      	cmp	r6, #0
 8017ca8:	d17e      	bne.n	8017da8 <_dtoa_r+0x4d8>
 8017caa:	2b00      	cmp	r3, #0
 8017cac:	d1d0      	bne.n	8017c50 <_dtoa_r+0x380>
 8017cae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017cb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	f000 8084 	beq.w	8017dc2 <_dtoa_r+0x4f2>
 8017cba:	4b96      	ldr	r3, [pc, #600]	; (8017f14 <_dtoa_r+0x644>)
 8017cbc:	2200      	movs	r2, #0
 8017cbe:	4640      	mov	r0, r8
 8017cc0:	4649      	mov	r1, r9
 8017cc2:	f7e8 ff0b 	bl	8000adc <__aeabi_dcmplt>
 8017cc6:	2800      	cmp	r0, #0
 8017cc8:	d07b      	beq.n	8017dc2 <_dtoa_r+0x4f2>
 8017cca:	9b04      	ldr	r3, [sp, #16]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d078      	beq.n	8017dc2 <_dtoa_r+0x4f2>
 8017cd0:	9b01      	ldr	r3, [sp, #4]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	dd39      	ble.n	8017d4a <_dtoa_r+0x47a>
 8017cd6:	4b90      	ldr	r3, [pc, #576]	; (8017f18 <_dtoa_r+0x648>)
 8017cd8:	2200      	movs	r2, #0
 8017cda:	4640      	mov	r0, r8
 8017cdc:	4649      	mov	r1, r9
 8017cde:	f7e8 fc8b 	bl	80005f8 <__aeabi_dmul>
 8017ce2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017ce6:	9e01      	ldr	r6, [sp, #4]
 8017ce8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017cec:	3501      	adds	r5, #1
 8017cee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8017cf2:	4628      	mov	r0, r5
 8017cf4:	f7e8 fc16 	bl	8000524 <__aeabi_i2d>
 8017cf8:	4642      	mov	r2, r8
 8017cfa:	464b      	mov	r3, r9
 8017cfc:	f7e8 fc7c 	bl	80005f8 <__aeabi_dmul>
 8017d00:	4b86      	ldr	r3, [pc, #536]	; (8017f1c <_dtoa_r+0x64c>)
 8017d02:	2200      	movs	r2, #0
 8017d04:	f7e8 fac2 	bl	800028c <__adddf3>
 8017d08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017d10:	9303      	str	r3, [sp, #12]
 8017d12:	2e00      	cmp	r6, #0
 8017d14:	d158      	bne.n	8017dc8 <_dtoa_r+0x4f8>
 8017d16:	4b82      	ldr	r3, [pc, #520]	; (8017f20 <_dtoa_r+0x650>)
 8017d18:	2200      	movs	r2, #0
 8017d1a:	4640      	mov	r0, r8
 8017d1c:	4649      	mov	r1, r9
 8017d1e:	f7e8 fab3 	bl	8000288 <__aeabi_dsub>
 8017d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d26:	4680      	mov	r8, r0
 8017d28:	4689      	mov	r9, r1
 8017d2a:	f7e8 fef5 	bl	8000b18 <__aeabi_dcmpgt>
 8017d2e:	2800      	cmp	r0, #0
 8017d30:	f040 8296 	bne.w	8018260 <_dtoa_r+0x990>
 8017d34:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8017d38:	4640      	mov	r0, r8
 8017d3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017d3e:	4649      	mov	r1, r9
 8017d40:	f7e8 fecc 	bl	8000adc <__aeabi_dcmplt>
 8017d44:	2800      	cmp	r0, #0
 8017d46:	f040 8289 	bne.w	801825c <_dtoa_r+0x98c>
 8017d4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8017d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	f2c0 814e 	blt.w	8017ff2 <_dtoa_r+0x722>
 8017d56:	f1bb 0f0e 	cmp.w	fp, #14
 8017d5a:	f300 814a 	bgt.w	8017ff2 <_dtoa_r+0x722>
 8017d5e:	4b6b      	ldr	r3, [pc, #428]	; (8017f0c <_dtoa_r+0x63c>)
 8017d60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017d64:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017d68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	f280 80dc 	bge.w	8017f28 <_dtoa_r+0x658>
 8017d70:	9b04      	ldr	r3, [sp, #16]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	f300 80d8 	bgt.w	8017f28 <_dtoa_r+0x658>
 8017d78:	f040 826f 	bne.w	801825a <_dtoa_r+0x98a>
 8017d7c:	4b68      	ldr	r3, [pc, #416]	; (8017f20 <_dtoa_r+0x650>)
 8017d7e:	2200      	movs	r2, #0
 8017d80:	4640      	mov	r0, r8
 8017d82:	4649      	mov	r1, r9
 8017d84:	f7e8 fc38 	bl	80005f8 <__aeabi_dmul>
 8017d88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017d8c:	f7e8 feba 	bl	8000b04 <__aeabi_dcmpge>
 8017d90:	9e04      	ldr	r6, [sp, #16]
 8017d92:	4637      	mov	r7, r6
 8017d94:	2800      	cmp	r0, #0
 8017d96:	f040 8245 	bne.w	8018224 <_dtoa_r+0x954>
 8017d9a:	9d00      	ldr	r5, [sp, #0]
 8017d9c:	2331      	movs	r3, #49	; 0x31
 8017d9e:	f805 3b01 	strb.w	r3, [r5], #1
 8017da2:	f10b 0b01 	add.w	fp, fp, #1
 8017da6:	e241      	b.n	801822c <_dtoa_r+0x95c>
 8017da8:	07f2      	lsls	r2, r6, #31
 8017daa:	d505      	bpl.n	8017db8 <_dtoa_r+0x4e8>
 8017dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017db0:	f7e8 fc22 	bl	80005f8 <__aeabi_dmul>
 8017db4:	3501      	adds	r5, #1
 8017db6:	2301      	movs	r3, #1
 8017db8:	1076      	asrs	r6, r6, #1
 8017dba:	3708      	adds	r7, #8
 8017dbc:	e773      	b.n	8017ca6 <_dtoa_r+0x3d6>
 8017dbe:	2502      	movs	r5, #2
 8017dc0:	e775      	b.n	8017cae <_dtoa_r+0x3de>
 8017dc2:	9e04      	ldr	r6, [sp, #16]
 8017dc4:	465f      	mov	r7, fp
 8017dc6:	e792      	b.n	8017cee <_dtoa_r+0x41e>
 8017dc8:	9900      	ldr	r1, [sp, #0]
 8017dca:	4b50      	ldr	r3, [pc, #320]	; (8017f0c <_dtoa_r+0x63c>)
 8017dcc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017dd0:	4431      	add	r1, r6
 8017dd2:	9102      	str	r1, [sp, #8]
 8017dd4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017dd6:	eeb0 9a47 	vmov.f32	s18, s14
 8017dda:	eef0 9a67 	vmov.f32	s19, s15
 8017dde:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017de2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017de6:	2900      	cmp	r1, #0
 8017de8:	d044      	beq.n	8017e74 <_dtoa_r+0x5a4>
 8017dea:	494e      	ldr	r1, [pc, #312]	; (8017f24 <_dtoa_r+0x654>)
 8017dec:	2000      	movs	r0, #0
 8017dee:	f7e8 fd2d 	bl	800084c <__aeabi_ddiv>
 8017df2:	ec53 2b19 	vmov	r2, r3, d9
 8017df6:	f7e8 fa47 	bl	8000288 <__aeabi_dsub>
 8017dfa:	9d00      	ldr	r5, [sp, #0]
 8017dfc:	ec41 0b19 	vmov	d9, r0, r1
 8017e00:	4649      	mov	r1, r9
 8017e02:	4640      	mov	r0, r8
 8017e04:	f7e8 fea8 	bl	8000b58 <__aeabi_d2iz>
 8017e08:	4606      	mov	r6, r0
 8017e0a:	f7e8 fb8b 	bl	8000524 <__aeabi_i2d>
 8017e0e:	4602      	mov	r2, r0
 8017e10:	460b      	mov	r3, r1
 8017e12:	4640      	mov	r0, r8
 8017e14:	4649      	mov	r1, r9
 8017e16:	f7e8 fa37 	bl	8000288 <__aeabi_dsub>
 8017e1a:	3630      	adds	r6, #48	; 0x30
 8017e1c:	f805 6b01 	strb.w	r6, [r5], #1
 8017e20:	ec53 2b19 	vmov	r2, r3, d9
 8017e24:	4680      	mov	r8, r0
 8017e26:	4689      	mov	r9, r1
 8017e28:	f7e8 fe58 	bl	8000adc <__aeabi_dcmplt>
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	d164      	bne.n	8017efa <_dtoa_r+0x62a>
 8017e30:	4642      	mov	r2, r8
 8017e32:	464b      	mov	r3, r9
 8017e34:	4937      	ldr	r1, [pc, #220]	; (8017f14 <_dtoa_r+0x644>)
 8017e36:	2000      	movs	r0, #0
 8017e38:	f7e8 fa26 	bl	8000288 <__aeabi_dsub>
 8017e3c:	ec53 2b19 	vmov	r2, r3, d9
 8017e40:	f7e8 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8017e44:	2800      	cmp	r0, #0
 8017e46:	f040 80b6 	bne.w	8017fb6 <_dtoa_r+0x6e6>
 8017e4a:	9b02      	ldr	r3, [sp, #8]
 8017e4c:	429d      	cmp	r5, r3
 8017e4e:	f43f af7c 	beq.w	8017d4a <_dtoa_r+0x47a>
 8017e52:	4b31      	ldr	r3, [pc, #196]	; (8017f18 <_dtoa_r+0x648>)
 8017e54:	ec51 0b19 	vmov	r0, r1, d9
 8017e58:	2200      	movs	r2, #0
 8017e5a:	f7e8 fbcd 	bl	80005f8 <__aeabi_dmul>
 8017e5e:	4b2e      	ldr	r3, [pc, #184]	; (8017f18 <_dtoa_r+0x648>)
 8017e60:	ec41 0b19 	vmov	d9, r0, r1
 8017e64:	2200      	movs	r2, #0
 8017e66:	4640      	mov	r0, r8
 8017e68:	4649      	mov	r1, r9
 8017e6a:	f7e8 fbc5 	bl	80005f8 <__aeabi_dmul>
 8017e6e:	4680      	mov	r8, r0
 8017e70:	4689      	mov	r9, r1
 8017e72:	e7c5      	b.n	8017e00 <_dtoa_r+0x530>
 8017e74:	ec51 0b17 	vmov	r0, r1, d7
 8017e78:	f7e8 fbbe 	bl	80005f8 <__aeabi_dmul>
 8017e7c:	9b02      	ldr	r3, [sp, #8]
 8017e7e:	9d00      	ldr	r5, [sp, #0]
 8017e80:	930f      	str	r3, [sp, #60]	; 0x3c
 8017e82:	ec41 0b19 	vmov	d9, r0, r1
 8017e86:	4649      	mov	r1, r9
 8017e88:	4640      	mov	r0, r8
 8017e8a:	f7e8 fe65 	bl	8000b58 <__aeabi_d2iz>
 8017e8e:	4606      	mov	r6, r0
 8017e90:	f7e8 fb48 	bl	8000524 <__aeabi_i2d>
 8017e94:	3630      	adds	r6, #48	; 0x30
 8017e96:	4602      	mov	r2, r0
 8017e98:	460b      	mov	r3, r1
 8017e9a:	4640      	mov	r0, r8
 8017e9c:	4649      	mov	r1, r9
 8017e9e:	f7e8 f9f3 	bl	8000288 <__aeabi_dsub>
 8017ea2:	f805 6b01 	strb.w	r6, [r5], #1
 8017ea6:	9b02      	ldr	r3, [sp, #8]
 8017ea8:	429d      	cmp	r5, r3
 8017eaa:	4680      	mov	r8, r0
 8017eac:	4689      	mov	r9, r1
 8017eae:	f04f 0200 	mov.w	r2, #0
 8017eb2:	d124      	bne.n	8017efe <_dtoa_r+0x62e>
 8017eb4:	4b1b      	ldr	r3, [pc, #108]	; (8017f24 <_dtoa_r+0x654>)
 8017eb6:	ec51 0b19 	vmov	r0, r1, d9
 8017eba:	f7e8 f9e7 	bl	800028c <__adddf3>
 8017ebe:	4602      	mov	r2, r0
 8017ec0:	460b      	mov	r3, r1
 8017ec2:	4640      	mov	r0, r8
 8017ec4:	4649      	mov	r1, r9
 8017ec6:	f7e8 fe27 	bl	8000b18 <__aeabi_dcmpgt>
 8017eca:	2800      	cmp	r0, #0
 8017ecc:	d173      	bne.n	8017fb6 <_dtoa_r+0x6e6>
 8017ece:	ec53 2b19 	vmov	r2, r3, d9
 8017ed2:	4914      	ldr	r1, [pc, #80]	; (8017f24 <_dtoa_r+0x654>)
 8017ed4:	2000      	movs	r0, #0
 8017ed6:	f7e8 f9d7 	bl	8000288 <__aeabi_dsub>
 8017eda:	4602      	mov	r2, r0
 8017edc:	460b      	mov	r3, r1
 8017ede:	4640      	mov	r0, r8
 8017ee0:	4649      	mov	r1, r9
 8017ee2:	f7e8 fdfb 	bl	8000adc <__aeabi_dcmplt>
 8017ee6:	2800      	cmp	r0, #0
 8017ee8:	f43f af2f 	beq.w	8017d4a <_dtoa_r+0x47a>
 8017eec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017eee:	1e6b      	subs	r3, r5, #1
 8017ef0:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ef2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017ef6:	2b30      	cmp	r3, #48	; 0x30
 8017ef8:	d0f8      	beq.n	8017eec <_dtoa_r+0x61c>
 8017efa:	46bb      	mov	fp, r7
 8017efc:	e04a      	b.n	8017f94 <_dtoa_r+0x6c4>
 8017efe:	4b06      	ldr	r3, [pc, #24]	; (8017f18 <_dtoa_r+0x648>)
 8017f00:	f7e8 fb7a 	bl	80005f8 <__aeabi_dmul>
 8017f04:	4680      	mov	r8, r0
 8017f06:	4689      	mov	r9, r1
 8017f08:	e7bd      	b.n	8017e86 <_dtoa_r+0x5b6>
 8017f0a:	bf00      	nop
 8017f0c:	0801b928 	.word	0x0801b928
 8017f10:	0801b900 	.word	0x0801b900
 8017f14:	3ff00000 	.word	0x3ff00000
 8017f18:	40240000 	.word	0x40240000
 8017f1c:	401c0000 	.word	0x401c0000
 8017f20:	40140000 	.word	0x40140000
 8017f24:	3fe00000 	.word	0x3fe00000
 8017f28:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017f2c:	9d00      	ldr	r5, [sp, #0]
 8017f2e:	4642      	mov	r2, r8
 8017f30:	464b      	mov	r3, r9
 8017f32:	4630      	mov	r0, r6
 8017f34:	4639      	mov	r1, r7
 8017f36:	f7e8 fc89 	bl	800084c <__aeabi_ddiv>
 8017f3a:	f7e8 fe0d 	bl	8000b58 <__aeabi_d2iz>
 8017f3e:	9001      	str	r0, [sp, #4]
 8017f40:	f7e8 faf0 	bl	8000524 <__aeabi_i2d>
 8017f44:	4642      	mov	r2, r8
 8017f46:	464b      	mov	r3, r9
 8017f48:	f7e8 fb56 	bl	80005f8 <__aeabi_dmul>
 8017f4c:	4602      	mov	r2, r0
 8017f4e:	460b      	mov	r3, r1
 8017f50:	4630      	mov	r0, r6
 8017f52:	4639      	mov	r1, r7
 8017f54:	f7e8 f998 	bl	8000288 <__aeabi_dsub>
 8017f58:	9e01      	ldr	r6, [sp, #4]
 8017f5a:	9f04      	ldr	r7, [sp, #16]
 8017f5c:	3630      	adds	r6, #48	; 0x30
 8017f5e:	f805 6b01 	strb.w	r6, [r5], #1
 8017f62:	9e00      	ldr	r6, [sp, #0]
 8017f64:	1bae      	subs	r6, r5, r6
 8017f66:	42b7      	cmp	r7, r6
 8017f68:	4602      	mov	r2, r0
 8017f6a:	460b      	mov	r3, r1
 8017f6c:	d134      	bne.n	8017fd8 <_dtoa_r+0x708>
 8017f6e:	f7e8 f98d 	bl	800028c <__adddf3>
 8017f72:	4642      	mov	r2, r8
 8017f74:	464b      	mov	r3, r9
 8017f76:	4606      	mov	r6, r0
 8017f78:	460f      	mov	r7, r1
 8017f7a:	f7e8 fdcd 	bl	8000b18 <__aeabi_dcmpgt>
 8017f7e:	b9c8      	cbnz	r0, 8017fb4 <_dtoa_r+0x6e4>
 8017f80:	4642      	mov	r2, r8
 8017f82:	464b      	mov	r3, r9
 8017f84:	4630      	mov	r0, r6
 8017f86:	4639      	mov	r1, r7
 8017f88:	f7e8 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f8c:	b110      	cbz	r0, 8017f94 <_dtoa_r+0x6c4>
 8017f8e:	9b01      	ldr	r3, [sp, #4]
 8017f90:	07db      	lsls	r3, r3, #31
 8017f92:	d40f      	bmi.n	8017fb4 <_dtoa_r+0x6e4>
 8017f94:	4651      	mov	r1, sl
 8017f96:	4620      	mov	r0, r4
 8017f98:	f000 ff36 	bl	8018e08 <_Bfree>
 8017f9c:	2300      	movs	r3, #0
 8017f9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017fa0:	702b      	strb	r3, [r5, #0]
 8017fa2:	f10b 0301 	add.w	r3, fp, #1
 8017fa6:	6013      	str	r3, [r2, #0]
 8017fa8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	f43f ace2 	beq.w	8017974 <_dtoa_r+0xa4>
 8017fb0:	601d      	str	r5, [r3, #0]
 8017fb2:	e4df      	b.n	8017974 <_dtoa_r+0xa4>
 8017fb4:	465f      	mov	r7, fp
 8017fb6:	462b      	mov	r3, r5
 8017fb8:	461d      	mov	r5, r3
 8017fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017fbe:	2a39      	cmp	r2, #57	; 0x39
 8017fc0:	d106      	bne.n	8017fd0 <_dtoa_r+0x700>
 8017fc2:	9a00      	ldr	r2, [sp, #0]
 8017fc4:	429a      	cmp	r2, r3
 8017fc6:	d1f7      	bne.n	8017fb8 <_dtoa_r+0x6e8>
 8017fc8:	9900      	ldr	r1, [sp, #0]
 8017fca:	2230      	movs	r2, #48	; 0x30
 8017fcc:	3701      	adds	r7, #1
 8017fce:	700a      	strb	r2, [r1, #0]
 8017fd0:	781a      	ldrb	r2, [r3, #0]
 8017fd2:	3201      	adds	r2, #1
 8017fd4:	701a      	strb	r2, [r3, #0]
 8017fd6:	e790      	b.n	8017efa <_dtoa_r+0x62a>
 8017fd8:	4ba3      	ldr	r3, [pc, #652]	; (8018268 <_dtoa_r+0x998>)
 8017fda:	2200      	movs	r2, #0
 8017fdc:	f7e8 fb0c 	bl	80005f8 <__aeabi_dmul>
 8017fe0:	2200      	movs	r2, #0
 8017fe2:	2300      	movs	r3, #0
 8017fe4:	4606      	mov	r6, r0
 8017fe6:	460f      	mov	r7, r1
 8017fe8:	f7e8 fd6e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017fec:	2800      	cmp	r0, #0
 8017fee:	d09e      	beq.n	8017f2e <_dtoa_r+0x65e>
 8017ff0:	e7d0      	b.n	8017f94 <_dtoa_r+0x6c4>
 8017ff2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017ff4:	2a00      	cmp	r2, #0
 8017ff6:	f000 80ca 	beq.w	801818e <_dtoa_r+0x8be>
 8017ffa:	9a07      	ldr	r2, [sp, #28]
 8017ffc:	2a01      	cmp	r2, #1
 8017ffe:	f300 80ad 	bgt.w	801815c <_dtoa_r+0x88c>
 8018002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018004:	2a00      	cmp	r2, #0
 8018006:	f000 80a5 	beq.w	8018154 <_dtoa_r+0x884>
 801800a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801800e:	9e08      	ldr	r6, [sp, #32]
 8018010:	9d05      	ldr	r5, [sp, #20]
 8018012:	9a05      	ldr	r2, [sp, #20]
 8018014:	441a      	add	r2, r3
 8018016:	9205      	str	r2, [sp, #20]
 8018018:	9a06      	ldr	r2, [sp, #24]
 801801a:	2101      	movs	r1, #1
 801801c:	441a      	add	r2, r3
 801801e:	4620      	mov	r0, r4
 8018020:	9206      	str	r2, [sp, #24]
 8018022:	f000 fff1 	bl	8019008 <__i2b>
 8018026:	4607      	mov	r7, r0
 8018028:	b165      	cbz	r5, 8018044 <_dtoa_r+0x774>
 801802a:	9b06      	ldr	r3, [sp, #24]
 801802c:	2b00      	cmp	r3, #0
 801802e:	dd09      	ble.n	8018044 <_dtoa_r+0x774>
 8018030:	42ab      	cmp	r3, r5
 8018032:	9a05      	ldr	r2, [sp, #20]
 8018034:	bfa8      	it	ge
 8018036:	462b      	movge	r3, r5
 8018038:	1ad2      	subs	r2, r2, r3
 801803a:	9205      	str	r2, [sp, #20]
 801803c:	9a06      	ldr	r2, [sp, #24]
 801803e:	1aed      	subs	r5, r5, r3
 8018040:	1ad3      	subs	r3, r2, r3
 8018042:	9306      	str	r3, [sp, #24]
 8018044:	9b08      	ldr	r3, [sp, #32]
 8018046:	b1f3      	cbz	r3, 8018086 <_dtoa_r+0x7b6>
 8018048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801804a:	2b00      	cmp	r3, #0
 801804c:	f000 80a3 	beq.w	8018196 <_dtoa_r+0x8c6>
 8018050:	2e00      	cmp	r6, #0
 8018052:	dd10      	ble.n	8018076 <_dtoa_r+0x7a6>
 8018054:	4639      	mov	r1, r7
 8018056:	4632      	mov	r2, r6
 8018058:	4620      	mov	r0, r4
 801805a:	f001 f895 	bl	8019188 <__pow5mult>
 801805e:	4652      	mov	r2, sl
 8018060:	4601      	mov	r1, r0
 8018062:	4607      	mov	r7, r0
 8018064:	4620      	mov	r0, r4
 8018066:	f000 ffe5 	bl	8019034 <__multiply>
 801806a:	4651      	mov	r1, sl
 801806c:	4680      	mov	r8, r0
 801806e:	4620      	mov	r0, r4
 8018070:	f000 feca 	bl	8018e08 <_Bfree>
 8018074:	46c2      	mov	sl, r8
 8018076:	9b08      	ldr	r3, [sp, #32]
 8018078:	1b9a      	subs	r2, r3, r6
 801807a:	d004      	beq.n	8018086 <_dtoa_r+0x7b6>
 801807c:	4651      	mov	r1, sl
 801807e:	4620      	mov	r0, r4
 8018080:	f001 f882 	bl	8019188 <__pow5mult>
 8018084:	4682      	mov	sl, r0
 8018086:	2101      	movs	r1, #1
 8018088:	4620      	mov	r0, r4
 801808a:	f000 ffbd 	bl	8019008 <__i2b>
 801808e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018090:	2b00      	cmp	r3, #0
 8018092:	4606      	mov	r6, r0
 8018094:	f340 8081 	ble.w	801819a <_dtoa_r+0x8ca>
 8018098:	461a      	mov	r2, r3
 801809a:	4601      	mov	r1, r0
 801809c:	4620      	mov	r0, r4
 801809e:	f001 f873 	bl	8019188 <__pow5mult>
 80180a2:	9b07      	ldr	r3, [sp, #28]
 80180a4:	2b01      	cmp	r3, #1
 80180a6:	4606      	mov	r6, r0
 80180a8:	dd7a      	ble.n	80181a0 <_dtoa_r+0x8d0>
 80180aa:	f04f 0800 	mov.w	r8, #0
 80180ae:	6933      	ldr	r3, [r6, #16]
 80180b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80180b4:	6918      	ldr	r0, [r3, #16]
 80180b6:	f000 ff59 	bl	8018f6c <__hi0bits>
 80180ba:	f1c0 0020 	rsb	r0, r0, #32
 80180be:	9b06      	ldr	r3, [sp, #24]
 80180c0:	4418      	add	r0, r3
 80180c2:	f010 001f 	ands.w	r0, r0, #31
 80180c6:	f000 8094 	beq.w	80181f2 <_dtoa_r+0x922>
 80180ca:	f1c0 0320 	rsb	r3, r0, #32
 80180ce:	2b04      	cmp	r3, #4
 80180d0:	f340 8085 	ble.w	80181de <_dtoa_r+0x90e>
 80180d4:	9b05      	ldr	r3, [sp, #20]
 80180d6:	f1c0 001c 	rsb	r0, r0, #28
 80180da:	4403      	add	r3, r0
 80180dc:	9305      	str	r3, [sp, #20]
 80180de:	9b06      	ldr	r3, [sp, #24]
 80180e0:	4403      	add	r3, r0
 80180e2:	4405      	add	r5, r0
 80180e4:	9306      	str	r3, [sp, #24]
 80180e6:	9b05      	ldr	r3, [sp, #20]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	dd05      	ble.n	80180f8 <_dtoa_r+0x828>
 80180ec:	4651      	mov	r1, sl
 80180ee:	461a      	mov	r2, r3
 80180f0:	4620      	mov	r0, r4
 80180f2:	f001 f8a3 	bl	801923c <__lshift>
 80180f6:	4682      	mov	sl, r0
 80180f8:	9b06      	ldr	r3, [sp, #24]
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	dd05      	ble.n	801810a <_dtoa_r+0x83a>
 80180fe:	4631      	mov	r1, r6
 8018100:	461a      	mov	r2, r3
 8018102:	4620      	mov	r0, r4
 8018104:	f001 f89a 	bl	801923c <__lshift>
 8018108:	4606      	mov	r6, r0
 801810a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801810c:	2b00      	cmp	r3, #0
 801810e:	d072      	beq.n	80181f6 <_dtoa_r+0x926>
 8018110:	4631      	mov	r1, r6
 8018112:	4650      	mov	r0, sl
 8018114:	f001 f8fe 	bl	8019314 <__mcmp>
 8018118:	2800      	cmp	r0, #0
 801811a:	da6c      	bge.n	80181f6 <_dtoa_r+0x926>
 801811c:	2300      	movs	r3, #0
 801811e:	4651      	mov	r1, sl
 8018120:	220a      	movs	r2, #10
 8018122:	4620      	mov	r0, r4
 8018124:	f000 fe92 	bl	8018e4c <__multadd>
 8018128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801812a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801812e:	4682      	mov	sl, r0
 8018130:	2b00      	cmp	r3, #0
 8018132:	f000 81b0 	beq.w	8018496 <_dtoa_r+0xbc6>
 8018136:	2300      	movs	r3, #0
 8018138:	4639      	mov	r1, r7
 801813a:	220a      	movs	r2, #10
 801813c:	4620      	mov	r0, r4
 801813e:	f000 fe85 	bl	8018e4c <__multadd>
 8018142:	9b01      	ldr	r3, [sp, #4]
 8018144:	2b00      	cmp	r3, #0
 8018146:	4607      	mov	r7, r0
 8018148:	f300 8096 	bgt.w	8018278 <_dtoa_r+0x9a8>
 801814c:	9b07      	ldr	r3, [sp, #28]
 801814e:	2b02      	cmp	r3, #2
 8018150:	dc59      	bgt.n	8018206 <_dtoa_r+0x936>
 8018152:	e091      	b.n	8018278 <_dtoa_r+0x9a8>
 8018154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801815a:	e758      	b.n	801800e <_dtoa_r+0x73e>
 801815c:	9b04      	ldr	r3, [sp, #16]
 801815e:	1e5e      	subs	r6, r3, #1
 8018160:	9b08      	ldr	r3, [sp, #32]
 8018162:	42b3      	cmp	r3, r6
 8018164:	bfbf      	itttt	lt
 8018166:	9b08      	ldrlt	r3, [sp, #32]
 8018168:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 801816a:	9608      	strlt	r6, [sp, #32]
 801816c:	1af3      	sublt	r3, r6, r3
 801816e:	bfb4      	ite	lt
 8018170:	18d2      	addlt	r2, r2, r3
 8018172:	1b9e      	subge	r6, r3, r6
 8018174:	9b04      	ldr	r3, [sp, #16]
 8018176:	bfbc      	itt	lt
 8018178:	920b      	strlt	r2, [sp, #44]	; 0x2c
 801817a:	2600      	movlt	r6, #0
 801817c:	2b00      	cmp	r3, #0
 801817e:	bfb7      	itett	lt
 8018180:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8018184:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8018188:	1a9d      	sublt	r5, r3, r2
 801818a:	2300      	movlt	r3, #0
 801818c:	e741      	b.n	8018012 <_dtoa_r+0x742>
 801818e:	9e08      	ldr	r6, [sp, #32]
 8018190:	9d05      	ldr	r5, [sp, #20]
 8018192:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018194:	e748      	b.n	8018028 <_dtoa_r+0x758>
 8018196:	9a08      	ldr	r2, [sp, #32]
 8018198:	e770      	b.n	801807c <_dtoa_r+0x7ac>
 801819a:	9b07      	ldr	r3, [sp, #28]
 801819c:	2b01      	cmp	r3, #1
 801819e:	dc19      	bgt.n	80181d4 <_dtoa_r+0x904>
 80181a0:	9b02      	ldr	r3, [sp, #8]
 80181a2:	b9bb      	cbnz	r3, 80181d4 <_dtoa_r+0x904>
 80181a4:	9b03      	ldr	r3, [sp, #12]
 80181a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80181aa:	b99b      	cbnz	r3, 80181d4 <_dtoa_r+0x904>
 80181ac:	9b03      	ldr	r3, [sp, #12]
 80181ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80181b2:	0d1b      	lsrs	r3, r3, #20
 80181b4:	051b      	lsls	r3, r3, #20
 80181b6:	b183      	cbz	r3, 80181da <_dtoa_r+0x90a>
 80181b8:	9b05      	ldr	r3, [sp, #20]
 80181ba:	3301      	adds	r3, #1
 80181bc:	9305      	str	r3, [sp, #20]
 80181be:	9b06      	ldr	r3, [sp, #24]
 80181c0:	3301      	adds	r3, #1
 80181c2:	9306      	str	r3, [sp, #24]
 80181c4:	f04f 0801 	mov.w	r8, #1
 80181c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	f47f af6f 	bne.w	80180ae <_dtoa_r+0x7de>
 80181d0:	2001      	movs	r0, #1
 80181d2:	e774      	b.n	80180be <_dtoa_r+0x7ee>
 80181d4:	f04f 0800 	mov.w	r8, #0
 80181d8:	e7f6      	b.n	80181c8 <_dtoa_r+0x8f8>
 80181da:	4698      	mov	r8, r3
 80181dc:	e7f4      	b.n	80181c8 <_dtoa_r+0x8f8>
 80181de:	d082      	beq.n	80180e6 <_dtoa_r+0x816>
 80181e0:	9a05      	ldr	r2, [sp, #20]
 80181e2:	331c      	adds	r3, #28
 80181e4:	441a      	add	r2, r3
 80181e6:	9205      	str	r2, [sp, #20]
 80181e8:	9a06      	ldr	r2, [sp, #24]
 80181ea:	441a      	add	r2, r3
 80181ec:	441d      	add	r5, r3
 80181ee:	9206      	str	r2, [sp, #24]
 80181f0:	e779      	b.n	80180e6 <_dtoa_r+0x816>
 80181f2:	4603      	mov	r3, r0
 80181f4:	e7f4      	b.n	80181e0 <_dtoa_r+0x910>
 80181f6:	9b04      	ldr	r3, [sp, #16]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	dc37      	bgt.n	801826c <_dtoa_r+0x99c>
 80181fc:	9b07      	ldr	r3, [sp, #28]
 80181fe:	2b02      	cmp	r3, #2
 8018200:	dd34      	ble.n	801826c <_dtoa_r+0x99c>
 8018202:	9b04      	ldr	r3, [sp, #16]
 8018204:	9301      	str	r3, [sp, #4]
 8018206:	9b01      	ldr	r3, [sp, #4]
 8018208:	b963      	cbnz	r3, 8018224 <_dtoa_r+0x954>
 801820a:	4631      	mov	r1, r6
 801820c:	2205      	movs	r2, #5
 801820e:	4620      	mov	r0, r4
 8018210:	f000 fe1c 	bl	8018e4c <__multadd>
 8018214:	4601      	mov	r1, r0
 8018216:	4606      	mov	r6, r0
 8018218:	4650      	mov	r0, sl
 801821a:	f001 f87b 	bl	8019314 <__mcmp>
 801821e:	2800      	cmp	r0, #0
 8018220:	f73f adbb 	bgt.w	8017d9a <_dtoa_r+0x4ca>
 8018224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018226:	9d00      	ldr	r5, [sp, #0]
 8018228:	ea6f 0b03 	mvn.w	fp, r3
 801822c:	f04f 0800 	mov.w	r8, #0
 8018230:	4631      	mov	r1, r6
 8018232:	4620      	mov	r0, r4
 8018234:	f000 fde8 	bl	8018e08 <_Bfree>
 8018238:	2f00      	cmp	r7, #0
 801823a:	f43f aeab 	beq.w	8017f94 <_dtoa_r+0x6c4>
 801823e:	f1b8 0f00 	cmp.w	r8, #0
 8018242:	d005      	beq.n	8018250 <_dtoa_r+0x980>
 8018244:	45b8      	cmp	r8, r7
 8018246:	d003      	beq.n	8018250 <_dtoa_r+0x980>
 8018248:	4641      	mov	r1, r8
 801824a:	4620      	mov	r0, r4
 801824c:	f000 fddc 	bl	8018e08 <_Bfree>
 8018250:	4639      	mov	r1, r7
 8018252:	4620      	mov	r0, r4
 8018254:	f000 fdd8 	bl	8018e08 <_Bfree>
 8018258:	e69c      	b.n	8017f94 <_dtoa_r+0x6c4>
 801825a:	2600      	movs	r6, #0
 801825c:	4637      	mov	r7, r6
 801825e:	e7e1      	b.n	8018224 <_dtoa_r+0x954>
 8018260:	46bb      	mov	fp, r7
 8018262:	4637      	mov	r7, r6
 8018264:	e599      	b.n	8017d9a <_dtoa_r+0x4ca>
 8018266:	bf00      	nop
 8018268:	40240000 	.word	0x40240000
 801826c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801826e:	2b00      	cmp	r3, #0
 8018270:	f000 80c8 	beq.w	8018404 <_dtoa_r+0xb34>
 8018274:	9b04      	ldr	r3, [sp, #16]
 8018276:	9301      	str	r3, [sp, #4]
 8018278:	2d00      	cmp	r5, #0
 801827a:	dd05      	ble.n	8018288 <_dtoa_r+0x9b8>
 801827c:	4639      	mov	r1, r7
 801827e:	462a      	mov	r2, r5
 8018280:	4620      	mov	r0, r4
 8018282:	f000 ffdb 	bl	801923c <__lshift>
 8018286:	4607      	mov	r7, r0
 8018288:	f1b8 0f00 	cmp.w	r8, #0
 801828c:	d05b      	beq.n	8018346 <_dtoa_r+0xa76>
 801828e:	6879      	ldr	r1, [r7, #4]
 8018290:	4620      	mov	r0, r4
 8018292:	f000 fd79 	bl	8018d88 <_Balloc>
 8018296:	4605      	mov	r5, r0
 8018298:	b928      	cbnz	r0, 80182a6 <_dtoa_r+0x9d6>
 801829a:	4b83      	ldr	r3, [pc, #524]	; (80184a8 <_dtoa_r+0xbd8>)
 801829c:	4602      	mov	r2, r0
 801829e:	f240 21ef 	movw	r1, #751	; 0x2ef
 80182a2:	f7ff bb2e 	b.w	8017902 <_dtoa_r+0x32>
 80182a6:	693a      	ldr	r2, [r7, #16]
 80182a8:	3202      	adds	r2, #2
 80182aa:	0092      	lsls	r2, r2, #2
 80182ac:	f107 010c 	add.w	r1, r7, #12
 80182b0:	300c      	adds	r0, #12
 80182b2:	f7ff fa6c 	bl	801778e <memcpy>
 80182b6:	2201      	movs	r2, #1
 80182b8:	4629      	mov	r1, r5
 80182ba:	4620      	mov	r0, r4
 80182bc:	f000 ffbe 	bl	801923c <__lshift>
 80182c0:	9b00      	ldr	r3, [sp, #0]
 80182c2:	3301      	adds	r3, #1
 80182c4:	9304      	str	r3, [sp, #16]
 80182c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80182ca:	4413      	add	r3, r2
 80182cc:	9308      	str	r3, [sp, #32]
 80182ce:	9b02      	ldr	r3, [sp, #8]
 80182d0:	f003 0301 	and.w	r3, r3, #1
 80182d4:	46b8      	mov	r8, r7
 80182d6:	9306      	str	r3, [sp, #24]
 80182d8:	4607      	mov	r7, r0
 80182da:	9b04      	ldr	r3, [sp, #16]
 80182dc:	4631      	mov	r1, r6
 80182de:	3b01      	subs	r3, #1
 80182e0:	4650      	mov	r0, sl
 80182e2:	9301      	str	r3, [sp, #4]
 80182e4:	f7ff fa6c 	bl	80177c0 <quorem>
 80182e8:	4641      	mov	r1, r8
 80182ea:	9002      	str	r0, [sp, #8]
 80182ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80182f0:	4650      	mov	r0, sl
 80182f2:	f001 f80f 	bl	8019314 <__mcmp>
 80182f6:	463a      	mov	r2, r7
 80182f8:	9005      	str	r0, [sp, #20]
 80182fa:	4631      	mov	r1, r6
 80182fc:	4620      	mov	r0, r4
 80182fe:	f001 f825 	bl	801934c <__mdiff>
 8018302:	68c2      	ldr	r2, [r0, #12]
 8018304:	4605      	mov	r5, r0
 8018306:	bb02      	cbnz	r2, 801834a <_dtoa_r+0xa7a>
 8018308:	4601      	mov	r1, r0
 801830a:	4650      	mov	r0, sl
 801830c:	f001 f802 	bl	8019314 <__mcmp>
 8018310:	4602      	mov	r2, r0
 8018312:	4629      	mov	r1, r5
 8018314:	4620      	mov	r0, r4
 8018316:	9209      	str	r2, [sp, #36]	; 0x24
 8018318:	f000 fd76 	bl	8018e08 <_Bfree>
 801831c:	9b07      	ldr	r3, [sp, #28]
 801831e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018320:	9d04      	ldr	r5, [sp, #16]
 8018322:	ea43 0102 	orr.w	r1, r3, r2
 8018326:	9b06      	ldr	r3, [sp, #24]
 8018328:	4319      	orrs	r1, r3
 801832a:	d110      	bne.n	801834e <_dtoa_r+0xa7e>
 801832c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018330:	d029      	beq.n	8018386 <_dtoa_r+0xab6>
 8018332:	9b05      	ldr	r3, [sp, #20]
 8018334:	2b00      	cmp	r3, #0
 8018336:	dd02      	ble.n	801833e <_dtoa_r+0xa6e>
 8018338:	9b02      	ldr	r3, [sp, #8]
 801833a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 801833e:	9b01      	ldr	r3, [sp, #4]
 8018340:	f883 9000 	strb.w	r9, [r3]
 8018344:	e774      	b.n	8018230 <_dtoa_r+0x960>
 8018346:	4638      	mov	r0, r7
 8018348:	e7ba      	b.n	80182c0 <_dtoa_r+0x9f0>
 801834a:	2201      	movs	r2, #1
 801834c:	e7e1      	b.n	8018312 <_dtoa_r+0xa42>
 801834e:	9b05      	ldr	r3, [sp, #20]
 8018350:	2b00      	cmp	r3, #0
 8018352:	db04      	blt.n	801835e <_dtoa_r+0xa8e>
 8018354:	9907      	ldr	r1, [sp, #28]
 8018356:	430b      	orrs	r3, r1
 8018358:	9906      	ldr	r1, [sp, #24]
 801835a:	430b      	orrs	r3, r1
 801835c:	d120      	bne.n	80183a0 <_dtoa_r+0xad0>
 801835e:	2a00      	cmp	r2, #0
 8018360:	dded      	ble.n	801833e <_dtoa_r+0xa6e>
 8018362:	4651      	mov	r1, sl
 8018364:	2201      	movs	r2, #1
 8018366:	4620      	mov	r0, r4
 8018368:	f000 ff68 	bl	801923c <__lshift>
 801836c:	4631      	mov	r1, r6
 801836e:	4682      	mov	sl, r0
 8018370:	f000 ffd0 	bl	8019314 <__mcmp>
 8018374:	2800      	cmp	r0, #0
 8018376:	dc03      	bgt.n	8018380 <_dtoa_r+0xab0>
 8018378:	d1e1      	bne.n	801833e <_dtoa_r+0xa6e>
 801837a:	f019 0f01 	tst.w	r9, #1
 801837e:	d0de      	beq.n	801833e <_dtoa_r+0xa6e>
 8018380:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8018384:	d1d8      	bne.n	8018338 <_dtoa_r+0xa68>
 8018386:	9a01      	ldr	r2, [sp, #4]
 8018388:	2339      	movs	r3, #57	; 0x39
 801838a:	7013      	strb	r3, [r2, #0]
 801838c:	462b      	mov	r3, r5
 801838e:	461d      	mov	r5, r3
 8018390:	3b01      	subs	r3, #1
 8018392:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8018396:	2a39      	cmp	r2, #57	; 0x39
 8018398:	d06c      	beq.n	8018474 <_dtoa_r+0xba4>
 801839a:	3201      	adds	r2, #1
 801839c:	701a      	strb	r2, [r3, #0]
 801839e:	e747      	b.n	8018230 <_dtoa_r+0x960>
 80183a0:	2a00      	cmp	r2, #0
 80183a2:	dd07      	ble.n	80183b4 <_dtoa_r+0xae4>
 80183a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80183a8:	d0ed      	beq.n	8018386 <_dtoa_r+0xab6>
 80183aa:	9a01      	ldr	r2, [sp, #4]
 80183ac:	f109 0301 	add.w	r3, r9, #1
 80183b0:	7013      	strb	r3, [r2, #0]
 80183b2:	e73d      	b.n	8018230 <_dtoa_r+0x960>
 80183b4:	9b04      	ldr	r3, [sp, #16]
 80183b6:	9a08      	ldr	r2, [sp, #32]
 80183b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80183bc:	4293      	cmp	r3, r2
 80183be:	d043      	beq.n	8018448 <_dtoa_r+0xb78>
 80183c0:	4651      	mov	r1, sl
 80183c2:	2300      	movs	r3, #0
 80183c4:	220a      	movs	r2, #10
 80183c6:	4620      	mov	r0, r4
 80183c8:	f000 fd40 	bl	8018e4c <__multadd>
 80183cc:	45b8      	cmp	r8, r7
 80183ce:	4682      	mov	sl, r0
 80183d0:	f04f 0300 	mov.w	r3, #0
 80183d4:	f04f 020a 	mov.w	r2, #10
 80183d8:	4641      	mov	r1, r8
 80183da:	4620      	mov	r0, r4
 80183dc:	d107      	bne.n	80183ee <_dtoa_r+0xb1e>
 80183de:	f000 fd35 	bl	8018e4c <__multadd>
 80183e2:	4680      	mov	r8, r0
 80183e4:	4607      	mov	r7, r0
 80183e6:	9b04      	ldr	r3, [sp, #16]
 80183e8:	3301      	adds	r3, #1
 80183ea:	9304      	str	r3, [sp, #16]
 80183ec:	e775      	b.n	80182da <_dtoa_r+0xa0a>
 80183ee:	f000 fd2d 	bl	8018e4c <__multadd>
 80183f2:	4639      	mov	r1, r7
 80183f4:	4680      	mov	r8, r0
 80183f6:	2300      	movs	r3, #0
 80183f8:	220a      	movs	r2, #10
 80183fa:	4620      	mov	r0, r4
 80183fc:	f000 fd26 	bl	8018e4c <__multadd>
 8018400:	4607      	mov	r7, r0
 8018402:	e7f0      	b.n	80183e6 <_dtoa_r+0xb16>
 8018404:	9b04      	ldr	r3, [sp, #16]
 8018406:	9301      	str	r3, [sp, #4]
 8018408:	9d00      	ldr	r5, [sp, #0]
 801840a:	4631      	mov	r1, r6
 801840c:	4650      	mov	r0, sl
 801840e:	f7ff f9d7 	bl	80177c0 <quorem>
 8018412:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8018416:	9b00      	ldr	r3, [sp, #0]
 8018418:	f805 9b01 	strb.w	r9, [r5], #1
 801841c:	1aea      	subs	r2, r5, r3
 801841e:	9b01      	ldr	r3, [sp, #4]
 8018420:	4293      	cmp	r3, r2
 8018422:	dd07      	ble.n	8018434 <_dtoa_r+0xb64>
 8018424:	4651      	mov	r1, sl
 8018426:	2300      	movs	r3, #0
 8018428:	220a      	movs	r2, #10
 801842a:	4620      	mov	r0, r4
 801842c:	f000 fd0e 	bl	8018e4c <__multadd>
 8018430:	4682      	mov	sl, r0
 8018432:	e7ea      	b.n	801840a <_dtoa_r+0xb3a>
 8018434:	9b01      	ldr	r3, [sp, #4]
 8018436:	2b00      	cmp	r3, #0
 8018438:	bfc8      	it	gt
 801843a:	461d      	movgt	r5, r3
 801843c:	9b00      	ldr	r3, [sp, #0]
 801843e:	bfd8      	it	le
 8018440:	2501      	movle	r5, #1
 8018442:	441d      	add	r5, r3
 8018444:	f04f 0800 	mov.w	r8, #0
 8018448:	4651      	mov	r1, sl
 801844a:	2201      	movs	r2, #1
 801844c:	4620      	mov	r0, r4
 801844e:	f000 fef5 	bl	801923c <__lshift>
 8018452:	4631      	mov	r1, r6
 8018454:	4682      	mov	sl, r0
 8018456:	f000 ff5d 	bl	8019314 <__mcmp>
 801845a:	2800      	cmp	r0, #0
 801845c:	dc96      	bgt.n	801838c <_dtoa_r+0xabc>
 801845e:	d102      	bne.n	8018466 <_dtoa_r+0xb96>
 8018460:	f019 0f01 	tst.w	r9, #1
 8018464:	d192      	bne.n	801838c <_dtoa_r+0xabc>
 8018466:	462b      	mov	r3, r5
 8018468:	461d      	mov	r5, r3
 801846a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801846e:	2a30      	cmp	r2, #48	; 0x30
 8018470:	d0fa      	beq.n	8018468 <_dtoa_r+0xb98>
 8018472:	e6dd      	b.n	8018230 <_dtoa_r+0x960>
 8018474:	9a00      	ldr	r2, [sp, #0]
 8018476:	429a      	cmp	r2, r3
 8018478:	d189      	bne.n	801838e <_dtoa_r+0xabe>
 801847a:	f10b 0b01 	add.w	fp, fp, #1
 801847e:	2331      	movs	r3, #49	; 0x31
 8018480:	e796      	b.n	80183b0 <_dtoa_r+0xae0>
 8018482:	4b0a      	ldr	r3, [pc, #40]	; (80184ac <_dtoa_r+0xbdc>)
 8018484:	f7ff ba99 	b.w	80179ba <_dtoa_r+0xea>
 8018488:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801848a:	2b00      	cmp	r3, #0
 801848c:	f47f aa6d 	bne.w	801796a <_dtoa_r+0x9a>
 8018490:	4b07      	ldr	r3, [pc, #28]	; (80184b0 <_dtoa_r+0xbe0>)
 8018492:	f7ff ba92 	b.w	80179ba <_dtoa_r+0xea>
 8018496:	9b01      	ldr	r3, [sp, #4]
 8018498:	2b00      	cmp	r3, #0
 801849a:	dcb5      	bgt.n	8018408 <_dtoa_r+0xb38>
 801849c:	9b07      	ldr	r3, [sp, #28]
 801849e:	2b02      	cmp	r3, #2
 80184a0:	f73f aeb1 	bgt.w	8018206 <_dtoa_r+0x936>
 80184a4:	e7b0      	b.n	8018408 <_dtoa_r+0xb38>
 80184a6:	bf00      	nop
 80184a8:	0801b831 	.word	0x0801b831
 80184ac:	0801b789 	.word	0x0801b789
 80184b0:	0801b7b5 	.word	0x0801b7b5

080184b4 <_free_r>:
 80184b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80184b6:	2900      	cmp	r1, #0
 80184b8:	d044      	beq.n	8018544 <_free_r+0x90>
 80184ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80184be:	9001      	str	r0, [sp, #4]
 80184c0:	2b00      	cmp	r3, #0
 80184c2:	f1a1 0404 	sub.w	r4, r1, #4
 80184c6:	bfb8      	it	lt
 80184c8:	18e4      	addlt	r4, r4, r3
 80184ca:	f000 fc51 	bl	8018d70 <__malloc_lock>
 80184ce:	4a1e      	ldr	r2, [pc, #120]	; (8018548 <_free_r+0x94>)
 80184d0:	9801      	ldr	r0, [sp, #4]
 80184d2:	6813      	ldr	r3, [r2, #0]
 80184d4:	b933      	cbnz	r3, 80184e4 <_free_r+0x30>
 80184d6:	6063      	str	r3, [r4, #4]
 80184d8:	6014      	str	r4, [r2, #0]
 80184da:	b003      	add	sp, #12
 80184dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184e0:	f000 bc4c 	b.w	8018d7c <__malloc_unlock>
 80184e4:	42a3      	cmp	r3, r4
 80184e6:	d908      	bls.n	80184fa <_free_r+0x46>
 80184e8:	6825      	ldr	r5, [r4, #0]
 80184ea:	1961      	adds	r1, r4, r5
 80184ec:	428b      	cmp	r3, r1
 80184ee:	bf01      	itttt	eq
 80184f0:	6819      	ldreq	r1, [r3, #0]
 80184f2:	685b      	ldreq	r3, [r3, #4]
 80184f4:	1949      	addeq	r1, r1, r5
 80184f6:	6021      	streq	r1, [r4, #0]
 80184f8:	e7ed      	b.n	80184d6 <_free_r+0x22>
 80184fa:	461a      	mov	r2, r3
 80184fc:	685b      	ldr	r3, [r3, #4]
 80184fe:	b10b      	cbz	r3, 8018504 <_free_r+0x50>
 8018500:	42a3      	cmp	r3, r4
 8018502:	d9fa      	bls.n	80184fa <_free_r+0x46>
 8018504:	6811      	ldr	r1, [r2, #0]
 8018506:	1855      	adds	r5, r2, r1
 8018508:	42a5      	cmp	r5, r4
 801850a:	d10b      	bne.n	8018524 <_free_r+0x70>
 801850c:	6824      	ldr	r4, [r4, #0]
 801850e:	4421      	add	r1, r4
 8018510:	1854      	adds	r4, r2, r1
 8018512:	42a3      	cmp	r3, r4
 8018514:	6011      	str	r1, [r2, #0]
 8018516:	d1e0      	bne.n	80184da <_free_r+0x26>
 8018518:	681c      	ldr	r4, [r3, #0]
 801851a:	685b      	ldr	r3, [r3, #4]
 801851c:	6053      	str	r3, [r2, #4]
 801851e:	440c      	add	r4, r1
 8018520:	6014      	str	r4, [r2, #0]
 8018522:	e7da      	b.n	80184da <_free_r+0x26>
 8018524:	d902      	bls.n	801852c <_free_r+0x78>
 8018526:	230c      	movs	r3, #12
 8018528:	6003      	str	r3, [r0, #0]
 801852a:	e7d6      	b.n	80184da <_free_r+0x26>
 801852c:	6825      	ldr	r5, [r4, #0]
 801852e:	1961      	adds	r1, r4, r5
 8018530:	428b      	cmp	r3, r1
 8018532:	bf04      	itt	eq
 8018534:	6819      	ldreq	r1, [r3, #0]
 8018536:	685b      	ldreq	r3, [r3, #4]
 8018538:	6063      	str	r3, [r4, #4]
 801853a:	bf04      	itt	eq
 801853c:	1949      	addeq	r1, r1, r5
 801853e:	6021      	streq	r1, [r4, #0]
 8018540:	6054      	str	r4, [r2, #4]
 8018542:	e7ca      	b.n	80184da <_free_r+0x26>
 8018544:	b003      	add	sp, #12
 8018546:	bd30      	pop	{r4, r5, pc}
 8018548:	2000a0b4 	.word	0x2000a0b4

0801854c <rshift>:
 801854c:	6903      	ldr	r3, [r0, #16]
 801854e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8018552:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018556:	ea4f 1261 	mov.w	r2, r1, asr #5
 801855a:	f100 0414 	add.w	r4, r0, #20
 801855e:	dd45      	ble.n	80185ec <rshift+0xa0>
 8018560:	f011 011f 	ands.w	r1, r1, #31
 8018564:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8018568:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801856c:	d10c      	bne.n	8018588 <rshift+0x3c>
 801856e:	f100 0710 	add.w	r7, r0, #16
 8018572:	4629      	mov	r1, r5
 8018574:	42b1      	cmp	r1, r6
 8018576:	d334      	bcc.n	80185e2 <rshift+0x96>
 8018578:	1a9b      	subs	r3, r3, r2
 801857a:	009b      	lsls	r3, r3, #2
 801857c:	1eea      	subs	r2, r5, #3
 801857e:	4296      	cmp	r6, r2
 8018580:	bf38      	it	cc
 8018582:	2300      	movcc	r3, #0
 8018584:	4423      	add	r3, r4
 8018586:	e015      	b.n	80185b4 <rshift+0x68>
 8018588:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801858c:	f1c1 0820 	rsb	r8, r1, #32
 8018590:	40cf      	lsrs	r7, r1
 8018592:	f105 0e04 	add.w	lr, r5, #4
 8018596:	46a1      	mov	r9, r4
 8018598:	4576      	cmp	r6, lr
 801859a:	46f4      	mov	ip, lr
 801859c:	d815      	bhi.n	80185ca <rshift+0x7e>
 801859e:	1a9a      	subs	r2, r3, r2
 80185a0:	0092      	lsls	r2, r2, #2
 80185a2:	3a04      	subs	r2, #4
 80185a4:	3501      	adds	r5, #1
 80185a6:	42ae      	cmp	r6, r5
 80185a8:	bf38      	it	cc
 80185aa:	2200      	movcc	r2, #0
 80185ac:	18a3      	adds	r3, r4, r2
 80185ae:	50a7      	str	r7, [r4, r2]
 80185b0:	b107      	cbz	r7, 80185b4 <rshift+0x68>
 80185b2:	3304      	adds	r3, #4
 80185b4:	1b1a      	subs	r2, r3, r4
 80185b6:	42a3      	cmp	r3, r4
 80185b8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80185bc:	bf08      	it	eq
 80185be:	2300      	moveq	r3, #0
 80185c0:	6102      	str	r2, [r0, #16]
 80185c2:	bf08      	it	eq
 80185c4:	6143      	streq	r3, [r0, #20]
 80185c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80185ca:	f8dc c000 	ldr.w	ip, [ip]
 80185ce:	fa0c fc08 	lsl.w	ip, ip, r8
 80185d2:	ea4c 0707 	orr.w	r7, ip, r7
 80185d6:	f849 7b04 	str.w	r7, [r9], #4
 80185da:	f85e 7b04 	ldr.w	r7, [lr], #4
 80185de:	40cf      	lsrs	r7, r1
 80185e0:	e7da      	b.n	8018598 <rshift+0x4c>
 80185e2:	f851 cb04 	ldr.w	ip, [r1], #4
 80185e6:	f847 cf04 	str.w	ip, [r7, #4]!
 80185ea:	e7c3      	b.n	8018574 <rshift+0x28>
 80185ec:	4623      	mov	r3, r4
 80185ee:	e7e1      	b.n	80185b4 <rshift+0x68>

080185f0 <__hexdig_fun>:
 80185f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80185f4:	2b09      	cmp	r3, #9
 80185f6:	d802      	bhi.n	80185fe <__hexdig_fun+0xe>
 80185f8:	3820      	subs	r0, #32
 80185fa:	b2c0      	uxtb	r0, r0
 80185fc:	4770      	bx	lr
 80185fe:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8018602:	2b05      	cmp	r3, #5
 8018604:	d801      	bhi.n	801860a <__hexdig_fun+0x1a>
 8018606:	3847      	subs	r0, #71	; 0x47
 8018608:	e7f7      	b.n	80185fa <__hexdig_fun+0xa>
 801860a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801860e:	2b05      	cmp	r3, #5
 8018610:	d801      	bhi.n	8018616 <__hexdig_fun+0x26>
 8018612:	3827      	subs	r0, #39	; 0x27
 8018614:	e7f1      	b.n	80185fa <__hexdig_fun+0xa>
 8018616:	2000      	movs	r0, #0
 8018618:	4770      	bx	lr
	...

0801861c <__gethex>:
 801861c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018620:	4617      	mov	r7, r2
 8018622:	680a      	ldr	r2, [r1, #0]
 8018624:	b085      	sub	sp, #20
 8018626:	f102 0b02 	add.w	fp, r2, #2
 801862a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801862e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018632:	4681      	mov	r9, r0
 8018634:	468a      	mov	sl, r1
 8018636:	9302      	str	r3, [sp, #8]
 8018638:	32fe      	adds	r2, #254	; 0xfe
 801863a:	eb02 030b 	add.w	r3, r2, fp
 801863e:	46d8      	mov	r8, fp
 8018640:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8018644:	9301      	str	r3, [sp, #4]
 8018646:	2830      	cmp	r0, #48	; 0x30
 8018648:	d0f7      	beq.n	801863a <__gethex+0x1e>
 801864a:	f7ff ffd1 	bl	80185f0 <__hexdig_fun>
 801864e:	4604      	mov	r4, r0
 8018650:	2800      	cmp	r0, #0
 8018652:	d138      	bne.n	80186c6 <__gethex+0xaa>
 8018654:	49a7      	ldr	r1, [pc, #668]	; (80188f4 <__gethex+0x2d8>)
 8018656:	2201      	movs	r2, #1
 8018658:	4640      	mov	r0, r8
 801865a:	f7fe ffb8 	bl	80175ce <strncmp>
 801865e:	4606      	mov	r6, r0
 8018660:	2800      	cmp	r0, #0
 8018662:	d169      	bne.n	8018738 <__gethex+0x11c>
 8018664:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018668:	465d      	mov	r5, fp
 801866a:	f7ff ffc1 	bl	80185f0 <__hexdig_fun>
 801866e:	2800      	cmp	r0, #0
 8018670:	d064      	beq.n	801873c <__gethex+0x120>
 8018672:	465a      	mov	r2, fp
 8018674:	7810      	ldrb	r0, [r2, #0]
 8018676:	2830      	cmp	r0, #48	; 0x30
 8018678:	4690      	mov	r8, r2
 801867a:	f102 0201 	add.w	r2, r2, #1
 801867e:	d0f9      	beq.n	8018674 <__gethex+0x58>
 8018680:	f7ff ffb6 	bl	80185f0 <__hexdig_fun>
 8018684:	2301      	movs	r3, #1
 8018686:	fab0 f480 	clz	r4, r0
 801868a:	0964      	lsrs	r4, r4, #5
 801868c:	465e      	mov	r6, fp
 801868e:	9301      	str	r3, [sp, #4]
 8018690:	4642      	mov	r2, r8
 8018692:	4615      	mov	r5, r2
 8018694:	3201      	adds	r2, #1
 8018696:	7828      	ldrb	r0, [r5, #0]
 8018698:	f7ff ffaa 	bl	80185f0 <__hexdig_fun>
 801869c:	2800      	cmp	r0, #0
 801869e:	d1f8      	bne.n	8018692 <__gethex+0x76>
 80186a0:	4994      	ldr	r1, [pc, #592]	; (80188f4 <__gethex+0x2d8>)
 80186a2:	2201      	movs	r2, #1
 80186a4:	4628      	mov	r0, r5
 80186a6:	f7fe ff92 	bl	80175ce <strncmp>
 80186aa:	b978      	cbnz	r0, 80186cc <__gethex+0xb0>
 80186ac:	b946      	cbnz	r6, 80186c0 <__gethex+0xa4>
 80186ae:	1c6e      	adds	r6, r5, #1
 80186b0:	4632      	mov	r2, r6
 80186b2:	4615      	mov	r5, r2
 80186b4:	3201      	adds	r2, #1
 80186b6:	7828      	ldrb	r0, [r5, #0]
 80186b8:	f7ff ff9a 	bl	80185f0 <__hexdig_fun>
 80186bc:	2800      	cmp	r0, #0
 80186be:	d1f8      	bne.n	80186b2 <__gethex+0x96>
 80186c0:	1b73      	subs	r3, r6, r5
 80186c2:	009e      	lsls	r6, r3, #2
 80186c4:	e004      	b.n	80186d0 <__gethex+0xb4>
 80186c6:	2400      	movs	r4, #0
 80186c8:	4626      	mov	r6, r4
 80186ca:	e7e1      	b.n	8018690 <__gethex+0x74>
 80186cc:	2e00      	cmp	r6, #0
 80186ce:	d1f7      	bne.n	80186c0 <__gethex+0xa4>
 80186d0:	782b      	ldrb	r3, [r5, #0]
 80186d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80186d6:	2b50      	cmp	r3, #80	; 0x50
 80186d8:	d13d      	bne.n	8018756 <__gethex+0x13a>
 80186da:	786b      	ldrb	r3, [r5, #1]
 80186dc:	2b2b      	cmp	r3, #43	; 0x2b
 80186de:	d02f      	beq.n	8018740 <__gethex+0x124>
 80186e0:	2b2d      	cmp	r3, #45	; 0x2d
 80186e2:	d031      	beq.n	8018748 <__gethex+0x12c>
 80186e4:	1c69      	adds	r1, r5, #1
 80186e6:	f04f 0b00 	mov.w	fp, #0
 80186ea:	7808      	ldrb	r0, [r1, #0]
 80186ec:	f7ff ff80 	bl	80185f0 <__hexdig_fun>
 80186f0:	1e42      	subs	r2, r0, #1
 80186f2:	b2d2      	uxtb	r2, r2
 80186f4:	2a18      	cmp	r2, #24
 80186f6:	d82e      	bhi.n	8018756 <__gethex+0x13a>
 80186f8:	f1a0 0210 	sub.w	r2, r0, #16
 80186fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018700:	f7ff ff76 	bl	80185f0 <__hexdig_fun>
 8018704:	f100 3cff 	add.w	ip, r0, #4294967295
 8018708:	fa5f fc8c 	uxtb.w	ip, ip
 801870c:	f1bc 0f18 	cmp.w	ip, #24
 8018710:	d91d      	bls.n	801874e <__gethex+0x132>
 8018712:	f1bb 0f00 	cmp.w	fp, #0
 8018716:	d000      	beq.n	801871a <__gethex+0xfe>
 8018718:	4252      	negs	r2, r2
 801871a:	4416      	add	r6, r2
 801871c:	f8ca 1000 	str.w	r1, [sl]
 8018720:	b1dc      	cbz	r4, 801875a <__gethex+0x13e>
 8018722:	9b01      	ldr	r3, [sp, #4]
 8018724:	2b00      	cmp	r3, #0
 8018726:	bf14      	ite	ne
 8018728:	f04f 0800 	movne.w	r8, #0
 801872c:	f04f 0806 	moveq.w	r8, #6
 8018730:	4640      	mov	r0, r8
 8018732:	b005      	add	sp, #20
 8018734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018738:	4645      	mov	r5, r8
 801873a:	4626      	mov	r6, r4
 801873c:	2401      	movs	r4, #1
 801873e:	e7c7      	b.n	80186d0 <__gethex+0xb4>
 8018740:	f04f 0b00 	mov.w	fp, #0
 8018744:	1ca9      	adds	r1, r5, #2
 8018746:	e7d0      	b.n	80186ea <__gethex+0xce>
 8018748:	f04f 0b01 	mov.w	fp, #1
 801874c:	e7fa      	b.n	8018744 <__gethex+0x128>
 801874e:	230a      	movs	r3, #10
 8018750:	fb03 0002 	mla	r0, r3, r2, r0
 8018754:	e7d0      	b.n	80186f8 <__gethex+0xdc>
 8018756:	4629      	mov	r1, r5
 8018758:	e7e0      	b.n	801871c <__gethex+0x100>
 801875a:	eba5 0308 	sub.w	r3, r5, r8
 801875e:	3b01      	subs	r3, #1
 8018760:	4621      	mov	r1, r4
 8018762:	2b07      	cmp	r3, #7
 8018764:	dc0a      	bgt.n	801877c <__gethex+0x160>
 8018766:	4648      	mov	r0, r9
 8018768:	f000 fb0e 	bl	8018d88 <_Balloc>
 801876c:	4604      	mov	r4, r0
 801876e:	b940      	cbnz	r0, 8018782 <__gethex+0x166>
 8018770:	4b61      	ldr	r3, [pc, #388]	; (80188f8 <__gethex+0x2dc>)
 8018772:	4602      	mov	r2, r0
 8018774:	21e4      	movs	r1, #228	; 0xe4
 8018776:	4861      	ldr	r0, [pc, #388]	; (80188fc <__gethex+0x2e0>)
 8018778:	f001 f9f0 	bl	8019b5c <__assert_func>
 801877c:	3101      	adds	r1, #1
 801877e:	105b      	asrs	r3, r3, #1
 8018780:	e7ef      	b.n	8018762 <__gethex+0x146>
 8018782:	f100 0a14 	add.w	sl, r0, #20
 8018786:	2300      	movs	r3, #0
 8018788:	495a      	ldr	r1, [pc, #360]	; (80188f4 <__gethex+0x2d8>)
 801878a:	f8cd a004 	str.w	sl, [sp, #4]
 801878e:	469b      	mov	fp, r3
 8018790:	45a8      	cmp	r8, r5
 8018792:	d342      	bcc.n	801881a <__gethex+0x1fe>
 8018794:	9801      	ldr	r0, [sp, #4]
 8018796:	f840 bb04 	str.w	fp, [r0], #4
 801879a:	eba0 000a 	sub.w	r0, r0, sl
 801879e:	1080      	asrs	r0, r0, #2
 80187a0:	6120      	str	r0, [r4, #16]
 80187a2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80187a6:	4658      	mov	r0, fp
 80187a8:	f000 fbe0 	bl	8018f6c <__hi0bits>
 80187ac:	683d      	ldr	r5, [r7, #0]
 80187ae:	eba8 0000 	sub.w	r0, r8, r0
 80187b2:	42a8      	cmp	r0, r5
 80187b4:	dd59      	ble.n	801886a <__gethex+0x24e>
 80187b6:	eba0 0805 	sub.w	r8, r0, r5
 80187ba:	4641      	mov	r1, r8
 80187bc:	4620      	mov	r0, r4
 80187be:	f000 ff6f 	bl	80196a0 <__any_on>
 80187c2:	4683      	mov	fp, r0
 80187c4:	b1b8      	cbz	r0, 80187f6 <__gethex+0x1da>
 80187c6:	f108 33ff 	add.w	r3, r8, #4294967295
 80187ca:	1159      	asrs	r1, r3, #5
 80187cc:	f003 021f 	and.w	r2, r3, #31
 80187d0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80187d4:	f04f 0b01 	mov.w	fp, #1
 80187d8:	fa0b f202 	lsl.w	r2, fp, r2
 80187dc:	420a      	tst	r2, r1
 80187de:	d00a      	beq.n	80187f6 <__gethex+0x1da>
 80187e0:	455b      	cmp	r3, fp
 80187e2:	dd06      	ble.n	80187f2 <__gethex+0x1d6>
 80187e4:	f1a8 0102 	sub.w	r1, r8, #2
 80187e8:	4620      	mov	r0, r4
 80187ea:	f000 ff59 	bl	80196a0 <__any_on>
 80187ee:	2800      	cmp	r0, #0
 80187f0:	d138      	bne.n	8018864 <__gethex+0x248>
 80187f2:	f04f 0b02 	mov.w	fp, #2
 80187f6:	4641      	mov	r1, r8
 80187f8:	4620      	mov	r0, r4
 80187fa:	f7ff fea7 	bl	801854c <rshift>
 80187fe:	4446      	add	r6, r8
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	42b3      	cmp	r3, r6
 8018804:	da41      	bge.n	801888a <__gethex+0x26e>
 8018806:	4621      	mov	r1, r4
 8018808:	4648      	mov	r0, r9
 801880a:	f000 fafd 	bl	8018e08 <_Bfree>
 801880e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8018810:	2300      	movs	r3, #0
 8018812:	6013      	str	r3, [r2, #0]
 8018814:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8018818:	e78a      	b.n	8018730 <__gethex+0x114>
 801881a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801881e:	2a2e      	cmp	r2, #46	; 0x2e
 8018820:	d014      	beq.n	801884c <__gethex+0x230>
 8018822:	2b20      	cmp	r3, #32
 8018824:	d106      	bne.n	8018834 <__gethex+0x218>
 8018826:	9b01      	ldr	r3, [sp, #4]
 8018828:	f843 bb04 	str.w	fp, [r3], #4
 801882c:	f04f 0b00 	mov.w	fp, #0
 8018830:	9301      	str	r3, [sp, #4]
 8018832:	465b      	mov	r3, fp
 8018834:	7828      	ldrb	r0, [r5, #0]
 8018836:	9303      	str	r3, [sp, #12]
 8018838:	f7ff feda 	bl	80185f0 <__hexdig_fun>
 801883c:	9b03      	ldr	r3, [sp, #12]
 801883e:	f000 000f 	and.w	r0, r0, #15
 8018842:	4098      	lsls	r0, r3
 8018844:	ea4b 0b00 	orr.w	fp, fp, r0
 8018848:	3304      	adds	r3, #4
 801884a:	e7a1      	b.n	8018790 <__gethex+0x174>
 801884c:	45a8      	cmp	r8, r5
 801884e:	d8e8      	bhi.n	8018822 <__gethex+0x206>
 8018850:	2201      	movs	r2, #1
 8018852:	4628      	mov	r0, r5
 8018854:	9303      	str	r3, [sp, #12]
 8018856:	f7fe feba 	bl	80175ce <strncmp>
 801885a:	4926      	ldr	r1, [pc, #152]	; (80188f4 <__gethex+0x2d8>)
 801885c:	9b03      	ldr	r3, [sp, #12]
 801885e:	2800      	cmp	r0, #0
 8018860:	d1df      	bne.n	8018822 <__gethex+0x206>
 8018862:	e795      	b.n	8018790 <__gethex+0x174>
 8018864:	f04f 0b03 	mov.w	fp, #3
 8018868:	e7c5      	b.n	80187f6 <__gethex+0x1da>
 801886a:	da0b      	bge.n	8018884 <__gethex+0x268>
 801886c:	eba5 0800 	sub.w	r8, r5, r0
 8018870:	4621      	mov	r1, r4
 8018872:	4642      	mov	r2, r8
 8018874:	4648      	mov	r0, r9
 8018876:	f000 fce1 	bl	801923c <__lshift>
 801887a:	eba6 0608 	sub.w	r6, r6, r8
 801887e:	4604      	mov	r4, r0
 8018880:	f100 0a14 	add.w	sl, r0, #20
 8018884:	f04f 0b00 	mov.w	fp, #0
 8018888:	e7ba      	b.n	8018800 <__gethex+0x1e4>
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	42b3      	cmp	r3, r6
 801888e:	dd73      	ble.n	8018978 <__gethex+0x35c>
 8018890:	1b9e      	subs	r6, r3, r6
 8018892:	42b5      	cmp	r5, r6
 8018894:	dc34      	bgt.n	8018900 <__gethex+0x2e4>
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	2b02      	cmp	r3, #2
 801889a:	d023      	beq.n	80188e4 <__gethex+0x2c8>
 801889c:	2b03      	cmp	r3, #3
 801889e:	d025      	beq.n	80188ec <__gethex+0x2d0>
 80188a0:	2b01      	cmp	r3, #1
 80188a2:	d115      	bne.n	80188d0 <__gethex+0x2b4>
 80188a4:	42b5      	cmp	r5, r6
 80188a6:	d113      	bne.n	80188d0 <__gethex+0x2b4>
 80188a8:	2d01      	cmp	r5, #1
 80188aa:	d10b      	bne.n	80188c4 <__gethex+0x2a8>
 80188ac:	9a02      	ldr	r2, [sp, #8]
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6013      	str	r3, [r2, #0]
 80188b2:	2301      	movs	r3, #1
 80188b4:	6123      	str	r3, [r4, #16]
 80188b6:	f8ca 3000 	str.w	r3, [sl]
 80188ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80188bc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80188c0:	601c      	str	r4, [r3, #0]
 80188c2:	e735      	b.n	8018730 <__gethex+0x114>
 80188c4:	1e69      	subs	r1, r5, #1
 80188c6:	4620      	mov	r0, r4
 80188c8:	f000 feea 	bl	80196a0 <__any_on>
 80188cc:	2800      	cmp	r0, #0
 80188ce:	d1ed      	bne.n	80188ac <__gethex+0x290>
 80188d0:	4621      	mov	r1, r4
 80188d2:	4648      	mov	r0, r9
 80188d4:	f000 fa98 	bl	8018e08 <_Bfree>
 80188d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80188da:	2300      	movs	r3, #0
 80188dc:	6013      	str	r3, [r2, #0]
 80188de:	f04f 0850 	mov.w	r8, #80	; 0x50
 80188e2:	e725      	b.n	8018730 <__gethex+0x114>
 80188e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188e6:	2b00      	cmp	r3, #0
 80188e8:	d1f2      	bne.n	80188d0 <__gethex+0x2b4>
 80188ea:	e7df      	b.n	80188ac <__gethex+0x290>
 80188ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d1dc      	bne.n	80188ac <__gethex+0x290>
 80188f2:	e7ed      	b.n	80188d0 <__gethex+0x2b4>
 80188f4:	0801b624 	.word	0x0801b624
 80188f8:	0801b831 	.word	0x0801b831
 80188fc:	0801b842 	.word	0x0801b842
 8018900:	f106 38ff 	add.w	r8, r6, #4294967295
 8018904:	f1bb 0f00 	cmp.w	fp, #0
 8018908:	d133      	bne.n	8018972 <__gethex+0x356>
 801890a:	f1b8 0f00 	cmp.w	r8, #0
 801890e:	d004      	beq.n	801891a <__gethex+0x2fe>
 8018910:	4641      	mov	r1, r8
 8018912:	4620      	mov	r0, r4
 8018914:	f000 fec4 	bl	80196a0 <__any_on>
 8018918:	4683      	mov	fp, r0
 801891a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801891e:	2301      	movs	r3, #1
 8018920:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8018924:	f008 081f 	and.w	r8, r8, #31
 8018928:	fa03 f308 	lsl.w	r3, r3, r8
 801892c:	4213      	tst	r3, r2
 801892e:	4631      	mov	r1, r6
 8018930:	4620      	mov	r0, r4
 8018932:	bf18      	it	ne
 8018934:	f04b 0b02 	orrne.w	fp, fp, #2
 8018938:	1bad      	subs	r5, r5, r6
 801893a:	f7ff fe07 	bl	801854c <rshift>
 801893e:	687e      	ldr	r6, [r7, #4]
 8018940:	f04f 0802 	mov.w	r8, #2
 8018944:	f1bb 0f00 	cmp.w	fp, #0
 8018948:	d04a      	beq.n	80189e0 <__gethex+0x3c4>
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	2b02      	cmp	r3, #2
 801894e:	d016      	beq.n	801897e <__gethex+0x362>
 8018950:	2b03      	cmp	r3, #3
 8018952:	d018      	beq.n	8018986 <__gethex+0x36a>
 8018954:	2b01      	cmp	r3, #1
 8018956:	d109      	bne.n	801896c <__gethex+0x350>
 8018958:	f01b 0f02 	tst.w	fp, #2
 801895c:	d006      	beq.n	801896c <__gethex+0x350>
 801895e:	f8da 3000 	ldr.w	r3, [sl]
 8018962:	ea4b 0b03 	orr.w	fp, fp, r3
 8018966:	f01b 0f01 	tst.w	fp, #1
 801896a:	d10f      	bne.n	801898c <__gethex+0x370>
 801896c:	f048 0810 	orr.w	r8, r8, #16
 8018970:	e036      	b.n	80189e0 <__gethex+0x3c4>
 8018972:	f04f 0b01 	mov.w	fp, #1
 8018976:	e7d0      	b.n	801891a <__gethex+0x2fe>
 8018978:	f04f 0801 	mov.w	r8, #1
 801897c:	e7e2      	b.n	8018944 <__gethex+0x328>
 801897e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018980:	f1c3 0301 	rsb	r3, r3, #1
 8018984:	930f      	str	r3, [sp, #60]	; 0x3c
 8018986:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018988:	2b00      	cmp	r3, #0
 801898a:	d0ef      	beq.n	801896c <__gethex+0x350>
 801898c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018990:	f104 0214 	add.w	r2, r4, #20
 8018994:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8018998:	9301      	str	r3, [sp, #4]
 801899a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 801899e:	2300      	movs	r3, #0
 80189a0:	4694      	mov	ip, r2
 80189a2:	f852 1b04 	ldr.w	r1, [r2], #4
 80189a6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80189aa:	d01e      	beq.n	80189ea <__gethex+0x3ce>
 80189ac:	3101      	adds	r1, #1
 80189ae:	f8cc 1000 	str.w	r1, [ip]
 80189b2:	f1b8 0f02 	cmp.w	r8, #2
 80189b6:	f104 0214 	add.w	r2, r4, #20
 80189ba:	d13d      	bne.n	8018a38 <__gethex+0x41c>
 80189bc:	683b      	ldr	r3, [r7, #0]
 80189be:	3b01      	subs	r3, #1
 80189c0:	42ab      	cmp	r3, r5
 80189c2:	d10b      	bne.n	80189dc <__gethex+0x3c0>
 80189c4:	1169      	asrs	r1, r5, #5
 80189c6:	2301      	movs	r3, #1
 80189c8:	f005 051f 	and.w	r5, r5, #31
 80189cc:	fa03 f505 	lsl.w	r5, r3, r5
 80189d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80189d4:	421d      	tst	r5, r3
 80189d6:	bf18      	it	ne
 80189d8:	f04f 0801 	movne.w	r8, #1
 80189dc:	f048 0820 	orr.w	r8, r8, #32
 80189e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80189e2:	601c      	str	r4, [r3, #0]
 80189e4:	9b02      	ldr	r3, [sp, #8]
 80189e6:	601e      	str	r6, [r3, #0]
 80189e8:	e6a2      	b.n	8018730 <__gethex+0x114>
 80189ea:	4290      	cmp	r0, r2
 80189ec:	f842 3c04 	str.w	r3, [r2, #-4]
 80189f0:	d8d6      	bhi.n	80189a0 <__gethex+0x384>
 80189f2:	68a2      	ldr	r2, [r4, #8]
 80189f4:	4593      	cmp	fp, r2
 80189f6:	db17      	blt.n	8018a28 <__gethex+0x40c>
 80189f8:	6861      	ldr	r1, [r4, #4]
 80189fa:	4648      	mov	r0, r9
 80189fc:	3101      	adds	r1, #1
 80189fe:	f000 f9c3 	bl	8018d88 <_Balloc>
 8018a02:	4682      	mov	sl, r0
 8018a04:	b918      	cbnz	r0, 8018a0e <__gethex+0x3f2>
 8018a06:	4b1b      	ldr	r3, [pc, #108]	; (8018a74 <__gethex+0x458>)
 8018a08:	4602      	mov	r2, r0
 8018a0a:	2184      	movs	r1, #132	; 0x84
 8018a0c:	e6b3      	b.n	8018776 <__gethex+0x15a>
 8018a0e:	6922      	ldr	r2, [r4, #16]
 8018a10:	3202      	adds	r2, #2
 8018a12:	f104 010c 	add.w	r1, r4, #12
 8018a16:	0092      	lsls	r2, r2, #2
 8018a18:	300c      	adds	r0, #12
 8018a1a:	f7fe feb8 	bl	801778e <memcpy>
 8018a1e:	4621      	mov	r1, r4
 8018a20:	4648      	mov	r0, r9
 8018a22:	f000 f9f1 	bl	8018e08 <_Bfree>
 8018a26:	4654      	mov	r4, sl
 8018a28:	6922      	ldr	r2, [r4, #16]
 8018a2a:	1c51      	adds	r1, r2, #1
 8018a2c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018a30:	6121      	str	r1, [r4, #16]
 8018a32:	2101      	movs	r1, #1
 8018a34:	6151      	str	r1, [r2, #20]
 8018a36:	e7bc      	b.n	80189b2 <__gethex+0x396>
 8018a38:	6921      	ldr	r1, [r4, #16]
 8018a3a:	4559      	cmp	r1, fp
 8018a3c:	dd0b      	ble.n	8018a56 <__gethex+0x43a>
 8018a3e:	2101      	movs	r1, #1
 8018a40:	4620      	mov	r0, r4
 8018a42:	f7ff fd83 	bl	801854c <rshift>
 8018a46:	68bb      	ldr	r3, [r7, #8]
 8018a48:	3601      	adds	r6, #1
 8018a4a:	42b3      	cmp	r3, r6
 8018a4c:	f6ff aedb 	blt.w	8018806 <__gethex+0x1ea>
 8018a50:	f04f 0801 	mov.w	r8, #1
 8018a54:	e7c2      	b.n	80189dc <__gethex+0x3c0>
 8018a56:	f015 051f 	ands.w	r5, r5, #31
 8018a5a:	d0f9      	beq.n	8018a50 <__gethex+0x434>
 8018a5c:	9b01      	ldr	r3, [sp, #4]
 8018a5e:	441a      	add	r2, r3
 8018a60:	f1c5 0520 	rsb	r5, r5, #32
 8018a64:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8018a68:	f000 fa80 	bl	8018f6c <__hi0bits>
 8018a6c:	42a8      	cmp	r0, r5
 8018a6e:	dbe6      	blt.n	8018a3e <__gethex+0x422>
 8018a70:	e7ee      	b.n	8018a50 <__gethex+0x434>
 8018a72:	bf00      	nop
 8018a74:	0801b831 	.word	0x0801b831

08018a78 <L_shift>:
 8018a78:	f1c2 0208 	rsb	r2, r2, #8
 8018a7c:	0092      	lsls	r2, r2, #2
 8018a7e:	b570      	push	{r4, r5, r6, lr}
 8018a80:	f1c2 0620 	rsb	r6, r2, #32
 8018a84:	6843      	ldr	r3, [r0, #4]
 8018a86:	6804      	ldr	r4, [r0, #0]
 8018a88:	fa03 f506 	lsl.w	r5, r3, r6
 8018a8c:	432c      	orrs	r4, r5
 8018a8e:	40d3      	lsrs	r3, r2
 8018a90:	6004      	str	r4, [r0, #0]
 8018a92:	f840 3f04 	str.w	r3, [r0, #4]!
 8018a96:	4288      	cmp	r0, r1
 8018a98:	d3f4      	bcc.n	8018a84 <L_shift+0xc>
 8018a9a:	bd70      	pop	{r4, r5, r6, pc}

08018a9c <__match>:
 8018a9c:	b530      	push	{r4, r5, lr}
 8018a9e:	6803      	ldr	r3, [r0, #0]
 8018aa0:	3301      	adds	r3, #1
 8018aa2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018aa6:	b914      	cbnz	r4, 8018aae <__match+0x12>
 8018aa8:	6003      	str	r3, [r0, #0]
 8018aaa:	2001      	movs	r0, #1
 8018aac:	bd30      	pop	{r4, r5, pc}
 8018aae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ab2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018ab6:	2d19      	cmp	r5, #25
 8018ab8:	bf98      	it	ls
 8018aba:	3220      	addls	r2, #32
 8018abc:	42a2      	cmp	r2, r4
 8018abe:	d0f0      	beq.n	8018aa2 <__match+0x6>
 8018ac0:	2000      	movs	r0, #0
 8018ac2:	e7f3      	b.n	8018aac <__match+0x10>

08018ac4 <__hexnan>:
 8018ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ac8:	680b      	ldr	r3, [r1, #0]
 8018aca:	6801      	ldr	r1, [r0, #0]
 8018acc:	115e      	asrs	r6, r3, #5
 8018ace:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018ad2:	f013 031f 	ands.w	r3, r3, #31
 8018ad6:	b087      	sub	sp, #28
 8018ad8:	bf18      	it	ne
 8018ada:	3604      	addne	r6, #4
 8018adc:	2500      	movs	r5, #0
 8018ade:	1f37      	subs	r7, r6, #4
 8018ae0:	4682      	mov	sl, r0
 8018ae2:	4690      	mov	r8, r2
 8018ae4:	9301      	str	r3, [sp, #4]
 8018ae6:	f846 5c04 	str.w	r5, [r6, #-4]
 8018aea:	46b9      	mov	r9, r7
 8018aec:	463c      	mov	r4, r7
 8018aee:	9502      	str	r5, [sp, #8]
 8018af0:	46ab      	mov	fp, r5
 8018af2:	784a      	ldrb	r2, [r1, #1]
 8018af4:	1c4b      	adds	r3, r1, #1
 8018af6:	9303      	str	r3, [sp, #12]
 8018af8:	b342      	cbz	r2, 8018b4c <__hexnan+0x88>
 8018afa:	4610      	mov	r0, r2
 8018afc:	9105      	str	r1, [sp, #20]
 8018afe:	9204      	str	r2, [sp, #16]
 8018b00:	f7ff fd76 	bl	80185f0 <__hexdig_fun>
 8018b04:	2800      	cmp	r0, #0
 8018b06:	d14f      	bne.n	8018ba8 <__hexnan+0xe4>
 8018b08:	9a04      	ldr	r2, [sp, #16]
 8018b0a:	9905      	ldr	r1, [sp, #20]
 8018b0c:	2a20      	cmp	r2, #32
 8018b0e:	d818      	bhi.n	8018b42 <__hexnan+0x7e>
 8018b10:	9b02      	ldr	r3, [sp, #8]
 8018b12:	459b      	cmp	fp, r3
 8018b14:	dd13      	ble.n	8018b3e <__hexnan+0x7a>
 8018b16:	454c      	cmp	r4, r9
 8018b18:	d206      	bcs.n	8018b28 <__hexnan+0x64>
 8018b1a:	2d07      	cmp	r5, #7
 8018b1c:	dc04      	bgt.n	8018b28 <__hexnan+0x64>
 8018b1e:	462a      	mov	r2, r5
 8018b20:	4649      	mov	r1, r9
 8018b22:	4620      	mov	r0, r4
 8018b24:	f7ff ffa8 	bl	8018a78 <L_shift>
 8018b28:	4544      	cmp	r4, r8
 8018b2a:	d950      	bls.n	8018bce <__hexnan+0x10a>
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	f1a4 0904 	sub.w	r9, r4, #4
 8018b32:	f844 3c04 	str.w	r3, [r4, #-4]
 8018b36:	f8cd b008 	str.w	fp, [sp, #8]
 8018b3a:	464c      	mov	r4, r9
 8018b3c:	461d      	mov	r5, r3
 8018b3e:	9903      	ldr	r1, [sp, #12]
 8018b40:	e7d7      	b.n	8018af2 <__hexnan+0x2e>
 8018b42:	2a29      	cmp	r2, #41	; 0x29
 8018b44:	d155      	bne.n	8018bf2 <__hexnan+0x12e>
 8018b46:	3102      	adds	r1, #2
 8018b48:	f8ca 1000 	str.w	r1, [sl]
 8018b4c:	f1bb 0f00 	cmp.w	fp, #0
 8018b50:	d04f      	beq.n	8018bf2 <__hexnan+0x12e>
 8018b52:	454c      	cmp	r4, r9
 8018b54:	d206      	bcs.n	8018b64 <__hexnan+0xa0>
 8018b56:	2d07      	cmp	r5, #7
 8018b58:	dc04      	bgt.n	8018b64 <__hexnan+0xa0>
 8018b5a:	462a      	mov	r2, r5
 8018b5c:	4649      	mov	r1, r9
 8018b5e:	4620      	mov	r0, r4
 8018b60:	f7ff ff8a 	bl	8018a78 <L_shift>
 8018b64:	4544      	cmp	r4, r8
 8018b66:	d934      	bls.n	8018bd2 <__hexnan+0x10e>
 8018b68:	f1a8 0204 	sub.w	r2, r8, #4
 8018b6c:	4623      	mov	r3, r4
 8018b6e:	f853 1b04 	ldr.w	r1, [r3], #4
 8018b72:	f842 1f04 	str.w	r1, [r2, #4]!
 8018b76:	429f      	cmp	r7, r3
 8018b78:	d2f9      	bcs.n	8018b6e <__hexnan+0xaa>
 8018b7a:	1b3b      	subs	r3, r7, r4
 8018b7c:	f023 0303 	bic.w	r3, r3, #3
 8018b80:	3304      	adds	r3, #4
 8018b82:	3e03      	subs	r6, #3
 8018b84:	3401      	adds	r4, #1
 8018b86:	42a6      	cmp	r6, r4
 8018b88:	bf38      	it	cc
 8018b8a:	2304      	movcc	r3, #4
 8018b8c:	4443      	add	r3, r8
 8018b8e:	2200      	movs	r2, #0
 8018b90:	f843 2b04 	str.w	r2, [r3], #4
 8018b94:	429f      	cmp	r7, r3
 8018b96:	d2fb      	bcs.n	8018b90 <__hexnan+0xcc>
 8018b98:	683b      	ldr	r3, [r7, #0]
 8018b9a:	b91b      	cbnz	r3, 8018ba4 <__hexnan+0xe0>
 8018b9c:	4547      	cmp	r7, r8
 8018b9e:	d126      	bne.n	8018bee <__hexnan+0x12a>
 8018ba0:	2301      	movs	r3, #1
 8018ba2:	603b      	str	r3, [r7, #0]
 8018ba4:	2005      	movs	r0, #5
 8018ba6:	e025      	b.n	8018bf4 <__hexnan+0x130>
 8018ba8:	3501      	adds	r5, #1
 8018baa:	2d08      	cmp	r5, #8
 8018bac:	f10b 0b01 	add.w	fp, fp, #1
 8018bb0:	dd06      	ble.n	8018bc0 <__hexnan+0xfc>
 8018bb2:	4544      	cmp	r4, r8
 8018bb4:	d9c3      	bls.n	8018b3e <__hexnan+0x7a>
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	f844 3c04 	str.w	r3, [r4, #-4]
 8018bbc:	2501      	movs	r5, #1
 8018bbe:	3c04      	subs	r4, #4
 8018bc0:	6822      	ldr	r2, [r4, #0]
 8018bc2:	f000 000f 	and.w	r0, r0, #15
 8018bc6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018bca:	6020      	str	r0, [r4, #0]
 8018bcc:	e7b7      	b.n	8018b3e <__hexnan+0x7a>
 8018bce:	2508      	movs	r5, #8
 8018bd0:	e7b5      	b.n	8018b3e <__hexnan+0x7a>
 8018bd2:	9b01      	ldr	r3, [sp, #4]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d0df      	beq.n	8018b98 <__hexnan+0xd4>
 8018bd8:	f1c3 0320 	rsb	r3, r3, #32
 8018bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8018be0:	40da      	lsrs	r2, r3
 8018be2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8018be6:	4013      	ands	r3, r2
 8018be8:	f846 3c04 	str.w	r3, [r6, #-4]
 8018bec:	e7d4      	b.n	8018b98 <__hexnan+0xd4>
 8018bee:	3f04      	subs	r7, #4
 8018bf0:	e7d2      	b.n	8018b98 <__hexnan+0xd4>
 8018bf2:	2004      	movs	r0, #4
 8018bf4:	b007      	add	sp, #28
 8018bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08018bfc <malloc>:
 8018bfc:	4b02      	ldr	r3, [pc, #8]	; (8018c08 <malloc+0xc>)
 8018bfe:	4601      	mov	r1, r0
 8018c00:	6818      	ldr	r0, [r3, #0]
 8018c02:	f000 b823 	b.w	8018c4c <_malloc_r>
 8018c06:	bf00      	nop
 8018c08:	200001e8 	.word	0x200001e8

08018c0c <sbrk_aligned>:
 8018c0c:	b570      	push	{r4, r5, r6, lr}
 8018c0e:	4e0e      	ldr	r6, [pc, #56]	; (8018c48 <sbrk_aligned+0x3c>)
 8018c10:	460c      	mov	r4, r1
 8018c12:	6831      	ldr	r1, [r6, #0]
 8018c14:	4605      	mov	r5, r0
 8018c16:	b911      	cbnz	r1, 8018c1e <sbrk_aligned+0x12>
 8018c18:	f000 ff90 	bl	8019b3c <_sbrk_r>
 8018c1c:	6030      	str	r0, [r6, #0]
 8018c1e:	4621      	mov	r1, r4
 8018c20:	4628      	mov	r0, r5
 8018c22:	f000 ff8b 	bl	8019b3c <_sbrk_r>
 8018c26:	1c43      	adds	r3, r0, #1
 8018c28:	d00a      	beq.n	8018c40 <sbrk_aligned+0x34>
 8018c2a:	1cc4      	adds	r4, r0, #3
 8018c2c:	f024 0403 	bic.w	r4, r4, #3
 8018c30:	42a0      	cmp	r0, r4
 8018c32:	d007      	beq.n	8018c44 <sbrk_aligned+0x38>
 8018c34:	1a21      	subs	r1, r4, r0
 8018c36:	4628      	mov	r0, r5
 8018c38:	f000 ff80 	bl	8019b3c <_sbrk_r>
 8018c3c:	3001      	adds	r0, #1
 8018c3e:	d101      	bne.n	8018c44 <sbrk_aligned+0x38>
 8018c40:	f04f 34ff 	mov.w	r4, #4294967295
 8018c44:	4620      	mov	r0, r4
 8018c46:	bd70      	pop	{r4, r5, r6, pc}
 8018c48:	2000a0b8 	.word	0x2000a0b8

08018c4c <_malloc_r>:
 8018c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018c50:	1ccd      	adds	r5, r1, #3
 8018c52:	f025 0503 	bic.w	r5, r5, #3
 8018c56:	3508      	adds	r5, #8
 8018c58:	2d0c      	cmp	r5, #12
 8018c5a:	bf38      	it	cc
 8018c5c:	250c      	movcc	r5, #12
 8018c5e:	2d00      	cmp	r5, #0
 8018c60:	4607      	mov	r7, r0
 8018c62:	db01      	blt.n	8018c68 <_malloc_r+0x1c>
 8018c64:	42a9      	cmp	r1, r5
 8018c66:	d905      	bls.n	8018c74 <_malloc_r+0x28>
 8018c68:	230c      	movs	r3, #12
 8018c6a:	603b      	str	r3, [r7, #0]
 8018c6c:	2600      	movs	r6, #0
 8018c6e:	4630      	mov	r0, r6
 8018c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018c74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8018d48 <_malloc_r+0xfc>
 8018c78:	f000 f87a 	bl	8018d70 <__malloc_lock>
 8018c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8018c80:	461c      	mov	r4, r3
 8018c82:	bb5c      	cbnz	r4, 8018cdc <_malloc_r+0x90>
 8018c84:	4629      	mov	r1, r5
 8018c86:	4638      	mov	r0, r7
 8018c88:	f7ff ffc0 	bl	8018c0c <sbrk_aligned>
 8018c8c:	1c43      	adds	r3, r0, #1
 8018c8e:	4604      	mov	r4, r0
 8018c90:	d155      	bne.n	8018d3e <_malloc_r+0xf2>
 8018c92:	f8d8 4000 	ldr.w	r4, [r8]
 8018c96:	4626      	mov	r6, r4
 8018c98:	2e00      	cmp	r6, #0
 8018c9a:	d145      	bne.n	8018d28 <_malloc_r+0xdc>
 8018c9c:	2c00      	cmp	r4, #0
 8018c9e:	d048      	beq.n	8018d32 <_malloc_r+0xe6>
 8018ca0:	6823      	ldr	r3, [r4, #0]
 8018ca2:	4631      	mov	r1, r6
 8018ca4:	4638      	mov	r0, r7
 8018ca6:	eb04 0903 	add.w	r9, r4, r3
 8018caa:	f000 ff47 	bl	8019b3c <_sbrk_r>
 8018cae:	4581      	cmp	r9, r0
 8018cb0:	d13f      	bne.n	8018d32 <_malloc_r+0xe6>
 8018cb2:	6821      	ldr	r1, [r4, #0]
 8018cb4:	1a6d      	subs	r5, r5, r1
 8018cb6:	4629      	mov	r1, r5
 8018cb8:	4638      	mov	r0, r7
 8018cba:	f7ff ffa7 	bl	8018c0c <sbrk_aligned>
 8018cbe:	3001      	adds	r0, #1
 8018cc0:	d037      	beq.n	8018d32 <_malloc_r+0xe6>
 8018cc2:	6823      	ldr	r3, [r4, #0]
 8018cc4:	442b      	add	r3, r5
 8018cc6:	6023      	str	r3, [r4, #0]
 8018cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d038      	beq.n	8018d42 <_malloc_r+0xf6>
 8018cd0:	685a      	ldr	r2, [r3, #4]
 8018cd2:	42a2      	cmp	r2, r4
 8018cd4:	d12b      	bne.n	8018d2e <_malloc_r+0xe2>
 8018cd6:	2200      	movs	r2, #0
 8018cd8:	605a      	str	r2, [r3, #4]
 8018cda:	e00f      	b.n	8018cfc <_malloc_r+0xb0>
 8018cdc:	6822      	ldr	r2, [r4, #0]
 8018cde:	1b52      	subs	r2, r2, r5
 8018ce0:	d41f      	bmi.n	8018d22 <_malloc_r+0xd6>
 8018ce2:	2a0b      	cmp	r2, #11
 8018ce4:	d917      	bls.n	8018d16 <_malloc_r+0xca>
 8018ce6:	1961      	adds	r1, r4, r5
 8018ce8:	42a3      	cmp	r3, r4
 8018cea:	6025      	str	r5, [r4, #0]
 8018cec:	bf18      	it	ne
 8018cee:	6059      	strne	r1, [r3, #4]
 8018cf0:	6863      	ldr	r3, [r4, #4]
 8018cf2:	bf08      	it	eq
 8018cf4:	f8c8 1000 	streq.w	r1, [r8]
 8018cf8:	5162      	str	r2, [r4, r5]
 8018cfa:	604b      	str	r3, [r1, #4]
 8018cfc:	4638      	mov	r0, r7
 8018cfe:	f104 060b 	add.w	r6, r4, #11
 8018d02:	f000 f83b 	bl	8018d7c <__malloc_unlock>
 8018d06:	f026 0607 	bic.w	r6, r6, #7
 8018d0a:	1d23      	adds	r3, r4, #4
 8018d0c:	1af2      	subs	r2, r6, r3
 8018d0e:	d0ae      	beq.n	8018c6e <_malloc_r+0x22>
 8018d10:	1b9b      	subs	r3, r3, r6
 8018d12:	50a3      	str	r3, [r4, r2]
 8018d14:	e7ab      	b.n	8018c6e <_malloc_r+0x22>
 8018d16:	42a3      	cmp	r3, r4
 8018d18:	6862      	ldr	r2, [r4, #4]
 8018d1a:	d1dd      	bne.n	8018cd8 <_malloc_r+0x8c>
 8018d1c:	f8c8 2000 	str.w	r2, [r8]
 8018d20:	e7ec      	b.n	8018cfc <_malloc_r+0xb0>
 8018d22:	4623      	mov	r3, r4
 8018d24:	6864      	ldr	r4, [r4, #4]
 8018d26:	e7ac      	b.n	8018c82 <_malloc_r+0x36>
 8018d28:	4634      	mov	r4, r6
 8018d2a:	6876      	ldr	r6, [r6, #4]
 8018d2c:	e7b4      	b.n	8018c98 <_malloc_r+0x4c>
 8018d2e:	4613      	mov	r3, r2
 8018d30:	e7cc      	b.n	8018ccc <_malloc_r+0x80>
 8018d32:	230c      	movs	r3, #12
 8018d34:	603b      	str	r3, [r7, #0]
 8018d36:	4638      	mov	r0, r7
 8018d38:	f000 f820 	bl	8018d7c <__malloc_unlock>
 8018d3c:	e797      	b.n	8018c6e <_malloc_r+0x22>
 8018d3e:	6025      	str	r5, [r4, #0]
 8018d40:	e7dc      	b.n	8018cfc <_malloc_r+0xb0>
 8018d42:	605b      	str	r3, [r3, #4]
 8018d44:	deff      	udf	#255	; 0xff
 8018d46:	bf00      	nop
 8018d48:	2000a0b4 	.word	0x2000a0b4

08018d4c <__ascii_mbtowc>:
 8018d4c:	b082      	sub	sp, #8
 8018d4e:	b901      	cbnz	r1, 8018d52 <__ascii_mbtowc+0x6>
 8018d50:	a901      	add	r1, sp, #4
 8018d52:	b142      	cbz	r2, 8018d66 <__ascii_mbtowc+0x1a>
 8018d54:	b14b      	cbz	r3, 8018d6a <__ascii_mbtowc+0x1e>
 8018d56:	7813      	ldrb	r3, [r2, #0]
 8018d58:	600b      	str	r3, [r1, #0]
 8018d5a:	7812      	ldrb	r2, [r2, #0]
 8018d5c:	1e10      	subs	r0, r2, #0
 8018d5e:	bf18      	it	ne
 8018d60:	2001      	movne	r0, #1
 8018d62:	b002      	add	sp, #8
 8018d64:	4770      	bx	lr
 8018d66:	4610      	mov	r0, r2
 8018d68:	e7fb      	b.n	8018d62 <__ascii_mbtowc+0x16>
 8018d6a:	f06f 0001 	mvn.w	r0, #1
 8018d6e:	e7f8      	b.n	8018d62 <__ascii_mbtowc+0x16>

08018d70 <__malloc_lock>:
 8018d70:	4801      	ldr	r0, [pc, #4]	; (8018d78 <__malloc_lock+0x8>)
 8018d72:	f7fe bd0a 	b.w	801778a <__retarget_lock_acquire_recursive>
 8018d76:	bf00      	nop
 8018d78:	2000a0b0 	.word	0x2000a0b0

08018d7c <__malloc_unlock>:
 8018d7c:	4801      	ldr	r0, [pc, #4]	; (8018d84 <__malloc_unlock+0x8>)
 8018d7e:	f7fe bd05 	b.w	801778c <__retarget_lock_release_recursive>
 8018d82:	bf00      	nop
 8018d84:	2000a0b0 	.word	0x2000a0b0

08018d88 <_Balloc>:
 8018d88:	b570      	push	{r4, r5, r6, lr}
 8018d8a:	69c6      	ldr	r6, [r0, #28]
 8018d8c:	4604      	mov	r4, r0
 8018d8e:	460d      	mov	r5, r1
 8018d90:	b976      	cbnz	r6, 8018db0 <_Balloc+0x28>
 8018d92:	2010      	movs	r0, #16
 8018d94:	f7ff ff32 	bl	8018bfc <malloc>
 8018d98:	4602      	mov	r2, r0
 8018d9a:	61e0      	str	r0, [r4, #28]
 8018d9c:	b920      	cbnz	r0, 8018da8 <_Balloc+0x20>
 8018d9e:	4b18      	ldr	r3, [pc, #96]	; (8018e00 <_Balloc+0x78>)
 8018da0:	4818      	ldr	r0, [pc, #96]	; (8018e04 <_Balloc+0x7c>)
 8018da2:	216b      	movs	r1, #107	; 0x6b
 8018da4:	f000 feda 	bl	8019b5c <__assert_func>
 8018da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018dac:	6006      	str	r6, [r0, #0]
 8018dae:	60c6      	str	r6, [r0, #12]
 8018db0:	69e6      	ldr	r6, [r4, #28]
 8018db2:	68f3      	ldr	r3, [r6, #12]
 8018db4:	b183      	cbz	r3, 8018dd8 <_Balloc+0x50>
 8018db6:	69e3      	ldr	r3, [r4, #28]
 8018db8:	68db      	ldr	r3, [r3, #12]
 8018dba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018dbe:	b9b8      	cbnz	r0, 8018df0 <_Balloc+0x68>
 8018dc0:	2101      	movs	r1, #1
 8018dc2:	fa01 f605 	lsl.w	r6, r1, r5
 8018dc6:	1d72      	adds	r2, r6, #5
 8018dc8:	0092      	lsls	r2, r2, #2
 8018dca:	4620      	mov	r0, r4
 8018dcc:	f000 fee4 	bl	8019b98 <_calloc_r>
 8018dd0:	b160      	cbz	r0, 8018dec <_Balloc+0x64>
 8018dd2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018dd6:	e00e      	b.n	8018df6 <_Balloc+0x6e>
 8018dd8:	2221      	movs	r2, #33	; 0x21
 8018dda:	2104      	movs	r1, #4
 8018ddc:	4620      	mov	r0, r4
 8018dde:	f000 fedb 	bl	8019b98 <_calloc_r>
 8018de2:	69e3      	ldr	r3, [r4, #28]
 8018de4:	60f0      	str	r0, [r6, #12]
 8018de6:	68db      	ldr	r3, [r3, #12]
 8018de8:	2b00      	cmp	r3, #0
 8018dea:	d1e4      	bne.n	8018db6 <_Balloc+0x2e>
 8018dec:	2000      	movs	r0, #0
 8018dee:	bd70      	pop	{r4, r5, r6, pc}
 8018df0:	6802      	ldr	r2, [r0, #0]
 8018df2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018df6:	2300      	movs	r3, #0
 8018df8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018dfc:	e7f7      	b.n	8018dee <_Balloc+0x66>
 8018dfe:	bf00      	nop
 8018e00:	0801b7c2 	.word	0x0801b7c2
 8018e04:	0801b8a2 	.word	0x0801b8a2

08018e08 <_Bfree>:
 8018e08:	b570      	push	{r4, r5, r6, lr}
 8018e0a:	69c6      	ldr	r6, [r0, #28]
 8018e0c:	4605      	mov	r5, r0
 8018e0e:	460c      	mov	r4, r1
 8018e10:	b976      	cbnz	r6, 8018e30 <_Bfree+0x28>
 8018e12:	2010      	movs	r0, #16
 8018e14:	f7ff fef2 	bl	8018bfc <malloc>
 8018e18:	4602      	mov	r2, r0
 8018e1a:	61e8      	str	r0, [r5, #28]
 8018e1c:	b920      	cbnz	r0, 8018e28 <_Bfree+0x20>
 8018e1e:	4b09      	ldr	r3, [pc, #36]	; (8018e44 <_Bfree+0x3c>)
 8018e20:	4809      	ldr	r0, [pc, #36]	; (8018e48 <_Bfree+0x40>)
 8018e22:	218f      	movs	r1, #143	; 0x8f
 8018e24:	f000 fe9a 	bl	8019b5c <__assert_func>
 8018e28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018e2c:	6006      	str	r6, [r0, #0]
 8018e2e:	60c6      	str	r6, [r0, #12]
 8018e30:	b13c      	cbz	r4, 8018e42 <_Bfree+0x3a>
 8018e32:	69eb      	ldr	r3, [r5, #28]
 8018e34:	6862      	ldr	r2, [r4, #4]
 8018e36:	68db      	ldr	r3, [r3, #12]
 8018e38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018e3c:	6021      	str	r1, [r4, #0]
 8018e3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018e42:	bd70      	pop	{r4, r5, r6, pc}
 8018e44:	0801b7c2 	.word	0x0801b7c2
 8018e48:	0801b8a2 	.word	0x0801b8a2

08018e4c <__multadd>:
 8018e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e50:	690d      	ldr	r5, [r1, #16]
 8018e52:	4607      	mov	r7, r0
 8018e54:	460c      	mov	r4, r1
 8018e56:	461e      	mov	r6, r3
 8018e58:	f101 0c14 	add.w	ip, r1, #20
 8018e5c:	2000      	movs	r0, #0
 8018e5e:	f8dc 3000 	ldr.w	r3, [ip]
 8018e62:	b299      	uxth	r1, r3
 8018e64:	fb02 6101 	mla	r1, r2, r1, r6
 8018e68:	0c1e      	lsrs	r6, r3, #16
 8018e6a:	0c0b      	lsrs	r3, r1, #16
 8018e6c:	fb02 3306 	mla	r3, r2, r6, r3
 8018e70:	b289      	uxth	r1, r1
 8018e72:	3001      	adds	r0, #1
 8018e74:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018e78:	4285      	cmp	r5, r0
 8018e7a:	f84c 1b04 	str.w	r1, [ip], #4
 8018e7e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018e82:	dcec      	bgt.n	8018e5e <__multadd+0x12>
 8018e84:	b30e      	cbz	r6, 8018eca <__multadd+0x7e>
 8018e86:	68a3      	ldr	r3, [r4, #8]
 8018e88:	42ab      	cmp	r3, r5
 8018e8a:	dc19      	bgt.n	8018ec0 <__multadd+0x74>
 8018e8c:	6861      	ldr	r1, [r4, #4]
 8018e8e:	4638      	mov	r0, r7
 8018e90:	3101      	adds	r1, #1
 8018e92:	f7ff ff79 	bl	8018d88 <_Balloc>
 8018e96:	4680      	mov	r8, r0
 8018e98:	b928      	cbnz	r0, 8018ea6 <__multadd+0x5a>
 8018e9a:	4602      	mov	r2, r0
 8018e9c:	4b0c      	ldr	r3, [pc, #48]	; (8018ed0 <__multadd+0x84>)
 8018e9e:	480d      	ldr	r0, [pc, #52]	; (8018ed4 <__multadd+0x88>)
 8018ea0:	21ba      	movs	r1, #186	; 0xba
 8018ea2:	f000 fe5b 	bl	8019b5c <__assert_func>
 8018ea6:	6922      	ldr	r2, [r4, #16]
 8018ea8:	3202      	adds	r2, #2
 8018eaa:	f104 010c 	add.w	r1, r4, #12
 8018eae:	0092      	lsls	r2, r2, #2
 8018eb0:	300c      	adds	r0, #12
 8018eb2:	f7fe fc6c 	bl	801778e <memcpy>
 8018eb6:	4621      	mov	r1, r4
 8018eb8:	4638      	mov	r0, r7
 8018eba:	f7ff ffa5 	bl	8018e08 <_Bfree>
 8018ebe:	4644      	mov	r4, r8
 8018ec0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018ec4:	3501      	adds	r5, #1
 8018ec6:	615e      	str	r6, [r3, #20]
 8018ec8:	6125      	str	r5, [r4, #16]
 8018eca:	4620      	mov	r0, r4
 8018ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ed0:	0801b831 	.word	0x0801b831
 8018ed4:	0801b8a2 	.word	0x0801b8a2

08018ed8 <__s2b>:
 8018ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018edc:	460c      	mov	r4, r1
 8018ede:	4615      	mov	r5, r2
 8018ee0:	461f      	mov	r7, r3
 8018ee2:	2209      	movs	r2, #9
 8018ee4:	3308      	adds	r3, #8
 8018ee6:	4606      	mov	r6, r0
 8018ee8:	fb93 f3f2 	sdiv	r3, r3, r2
 8018eec:	2100      	movs	r1, #0
 8018eee:	2201      	movs	r2, #1
 8018ef0:	429a      	cmp	r2, r3
 8018ef2:	db09      	blt.n	8018f08 <__s2b+0x30>
 8018ef4:	4630      	mov	r0, r6
 8018ef6:	f7ff ff47 	bl	8018d88 <_Balloc>
 8018efa:	b940      	cbnz	r0, 8018f0e <__s2b+0x36>
 8018efc:	4602      	mov	r2, r0
 8018efe:	4b19      	ldr	r3, [pc, #100]	; (8018f64 <__s2b+0x8c>)
 8018f00:	4819      	ldr	r0, [pc, #100]	; (8018f68 <__s2b+0x90>)
 8018f02:	21d3      	movs	r1, #211	; 0xd3
 8018f04:	f000 fe2a 	bl	8019b5c <__assert_func>
 8018f08:	0052      	lsls	r2, r2, #1
 8018f0a:	3101      	adds	r1, #1
 8018f0c:	e7f0      	b.n	8018ef0 <__s2b+0x18>
 8018f0e:	9b08      	ldr	r3, [sp, #32]
 8018f10:	6143      	str	r3, [r0, #20]
 8018f12:	2d09      	cmp	r5, #9
 8018f14:	f04f 0301 	mov.w	r3, #1
 8018f18:	6103      	str	r3, [r0, #16]
 8018f1a:	dd16      	ble.n	8018f4a <__s2b+0x72>
 8018f1c:	f104 0909 	add.w	r9, r4, #9
 8018f20:	46c8      	mov	r8, r9
 8018f22:	442c      	add	r4, r5
 8018f24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8018f28:	4601      	mov	r1, r0
 8018f2a:	3b30      	subs	r3, #48	; 0x30
 8018f2c:	220a      	movs	r2, #10
 8018f2e:	4630      	mov	r0, r6
 8018f30:	f7ff ff8c 	bl	8018e4c <__multadd>
 8018f34:	45a0      	cmp	r8, r4
 8018f36:	d1f5      	bne.n	8018f24 <__s2b+0x4c>
 8018f38:	f1a5 0408 	sub.w	r4, r5, #8
 8018f3c:	444c      	add	r4, r9
 8018f3e:	1b2d      	subs	r5, r5, r4
 8018f40:	1963      	adds	r3, r4, r5
 8018f42:	42bb      	cmp	r3, r7
 8018f44:	db04      	blt.n	8018f50 <__s2b+0x78>
 8018f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f4a:	340a      	adds	r4, #10
 8018f4c:	2509      	movs	r5, #9
 8018f4e:	e7f6      	b.n	8018f3e <__s2b+0x66>
 8018f50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018f54:	4601      	mov	r1, r0
 8018f56:	3b30      	subs	r3, #48	; 0x30
 8018f58:	220a      	movs	r2, #10
 8018f5a:	4630      	mov	r0, r6
 8018f5c:	f7ff ff76 	bl	8018e4c <__multadd>
 8018f60:	e7ee      	b.n	8018f40 <__s2b+0x68>
 8018f62:	bf00      	nop
 8018f64:	0801b831 	.word	0x0801b831
 8018f68:	0801b8a2 	.word	0x0801b8a2

08018f6c <__hi0bits>:
 8018f6c:	0c03      	lsrs	r3, r0, #16
 8018f6e:	041b      	lsls	r3, r3, #16
 8018f70:	b9d3      	cbnz	r3, 8018fa8 <__hi0bits+0x3c>
 8018f72:	0400      	lsls	r0, r0, #16
 8018f74:	2310      	movs	r3, #16
 8018f76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018f7a:	bf04      	itt	eq
 8018f7c:	0200      	lsleq	r0, r0, #8
 8018f7e:	3308      	addeq	r3, #8
 8018f80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018f84:	bf04      	itt	eq
 8018f86:	0100      	lsleq	r0, r0, #4
 8018f88:	3304      	addeq	r3, #4
 8018f8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018f8e:	bf04      	itt	eq
 8018f90:	0080      	lsleq	r0, r0, #2
 8018f92:	3302      	addeq	r3, #2
 8018f94:	2800      	cmp	r0, #0
 8018f96:	db05      	blt.n	8018fa4 <__hi0bits+0x38>
 8018f98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018f9c:	f103 0301 	add.w	r3, r3, #1
 8018fa0:	bf08      	it	eq
 8018fa2:	2320      	moveq	r3, #32
 8018fa4:	4618      	mov	r0, r3
 8018fa6:	4770      	bx	lr
 8018fa8:	2300      	movs	r3, #0
 8018faa:	e7e4      	b.n	8018f76 <__hi0bits+0xa>

08018fac <__lo0bits>:
 8018fac:	6803      	ldr	r3, [r0, #0]
 8018fae:	f013 0207 	ands.w	r2, r3, #7
 8018fb2:	d00c      	beq.n	8018fce <__lo0bits+0x22>
 8018fb4:	07d9      	lsls	r1, r3, #31
 8018fb6:	d422      	bmi.n	8018ffe <__lo0bits+0x52>
 8018fb8:	079a      	lsls	r2, r3, #30
 8018fba:	bf49      	itett	mi
 8018fbc:	085b      	lsrmi	r3, r3, #1
 8018fbe:	089b      	lsrpl	r3, r3, #2
 8018fc0:	6003      	strmi	r3, [r0, #0]
 8018fc2:	2201      	movmi	r2, #1
 8018fc4:	bf5c      	itt	pl
 8018fc6:	6003      	strpl	r3, [r0, #0]
 8018fc8:	2202      	movpl	r2, #2
 8018fca:	4610      	mov	r0, r2
 8018fcc:	4770      	bx	lr
 8018fce:	b299      	uxth	r1, r3
 8018fd0:	b909      	cbnz	r1, 8018fd6 <__lo0bits+0x2a>
 8018fd2:	0c1b      	lsrs	r3, r3, #16
 8018fd4:	2210      	movs	r2, #16
 8018fd6:	b2d9      	uxtb	r1, r3
 8018fd8:	b909      	cbnz	r1, 8018fde <__lo0bits+0x32>
 8018fda:	3208      	adds	r2, #8
 8018fdc:	0a1b      	lsrs	r3, r3, #8
 8018fde:	0719      	lsls	r1, r3, #28
 8018fe0:	bf04      	itt	eq
 8018fe2:	091b      	lsreq	r3, r3, #4
 8018fe4:	3204      	addeq	r2, #4
 8018fe6:	0799      	lsls	r1, r3, #30
 8018fe8:	bf04      	itt	eq
 8018fea:	089b      	lsreq	r3, r3, #2
 8018fec:	3202      	addeq	r2, #2
 8018fee:	07d9      	lsls	r1, r3, #31
 8018ff0:	d403      	bmi.n	8018ffa <__lo0bits+0x4e>
 8018ff2:	085b      	lsrs	r3, r3, #1
 8018ff4:	f102 0201 	add.w	r2, r2, #1
 8018ff8:	d003      	beq.n	8019002 <__lo0bits+0x56>
 8018ffa:	6003      	str	r3, [r0, #0]
 8018ffc:	e7e5      	b.n	8018fca <__lo0bits+0x1e>
 8018ffe:	2200      	movs	r2, #0
 8019000:	e7e3      	b.n	8018fca <__lo0bits+0x1e>
 8019002:	2220      	movs	r2, #32
 8019004:	e7e1      	b.n	8018fca <__lo0bits+0x1e>
	...

08019008 <__i2b>:
 8019008:	b510      	push	{r4, lr}
 801900a:	460c      	mov	r4, r1
 801900c:	2101      	movs	r1, #1
 801900e:	f7ff febb 	bl	8018d88 <_Balloc>
 8019012:	4602      	mov	r2, r0
 8019014:	b928      	cbnz	r0, 8019022 <__i2b+0x1a>
 8019016:	4b05      	ldr	r3, [pc, #20]	; (801902c <__i2b+0x24>)
 8019018:	4805      	ldr	r0, [pc, #20]	; (8019030 <__i2b+0x28>)
 801901a:	f240 1145 	movw	r1, #325	; 0x145
 801901e:	f000 fd9d 	bl	8019b5c <__assert_func>
 8019022:	2301      	movs	r3, #1
 8019024:	6144      	str	r4, [r0, #20]
 8019026:	6103      	str	r3, [r0, #16]
 8019028:	bd10      	pop	{r4, pc}
 801902a:	bf00      	nop
 801902c:	0801b831 	.word	0x0801b831
 8019030:	0801b8a2 	.word	0x0801b8a2

08019034 <__multiply>:
 8019034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019038:	4691      	mov	r9, r2
 801903a:	690a      	ldr	r2, [r1, #16]
 801903c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019040:	429a      	cmp	r2, r3
 8019042:	bfb8      	it	lt
 8019044:	460b      	movlt	r3, r1
 8019046:	460c      	mov	r4, r1
 8019048:	bfbc      	itt	lt
 801904a:	464c      	movlt	r4, r9
 801904c:	4699      	movlt	r9, r3
 801904e:	6927      	ldr	r7, [r4, #16]
 8019050:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019054:	68a3      	ldr	r3, [r4, #8]
 8019056:	6861      	ldr	r1, [r4, #4]
 8019058:	eb07 060a 	add.w	r6, r7, sl
 801905c:	42b3      	cmp	r3, r6
 801905e:	b085      	sub	sp, #20
 8019060:	bfb8      	it	lt
 8019062:	3101      	addlt	r1, #1
 8019064:	f7ff fe90 	bl	8018d88 <_Balloc>
 8019068:	b930      	cbnz	r0, 8019078 <__multiply+0x44>
 801906a:	4602      	mov	r2, r0
 801906c:	4b44      	ldr	r3, [pc, #272]	; (8019180 <__multiply+0x14c>)
 801906e:	4845      	ldr	r0, [pc, #276]	; (8019184 <__multiply+0x150>)
 8019070:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019074:	f000 fd72 	bl	8019b5c <__assert_func>
 8019078:	f100 0514 	add.w	r5, r0, #20
 801907c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019080:	462b      	mov	r3, r5
 8019082:	2200      	movs	r2, #0
 8019084:	4543      	cmp	r3, r8
 8019086:	d321      	bcc.n	80190cc <__multiply+0x98>
 8019088:	f104 0314 	add.w	r3, r4, #20
 801908c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019090:	f109 0314 	add.w	r3, r9, #20
 8019094:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019098:	9202      	str	r2, [sp, #8]
 801909a:	1b3a      	subs	r2, r7, r4
 801909c:	3a15      	subs	r2, #21
 801909e:	f022 0203 	bic.w	r2, r2, #3
 80190a2:	3204      	adds	r2, #4
 80190a4:	f104 0115 	add.w	r1, r4, #21
 80190a8:	428f      	cmp	r7, r1
 80190aa:	bf38      	it	cc
 80190ac:	2204      	movcc	r2, #4
 80190ae:	9201      	str	r2, [sp, #4]
 80190b0:	9a02      	ldr	r2, [sp, #8]
 80190b2:	9303      	str	r3, [sp, #12]
 80190b4:	429a      	cmp	r2, r3
 80190b6:	d80c      	bhi.n	80190d2 <__multiply+0x9e>
 80190b8:	2e00      	cmp	r6, #0
 80190ba:	dd03      	ble.n	80190c4 <__multiply+0x90>
 80190bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80190c0:	2b00      	cmp	r3, #0
 80190c2:	d05b      	beq.n	801917c <__multiply+0x148>
 80190c4:	6106      	str	r6, [r0, #16]
 80190c6:	b005      	add	sp, #20
 80190c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190cc:	f843 2b04 	str.w	r2, [r3], #4
 80190d0:	e7d8      	b.n	8019084 <__multiply+0x50>
 80190d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80190d6:	f1ba 0f00 	cmp.w	sl, #0
 80190da:	d024      	beq.n	8019126 <__multiply+0xf2>
 80190dc:	f104 0e14 	add.w	lr, r4, #20
 80190e0:	46a9      	mov	r9, r5
 80190e2:	f04f 0c00 	mov.w	ip, #0
 80190e6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80190ea:	f8d9 1000 	ldr.w	r1, [r9]
 80190ee:	fa1f fb82 	uxth.w	fp, r2
 80190f2:	b289      	uxth	r1, r1
 80190f4:	fb0a 110b 	mla	r1, sl, fp, r1
 80190f8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80190fc:	f8d9 2000 	ldr.w	r2, [r9]
 8019100:	4461      	add	r1, ip
 8019102:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019106:	fb0a c20b 	mla	r2, sl, fp, ip
 801910a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801910e:	b289      	uxth	r1, r1
 8019110:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019114:	4577      	cmp	r7, lr
 8019116:	f849 1b04 	str.w	r1, [r9], #4
 801911a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801911e:	d8e2      	bhi.n	80190e6 <__multiply+0xb2>
 8019120:	9a01      	ldr	r2, [sp, #4]
 8019122:	f845 c002 	str.w	ip, [r5, r2]
 8019126:	9a03      	ldr	r2, [sp, #12]
 8019128:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801912c:	3304      	adds	r3, #4
 801912e:	f1b9 0f00 	cmp.w	r9, #0
 8019132:	d021      	beq.n	8019178 <__multiply+0x144>
 8019134:	6829      	ldr	r1, [r5, #0]
 8019136:	f104 0c14 	add.w	ip, r4, #20
 801913a:	46ae      	mov	lr, r5
 801913c:	f04f 0a00 	mov.w	sl, #0
 8019140:	f8bc b000 	ldrh.w	fp, [ip]
 8019144:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019148:	fb09 220b 	mla	r2, r9, fp, r2
 801914c:	4452      	add	r2, sl
 801914e:	b289      	uxth	r1, r1
 8019150:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019154:	f84e 1b04 	str.w	r1, [lr], #4
 8019158:	f85c 1b04 	ldr.w	r1, [ip], #4
 801915c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019160:	f8be 1000 	ldrh.w	r1, [lr]
 8019164:	fb09 110a 	mla	r1, r9, sl, r1
 8019168:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801916c:	4567      	cmp	r7, ip
 801916e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019172:	d8e5      	bhi.n	8019140 <__multiply+0x10c>
 8019174:	9a01      	ldr	r2, [sp, #4]
 8019176:	50a9      	str	r1, [r5, r2]
 8019178:	3504      	adds	r5, #4
 801917a:	e799      	b.n	80190b0 <__multiply+0x7c>
 801917c:	3e01      	subs	r6, #1
 801917e:	e79b      	b.n	80190b8 <__multiply+0x84>
 8019180:	0801b831 	.word	0x0801b831
 8019184:	0801b8a2 	.word	0x0801b8a2

08019188 <__pow5mult>:
 8019188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801918c:	4615      	mov	r5, r2
 801918e:	f012 0203 	ands.w	r2, r2, #3
 8019192:	4606      	mov	r6, r0
 8019194:	460f      	mov	r7, r1
 8019196:	d007      	beq.n	80191a8 <__pow5mult+0x20>
 8019198:	4c25      	ldr	r4, [pc, #148]	; (8019230 <__pow5mult+0xa8>)
 801919a:	3a01      	subs	r2, #1
 801919c:	2300      	movs	r3, #0
 801919e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80191a2:	f7ff fe53 	bl	8018e4c <__multadd>
 80191a6:	4607      	mov	r7, r0
 80191a8:	10ad      	asrs	r5, r5, #2
 80191aa:	d03d      	beq.n	8019228 <__pow5mult+0xa0>
 80191ac:	69f4      	ldr	r4, [r6, #28]
 80191ae:	b97c      	cbnz	r4, 80191d0 <__pow5mult+0x48>
 80191b0:	2010      	movs	r0, #16
 80191b2:	f7ff fd23 	bl	8018bfc <malloc>
 80191b6:	4602      	mov	r2, r0
 80191b8:	61f0      	str	r0, [r6, #28]
 80191ba:	b928      	cbnz	r0, 80191c8 <__pow5mult+0x40>
 80191bc:	4b1d      	ldr	r3, [pc, #116]	; (8019234 <__pow5mult+0xac>)
 80191be:	481e      	ldr	r0, [pc, #120]	; (8019238 <__pow5mult+0xb0>)
 80191c0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80191c4:	f000 fcca 	bl	8019b5c <__assert_func>
 80191c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80191cc:	6004      	str	r4, [r0, #0]
 80191ce:	60c4      	str	r4, [r0, #12]
 80191d0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80191d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80191d8:	b94c      	cbnz	r4, 80191ee <__pow5mult+0x66>
 80191da:	f240 2171 	movw	r1, #625	; 0x271
 80191de:	4630      	mov	r0, r6
 80191e0:	f7ff ff12 	bl	8019008 <__i2b>
 80191e4:	2300      	movs	r3, #0
 80191e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80191ea:	4604      	mov	r4, r0
 80191ec:	6003      	str	r3, [r0, #0]
 80191ee:	f04f 0900 	mov.w	r9, #0
 80191f2:	07eb      	lsls	r3, r5, #31
 80191f4:	d50a      	bpl.n	801920c <__pow5mult+0x84>
 80191f6:	4639      	mov	r1, r7
 80191f8:	4622      	mov	r2, r4
 80191fa:	4630      	mov	r0, r6
 80191fc:	f7ff ff1a 	bl	8019034 <__multiply>
 8019200:	4639      	mov	r1, r7
 8019202:	4680      	mov	r8, r0
 8019204:	4630      	mov	r0, r6
 8019206:	f7ff fdff 	bl	8018e08 <_Bfree>
 801920a:	4647      	mov	r7, r8
 801920c:	106d      	asrs	r5, r5, #1
 801920e:	d00b      	beq.n	8019228 <__pow5mult+0xa0>
 8019210:	6820      	ldr	r0, [r4, #0]
 8019212:	b938      	cbnz	r0, 8019224 <__pow5mult+0x9c>
 8019214:	4622      	mov	r2, r4
 8019216:	4621      	mov	r1, r4
 8019218:	4630      	mov	r0, r6
 801921a:	f7ff ff0b 	bl	8019034 <__multiply>
 801921e:	6020      	str	r0, [r4, #0]
 8019220:	f8c0 9000 	str.w	r9, [r0]
 8019224:	4604      	mov	r4, r0
 8019226:	e7e4      	b.n	80191f2 <__pow5mult+0x6a>
 8019228:	4638      	mov	r0, r7
 801922a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801922e:	bf00      	nop
 8019230:	0801b9f0 	.word	0x0801b9f0
 8019234:	0801b7c2 	.word	0x0801b7c2
 8019238:	0801b8a2 	.word	0x0801b8a2

0801923c <__lshift>:
 801923c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019240:	460c      	mov	r4, r1
 8019242:	6849      	ldr	r1, [r1, #4]
 8019244:	6923      	ldr	r3, [r4, #16]
 8019246:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801924a:	68a3      	ldr	r3, [r4, #8]
 801924c:	4607      	mov	r7, r0
 801924e:	4691      	mov	r9, r2
 8019250:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8019254:	f108 0601 	add.w	r6, r8, #1
 8019258:	42b3      	cmp	r3, r6
 801925a:	db0b      	blt.n	8019274 <__lshift+0x38>
 801925c:	4638      	mov	r0, r7
 801925e:	f7ff fd93 	bl	8018d88 <_Balloc>
 8019262:	4605      	mov	r5, r0
 8019264:	b948      	cbnz	r0, 801927a <__lshift+0x3e>
 8019266:	4602      	mov	r2, r0
 8019268:	4b28      	ldr	r3, [pc, #160]	; (801930c <__lshift+0xd0>)
 801926a:	4829      	ldr	r0, [pc, #164]	; (8019310 <__lshift+0xd4>)
 801926c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8019270:	f000 fc74 	bl	8019b5c <__assert_func>
 8019274:	3101      	adds	r1, #1
 8019276:	005b      	lsls	r3, r3, #1
 8019278:	e7ee      	b.n	8019258 <__lshift+0x1c>
 801927a:	2300      	movs	r3, #0
 801927c:	f100 0114 	add.w	r1, r0, #20
 8019280:	f100 0210 	add.w	r2, r0, #16
 8019284:	4618      	mov	r0, r3
 8019286:	4553      	cmp	r3, sl
 8019288:	db33      	blt.n	80192f2 <__lshift+0xb6>
 801928a:	6920      	ldr	r0, [r4, #16]
 801928c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019290:	f104 0314 	add.w	r3, r4, #20
 8019294:	f019 091f 	ands.w	r9, r9, #31
 8019298:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801929c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80192a0:	d02b      	beq.n	80192fa <__lshift+0xbe>
 80192a2:	f1c9 0e20 	rsb	lr, r9, #32
 80192a6:	468a      	mov	sl, r1
 80192a8:	2200      	movs	r2, #0
 80192aa:	6818      	ldr	r0, [r3, #0]
 80192ac:	fa00 f009 	lsl.w	r0, r0, r9
 80192b0:	4310      	orrs	r0, r2
 80192b2:	f84a 0b04 	str.w	r0, [sl], #4
 80192b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80192ba:	459c      	cmp	ip, r3
 80192bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80192c0:	d8f3      	bhi.n	80192aa <__lshift+0x6e>
 80192c2:	ebac 0304 	sub.w	r3, ip, r4
 80192c6:	3b15      	subs	r3, #21
 80192c8:	f023 0303 	bic.w	r3, r3, #3
 80192cc:	3304      	adds	r3, #4
 80192ce:	f104 0015 	add.w	r0, r4, #21
 80192d2:	4584      	cmp	ip, r0
 80192d4:	bf38      	it	cc
 80192d6:	2304      	movcc	r3, #4
 80192d8:	50ca      	str	r2, [r1, r3]
 80192da:	b10a      	cbz	r2, 80192e0 <__lshift+0xa4>
 80192dc:	f108 0602 	add.w	r6, r8, #2
 80192e0:	3e01      	subs	r6, #1
 80192e2:	4638      	mov	r0, r7
 80192e4:	612e      	str	r6, [r5, #16]
 80192e6:	4621      	mov	r1, r4
 80192e8:	f7ff fd8e 	bl	8018e08 <_Bfree>
 80192ec:	4628      	mov	r0, r5
 80192ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80192f6:	3301      	adds	r3, #1
 80192f8:	e7c5      	b.n	8019286 <__lshift+0x4a>
 80192fa:	3904      	subs	r1, #4
 80192fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8019300:	f841 2f04 	str.w	r2, [r1, #4]!
 8019304:	459c      	cmp	ip, r3
 8019306:	d8f9      	bhi.n	80192fc <__lshift+0xc0>
 8019308:	e7ea      	b.n	80192e0 <__lshift+0xa4>
 801930a:	bf00      	nop
 801930c:	0801b831 	.word	0x0801b831
 8019310:	0801b8a2 	.word	0x0801b8a2

08019314 <__mcmp>:
 8019314:	b530      	push	{r4, r5, lr}
 8019316:	6902      	ldr	r2, [r0, #16]
 8019318:	690c      	ldr	r4, [r1, #16]
 801931a:	1b12      	subs	r2, r2, r4
 801931c:	d10e      	bne.n	801933c <__mcmp+0x28>
 801931e:	f100 0314 	add.w	r3, r0, #20
 8019322:	3114      	adds	r1, #20
 8019324:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019328:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801932c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019330:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019334:	42a5      	cmp	r5, r4
 8019336:	d003      	beq.n	8019340 <__mcmp+0x2c>
 8019338:	d305      	bcc.n	8019346 <__mcmp+0x32>
 801933a:	2201      	movs	r2, #1
 801933c:	4610      	mov	r0, r2
 801933e:	bd30      	pop	{r4, r5, pc}
 8019340:	4283      	cmp	r3, r0
 8019342:	d3f3      	bcc.n	801932c <__mcmp+0x18>
 8019344:	e7fa      	b.n	801933c <__mcmp+0x28>
 8019346:	f04f 32ff 	mov.w	r2, #4294967295
 801934a:	e7f7      	b.n	801933c <__mcmp+0x28>

0801934c <__mdiff>:
 801934c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019350:	460c      	mov	r4, r1
 8019352:	4606      	mov	r6, r0
 8019354:	4611      	mov	r1, r2
 8019356:	4620      	mov	r0, r4
 8019358:	4690      	mov	r8, r2
 801935a:	f7ff ffdb 	bl	8019314 <__mcmp>
 801935e:	1e05      	subs	r5, r0, #0
 8019360:	d110      	bne.n	8019384 <__mdiff+0x38>
 8019362:	4629      	mov	r1, r5
 8019364:	4630      	mov	r0, r6
 8019366:	f7ff fd0f 	bl	8018d88 <_Balloc>
 801936a:	b930      	cbnz	r0, 801937a <__mdiff+0x2e>
 801936c:	4b3a      	ldr	r3, [pc, #232]	; (8019458 <__mdiff+0x10c>)
 801936e:	4602      	mov	r2, r0
 8019370:	f240 2137 	movw	r1, #567	; 0x237
 8019374:	4839      	ldr	r0, [pc, #228]	; (801945c <__mdiff+0x110>)
 8019376:	f000 fbf1 	bl	8019b5c <__assert_func>
 801937a:	2301      	movs	r3, #1
 801937c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019380:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019384:	bfa4      	itt	ge
 8019386:	4643      	movge	r3, r8
 8019388:	46a0      	movge	r8, r4
 801938a:	4630      	mov	r0, r6
 801938c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8019390:	bfa6      	itte	ge
 8019392:	461c      	movge	r4, r3
 8019394:	2500      	movge	r5, #0
 8019396:	2501      	movlt	r5, #1
 8019398:	f7ff fcf6 	bl	8018d88 <_Balloc>
 801939c:	b920      	cbnz	r0, 80193a8 <__mdiff+0x5c>
 801939e:	4b2e      	ldr	r3, [pc, #184]	; (8019458 <__mdiff+0x10c>)
 80193a0:	4602      	mov	r2, r0
 80193a2:	f240 2145 	movw	r1, #581	; 0x245
 80193a6:	e7e5      	b.n	8019374 <__mdiff+0x28>
 80193a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80193ac:	6926      	ldr	r6, [r4, #16]
 80193ae:	60c5      	str	r5, [r0, #12]
 80193b0:	f104 0914 	add.w	r9, r4, #20
 80193b4:	f108 0514 	add.w	r5, r8, #20
 80193b8:	f100 0e14 	add.w	lr, r0, #20
 80193bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80193c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80193c4:	f108 0210 	add.w	r2, r8, #16
 80193c8:	46f2      	mov	sl, lr
 80193ca:	2100      	movs	r1, #0
 80193cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80193d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80193d4:	fa11 f88b 	uxtah	r8, r1, fp
 80193d8:	b299      	uxth	r1, r3
 80193da:	0c1b      	lsrs	r3, r3, #16
 80193dc:	eba8 0801 	sub.w	r8, r8, r1
 80193e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80193e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80193e8:	fa1f f888 	uxth.w	r8, r8
 80193ec:	1419      	asrs	r1, r3, #16
 80193ee:	454e      	cmp	r6, r9
 80193f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80193f4:	f84a 3b04 	str.w	r3, [sl], #4
 80193f8:	d8e8      	bhi.n	80193cc <__mdiff+0x80>
 80193fa:	1b33      	subs	r3, r6, r4
 80193fc:	3b15      	subs	r3, #21
 80193fe:	f023 0303 	bic.w	r3, r3, #3
 8019402:	3304      	adds	r3, #4
 8019404:	3415      	adds	r4, #21
 8019406:	42a6      	cmp	r6, r4
 8019408:	bf38      	it	cc
 801940a:	2304      	movcc	r3, #4
 801940c:	441d      	add	r5, r3
 801940e:	4473      	add	r3, lr
 8019410:	469e      	mov	lr, r3
 8019412:	462e      	mov	r6, r5
 8019414:	4566      	cmp	r6, ip
 8019416:	d30e      	bcc.n	8019436 <__mdiff+0xea>
 8019418:	f10c 0203 	add.w	r2, ip, #3
 801941c:	1b52      	subs	r2, r2, r5
 801941e:	f022 0203 	bic.w	r2, r2, #3
 8019422:	3d03      	subs	r5, #3
 8019424:	45ac      	cmp	ip, r5
 8019426:	bf38      	it	cc
 8019428:	2200      	movcc	r2, #0
 801942a:	4413      	add	r3, r2
 801942c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8019430:	b17a      	cbz	r2, 8019452 <__mdiff+0x106>
 8019432:	6107      	str	r7, [r0, #16]
 8019434:	e7a4      	b.n	8019380 <__mdiff+0x34>
 8019436:	f856 8b04 	ldr.w	r8, [r6], #4
 801943a:	fa11 f288 	uxtah	r2, r1, r8
 801943e:	1414      	asrs	r4, r2, #16
 8019440:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8019444:	b292      	uxth	r2, r2
 8019446:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801944a:	f84e 2b04 	str.w	r2, [lr], #4
 801944e:	1421      	asrs	r1, r4, #16
 8019450:	e7e0      	b.n	8019414 <__mdiff+0xc8>
 8019452:	3f01      	subs	r7, #1
 8019454:	e7ea      	b.n	801942c <__mdiff+0xe0>
 8019456:	bf00      	nop
 8019458:	0801b831 	.word	0x0801b831
 801945c:	0801b8a2 	.word	0x0801b8a2

08019460 <__ulp>:
 8019460:	b082      	sub	sp, #8
 8019462:	ed8d 0b00 	vstr	d0, [sp]
 8019466:	9a01      	ldr	r2, [sp, #4]
 8019468:	4b0f      	ldr	r3, [pc, #60]	; (80194a8 <__ulp+0x48>)
 801946a:	4013      	ands	r3, r2
 801946c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8019470:	2b00      	cmp	r3, #0
 8019472:	dc08      	bgt.n	8019486 <__ulp+0x26>
 8019474:	425b      	negs	r3, r3
 8019476:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 801947a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801947e:	da04      	bge.n	801948a <__ulp+0x2a>
 8019480:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019484:	4113      	asrs	r3, r2
 8019486:	2200      	movs	r2, #0
 8019488:	e008      	b.n	801949c <__ulp+0x3c>
 801948a:	f1a2 0314 	sub.w	r3, r2, #20
 801948e:	2b1e      	cmp	r3, #30
 8019490:	bfda      	itte	le
 8019492:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8019496:	40da      	lsrle	r2, r3
 8019498:	2201      	movgt	r2, #1
 801949a:	2300      	movs	r3, #0
 801949c:	4619      	mov	r1, r3
 801949e:	4610      	mov	r0, r2
 80194a0:	ec41 0b10 	vmov	d0, r0, r1
 80194a4:	b002      	add	sp, #8
 80194a6:	4770      	bx	lr
 80194a8:	7ff00000 	.word	0x7ff00000

080194ac <__b2d>:
 80194ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194b0:	6906      	ldr	r6, [r0, #16]
 80194b2:	f100 0814 	add.w	r8, r0, #20
 80194b6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80194ba:	1f37      	subs	r7, r6, #4
 80194bc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80194c0:	4610      	mov	r0, r2
 80194c2:	f7ff fd53 	bl	8018f6c <__hi0bits>
 80194c6:	f1c0 0320 	rsb	r3, r0, #32
 80194ca:	280a      	cmp	r0, #10
 80194cc:	600b      	str	r3, [r1, #0]
 80194ce:	491b      	ldr	r1, [pc, #108]	; (801953c <__b2d+0x90>)
 80194d0:	dc15      	bgt.n	80194fe <__b2d+0x52>
 80194d2:	f1c0 0c0b 	rsb	ip, r0, #11
 80194d6:	fa22 f30c 	lsr.w	r3, r2, ip
 80194da:	45b8      	cmp	r8, r7
 80194dc:	ea43 0501 	orr.w	r5, r3, r1
 80194e0:	bf34      	ite	cc
 80194e2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80194e6:	2300      	movcs	r3, #0
 80194e8:	3015      	adds	r0, #21
 80194ea:	fa02 f000 	lsl.w	r0, r2, r0
 80194ee:	fa23 f30c 	lsr.w	r3, r3, ip
 80194f2:	4303      	orrs	r3, r0
 80194f4:	461c      	mov	r4, r3
 80194f6:	ec45 4b10 	vmov	d0, r4, r5
 80194fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80194fe:	45b8      	cmp	r8, r7
 8019500:	bf3a      	itte	cc
 8019502:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8019506:	f1a6 0708 	subcc.w	r7, r6, #8
 801950a:	2300      	movcs	r3, #0
 801950c:	380b      	subs	r0, #11
 801950e:	d012      	beq.n	8019536 <__b2d+0x8a>
 8019510:	f1c0 0120 	rsb	r1, r0, #32
 8019514:	fa23 f401 	lsr.w	r4, r3, r1
 8019518:	4082      	lsls	r2, r0
 801951a:	4322      	orrs	r2, r4
 801951c:	4547      	cmp	r7, r8
 801951e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8019522:	bf8c      	ite	hi
 8019524:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8019528:	2200      	movls	r2, #0
 801952a:	4083      	lsls	r3, r0
 801952c:	40ca      	lsrs	r2, r1
 801952e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8019532:	4313      	orrs	r3, r2
 8019534:	e7de      	b.n	80194f4 <__b2d+0x48>
 8019536:	ea42 0501 	orr.w	r5, r2, r1
 801953a:	e7db      	b.n	80194f4 <__b2d+0x48>
 801953c:	3ff00000 	.word	0x3ff00000

08019540 <__d2b>:
 8019540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019544:	460f      	mov	r7, r1
 8019546:	2101      	movs	r1, #1
 8019548:	ec59 8b10 	vmov	r8, r9, d0
 801954c:	4616      	mov	r6, r2
 801954e:	f7ff fc1b 	bl	8018d88 <_Balloc>
 8019552:	4604      	mov	r4, r0
 8019554:	b930      	cbnz	r0, 8019564 <__d2b+0x24>
 8019556:	4602      	mov	r2, r0
 8019558:	4b24      	ldr	r3, [pc, #144]	; (80195ec <__d2b+0xac>)
 801955a:	4825      	ldr	r0, [pc, #148]	; (80195f0 <__d2b+0xb0>)
 801955c:	f240 310f 	movw	r1, #783	; 0x30f
 8019560:	f000 fafc 	bl	8019b5c <__assert_func>
 8019564:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8019568:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801956c:	bb2d      	cbnz	r5, 80195ba <__d2b+0x7a>
 801956e:	9301      	str	r3, [sp, #4]
 8019570:	f1b8 0300 	subs.w	r3, r8, #0
 8019574:	d026      	beq.n	80195c4 <__d2b+0x84>
 8019576:	4668      	mov	r0, sp
 8019578:	9300      	str	r3, [sp, #0]
 801957a:	f7ff fd17 	bl	8018fac <__lo0bits>
 801957e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8019582:	b1e8      	cbz	r0, 80195c0 <__d2b+0x80>
 8019584:	f1c0 0320 	rsb	r3, r0, #32
 8019588:	fa02 f303 	lsl.w	r3, r2, r3
 801958c:	430b      	orrs	r3, r1
 801958e:	40c2      	lsrs	r2, r0
 8019590:	6163      	str	r3, [r4, #20]
 8019592:	9201      	str	r2, [sp, #4]
 8019594:	9b01      	ldr	r3, [sp, #4]
 8019596:	61a3      	str	r3, [r4, #24]
 8019598:	2b00      	cmp	r3, #0
 801959a:	bf14      	ite	ne
 801959c:	2202      	movne	r2, #2
 801959e:	2201      	moveq	r2, #1
 80195a0:	6122      	str	r2, [r4, #16]
 80195a2:	b1bd      	cbz	r5, 80195d4 <__d2b+0x94>
 80195a4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80195a8:	4405      	add	r5, r0
 80195aa:	603d      	str	r5, [r7, #0]
 80195ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80195b0:	6030      	str	r0, [r6, #0]
 80195b2:	4620      	mov	r0, r4
 80195b4:	b003      	add	sp, #12
 80195b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80195ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80195be:	e7d6      	b.n	801956e <__d2b+0x2e>
 80195c0:	6161      	str	r1, [r4, #20]
 80195c2:	e7e7      	b.n	8019594 <__d2b+0x54>
 80195c4:	a801      	add	r0, sp, #4
 80195c6:	f7ff fcf1 	bl	8018fac <__lo0bits>
 80195ca:	9b01      	ldr	r3, [sp, #4]
 80195cc:	6163      	str	r3, [r4, #20]
 80195ce:	3020      	adds	r0, #32
 80195d0:	2201      	movs	r2, #1
 80195d2:	e7e5      	b.n	80195a0 <__d2b+0x60>
 80195d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80195d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80195dc:	6038      	str	r0, [r7, #0]
 80195de:	6918      	ldr	r0, [r3, #16]
 80195e0:	f7ff fcc4 	bl	8018f6c <__hi0bits>
 80195e4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80195e8:	e7e2      	b.n	80195b0 <__d2b+0x70>
 80195ea:	bf00      	nop
 80195ec:	0801b831 	.word	0x0801b831
 80195f0:	0801b8a2 	.word	0x0801b8a2

080195f4 <__ratio>:
 80195f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195f8:	4688      	mov	r8, r1
 80195fa:	4669      	mov	r1, sp
 80195fc:	4681      	mov	r9, r0
 80195fe:	f7ff ff55 	bl	80194ac <__b2d>
 8019602:	a901      	add	r1, sp, #4
 8019604:	4640      	mov	r0, r8
 8019606:	ec55 4b10 	vmov	r4, r5, d0
 801960a:	f7ff ff4f 	bl	80194ac <__b2d>
 801960e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019612:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019616:	eba3 0c02 	sub.w	ip, r3, r2
 801961a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801961e:	1a9b      	subs	r3, r3, r2
 8019620:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8019624:	ec51 0b10 	vmov	r0, r1, d0
 8019628:	2b00      	cmp	r3, #0
 801962a:	bfd6      	itet	le
 801962c:	460a      	movle	r2, r1
 801962e:	462a      	movgt	r2, r5
 8019630:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8019634:	468b      	mov	fp, r1
 8019636:	462f      	mov	r7, r5
 8019638:	bfd4      	ite	le
 801963a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801963e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8019642:	4620      	mov	r0, r4
 8019644:	ee10 2a10 	vmov	r2, s0
 8019648:	465b      	mov	r3, fp
 801964a:	4639      	mov	r1, r7
 801964c:	f7e7 f8fe 	bl	800084c <__aeabi_ddiv>
 8019650:	ec41 0b10 	vmov	d0, r0, r1
 8019654:	b003      	add	sp, #12
 8019656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801965a <__copybits>:
 801965a:	3901      	subs	r1, #1
 801965c:	b570      	push	{r4, r5, r6, lr}
 801965e:	1149      	asrs	r1, r1, #5
 8019660:	6914      	ldr	r4, [r2, #16]
 8019662:	3101      	adds	r1, #1
 8019664:	f102 0314 	add.w	r3, r2, #20
 8019668:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801966c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019670:	1f05      	subs	r5, r0, #4
 8019672:	42a3      	cmp	r3, r4
 8019674:	d30c      	bcc.n	8019690 <__copybits+0x36>
 8019676:	1aa3      	subs	r3, r4, r2
 8019678:	3b11      	subs	r3, #17
 801967a:	f023 0303 	bic.w	r3, r3, #3
 801967e:	3211      	adds	r2, #17
 8019680:	42a2      	cmp	r2, r4
 8019682:	bf88      	it	hi
 8019684:	2300      	movhi	r3, #0
 8019686:	4418      	add	r0, r3
 8019688:	2300      	movs	r3, #0
 801968a:	4288      	cmp	r0, r1
 801968c:	d305      	bcc.n	801969a <__copybits+0x40>
 801968e:	bd70      	pop	{r4, r5, r6, pc}
 8019690:	f853 6b04 	ldr.w	r6, [r3], #4
 8019694:	f845 6f04 	str.w	r6, [r5, #4]!
 8019698:	e7eb      	b.n	8019672 <__copybits+0x18>
 801969a:	f840 3b04 	str.w	r3, [r0], #4
 801969e:	e7f4      	b.n	801968a <__copybits+0x30>

080196a0 <__any_on>:
 80196a0:	f100 0214 	add.w	r2, r0, #20
 80196a4:	6900      	ldr	r0, [r0, #16]
 80196a6:	114b      	asrs	r3, r1, #5
 80196a8:	4298      	cmp	r0, r3
 80196aa:	b510      	push	{r4, lr}
 80196ac:	db11      	blt.n	80196d2 <__any_on+0x32>
 80196ae:	dd0a      	ble.n	80196c6 <__any_on+0x26>
 80196b0:	f011 011f 	ands.w	r1, r1, #31
 80196b4:	d007      	beq.n	80196c6 <__any_on+0x26>
 80196b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80196ba:	fa24 f001 	lsr.w	r0, r4, r1
 80196be:	fa00 f101 	lsl.w	r1, r0, r1
 80196c2:	428c      	cmp	r4, r1
 80196c4:	d10b      	bne.n	80196de <__any_on+0x3e>
 80196c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80196ca:	4293      	cmp	r3, r2
 80196cc:	d803      	bhi.n	80196d6 <__any_on+0x36>
 80196ce:	2000      	movs	r0, #0
 80196d0:	bd10      	pop	{r4, pc}
 80196d2:	4603      	mov	r3, r0
 80196d4:	e7f7      	b.n	80196c6 <__any_on+0x26>
 80196d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80196da:	2900      	cmp	r1, #0
 80196dc:	d0f5      	beq.n	80196ca <__any_on+0x2a>
 80196de:	2001      	movs	r0, #1
 80196e0:	e7f6      	b.n	80196d0 <__any_on+0x30>

080196e2 <__ascii_wctomb>:
 80196e2:	b149      	cbz	r1, 80196f8 <__ascii_wctomb+0x16>
 80196e4:	2aff      	cmp	r2, #255	; 0xff
 80196e6:	bf85      	ittet	hi
 80196e8:	238a      	movhi	r3, #138	; 0x8a
 80196ea:	6003      	strhi	r3, [r0, #0]
 80196ec:	700a      	strbls	r2, [r1, #0]
 80196ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80196f2:	bf98      	it	ls
 80196f4:	2001      	movls	r0, #1
 80196f6:	4770      	bx	lr
 80196f8:	4608      	mov	r0, r1
 80196fa:	4770      	bx	lr

080196fc <__ssputs_r>:
 80196fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019700:	688e      	ldr	r6, [r1, #8]
 8019702:	461f      	mov	r7, r3
 8019704:	42be      	cmp	r6, r7
 8019706:	680b      	ldr	r3, [r1, #0]
 8019708:	4682      	mov	sl, r0
 801970a:	460c      	mov	r4, r1
 801970c:	4690      	mov	r8, r2
 801970e:	d82c      	bhi.n	801976a <__ssputs_r+0x6e>
 8019710:	898a      	ldrh	r2, [r1, #12]
 8019712:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019716:	d026      	beq.n	8019766 <__ssputs_r+0x6a>
 8019718:	6965      	ldr	r5, [r4, #20]
 801971a:	6909      	ldr	r1, [r1, #16]
 801971c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019720:	eba3 0901 	sub.w	r9, r3, r1
 8019724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019728:	1c7b      	adds	r3, r7, #1
 801972a:	444b      	add	r3, r9
 801972c:	106d      	asrs	r5, r5, #1
 801972e:	429d      	cmp	r5, r3
 8019730:	bf38      	it	cc
 8019732:	461d      	movcc	r5, r3
 8019734:	0553      	lsls	r3, r2, #21
 8019736:	d527      	bpl.n	8019788 <__ssputs_r+0x8c>
 8019738:	4629      	mov	r1, r5
 801973a:	f7ff fa87 	bl	8018c4c <_malloc_r>
 801973e:	4606      	mov	r6, r0
 8019740:	b360      	cbz	r0, 801979c <__ssputs_r+0xa0>
 8019742:	6921      	ldr	r1, [r4, #16]
 8019744:	464a      	mov	r2, r9
 8019746:	f7fe f822 	bl	801778e <memcpy>
 801974a:	89a3      	ldrh	r3, [r4, #12]
 801974c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019754:	81a3      	strh	r3, [r4, #12]
 8019756:	6126      	str	r6, [r4, #16]
 8019758:	6165      	str	r5, [r4, #20]
 801975a:	444e      	add	r6, r9
 801975c:	eba5 0509 	sub.w	r5, r5, r9
 8019760:	6026      	str	r6, [r4, #0]
 8019762:	60a5      	str	r5, [r4, #8]
 8019764:	463e      	mov	r6, r7
 8019766:	42be      	cmp	r6, r7
 8019768:	d900      	bls.n	801976c <__ssputs_r+0x70>
 801976a:	463e      	mov	r6, r7
 801976c:	6820      	ldr	r0, [r4, #0]
 801976e:	4632      	mov	r2, r6
 8019770:	4641      	mov	r1, r8
 8019772:	f000 f9c9 	bl	8019b08 <memmove>
 8019776:	68a3      	ldr	r3, [r4, #8]
 8019778:	1b9b      	subs	r3, r3, r6
 801977a:	60a3      	str	r3, [r4, #8]
 801977c:	6823      	ldr	r3, [r4, #0]
 801977e:	4433      	add	r3, r6
 8019780:	6023      	str	r3, [r4, #0]
 8019782:	2000      	movs	r0, #0
 8019784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019788:	462a      	mov	r2, r5
 801978a:	f000 fa1b 	bl	8019bc4 <_realloc_r>
 801978e:	4606      	mov	r6, r0
 8019790:	2800      	cmp	r0, #0
 8019792:	d1e0      	bne.n	8019756 <__ssputs_r+0x5a>
 8019794:	6921      	ldr	r1, [r4, #16]
 8019796:	4650      	mov	r0, sl
 8019798:	f7fe fe8c 	bl	80184b4 <_free_r>
 801979c:	230c      	movs	r3, #12
 801979e:	f8ca 3000 	str.w	r3, [sl]
 80197a2:	89a3      	ldrh	r3, [r4, #12]
 80197a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197a8:	81a3      	strh	r3, [r4, #12]
 80197aa:	f04f 30ff 	mov.w	r0, #4294967295
 80197ae:	e7e9      	b.n	8019784 <__ssputs_r+0x88>

080197b0 <_svfiprintf_r>:
 80197b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b4:	4698      	mov	r8, r3
 80197b6:	898b      	ldrh	r3, [r1, #12]
 80197b8:	061b      	lsls	r3, r3, #24
 80197ba:	b09d      	sub	sp, #116	; 0x74
 80197bc:	4607      	mov	r7, r0
 80197be:	460d      	mov	r5, r1
 80197c0:	4614      	mov	r4, r2
 80197c2:	d50e      	bpl.n	80197e2 <_svfiprintf_r+0x32>
 80197c4:	690b      	ldr	r3, [r1, #16]
 80197c6:	b963      	cbnz	r3, 80197e2 <_svfiprintf_r+0x32>
 80197c8:	2140      	movs	r1, #64	; 0x40
 80197ca:	f7ff fa3f 	bl	8018c4c <_malloc_r>
 80197ce:	6028      	str	r0, [r5, #0]
 80197d0:	6128      	str	r0, [r5, #16]
 80197d2:	b920      	cbnz	r0, 80197de <_svfiprintf_r+0x2e>
 80197d4:	230c      	movs	r3, #12
 80197d6:	603b      	str	r3, [r7, #0]
 80197d8:	f04f 30ff 	mov.w	r0, #4294967295
 80197dc:	e0d0      	b.n	8019980 <_svfiprintf_r+0x1d0>
 80197de:	2340      	movs	r3, #64	; 0x40
 80197e0:	616b      	str	r3, [r5, #20]
 80197e2:	2300      	movs	r3, #0
 80197e4:	9309      	str	r3, [sp, #36]	; 0x24
 80197e6:	2320      	movs	r3, #32
 80197e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80197ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80197f0:	2330      	movs	r3, #48	; 0x30
 80197f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8019998 <_svfiprintf_r+0x1e8>
 80197f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80197fa:	f04f 0901 	mov.w	r9, #1
 80197fe:	4623      	mov	r3, r4
 8019800:	469a      	mov	sl, r3
 8019802:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019806:	b10a      	cbz	r2, 801980c <_svfiprintf_r+0x5c>
 8019808:	2a25      	cmp	r2, #37	; 0x25
 801980a:	d1f9      	bne.n	8019800 <_svfiprintf_r+0x50>
 801980c:	ebba 0b04 	subs.w	fp, sl, r4
 8019810:	d00b      	beq.n	801982a <_svfiprintf_r+0x7a>
 8019812:	465b      	mov	r3, fp
 8019814:	4622      	mov	r2, r4
 8019816:	4629      	mov	r1, r5
 8019818:	4638      	mov	r0, r7
 801981a:	f7ff ff6f 	bl	80196fc <__ssputs_r>
 801981e:	3001      	adds	r0, #1
 8019820:	f000 80a9 	beq.w	8019976 <_svfiprintf_r+0x1c6>
 8019824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019826:	445a      	add	r2, fp
 8019828:	9209      	str	r2, [sp, #36]	; 0x24
 801982a:	f89a 3000 	ldrb.w	r3, [sl]
 801982e:	2b00      	cmp	r3, #0
 8019830:	f000 80a1 	beq.w	8019976 <_svfiprintf_r+0x1c6>
 8019834:	2300      	movs	r3, #0
 8019836:	f04f 32ff 	mov.w	r2, #4294967295
 801983a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801983e:	f10a 0a01 	add.w	sl, sl, #1
 8019842:	9304      	str	r3, [sp, #16]
 8019844:	9307      	str	r3, [sp, #28]
 8019846:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801984a:	931a      	str	r3, [sp, #104]	; 0x68
 801984c:	4654      	mov	r4, sl
 801984e:	2205      	movs	r2, #5
 8019850:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019854:	4850      	ldr	r0, [pc, #320]	; (8019998 <_svfiprintf_r+0x1e8>)
 8019856:	f7e6 fcbb 	bl	80001d0 <memchr>
 801985a:	9a04      	ldr	r2, [sp, #16]
 801985c:	b9d8      	cbnz	r0, 8019896 <_svfiprintf_r+0xe6>
 801985e:	06d0      	lsls	r0, r2, #27
 8019860:	bf44      	itt	mi
 8019862:	2320      	movmi	r3, #32
 8019864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019868:	0711      	lsls	r1, r2, #28
 801986a:	bf44      	itt	mi
 801986c:	232b      	movmi	r3, #43	; 0x2b
 801986e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019872:	f89a 3000 	ldrb.w	r3, [sl]
 8019876:	2b2a      	cmp	r3, #42	; 0x2a
 8019878:	d015      	beq.n	80198a6 <_svfiprintf_r+0xf6>
 801987a:	9a07      	ldr	r2, [sp, #28]
 801987c:	4654      	mov	r4, sl
 801987e:	2000      	movs	r0, #0
 8019880:	f04f 0c0a 	mov.w	ip, #10
 8019884:	4621      	mov	r1, r4
 8019886:	f811 3b01 	ldrb.w	r3, [r1], #1
 801988a:	3b30      	subs	r3, #48	; 0x30
 801988c:	2b09      	cmp	r3, #9
 801988e:	d94d      	bls.n	801992c <_svfiprintf_r+0x17c>
 8019890:	b1b0      	cbz	r0, 80198c0 <_svfiprintf_r+0x110>
 8019892:	9207      	str	r2, [sp, #28]
 8019894:	e014      	b.n	80198c0 <_svfiprintf_r+0x110>
 8019896:	eba0 0308 	sub.w	r3, r0, r8
 801989a:	fa09 f303 	lsl.w	r3, r9, r3
 801989e:	4313      	orrs	r3, r2
 80198a0:	9304      	str	r3, [sp, #16]
 80198a2:	46a2      	mov	sl, r4
 80198a4:	e7d2      	b.n	801984c <_svfiprintf_r+0x9c>
 80198a6:	9b03      	ldr	r3, [sp, #12]
 80198a8:	1d19      	adds	r1, r3, #4
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	9103      	str	r1, [sp, #12]
 80198ae:	2b00      	cmp	r3, #0
 80198b0:	bfbb      	ittet	lt
 80198b2:	425b      	neglt	r3, r3
 80198b4:	f042 0202 	orrlt.w	r2, r2, #2
 80198b8:	9307      	strge	r3, [sp, #28]
 80198ba:	9307      	strlt	r3, [sp, #28]
 80198bc:	bfb8      	it	lt
 80198be:	9204      	strlt	r2, [sp, #16]
 80198c0:	7823      	ldrb	r3, [r4, #0]
 80198c2:	2b2e      	cmp	r3, #46	; 0x2e
 80198c4:	d10c      	bne.n	80198e0 <_svfiprintf_r+0x130>
 80198c6:	7863      	ldrb	r3, [r4, #1]
 80198c8:	2b2a      	cmp	r3, #42	; 0x2a
 80198ca:	d134      	bne.n	8019936 <_svfiprintf_r+0x186>
 80198cc:	9b03      	ldr	r3, [sp, #12]
 80198ce:	1d1a      	adds	r2, r3, #4
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	9203      	str	r2, [sp, #12]
 80198d4:	2b00      	cmp	r3, #0
 80198d6:	bfb8      	it	lt
 80198d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80198dc:	3402      	adds	r4, #2
 80198de:	9305      	str	r3, [sp, #20]
 80198e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80199a8 <_svfiprintf_r+0x1f8>
 80198e4:	7821      	ldrb	r1, [r4, #0]
 80198e6:	2203      	movs	r2, #3
 80198e8:	4650      	mov	r0, sl
 80198ea:	f7e6 fc71 	bl	80001d0 <memchr>
 80198ee:	b138      	cbz	r0, 8019900 <_svfiprintf_r+0x150>
 80198f0:	9b04      	ldr	r3, [sp, #16]
 80198f2:	eba0 000a 	sub.w	r0, r0, sl
 80198f6:	2240      	movs	r2, #64	; 0x40
 80198f8:	4082      	lsls	r2, r0
 80198fa:	4313      	orrs	r3, r2
 80198fc:	3401      	adds	r4, #1
 80198fe:	9304      	str	r3, [sp, #16]
 8019900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019904:	4825      	ldr	r0, [pc, #148]	; (801999c <_svfiprintf_r+0x1ec>)
 8019906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801990a:	2206      	movs	r2, #6
 801990c:	f7e6 fc60 	bl	80001d0 <memchr>
 8019910:	2800      	cmp	r0, #0
 8019912:	d038      	beq.n	8019986 <_svfiprintf_r+0x1d6>
 8019914:	4b22      	ldr	r3, [pc, #136]	; (80199a0 <_svfiprintf_r+0x1f0>)
 8019916:	bb1b      	cbnz	r3, 8019960 <_svfiprintf_r+0x1b0>
 8019918:	9b03      	ldr	r3, [sp, #12]
 801991a:	3307      	adds	r3, #7
 801991c:	f023 0307 	bic.w	r3, r3, #7
 8019920:	3308      	adds	r3, #8
 8019922:	9303      	str	r3, [sp, #12]
 8019924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019926:	4433      	add	r3, r6
 8019928:	9309      	str	r3, [sp, #36]	; 0x24
 801992a:	e768      	b.n	80197fe <_svfiprintf_r+0x4e>
 801992c:	fb0c 3202 	mla	r2, ip, r2, r3
 8019930:	460c      	mov	r4, r1
 8019932:	2001      	movs	r0, #1
 8019934:	e7a6      	b.n	8019884 <_svfiprintf_r+0xd4>
 8019936:	2300      	movs	r3, #0
 8019938:	3401      	adds	r4, #1
 801993a:	9305      	str	r3, [sp, #20]
 801993c:	4619      	mov	r1, r3
 801993e:	f04f 0c0a 	mov.w	ip, #10
 8019942:	4620      	mov	r0, r4
 8019944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019948:	3a30      	subs	r2, #48	; 0x30
 801994a:	2a09      	cmp	r2, #9
 801994c:	d903      	bls.n	8019956 <_svfiprintf_r+0x1a6>
 801994e:	2b00      	cmp	r3, #0
 8019950:	d0c6      	beq.n	80198e0 <_svfiprintf_r+0x130>
 8019952:	9105      	str	r1, [sp, #20]
 8019954:	e7c4      	b.n	80198e0 <_svfiprintf_r+0x130>
 8019956:	fb0c 2101 	mla	r1, ip, r1, r2
 801995a:	4604      	mov	r4, r0
 801995c:	2301      	movs	r3, #1
 801995e:	e7f0      	b.n	8019942 <_svfiprintf_r+0x192>
 8019960:	ab03      	add	r3, sp, #12
 8019962:	9300      	str	r3, [sp, #0]
 8019964:	462a      	mov	r2, r5
 8019966:	4b0f      	ldr	r3, [pc, #60]	; (80199a4 <_svfiprintf_r+0x1f4>)
 8019968:	a904      	add	r1, sp, #16
 801996a:	4638      	mov	r0, r7
 801996c:	f7fd f93c 	bl	8016be8 <_printf_float>
 8019970:	1c42      	adds	r2, r0, #1
 8019972:	4606      	mov	r6, r0
 8019974:	d1d6      	bne.n	8019924 <_svfiprintf_r+0x174>
 8019976:	89ab      	ldrh	r3, [r5, #12]
 8019978:	065b      	lsls	r3, r3, #25
 801997a:	f53f af2d 	bmi.w	80197d8 <_svfiprintf_r+0x28>
 801997e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019980:	b01d      	add	sp, #116	; 0x74
 8019982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019986:	ab03      	add	r3, sp, #12
 8019988:	9300      	str	r3, [sp, #0]
 801998a:	462a      	mov	r2, r5
 801998c:	4b05      	ldr	r3, [pc, #20]	; (80199a4 <_svfiprintf_r+0x1f4>)
 801998e:	a904      	add	r1, sp, #16
 8019990:	4638      	mov	r0, r7
 8019992:	f7fd fbcd 	bl	8017130 <_printf_i>
 8019996:	e7eb      	b.n	8019970 <_svfiprintf_r+0x1c0>
 8019998:	0801b9fc 	.word	0x0801b9fc
 801999c:	0801ba06 	.word	0x0801ba06
 80199a0:	08016be9 	.word	0x08016be9
 80199a4:	080196fd 	.word	0x080196fd
 80199a8:	0801ba02 	.word	0x0801ba02

080199ac <__sflush_r>:
 80199ac:	898a      	ldrh	r2, [r1, #12]
 80199ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199b2:	4605      	mov	r5, r0
 80199b4:	0710      	lsls	r0, r2, #28
 80199b6:	460c      	mov	r4, r1
 80199b8:	d458      	bmi.n	8019a6c <__sflush_r+0xc0>
 80199ba:	684b      	ldr	r3, [r1, #4]
 80199bc:	2b00      	cmp	r3, #0
 80199be:	dc05      	bgt.n	80199cc <__sflush_r+0x20>
 80199c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	dc02      	bgt.n	80199cc <__sflush_r+0x20>
 80199c6:	2000      	movs	r0, #0
 80199c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80199cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199ce:	2e00      	cmp	r6, #0
 80199d0:	d0f9      	beq.n	80199c6 <__sflush_r+0x1a>
 80199d2:	2300      	movs	r3, #0
 80199d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80199d8:	682f      	ldr	r7, [r5, #0]
 80199da:	6a21      	ldr	r1, [r4, #32]
 80199dc:	602b      	str	r3, [r5, #0]
 80199de:	d032      	beq.n	8019a46 <__sflush_r+0x9a>
 80199e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80199e2:	89a3      	ldrh	r3, [r4, #12]
 80199e4:	075a      	lsls	r2, r3, #29
 80199e6:	d505      	bpl.n	80199f4 <__sflush_r+0x48>
 80199e8:	6863      	ldr	r3, [r4, #4]
 80199ea:	1ac0      	subs	r0, r0, r3
 80199ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80199ee:	b10b      	cbz	r3, 80199f4 <__sflush_r+0x48>
 80199f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80199f2:	1ac0      	subs	r0, r0, r3
 80199f4:	2300      	movs	r3, #0
 80199f6:	4602      	mov	r2, r0
 80199f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80199fa:	6a21      	ldr	r1, [r4, #32]
 80199fc:	4628      	mov	r0, r5
 80199fe:	47b0      	blx	r6
 8019a00:	1c43      	adds	r3, r0, #1
 8019a02:	89a3      	ldrh	r3, [r4, #12]
 8019a04:	d106      	bne.n	8019a14 <__sflush_r+0x68>
 8019a06:	6829      	ldr	r1, [r5, #0]
 8019a08:	291d      	cmp	r1, #29
 8019a0a:	d82b      	bhi.n	8019a64 <__sflush_r+0xb8>
 8019a0c:	4a29      	ldr	r2, [pc, #164]	; (8019ab4 <__sflush_r+0x108>)
 8019a0e:	410a      	asrs	r2, r1
 8019a10:	07d6      	lsls	r6, r2, #31
 8019a12:	d427      	bmi.n	8019a64 <__sflush_r+0xb8>
 8019a14:	2200      	movs	r2, #0
 8019a16:	6062      	str	r2, [r4, #4]
 8019a18:	04d9      	lsls	r1, r3, #19
 8019a1a:	6922      	ldr	r2, [r4, #16]
 8019a1c:	6022      	str	r2, [r4, #0]
 8019a1e:	d504      	bpl.n	8019a2a <__sflush_r+0x7e>
 8019a20:	1c42      	adds	r2, r0, #1
 8019a22:	d101      	bne.n	8019a28 <__sflush_r+0x7c>
 8019a24:	682b      	ldr	r3, [r5, #0]
 8019a26:	b903      	cbnz	r3, 8019a2a <__sflush_r+0x7e>
 8019a28:	6560      	str	r0, [r4, #84]	; 0x54
 8019a2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019a2c:	602f      	str	r7, [r5, #0]
 8019a2e:	2900      	cmp	r1, #0
 8019a30:	d0c9      	beq.n	80199c6 <__sflush_r+0x1a>
 8019a32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019a36:	4299      	cmp	r1, r3
 8019a38:	d002      	beq.n	8019a40 <__sflush_r+0x94>
 8019a3a:	4628      	mov	r0, r5
 8019a3c:	f7fe fd3a 	bl	80184b4 <_free_r>
 8019a40:	2000      	movs	r0, #0
 8019a42:	6360      	str	r0, [r4, #52]	; 0x34
 8019a44:	e7c0      	b.n	80199c8 <__sflush_r+0x1c>
 8019a46:	2301      	movs	r3, #1
 8019a48:	4628      	mov	r0, r5
 8019a4a:	47b0      	blx	r6
 8019a4c:	1c41      	adds	r1, r0, #1
 8019a4e:	d1c8      	bne.n	80199e2 <__sflush_r+0x36>
 8019a50:	682b      	ldr	r3, [r5, #0]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d0c5      	beq.n	80199e2 <__sflush_r+0x36>
 8019a56:	2b1d      	cmp	r3, #29
 8019a58:	d001      	beq.n	8019a5e <__sflush_r+0xb2>
 8019a5a:	2b16      	cmp	r3, #22
 8019a5c:	d101      	bne.n	8019a62 <__sflush_r+0xb6>
 8019a5e:	602f      	str	r7, [r5, #0]
 8019a60:	e7b1      	b.n	80199c6 <__sflush_r+0x1a>
 8019a62:	89a3      	ldrh	r3, [r4, #12]
 8019a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a68:	81a3      	strh	r3, [r4, #12]
 8019a6a:	e7ad      	b.n	80199c8 <__sflush_r+0x1c>
 8019a6c:	690f      	ldr	r7, [r1, #16]
 8019a6e:	2f00      	cmp	r7, #0
 8019a70:	d0a9      	beq.n	80199c6 <__sflush_r+0x1a>
 8019a72:	0793      	lsls	r3, r2, #30
 8019a74:	680e      	ldr	r6, [r1, #0]
 8019a76:	bf08      	it	eq
 8019a78:	694b      	ldreq	r3, [r1, #20]
 8019a7a:	600f      	str	r7, [r1, #0]
 8019a7c:	bf18      	it	ne
 8019a7e:	2300      	movne	r3, #0
 8019a80:	eba6 0807 	sub.w	r8, r6, r7
 8019a84:	608b      	str	r3, [r1, #8]
 8019a86:	f1b8 0f00 	cmp.w	r8, #0
 8019a8a:	dd9c      	ble.n	80199c6 <__sflush_r+0x1a>
 8019a8c:	6a21      	ldr	r1, [r4, #32]
 8019a8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8019a90:	4643      	mov	r3, r8
 8019a92:	463a      	mov	r2, r7
 8019a94:	4628      	mov	r0, r5
 8019a96:	47b0      	blx	r6
 8019a98:	2800      	cmp	r0, #0
 8019a9a:	dc06      	bgt.n	8019aaa <__sflush_r+0xfe>
 8019a9c:	89a3      	ldrh	r3, [r4, #12]
 8019a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019aa2:	81a3      	strh	r3, [r4, #12]
 8019aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8019aa8:	e78e      	b.n	80199c8 <__sflush_r+0x1c>
 8019aaa:	4407      	add	r7, r0
 8019aac:	eba8 0800 	sub.w	r8, r8, r0
 8019ab0:	e7e9      	b.n	8019a86 <__sflush_r+0xda>
 8019ab2:	bf00      	nop
 8019ab4:	dfbffffe 	.word	0xdfbffffe

08019ab8 <_fflush_r>:
 8019ab8:	b538      	push	{r3, r4, r5, lr}
 8019aba:	690b      	ldr	r3, [r1, #16]
 8019abc:	4605      	mov	r5, r0
 8019abe:	460c      	mov	r4, r1
 8019ac0:	b913      	cbnz	r3, 8019ac8 <_fflush_r+0x10>
 8019ac2:	2500      	movs	r5, #0
 8019ac4:	4628      	mov	r0, r5
 8019ac6:	bd38      	pop	{r3, r4, r5, pc}
 8019ac8:	b118      	cbz	r0, 8019ad2 <_fflush_r+0x1a>
 8019aca:	6a03      	ldr	r3, [r0, #32]
 8019acc:	b90b      	cbnz	r3, 8019ad2 <_fflush_r+0x1a>
 8019ace:	f7fd fcdd 	bl	801748c <__sinit>
 8019ad2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019ad6:	2b00      	cmp	r3, #0
 8019ad8:	d0f3      	beq.n	8019ac2 <_fflush_r+0xa>
 8019ada:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019adc:	07d0      	lsls	r0, r2, #31
 8019ade:	d404      	bmi.n	8019aea <_fflush_r+0x32>
 8019ae0:	0599      	lsls	r1, r3, #22
 8019ae2:	d402      	bmi.n	8019aea <_fflush_r+0x32>
 8019ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019ae6:	f7fd fe50 	bl	801778a <__retarget_lock_acquire_recursive>
 8019aea:	4628      	mov	r0, r5
 8019aec:	4621      	mov	r1, r4
 8019aee:	f7ff ff5d 	bl	80199ac <__sflush_r>
 8019af2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019af4:	07da      	lsls	r2, r3, #31
 8019af6:	4605      	mov	r5, r0
 8019af8:	d4e4      	bmi.n	8019ac4 <_fflush_r+0xc>
 8019afa:	89a3      	ldrh	r3, [r4, #12]
 8019afc:	059b      	lsls	r3, r3, #22
 8019afe:	d4e1      	bmi.n	8019ac4 <_fflush_r+0xc>
 8019b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019b02:	f7fd fe43 	bl	801778c <__retarget_lock_release_recursive>
 8019b06:	e7dd      	b.n	8019ac4 <_fflush_r+0xc>

08019b08 <memmove>:
 8019b08:	4288      	cmp	r0, r1
 8019b0a:	b510      	push	{r4, lr}
 8019b0c:	eb01 0402 	add.w	r4, r1, r2
 8019b10:	d902      	bls.n	8019b18 <memmove+0x10>
 8019b12:	4284      	cmp	r4, r0
 8019b14:	4623      	mov	r3, r4
 8019b16:	d807      	bhi.n	8019b28 <memmove+0x20>
 8019b18:	1e43      	subs	r3, r0, #1
 8019b1a:	42a1      	cmp	r1, r4
 8019b1c:	d008      	beq.n	8019b30 <memmove+0x28>
 8019b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019b26:	e7f8      	b.n	8019b1a <memmove+0x12>
 8019b28:	4402      	add	r2, r0
 8019b2a:	4601      	mov	r1, r0
 8019b2c:	428a      	cmp	r2, r1
 8019b2e:	d100      	bne.n	8019b32 <memmove+0x2a>
 8019b30:	bd10      	pop	{r4, pc}
 8019b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019b3a:	e7f7      	b.n	8019b2c <memmove+0x24>

08019b3c <_sbrk_r>:
 8019b3c:	b538      	push	{r3, r4, r5, lr}
 8019b3e:	4d06      	ldr	r5, [pc, #24]	; (8019b58 <_sbrk_r+0x1c>)
 8019b40:	2300      	movs	r3, #0
 8019b42:	4604      	mov	r4, r0
 8019b44:	4608      	mov	r0, r1
 8019b46:	602b      	str	r3, [r5, #0]
 8019b48:	f7ec f8b2 	bl	8005cb0 <_sbrk>
 8019b4c:	1c43      	adds	r3, r0, #1
 8019b4e:	d102      	bne.n	8019b56 <_sbrk_r+0x1a>
 8019b50:	682b      	ldr	r3, [r5, #0]
 8019b52:	b103      	cbz	r3, 8019b56 <_sbrk_r+0x1a>
 8019b54:	6023      	str	r3, [r4, #0]
 8019b56:	bd38      	pop	{r3, r4, r5, pc}
 8019b58:	2000a0ac 	.word	0x2000a0ac

08019b5c <__assert_func>:
 8019b5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019b5e:	4614      	mov	r4, r2
 8019b60:	461a      	mov	r2, r3
 8019b62:	4b09      	ldr	r3, [pc, #36]	; (8019b88 <__assert_func+0x2c>)
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	4605      	mov	r5, r0
 8019b68:	68d8      	ldr	r0, [r3, #12]
 8019b6a:	b14c      	cbz	r4, 8019b80 <__assert_func+0x24>
 8019b6c:	4b07      	ldr	r3, [pc, #28]	; (8019b8c <__assert_func+0x30>)
 8019b6e:	9100      	str	r1, [sp, #0]
 8019b70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019b74:	4906      	ldr	r1, [pc, #24]	; (8019b90 <__assert_func+0x34>)
 8019b76:	462b      	mov	r3, r5
 8019b78:	f000 f854 	bl	8019c24 <fiprintf>
 8019b7c:	f000 f864 	bl	8019c48 <abort>
 8019b80:	4b04      	ldr	r3, [pc, #16]	; (8019b94 <__assert_func+0x38>)
 8019b82:	461c      	mov	r4, r3
 8019b84:	e7f3      	b.n	8019b6e <__assert_func+0x12>
 8019b86:	bf00      	nop
 8019b88:	200001e8 	.word	0x200001e8
 8019b8c:	0801ba0d 	.word	0x0801ba0d
 8019b90:	0801ba1a 	.word	0x0801ba1a
 8019b94:	0801ba48 	.word	0x0801ba48

08019b98 <_calloc_r>:
 8019b98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019b9a:	fba1 2402 	umull	r2, r4, r1, r2
 8019b9e:	b94c      	cbnz	r4, 8019bb4 <_calloc_r+0x1c>
 8019ba0:	4611      	mov	r1, r2
 8019ba2:	9201      	str	r2, [sp, #4]
 8019ba4:	f7ff f852 	bl	8018c4c <_malloc_r>
 8019ba8:	9a01      	ldr	r2, [sp, #4]
 8019baa:	4605      	mov	r5, r0
 8019bac:	b930      	cbnz	r0, 8019bbc <_calloc_r+0x24>
 8019bae:	4628      	mov	r0, r5
 8019bb0:	b003      	add	sp, #12
 8019bb2:	bd30      	pop	{r4, r5, pc}
 8019bb4:	220c      	movs	r2, #12
 8019bb6:	6002      	str	r2, [r0, #0]
 8019bb8:	2500      	movs	r5, #0
 8019bba:	e7f8      	b.n	8019bae <_calloc_r+0x16>
 8019bbc:	4621      	mov	r1, r4
 8019bbe:	f7fd fcfe 	bl	80175be <memset>
 8019bc2:	e7f4      	b.n	8019bae <_calloc_r+0x16>

08019bc4 <_realloc_r>:
 8019bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019bc8:	4680      	mov	r8, r0
 8019bca:	4614      	mov	r4, r2
 8019bcc:	460e      	mov	r6, r1
 8019bce:	b921      	cbnz	r1, 8019bda <_realloc_r+0x16>
 8019bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019bd4:	4611      	mov	r1, r2
 8019bd6:	f7ff b839 	b.w	8018c4c <_malloc_r>
 8019bda:	b92a      	cbnz	r2, 8019be8 <_realloc_r+0x24>
 8019bdc:	f7fe fc6a 	bl	80184b4 <_free_r>
 8019be0:	4625      	mov	r5, r4
 8019be2:	4628      	mov	r0, r5
 8019be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019be8:	f000 f835 	bl	8019c56 <_malloc_usable_size_r>
 8019bec:	4284      	cmp	r4, r0
 8019bee:	4607      	mov	r7, r0
 8019bf0:	d802      	bhi.n	8019bf8 <_realloc_r+0x34>
 8019bf2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019bf6:	d812      	bhi.n	8019c1e <_realloc_r+0x5a>
 8019bf8:	4621      	mov	r1, r4
 8019bfa:	4640      	mov	r0, r8
 8019bfc:	f7ff f826 	bl	8018c4c <_malloc_r>
 8019c00:	4605      	mov	r5, r0
 8019c02:	2800      	cmp	r0, #0
 8019c04:	d0ed      	beq.n	8019be2 <_realloc_r+0x1e>
 8019c06:	42bc      	cmp	r4, r7
 8019c08:	4622      	mov	r2, r4
 8019c0a:	4631      	mov	r1, r6
 8019c0c:	bf28      	it	cs
 8019c0e:	463a      	movcs	r2, r7
 8019c10:	f7fd fdbd 	bl	801778e <memcpy>
 8019c14:	4631      	mov	r1, r6
 8019c16:	4640      	mov	r0, r8
 8019c18:	f7fe fc4c 	bl	80184b4 <_free_r>
 8019c1c:	e7e1      	b.n	8019be2 <_realloc_r+0x1e>
 8019c1e:	4635      	mov	r5, r6
 8019c20:	e7df      	b.n	8019be2 <_realloc_r+0x1e>
	...

08019c24 <fiprintf>:
 8019c24:	b40e      	push	{r1, r2, r3}
 8019c26:	b503      	push	{r0, r1, lr}
 8019c28:	4601      	mov	r1, r0
 8019c2a:	ab03      	add	r3, sp, #12
 8019c2c:	4805      	ldr	r0, [pc, #20]	; (8019c44 <fiprintf+0x20>)
 8019c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019c32:	6800      	ldr	r0, [r0, #0]
 8019c34:	9301      	str	r3, [sp, #4]
 8019c36:	f000 f83f 	bl	8019cb8 <_vfiprintf_r>
 8019c3a:	b002      	add	sp, #8
 8019c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019c40:	b003      	add	sp, #12
 8019c42:	4770      	bx	lr
 8019c44:	200001e8 	.word	0x200001e8

08019c48 <abort>:
 8019c48:	b508      	push	{r3, lr}
 8019c4a:	2006      	movs	r0, #6
 8019c4c:	f000 fa0c 	bl	801a068 <raise>
 8019c50:	2001      	movs	r0, #1
 8019c52:	f7eb ffb5 	bl	8005bc0 <_exit>

08019c56 <_malloc_usable_size_r>:
 8019c56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c5a:	1f18      	subs	r0, r3, #4
 8019c5c:	2b00      	cmp	r3, #0
 8019c5e:	bfbc      	itt	lt
 8019c60:	580b      	ldrlt	r3, [r1, r0]
 8019c62:	18c0      	addlt	r0, r0, r3
 8019c64:	4770      	bx	lr

08019c66 <__sfputc_r>:
 8019c66:	6893      	ldr	r3, [r2, #8]
 8019c68:	3b01      	subs	r3, #1
 8019c6a:	2b00      	cmp	r3, #0
 8019c6c:	b410      	push	{r4}
 8019c6e:	6093      	str	r3, [r2, #8]
 8019c70:	da08      	bge.n	8019c84 <__sfputc_r+0x1e>
 8019c72:	6994      	ldr	r4, [r2, #24]
 8019c74:	42a3      	cmp	r3, r4
 8019c76:	db01      	blt.n	8019c7c <__sfputc_r+0x16>
 8019c78:	290a      	cmp	r1, #10
 8019c7a:	d103      	bne.n	8019c84 <__sfputc_r+0x1e>
 8019c7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c80:	f000 b934 	b.w	8019eec <__swbuf_r>
 8019c84:	6813      	ldr	r3, [r2, #0]
 8019c86:	1c58      	adds	r0, r3, #1
 8019c88:	6010      	str	r0, [r2, #0]
 8019c8a:	7019      	strb	r1, [r3, #0]
 8019c8c:	4608      	mov	r0, r1
 8019c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019c92:	4770      	bx	lr

08019c94 <__sfputs_r>:
 8019c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c96:	4606      	mov	r6, r0
 8019c98:	460f      	mov	r7, r1
 8019c9a:	4614      	mov	r4, r2
 8019c9c:	18d5      	adds	r5, r2, r3
 8019c9e:	42ac      	cmp	r4, r5
 8019ca0:	d101      	bne.n	8019ca6 <__sfputs_r+0x12>
 8019ca2:	2000      	movs	r0, #0
 8019ca4:	e007      	b.n	8019cb6 <__sfputs_r+0x22>
 8019ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019caa:	463a      	mov	r2, r7
 8019cac:	4630      	mov	r0, r6
 8019cae:	f7ff ffda 	bl	8019c66 <__sfputc_r>
 8019cb2:	1c43      	adds	r3, r0, #1
 8019cb4:	d1f3      	bne.n	8019c9e <__sfputs_r+0xa>
 8019cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019cb8 <_vfiprintf_r>:
 8019cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cbc:	460d      	mov	r5, r1
 8019cbe:	b09d      	sub	sp, #116	; 0x74
 8019cc0:	4614      	mov	r4, r2
 8019cc2:	4698      	mov	r8, r3
 8019cc4:	4606      	mov	r6, r0
 8019cc6:	b118      	cbz	r0, 8019cd0 <_vfiprintf_r+0x18>
 8019cc8:	6a03      	ldr	r3, [r0, #32]
 8019cca:	b90b      	cbnz	r3, 8019cd0 <_vfiprintf_r+0x18>
 8019ccc:	f7fd fbde 	bl	801748c <__sinit>
 8019cd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019cd2:	07d9      	lsls	r1, r3, #31
 8019cd4:	d405      	bmi.n	8019ce2 <_vfiprintf_r+0x2a>
 8019cd6:	89ab      	ldrh	r3, [r5, #12]
 8019cd8:	059a      	lsls	r2, r3, #22
 8019cda:	d402      	bmi.n	8019ce2 <_vfiprintf_r+0x2a>
 8019cdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019cde:	f7fd fd54 	bl	801778a <__retarget_lock_acquire_recursive>
 8019ce2:	89ab      	ldrh	r3, [r5, #12]
 8019ce4:	071b      	lsls	r3, r3, #28
 8019ce6:	d501      	bpl.n	8019cec <_vfiprintf_r+0x34>
 8019ce8:	692b      	ldr	r3, [r5, #16]
 8019cea:	b99b      	cbnz	r3, 8019d14 <_vfiprintf_r+0x5c>
 8019cec:	4629      	mov	r1, r5
 8019cee:	4630      	mov	r0, r6
 8019cf0:	f000 f93a 	bl	8019f68 <__swsetup_r>
 8019cf4:	b170      	cbz	r0, 8019d14 <_vfiprintf_r+0x5c>
 8019cf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019cf8:	07dc      	lsls	r4, r3, #31
 8019cfa:	d504      	bpl.n	8019d06 <_vfiprintf_r+0x4e>
 8019cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8019d00:	b01d      	add	sp, #116	; 0x74
 8019d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d06:	89ab      	ldrh	r3, [r5, #12]
 8019d08:	0598      	lsls	r0, r3, #22
 8019d0a:	d4f7      	bmi.n	8019cfc <_vfiprintf_r+0x44>
 8019d0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019d0e:	f7fd fd3d 	bl	801778c <__retarget_lock_release_recursive>
 8019d12:	e7f3      	b.n	8019cfc <_vfiprintf_r+0x44>
 8019d14:	2300      	movs	r3, #0
 8019d16:	9309      	str	r3, [sp, #36]	; 0x24
 8019d18:	2320      	movs	r3, #32
 8019d1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d22:	2330      	movs	r3, #48	; 0x30
 8019d24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019ed8 <_vfiprintf_r+0x220>
 8019d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d2c:	f04f 0901 	mov.w	r9, #1
 8019d30:	4623      	mov	r3, r4
 8019d32:	469a      	mov	sl, r3
 8019d34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d38:	b10a      	cbz	r2, 8019d3e <_vfiprintf_r+0x86>
 8019d3a:	2a25      	cmp	r2, #37	; 0x25
 8019d3c:	d1f9      	bne.n	8019d32 <_vfiprintf_r+0x7a>
 8019d3e:	ebba 0b04 	subs.w	fp, sl, r4
 8019d42:	d00b      	beq.n	8019d5c <_vfiprintf_r+0xa4>
 8019d44:	465b      	mov	r3, fp
 8019d46:	4622      	mov	r2, r4
 8019d48:	4629      	mov	r1, r5
 8019d4a:	4630      	mov	r0, r6
 8019d4c:	f7ff ffa2 	bl	8019c94 <__sfputs_r>
 8019d50:	3001      	adds	r0, #1
 8019d52:	f000 80a9 	beq.w	8019ea8 <_vfiprintf_r+0x1f0>
 8019d56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d58:	445a      	add	r2, fp
 8019d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8019d5c:	f89a 3000 	ldrb.w	r3, [sl]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	f000 80a1 	beq.w	8019ea8 <_vfiprintf_r+0x1f0>
 8019d66:	2300      	movs	r3, #0
 8019d68:	f04f 32ff 	mov.w	r2, #4294967295
 8019d6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d70:	f10a 0a01 	add.w	sl, sl, #1
 8019d74:	9304      	str	r3, [sp, #16]
 8019d76:	9307      	str	r3, [sp, #28]
 8019d78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d7c:	931a      	str	r3, [sp, #104]	; 0x68
 8019d7e:	4654      	mov	r4, sl
 8019d80:	2205      	movs	r2, #5
 8019d82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d86:	4854      	ldr	r0, [pc, #336]	; (8019ed8 <_vfiprintf_r+0x220>)
 8019d88:	f7e6 fa22 	bl	80001d0 <memchr>
 8019d8c:	9a04      	ldr	r2, [sp, #16]
 8019d8e:	b9d8      	cbnz	r0, 8019dc8 <_vfiprintf_r+0x110>
 8019d90:	06d1      	lsls	r1, r2, #27
 8019d92:	bf44      	itt	mi
 8019d94:	2320      	movmi	r3, #32
 8019d96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019d9a:	0713      	lsls	r3, r2, #28
 8019d9c:	bf44      	itt	mi
 8019d9e:	232b      	movmi	r3, #43	; 0x2b
 8019da0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019da4:	f89a 3000 	ldrb.w	r3, [sl]
 8019da8:	2b2a      	cmp	r3, #42	; 0x2a
 8019daa:	d015      	beq.n	8019dd8 <_vfiprintf_r+0x120>
 8019dac:	9a07      	ldr	r2, [sp, #28]
 8019dae:	4654      	mov	r4, sl
 8019db0:	2000      	movs	r0, #0
 8019db2:	f04f 0c0a 	mov.w	ip, #10
 8019db6:	4621      	mov	r1, r4
 8019db8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019dbc:	3b30      	subs	r3, #48	; 0x30
 8019dbe:	2b09      	cmp	r3, #9
 8019dc0:	d94d      	bls.n	8019e5e <_vfiprintf_r+0x1a6>
 8019dc2:	b1b0      	cbz	r0, 8019df2 <_vfiprintf_r+0x13a>
 8019dc4:	9207      	str	r2, [sp, #28]
 8019dc6:	e014      	b.n	8019df2 <_vfiprintf_r+0x13a>
 8019dc8:	eba0 0308 	sub.w	r3, r0, r8
 8019dcc:	fa09 f303 	lsl.w	r3, r9, r3
 8019dd0:	4313      	orrs	r3, r2
 8019dd2:	9304      	str	r3, [sp, #16]
 8019dd4:	46a2      	mov	sl, r4
 8019dd6:	e7d2      	b.n	8019d7e <_vfiprintf_r+0xc6>
 8019dd8:	9b03      	ldr	r3, [sp, #12]
 8019dda:	1d19      	adds	r1, r3, #4
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	9103      	str	r1, [sp, #12]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	bfbb      	ittet	lt
 8019de4:	425b      	neglt	r3, r3
 8019de6:	f042 0202 	orrlt.w	r2, r2, #2
 8019dea:	9307      	strge	r3, [sp, #28]
 8019dec:	9307      	strlt	r3, [sp, #28]
 8019dee:	bfb8      	it	lt
 8019df0:	9204      	strlt	r2, [sp, #16]
 8019df2:	7823      	ldrb	r3, [r4, #0]
 8019df4:	2b2e      	cmp	r3, #46	; 0x2e
 8019df6:	d10c      	bne.n	8019e12 <_vfiprintf_r+0x15a>
 8019df8:	7863      	ldrb	r3, [r4, #1]
 8019dfa:	2b2a      	cmp	r3, #42	; 0x2a
 8019dfc:	d134      	bne.n	8019e68 <_vfiprintf_r+0x1b0>
 8019dfe:	9b03      	ldr	r3, [sp, #12]
 8019e00:	1d1a      	adds	r2, r3, #4
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	9203      	str	r2, [sp, #12]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	bfb8      	it	lt
 8019e0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e0e:	3402      	adds	r4, #2
 8019e10:	9305      	str	r3, [sp, #20]
 8019e12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8019ee8 <_vfiprintf_r+0x230>
 8019e16:	7821      	ldrb	r1, [r4, #0]
 8019e18:	2203      	movs	r2, #3
 8019e1a:	4650      	mov	r0, sl
 8019e1c:	f7e6 f9d8 	bl	80001d0 <memchr>
 8019e20:	b138      	cbz	r0, 8019e32 <_vfiprintf_r+0x17a>
 8019e22:	9b04      	ldr	r3, [sp, #16]
 8019e24:	eba0 000a 	sub.w	r0, r0, sl
 8019e28:	2240      	movs	r2, #64	; 0x40
 8019e2a:	4082      	lsls	r2, r0
 8019e2c:	4313      	orrs	r3, r2
 8019e2e:	3401      	adds	r4, #1
 8019e30:	9304      	str	r3, [sp, #16]
 8019e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e36:	4829      	ldr	r0, [pc, #164]	; (8019edc <_vfiprintf_r+0x224>)
 8019e38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e3c:	2206      	movs	r2, #6
 8019e3e:	f7e6 f9c7 	bl	80001d0 <memchr>
 8019e42:	2800      	cmp	r0, #0
 8019e44:	d03f      	beq.n	8019ec6 <_vfiprintf_r+0x20e>
 8019e46:	4b26      	ldr	r3, [pc, #152]	; (8019ee0 <_vfiprintf_r+0x228>)
 8019e48:	bb1b      	cbnz	r3, 8019e92 <_vfiprintf_r+0x1da>
 8019e4a:	9b03      	ldr	r3, [sp, #12]
 8019e4c:	3307      	adds	r3, #7
 8019e4e:	f023 0307 	bic.w	r3, r3, #7
 8019e52:	3308      	adds	r3, #8
 8019e54:	9303      	str	r3, [sp, #12]
 8019e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e58:	443b      	add	r3, r7
 8019e5a:	9309      	str	r3, [sp, #36]	; 0x24
 8019e5c:	e768      	b.n	8019d30 <_vfiprintf_r+0x78>
 8019e5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e62:	460c      	mov	r4, r1
 8019e64:	2001      	movs	r0, #1
 8019e66:	e7a6      	b.n	8019db6 <_vfiprintf_r+0xfe>
 8019e68:	2300      	movs	r3, #0
 8019e6a:	3401      	adds	r4, #1
 8019e6c:	9305      	str	r3, [sp, #20]
 8019e6e:	4619      	mov	r1, r3
 8019e70:	f04f 0c0a 	mov.w	ip, #10
 8019e74:	4620      	mov	r0, r4
 8019e76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e7a:	3a30      	subs	r2, #48	; 0x30
 8019e7c:	2a09      	cmp	r2, #9
 8019e7e:	d903      	bls.n	8019e88 <_vfiprintf_r+0x1d0>
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d0c6      	beq.n	8019e12 <_vfiprintf_r+0x15a>
 8019e84:	9105      	str	r1, [sp, #20]
 8019e86:	e7c4      	b.n	8019e12 <_vfiprintf_r+0x15a>
 8019e88:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e8c:	4604      	mov	r4, r0
 8019e8e:	2301      	movs	r3, #1
 8019e90:	e7f0      	b.n	8019e74 <_vfiprintf_r+0x1bc>
 8019e92:	ab03      	add	r3, sp, #12
 8019e94:	9300      	str	r3, [sp, #0]
 8019e96:	462a      	mov	r2, r5
 8019e98:	4b12      	ldr	r3, [pc, #72]	; (8019ee4 <_vfiprintf_r+0x22c>)
 8019e9a:	a904      	add	r1, sp, #16
 8019e9c:	4630      	mov	r0, r6
 8019e9e:	f7fc fea3 	bl	8016be8 <_printf_float>
 8019ea2:	4607      	mov	r7, r0
 8019ea4:	1c78      	adds	r0, r7, #1
 8019ea6:	d1d6      	bne.n	8019e56 <_vfiprintf_r+0x19e>
 8019ea8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019eaa:	07d9      	lsls	r1, r3, #31
 8019eac:	d405      	bmi.n	8019eba <_vfiprintf_r+0x202>
 8019eae:	89ab      	ldrh	r3, [r5, #12]
 8019eb0:	059a      	lsls	r2, r3, #22
 8019eb2:	d402      	bmi.n	8019eba <_vfiprintf_r+0x202>
 8019eb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019eb6:	f7fd fc69 	bl	801778c <__retarget_lock_release_recursive>
 8019eba:	89ab      	ldrh	r3, [r5, #12]
 8019ebc:	065b      	lsls	r3, r3, #25
 8019ebe:	f53f af1d 	bmi.w	8019cfc <_vfiprintf_r+0x44>
 8019ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ec4:	e71c      	b.n	8019d00 <_vfiprintf_r+0x48>
 8019ec6:	ab03      	add	r3, sp, #12
 8019ec8:	9300      	str	r3, [sp, #0]
 8019eca:	462a      	mov	r2, r5
 8019ecc:	4b05      	ldr	r3, [pc, #20]	; (8019ee4 <_vfiprintf_r+0x22c>)
 8019ece:	a904      	add	r1, sp, #16
 8019ed0:	4630      	mov	r0, r6
 8019ed2:	f7fd f92d 	bl	8017130 <_printf_i>
 8019ed6:	e7e4      	b.n	8019ea2 <_vfiprintf_r+0x1ea>
 8019ed8:	0801b9fc 	.word	0x0801b9fc
 8019edc:	0801ba06 	.word	0x0801ba06
 8019ee0:	08016be9 	.word	0x08016be9
 8019ee4:	08019c95 	.word	0x08019c95
 8019ee8:	0801ba02 	.word	0x0801ba02

08019eec <__swbuf_r>:
 8019eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019eee:	460e      	mov	r6, r1
 8019ef0:	4614      	mov	r4, r2
 8019ef2:	4605      	mov	r5, r0
 8019ef4:	b118      	cbz	r0, 8019efe <__swbuf_r+0x12>
 8019ef6:	6a03      	ldr	r3, [r0, #32]
 8019ef8:	b90b      	cbnz	r3, 8019efe <__swbuf_r+0x12>
 8019efa:	f7fd fac7 	bl	801748c <__sinit>
 8019efe:	69a3      	ldr	r3, [r4, #24]
 8019f00:	60a3      	str	r3, [r4, #8]
 8019f02:	89a3      	ldrh	r3, [r4, #12]
 8019f04:	071a      	lsls	r2, r3, #28
 8019f06:	d525      	bpl.n	8019f54 <__swbuf_r+0x68>
 8019f08:	6923      	ldr	r3, [r4, #16]
 8019f0a:	b31b      	cbz	r3, 8019f54 <__swbuf_r+0x68>
 8019f0c:	6823      	ldr	r3, [r4, #0]
 8019f0e:	6922      	ldr	r2, [r4, #16]
 8019f10:	1a98      	subs	r0, r3, r2
 8019f12:	6963      	ldr	r3, [r4, #20]
 8019f14:	b2f6      	uxtb	r6, r6
 8019f16:	4283      	cmp	r3, r0
 8019f18:	4637      	mov	r7, r6
 8019f1a:	dc04      	bgt.n	8019f26 <__swbuf_r+0x3a>
 8019f1c:	4621      	mov	r1, r4
 8019f1e:	4628      	mov	r0, r5
 8019f20:	f7ff fdca 	bl	8019ab8 <_fflush_r>
 8019f24:	b9e0      	cbnz	r0, 8019f60 <__swbuf_r+0x74>
 8019f26:	68a3      	ldr	r3, [r4, #8]
 8019f28:	3b01      	subs	r3, #1
 8019f2a:	60a3      	str	r3, [r4, #8]
 8019f2c:	6823      	ldr	r3, [r4, #0]
 8019f2e:	1c5a      	adds	r2, r3, #1
 8019f30:	6022      	str	r2, [r4, #0]
 8019f32:	701e      	strb	r6, [r3, #0]
 8019f34:	6962      	ldr	r2, [r4, #20]
 8019f36:	1c43      	adds	r3, r0, #1
 8019f38:	429a      	cmp	r2, r3
 8019f3a:	d004      	beq.n	8019f46 <__swbuf_r+0x5a>
 8019f3c:	89a3      	ldrh	r3, [r4, #12]
 8019f3e:	07db      	lsls	r3, r3, #31
 8019f40:	d506      	bpl.n	8019f50 <__swbuf_r+0x64>
 8019f42:	2e0a      	cmp	r6, #10
 8019f44:	d104      	bne.n	8019f50 <__swbuf_r+0x64>
 8019f46:	4621      	mov	r1, r4
 8019f48:	4628      	mov	r0, r5
 8019f4a:	f7ff fdb5 	bl	8019ab8 <_fflush_r>
 8019f4e:	b938      	cbnz	r0, 8019f60 <__swbuf_r+0x74>
 8019f50:	4638      	mov	r0, r7
 8019f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f54:	4621      	mov	r1, r4
 8019f56:	4628      	mov	r0, r5
 8019f58:	f000 f806 	bl	8019f68 <__swsetup_r>
 8019f5c:	2800      	cmp	r0, #0
 8019f5e:	d0d5      	beq.n	8019f0c <__swbuf_r+0x20>
 8019f60:	f04f 37ff 	mov.w	r7, #4294967295
 8019f64:	e7f4      	b.n	8019f50 <__swbuf_r+0x64>
	...

08019f68 <__swsetup_r>:
 8019f68:	b538      	push	{r3, r4, r5, lr}
 8019f6a:	4b2a      	ldr	r3, [pc, #168]	; (801a014 <__swsetup_r+0xac>)
 8019f6c:	4605      	mov	r5, r0
 8019f6e:	6818      	ldr	r0, [r3, #0]
 8019f70:	460c      	mov	r4, r1
 8019f72:	b118      	cbz	r0, 8019f7c <__swsetup_r+0x14>
 8019f74:	6a03      	ldr	r3, [r0, #32]
 8019f76:	b90b      	cbnz	r3, 8019f7c <__swsetup_r+0x14>
 8019f78:	f7fd fa88 	bl	801748c <__sinit>
 8019f7c:	89a3      	ldrh	r3, [r4, #12]
 8019f7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019f82:	0718      	lsls	r0, r3, #28
 8019f84:	d422      	bmi.n	8019fcc <__swsetup_r+0x64>
 8019f86:	06d9      	lsls	r1, r3, #27
 8019f88:	d407      	bmi.n	8019f9a <__swsetup_r+0x32>
 8019f8a:	2309      	movs	r3, #9
 8019f8c:	602b      	str	r3, [r5, #0]
 8019f8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019f92:	81a3      	strh	r3, [r4, #12]
 8019f94:	f04f 30ff 	mov.w	r0, #4294967295
 8019f98:	e034      	b.n	801a004 <__swsetup_r+0x9c>
 8019f9a:	0758      	lsls	r0, r3, #29
 8019f9c:	d512      	bpl.n	8019fc4 <__swsetup_r+0x5c>
 8019f9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019fa0:	b141      	cbz	r1, 8019fb4 <__swsetup_r+0x4c>
 8019fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019fa6:	4299      	cmp	r1, r3
 8019fa8:	d002      	beq.n	8019fb0 <__swsetup_r+0x48>
 8019faa:	4628      	mov	r0, r5
 8019fac:	f7fe fa82 	bl	80184b4 <_free_r>
 8019fb0:	2300      	movs	r3, #0
 8019fb2:	6363      	str	r3, [r4, #52]	; 0x34
 8019fb4:	89a3      	ldrh	r3, [r4, #12]
 8019fb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019fba:	81a3      	strh	r3, [r4, #12]
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	6063      	str	r3, [r4, #4]
 8019fc0:	6923      	ldr	r3, [r4, #16]
 8019fc2:	6023      	str	r3, [r4, #0]
 8019fc4:	89a3      	ldrh	r3, [r4, #12]
 8019fc6:	f043 0308 	orr.w	r3, r3, #8
 8019fca:	81a3      	strh	r3, [r4, #12]
 8019fcc:	6923      	ldr	r3, [r4, #16]
 8019fce:	b94b      	cbnz	r3, 8019fe4 <__swsetup_r+0x7c>
 8019fd0:	89a3      	ldrh	r3, [r4, #12]
 8019fd2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019fda:	d003      	beq.n	8019fe4 <__swsetup_r+0x7c>
 8019fdc:	4621      	mov	r1, r4
 8019fde:	4628      	mov	r0, r5
 8019fe0:	f000 f884 	bl	801a0ec <__smakebuf_r>
 8019fe4:	89a0      	ldrh	r0, [r4, #12]
 8019fe6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019fea:	f010 0301 	ands.w	r3, r0, #1
 8019fee:	d00a      	beq.n	801a006 <__swsetup_r+0x9e>
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	60a3      	str	r3, [r4, #8]
 8019ff4:	6963      	ldr	r3, [r4, #20]
 8019ff6:	425b      	negs	r3, r3
 8019ff8:	61a3      	str	r3, [r4, #24]
 8019ffa:	6923      	ldr	r3, [r4, #16]
 8019ffc:	b943      	cbnz	r3, 801a010 <__swsetup_r+0xa8>
 8019ffe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a002:	d1c4      	bne.n	8019f8e <__swsetup_r+0x26>
 801a004:	bd38      	pop	{r3, r4, r5, pc}
 801a006:	0781      	lsls	r1, r0, #30
 801a008:	bf58      	it	pl
 801a00a:	6963      	ldrpl	r3, [r4, #20]
 801a00c:	60a3      	str	r3, [r4, #8]
 801a00e:	e7f4      	b.n	8019ffa <__swsetup_r+0x92>
 801a010:	2000      	movs	r0, #0
 801a012:	e7f7      	b.n	801a004 <__swsetup_r+0x9c>
 801a014:	200001e8 	.word	0x200001e8

0801a018 <_raise_r>:
 801a018:	291f      	cmp	r1, #31
 801a01a:	b538      	push	{r3, r4, r5, lr}
 801a01c:	4604      	mov	r4, r0
 801a01e:	460d      	mov	r5, r1
 801a020:	d904      	bls.n	801a02c <_raise_r+0x14>
 801a022:	2316      	movs	r3, #22
 801a024:	6003      	str	r3, [r0, #0]
 801a026:	f04f 30ff 	mov.w	r0, #4294967295
 801a02a:	bd38      	pop	{r3, r4, r5, pc}
 801a02c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a02e:	b112      	cbz	r2, 801a036 <_raise_r+0x1e>
 801a030:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a034:	b94b      	cbnz	r3, 801a04a <_raise_r+0x32>
 801a036:	4620      	mov	r0, r4
 801a038:	f000 f830 	bl	801a09c <_getpid_r>
 801a03c:	462a      	mov	r2, r5
 801a03e:	4601      	mov	r1, r0
 801a040:	4620      	mov	r0, r4
 801a042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a046:	f000 b817 	b.w	801a078 <_kill_r>
 801a04a:	2b01      	cmp	r3, #1
 801a04c:	d00a      	beq.n	801a064 <_raise_r+0x4c>
 801a04e:	1c59      	adds	r1, r3, #1
 801a050:	d103      	bne.n	801a05a <_raise_r+0x42>
 801a052:	2316      	movs	r3, #22
 801a054:	6003      	str	r3, [r0, #0]
 801a056:	2001      	movs	r0, #1
 801a058:	e7e7      	b.n	801a02a <_raise_r+0x12>
 801a05a:	2400      	movs	r4, #0
 801a05c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a060:	4628      	mov	r0, r5
 801a062:	4798      	blx	r3
 801a064:	2000      	movs	r0, #0
 801a066:	e7e0      	b.n	801a02a <_raise_r+0x12>

0801a068 <raise>:
 801a068:	4b02      	ldr	r3, [pc, #8]	; (801a074 <raise+0xc>)
 801a06a:	4601      	mov	r1, r0
 801a06c:	6818      	ldr	r0, [r3, #0]
 801a06e:	f7ff bfd3 	b.w	801a018 <_raise_r>
 801a072:	bf00      	nop
 801a074:	200001e8 	.word	0x200001e8

0801a078 <_kill_r>:
 801a078:	b538      	push	{r3, r4, r5, lr}
 801a07a:	4d07      	ldr	r5, [pc, #28]	; (801a098 <_kill_r+0x20>)
 801a07c:	2300      	movs	r3, #0
 801a07e:	4604      	mov	r4, r0
 801a080:	4608      	mov	r0, r1
 801a082:	4611      	mov	r1, r2
 801a084:	602b      	str	r3, [r5, #0]
 801a086:	f7eb fd8b 	bl	8005ba0 <_kill>
 801a08a:	1c43      	adds	r3, r0, #1
 801a08c:	d102      	bne.n	801a094 <_kill_r+0x1c>
 801a08e:	682b      	ldr	r3, [r5, #0]
 801a090:	b103      	cbz	r3, 801a094 <_kill_r+0x1c>
 801a092:	6023      	str	r3, [r4, #0]
 801a094:	bd38      	pop	{r3, r4, r5, pc}
 801a096:	bf00      	nop
 801a098:	2000a0ac 	.word	0x2000a0ac

0801a09c <_getpid_r>:
 801a09c:	f7eb bd78 	b.w	8005b90 <_getpid>

0801a0a0 <__swhatbuf_r>:
 801a0a0:	b570      	push	{r4, r5, r6, lr}
 801a0a2:	460c      	mov	r4, r1
 801a0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a0a8:	2900      	cmp	r1, #0
 801a0aa:	b096      	sub	sp, #88	; 0x58
 801a0ac:	4615      	mov	r5, r2
 801a0ae:	461e      	mov	r6, r3
 801a0b0:	da0d      	bge.n	801a0ce <__swhatbuf_r+0x2e>
 801a0b2:	89a3      	ldrh	r3, [r4, #12]
 801a0b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a0b8:	f04f 0100 	mov.w	r1, #0
 801a0bc:	bf0c      	ite	eq
 801a0be:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a0c2:	2340      	movne	r3, #64	; 0x40
 801a0c4:	2000      	movs	r0, #0
 801a0c6:	6031      	str	r1, [r6, #0]
 801a0c8:	602b      	str	r3, [r5, #0]
 801a0ca:	b016      	add	sp, #88	; 0x58
 801a0cc:	bd70      	pop	{r4, r5, r6, pc}
 801a0ce:	466a      	mov	r2, sp
 801a0d0:	f000 f848 	bl	801a164 <_fstat_r>
 801a0d4:	2800      	cmp	r0, #0
 801a0d6:	dbec      	blt.n	801a0b2 <__swhatbuf_r+0x12>
 801a0d8:	9901      	ldr	r1, [sp, #4]
 801a0da:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a0de:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a0e2:	4259      	negs	r1, r3
 801a0e4:	4159      	adcs	r1, r3
 801a0e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a0ea:	e7eb      	b.n	801a0c4 <__swhatbuf_r+0x24>

0801a0ec <__smakebuf_r>:
 801a0ec:	898b      	ldrh	r3, [r1, #12]
 801a0ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a0f0:	079d      	lsls	r5, r3, #30
 801a0f2:	4606      	mov	r6, r0
 801a0f4:	460c      	mov	r4, r1
 801a0f6:	d507      	bpl.n	801a108 <__smakebuf_r+0x1c>
 801a0f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a0fc:	6023      	str	r3, [r4, #0]
 801a0fe:	6123      	str	r3, [r4, #16]
 801a100:	2301      	movs	r3, #1
 801a102:	6163      	str	r3, [r4, #20]
 801a104:	b002      	add	sp, #8
 801a106:	bd70      	pop	{r4, r5, r6, pc}
 801a108:	ab01      	add	r3, sp, #4
 801a10a:	466a      	mov	r2, sp
 801a10c:	f7ff ffc8 	bl	801a0a0 <__swhatbuf_r>
 801a110:	9900      	ldr	r1, [sp, #0]
 801a112:	4605      	mov	r5, r0
 801a114:	4630      	mov	r0, r6
 801a116:	f7fe fd99 	bl	8018c4c <_malloc_r>
 801a11a:	b948      	cbnz	r0, 801a130 <__smakebuf_r+0x44>
 801a11c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a120:	059a      	lsls	r2, r3, #22
 801a122:	d4ef      	bmi.n	801a104 <__smakebuf_r+0x18>
 801a124:	f023 0303 	bic.w	r3, r3, #3
 801a128:	f043 0302 	orr.w	r3, r3, #2
 801a12c:	81a3      	strh	r3, [r4, #12]
 801a12e:	e7e3      	b.n	801a0f8 <__smakebuf_r+0xc>
 801a130:	89a3      	ldrh	r3, [r4, #12]
 801a132:	6020      	str	r0, [r4, #0]
 801a134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a138:	81a3      	strh	r3, [r4, #12]
 801a13a:	9b00      	ldr	r3, [sp, #0]
 801a13c:	6163      	str	r3, [r4, #20]
 801a13e:	9b01      	ldr	r3, [sp, #4]
 801a140:	6120      	str	r0, [r4, #16]
 801a142:	b15b      	cbz	r3, 801a15c <__smakebuf_r+0x70>
 801a144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a148:	4630      	mov	r0, r6
 801a14a:	f000 f81d 	bl	801a188 <_isatty_r>
 801a14e:	b128      	cbz	r0, 801a15c <__smakebuf_r+0x70>
 801a150:	89a3      	ldrh	r3, [r4, #12]
 801a152:	f023 0303 	bic.w	r3, r3, #3
 801a156:	f043 0301 	orr.w	r3, r3, #1
 801a15a:	81a3      	strh	r3, [r4, #12]
 801a15c:	89a3      	ldrh	r3, [r4, #12]
 801a15e:	431d      	orrs	r5, r3
 801a160:	81a5      	strh	r5, [r4, #12]
 801a162:	e7cf      	b.n	801a104 <__smakebuf_r+0x18>

0801a164 <_fstat_r>:
 801a164:	b538      	push	{r3, r4, r5, lr}
 801a166:	4d07      	ldr	r5, [pc, #28]	; (801a184 <_fstat_r+0x20>)
 801a168:	2300      	movs	r3, #0
 801a16a:	4604      	mov	r4, r0
 801a16c:	4608      	mov	r0, r1
 801a16e:	4611      	mov	r1, r2
 801a170:	602b      	str	r3, [r5, #0]
 801a172:	f7eb fd74 	bl	8005c5e <_fstat>
 801a176:	1c43      	adds	r3, r0, #1
 801a178:	d102      	bne.n	801a180 <_fstat_r+0x1c>
 801a17a:	682b      	ldr	r3, [r5, #0]
 801a17c:	b103      	cbz	r3, 801a180 <_fstat_r+0x1c>
 801a17e:	6023      	str	r3, [r4, #0]
 801a180:	bd38      	pop	{r3, r4, r5, pc}
 801a182:	bf00      	nop
 801a184:	2000a0ac 	.word	0x2000a0ac

0801a188 <_isatty_r>:
 801a188:	b538      	push	{r3, r4, r5, lr}
 801a18a:	4d06      	ldr	r5, [pc, #24]	; (801a1a4 <_isatty_r+0x1c>)
 801a18c:	2300      	movs	r3, #0
 801a18e:	4604      	mov	r4, r0
 801a190:	4608      	mov	r0, r1
 801a192:	602b      	str	r3, [r5, #0]
 801a194:	f7eb fd73 	bl	8005c7e <_isatty>
 801a198:	1c43      	adds	r3, r0, #1
 801a19a:	d102      	bne.n	801a1a2 <_isatty_r+0x1a>
 801a19c:	682b      	ldr	r3, [r5, #0]
 801a19e:	b103      	cbz	r3, 801a1a2 <_isatty_r+0x1a>
 801a1a0:	6023      	str	r3, [r4, #0]
 801a1a2:	bd38      	pop	{r3, r4, r5, pc}
 801a1a4:	2000a0ac 	.word	0x2000a0ac

0801a1a8 <pow>:
 801a1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a1aa:	ed2d 8b02 	vpush	{d8}
 801a1ae:	eeb0 8a40 	vmov.f32	s16, s0
 801a1b2:	eef0 8a60 	vmov.f32	s17, s1
 801a1b6:	ec55 4b11 	vmov	r4, r5, d1
 801a1ba:	f000 f96d 	bl	801a498 <__ieee754_pow>
 801a1be:	4622      	mov	r2, r4
 801a1c0:	462b      	mov	r3, r5
 801a1c2:	4620      	mov	r0, r4
 801a1c4:	4629      	mov	r1, r5
 801a1c6:	ec57 6b10 	vmov	r6, r7, d0
 801a1ca:	f7e6 fcaf 	bl	8000b2c <__aeabi_dcmpun>
 801a1ce:	2800      	cmp	r0, #0
 801a1d0:	d13b      	bne.n	801a24a <pow+0xa2>
 801a1d2:	ec51 0b18 	vmov	r0, r1, d8
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	2300      	movs	r3, #0
 801a1da:	f7e6 fc75 	bl	8000ac8 <__aeabi_dcmpeq>
 801a1de:	b1b8      	cbz	r0, 801a210 <pow+0x68>
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	2300      	movs	r3, #0
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	4629      	mov	r1, r5
 801a1e8:	f7e6 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 801a1ec:	2800      	cmp	r0, #0
 801a1ee:	d146      	bne.n	801a27e <pow+0xd6>
 801a1f0:	ec45 4b10 	vmov	d0, r4, r5
 801a1f4:	f000 f866 	bl	801a2c4 <finite>
 801a1f8:	b338      	cbz	r0, 801a24a <pow+0xa2>
 801a1fa:	2200      	movs	r2, #0
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	4620      	mov	r0, r4
 801a200:	4629      	mov	r1, r5
 801a202:	f7e6 fc6b 	bl	8000adc <__aeabi_dcmplt>
 801a206:	b300      	cbz	r0, 801a24a <pow+0xa2>
 801a208:	f7fd fa94 	bl	8017734 <__errno>
 801a20c:	2322      	movs	r3, #34	; 0x22
 801a20e:	e01b      	b.n	801a248 <pow+0xa0>
 801a210:	ec47 6b10 	vmov	d0, r6, r7
 801a214:	f000 f856 	bl	801a2c4 <finite>
 801a218:	b9e0      	cbnz	r0, 801a254 <pow+0xac>
 801a21a:	eeb0 0a48 	vmov.f32	s0, s16
 801a21e:	eef0 0a68 	vmov.f32	s1, s17
 801a222:	f000 f84f 	bl	801a2c4 <finite>
 801a226:	b1a8      	cbz	r0, 801a254 <pow+0xac>
 801a228:	ec45 4b10 	vmov	d0, r4, r5
 801a22c:	f000 f84a 	bl	801a2c4 <finite>
 801a230:	b180      	cbz	r0, 801a254 <pow+0xac>
 801a232:	4632      	mov	r2, r6
 801a234:	463b      	mov	r3, r7
 801a236:	4630      	mov	r0, r6
 801a238:	4639      	mov	r1, r7
 801a23a:	f7e6 fc77 	bl	8000b2c <__aeabi_dcmpun>
 801a23e:	2800      	cmp	r0, #0
 801a240:	d0e2      	beq.n	801a208 <pow+0x60>
 801a242:	f7fd fa77 	bl	8017734 <__errno>
 801a246:	2321      	movs	r3, #33	; 0x21
 801a248:	6003      	str	r3, [r0, #0]
 801a24a:	ecbd 8b02 	vpop	{d8}
 801a24e:	ec47 6b10 	vmov	d0, r6, r7
 801a252:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a254:	2200      	movs	r2, #0
 801a256:	2300      	movs	r3, #0
 801a258:	4630      	mov	r0, r6
 801a25a:	4639      	mov	r1, r7
 801a25c:	f7e6 fc34 	bl	8000ac8 <__aeabi_dcmpeq>
 801a260:	2800      	cmp	r0, #0
 801a262:	d0f2      	beq.n	801a24a <pow+0xa2>
 801a264:	eeb0 0a48 	vmov.f32	s0, s16
 801a268:	eef0 0a68 	vmov.f32	s1, s17
 801a26c:	f000 f82a 	bl	801a2c4 <finite>
 801a270:	2800      	cmp	r0, #0
 801a272:	d0ea      	beq.n	801a24a <pow+0xa2>
 801a274:	ec45 4b10 	vmov	d0, r4, r5
 801a278:	f000 f824 	bl	801a2c4 <finite>
 801a27c:	e7c3      	b.n	801a206 <pow+0x5e>
 801a27e:	4f01      	ldr	r7, [pc, #4]	; (801a284 <pow+0xdc>)
 801a280:	2600      	movs	r6, #0
 801a282:	e7e2      	b.n	801a24a <pow+0xa2>
 801a284:	3ff00000 	.word	0x3ff00000

0801a288 <sqrtf>:
 801a288:	b508      	push	{r3, lr}
 801a28a:	ed2d 8b02 	vpush	{d8}
 801a28e:	eeb0 8a40 	vmov.f32	s16, s0
 801a292:	f000 f8fd 	bl	801a490 <__ieee754_sqrtf>
 801a296:	eeb4 8a48 	vcmp.f32	s16, s16
 801a29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a29e:	d60c      	bvs.n	801a2ba <sqrtf+0x32>
 801a2a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 801a2c0 <sqrtf+0x38>
 801a2a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801a2a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a2ac:	d505      	bpl.n	801a2ba <sqrtf+0x32>
 801a2ae:	f7fd fa41 	bl	8017734 <__errno>
 801a2b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801a2b6:	2321      	movs	r3, #33	; 0x21
 801a2b8:	6003      	str	r3, [r0, #0]
 801a2ba:	ecbd 8b02 	vpop	{d8}
 801a2be:	bd08      	pop	{r3, pc}
 801a2c0:	00000000 	.word	0x00000000

0801a2c4 <finite>:
 801a2c4:	b082      	sub	sp, #8
 801a2c6:	ed8d 0b00 	vstr	d0, [sp]
 801a2ca:	9801      	ldr	r0, [sp, #4]
 801a2cc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801a2d0:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a2d4:	0fc0      	lsrs	r0, r0, #31
 801a2d6:	b002      	add	sp, #8
 801a2d8:	4770      	bx	lr
	...

0801a2dc <__ieee754_sqrt>:
 801a2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2e0:	ec55 4b10 	vmov	r4, r5, d0
 801a2e4:	4e67      	ldr	r6, [pc, #412]	; (801a484 <__ieee754_sqrt+0x1a8>)
 801a2e6:	43ae      	bics	r6, r5
 801a2e8:	ee10 0a10 	vmov	r0, s0
 801a2ec:	ee10 2a10 	vmov	r2, s0
 801a2f0:	4629      	mov	r1, r5
 801a2f2:	462b      	mov	r3, r5
 801a2f4:	d10d      	bne.n	801a312 <__ieee754_sqrt+0x36>
 801a2f6:	f7e6 f97f 	bl	80005f8 <__aeabi_dmul>
 801a2fa:	4602      	mov	r2, r0
 801a2fc:	460b      	mov	r3, r1
 801a2fe:	4620      	mov	r0, r4
 801a300:	4629      	mov	r1, r5
 801a302:	f7e5 ffc3 	bl	800028c <__adddf3>
 801a306:	4604      	mov	r4, r0
 801a308:	460d      	mov	r5, r1
 801a30a:	ec45 4b10 	vmov	d0, r4, r5
 801a30e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a312:	2d00      	cmp	r5, #0
 801a314:	dc0b      	bgt.n	801a32e <__ieee754_sqrt+0x52>
 801a316:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801a31a:	4326      	orrs	r6, r4
 801a31c:	d0f5      	beq.n	801a30a <__ieee754_sqrt+0x2e>
 801a31e:	b135      	cbz	r5, 801a32e <__ieee754_sqrt+0x52>
 801a320:	f7e5 ffb2 	bl	8000288 <__aeabi_dsub>
 801a324:	4602      	mov	r2, r0
 801a326:	460b      	mov	r3, r1
 801a328:	f7e6 fa90 	bl	800084c <__aeabi_ddiv>
 801a32c:	e7eb      	b.n	801a306 <__ieee754_sqrt+0x2a>
 801a32e:	1509      	asrs	r1, r1, #20
 801a330:	f000 808d 	beq.w	801a44e <__ieee754_sqrt+0x172>
 801a334:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a338:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801a33c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a340:	07c9      	lsls	r1, r1, #31
 801a342:	bf5c      	itt	pl
 801a344:	005b      	lslpl	r3, r3, #1
 801a346:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801a34a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801a34e:	bf58      	it	pl
 801a350:	0052      	lslpl	r2, r2, #1
 801a352:	2500      	movs	r5, #0
 801a354:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a358:	1076      	asrs	r6, r6, #1
 801a35a:	0052      	lsls	r2, r2, #1
 801a35c:	f04f 0e16 	mov.w	lr, #22
 801a360:	46ac      	mov	ip, r5
 801a362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a366:	eb0c 0001 	add.w	r0, ip, r1
 801a36a:	4298      	cmp	r0, r3
 801a36c:	bfde      	ittt	le
 801a36e:	1a1b      	suble	r3, r3, r0
 801a370:	eb00 0c01 	addle.w	ip, r0, r1
 801a374:	186d      	addle	r5, r5, r1
 801a376:	005b      	lsls	r3, r3, #1
 801a378:	f1be 0e01 	subs.w	lr, lr, #1
 801a37c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a380:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a384:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a388:	d1ed      	bne.n	801a366 <__ieee754_sqrt+0x8a>
 801a38a:	4674      	mov	r4, lr
 801a38c:	2720      	movs	r7, #32
 801a38e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801a392:	4563      	cmp	r3, ip
 801a394:	eb01 000e 	add.w	r0, r1, lr
 801a398:	dc02      	bgt.n	801a3a0 <__ieee754_sqrt+0xc4>
 801a39a:	d113      	bne.n	801a3c4 <__ieee754_sqrt+0xe8>
 801a39c:	4290      	cmp	r0, r2
 801a39e:	d811      	bhi.n	801a3c4 <__ieee754_sqrt+0xe8>
 801a3a0:	2800      	cmp	r0, #0
 801a3a2:	eb00 0e01 	add.w	lr, r0, r1
 801a3a6:	da57      	bge.n	801a458 <__ieee754_sqrt+0x17c>
 801a3a8:	f1be 0f00 	cmp.w	lr, #0
 801a3ac:	db54      	blt.n	801a458 <__ieee754_sqrt+0x17c>
 801a3ae:	f10c 0801 	add.w	r8, ip, #1
 801a3b2:	eba3 030c 	sub.w	r3, r3, ip
 801a3b6:	4290      	cmp	r0, r2
 801a3b8:	bf88      	it	hi
 801a3ba:	f103 33ff 	addhi.w	r3, r3, #4294967295
 801a3be:	1a12      	subs	r2, r2, r0
 801a3c0:	440c      	add	r4, r1
 801a3c2:	46c4      	mov	ip, r8
 801a3c4:	005b      	lsls	r3, r3, #1
 801a3c6:	3f01      	subs	r7, #1
 801a3c8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801a3cc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801a3d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801a3d4:	d1dd      	bne.n	801a392 <__ieee754_sqrt+0xb6>
 801a3d6:	4313      	orrs	r3, r2
 801a3d8:	d01b      	beq.n	801a412 <__ieee754_sqrt+0x136>
 801a3da:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801a488 <__ieee754_sqrt+0x1ac>
 801a3de:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801a48c <__ieee754_sqrt+0x1b0>
 801a3e2:	e9da 0100 	ldrd	r0, r1, [sl]
 801a3e6:	e9db 2300 	ldrd	r2, r3, [fp]
 801a3ea:	f7e5 ff4d 	bl	8000288 <__aeabi_dsub>
 801a3ee:	e9da 8900 	ldrd	r8, r9, [sl]
 801a3f2:	4602      	mov	r2, r0
 801a3f4:	460b      	mov	r3, r1
 801a3f6:	4640      	mov	r0, r8
 801a3f8:	4649      	mov	r1, r9
 801a3fa:	f7e6 fb79 	bl	8000af0 <__aeabi_dcmple>
 801a3fe:	b140      	cbz	r0, 801a412 <__ieee754_sqrt+0x136>
 801a400:	f1b4 3fff 	cmp.w	r4, #4294967295
 801a404:	e9da 0100 	ldrd	r0, r1, [sl]
 801a408:	e9db 2300 	ldrd	r2, r3, [fp]
 801a40c:	d126      	bne.n	801a45c <__ieee754_sqrt+0x180>
 801a40e:	3501      	adds	r5, #1
 801a410:	463c      	mov	r4, r7
 801a412:	106a      	asrs	r2, r5, #1
 801a414:	0863      	lsrs	r3, r4, #1
 801a416:	07e9      	lsls	r1, r5, #31
 801a418:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801a41c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801a420:	bf48      	it	mi
 801a422:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801a426:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801a42a:	461c      	mov	r4, r3
 801a42c:	e76d      	b.n	801a30a <__ieee754_sqrt+0x2e>
 801a42e:	0ad3      	lsrs	r3, r2, #11
 801a430:	3815      	subs	r0, #21
 801a432:	0552      	lsls	r2, r2, #21
 801a434:	2b00      	cmp	r3, #0
 801a436:	d0fa      	beq.n	801a42e <__ieee754_sqrt+0x152>
 801a438:	02dc      	lsls	r4, r3, #11
 801a43a:	d50a      	bpl.n	801a452 <__ieee754_sqrt+0x176>
 801a43c:	f1c1 0420 	rsb	r4, r1, #32
 801a440:	fa22 f404 	lsr.w	r4, r2, r4
 801a444:	1e4d      	subs	r5, r1, #1
 801a446:	408a      	lsls	r2, r1
 801a448:	4323      	orrs	r3, r4
 801a44a:	1b41      	subs	r1, r0, r5
 801a44c:	e772      	b.n	801a334 <__ieee754_sqrt+0x58>
 801a44e:	4608      	mov	r0, r1
 801a450:	e7f0      	b.n	801a434 <__ieee754_sqrt+0x158>
 801a452:	005b      	lsls	r3, r3, #1
 801a454:	3101      	adds	r1, #1
 801a456:	e7ef      	b.n	801a438 <__ieee754_sqrt+0x15c>
 801a458:	46e0      	mov	r8, ip
 801a45a:	e7aa      	b.n	801a3b2 <__ieee754_sqrt+0xd6>
 801a45c:	f7e5 ff16 	bl	800028c <__adddf3>
 801a460:	e9da 8900 	ldrd	r8, r9, [sl]
 801a464:	4602      	mov	r2, r0
 801a466:	460b      	mov	r3, r1
 801a468:	4640      	mov	r0, r8
 801a46a:	4649      	mov	r1, r9
 801a46c:	f7e6 fb36 	bl	8000adc <__aeabi_dcmplt>
 801a470:	b120      	cbz	r0, 801a47c <__ieee754_sqrt+0x1a0>
 801a472:	1ca0      	adds	r0, r4, #2
 801a474:	bf08      	it	eq
 801a476:	3501      	addeq	r5, #1
 801a478:	3402      	adds	r4, #2
 801a47a:	e7ca      	b.n	801a412 <__ieee754_sqrt+0x136>
 801a47c:	3401      	adds	r4, #1
 801a47e:	f024 0401 	bic.w	r4, r4, #1
 801a482:	e7c6      	b.n	801a412 <__ieee754_sqrt+0x136>
 801a484:	7ff00000 	.word	0x7ff00000
 801a488:	200001f0 	.word	0x200001f0
 801a48c:	200001f8 	.word	0x200001f8

0801a490 <__ieee754_sqrtf>:
 801a490:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801a494:	4770      	bx	lr
	...

0801a498 <__ieee754_pow>:
 801a498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a49c:	ed2d 8b06 	vpush	{d8-d10}
 801a4a0:	b089      	sub	sp, #36	; 0x24
 801a4a2:	ed8d 1b00 	vstr	d1, [sp]
 801a4a6:	e9dd 2900 	ldrd	r2, r9, [sp]
 801a4aa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801a4ae:	ea58 0102 	orrs.w	r1, r8, r2
 801a4b2:	ec57 6b10 	vmov	r6, r7, d0
 801a4b6:	d115      	bne.n	801a4e4 <__ieee754_pow+0x4c>
 801a4b8:	19b3      	adds	r3, r6, r6
 801a4ba:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801a4be:	4152      	adcs	r2, r2
 801a4c0:	4299      	cmp	r1, r3
 801a4c2:	4b89      	ldr	r3, [pc, #548]	; (801a6e8 <__ieee754_pow+0x250>)
 801a4c4:	4193      	sbcs	r3, r2
 801a4c6:	f080 84d1 	bcs.w	801ae6c <__ieee754_pow+0x9d4>
 801a4ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a4ce:	4630      	mov	r0, r6
 801a4d0:	4639      	mov	r1, r7
 801a4d2:	f7e5 fedb 	bl	800028c <__adddf3>
 801a4d6:	ec41 0b10 	vmov	d0, r0, r1
 801a4da:	b009      	add	sp, #36	; 0x24
 801a4dc:	ecbd 8b06 	vpop	{d8-d10}
 801a4e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4e4:	4b81      	ldr	r3, [pc, #516]	; (801a6ec <__ieee754_pow+0x254>)
 801a4e6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801a4ea:	429c      	cmp	r4, r3
 801a4ec:	ee10 aa10 	vmov	sl, s0
 801a4f0:	463d      	mov	r5, r7
 801a4f2:	dc06      	bgt.n	801a502 <__ieee754_pow+0x6a>
 801a4f4:	d101      	bne.n	801a4fa <__ieee754_pow+0x62>
 801a4f6:	2e00      	cmp	r6, #0
 801a4f8:	d1e7      	bne.n	801a4ca <__ieee754_pow+0x32>
 801a4fa:	4598      	cmp	r8, r3
 801a4fc:	dc01      	bgt.n	801a502 <__ieee754_pow+0x6a>
 801a4fe:	d10f      	bne.n	801a520 <__ieee754_pow+0x88>
 801a500:	b172      	cbz	r2, 801a520 <__ieee754_pow+0x88>
 801a502:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 801a506:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801a50a:	ea55 050a 	orrs.w	r5, r5, sl
 801a50e:	d1dc      	bne.n	801a4ca <__ieee754_pow+0x32>
 801a510:	e9dd 3200 	ldrd	r3, r2, [sp]
 801a514:	18db      	adds	r3, r3, r3
 801a516:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801a51a:	4152      	adcs	r2, r2
 801a51c:	429d      	cmp	r5, r3
 801a51e:	e7d0      	b.n	801a4c2 <__ieee754_pow+0x2a>
 801a520:	2d00      	cmp	r5, #0
 801a522:	da3b      	bge.n	801a59c <__ieee754_pow+0x104>
 801a524:	4b72      	ldr	r3, [pc, #456]	; (801a6f0 <__ieee754_pow+0x258>)
 801a526:	4598      	cmp	r8, r3
 801a528:	dc51      	bgt.n	801a5ce <__ieee754_pow+0x136>
 801a52a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801a52e:	4598      	cmp	r8, r3
 801a530:	f340 84ab 	ble.w	801ae8a <__ieee754_pow+0x9f2>
 801a534:	ea4f 5328 	mov.w	r3, r8, asr #20
 801a538:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a53c:	2b14      	cmp	r3, #20
 801a53e:	dd0f      	ble.n	801a560 <__ieee754_pow+0xc8>
 801a540:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801a544:	fa22 f103 	lsr.w	r1, r2, r3
 801a548:	fa01 f303 	lsl.w	r3, r1, r3
 801a54c:	4293      	cmp	r3, r2
 801a54e:	f040 849c 	bne.w	801ae8a <__ieee754_pow+0x9f2>
 801a552:	f001 0101 	and.w	r1, r1, #1
 801a556:	f1c1 0302 	rsb	r3, r1, #2
 801a55a:	9304      	str	r3, [sp, #16]
 801a55c:	b182      	cbz	r2, 801a580 <__ieee754_pow+0xe8>
 801a55e:	e05f      	b.n	801a620 <__ieee754_pow+0x188>
 801a560:	2a00      	cmp	r2, #0
 801a562:	d15b      	bne.n	801a61c <__ieee754_pow+0x184>
 801a564:	f1c3 0314 	rsb	r3, r3, #20
 801a568:	fa48 f103 	asr.w	r1, r8, r3
 801a56c:	fa01 f303 	lsl.w	r3, r1, r3
 801a570:	4543      	cmp	r3, r8
 801a572:	f040 8487 	bne.w	801ae84 <__ieee754_pow+0x9ec>
 801a576:	f001 0101 	and.w	r1, r1, #1
 801a57a:	f1c1 0302 	rsb	r3, r1, #2
 801a57e:	9304      	str	r3, [sp, #16]
 801a580:	4b5c      	ldr	r3, [pc, #368]	; (801a6f4 <__ieee754_pow+0x25c>)
 801a582:	4598      	cmp	r8, r3
 801a584:	d132      	bne.n	801a5ec <__ieee754_pow+0x154>
 801a586:	f1b9 0f00 	cmp.w	r9, #0
 801a58a:	f280 8477 	bge.w	801ae7c <__ieee754_pow+0x9e4>
 801a58e:	4959      	ldr	r1, [pc, #356]	; (801a6f4 <__ieee754_pow+0x25c>)
 801a590:	4632      	mov	r2, r6
 801a592:	463b      	mov	r3, r7
 801a594:	2000      	movs	r0, #0
 801a596:	f7e6 f959 	bl	800084c <__aeabi_ddiv>
 801a59a:	e79c      	b.n	801a4d6 <__ieee754_pow+0x3e>
 801a59c:	2300      	movs	r3, #0
 801a59e:	9304      	str	r3, [sp, #16]
 801a5a0:	2a00      	cmp	r2, #0
 801a5a2:	d13d      	bne.n	801a620 <__ieee754_pow+0x188>
 801a5a4:	4b51      	ldr	r3, [pc, #324]	; (801a6ec <__ieee754_pow+0x254>)
 801a5a6:	4598      	cmp	r8, r3
 801a5a8:	d1ea      	bne.n	801a580 <__ieee754_pow+0xe8>
 801a5aa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801a5ae:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801a5b2:	ea53 030a 	orrs.w	r3, r3, sl
 801a5b6:	f000 8459 	beq.w	801ae6c <__ieee754_pow+0x9d4>
 801a5ba:	4b4f      	ldr	r3, [pc, #316]	; (801a6f8 <__ieee754_pow+0x260>)
 801a5bc:	429c      	cmp	r4, r3
 801a5be:	dd08      	ble.n	801a5d2 <__ieee754_pow+0x13a>
 801a5c0:	f1b9 0f00 	cmp.w	r9, #0
 801a5c4:	f2c0 8456 	blt.w	801ae74 <__ieee754_pow+0x9dc>
 801a5c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a5cc:	e783      	b.n	801a4d6 <__ieee754_pow+0x3e>
 801a5ce:	2302      	movs	r3, #2
 801a5d0:	e7e5      	b.n	801a59e <__ieee754_pow+0x106>
 801a5d2:	f1b9 0f00 	cmp.w	r9, #0
 801a5d6:	f04f 0000 	mov.w	r0, #0
 801a5da:	f04f 0100 	mov.w	r1, #0
 801a5de:	f6bf af7a 	bge.w	801a4d6 <__ieee754_pow+0x3e>
 801a5e2:	e9dd 0300 	ldrd	r0, r3, [sp]
 801a5e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801a5ea:	e774      	b.n	801a4d6 <__ieee754_pow+0x3e>
 801a5ec:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801a5f0:	d106      	bne.n	801a600 <__ieee754_pow+0x168>
 801a5f2:	4632      	mov	r2, r6
 801a5f4:	463b      	mov	r3, r7
 801a5f6:	4630      	mov	r0, r6
 801a5f8:	4639      	mov	r1, r7
 801a5fa:	f7e5 fffd 	bl	80005f8 <__aeabi_dmul>
 801a5fe:	e76a      	b.n	801a4d6 <__ieee754_pow+0x3e>
 801a600:	4b3e      	ldr	r3, [pc, #248]	; (801a6fc <__ieee754_pow+0x264>)
 801a602:	4599      	cmp	r9, r3
 801a604:	d10c      	bne.n	801a620 <__ieee754_pow+0x188>
 801a606:	2d00      	cmp	r5, #0
 801a608:	db0a      	blt.n	801a620 <__ieee754_pow+0x188>
 801a60a:	ec47 6b10 	vmov	d0, r6, r7
 801a60e:	b009      	add	sp, #36	; 0x24
 801a610:	ecbd 8b06 	vpop	{d8-d10}
 801a614:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a618:	f7ff be60 	b.w	801a2dc <__ieee754_sqrt>
 801a61c:	2300      	movs	r3, #0
 801a61e:	9304      	str	r3, [sp, #16]
 801a620:	ec47 6b10 	vmov	d0, r6, r7
 801a624:	f000 fc62 	bl	801aeec <fabs>
 801a628:	ec51 0b10 	vmov	r0, r1, d0
 801a62c:	f1ba 0f00 	cmp.w	sl, #0
 801a630:	d129      	bne.n	801a686 <__ieee754_pow+0x1ee>
 801a632:	b124      	cbz	r4, 801a63e <__ieee754_pow+0x1a6>
 801a634:	4b2f      	ldr	r3, [pc, #188]	; (801a6f4 <__ieee754_pow+0x25c>)
 801a636:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d123      	bne.n	801a686 <__ieee754_pow+0x1ee>
 801a63e:	f1b9 0f00 	cmp.w	r9, #0
 801a642:	da05      	bge.n	801a650 <__ieee754_pow+0x1b8>
 801a644:	4602      	mov	r2, r0
 801a646:	460b      	mov	r3, r1
 801a648:	2000      	movs	r0, #0
 801a64a:	492a      	ldr	r1, [pc, #168]	; (801a6f4 <__ieee754_pow+0x25c>)
 801a64c:	f7e6 f8fe 	bl	800084c <__aeabi_ddiv>
 801a650:	2d00      	cmp	r5, #0
 801a652:	f6bf af40 	bge.w	801a4d6 <__ieee754_pow+0x3e>
 801a656:	9b04      	ldr	r3, [sp, #16]
 801a658:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a65c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a660:	431c      	orrs	r4, r3
 801a662:	d108      	bne.n	801a676 <__ieee754_pow+0x1de>
 801a664:	4602      	mov	r2, r0
 801a666:	460b      	mov	r3, r1
 801a668:	4610      	mov	r0, r2
 801a66a:	4619      	mov	r1, r3
 801a66c:	f7e5 fe0c 	bl	8000288 <__aeabi_dsub>
 801a670:	4602      	mov	r2, r0
 801a672:	460b      	mov	r3, r1
 801a674:	e78f      	b.n	801a596 <__ieee754_pow+0xfe>
 801a676:	9b04      	ldr	r3, [sp, #16]
 801a678:	2b01      	cmp	r3, #1
 801a67a:	f47f af2c 	bne.w	801a4d6 <__ieee754_pow+0x3e>
 801a67e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a682:	4619      	mov	r1, r3
 801a684:	e727      	b.n	801a4d6 <__ieee754_pow+0x3e>
 801a686:	0feb      	lsrs	r3, r5, #31
 801a688:	3b01      	subs	r3, #1
 801a68a:	9306      	str	r3, [sp, #24]
 801a68c:	9a06      	ldr	r2, [sp, #24]
 801a68e:	9b04      	ldr	r3, [sp, #16]
 801a690:	4313      	orrs	r3, r2
 801a692:	d102      	bne.n	801a69a <__ieee754_pow+0x202>
 801a694:	4632      	mov	r2, r6
 801a696:	463b      	mov	r3, r7
 801a698:	e7e6      	b.n	801a668 <__ieee754_pow+0x1d0>
 801a69a:	4b19      	ldr	r3, [pc, #100]	; (801a700 <__ieee754_pow+0x268>)
 801a69c:	4598      	cmp	r8, r3
 801a69e:	f340 80fb 	ble.w	801a898 <__ieee754_pow+0x400>
 801a6a2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a6a6:	4598      	cmp	r8, r3
 801a6a8:	4b13      	ldr	r3, [pc, #76]	; (801a6f8 <__ieee754_pow+0x260>)
 801a6aa:	dd0c      	ble.n	801a6c6 <__ieee754_pow+0x22e>
 801a6ac:	429c      	cmp	r4, r3
 801a6ae:	dc0f      	bgt.n	801a6d0 <__ieee754_pow+0x238>
 801a6b0:	f1b9 0f00 	cmp.w	r9, #0
 801a6b4:	da0f      	bge.n	801a6d6 <__ieee754_pow+0x23e>
 801a6b6:	2000      	movs	r0, #0
 801a6b8:	b009      	add	sp, #36	; 0x24
 801a6ba:	ecbd 8b06 	vpop	{d8-d10}
 801a6be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c2:	f000 bcc2 	b.w	801b04a <__math_oflow>
 801a6c6:	429c      	cmp	r4, r3
 801a6c8:	dbf2      	blt.n	801a6b0 <__ieee754_pow+0x218>
 801a6ca:	4b0a      	ldr	r3, [pc, #40]	; (801a6f4 <__ieee754_pow+0x25c>)
 801a6cc:	429c      	cmp	r4, r3
 801a6ce:	dd19      	ble.n	801a704 <__ieee754_pow+0x26c>
 801a6d0:	f1b9 0f00 	cmp.w	r9, #0
 801a6d4:	dcef      	bgt.n	801a6b6 <__ieee754_pow+0x21e>
 801a6d6:	2000      	movs	r0, #0
 801a6d8:	b009      	add	sp, #36	; 0x24
 801a6da:	ecbd 8b06 	vpop	{d8-d10}
 801a6de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6e2:	f000 bca9 	b.w	801b038 <__math_uflow>
 801a6e6:	bf00      	nop
 801a6e8:	fff00000 	.word	0xfff00000
 801a6ec:	7ff00000 	.word	0x7ff00000
 801a6f0:	433fffff 	.word	0x433fffff
 801a6f4:	3ff00000 	.word	0x3ff00000
 801a6f8:	3fefffff 	.word	0x3fefffff
 801a6fc:	3fe00000 	.word	0x3fe00000
 801a700:	41e00000 	.word	0x41e00000
 801a704:	4b60      	ldr	r3, [pc, #384]	; (801a888 <__ieee754_pow+0x3f0>)
 801a706:	2200      	movs	r2, #0
 801a708:	f7e5 fdbe 	bl	8000288 <__aeabi_dsub>
 801a70c:	a354      	add	r3, pc, #336	; (adr r3, 801a860 <__ieee754_pow+0x3c8>)
 801a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a712:	4604      	mov	r4, r0
 801a714:	460d      	mov	r5, r1
 801a716:	f7e5 ff6f 	bl	80005f8 <__aeabi_dmul>
 801a71a:	a353      	add	r3, pc, #332	; (adr r3, 801a868 <__ieee754_pow+0x3d0>)
 801a71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a720:	4606      	mov	r6, r0
 801a722:	460f      	mov	r7, r1
 801a724:	4620      	mov	r0, r4
 801a726:	4629      	mov	r1, r5
 801a728:	f7e5 ff66 	bl	80005f8 <__aeabi_dmul>
 801a72c:	4b57      	ldr	r3, [pc, #348]	; (801a88c <__ieee754_pow+0x3f4>)
 801a72e:	4682      	mov	sl, r0
 801a730:	468b      	mov	fp, r1
 801a732:	2200      	movs	r2, #0
 801a734:	4620      	mov	r0, r4
 801a736:	4629      	mov	r1, r5
 801a738:	f7e5 ff5e 	bl	80005f8 <__aeabi_dmul>
 801a73c:	4602      	mov	r2, r0
 801a73e:	460b      	mov	r3, r1
 801a740:	a14b      	add	r1, pc, #300	; (adr r1, 801a870 <__ieee754_pow+0x3d8>)
 801a742:	e9d1 0100 	ldrd	r0, r1, [r1]
 801a746:	f7e5 fd9f 	bl	8000288 <__aeabi_dsub>
 801a74a:	4622      	mov	r2, r4
 801a74c:	462b      	mov	r3, r5
 801a74e:	f7e5 ff53 	bl	80005f8 <__aeabi_dmul>
 801a752:	4602      	mov	r2, r0
 801a754:	460b      	mov	r3, r1
 801a756:	2000      	movs	r0, #0
 801a758:	494d      	ldr	r1, [pc, #308]	; (801a890 <__ieee754_pow+0x3f8>)
 801a75a:	f7e5 fd95 	bl	8000288 <__aeabi_dsub>
 801a75e:	4622      	mov	r2, r4
 801a760:	4680      	mov	r8, r0
 801a762:	4689      	mov	r9, r1
 801a764:	462b      	mov	r3, r5
 801a766:	4620      	mov	r0, r4
 801a768:	4629      	mov	r1, r5
 801a76a:	f7e5 ff45 	bl	80005f8 <__aeabi_dmul>
 801a76e:	4602      	mov	r2, r0
 801a770:	460b      	mov	r3, r1
 801a772:	4640      	mov	r0, r8
 801a774:	4649      	mov	r1, r9
 801a776:	f7e5 ff3f 	bl	80005f8 <__aeabi_dmul>
 801a77a:	a33f      	add	r3, pc, #252	; (adr r3, 801a878 <__ieee754_pow+0x3e0>)
 801a77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a780:	f7e5 ff3a 	bl	80005f8 <__aeabi_dmul>
 801a784:	4602      	mov	r2, r0
 801a786:	460b      	mov	r3, r1
 801a788:	4650      	mov	r0, sl
 801a78a:	4659      	mov	r1, fp
 801a78c:	f7e5 fd7c 	bl	8000288 <__aeabi_dsub>
 801a790:	4602      	mov	r2, r0
 801a792:	460b      	mov	r3, r1
 801a794:	4680      	mov	r8, r0
 801a796:	4689      	mov	r9, r1
 801a798:	4630      	mov	r0, r6
 801a79a:	4639      	mov	r1, r7
 801a79c:	f7e5 fd76 	bl	800028c <__adddf3>
 801a7a0:	2000      	movs	r0, #0
 801a7a2:	4632      	mov	r2, r6
 801a7a4:	463b      	mov	r3, r7
 801a7a6:	4604      	mov	r4, r0
 801a7a8:	460d      	mov	r5, r1
 801a7aa:	f7e5 fd6d 	bl	8000288 <__aeabi_dsub>
 801a7ae:	4602      	mov	r2, r0
 801a7b0:	460b      	mov	r3, r1
 801a7b2:	4640      	mov	r0, r8
 801a7b4:	4649      	mov	r1, r9
 801a7b6:	f7e5 fd67 	bl	8000288 <__aeabi_dsub>
 801a7ba:	9b04      	ldr	r3, [sp, #16]
 801a7bc:	9a06      	ldr	r2, [sp, #24]
 801a7be:	3b01      	subs	r3, #1
 801a7c0:	4313      	orrs	r3, r2
 801a7c2:	4682      	mov	sl, r0
 801a7c4:	468b      	mov	fp, r1
 801a7c6:	f040 81e7 	bne.w	801ab98 <__ieee754_pow+0x700>
 801a7ca:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 801a880 <__ieee754_pow+0x3e8>
 801a7ce:	eeb0 8a47 	vmov.f32	s16, s14
 801a7d2:	eef0 8a67 	vmov.f32	s17, s15
 801a7d6:	e9dd 6700 	ldrd	r6, r7, [sp]
 801a7da:	2600      	movs	r6, #0
 801a7dc:	4632      	mov	r2, r6
 801a7de:	463b      	mov	r3, r7
 801a7e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a7e4:	f7e5 fd50 	bl	8000288 <__aeabi_dsub>
 801a7e8:	4622      	mov	r2, r4
 801a7ea:	462b      	mov	r3, r5
 801a7ec:	f7e5 ff04 	bl	80005f8 <__aeabi_dmul>
 801a7f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a7f4:	4680      	mov	r8, r0
 801a7f6:	4689      	mov	r9, r1
 801a7f8:	4650      	mov	r0, sl
 801a7fa:	4659      	mov	r1, fp
 801a7fc:	f7e5 fefc 	bl	80005f8 <__aeabi_dmul>
 801a800:	4602      	mov	r2, r0
 801a802:	460b      	mov	r3, r1
 801a804:	4640      	mov	r0, r8
 801a806:	4649      	mov	r1, r9
 801a808:	f7e5 fd40 	bl	800028c <__adddf3>
 801a80c:	4632      	mov	r2, r6
 801a80e:	463b      	mov	r3, r7
 801a810:	4680      	mov	r8, r0
 801a812:	4689      	mov	r9, r1
 801a814:	4620      	mov	r0, r4
 801a816:	4629      	mov	r1, r5
 801a818:	f7e5 feee 	bl	80005f8 <__aeabi_dmul>
 801a81c:	460b      	mov	r3, r1
 801a81e:	4604      	mov	r4, r0
 801a820:	460d      	mov	r5, r1
 801a822:	4602      	mov	r2, r0
 801a824:	4649      	mov	r1, r9
 801a826:	4640      	mov	r0, r8
 801a828:	f7e5 fd30 	bl	800028c <__adddf3>
 801a82c:	4b19      	ldr	r3, [pc, #100]	; (801a894 <__ieee754_pow+0x3fc>)
 801a82e:	4299      	cmp	r1, r3
 801a830:	ec45 4b19 	vmov	d9, r4, r5
 801a834:	4606      	mov	r6, r0
 801a836:	460f      	mov	r7, r1
 801a838:	468b      	mov	fp, r1
 801a83a:	f340 82f0 	ble.w	801ae1e <__ieee754_pow+0x986>
 801a83e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a842:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a846:	4303      	orrs	r3, r0
 801a848:	f000 81e4 	beq.w	801ac14 <__ieee754_pow+0x77c>
 801a84c:	ec51 0b18 	vmov	r0, r1, d8
 801a850:	2200      	movs	r2, #0
 801a852:	2300      	movs	r3, #0
 801a854:	f7e6 f942 	bl	8000adc <__aeabi_dcmplt>
 801a858:	3800      	subs	r0, #0
 801a85a:	bf18      	it	ne
 801a85c:	2001      	movne	r0, #1
 801a85e:	e72b      	b.n	801a6b8 <__ieee754_pow+0x220>
 801a860:	60000000 	.word	0x60000000
 801a864:	3ff71547 	.word	0x3ff71547
 801a868:	f85ddf44 	.word	0xf85ddf44
 801a86c:	3e54ae0b 	.word	0x3e54ae0b
 801a870:	55555555 	.word	0x55555555
 801a874:	3fd55555 	.word	0x3fd55555
 801a878:	652b82fe 	.word	0x652b82fe
 801a87c:	3ff71547 	.word	0x3ff71547
 801a880:	00000000 	.word	0x00000000
 801a884:	bff00000 	.word	0xbff00000
 801a888:	3ff00000 	.word	0x3ff00000
 801a88c:	3fd00000 	.word	0x3fd00000
 801a890:	3fe00000 	.word	0x3fe00000
 801a894:	408fffff 	.word	0x408fffff
 801a898:	4bd5      	ldr	r3, [pc, #852]	; (801abf0 <__ieee754_pow+0x758>)
 801a89a:	402b      	ands	r3, r5
 801a89c:	2200      	movs	r2, #0
 801a89e:	b92b      	cbnz	r3, 801a8ac <__ieee754_pow+0x414>
 801a8a0:	4bd4      	ldr	r3, [pc, #848]	; (801abf4 <__ieee754_pow+0x75c>)
 801a8a2:	f7e5 fea9 	bl	80005f8 <__aeabi_dmul>
 801a8a6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801a8aa:	460c      	mov	r4, r1
 801a8ac:	1523      	asrs	r3, r4, #20
 801a8ae:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a8b2:	4413      	add	r3, r2
 801a8b4:	9305      	str	r3, [sp, #20]
 801a8b6:	4bd0      	ldr	r3, [pc, #832]	; (801abf8 <__ieee754_pow+0x760>)
 801a8b8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a8bc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801a8c0:	429c      	cmp	r4, r3
 801a8c2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801a8c6:	dd08      	ble.n	801a8da <__ieee754_pow+0x442>
 801a8c8:	4bcc      	ldr	r3, [pc, #816]	; (801abfc <__ieee754_pow+0x764>)
 801a8ca:	429c      	cmp	r4, r3
 801a8cc:	f340 8162 	ble.w	801ab94 <__ieee754_pow+0x6fc>
 801a8d0:	9b05      	ldr	r3, [sp, #20]
 801a8d2:	3301      	adds	r3, #1
 801a8d4:	9305      	str	r3, [sp, #20]
 801a8d6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801a8da:	2400      	movs	r4, #0
 801a8dc:	00e3      	lsls	r3, r4, #3
 801a8de:	9307      	str	r3, [sp, #28]
 801a8e0:	4bc7      	ldr	r3, [pc, #796]	; (801ac00 <__ieee754_pow+0x768>)
 801a8e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a8e6:	ed93 7b00 	vldr	d7, [r3]
 801a8ea:	4629      	mov	r1, r5
 801a8ec:	ec53 2b17 	vmov	r2, r3, d7
 801a8f0:	eeb0 9a47 	vmov.f32	s18, s14
 801a8f4:	eef0 9a67 	vmov.f32	s19, s15
 801a8f8:	4682      	mov	sl, r0
 801a8fa:	f7e5 fcc5 	bl	8000288 <__aeabi_dsub>
 801a8fe:	4652      	mov	r2, sl
 801a900:	4606      	mov	r6, r0
 801a902:	460f      	mov	r7, r1
 801a904:	462b      	mov	r3, r5
 801a906:	ec51 0b19 	vmov	r0, r1, d9
 801a90a:	f7e5 fcbf 	bl	800028c <__adddf3>
 801a90e:	4602      	mov	r2, r0
 801a910:	460b      	mov	r3, r1
 801a912:	2000      	movs	r0, #0
 801a914:	49bb      	ldr	r1, [pc, #748]	; (801ac04 <__ieee754_pow+0x76c>)
 801a916:	f7e5 ff99 	bl	800084c <__aeabi_ddiv>
 801a91a:	ec41 0b1a 	vmov	d10, r0, r1
 801a91e:	4602      	mov	r2, r0
 801a920:	460b      	mov	r3, r1
 801a922:	4630      	mov	r0, r6
 801a924:	4639      	mov	r1, r7
 801a926:	f7e5 fe67 	bl	80005f8 <__aeabi_dmul>
 801a92a:	2300      	movs	r3, #0
 801a92c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801a930:	9302      	str	r3, [sp, #8]
 801a932:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801a936:	46ab      	mov	fp, r5
 801a938:	106d      	asrs	r5, r5, #1
 801a93a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801a93e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801a942:	ec41 0b18 	vmov	d8, r0, r1
 801a946:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801a94a:	2200      	movs	r2, #0
 801a94c:	4640      	mov	r0, r8
 801a94e:	4649      	mov	r1, r9
 801a950:	4614      	mov	r4, r2
 801a952:	461d      	mov	r5, r3
 801a954:	f7e5 fe50 	bl	80005f8 <__aeabi_dmul>
 801a958:	4602      	mov	r2, r0
 801a95a:	460b      	mov	r3, r1
 801a95c:	4630      	mov	r0, r6
 801a95e:	4639      	mov	r1, r7
 801a960:	f7e5 fc92 	bl	8000288 <__aeabi_dsub>
 801a964:	ec53 2b19 	vmov	r2, r3, d9
 801a968:	4606      	mov	r6, r0
 801a96a:	460f      	mov	r7, r1
 801a96c:	4620      	mov	r0, r4
 801a96e:	4629      	mov	r1, r5
 801a970:	f7e5 fc8a 	bl	8000288 <__aeabi_dsub>
 801a974:	4602      	mov	r2, r0
 801a976:	460b      	mov	r3, r1
 801a978:	4650      	mov	r0, sl
 801a97a:	4659      	mov	r1, fp
 801a97c:	f7e5 fc84 	bl	8000288 <__aeabi_dsub>
 801a980:	4642      	mov	r2, r8
 801a982:	464b      	mov	r3, r9
 801a984:	f7e5 fe38 	bl	80005f8 <__aeabi_dmul>
 801a988:	4602      	mov	r2, r0
 801a98a:	460b      	mov	r3, r1
 801a98c:	4630      	mov	r0, r6
 801a98e:	4639      	mov	r1, r7
 801a990:	f7e5 fc7a 	bl	8000288 <__aeabi_dsub>
 801a994:	ec53 2b1a 	vmov	r2, r3, d10
 801a998:	f7e5 fe2e 	bl	80005f8 <__aeabi_dmul>
 801a99c:	ec53 2b18 	vmov	r2, r3, d8
 801a9a0:	ec41 0b19 	vmov	d9, r0, r1
 801a9a4:	ec51 0b18 	vmov	r0, r1, d8
 801a9a8:	f7e5 fe26 	bl	80005f8 <__aeabi_dmul>
 801a9ac:	a37c      	add	r3, pc, #496	; (adr r3, 801aba0 <__ieee754_pow+0x708>)
 801a9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9b2:	4604      	mov	r4, r0
 801a9b4:	460d      	mov	r5, r1
 801a9b6:	f7e5 fe1f 	bl	80005f8 <__aeabi_dmul>
 801a9ba:	a37b      	add	r3, pc, #492	; (adr r3, 801aba8 <__ieee754_pow+0x710>)
 801a9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9c0:	f7e5 fc64 	bl	800028c <__adddf3>
 801a9c4:	4622      	mov	r2, r4
 801a9c6:	462b      	mov	r3, r5
 801a9c8:	f7e5 fe16 	bl	80005f8 <__aeabi_dmul>
 801a9cc:	a378      	add	r3, pc, #480	; (adr r3, 801abb0 <__ieee754_pow+0x718>)
 801a9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9d2:	f7e5 fc5b 	bl	800028c <__adddf3>
 801a9d6:	4622      	mov	r2, r4
 801a9d8:	462b      	mov	r3, r5
 801a9da:	f7e5 fe0d 	bl	80005f8 <__aeabi_dmul>
 801a9de:	a376      	add	r3, pc, #472	; (adr r3, 801abb8 <__ieee754_pow+0x720>)
 801a9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9e4:	f7e5 fc52 	bl	800028c <__adddf3>
 801a9e8:	4622      	mov	r2, r4
 801a9ea:	462b      	mov	r3, r5
 801a9ec:	f7e5 fe04 	bl	80005f8 <__aeabi_dmul>
 801a9f0:	a373      	add	r3, pc, #460	; (adr r3, 801abc0 <__ieee754_pow+0x728>)
 801a9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a9f6:	f7e5 fc49 	bl	800028c <__adddf3>
 801a9fa:	4622      	mov	r2, r4
 801a9fc:	462b      	mov	r3, r5
 801a9fe:	f7e5 fdfb 	bl	80005f8 <__aeabi_dmul>
 801aa02:	a371      	add	r3, pc, #452	; (adr r3, 801abc8 <__ieee754_pow+0x730>)
 801aa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aa08:	f7e5 fc40 	bl	800028c <__adddf3>
 801aa0c:	4622      	mov	r2, r4
 801aa0e:	4606      	mov	r6, r0
 801aa10:	460f      	mov	r7, r1
 801aa12:	462b      	mov	r3, r5
 801aa14:	4620      	mov	r0, r4
 801aa16:	4629      	mov	r1, r5
 801aa18:	f7e5 fdee 	bl	80005f8 <__aeabi_dmul>
 801aa1c:	4602      	mov	r2, r0
 801aa1e:	460b      	mov	r3, r1
 801aa20:	4630      	mov	r0, r6
 801aa22:	4639      	mov	r1, r7
 801aa24:	f7e5 fde8 	bl	80005f8 <__aeabi_dmul>
 801aa28:	4642      	mov	r2, r8
 801aa2a:	4604      	mov	r4, r0
 801aa2c:	460d      	mov	r5, r1
 801aa2e:	464b      	mov	r3, r9
 801aa30:	ec51 0b18 	vmov	r0, r1, d8
 801aa34:	f7e5 fc2a 	bl	800028c <__adddf3>
 801aa38:	ec53 2b19 	vmov	r2, r3, d9
 801aa3c:	f7e5 fddc 	bl	80005f8 <__aeabi_dmul>
 801aa40:	4622      	mov	r2, r4
 801aa42:	462b      	mov	r3, r5
 801aa44:	f7e5 fc22 	bl	800028c <__adddf3>
 801aa48:	4642      	mov	r2, r8
 801aa4a:	4682      	mov	sl, r0
 801aa4c:	468b      	mov	fp, r1
 801aa4e:	464b      	mov	r3, r9
 801aa50:	4640      	mov	r0, r8
 801aa52:	4649      	mov	r1, r9
 801aa54:	f7e5 fdd0 	bl	80005f8 <__aeabi_dmul>
 801aa58:	4b6b      	ldr	r3, [pc, #428]	; (801ac08 <__ieee754_pow+0x770>)
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	4606      	mov	r6, r0
 801aa5e:	460f      	mov	r7, r1
 801aa60:	f7e5 fc14 	bl	800028c <__adddf3>
 801aa64:	4652      	mov	r2, sl
 801aa66:	465b      	mov	r3, fp
 801aa68:	f7e5 fc10 	bl	800028c <__adddf3>
 801aa6c:	2000      	movs	r0, #0
 801aa6e:	4604      	mov	r4, r0
 801aa70:	460d      	mov	r5, r1
 801aa72:	4602      	mov	r2, r0
 801aa74:	460b      	mov	r3, r1
 801aa76:	4640      	mov	r0, r8
 801aa78:	4649      	mov	r1, r9
 801aa7a:	f7e5 fdbd 	bl	80005f8 <__aeabi_dmul>
 801aa7e:	4b62      	ldr	r3, [pc, #392]	; (801ac08 <__ieee754_pow+0x770>)
 801aa80:	4680      	mov	r8, r0
 801aa82:	4689      	mov	r9, r1
 801aa84:	2200      	movs	r2, #0
 801aa86:	4620      	mov	r0, r4
 801aa88:	4629      	mov	r1, r5
 801aa8a:	f7e5 fbfd 	bl	8000288 <__aeabi_dsub>
 801aa8e:	4632      	mov	r2, r6
 801aa90:	463b      	mov	r3, r7
 801aa92:	f7e5 fbf9 	bl	8000288 <__aeabi_dsub>
 801aa96:	4602      	mov	r2, r0
 801aa98:	460b      	mov	r3, r1
 801aa9a:	4650      	mov	r0, sl
 801aa9c:	4659      	mov	r1, fp
 801aa9e:	f7e5 fbf3 	bl	8000288 <__aeabi_dsub>
 801aaa2:	ec53 2b18 	vmov	r2, r3, d8
 801aaa6:	f7e5 fda7 	bl	80005f8 <__aeabi_dmul>
 801aaaa:	4622      	mov	r2, r4
 801aaac:	4606      	mov	r6, r0
 801aaae:	460f      	mov	r7, r1
 801aab0:	462b      	mov	r3, r5
 801aab2:	ec51 0b19 	vmov	r0, r1, d9
 801aab6:	f7e5 fd9f 	bl	80005f8 <__aeabi_dmul>
 801aaba:	4602      	mov	r2, r0
 801aabc:	460b      	mov	r3, r1
 801aabe:	4630      	mov	r0, r6
 801aac0:	4639      	mov	r1, r7
 801aac2:	f7e5 fbe3 	bl	800028c <__adddf3>
 801aac6:	4606      	mov	r6, r0
 801aac8:	460f      	mov	r7, r1
 801aaca:	4602      	mov	r2, r0
 801aacc:	460b      	mov	r3, r1
 801aace:	4640      	mov	r0, r8
 801aad0:	4649      	mov	r1, r9
 801aad2:	f7e5 fbdb 	bl	800028c <__adddf3>
 801aad6:	a33e      	add	r3, pc, #248	; (adr r3, 801abd0 <__ieee754_pow+0x738>)
 801aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801aadc:	2000      	movs	r0, #0
 801aade:	4604      	mov	r4, r0
 801aae0:	460d      	mov	r5, r1
 801aae2:	f7e5 fd89 	bl	80005f8 <__aeabi_dmul>
 801aae6:	4642      	mov	r2, r8
 801aae8:	ec41 0b18 	vmov	d8, r0, r1
 801aaec:	464b      	mov	r3, r9
 801aaee:	4620      	mov	r0, r4
 801aaf0:	4629      	mov	r1, r5
 801aaf2:	f7e5 fbc9 	bl	8000288 <__aeabi_dsub>
 801aaf6:	4602      	mov	r2, r0
 801aaf8:	460b      	mov	r3, r1
 801aafa:	4630      	mov	r0, r6
 801aafc:	4639      	mov	r1, r7
 801aafe:	f7e5 fbc3 	bl	8000288 <__aeabi_dsub>
 801ab02:	a335      	add	r3, pc, #212	; (adr r3, 801abd8 <__ieee754_pow+0x740>)
 801ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab08:	f7e5 fd76 	bl	80005f8 <__aeabi_dmul>
 801ab0c:	a334      	add	r3, pc, #208	; (adr r3, 801abe0 <__ieee754_pow+0x748>)
 801ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab12:	4606      	mov	r6, r0
 801ab14:	460f      	mov	r7, r1
 801ab16:	4620      	mov	r0, r4
 801ab18:	4629      	mov	r1, r5
 801ab1a:	f7e5 fd6d 	bl	80005f8 <__aeabi_dmul>
 801ab1e:	4602      	mov	r2, r0
 801ab20:	460b      	mov	r3, r1
 801ab22:	4630      	mov	r0, r6
 801ab24:	4639      	mov	r1, r7
 801ab26:	f7e5 fbb1 	bl	800028c <__adddf3>
 801ab2a:	9a07      	ldr	r2, [sp, #28]
 801ab2c:	4b37      	ldr	r3, [pc, #220]	; (801ac0c <__ieee754_pow+0x774>)
 801ab2e:	4413      	add	r3, r2
 801ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ab34:	f7e5 fbaa 	bl	800028c <__adddf3>
 801ab38:	4682      	mov	sl, r0
 801ab3a:	9805      	ldr	r0, [sp, #20]
 801ab3c:	468b      	mov	fp, r1
 801ab3e:	f7e5 fcf1 	bl	8000524 <__aeabi_i2d>
 801ab42:	9a07      	ldr	r2, [sp, #28]
 801ab44:	4b32      	ldr	r3, [pc, #200]	; (801ac10 <__ieee754_pow+0x778>)
 801ab46:	4413      	add	r3, r2
 801ab48:	e9d3 8900 	ldrd	r8, r9, [r3]
 801ab4c:	4606      	mov	r6, r0
 801ab4e:	460f      	mov	r7, r1
 801ab50:	4652      	mov	r2, sl
 801ab52:	465b      	mov	r3, fp
 801ab54:	ec51 0b18 	vmov	r0, r1, d8
 801ab58:	f7e5 fb98 	bl	800028c <__adddf3>
 801ab5c:	4642      	mov	r2, r8
 801ab5e:	464b      	mov	r3, r9
 801ab60:	f7e5 fb94 	bl	800028c <__adddf3>
 801ab64:	4632      	mov	r2, r6
 801ab66:	463b      	mov	r3, r7
 801ab68:	f7e5 fb90 	bl	800028c <__adddf3>
 801ab6c:	2000      	movs	r0, #0
 801ab6e:	4632      	mov	r2, r6
 801ab70:	463b      	mov	r3, r7
 801ab72:	4604      	mov	r4, r0
 801ab74:	460d      	mov	r5, r1
 801ab76:	f7e5 fb87 	bl	8000288 <__aeabi_dsub>
 801ab7a:	4642      	mov	r2, r8
 801ab7c:	464b      	mov	r3, r9
 801ab7e:	f7e5 fb83 	bl	8000288 <__aeabi_dsub>
 801ab82:	ec53 2b18 	vmov	r2, r3, d8
 801ab86:	f7e5 fb7f 	bl	8000288 <__aeabi_dsub>
 801ab8a:	4602      	mov	r2, r0
 801ab8c:	460b      	mov	r3, r1
 801ab8e:	4650      	mov	r0, sl
 801ab90:	4659      	mov	r1, fp
 801ab92:	e610      	b.n	801a7b6 <__ieee754_pow+0x31e>
 801ab94:	2401      	movs	r4, #1
 801ab96:	e6a1      	b.n	801a8dc <__ieee754_pow+0x444>
 801ab98:	ed9f 7b13 	vldr	d7, [pc, #76]	; 801abe8 <__ieee754_pow+0x750>
 801ab9c:	e617      	b.n	801a7ce <__ieee754_pow+0x336>
 801ab9e:	bf00      	nop
 801aba0:	4a454eef 	.word	0x4a454eef
 801aba4:	3fca7e28 	.word	0x3fca7e28
 801aba8:	93c9db65 	.word	0x93c9db65
 801abac:	3fcd864a 	.word	0x3fcd864a
 801abb0:	a91d4101 	.word	0xa91d4101
 801abb4:	3fd17460 	.word	0x3fd17460
 801abb8:	518f264d 	.word	0x518f264d
 801abbc:	3fd55555 	.word	0x3fd55555
 801abc0:	db6fabff 	.word	0xdb6fabff
 801abc4:	3fdb6db6 	.word	0x3fdb6db6
 801abc8:	33333303 	.word	0x33333303
 801abcc:	3fe33333 	.word	0x3fe33333
 801abd0:	e0000000 	.word	0xe0000000
 801abd4:	3feec709 	.word	0x3feec709
 801abd8:	dc3a03fd 	.word	0xdc3a03fd
 801abdc:	3feec709 	.word	0x3feec709
 801abe0:	145b01f5 	.word	0x145b01f5
 801abe4:	be3e2fe0 	.word	0xbe3e2fe0
 801abe8:	00000000 	.word	0x00000000
 801abec:	3ff00000 	.word	0x3ff00000
 801abf0:	7ff00000 	.word	0x7ff00000
 801abf4:	43400000 	.word	0x43400000
 801abf8:	0003988e 	.word	0x0003988e
 801abfc:	000bb679 	.word	0x000bb679
 801ac00:	0801ba50 	.word	0x0801ba50
 801ac04:	3ff00000 	.word	0x3ff00000
 801ac08:	40080000 	.word	0x40080000
 801ac0c:	0801ba70 	.word	0x0801ba70
 801ac10:	0801ba60 	.word	0x0801ba60
 801ac14:	a3b3      	add	r3, pc, #716	; (adr r3, 801aee4 <__ieee754_pow+0xa4c>)
 801ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ac1a:	4640      	mov	r0, r8
 801ac1c:	4649      	mov	r1, r9
 801ac1e:	f7e5 fb35 	bl	800028c <__adddf3>
 801ac22:	4622      	mov	r2, r4
 801ac24:	ec41 0b1a 	vmov	d10, r0, r1
 801ac28:	462b      	mov	r3, r5
 801ac2a:	4630      	mov	r0, r6
 801ac2c:	4639      	mov	r1, r7
 801ac2e:	f7e5 fb2b 	bl	8000288 <__aeabi_dsub>
 801ac32:	4602      	mov	r2, r0
 801ac34:	460b      	mov	r3, r1
 801ac36:	ec51 0b1a 	vmov	r0, r1, d10
 801ac3a:	f7e5 ff6d 	bl	8000b18 <__aeabi_dcmpgt>
 801ac3e:	2800      	cmp	r0, #0
 801ac40:	f47f ae04 	bne.w	801a84c <__ieee754_pow+0x3b4>
 801ac44:	4aa2      	ldr	r2, [pc, #648]	; (801aed0 <__ieee754_pow+0xa38>)
 801ac46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ac4a:	4293      	cmp	r3, r2
 801ac4c:	f340 8107 	ble.w	801ae5e <__ieee754_pow+0x9c6>
 801ac50:	151b      	asrs	r3, r3, #20
 801ac52:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801ac56:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801ac5a:	fa4a fa03 	asr.w	sl, sl, r3
 801ac5e:	44da      	add	sl, fp
 801ac60:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801ac64:	489b      	ldr	r0, [pc, #620]	; (801aed4 <__ieee754_pow+0xa3c>)
 801ac66:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801ac6a:	4108      	asrs	r0, r1
 801ac6c:	ea00 030a 	and.w	r3, r0, sl
 801ac70:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801ac74:	f1c1 0114 	rsb	r1, r1, #20
 801ac78:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801ac7c:	fa4a fa01 	asr.w	sl, sl, r1
 801ac80:	f1bb 0f00 	cmp.w	fp, #0
 801ac84:	f04f 0200 	mov.w	r2, #0
 801ac88:	4620      	mov	r0, r4
 801ac8a:	4629      	mov	r1, r5
 801ac8c:	bfb8      	it	lt
 801ac8e:	f1ca 0a00 	rsblt	sl, sl, #0
 801ac92:	f7e5 faf9 	bl	8000288 <__aeabi_dsub>
 801ac96:	ec41 0b19 	vmov	d9, r0, r1
 801ac9a:	4642      	mov	r2, r8
 801ac9c:	464b      	mov	r3, r9
 801ac9e:	ec51 0b19 	vmov	r0, r1, d9
 801aca2:	f7e5 faf3 	bl	800028c <__adddf3>
 801aca6:	a37a      	add	r3, pc, #488	; (adr r3, 801ae90 <__ieee754_pow+0x9f8>)
 801aca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acac:	2000      	movs	r0, #0
 801acae:	4604      	mov	r4, r0
 801acb0:	460d      	mov	r5, r1
 801acb2:	f7e5 fca1 	bl	80005f8 <__aeabi_dmul>
 801acb6:	ec53 2b19 	vmov	r2, r3, d9
 801acba:	4606      	mov	r6, r0
 801acbc:	460f      	mov	r7, r1
 801acbe:	4620      	mov	r0, r4
 801acc0:	4629      	mov	r1, r5
 801acc2:	f7e5 fae1 	bl	8000288 <__aeabi_dsub>
 801acc6:	4602      	mov	r2, r0
 801acc8:	460b      	mov	r3, r1
 801acca:	4640      	mov	r0, r8
 801accc:	4649      	mov	r1, r9
 801acce:	f7e5 fadb 	bl	8000288 <__aeabi_dsub>
 801acd2:	a371      	add	r3, pc, #452	; (adr r3, 801ae98 <__ieee754_pow+0xa00>)
 801acd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801acd8:	f7e5 fc8e 	bl	80005f8 <__aeabi_dmul>
 801acdc:	a370      	add	r3, pc, #448	; (adr r3, 801aea0 <__ieee754_pow+0xa08>)
 801acde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ace2:	4680      	mov	r8, r0
 801ace4:	4689      	mov	r9, r1
 801ace6:	4620      	mov	r0, r4
 801ace8:	4629      	mov	r1, r5
 801acea:	f7e5 fc85 	bl	80005f8 <__aeabi_dmul>
 801acee:	4602      	mov	r2, r0
 801acf0:	460b      	mov	r3, r1
 801acf2:	4640      	mov	r0, r8
 801acf4:	4649      	mov	r1, r9
 801acf6:	f7e5 fac9 	bl	800028c <__adddf3>
 801acfa:	4604      	mov	r4, r0
 801acfc:	460d      	mov	r5, r1
 801acfe:	4602      	mov	r2, r0
 801ad00:	460b      	mov	r3, r1
 801ad02:	4630      	mov	r0, r6
 801ad04:	4639      	mov	r1, r7
 801ad06:	f7e5 fac1 	bl	800028c <__adddf3>
 801ad0a:	4632      	mov	r2, r6
 801ad0c:	463b      	mov	r3, r7
 801ad0e:	4680      	mov	r8, r0
 801ad10:	4689      	mov	r9, r1
 801ad12:	f7e5 fab9 	bl	8000288 <__aeabi_dsub>
 801ad16:	4602      	mov	r2, r0
 801ad18:	460b      	mov	r3, r1
 801ad1a:	4620      	mov	r0, r4
 801ad1c:	4629      	mov	r1, r5
 801ad1e:	f7e5 fab3 	bl	8000288 <__aeabi_dsub>
 801ad22:	4642      	mov	r2, r8
 801ad24:	4606      	mov	r6, r0
 801ad26:	460f      	mov	r7, r1
 801ad28:	464b      	mov	r3, r9
 801ad2a:	4640      	mov	r0, r8
 801ad2c:	4649      	mov	r1, r9
 801ad2e:	f7e5 fc63 	bl	80005f8 <__aeabi_dmul>
 801ad32:	a35d      	add	r3, pc, #372	; (adr r3, 801aea8 <__ieee754_pow+0xa10>)
 801ad34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad38:	4604      	mov	r4, r0
 801ad3a:	460d      	mov	r5, r1
 801ad3c:	f7e5 fc5c 	bl	80005f8 <__aeabi_dmul>
 801ad40:	a35b      	add	r3, pc, #364	; (adr r3, 801aeb0 <__ieee754_pow+0xa18>)
 801ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad46:	f7e5 fa9f 	bl	8000288 <__aeabi_dsub>
 801ad4a:	4622      	mov	r2, r4
 801ad4c:	462b      	mov	r3, r5
 801ad4e:	f7e5 fc53 	bl	80005f8 <__aeabi_dmul>
 801ad52:	a359      	add	r3, pc, #356	; (adr r3, 801aeb8 <__ieee754_pow+0xa20>)
 801ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad58:	f7e5 fa98 	bl	800028c <__adddf3>
 801ad5c:	4622      	mov	r2, r4
 801ad5e:	462b      	mov	r3, r5
 801ad60:	f7e5 fc4a 	bl	80005f8 <__aeabi_dmul>
 801ad64:	a356      	add	r3, pc, #344	; (adr r3, 801aec0 <__ieee754_pow+0xa28>)
 801ad66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad6a:	f7e5 fa8d 	bl	8000288 <__aeabi_dsub>
 801ad6e:	4622      	mov	r2, r4
 801ad70:	462b      	mov	r3, r5
 801ad72:	f7e5 fc41 	bl	80005f8 <__aeabi_dmul>
 801ad76:	a354      	add	r3, pc, #336	; (adr r3, 801aec8 <__ieee754_pow+0xa30>)
 801ad78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad7c:	f7e5 fa86 	bl	800028c <__adddf3>
 801ad80:	4622      	mov	r2, r4
 801ad82:	462b      	mov	r3, r5
 801ad84:	f7e5 fc38 	bl	80005f8 <__aeabi_dmul>
 801ad88:	4602      	mov	r2, r0
 801ad8a:	460b      	mov	r3, r1
 801ad8c:	4640      	mov	r0, r8
 801ad8e:	4649      	mov	r1, r9
 801ad90:	f7e5 fa7a 	bl	8000288 <__aeabi_dsub>
 801ad94:	4604      	mov	r4, r0
 801ad96:	460d      	mov	r5, r1
 801ad98:	4602      	mov	r2, r0
 801ad9a:	460b      	mov	r3, r1
 801ad9c:	4640      	mov	r0, r8
 801ad9e:	4649      	mov	r1, r9
 801ada0:	f7e5 fc2a 	bl	80005f8 <__aeabi_dmul>
 801ada4:	2200      	movs	r2, #0
 801ada6:	ec41 0b19 	vmov	d9, r0, r1
 801adaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801adae:	4620      	mov	r0, r4
 801adb0:	4629      	mov	r1, r5
 801adb2:	f7e5 fa69 	bl	8000288 <__aeabi_dsub>
 801adb6:	4602      	mov	r2, r0
 801adb8:	460b      	mov	r3, r1
 801adba:	ec51 0b19 	vmov	r0, r1, d9
 801adbe:	f7e5 fd45 	bl	800084c <__aeabi_ddiv>
 801adc2:	4632      	mov	r2, r6
 801adc4:	4604      	mov	r4, r0
 801adc6:	460d      	mov	r5, r1
 801adc8:	463b      	mov	r3, r7
 801adca:	4640      	mov	r0, r8
 801adcc:	4649      	mov	r1, r9
 801adce:	f7e5 fc13 	bl	80005f8 <__aeabi_dmul>
 801add2:	4632      	mov	r2, r6
 801add4:	463b      	mov	r3, r7
 801add6:	f7e5 fa59 	bl	800028c <__adddf3>
 801adda:	4602      	mov	r2, r0
 801addc:	460b      	mov	r3, r1
 801adde:	4620      	mov	r0, r4
 801ade0:	4629      	mov	r1, r5
 801ade2:	f7e5 fa51 	bl	8000288 <__aeabi_dsub>
 801ade6:	4642      	mov	r2, r8
 801ade8:	464b      	mov	r3, r9
 801adea:	f7e5 fa4d 	bl	8000288 <__aeabi_dsub>
 801adee:	460b      	mov	r3, r1
 801adf0:	4602      	mov	r2, r0
 801adf2:	4939      	ldr	r1, [pc, #228]	; (801aed8 <__ieee754_pow+0xa40>)
 801adf4:	2000      	movs	r0, #0
 801adf6:	f7e5 fa47 	bl	8000288 <__aeabi_dsub>
 801adfa:	ec41 0b10 	vmov	d0, r0, r1
 801adfe:	ee10 3a90 	vmov	r3, s1
 801ae02:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801ae06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ae0a:	da2b      	bge.n	801ae64 <__ieee754_pow+0x9cc>
 801ae0c:	4650      	mov	r0, sl
 801ae0e:	f000 f877 	bl	801af00 <scalbn>
 801ae12:	ec51 0b10 	vmov	r0, r1, d0
 801ae16:	ec53 2b18 	vmov	r2, r3, d8
 801ae1a:	f7ff bbee 	b.w	801a5fa <__ieee754_pow+0x162>
 801ae1e:	4b2f      	ldr	r3, [pc, #188]	; (801aedc <__ieee754_pow+0xa44>)
 801ae20:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801ae24:	429e      	cmp	r6, r3
 801ae26:	f77f af0d 	ble.w	801ac44 <__ieee754_pow+0x7ac>
 801ae2a:	4b2d      	ldr	r3, [pc, #180]	; (801aee0 <__ieee754_pow+0xa48>)
 801ae2c:	440b      	add	r3, r1
 801ae2e:	4303      	orrs	r3, r0
 801ae30:	d009      	beq.n	801ae46 <__ieee754_pow+0x9ae>
 801ae32:	ec51 0b18 	vmov	r0, r1, d8
 801ae36:	2200      	movs	r2, #0
 801ae38:	2300      	movs	r3, #0
 801ae3a:	f7e5 fe4f 	bl	8000adc <__aeabi_dcmplt>
 801ae3e:	3800      	subs	r0, #0
 801ae40:	bf18      	it	ne
 801ae42:	2001      	movne	r0, #1
 801ae44:	e448      	b.n	801a6d8 <__ieee754_pow+0x240>
 801ae46:	4622      	mov	r2, r4
 801ae48:	462b      	mov	r3, r5
 801ae4a:	f7e5 fa1d 	bl	8000288 <__aeabi_dsub>
 801ae4e:	4642      	mov	r2, r8
 801ae50:	464b      	mov	r3, r9
 801ae52:	f7e5 fe57 	bl	8000b04 <__aeabi_dcmpge>
 801ae56:	2800      	cmp	r0, #0
 801ae58:	f43f aef4 	beq.w	801ac44 <__ieee754_pow+0x7ac>
 801ae5c:	e7e9      	b.n	801ae32 <__ieee754_pow+0x99a>
 801ae5e:	f04f 0a00 	mov.w	sl, #0
 801ae62:	e71a      	b.n	801ac9a <__ieee754_pow+0x802>
 801ae64:	ec51 0b10 	vmov	r0, r1, d0
 801ae68:	4619      	mov	r1, r3
 801ae6a:	e7d4      	b.n	801ae16 <__ieee754_pow+0x97e>
 801ae6c:	491a      	ldr	r1, [pc, #104]	; (801aed8 <__ieee754_pow+0xa40>)
 801ae6e:	2000      	movs	r0, #0
 801ae70:	f7ff bb31 	b.w	801a4d6 <__ieee754_pow+0x3e>
 801ae74:	2000      	movs	r0, #0
 801ae76:	2100      	movs	r1, #0
 801ae78:	f7ff bb2d 	b.w	801a4d6 <__ieee754_pow+0x3e>
 801ae7c:	4630      	mov	r0, r6
 801ae7e:	4639      	mov	r1, r7
 801ae80:	f7ff bb29 	b.w	801a4d6 <__ieee754_pow+0x3e>
 801ae84:	9204      	str	r2, [sp, #16]
 801ae86:	f7ff bb7b 	b.w	801a580 <__ieee754_pow+0xe8>
 801ae8a:	2300      	movs	r3, #0
 801ae8c:	f7ff bb65 	b.w	801a55a <__ieee754_pow+0xc2>
 801ae90:	00000000 	.word	0x00000000
 801ae94:	3fe62e43 	.word	0x3fe62e43
 801ae98:	fefa39ef 	.word	0xfefa39ef
 801ae9c:	3fe62e42 	.word	0x3fe62e42
 801aea0:	0ca86c39 	.word	0x0ca86c39
 801aea4:	be205c61 	.word	0xbe205c61
 801aea8:	72bea4d0 	.word	0x72bea4d0
 801aeac:	3e663769 	.word	0x3e663769
 801aeb0:	c5d26bf1 	.word	0xc5d26bf1
 801aeb4:	3ebbbd41 	.word	0x3ebbbd41
 801aeb8:	af25de2c 	.word	0xaf25de2c
 801aebc:	3f11566a 	.word	0x3f11566a
 801aec0:	16bebd93 	.word	0x16bebd93
 801aec4:	3f66c16c 	.word	0x3f66c16c
 801aec8:	5555553e 	.word	0x5555553e
 801aecc:	3fc55555 	.word	0x3fc55555
 801aed0:	3fe00000 	.word	0x3fe00000
 801aed4:	fff00000 	.word	0xfff00000
 801aed8:	3ff00000 	.word	0x3ff00000
 801aedc:	4090cbff 	.word	0x4090cbff
 801aee0:	3f6f3400 	.word	0x3f6f3400
 801aee4:	652b82fe 	.word	0x652b82fe
 801aee8:	3c971547 	.word	0x3c971547

0801aeec <fabs>:
 801aeec:	ec51 0b10 	vmov	r0, r1, d0
 801aef0:	ee10 2a10 	vmov	r2, s0
 801aef4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aef8:	ec43 2b10 	vmov	d0, r2, r3
 801aefc:	4770      	bx	lr
	...

0801af00 <scalbn>:
 801af00:	b570      	push	{r4, r5, r6, lr}
 801af02:	ec55 4b10 	vmov	r4, r5, d0
 801af06:	f3c5 510a 	ubfx	r1, r5, #20, #11
 801af0a:	4606      	mov	r6, r0
 801af0c:	462b      	mov	r3, r5
 801af0e:	b999      	cbnz	r1, 801af38 <scalbn+0x38>
 801af10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801af14:	4323      	orrs	r3, r4
 801af16:	d03f      	beq.n	801af98 <scalbn+0x98>
 801af18:	4b35      	ldr	r3, [pc, #212]	; (801aff0 <scalbn+0xf0>)
 801af1a:	4629      	mov	r1, r5
 801af1c:	ee10 0a10 	vmov	r0, s0
 801af20:	2200      	movs	r2, #0
 801af22:	f7e5 fb69 	bl	80005f8 <__aeabi_dmul>
 801af26:	4b33      	ldr	r3, [pc, #204]	; (801aff4 <scalbn+0xf4>)
 801af28:	429e      	cmp	r6, r3
 801af2a:	4604      	mov	r4, r0
 801af2c:	460d      	mov	r5, r1
 801af2e:	da10      	bge.n	801af52 <scalbn+0x52>
 801af30:	a327      	add	r3, pc, #156	; (adr r3, 801afd0 <scalbn+0xd0>)
 801af32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af36:	e01f      	b.n	801af78 <scalbn+0x78>
 801af38:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801af3c:	4291      	cmp	r1, r2
 801af3e:	d10c      	bne.n	801af5a <scalbn+0x5a>
 801af40:	ee10 2a10 	vmov	r2, s0
 801af44:	4620      	mov	r0, r4
 801af46:	4629      	mov	r1, r5
 801af48:	f7e5 f9a0 	bl	800028c <__adddf3>
 801af4c:	4604      	mov	r4, r0
 801af4e:	460d      	mov	r5, r1
 801af50:	e022      	b.n	801af98 <scalbn+0x98>
 801af52:	460b      	mov	r3, r1
 801af54:	f3c1 510a 	ubfx	r1, r1, #20, #11
 801af58:	3936      	subs	r1, #54	; 0x36
 801af5a:	f24c 3250 	movw	r2, #50000	; 0xc350
 801af5e:	4296      	cmp	r6, r2
 801af60:	dd0d      	ble.n	801af7e <scalbn+0x7e>
 801af62:	2d00      	cmp	r5, #0
 801af64:	a11c      	add	r1, pc, #112	; (adr r1, 801afd8 <scalbn+0xd8>)
 801af66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af6a:	da02      	bge.n	801af72 <scalbn+0x72>
 801af6c:	a11c      	add	r1, pc, #112	; (adr r1, 801afe0 <scalbn+0xe0>)
 801af6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801af72:	a319      	add	r3, pc, #100	; (adr r3, 801afd8 <scalbn+0xd8>)
 801af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 801af78:	f7e5 fb3e 	bl	80005f8 <__aeabi_dmul>
 801af7c:	e7e6      	b.n	801af4c <scalbn+0x4c>
 801af7e:	1872      	adds	r2, r6, r1
 801af80:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801af84:	428a      	cmp	r2, r1
 801af86:	dcec      	bgt.n	801af62 <scalbn+0x62>
 801af88:	2a00      	cmp	r2, #0
 801af8a:	dd08      	ble.n	801af9e <scalbn+0x9e>
 801af8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801af94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801af98:	ec45 4b10 	vmov	d0, r4, r5
 801af9c:	bd70      	pop	{r4, r5, r6, pc}
 801af9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801afa2:	da08      	bge.n	801afb6 <scalbn+0xb6>
 801afa4:	2d00      	cmp	r5, #0
 801afa6:	a10a      	add	r1, pc, #40	; (adr r1, 801afd0 <scalbn+0xd0>)
 801afa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 801afac:	dac0      	bge.n	801af30 <scalbn+0x30>
 801afae:	a10e      	add	r1, pc, #56	; (adr r1, 801afe8 <scalbn+0xe8>)
 801afb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 801afb4:	e7bc      	b.n	801af30 <scalbn+0x30>
 801afb6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801afba:	3236      	adds	r2, #54	; 0x36
 801afbc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801afc0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801afc4:	4620      	mov	r0, r4
 801afc6:	4b0c      	ldr	r3, [pc, #48]	; (801aff8 <scalbn+0xf8>)
 801afc8:	2200      	movs	r2, #0
 801afca:	e7d5      	b.n	801af78 <scalbn+0x78>
 801afcc:	f3af 8000 	nop.w
 801afd0:	c2f8f359 	.word	0xc2f8f359
 801afd4:	01a56e1f 	.word	0x01a56e1f
 801afd8:	8800759c 	.word	0x8800759c
 801afdc:	7e37e43c 	.word	0x7e37e43c
 801afe0:	8800759c 	.word	0x8800759c
 801afe4:	fe37e43c 	.word	0xfe37e43c
 801afe8:	c2f8f359 	.word	0xc2f8f359
 801afec:	81a56e1f 	.word	0x81a56e1f
 801aff0:	43500000 	.word	0x43500000
 801aff4:	ffff3cb0 	.word	0xffff3cb0
 801aff8:	3c900000 	.word	0x3c900000

0801affc <with_errno>:
 801affc:	b570      	push	{r4, r5, r6, lr}
 801affe:	4604      	mov	r4, r0
 801b000:	460d      	mov	r5, r1
 801b002:	4616      	mov	r6, r2
 801b004:	f7fc fb96 	bl	8017734 <__errno>
 801b008:	4629      	mov	r1, r5
 801b00a:	6006      	str	r6, [r0, #0]
 801b00c:	4620      	mov	r0, r4
 801b00e:	bd70      	pop	{r4, r5, r6, pc}

0801b010 <xflow>:
 801b010:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b012:	4614      	mov	r4, r2
 801b014:	461d      	mov	r5, r3
 801b016:	b108      	cbz	r0, 801b01c <xflow+0xc>
 801b018:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801b01c:	e9cd 2300 	strd	r2, r3, [sp]
 801b020:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b024:	4620      	mov	r0, r4
 801b026:	4629      	mov	r1, r5
 801b028:	f7e5 fae6 	bl	80005f8 <__aeabi_dmul>
 801b02c:	2222      	movs	r2, #34	; 0x22
 801b02e:	b003      	add	sp, #12
 801b030:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b034:	f7ff bfe2 	b.w	801affc <with_errno>

0801b038 <__math_uflow>:
 801b038:	b508      	push	{r3, lr}
 801b03a:	2200      	movs	r2, #0
 801b03c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801b040:	f7ff ffe6 	bl	801b010 <xflow>
 801b044:	ec41 0b10 	vmov	d0, r0, r1
 801b048:	bd08      	pop	{r3, pc}

0801b04a <__math_oflow>:
 801b04a:	b508      	push	{r3, lr}
 801b04c:	2200      	movs	r2, #0
 801b04e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801b052:	f7ff ffdd 	bl	801b010 <xflow>
 801b056:	ec41 0b10 	vmov	d0, r0, r1
 801b05a:	bd08      	pop	{r3, pc}

0801b05c <_init>:
 801b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b05e:	bf00      	nop
 801b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b062:	bc08      	pop	{r3}
 801b064:	469e      	mov	lr, r3
 801b066:	4770      	bx	lr

0801b068 <_fini>:
 801b068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b06a:	bf00      	nop
 801b06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b06e:	bc08      	pop	{r3}
 801b070:	469e      	mov	lr, r3
 801b072:	4770      	bx	lr
